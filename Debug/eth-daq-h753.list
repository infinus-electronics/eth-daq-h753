
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00024628  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003918  080248c8  080248c8  000258c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080281e0  080281e0  000291e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080281e8  080281e8  000291e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080281ec  080281ec  000291ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  080281f0  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002800  20000088  08028278  0002a088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002888  08028278  0002a888  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002e88  08028278  0002ae88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00043000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00030110  30000000  30000000  0009c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cd000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d5000  2**0
                  CONTENTS, READONLY
 14 .debug_info   000635f6  00000000  00000000  000d502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c046  00000000  00000000  00138624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000031b0  00000000  00000000  00144670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027df  00000000  00000000  00147820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f658  00000000  00000000  00149fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005cbb3  00000000  00000000  00199657  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191fe8  00000000  00000000  001f620a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  003881f2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d850  00000000  00000000  00388238  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00395a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080248b0 	.word	0x080248b0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	080248b0 	.word	0x080248b0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fe41 	bl	800232c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 ff57 	bl	801a628 <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba7      	ldr	r3, [pc, #668]	@ (8000a18 <main+0x378>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a5      	ldr	r0, [pc, #660]	@ (8000a1c <main+0x37c>)
 8000788:	f022 fb0d 	bl	8022da6 <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a3      	ldr	r0, [pc, #652]	@ (8000a20 <main+0x380>)
 8000794:	f022 fb07 	bl	8022da6 <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a1      	ldr	r0, [pc, #644]	@ (8000a24 <main+0x384>)
 80007a0:	f022 fb01 	bl	8022da6 <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	489f      	ldr	r0, [pc, #636]	@ (8000a28 <main+0x388>)
 80007ac:	f022 fafb 	bl	8022da6 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fbbb 	bl	8000f30 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fc67 	bl	800108c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f001 f8cd 	bl	800195c <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f022 f90f 	bl	80229e4 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fff1 	bl	80017ac <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 ff97 	bl	80016fc <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 ff49 	bl	8001664 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fccb 	bl	800116c <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fd21 	bl	800121c <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fd75 	bl	80012c8 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fdcb 	bl	8001378 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fe1b 	bl	800141c <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fc81 	bl	80010ec <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fe65 	bl	80014b8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007ee:	f000 fee9 	bl	80015c4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007f2:	4b8e      	ldr	r3, [pc, #568]	@ (8000a2c <main+0x38c>)
 80007f4:	4a8e      	ldr	r2, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f6:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f8:	4b8c      	ldr	r3, [pc, #560]	@ (8000a2c <main+0x38c>)
 80007fa:	4a8e      	ldr	r2, [pc, #568]	@ (8000a34 <main+0x394>)
 80007fc:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fe:	4b8b      	ldr	r3, [pc, #556]	@ (8000a2c <main+0x38c>)
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000804:	f3bf 8f4f 	dsb	sy
}
 8000808:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 800080a:	4b88      	ldr	r3, [pc, #544]	@ (8000a2c <main+0x38c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a87      	ldr	r2, [pc, #540]	@ (8000a2c <main+0x38c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000816:	4b88      	ldr	r3, [pc, #544]	@ (8000a38 <main+0x398>)
 8000818:	4a88      	ldr	r2, [pc, #544]	@ (8000a3c <main+0x39c>)
 800081a:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 800081c:	4b86      	ldr	r3, [pc, #536]	@ (8000a38 <main+0x398>)
 800081e:	4a85      	ldr	r2, [pc, #532]	@ (8000a34 <main+0x394>)
 8000820:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000822:	4b85      	ldr	r3, [pc, #532]	@ (8000a38 <main+0x398>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082e:	4b82      	ldr	r3, [pc, #520]	@ (8000a38 <main+0x398>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a81      	ldr	r2, [pc, #516]	@ (8000a38 <main+0x398>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF0000;
 800083a:	4b80      	ldr	r3, [pc, #512]	@ (8000a3c <main+0x39c>)
 800083c:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000840:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF0000;
 8000842:	4b7b      	ldr	r3, [pc, #492]	@ (8000a30 <main+0x390>)
 8000844:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8000848:	601a      	str	r2, [r3, #0]
  //TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 800084a:	4b7d      	ldr	r3, [pc, #500]	@ (8000a40 <main+0x3a0>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a7c      	ldr	r2, [pc, #496]	@ (8000a40 <main+0x3a0>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000856:	4b7a      	ldr	r3, [pc, #488]	@ (8000a40 <main+0x3a0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a79      	ldr	r2, [pc, #484]	@ (8000a40 <main+0x3a0>)
 800085c:	f023 0302 	bic.w	r3, r3, #2
 8000860:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 8000862:	4b77      	ldr	r3, [pc, #476]	@ (8000a40 <main+0x3a0>)
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	4a76      	ldr	r2, [pc, #472]	@ (8000a40 <main+0x3a0>)
 8000868:	f023 0308 	bic.w	r3, r3, #8
 800086c:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 800086e:	4b74      	ldr	r3, [pc, #464]	@ (8000a40 <main+0x3a0>)
 8000870:	68db      	ldr	r3, [r3, #12]
 8000872:	4a73      	ldr	r2, [pc, #460]	@ (8000a40 <main+0x3a0>)
 8000874:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000878:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 800087a:	4b71      	ldr	r3, [pc, #452]	@ (8000a40 <main+0x3a0>)
 800087c:	6a1b      	ldr	r3, [r3, #32]
 800087e:	4a70      	ldr	r2, [pc, #448]	@ (8000a40 <main+0x3a0>)
 8000880:	f043 0311 	orr.w	r3, r3, #17
 8000884:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000886:	4b6e      	ldr	r3, [pc, #440]	@ (8000a40 <main+0x3a0>)
 8000888:	695b      	ldr	r3, [r3, #20]
 800088a:	4a6d      	ldr	r2, [pc, #436]	@ (8000a40 <main+0x3a0>)
 800088c:	f043 0303 	orr.w	r3, r3, #3
 8000890:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 8000892:	4b6b      	ldr	r3, [pc, #428]	@ (8000a40 <main+0x3a0>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	4a6a      	ldr	r2, [pc, #424]	@ (8000a40 <main+0x3a0>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6013      	str	r3, [r2, #0]

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 800089e:	2200      	movs	r2, #0
 80008a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a4:	4867      	ldr	r0, [pc, #412]	@ (8000a44 <main+0x3a4>)
 80008a6:	f01c f9d5 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008b0:	4864      	ldr	r0, [pc, #400]	@ (8000a44 <main+0x3a4>)
 80008b2:	f01c f9cf 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b6:	2032      	movs	r0, #50	@ 0x32
 80008b8:	f019 ff48 	bl	801a74c <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008bc:	2201      	movs	r2, #1
 80008be:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c2:	4860      	ldr	r0, [pc, #384]	@ (8000a44 <main+0x3a4>)
 80008c4:	f01c f9c6 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c8:	2032      	movs	r0, #50	@ 0x32
 80008ca:	f019 ff3f 	bl	801a74c <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008ce:	4b5e      	ldr	r3, [pc, #376]	@ (8000a48 <main+0x3a8>)
 80008d0:	4a5e      	ldr	r2, [pc, #376]	@ (8000a4c <main+0x3ac>)
 80008d2:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008d4:	bf00      	nop
 80008d6:	4b5c      	ldr	r3, [pc, #368]	@ (8000a48 <main+0x3a8>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0312 	and.w	r3, r3, #18
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f9      	beq.n	80008d6 <main+0x236>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008e2:	4b59      	ldr	r3, [pc, #356]	@ (8000a48 <main+0x3a8>)
 80008e4:	2239      	movs	r2, #57	@ 0x39
 80008e6:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e8:	bf00      	nop
 80008ea:	4b57      	ldr	r3, [pc, #348]	@ (8000a48 <main+0x3a8>)
 80008ec:	699b      	ldr	r3, [r3, #24]
 80008ee:	f003 0302 	and.w	r3, r3, #2
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d0f9      	beq.n	80008ea <main+0x24a>
  I2C4->TXDR = 0; //MSB
 80008f6:	4b54      	ldr	r3, [pc, #336]	@ (8000a48 <main+0x3a8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008fc:	bf00      	nop
 80008fe:	4b52      	ldr	r3, [pc, #328]	@ (8000a48 <main+0x3a8>)
 8000900:	699b      	ldr	r3, [r3, #24]
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f9      	beq.n	80008fe <main+0x25e>
  I2C4->TXDR = 4; //LSB
 800090a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a48 <main+0x3a8>)
 800090c:	2204      	movs	r2, #4
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 8000910:	bf00      	nop
 8000912:	4b4d      	ldr	r3, [pc, #308]	@ (8000a48 <main+0x3a8>)
 8000914:	699b      	ldr	r3, [r3, #24]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	2b00      	cmp	r3, #0
 800091c:	d0f9      	beq.n	8000912 <main+0x272>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 800091e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a48 <main+0x3a8>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	f003 0310 	and.w	r3, r3, #16
 8000926:	2b00      	cmp	r3, #0
 8000928:	d005      	beq.n	8000936 <main+0x296>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 800092a:	4b47      	ldr	r3, [pc, #284]	@ (8000a48 <main+0x3a8>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a46      	ldr	r2, [pc, #280]	@ (8000a48 <main+0x3a8>)
 8000930:	f043 0310 	orr.w	r3, r3, #16
 8000934:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 8000936:	4b46      	ldr	r3, [pc, #280]	@ (8000a50 <main+0x3b0>)
 8000938:	4a38      	ldr	r2, [pc, #224]	@ (8000a1c <main+0x37c>)
 800093a:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 800093c:	4b44      	ldr	r3, [pc, #272]	@ (8000a50 <main+0x3b0>)
 800093e:	4a38      	ldr	r2, [pc, #224]	@ (8000a20 <main+0x380>)
 8000940:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 8000942:	4b43      	ldr	r3, [pc, #268]	@ (8000a50 <main+0x3b0>)
 8000944:	4a43      	ldr	r2, [pc, #268]	@ (8000a54 <main+0x3b4>)
 8000946:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 8000948:	4b41      	ldr	r3, [pc, #260]	@ (8000a50 <main+0x3b0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a40      	ldr	r2, [pc, #256]	@ (8000a50 <main+0x3b0>)
 800094e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000952:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 8000954:	4b3e      	ldr	r3, [pc, #248]	@ (8000a50 <main+0x3b0>)
 8000956:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800095a:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 800095c:	4b3c      	ldr	r3, [pc, #240]	@ (8000a50 <main+0x3b0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a3b      	ldr	r2, [pc, #236]	@ (8000a50 <main+0x3b0>)
 8000962:	f043 0310 	orr.w	r3, r3, #16
 8000966:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000968:	f3bf 8f4f 	dsb	sy
}
 800096c:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 800096e:	4b38      	ldr	r3, [pc, #224]	@ (8000a50 <main+0x3b0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a37      	ldr	r2, [pc, #220]	@ (8000a50 <main+0x3b0>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 800097a:	4b37      	ldr	r3, [pc, #220]	@ (8000a58 <main+0x3b8>)
 800097c:	4a29      	ldr	r2, [pc, #164]	@ (8000a24 <main+0x384>)
 800097e:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <main+0x3b8>)
 8000982:	4a29      	ldr	r2, [pc, #164]	@ (8000a28 <main+0x388>)
 8000984:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000986:	4b34      	ldr	r3, [pc, #208]	@ (8000a58 <main+0x3b8>)
 8000988:	4a34      	ldr	r2, [pc, #208]	@ (8000a5c <main+0x3bc>)
 800098a:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 800098c:	4b32      	ldr	r3, [pc, #200]	@ (8000a58 <main+0x3b8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a31      	ldr	r2, [pc, #196]	@ (8000a58 <main+0x3b8>)
 8000992:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000996:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000998:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <main+0x3b8>)
 800099a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800099e:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 80009a0:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <main+0x3b8>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a2c      	ldr	r2, [pc, #176]	@ (8000a58 <main+0x3b8>)
 80009a6:	f043 0310 	orr.w	r3, r3, #16
 80009aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ac:	f3bf 8f4f 	dsb	sy
}
 80009b0:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009b2:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <main+0x3b8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a28      	ldr	r2, [pc, #160]	@ (8000a58 <main+0x3b8>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009be:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <main+0x3c0>)
 80009c0:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <main+0x378>)
 80009c2:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <main+0x3c0>)
 80009c6:	4a27      	ldr	r2, [pc, #156]	@ (8000a64 <main+0x3c4>)
 80009c8:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009ca:	4b25      	ldr	r3, [pc, #148]	@ (8000a60 <main+0x3c0>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009d0:	f3bf 8f4f 	dsb	sy
}
 80009d4:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009d6:	4b22      	ldr	r3, [pc, #136]	@ (8000a60 <main+0x3c0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	4a21      	ldr	r2, [pc, #132]	@ (8000a60 <main+0x3c0>)
 80009dc:	f043 0301 	orr.w	r3, r3, #1
 80009e0:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009e2:	4b21      	ldr	r3, [pc, #132]	@ (8000a68 <main+0x3c8>)
 80009e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000a18 <main+0x378>)
 80009e6:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <main+0x3c8>)
 80009ea:	4a20      	ldr	r2, [pc, #128]	@ (8000a6c <main+0x3cc>)
 80009ec:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009ee:	4b1e      	ldr	r3, [pc, #120]	@ (8000a68 <main+0x3c8>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f4:	f3bf 8f4f 	dsb	sy
}
 80009f8:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <main+0x3c8>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000a68 <main+0x3c8>)
 8000a00:	f043 0301 	orr.w	r3, r3, #1
 8000a04:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR2 = 0; //reinitialize tsize
 8000a06:	4b1a      	ldr	r3, [pc, #104]	@ (8000a70 <main+0x3d0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	@ (8000a70 <main+0x3d0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a17      	ldr	r2, [pc, #92]	@ (8000a70 <main+0x3d0>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	e02d      	b.n	8000a74 <main+0x3d4>
 8000a18:	30000000 	.word	0x30000000
 8000a1c:	30000004 	.word	0x30000004
 8000a20:	30010004 	.word	0x30010004
 8000a24:	30020004 	.word	0x30020004
 8000a28:	30028004 	.word	0x30028004
 8000a2c:	40020070 	.word	0x40020070
 8000a30:	30030108 	.word	0x30030108
 8000a34:	58020c18 	.word	0x58020c18
 8000a38:	40020088 	.word	0x40020088
 8000a3c:	3003010c 	.word	0x3003010c
 8000a40:	40000800 	.word	0x40000800
 8000a44:	58020c00 	.word	0x58020c00
 8000a48:	58001c00 	.word	0x58001c00
 8000a4c:	02032018 	.word	0x02032018
 8000a50:	40020010 	.word	0x40020010
 8000a54:	40013030 	.word	0x40013030
 8000a58:	40020028 	.word	0x40020028
 8000a5c:	40003830 	.word	0x40003830
 8000a60:	40020040 	.word	0x40020040
 8000a64:	40013020 	.word	0x40013020
 8000a68:	40020058 	.word	0x40020058
 8000a6c:	40003820 	.word	0x40003820
 8000a70:	40013000 	.word	0x40013000
 8000a74:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000a76:	4ba4      	ldr	r3, [pc, #656]	@ (8000d08 <main+0x668>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4aa3      	ldr	r2, [pc, #652]	@ (8000d08 <main+0x668>)
 8000a7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a80:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a88:	48a0      	ldr	r0, [pc, #640]	@ (8000d0c <main+0x66c>)
 8000a8a:	f01c f8e3 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a8e:	2064      	movs	r0, #100	@ 0x64
 8000a90:	f019 fe5c 	bl	801a74c <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a9a:	489c      	ldr	r0, [pc, #624]	@ (8000d0c <main+0x66c>)
 8000a9c:	f01c f8da 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000aa0:	2064      	movs	r0, #100	@ 0x64
 8000aa2:	f019 fe53 	bl	801a74c <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000aa6:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000aaa:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000aac:	7a7b      	ldrb	r3, [r7, #9]
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	7a3a      	ldrb	r2, [r7, #8]
 8000ab2:	431a      	orrs	r2, r3
 8000ab4:	4b94      	ldr	r3, [pc, #592]	@ (8000d08 <main+0x668>)
 8000ab6:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ab8:	bf00      	nop
 8000aba:	4b93      	ldr	r3, [pc, #588]	@ (8000d08 <main+0x668>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f9      	beq.n	8000aba <main+0x41a>
  spi_data[1]++;
 8000ac6:	7a7b      	ldrb	r3, [r7, #9]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; //sync control mode
 8000ace:	2310      	movs	r3, #16
 8000ad0:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ad2:	7a7b      	ldrb	r3, [r7, #9]
 8000ad4:	021b      	lsls	r3, r3, #8
 8000ad6:	7a3a      	ldrb	r2, [r7, #8]
 8000ad8:	431a      	orrs	r2, r3
 8000ada:	4b8b      	ldr	r3, [pc, #556]	@ (8000d08 <main+0x668>)
 8000adc:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ade:	bf00      	nop
 8000ae0:	4b89      	ldr	r3, [pc, #548]	@ (8000d08 <main+0x668>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f9      	beq.n	8000ae0 <main+0x440>
  spi_data[1]++;
 8000aec:	7a7b      	ldrb	r3, [r7, #9]
 8000aee:	3301      	adds	r3, #1
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000af4:	2309      	movs	r3, #9
 8000af6:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000af8:	7a7b      	ldrb	r3, [r7, #9]
 8000afa:	021b      	lsls	r3, r3, #8
 8000afc:	7a3a      	ldrb	r2, [r7, #8]
 8000afe:	431a      	orrs	r2, r3
 8000b00:	4b81      	ldr	r3, [pc, #516]	@ (8000d08 <main+0x668>)
 8000b02:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b04:	bf00      	nop
 8000b06:	4b80      	ldr	r3, [pc, #512]	@ (8000d08 <main+0x668>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f9      	beq.n	8000b06 <main+0x466>
  spi_data[1]++;
 8000b12:	7a7b      	ldrb	r3, [r7, #9]
 8000b14:	3301      	adds	r3, #1
 8000b16:	b2db      	uxtb	r3, r3
 8000b18:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b10000000; //external clock
 8000b1a:	2380      	movs	r3, #128	@ 0x80
 8000b1c:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b1e:	7a7b      	ldrb	r3, [r7, #9]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	7a3a      	ldrb	r2, [r7, #8]
 8000b24:	431a      	orrs	r2, r3
 8000b26:	4b78      	ldr	r3, [pc, #480]	@ (8000d08 <main+0x668>)
 8000b28:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b2a:	bf00      	nop
 8000b2c:	4b76      	ldr	r3, [pc, #472]	@ (8000d08 <main+0x668>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f9      	beq.n	8000b2c <main+0x48c>
  spi_data[1]=0x80+0x03; //start conversion
 8000b38:	2383      	movs	r3, #131	@ 0x83
 8000b3a:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b00000010;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b40:	7a7b      	ldrb	r3, [r7, #9]
 8000b42:	021b      	lsls	r3, r3, #8
 8000b44:	7a3a      	ldrb	r2, [r7, #8]
 8000b46:	431a      	orrs	r2, r3
 8000b48:	4b6f      	ldr	r3, [pc, #444]	@ (8000d08 <main+0x668>)
 8000b4a:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b4c:	bf00      	nop
 8000b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <main+0x668>)
 8000b50:	695b      	ldr	r3, [r3, #20]
 8000b52:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d0f9      	beq.n	8000b4e <main+0x4ae>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b5a:	4b6b      	ldr	r3, [pc, #428]	@ (8000d08 <main+0x668>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a6a      	ldr	r2, [pc, #424]	@ (8000d08 <main+0x668>)
 8000b60:	f023 0301 	bic.w	r3, r3, #1
 8000b64:	6013      	str	r3, [r2, #0]

  //GADC Setup
  SPI2->CR2 = 0; //reinitialize tsize
 8000b66:	4b6a      	ldr	r3, [pc, #424]	@ (8000d10 <main+0x670>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; //use 32 bit mode for config
 8000b6c:	4b68      	ldr	r3, [pc, #416]	@ (8000d10 <main+0x670>)
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	4a67      	ldr	r2, [pc, #412]	@ (8000d10 <main+0x670>)
 8000b72:	f043 031f 	orr.w	r3, r3, #31
 8000b76:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b78:	4b65      	ldr	r3, [pc, #404]	@ (8000d10 <main+0x670>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a64      	ldr	r2, [pc, #400]	@ (8000d10 <main+0x670>)
 8000b7e:	f043 0301 	orr.w	r3, r3, #1
 8000b82:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000b84:	4b62      	ldr	r3, [pc, #392]	@ (8000d10 <main+0x670>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a61      	ldr	r2, [pc, #388]	@ (8000d10 <main+0x670>)
 8000b8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b8e:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000b90:	2200      	movs	r2, #0
 8000b92:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b96:	485f      	ldr	r0, [pc, #380]	@ (8000d14 <main+0x674>)
 8000b98:	f01c f85c 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000b9c:	2064      	movs	r0, #100	@ 0x64
 8000b9e:	f019 fdd5 	bl	801a74c <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba8:	485a      	ldr	r0, [pc, #360]	@ (8000d14 <main+0x674>)
 8000baa:	f01c f853 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bae:	2064      	movs	r0, #100	@ 0x64
 8000bb0:	f019 fdcc 	bl	801a74c <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1<<5) | (1<<4)}; //disable alarms
 8000bb4:	4b58      	ldr	r3, [pc, #352]	@ (8000d18 <main+0x678>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bba:	88bb      	ldrh	r3, [r7, #4]
 8000bbc:	041b      	lsls	r3, r3, #16
 8000bbe:	88fa      	ldrh	r2, [r7, #6]
 8000bc0:	431a      	orrs	r2, r3
 8000bc2:	4b53      	ldr	r3, [pc, #332]	@ (8000d10 <main+0x670>)
 8000bc4:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000bc6:	bf00      	nop
 8000bc8:	4b51      	ldr	r3, [pc, #324]	@ (8000d10 <main+0x670>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d0f9      	beq.n	8000bc8 <main+0x528>
  ucGADCSPIData[0] = 0b1101000000010100; //14h
 8000bd4:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000bd8:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10; //range select +-1.5x VREF
 8000bda:	2302      	movs	r3, #2
 8000bdc:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	041b      	lsls	r3, r3, #16
 8000be2:	88fa      	ldrh	r2, [r7, #6]
 8000be4:	431a      	orrs	r2, r3
 8000be6:	4b4a      	ldr	r3, [pc, #296]	@ (8000d10 <main+0x670>)
 8000be8:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){};
 8000bea:	bf00      	nop
 8000bec:	4b48      	ldr	r3, [pc, #288]	@ (8000d10 <main+0x670>)
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f9      	beq.n	8000bec <main+0x54c>
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000bf8:	4b45      	ldr	r3, [pc, #276]	@ (8000d10 <main+0x670>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a44      	ldr	r2, [pc, #272]	@ (8000d10 <main+0x670>)
 8000bfe:	f023 0301 	bic.w	r3, r3, #1
 8000c02:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c04:	4b42      	ldr	r3, [pc, #264]	@ (8000d10 <main+0x670>)
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	4a41      	ldr	r2, [pc, #260]	@ (8000d10 <main+0x670>)
 8000c0a:	f023 031f 	bic.w	r3, r3, #31
 8000c0e:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; //switch back to 16 bit transfers
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <main+0x670>)
 8000c12:	689b      	ldr	r3, [r3, #8]
 8000c14:	4a3e      	ldr	r2, [pc, #248]	@ (8000d10 <main+0x670>)
 8000c16:	f043 030f 	orr.w	r3, r3, #15
 8000c1a:	6093      	str	r3, [r2, #8]

  //TC ADC SETUP
  //interleave temp sensor and internal ADC
  usTCADCConfig[0] = 0b1000101110001010; //FSR 0.256mV, 128SPS, Single Conversion, Start Conversion, Default Inputs
 8000c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d1c <main+0x67c>)
 8000c1e:	f648 328a 	movw	r2, #35722	@ 0x8b8a
 8000c22:	801a      	strh	r2, [r3, #0]
  usTCADCConfig[1] = 0b1000101110011010; //same as above, use internal temp sensor
 8000c24:	4b3d      	ldr	r3, [pc, #244]	@ (8000d1c <main+0x67c>)
 8000c26:	f648 329a 	movw	r2, #35738	@ 0x8b9a
 8000c2a:	805a      	strh	r2, [r3, #2]
  //TIM5 UP
  DMA1_Stream6->M0AR = usTCADCConfig;
 8000c2c:	4b3c      	ldr	r3, [pc, #240]	@ (8000d20 <main+0x680>)
 8000c2e:	4a3b      	ldr	r2, [pc, #236]	@ (8000d1c <main+0x67c>)
 8000c30:	60da      	str	r2, [r3, #12]
  DMA1_Stream6->PAR = &(SPI3->TXDR);
 8000c32:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <main+0x680>)
 8000c34:	4a3b      	ldr	r2, [pc, #236]	@ (8000d24 <main+0x684>)
 8000c36:	609a      	str	r2, [r3, #8]
  DMA1_Stream6->NDTR = 2;
 8000c38:	4b39      	ldr	r3, [pc, #228]	@ (8000d20 <main+0x680>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3e:	f3bf 8f4f 	dsb	sy
}
 8000c42:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream6->CR |= DMA_SxCR_EN;
 8000c44:	4b36      	ldr	r3, [pc, #216]	@ (8000d20 <main+0x680>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a35      	ldr	r2, [pc, #212]	@ (8000d20 <main+0x680>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]
  //SPI3 RX Stream
  DMA1_Stream7->M0AR = usTCADCData0;
 8000c50:	4b35      	ldr	r3, [pc, #212]	@ (8000d28 <main+0x688>)
 8000c52:	4a36      	ldr	r2, [pc, #216]	@ (8000d2c <main+0x68c>)
 8000c54:	60da      	str	r2, [r3, #12]
  DMA1_Stream7->M1AR = usTCADCData1;
 8000c56:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <main+0x688>)
 8000c58:	4a35      	ldr	r2, [pc, #212]	@ (8000d30 <main+0x690>)
 8000c5a:	611a      	str	r2, [r3, #16]
  DMA1_Stream7->PAR = &(SPI3->RXDR);
 8000c5c:	4b32      	ldr	r3, [pc, #200]	@ (8000d28 <main+0x688>)
 8000c5e:	4a35      	ldr	r2, [pc, #212]	@ (8000d34 <main+0x694>)
 8000c60:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->CR |= DMA_DOUBLE_BUFFER_M0;
 8000c62:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <main+0x688>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a30      	ldr	r2, [pc, #192]	@ (8000d28 <main+0x688>)
 8000c68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c6c:	6013      	str	r3, [r2, #0]
  DMA1_Stream7->NDTR = TC_ADC_BUFFER_HALF_SIZE;
 8000c6e:	4b2e      	ldr	r3, [pc, #184]	@ (8000d28 <main+0x688>)
 8000c70:	2240      	movs	r2, #64	@ 0x40
 8000c72:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream7->CR |= DMA_SxCR_TCIE;
 8000c74:	4b2c      	ldr	r3, [pc, #176]	@ (8000d28 <main+0x688>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a2b      	ldr	r2, [pc, #172]	@ (8000d28 <main+0x688>)
 8000c7a:	f043 0310 	orr.w	r3, r3, #16
 8000c7e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c80:	f3bf 8f4f 	dsb	sy
}
 8000c84:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000c86:	4b28      	ldr	r3, [pc, #160]	@ (8000d28 <main+0x688>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a27      	ldr	r2, [pc, #156]	@ (8000d28 <main+0x688>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6013      	str	r3, [r2, #0]
  //SPI3 Config
  SPI3->CR2 = 0; //reinitialize tsize
 8000c92:	4b29      	ldr	r3, [pc, #164]	@ (8000d38 <main+0x698>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	605a      	str	r2, [r3, #4]
  SPI3->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c98:	4b27      	ldr	r3, [pc, #156]	@ (8000d38 <main+0x698>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	4a26      	ldr	r2, [pc, #152]	@ (8000d38 <main+0x698>)
 8000c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca2:	6093      	str	r3, [r2, #8]
  SPI3->CR1 |= SPI_CR1_SPE;
 8000ca4:	4b24      	ldr	r3, [pc, #144]	@ (8000d38 <main+0x698>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a23      	ldr	r2, [pc, #140]	@ (8000d38 <main+0x698>)
 8000caa:	f043 0301 	orr.w	r3, r3, #1
 8000cae:	6013      	str	r3, [r2, #0]
  SPI3->CR1 |= SPI_CR1_CSTART;
 8000cb0:	4b21      	ldr	r3, [pc, #132]	@ (8000d38 <main+0x698>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a20      	ldr	r2, [pc, #128]	@ (8000d38 <main+0x698>)
 8000cb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cba:	6013      	str	r3, [r2, #0]
  //enable TIM5 (SPI3 TX)
  TIM5->CR1 |= TIM_CR1_URS;
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <main+0x69c>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <main+0x69c>)
 8000cc2:	f043 0304 	orr.w	r3, r3, #4
 8000cc6:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= ~TIM_CR1_UDIS;
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <main+0x69c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8000d3c <main+0x69c>)
 8000cce:	f023 0302 	bic.w	r3, r3, #2
 8000cd2:	6013      	str	r3, [r2, #0]
  TIM5->DIER |= TIM_DMA_UPDATE;
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <main+0x69c>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <main+0x69c>)
 8000cda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cde:	60d3      	str	r3, [r2, #12]
  TIM5->EGR |= TIM_EGR_UG;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <main+0x69c>)
 8000ce2:	695b      	ldr	r3, [r3, #20]
 8000ce4:	4a15      	ldr	r2, [pc, #84]	@ (8000d3c <main+0x69c>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6153      	str	r3, [r2, #20]
  TIM5->CR1 |= TIM_CR1_CEN;
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <main+0x69c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a12      	ldr	r2, [pc, #72]	@ (8000d3c <main+0x69c>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2120      	movs	r1, #32
 8000cfc:	4810      	ldr	r0, [pc, #64]	@ (8000d40 <main+0x6a0>)
 8000cfe:	f01b ffa9 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2104      	movs	r1, #4
 8000d06:	e01d      	b.n	8000d44 <main+0x6a4>
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	58020000 	.word	0x58020000
 8000d10:	40003800 	.word	0x40003800
 8000d14:	58020c00 	.word	0x58020c00
 8000d18:	08024904 	.word	0x08024904
 8000d1c:	30030004 	.word	0x30030004
 8000d20:	400200a0 	.word	0x400200a0
 8000d24:	40003c20 	.word	0x40003c20
 8000d28:	400200b8 	.word	0x400200b8
 8000d2c:	30030008 	.word	0x30030008
 8000d30:	30030088 	.word	0x30030088
 8000d34:	40003c30 	.word	0x40003c30
 8000d38:	40003c00 	.word	0x40003c00
 8000d3c:	40000c00 	.word	0x40000c00
 8000d40:	58021000 	.word	0x58021000
 8000d44:	485f      	ldr	r0, [pc, #380]	@ (8000ec4 <main+0x824>)
 8000d46:	f01b ff85 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2110      	movs	r1, #16
 8000d4e:	485d      	ldr	r0, [pc, #372]	@ (8000ec4 <main+0x824>)
 8000d50:	f01b ff80 	bl	801cc54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2108      	movs	r1, #8
 8000d58:	485a      	ldr	r0, [pc, #360]	@ (8000ec4 <main+0x824>)
 8000d5a:	f01b ff7b 	bl	801cc54 <HAL_GPIO_WritePin>

  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000d5e:	4b5a      	ldr	r3, [pc, #360]	@ (8000ec8 <main+0x828>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d64:	4b58      	ldr	r3, [pc, #352]	@ (8000ec8 <main+0x828>)
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	4a57      	ldr	r2, [pc, #348]	@ (8000ec8 <main+0x828>)
 8000d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6e:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000d70:	4b55      	ldr	r3, [pc, #340]	@ (8000ec8 <main+0x828>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a54      	ldr	r2, [pc, #336]	@ (8000ec8 <main+0x828>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000d7c:	4b52      	ldr	r3, [pc, #328]	@ (8000ec8 <main+0x828>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a51      	ldr	r2, [pc, #324]	@ (8000ec8 <main+0x828>)
 8000d82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d86:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CR2 = 0; //reinitialize tsize
 8000d88:	4b50      	ldr	r3, [pc, #320]	@ (8000ecc <main+0x82c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	@ (8000ecc <main+0x82c>)
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4a4e      	ldr	r2, [pc, #312]	@ (8000ecc <main+0x82c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d98:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8000ecc <main+0x82c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a4b      	ldr	r2, [pc, #300]	@ (8000ecc <main+0x82c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000da6:	4b49      	ldr	r3, [pc, #292]	@ (8000ecc <main+0x82c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a48      	ldr	r2, [pc, #288]	@ (8000ecc <main+0x82c>)
 8000dac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000db0:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000db2:	4b47      	ldr	r3, [pc, #284]	@ (8000ed0 <main+0x830>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a46      	ldr	r2, [pc, #280]	@ (8000ed0 <main+0x830>)
 8000db8:	f043 0304 	orr.w	r3, r3, #4
 8000dbc:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000dbe:	4b44      	ldr	r3, [pc, #272]	@ (8000ed0 <main+0x830>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a43      	ldr	r2, [pc, #268]	@ (8000ed0 <main+0x830>)
 8000dc4:	f023 0302 	bic.w	r3, r3, #2
 8000dc8:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000dca:	4b41      	ldr	r3, [pc, #260]	@ (8000ed0 <main+0x830>)
 8000dcc:	68db      	ldr	r3, [r3, #12]
 8000dce:	4a40      	ldr	r2, [pc, #256]	@ (8000ed0 <main+0x830>)
 8000dd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd4:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000dd6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ed0 <main+0x830>)
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4a3d      	ldr	r2, [pc, #244]	@ (8000ed0 <main+0x830>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000de2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ed0 <main+0x830>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a3a      	ldr	r2, [pc, #232]	@ (8000ed0 <main+0x830>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000dee:	4b39      	ldr	r3, [pc, #228]	@ (8000ed4 <main+0x834>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a38      	ldr	r2, [pc, #224]	@ (8000ed4 <main+0x834>)
 8000df4:	f043 0304 	orr.w	r3, r3, #4
 8000df8:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000dfa:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <main+0x834>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a35      	ldr	r2, [pc, #212]	@ (8000ed4 <main+0x834>)
 8000e00:	f023 0302 	bic.w	r3, r3, #2
 8000e04:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000e06:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <main+0x834>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	4a32      	ldr	r2, [pc, #200]	@ (8000ed4 <main+0x834>)
 8000e0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e10:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000e12:	4b30      	ldr	r3, [pc, #192]	@ (8000ed4 <main+0x834>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	4a2f      	ldr	r2, [pc, #188]	@ (8000ed4 <main+0x834>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ed4 <main+0x834>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a2c      	ldr	r2, [pc, #176]	@ (8000ed4 <main+0x834>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	6013      	str	r3, [r2, #0]


  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000e2a:	492b      	ldr	r1, [pc, #172]	@ (8000ed8 <main+0x838>)
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f017 fd2f 	bl	8018890 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000e32:	4b2a      	ldr	r3, [pc, #168]	@ (8000edc <main+0x83c>)
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee0 <main+0x840>)
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee4 <main+0x844>)
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ee8 <main+0x848>)
 8000e40:	4a2a      	ldr	r2, [pc, #168]	@ (8000eec <main+0x84c>)
 8000e42:	492b      	ldr	r1, [pc, #172]	@ (8000ef0 <main+0x850>)
 8000e44:	4824      	ldr	r0, [pc, #144]	@ (8000ed8 <main+0x838>)
 8000e46:	f00c fce3 	bl	800d810 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000e4a:	f008 fe31 	bl	8009ab0 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000e4e:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <main+0x854>)
 8000e50:	9301      	str	r3, [sp, #4]
 8000e52:	2300      	movs	r3, #0
 8000e54:	9300      	str	r3, [sp, #0]
 8000e56:	2300      	movs	r3, #0
 8000e58:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e5c:	4926      	ldr	r1, [pc, #152]	@ (8000ef8 <main+0x858>)
 8000e5e:	4827      	ldr	r0, [pc, #156]	@ (8000efc <main+0x85c>)
 8000e60:	f003 fb60 	bl	8004524 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "HSADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000e64:	4b26      	ldr	r3, [pc, #152]	@ (8000f00 <main+0x860>)
 8000e66:	9301      	str	r3, [sp, #4]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e72:	4924      	ldr	r1, [pc, #144]	@ (8000f04 <main+0x864>)
 8000e74:	4824      	ldr	r0, [pc, #144]	@ (8000f08 <main+0x868>)
 8000e76:	f003 fb55 	bl	8004524 <xTaskCreate>
      xTaskCreate ( vAuxADCTCPTask, "GADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000e7a:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <main+0x86c>)
 8000e7c:	9301      	str	r3, [sp, #4]
 8000e7e:	2301      	movs	r3, #1
 8000e80:	9300      	str	r3, [sp, #0]
 8000e82:	2300      	movs	r3, #0
 8000e84:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e88:	4921      	ldr	r1, [pc, #132]	@ (8000f10 <main+0x870>)
 8000e8a:	4822      	ldr	r0, [pc, #136]	@ (8000f14 <main+0x874>)
 8000e8c:	f003 fb4a 	bl	8004524 <xTaskCreate>
      xTaskCreate ( vTCADCTCPTask, "TCADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vTCADCTCPTaskHandle);
 8000e90:	4b21      	ldr	r3, [pc, #132]	@ (8000f18 <main+0x878>)
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	2301      	movs	r3, #1
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e9e:	491f      	ldr	r1, [pc, #124]	@ (8000f1c <main+0x87c>)
 8000ea0:	481f      	ldr	r0, [pc, #124]	@ (8000f20 <main+0x880>)
 8000ea2:	f003 fb3f 	bl	8004524 <xTaskCreate>
      xTaskCreate ( vCommandServerTask, "CommandServer", mainTCP_SERVER_STACK_SIZE, NULL, tskIDLE_PRIORITY, &vCommandServerTaskHandle);
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <main+0x884>)
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000eb4:	491c      	ldr	r1, [pc, #112]	@ (8000f28 <main+0x888>)
 8000eb6:	481d      	ldr	r0, [pc, #116]	@ (8000f2c <main+0x88c>)
 8000eb8:	f003 fb34 	bl	8004524 <xTaskCreate>
      vTaskStartScheduler();
 8000ebc:	f003 fd8c 	bl	80049d8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <main+0x820>
 8000ec4:	58021000 	.word	0x58021000
 8000ec8:	40013000 	.word	0x40013000
 8000ecc:	40003800 	.word	0x40003800
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	40000400 	.word	0x40000400
 8000ed8:	20000860 	.word	0x20000860
 8000edc:	08027e7c 	.word	0x08027e7c
 8000ee0:	08027e78 	.word	0x08027e78
 8000ee4:	08027e74 	.word	0x08027e74
 8000ee8:	08027e70 	.word	0x08027e70
 8000eec:	08027e6c 	.word	0x08027e6c
 8000ef0:	20000888 	.word	0x20000888
 8000ef4:	20000d30 	.word	0x20000d30
 8000ef8:	080248c8 	.word	0x080248c8
 8000efc:	08001b89 	.word	0x08001b89
 8000f00:	20000d34 	.word	0x20000d34
 8000f04:	080248d0 	.word	0x080248d0
 8000f08:	08001bb1 	.word	0x08001bb1
 8000f0c:	20000d38 	.word	0x20000d38
 8000f10:	080248dc 	.word	0x080248dc
 8000f14:	08001d69 	.word	0x08001d69
 8000f18:	20000d3c 	.word	0x20000d3c
 8000f1c:	080248e8 	.word	0x080248e8
 8000f20:	08001f21 	.word	0x08001f21
 8000f24:	20000d40 	.word	0x20000d40
 8000f28:	080248f4 	.word	0x080248f4
 8000f2c:	080020d9 	.word	0x080020d9

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b09e      	sub	sp, #120	@ 0x78
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f3a:	224c      	movs	r2, #76	@ 0x4c
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f021 ff31 	bl	8022da6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2220      	movs	r2, #32
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f021 ff2a 	bl	8022da6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f52:	2002      	movs	r0, #2
 8000f54:	f01b ffcc 	bl	801cef0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	4b48      	ldr	r3, [pc, #288]	@ (8001080 <SystemClock_Config+0x150>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f60:	4a47      	ldr	r2, [pc, #284]	@ (8001080 <SystemClock_Config+0x150>)
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f68:	4b45      	ldr	r3, [pc, #276]	@ (8001080 <SystemClock_Config+0x150>)
 8000f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	4b44      	ldr	r3, [pc, #272]	@ (8001084 <SystemClock_Config+0x154>)
 8000f74:	699b      	ldr	r3, [r3, #24]
 8000f76:	4a43      	ldr	r2, [pc, #268]	@ (8001084 <SystemClock_Config+0x154>)
 8000f78:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f7c:	6193      	str	r3, [r2, #24]
 8000f7e:	4b41      	ldr	r3, [pc, #260]	@ (8001084 <SystemClock_Config+0x154>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f8a:	bf00      	nop
 8000f8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001084 <SystemClock_Config+0x154>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f98:	d1f8      	bne.n	8000f8c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8001088 <SystemClock_Config+0x158>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	4a39      	ldr	r2, [pc, #228]	@ (8001088 <SystemClock_Config+0x158>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000faa:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <SystemClock_Config+0x158>)
 8000fac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fb0:	f003 0302 	and.w	r3, r3, #2
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fb8:	2300      	movs	r3, #0
 8000fba:	603b      	str	r3, [r7, #0]
 8000fbc:	4b31      	ldr	r3, [pc, #196]	@ (8001084 <SystemClock_Config+0x154>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a30      	ldr	r2, [pc, #192]	@ (8001084 <SystemClock_Config+0x154>)
 8000fc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001084 <SystemClock_Config+0x154>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fd0:	603b      	str	r3, [r7, #0]
 8000fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001080 <SystemClock_Config+0x150>)
 8000fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fd6:	4a2a      	ldr	r2, [pc, #168]	@ (8001080 <SystemClock_Config+0x150>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000fde:	4b28      	ldr	r3, [pc, #160]	@ (8001080 <SystemClock_Config+0x150>)
 8000fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	603b      	str	r3, [r7, #0]
 8000fe8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fea:	bf00      	nop
 8000fec:	4b25      	ldr	r3, [pc, #148]	@ (8001084 <SystemClock_Config+0x154>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ff8:	d1f8      	bne.n	8000fec <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ffe:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001002:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001004:	2302      	movs	r3, #2
 8001006:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001008:	2302      	movs	r3, #2
 800100a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 800100c:	2302      	movs	r3, #2
 800100e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001010:	2340      	movs	r3, #64	@ 0x40
 8001012:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001014:	2302      	movs	r3, #2
 8001016:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001018:	2302      	movs	r3, #2
 800101a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800101c:	2302      	movs	r3, #2
 800101e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001020:	230c      	movs	r3, #12
 8001022:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001024:	2300      	movs	r3, #0
 8001026:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800102c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001030:	4618      	mov	r0, r3
 8001032:	f01b ff97 	bl	801cf64 <HAL_RCC_OscConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800103c:	f001 f9ac 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001040:	233f      	movs	r3, #63	@ 0x3f
 8001042:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001044:	2303      	movs	r3, #3
 8001046:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800104c:	2308      	movs	r3, #8
 800104e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001050:	2340      	movs	r3, #64	@ 0x40
 8001052:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001054:	2340      	movs	r3, #64	@ 0x40
 8001056:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001058:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800105e:	2340      	movs	r3, #64	@ 0x40
 8001060:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001062:	f107 030c 	add.w	r3, r7, #12
 8001066:	2102      	movs	r1, #2
 8001068:	4618      	mov	r0, r3
 800106a:	f01c fbd5 	bl	801d818 <HAL_RCC_ClockConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001074:	f001 f990 	bl	8002398 <Error_Handler>
  }
}
 8001078:	bf00      	nop
 800107a:	3778      	adds	r7, #120	@ 0x78
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58000400 	.word	0x58000400
 8001084:	58024800 	.word	0x58024800
 8001088:	58024400 	.word	0x58024400

0800108c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b0b0      	sub	sp, #192	@ 0xc0
 8001090:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001092:	463b      	mov	r3, r7
 8001094:	22c0      	movs	r2, #192	@ 0xc0
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f021 fe84 	bl	8022da6 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 800109e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 80010aa:	2308      	movs	r3, #8
 80010ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 80010ae:	2340      	movs	r3, #64	@ 0x40
 80010b0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80010b2:	2302      	movs	r3, #2
 80010b4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 80010be:	2340      	movs	r3, #64	@ 0x40
 80010c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80010ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010ce:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010d0:	463b      	mov	r3, r7
 80010d2:	4618      	mov	r0, r3
 80010d4:	f01c ff2c 	bl	801df30 <HAL_RCCEx_PeriphCLKConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80010de:	f001 f95b 	bl	8002398 <Error_Handler>
  }
}
 80010e2:	bf00      	nop
 80010e4:	37c0      	adds	r7, #192	@ 0xc0
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001160 <MX_I2C4_Init+0x74>)
 80010f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001164 <MX_I2C4_Init+0x78>)
 80010f4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <MX_I2C4_Init+0x74>)
 80010f8:	4a1b      	ldr	r2, [pc, #108]	@ (8001168 <MX_I2C4_Init+0x7c>)
 80010fa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <MX_I2C4_Init+0x74>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <MX_I2C4_Init+0x74>)
 8001104:	2201      	movs	r2, #1
 8001106:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <MX_I2C4_Init+0x74>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <MX_I2C4_Init+0x74>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <MX_I2C4_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_I2C4_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001120:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <MX_I2C4_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8001126:	480e      	ldr	r0, [pc, #56]	@ (8001160 <MX_I2C4_Init+0x74>)
 8001128:	f01b fdae 	bl	801cc88 <HAL_I2C_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001132:	f001 f931 	bl	8002398 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001136:	2100      	movs	r1, #0
 8001138:	4809      	ldr	r0, [pc, #36]	@ (8001160 <MX_I2C4_Init+0x74>)
 800113a:	f01b fe41 	bl	801cdc0 <HAL_I2CEx_ConfigAnalogFilter>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001144:	f001 f928 	bl	8002398 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001148:	2100      	movs	r1, #0
 800114a:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_I2C4_Init+0x74>)
 800114c:	f01b fe83 	bl	801ce56 <HAL_I2CEx_ConfigDigitalFilter>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001156:	f001 f91f 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200000a4 	.word	0x200000a4
 8001164:	58001c00 	.word	0x58001c00
 8001168:	10c0ecff 	.word	0x10c0ecff

0800116c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001170:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <MX_SPI1_Init+0xa8>)
 8001172:	4a29      	ldr	r2, [pc, #164]	@ (8001218 <MX_SPI1_Init+0xac>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <MX_SPI1_Init+0xa8>)
 8001178:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800117c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <MX_SPI1_Init+0xa8>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001184:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <MX_SPI1_Init+0xa8>)
 8001186:	220f      	movs	r2, #15
 8001188:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <MX_SPI1_Init+0xa8>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001190:	4b20      	ldr	r3, [pc, #128]	@ (8001214 <MX_SPI1_Init+0xa8>)
 8001192:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001196:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001198:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <MX_SPI1_Init+0xa8>)
 800119a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800119e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80011a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80011a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ae:	4b19      	ldr	r3, [pc, #100]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011b4:	4b17      	ldr	r3, [pc, #92]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80011ba:	4b16      	ldr	r3, [pc, #88]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011c0:	4b14      	ldr	r3, [pc, #80]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011c6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011c8:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011ce:	4b11      	ldr	r3, [pc, #68]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011dc:	2200      	movs	r2, #0
 80011de:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011e8:	2230      	movs	r2, #48	@ 0x30
 80011ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011ec:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011f8:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <MX_SPI1_Init+0xa8>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <MX_SPI1_Init+0xa8>)
 8001200:	f01e fcc2 	bl	801fb88 <HAL_SPI_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800120a:	f001 f8c5 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200000f8 	.word	0x200000f8
 8001218:	40013000 	.word	0x40013000

0800121c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001220:	4b27      	ldr	r3, [pc, #156]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001222:	4a28      	ldr	r2, [pc, #160]	@ (80012c4 <MX_SPI2_Init+0xa8>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b26      	ldr	r3, [pc, #152]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001228:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800122c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b24      	ldr	r3, [pc, #144]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001234:	4b22      	ldr	r3, [pc, #136]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001236:	220f      	movs	r2, #15
 8001238:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123a:	4b21      	ldr	r3, [pc, #132]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001240:	4b1f      	ldr	r3, [pc, #124]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001246:	4b1e      	ldr	r3, [pc, #120]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001248:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800124c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800124e:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001250:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8001254:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001256:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800125c:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001262:	4b17      	ldr	r3, [pc, #92]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001264:	2200      	movs	r2, #0
 8001266:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001268:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800126e:	4b14      	ldr	r3, [pc, #80]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001270:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001274:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001278:	2200      	movs	r2, #0
 800127a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800127c:	4b10      	ldr	r3, [pc, #64]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001288:	4b0d      	ldr	r3, [pc, #52]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 800128a:	2200      	movs	r2, #0
 800128c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 800128e:	4b0c      	ldr	r3, [pc, #48]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001290:	2203      	movs	r2, #3
 8001292:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001294:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 8001296:	2230      	movs	r2, #48	@ 0x30
 8001298:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800129a:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012a0:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012ac:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <MX_SPI2_Init+0xa4>)
 80012ae:	f01e fc6b 	bl	801fb88 <HAL_SPI_Init>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d001      	beq.n	80012bc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80012b8:	f001 f86e 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000180 	.word	0x20000180
 80012c4:	40003800 	.word	0x40003800

080012c8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80012cc:	4b28      	ldr	r3, [pc, #160]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012ce:	4a29      	ldr	r2, [pc, #164]	@ (8001374 <MX_SPI3_Init+0xac>)
 80012d0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80012d2:	4b27      	ldr	r3, [pc, #156]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012d4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80012d8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80012da:	4b25      	ldr	r3, [pc, #148]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 80012e0:	4b23      	ldr	r3, [pc, #140]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012e2:	220f      	movs	r2, #15
 80012e4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80012ec:	4b20      	ldr	r3, [pc, #128]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80012f2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012f6:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80012fa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <MX_SPI3_Init+0xa8>)
 80012fe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001302:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001304:	4b1a      	ldr	r3, [pc, #104]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001306:	2200      	movs	r2, #0
 8001308:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800130a:	4b19      	ldr	r3, [pc, #100]	@ (8001370 <MX_SPI3_Init+0xa8>)
 800130c:	2200      	movs	r2, #0
 800130e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001310:	4b17      	ldr	r3, [pc, #92]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001312:	2200      	movs	r2, #0
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001316:	4b16      	ldr	r3, [pc, #88]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001318:	2200      	movs	r2, #0
 800131a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800131c:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <MX_SPI3_Init+0xa8>)
 800131e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001322:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001324:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001326:	2200      	movs	r2, #0
 8001328:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800132a:	4b11      	ldr	r3, [pc, #68]	@ (8001370 <MX_SPI3_Init+0xa8>)
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001330:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001332:	2200      	movs	r2, #0
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001338:	2200      	movs	r2, #0
 800133a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 800133c:	4b0c      	ldr	r3, [pc, #48]	@ (8001370 <MX_SPI3_Init+0xa8>)
 800133e:	2202      	movs	r2, #2
 8001340:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001344:	2220      	movs	r2, #32
 8001346:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <MX_SPI3_Init+0xa8>)
 800134a:	2200      	movs	r2, #0
 800134c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001350:	2200      	movs	r2, #0
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <MX_SPI3_Init+0xa8>)
 8001356:	2200      	movs	r2, #0
 8001358:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <MX_SPI3_Init+0xa8>)
 800135c:	f01e fc14 	bl	801fb88 <HAL_SPI_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001366:	f001 f817 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20000208 	.word	0x20000208
 8001374:	40003c00 	.word	0x40003c00

08001378 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137e:	f107 0310 	add.w	r3, r7, #16
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001396:	4b1f      	ldr	r3, [pc, #124]	@ (8001414 <MX_TIM1_Init+0x9c>)
 8001398:	4a1f      	ldr	r2, [pc, #124]	@ (8001418 <MX_TIM1_Init+0xa0>)
 800139a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800139c:	4b1d      	ldr	r3, [pc, #116]	@ (8001414 <MX_TIM1_Init+0x9c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013aa:	22ff      	movs	r2, #255	@ 0xff
 80013ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b19      	ldr	r3, [pc, #100]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b4:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b16      	ldr	r3, [pc, #88]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013c0:	4814      	ldr	r0, [pc, #80]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013c2:	f01e ffda 	bl	802037a <HAL_TIM_Base_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80013cc:	f000 ffe4 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013d6:	f107 0310 	add.w	r3, r7, #16
 80013da:	4619      	mov	r1, r3
 80013dc:	480d      	ldr	r0, [pc, #52]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013de:	f01f fa11 	bl	8020804 <HAL_TIM_ConfigClockSource>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80013e8:	f000 ffd6 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013f0:	2300      	movs	r3, #0
 80013f2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f8:	1d3b      	adds	r3, r7, #4
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <MX_TIM1_Init+0x9c>)
 80013fe:	f01f ff13 	bl	8021228 <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001408:	f000 ffc6 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200003f8 	.word	0x200003f8
 8001418:	40010000 	.word	0x40010000

0800141c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800143a:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <MX_TIM3_Init+0x94>)
 800143c:	4a1d      	ldr	r2, [pc, #116]	@ (80014b4 <MX_TIM3_Init+0x98>)
 800143e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8001440:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_TIM3_Init+0x94>)
 8001442:	22c7      	movs	r2, #199	@ 0xc7
 8001444:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b1a      	ldr	r3, [pc, #104]	@ (80014b0 <MX_TIM3_Init+0x94>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800144c:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_TIM3_Init+0x94>)
 800144e:	2209      	movs	r2, #9
 8001450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b17      	ldr	r3, [pc, #92]	@ (80014b0 <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b15      	ldr	r3, [pc, #84]	@ (80014b0 <MX_TIM3_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800145e:	4814      	ldr	r0, [pc, #80]	@ (80014b0 <MX_TIM3_Init+0x94>)
 8001460:	f01e ff8b 	bl	802037a <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800146a:	f000 ff95 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0310 	add.w	r3, r7, #16
 8001478:	4619      	mov	r1, r3
 800147a:	480d      	ldr	r0, [pc, #52]	@ (80014b0 <MX_TIM3_Init+0x94>)
 800147c:	f01f f9c2 	bl	8020804 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001486:	f000 ff87 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001492:	1d3b      	adds	r3, r7, #4
 8001494:	4619      	mov	r1, r3
 8001496:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <MX_TIM3_Init+0x94>)
 8001498:	f01f fec6 	bl	8021228 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014a2:	f000 ff79 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	3720      	adds	r7, #32
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000490 	.word	0x20000490
 80014b4:	40000400 	.word	0x40000400

080014b8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	@ 0x38
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ea:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <MX_TIM4_Init+0x104>)
 80014ec:	4a34      	ldr	r2, [pc, #208]	@ (80015c0 <MX_TIM4_Init+0x108>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 80014f0:	4b32      	ldr	r3, [pc, #200]	@ (80015bc <MX_TIM4_Init+0x104>)
 80014f2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80014f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f8:	4b30      	ldr	r3, [pc, #192]	@ (80015bc <MX_TIM4_Init+0x104>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80014fe:	4b2f      	ldr	r3, [pc, #188]	@ (80015bc <MX_TIM4_Init+0x104>)
 8001500:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001504:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b2d      	ldr	r3, [pc, #180]	@ (80015bc <MX_TIM4_Init+0x104>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b2b      	ldr	r3, [pc, #172]	@ (80015bc <MX_TIM4_Init+0x104>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001512:	482a      	ldr	r0, [pc, #168]	@ (80015bc <MX_TIM4_Init+0x104>)
 8001514:	f01e ff31 	bl	802037a <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 800151e:	f000 ff3b 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800152c:	4619      	mov	r1, r3
 800152e:	4823      	ldr	r0, [pc, #140]	@ (80015bc <MX_TIM4_Init+0x104>)
 8001530:	f01f f968 	bl	8020804 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 800153a:	f000 ff2d 	bl	8002398 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800153e:	481f      	ldr	r0, [pc, #124]	@ (80015bc <MX_TIM4_Init+0x104>)
 8001540:	f01e ffea 	bl	8020518 <HAL_TIM_PWM_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800154a:	f000 ff25 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4817      	ldr	r0, [pc, #92]	@ (80015bc <MX_TIM4_Init+0x104>)
 800155e:	f01f fe63 	bl	8021228 <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001568:	f000 ff16 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800156c:	2360      	movs	r3, #96	@ 0x60
 800156e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001570:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	2200      	movs	r2, #0
 8001582:	4619      	mov	r1, r3
 8001584:	480d      	ldr	r0, [pc, #52]	@ (80015bc <MX_TIM4_Init+0x104>)
 8001586:	f01f f829 	bl	80205dc <HAL_TIM_PWM_ConfigChannel>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001590:	f000 ff02 	bl	8002398 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001594:	2370      	movs	r3, #112	@ 0x70
 8001596:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001598:	463b      	mov	r3, r7
 800159a:	2204      	movs	r2, #4
 800159c:	4619      	mov	r1, r3
 800159e:	4807      	ldr	r0, [pc, #28]	@ (80015bc <MX_TIM4_Init+0x104>)
 80015a0:	f01f f81c 	bl	80205dc <HAL_TIM_PWM_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 80015aa:	f000 fef5 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015ae:	4803      	ldr	r0, [pc, #12]	@ (80015bc <MX_TIM4_Init+0x104>)
 80015b0:	f001 fba2 	bl	8002cf8 <HAL_TIM_MspPostInit>

}
 80015b4:	bf00      	nop
 80015b6:	3738      	adds	r7, #56	@ 0x38
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	200004dc 	.word	0x200004dc
 80015c0:	40000800 	.word	0x40000800

080015c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b088      	sub	sp, #32
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2200      	movs	r2, #0
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	605a      	str	r2, [r3, #4]
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	@ (800165c <MX_TIM5_Init+0x98>)
 80015e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <MX_TIM5_Init+0x9c>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <MX_TIM5_Init+0x98>)
 80015ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015f0:	4b1a      	ldr	r3, [pc, #104]	@ (800165c <MX_TIM5_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3124;
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <MX_TIM5_Init+0x98>)
 80015f8:	f640 4234 	movw	r2, #3124	@ 0xc34
 80015fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fe:	4b17      	ldr	r3, [pc, #92]	@ (800165c <MX_TIM5_Init+0x98>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b15      	ldr	r3, [pc, #84]	@ (800165c <MX_TIM5_Init+0x98>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800160a:	4814      	ldr	r0, [pc, #80]	@ (800165c <MX_TIM5_Init+0x98>)
 800160c:	f01e feb5 	bl	802037a <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001616:	f000 febf 	bl	8002398 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800161e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	4619      	mov	r1, r3
 8001626:	480d      	ldr	r0, [pc, #52]	@ (800165c <MX_TIM5_Init+0x98>)
 8001628:	f01f f8ec 	bl	8020804 <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001632:	f000 feb1 	bl	8002398 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800163a:	2300      	movs	r3, #0
 800163c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	@ (800165c <MX_TIM5_Init+0x98>)
 8001644:	f01f fdf0 	bl	8021228 <HAL_TIMEx_MasterConfigSynchronization>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800164e:	f000 fea3 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001652:	bf00      	nop
 8001654:	3720      	adds	r7, #32
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	20000528 	.word	0x20000528
 8001660:	40000c00 	.word	0x40000c00

08001664 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001668:	4b22      	ldr	r3, [pc, #136]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800166a:	4a23      	ldr	r2, [pc, #140]	@ (80016f8 <MX_USART3_UART_Init+0x94>)
 800166c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800166e:	4b21      	ldr	r3, [pc, #132]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001674:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001676:	4b1f      	ldr	r3, [pc, #124]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800167c:	4b1d      	ldr	r3, [pc, #116]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001688:	4b1a      	ldr	r3, [pc, #104]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800168a:	220c      	movs	r2, #12
 800168c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800168e:	4b19      	ldr	r3, [pc, #100]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001690:	2200      	movs	r2, #0
 8001692:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001694:	4b17      	ldr	r3, [pc, #92]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 8001696:	2200      	movs	r2, #0
 8001698:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800169a:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016a0:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016a6:	4b13      	ldr	r3, [pc, #76]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016ac:	4811      	ldr	r0, [pc, #68]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016ae:	f01f fe49 	bl	8021344 <HAL_UART_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016b8:	f000 fe6e 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	480d      	ldr	r0, [pc, #52]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016c0:	f020 fe51 	bl	8022366 <HAL_UARTEx_SetTxFifoThreshold>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ca:	f000 fe65 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ce:	2100      	movs	r1, #0
 80016d0:	4808      	ldr	r0, [pc, #32]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016d2:	f020 fe86 	bl	80223e2 <HAL_UARTEx_SetRxFifoThreshold>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80016dc:	f000 fe5c 	bl	8002398 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80016e0:	4804      	ldr	r0, [pc, #16]	@ (80016f4 <MX_USART3_UART_Init+0x90>)
 80016e2:	f020 fe07 	bl	80222f4 <HAL_UARTEx_DisableFifoMode>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80016ec:	f000 fe54 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	200007cc 	.word	0x200007cc
 80016f8:	40004800 	.word	0x40004800

080016fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001702:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <MX_DMA_Init+0xac>)
 8001704:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001708:	4a27      	ldr	r2, [pc, #156]	@ (80017a8 <MX_DMA_Init+0xac>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001712:	4b25      	ldr	r3, [pc, #148]	@ (80017a8 <MX_DMA_Init+0xac>)
 8001714:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001718:	f003 0301 	and.w	r3, r3, #1
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2106      	movs	r1, #6
 8001724:	200b      	movs	r0, #11
 8001726:	f019 f930 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800172a:	200b      	movs	r0, #11
 800172c:	f019 f947 	bl	801a9be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2106      	movs	r1, #6
 8001734:	200c      	movs	r0, #12
 8001736:	f019 f928 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800173a:	200c      	movs	r0, #12
 800173c:	f019 f93f 	bl	801a9be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001740:	2200      	movs	r2, #0
 8001742:	2107      	movs	r1, #7
 8001744:	200d      	movs	r0, #13
 8001746:	f019 f920 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800174a:	200d      	movs	r0, #13
 800174c:	f019 f937 	bl	801a9be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001750:	2200      	movs	r2, #0
 8001752:	2107      	movs	r1, #7
 8001754:	200e      	movs	r0, #14
 8001756:	f019 f918 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800175a:	200e      	movs	r0, #14
 800175c:	f019 f92f 	bl	801a9be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2107      	movs	r1, #7
 8001764:	200f      	movs	r0, #15
 8001766:	f019 f910 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800176a:	200f      	movs	r0, #15
 800176c:	f019 f927 	bl	801a9be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001770:	2200      	movs	r2, #0
 8001772:	2107      	movs	r1, #7
 8001774:	2010      	movs	r0, #16
 8001776:	f019 f908 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800177a:	2010      	movs	r0, #16
 800177c:	f019 f91f 	bl	801a9be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 7, 0);
 8001780:	2200      	movs	r2, #0
 8001782:	2107      	movs	r1, #7
 8001784:	2011      	movs	r0, #17
 8001786:	f019 f900 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800178a:	2011      	movs	r0, #17
 800178c:	f019 f917 	bl	801a9be <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 7, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2107      	movs	r1, #7
 8001794:	202f      	movs	r0, #47	@ 0x2f
 8001796:	f019 f8f8 	bl	801a98a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800179a:	202f      	movs	r0, #47	@ 0x2f
 800179c:	f019 f90f 	bl	801a9be <HAL_NVIC_EnableIRQ>

}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	58024400 	.word	0x58024400

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	@ 0x30
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017c2:	4b61      	ldr	r3, [pc, #388]	@ (8001948 <MX_GPIO_Init+0x19c>)
 80017c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c8:	4a5f      	ldr	r2, [pc, #380]	@ (8001948 <MX_GPIO_Init+0x19c>)
 80017ca:	f043 0310 	orr.w	r3, r3, #16
 80017ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001948 <MX_GPIO_Init+0x19c>)
 80017d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017e0:	4b59      	ldr	r3, [pc, #356]	@ (8001948 <MX_GPIO_Init+0x19c>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e6:	4a58      	ldr	r2, [pc, #352]	@ (8001948 <MX_GPIO_Init+0x19c>)
 80017e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017f0:	4b55      	ldr	r3, [pc, #340]	@ (8001948 <MX_GPIO_Init+0x19c>)
 80017f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017fe:	4b52      	ldr	r3, [pc, #328]	@ (8001948 <MX_GPIO_Init+0x19c>)
 8001800:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001804:	4a50      	ldr	r2, [pc, #320]	@ (8001948 <MX_GPIO_Init+0x19c>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180e:	4b4e      	ldr	r3, [pc, #312]	@ (8001948 <MX_GPIO_Init+0x19c>)
 8001810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800181c:	4b4a      	ldr	r3, [pc, #296]	@ (8001948 <MX_GPIO_Init+0x19c>)
 800181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001822:	4a49      	ldr	r2, [pc, #292]	@ (8001948 <MX_GPIO_Init+0x19c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182c:	4b46      	ldr	r3, [pc, #280]	@ (8001948 <MX_GPIO_Init+0x19c>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800183a:	4b43      	ldr	r3, [pc, #268]	@ (8001948 <MX_GPIO_Init+0x19c>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001840:	4a41      	ldr	r2, [pc, #260]	@ (8001948 <MX_GPIO_Init+0x19c>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800184a:	4b3f      	ldr	r3, [pc, #252]	@ (8001948 <MX_GPIO_Init+0x19c>)
 800184c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001858:	4b3b      	ldr	r3, [pc, #236]	@ (8001948 <MX_GPIO_Init+0x19c>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800185e:	4a3a      	ldr	r2, [pc, #232]	@ (8001948 <MX_GPIO_Init+0x19c>)
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001868:	4b37      	ldr	r3, [pc, #220]	@ (8001948 <MX_GPIO_Init+0x19c>)
 800186a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ENABLE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	213c      	movs	r1, #60	@ 0x3c
 800187a:	4834      	ldr	r0, [pc, #208]	@ (800194c <MX_GPIO_Init+0x1a0>)
 800187c:	f01b f9ea 	bl	801cc54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001880:	2200      	movs	r2, #0
 8001882:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 8001886:	4832      	ldr	r0, [pc, #200]	@ (8001950 <MX_GPIO_Init+0x1a4>)
 8001888:	f01b f9e4 	bl	801cc54 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 800188c:	2200      	movs	r2, #0
 800188e:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001892:	4830      	ldr	r0, [pc, #192]	@ (8001954 <MX_GPIO_Init+0x1a8>)
 8001894:	f01b f9de 	bl	801cc54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ENABLE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 8001898:	233c      	movs	r3, #60	@ 0x3c
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	4619      	mov	r1, r3
 80018ae:	4827      	ldr	r0, [pc, #156]	@ (800194c <MX_GPIO_Init+0x1a0>)
 80018b0:	f01b f820 	bl	801c8f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 80018b4:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 80018b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	2301      	movs	r3, #1
 80018bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	4619      	mov	r1, r3
 80018cc:	4820      	ldr	r0, [pc, #128]	@ (8001950 <MX_GPIO_Init+0x1a4>)
 80018ce:	f01b f811 	bl	801c8f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 80018d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d8:	2300      	movs	r3, #0
 80018da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	481a      	ldr	r0, [pc, #104]	@ (8001950 <MX_GPIO_Init+0x1a4>)
 80018e8:	f01b f804 	bl	801c8f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80018ec:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	4813      	ldr	r0, [pc, #76]	@ (8001954 <MX_GPIO_Init+0x1a8>)
 8001906:	f01a fff5 	bl	801c8f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 800190a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800190e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	480d      	ldr	r0, [pc, #52]	@ (8001954 <MX_GPIO_Init+0x1a8>)
 8001920:	f01a ffe8 	bl	801c8f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 8001924:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800192a:	2300      	movs	r3, #0
 800192c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	4807      	ldr	r0, [pc, #28]	@ (8001958 <MX_GPIO_Init+0x1ac>)
 800193a:	f01a ffdb 	bl	801c8f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800193e:	bf00      	nop
 8001940:	3730      	adds	r7, #48	@ 0x30
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	58024400 	.word	0x58024400
 800194c:	58021000 	.word	0x58021000
 8001950:	58020c00 	.word	0x58020c00
 8001954:	58020000 	.word	0x58020000
 8001958:	58020400 	.word	0x58020400

0800195c <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001962:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <vHeapInit+0x28>)
 8001964:	463c      	mov	r4, r7
 8001966:	461d      	mov	r5, r3
 8001968:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800196a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800196c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001974:	463b      	mov	r3, r7
 8001976:	4618      	mov	r0, r3
 8001978:	f005 f984 	bl	8006c84 <vPortDefineHeapRegions>
}
 800197c:	bf00      	nop
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bdb0      	pop	{r4, r5, r7, pc}
 8001984:	08024908 	.word	0x08024908

08001988 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	return 0U;
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 80019a6:	f004 fed3 	bl	8006750 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 80019aa:	e000      	b.n	80019ae <vAssertCalled+0x16>
		{
			__NOP();
 80019ac:	bf00      	nop
		while( ul == 0 )
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0fb      	beq.n	80019ac <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 80019b4:	f004 fef8 	bl	80067a8 <vPortExitCritical>
}
 80019b8:	bf00      	nop
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 80019c4:	f240 511d 	movw	r1, #1309	@ 0x51d
 80019c8:	4802      	ldr	r0, [pc, #8]	@ (80019d4 <vApplicationMallocFailedHook+0x14>)
 80019ca:	f7ff ffe5 	bl	8001998 <vAssertCalled>
}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	08024928 	.word	0x08024928

080019d8 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	461a      	mov	r2, r3
 80019e4:	460b      	mov	r3, r1
 80019e6:	817b      	strh	r3, [r7, #10]
 80019e8:	4613      	mov	r3, r2
 80019ea:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f89b 	bl	8001b2c <xApplicationGetRandomNumber>

	return ulReturn;
 80019f6:	697b      	ldr	r3, [r7, #20]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d147      	bne.n	8001aa0 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 8001a10:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <vApplicationIPNetworkEventHook+0xa8>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d105      	bne.n	8001a24 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <vApplicationIPNetworkEventHook+0xa8>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <vApplicationIPNetworkEventHook+0xac>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 8001a24:	f107 0318 	add.w	r3, r7, #24
 8001a28:	f107 021c 	add.w	r2, r7, #28
 8001a2c:	f107 0120 	add.w	r1, r7, #32
 8001a30:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8001a34:	f008 f8d4 	bl	8009be0 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8001a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3a:	f107 0208 	add.w	r2, r7, #8
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00d fed1 	bl	800f7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4818      	ldr	r0, [pc, #96]	@ (8001ab0 <vApplicationIPNetworkEventHook+0xb0>)
 8001a4e:	f020 fe81 	bl	8022754 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f107 0208 	add.w	r2, r7, #8
 8001a58:	4611      	mov	r1, r2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f00d fec4 	bl	800f7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001a60:	f107 0308 	add.w	r3, r7, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	4813      	ldr	r0, [pc, #76]	@ (8001ab4 <vApplicationIPNetworkEventHook+0xb4>)
 8001a68:	f020 fe74 	bl	8022754 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f107 0208 	add.w	r2, r7, #8
 8001a72:	4611      	mov	r1, r2
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00d feb7 	bl	800f7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <vApplicationIPNetworkEventHook+0xb8>)
 8001a82:	f020 fe67 	bl	8022754 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	f107 0208 	add.w	r2, r7, #8
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00d feaa 	bl	800f7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001a94:	f107 0308 	add.w	r3, r7, #8
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	@ (8001abc <vApplicationIPNetworkEventHook+0xbc>)
 8001a9c:	f020 fe5a 	bl	8022754 <lUDPLoggingPrintf>
	}
}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	@ 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	20000d28 	.word	0x20000d28
 8001aac:	20000d2c 	.word	0x20000d2c
 8001ab0:	0802493c 	.word	0x0802493c
 8001ab4:	0802494c 	.word	0x0802494c
 8001ab8:	08024960 	.word	0x08024960
 8001abc:	08024978 	.word	0x08024978

08001ac0 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8001acc:	f000 f810 	bl	8001af0 <pcApplicationHostnameHook>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f022 f819 	bl	8023b0c <strcasecmp>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 8001af4:	4b02      	ldr	r3, [pc, #8]	@ (8001b00 <pcApplicationHostnameHook+0x10>)
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	08024990 	.word	0x08024990

08001b04 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8001b14:	88bb      	ldrh	r3, [r7, #4]
 8001b16:	4619      	mov	r1, r3
 8001b18:	4803      	ldr	r0, [pc, #12]	@ (8001b28 <vApplicationPingReplyHook+0x24>)
 8001b1a:	f020 fe1b 	bl	8022754 <lUDPLoggingPrintf>
	}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	08024998 	.word	0x08024998

08001b2c <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 8001b34:	f021 fe7c 	bl	8023830 <rand>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001b40:	2301      	movs	r3, #1
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001b58:	4a01      	ldr	r2, [pc, #4]	@ (8001b60 <prvGetRegistersFromStack+0x14>)
 8001b5a:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <prvGetRegistersFromStack+0x10>
 8001b60:	20000d44 	.word	0x20000d44

08001b64 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
	__asm volatile
 8001b68:	f01e 0f04 	tst.w	lr, #4
 8001b6c:	bf0c      	ite	eq
 8001b6e:	f3ef 8008 	mrseq	r0, MSP
 8001b72:	f3ef 8009 	mrsne	r0, PSP
 8001b76:	6981      	ldr	r1, [r0, #24]
 8001b78:	f7ff ffe8 	bl	8001b4c <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
	...

08001b88 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001b90:	200a      	movs	r0, #10
 8001b92:	f002 fea5 	bl	80048e0 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001b96:	4b05      	ldr	r3, [pc, #20]	@ (8001bac <prvServerWorkTask+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d0f8      	beq.n	8001b90 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001b9e:	4b03      	ldr	r3, [pc, #12]	@ (8001bac <prvServerWorkTask+0x24>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001ba4:	f020 fdf2 	bl	802278c <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001ba8:	e7f2      	b.n	8001b90 <prvServerWorkTask+0x8>
 8001baa:	bf00      	nop
 8001bac:	20000d2c 	.word	0x20000d2c

08001bb0 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b098      	sub	sp, #96	@ 0x60
 8001bb4:	af02      	add	r7, sp, #8
 8001bb6:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001bb8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001bbc:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bc2:	2218      	movs	r2, #24
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f021 f8ed 	bl	8022da6 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001bcc:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001bd0:	021b      	lsls	r3, r3, #8
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001bd8:	0a1b      	lsrs	r3, r3, #8
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	b21b      	sxth	r3, r3
 8001bde:	4313      	orrs	r3, r2
 8001be0:	b21b      	sxth	r3, r3
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001be6:	2303      	movs	r3, #3
 8001be8:	061a      	lsls	r2, r3, #24
 8001bea:	2301      	movs	r3, #1
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	23a8      	movs	r3, #168	@ 0xa8
 8001bf2:	021b      	lsls	r3, r3, #8
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	22c0      	movs	r2, #192	@ 0xc0
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001c02:	2206      	movs	r2, #6
 8001c04:	2101      	movs	r1, #1
 8001c06:	2002      	movs	r0, #2
 8001c08:	f00c fce2 	bl	800e5d0 <FreeRTOS_socket>
 8001c0c:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001c0e:	f107 0310 	add.w	r3, r7, #16
 8001c12:	2210      	movs	r2, #16
 8001c14:	2100      	movs	r1, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	f021 f8c5 	bl	8022da6 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001c1c:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c20:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001c22:	230c      	movs	r3, #12
 8001c24:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001c26:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001c2a:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001c2c:	230c      	movs	r3, #12
 8001c2e:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001c30:	2304      	movs	r3, #4
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	4b48      	ldr	r3, [pc, #288]	@ (8001d58 <vADCTCPTask+0x1a8>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	2100      	movs	r1, #0
 8001c3a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c3c:	f00d fc82 	bl	800f544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001c40:	2304      	movs	r3, #4
 8001c42:	9300      	str	r3, [sp, #0]
 8001c44:	4b44      	ldr	r3, [pc, #272]	@ (8001d58 <vADCTCPTask+0x1a8>)
 8001c46:	2201      	movs	r2, #1
 8001c48:	2100      	movs	r1, #0
 8001c4a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c4c:	f00d fc7a 	bl	800f544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001c50:	f107 0310 	add.w	r3, r7, #16
 8001c54:	2210      	movs	r2, #16
 8001c56:	9200      	str	r2, [sp, #0]
 8001c58:	220d      	movs	r2, #13
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c5e:	f00d fc71 	bl	800f544 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d104      	bne.n	8001c74 <vADCTCPTask+0xc4>
 8001c6a:	f240 6145 	movw	r1, #1605	@ 0x645
 8001c6e:	483b      	ldr	r0, [pc, #236]	@ (8001d5c <vADCTCPTask+0x1ac>)
 8001c70:	f7ff fe92 	bl	8001998 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001c74:	f107 0320 	add.w	r3, r7, #32
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	9200      	str	r2, [sp, #0]
 8001c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c82:	2100      	movs	r1, #0
 8001c84:	2000      	movs	r0, #0
 8001c86:	f003 ffb5 	bl	8005bf4 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d002      	beq.n	8001c9a <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001c94:	4b32      	ldr	r3, [pc, #200]	@ (8001d60 <vADCTCPTask+0x1b0>)
 8001c96:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c98:	e001      	b.n	8001c9e <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001c9a:	4b32      	ldr	r3, [pc, #200]	@ (8001d64 <vADCTCPTask+0x1b4>)
 8001c9c:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001caa:	2218      	movs	r2, #24
 8001cac:	4619      	mov	r1, r3
 8001cae:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cb0:	f00d ffe6 	bl	800fc80 <FreeRTOS_connect>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d139      	bne.n	8001d2e <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001cba:	e030      	b.n	8001d1e <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001cc4:	f107 030c 	add.w	r3, r7, #12
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ccc:	f00e fadf 	bl	801028e <FreeRTOS_get_tx_head>
 8001cd0:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001cd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d027      	beq.n	8001d28 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001cd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d902      	bls.n	8001cea <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ce8:	e003      	b.n	8001cf2 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001cf6:	4413      	add	r3, r2
 8001cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001cfe:	f020 ff45 	bl	8022b8c <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001d02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d04:	2300      	movs	r3, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d0a:	f00e fbcb 	bl	80104a4 <FreeRTOS_send>
 8001d0e:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	db0a      	blt.n	8001d2c <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001d16:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d1a:	4413      	add	r3, r2
 8001d1c:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d20:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d8ca      	bhi.n	8001cbc <vADCTCPTask+0x10c>
 8001d26:	e002      	b.n	8001d2e <vADCTCPTask+0x17e>
                        break;
 8001d28:	bf00      	nop
 8001d2a:	e000      	b.n	8001d2e <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001d2c:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001d2e:	2102      	movs	r1, #2
 8001d30:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d32:	f00e fc66 	bl	8010602 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001d36:	e002      	b.n	8001d3e <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001d38:	2001      	movs	r0, #1
 8001d3a:	f002 fdd1 	bl	80048e0 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001d3e:	2300      	movs	r3, #0
 8001d40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001d44:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d46:	f00e fa0d 	bl	8010164 <FreeRTOS_recv>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	daf3      	bge.n	8001d38 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001d50:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d52:	f00d f801 	bl	800ed58 <FreeRTOS_closesocket>
    for(;;) {
 8001d56:	e754      	b.n	8001c02 <vADCTCPTask+0x52>
 8001d58:	08027e84 	.word	0x08027e84
 8001d5c:	08024928 	.word	0x08024928
 8001d60:	30010004 	.word	0x30010004
 8001d64:	30000004 	.word	0x30000004

08001d68 <vAuxADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vAuxADCTCPTask(void *pvParameters) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b098      	sub	sp, #96	@ 0x60
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usAuxADCDataMock0);
 8001d70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d74:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001d76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d7a:	2218      	movs	r2, #24
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f021 f811 	bl	8022da6 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001d84:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	b21a      	sxth	r2, r3
 8001d8c:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d90:	0a1b      	lsrs	r3, r3, #8
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	b21b      	sxth	r3, r3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	b21b      	sxth	r3, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001d9e:	2303      	movs	r3, #3
 8001da0:	061a      	lsls	r2, r3, #24
 8001da2:	2301      	movs	r3, #1
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	431a      	orrs	r2, r3
 8001da8:	23a8      	movs	r3, #168	@ 0xa8
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	4313      	orrs	r3, r2
 8001dae:	22c0      	movs	r2, #192	@ 0xc0
 8001db0:	4313      	orrs	r3, r2
 8001db2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001db4:	2302      	movs	r3, #2
 8001db6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001dba:	2206      	movs	r2, #6
 8001dbc:	2101      	movs	r1, #1
 8001dbe:	2002      	movs	r0, #2
 8001dc0:	f00c fc06 	bl	800e5d0 <FreeRTOS_socket>
 8001dc4:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001dc6:	f107 0310 	add.w	r3, r7, #16
 8001dca:	2210      	movs	r2, #16
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f020 ffe9 	bl	8022da6 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001dd4:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001dd8:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001dda:	230c      	movs	r3, #12
 8001ddc:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001dde:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001de2:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001de4:	230c      	movs	r3, #12
 8001de6:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001de8:	2304      	movs	r3, #4
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4b48      	ldr	r3, [pc, #288]	@ (8001f10 <vAuxADCTCPTask+0x1a8>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	2100      	movs	r1, #0
 8001df2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001df4:	f00d fba6 	bl	800f544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001df8:	2304      	movs	r3, #4
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	4b44      	ldr	r3, [pc, #272]	@ (8001f10 <vAuxADCTCPTask+0x1a8>)
 8001dfe:	2201      	movs	r2, #1
 8001e00:	2100      	movs	r1, #0
 8001e02:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e04:	f00d fb9e 	bl	800f544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	2210      	movs	r2, #16
 8001e0e:	9200      	str	r2, [sp, #0]
 8001e10:	220d      	movs	r2, #13
 8001e12:	2100      	movs	r1, #0
 8001e14:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e16:	f00d fb95 	bl	800f544 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001e1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e20:	d104      	bne.n	8001e2c <vAuxADCTCPTask+0xc4>
 8001e22:	f240 61cf 	movw	r1, #1743	@ 0x6cf
 8001e26:	483b      	ldr	r0, [pc, #236]	@ (8001f14 <vAuxADCTCPTask+0x1ac>)
 8001e28:	f7ff fdb6 	bl	8001998 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001e2c:	f107 0320 	add.w	r3, r7, #32
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	f04f 32ff 	mov.w	r2, #4294967295
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f003 fed9 	bl	8005bf4 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001e42:	6a3b      	ldr	r3, [r7, #32]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <vAuxADCTCPTask+0xea>
	    pcBufferToTransmit = usAuxADCDataMock1;
 8001e4c:	4b32      	ldr	r3, [pc, #200]	@ (8001f18 <vAuxADCTCPTask+0x1b0>)
 8001e4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e50:	e001      	b.n	8001e56 <vAuxADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usAuxADCDataMock0;
 8001e52:	4b32      	ldr	r3, [pc, #200]	@ (8001f1c <vAuxADCTCPTask+0x1b4>)
 8001e54:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001e56:	2300      	movs	r3, #0
 8001e58:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001e5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e62:	2218      	movs	r2, #24
 8001e64:	4619      	mov	r1, r3
 8001e66:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e68:	f00d ff0a 	bl	800fc80 <FreeRTOS_connect>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d139      	bne.n	8001ee6 <vAuxADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001e72:	e030      	b.n	8001ed6 <vAuxADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001e7c:	f107 030c 	add.w	r3, r7, #12
 8001e80:	4619      	mov	r1, r3
 8001e82:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e84:	f00e fa03 	bl	801028e <FreeRTOS_get_tx_head>
 8001e88:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d027      	beq.n	8001ee0 <vAuxADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d902      	bls.n	8001ea2 <vAuxADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ea0:	e003      	b.n	8001eaa <vAuxADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001eae:	4413      	add	r3, r2
 8001eb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001eb6:	f020 fe69 	bl	8022b8c <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001eba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ec2:	f00e faef 	bl	80104a4 <FreeRTOS_send>
 8001ec6:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	db0a      	blt.n	8001ee4 <vAuxADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001ece:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed2:	4413      	add	r3, r2
 8001ed4:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d8ca      	bhi.n	8001e74 <vAuxADCTCPTask+0x10c>
 8001ede:	e002      	b.n	8001ee6 <vAuxADCTCPTask+0x17e>
                        break;
 8001ee0:	bf00      	nop
 8001ee2:	e000      	b.n	8001ee6 <vAuxADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001ee4:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001eea:	f00e fb8a 	bl	8010602 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001eee:	e002      	b.n	8001ef6 <vAuxADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f002 fcf5 	bl	80048e0 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001efa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001efc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001efe:	f00e f931 	bl	8010164 <FreeRTOS_recv>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	daf3      	bge.n	8001ef0 <vAuxADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001f08:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001f0a:	f00c ff25 	bl	800ed58 <FreeRTOS_closesocket>
    for(;;) {
 8001f0e:	e754      	b.n	8001dba <vAuxADCTCPTask+0x52>
 8001f10:	08027e88 	.word	0x08027e88
 8001f14:	08024928 	.word	0x08024928
 8001f18:	30028004 	.word	0x30028004
 8001f1c:	30020004 	.word	0x30020004

08001f20 <vTCADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vTCADCTCPTask(void *pvParameters) {
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b098      	sub	sp, #96	@ 0x60
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usTCADCData0);
 8001f28:	2380      	movs	r3, #128	@ 0x80
 8001f2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f30:	2218      	movs	r2, #24
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f020 ff36 	bl	8022da6 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usTCADCPort);
 8001f3a:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001f3e:	021b      	lsls	r3, r3, #8
 8001f40:	b21a      	sxth	r2, r3
 8001f42:	f241 53b5 	movw	r3, #5557	@ 0x15b5
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	b21b      	sxth	r3, r3
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001f54:	2303      	movs	r3, #3
 8001f56:	061a      	lsls	r2, r3, #24
 8001f58:	2301      	movs	r3, #1
 8001f5a:	041b      	lsls	r3, r3, #16
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	23a8      	movs	r3, #168	@ 0xa8
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	4313      	orrs	r3, r2
 8001f64:	22c0      	movs	r2, #192	@ 0xc0
 8001f66:	4313      	orrs	r3, r2
 8001f68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001f70:	2206      	movs	r2, #6
 8001f72:	2101      	movs	r1, #1
 8001f74:	2002      	movs	r0, #2
 8001f76:	f00c fb2b 	bl	800e5d0 <FreeRTOS_socket>
 8001f7a:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001f7c:	f107 0310 	add.w	r3, r7, #16
 8001f80:	2210      	movs	r2, #16
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f020 ff0e 	bl	8022da6 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001f8a:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001f8e:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001f90:	230c      	movs	r3, #12
 8001f92:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001f94:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001f98:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001f9e:	2304      	movs	r3, #4
 8001fa0:	9300      	str	r3, [sp, #0]
 8001fa2:	4b49      	ldr	r3, [pc, #292]	@ (80020c8 <vTCADCTCPTask+0x1a8>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001faa:	f00d facb 	bl	800f544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001fae:	2304      	movs	r3, #4
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	4b45      	ldr	r3, [pc, #276]	@ (80020c8 <vTCADCTCPTask+0x1a8>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001fba:	f00d fac3 	bl	800f544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001fbe:	f107 0310 	add.w	r3, r7, #16
 8001fc2:	2210      	movs	r2, #16
 8001fc4:	9200      	str	r2, [sp, #0]
 8001fc6:	220d      	movs	r2, #13
 8001fc8:	2100      	movs	r1, #0
 8001fca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001fcc:	f00d faba 	bl	800f544 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fd6:	d104      	bne.n	8001fe2 <vTCADCTCPTask+0xc2>
 8001fd8:	f240 7159 	movw	r1, #1881	@ 0x759
 8001fdc:	483b      	ldr	r0, [pc, #236]	@ (80020cc <vTCADCTCPTask+0x1ac>)
 8001fde:	f7ff fcdb 	bl	8001998 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001fe2:	f107 0320 	add.w	r3, r7, #32
 8001fe6:	f04f 32ff 	mov.w	r2, #4294967295
 8001fea:	9200      	str	r2, [sp, #0]
 8001fec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff0:	2100      	movs	r1, #0
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f003 fdfe 	bl	8005bf4 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <vTCADCTCPTask+0xe8>
	    pcBufferToTransmit = usTCADCData1;
 8002002:	4b33      	ldr	r3, [pc, #204]	@ (80020d0 <vTCADCTCPTask+0x1b0>)
 8002004:	653b      	str	r3, [r7, #80]	@ 0x50
 8002006:	e001      	b.n	800200c <vTCADCTCPTask+0xec>
	} else {
	    pcBufferToTransmit = usTCADCData0;
 8002008:	4b32      	ldr	r3, [pc, #200]	@ (80020d4 <vTCADCTCPTask+0x1b4>)
 800200a:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 800200c:	2300      	movs	r3, #0
 800200e:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8002014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002018:	2218      	movs	r2, #24
 800201a:	4619      	mov	r1, r3
 800201c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800201e:	f00d fe2f 	bl	800fc80 <FreeRTOS_connect>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d139      	bne.n	800209c <vTCADCTCPTask+0x17c>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8002028:	e030      	b.n	800208c <vTCADCTCPTask+0x16c>
                {
                    BaseType_t xAvlSpace = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 800202e:	2300      	movs	r3, #0
 8002030:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	4619      	mov	r1, r3
 8002038:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800203a:	f00e f928 	bl	801028e <FreeRTOS_get_tx_head>
 800203e:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8002040:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d027      	beq.n	8002096 <vTCADCTCPTask+0x176>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8002046:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002048:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	4293      	cmp	r3, r2
 8002050:	d902      	bls.n	8002058 <vTCADCTCPTask+0x138>
                        {
                            xBytesToSend = xAvlSpace;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002056:	e003      	b.n	8002060 <vTCADCTCPTask+0x140>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8002058:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800205a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8002060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002062:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002064:	4413      	add	r3, r2
 8002066:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002068:	4619      	mov	r1, r3
 800206a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800206c:	f020 fd8e 	bl	8022b8c <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8002070:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002072:	2300      	movs	r3, #0
 8002074:	2100      	movs	r1, #0
 8002076:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8002078:	f00e fa14 	bl	80104a4 <FreeRTOS_send>
 800207c:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 800207e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002080:	2b00      	cmp	r3, #0
 8002082:	db0a      	blt.n	800209a <vTCADCTCPTask+0x17a>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8002084:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002086:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002088:	4413      	add	r3, r2
 800208a:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 800208c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800208e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002090:	429a      	cmp	r2, r3
 8002092:	d8ca      	bhi.n	800202a <vTCADCTCPTask+0x10a>
 8002094:	e002      	b.n	800209c <vTCADCTCPTask+0x17c>
                        break;
 8002096:	bf00      	nop
 8002098:	e000      	b.n	800209c <vTCADCTCPTask+0x17c>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 800209a:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 800209c:	2102      	movs	r1, #2
 800209e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020a0:	f00e faaf 	bl	8010602 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80020a4:	e002      	b.n	80020ac <vTCADCTCPTask+0x18c>
            vTaskDelay(pdMS_TO_TICKS(1));
 80020a6:	2001      	movs	r0, #1
 80020a8:	f002 fc1a 	bl	80048e0 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80020ac:	2300      	movs	r3, #0
 80020ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80020b0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80020b2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020b4:	f00e f856 	bl	8010164 <FreeRTOS_recv>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	daf3      	bge.n	80020a6 <vTCADCTCPTask+0x186>
        }
        FreeRTOS_closesocket(xSocket);
 80020be:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80020c0:	f00c fe4a 	bl	800ed58 <FreeRTOS_closesocket>
    for(;;) {
 80020c4:	e754      	b.n	8001f70 <vTCADCTCPTask+0x50>
 80020c6:	bf00      	nop
 80020c8:	08027e8c 	.word	0x08027e8c
 80020cc:	08024928 	.word	0x08024928
 80020d0:	30030088 	.word	0x30030088
 80020d4:	30030008 	.word	0x30030008

080020d8 <vCommandServerTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

void vCommandServerTask( void *pvParameters )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b094      	sub	sp, #80	@ 0x50
 80020dc:	af02      	add	r7, sp, #8
 80020de:	6078      	str	r0, [r7, #4]
  struct freertos_sockaddr xClient, xBindAddress;
  Socket_t xListeningSocket, xConnectedSocket;
  socklen_t xSize = sizeof( xClient );
 80020e0:	2318      	movs	r3, #24
 80020e2:	60bb      	str	r3, [r7, #8]
  static const TickType_t xReceiveTimeOut = pdMS_TO_TICKS( 500 );
  const BaseType_t xBacklog = 20;
 80020e4:	2314      	movs	r3, #20
 80020e6:	647b      	str	r3, [r7, #68]	@ 0x44

      /* Attempt to open the socket. */
      xListeningSocket = FreeRTOS_socket( FREERTOS_AF_INET4, /* Or FREERTOS_AF_INET6 for IPv6. */
 80020e8:	2206      	movs	r2, #6
 80020ea:	2101      	movs	r1, #1
 80020ec:	2002      	movs	r0, #2
 80020ee:	f00c fa6f 	bl	800e5d0 <FreeRTOS_socket>
 80020f2:	6438      	str	r0, [r7, #64]	@ 0x40
					  FREERTOS_SOCK_STREAM,  /* SOCK_STREAM for TCP. */
					  FREERTOS_IPPROTO_TCP );

      /* Check the socket was created. */
      configASSERT( xListeningSocket != FREERTOS_INVALID_SOCKET );
 80020f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fa:	d104      	bne.n	8002106 <vCommandServerTask+0x2e>
 80020fc:	f240 71c6 	movw	r1, #1990	@ 0x7c6
 8002100:	4825      	ldr	r0, [pc, #148]	@ (8002198 <vCommandServerTask+0xc0>)
 8002102:	f7ff fc49 	bl	8001998 <vAssertCalled>
	 be used with FreeRTOS_setsockopt() to change the sliding window size from
	 its default then do it here! (see the FreeRTOS_setsockopt()
	 documentation. */

      /* Set a time out so accept() will just wait for a connection. */
      FreeRTOS_setsockopt( xListeningSocket,
 8002106:	2304      	movs	r3, #4
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	4b24      	ldr	r3, [pc, #144]	@ (800219c <vCommandServerTask+0xc4>)
 800210c:	2200      	movs	r2, #0
 800210e:	2100      	movs	r1, #0
 8002110:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002112:	f00d fa17 	bl	800f544 <FreeRTOS_setsockopt>
			   FREERTOS_SO_RCVTIMEO,
			   &xReceiveTimeOut,
			   sizeof( xReceiveTimeOut ) );

      /* Set the listening port to 10000. */
      memset( &xBindAddress, 0, sizeof(xBindAddress) );
 8002116:	f107 030c 	add.w	r3, r7, #12
 800211a:	2218      	movs	r2, #24
 800211c:	2100      	movs	r1, #0
 800211e:	4618      	mov	r0, r3
 8002120:	f020 fe41 	bl	8022da6 <memset>
      xBindAddress.sin_port = usCommandPort;
 8002124:	f241 3389 	movw	r3, #5001	@ 0x1389
 8002128:	81fb      	strh	r3, [r7, #14]
      xBindAddress.sin_port = FreeRTOS_htons( xBindAddress.sin_port );
 800212a:	89fb      	ldrh	r3, [r7, #14]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	b21a      	sxth	r2, r3
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	b29b      	uxth	r3, r3
 8002136:	b21b      	sxth	r3, r3
 8002138:	4313      	orrs	r3, r2
 800213a:	b21b      	sxth	r3, r3
 800213c:	b29b      	uxth	r3, r3
 800213e:	81fb      	strh	r3, [r7, #14]
      xBindAddress.sin_family = FREERTOS_AF_INET4; /* FREERTOS_AF_INET6 to be used for IPv6 */
 8002140:	2302      	movs	r3, #2
 8002142:	737b      	strb	r3, [r7, #13]

      /* Bind the socket to the port that the client RTOS task will send to. */
      FreeRTOS_bind( xListeningSocket, &xBindAddress, sizeof( xBindAddress ) );
 8002144:	f107 030c 	add.w	r3, r7, #12
 8002148:	2218      	movs	r2, #24
 800214a:	4619      	mov	r1, r3
 800214c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800214e:	f00c fc2f 	bl	800e9b0 <FreeRTOS_bind>

      /* Set the socket into a listening state so it can accept connections.
	 The maximum number of simultaneous connections is limited to 20. */
      FreeRTOS_listen( xListeningSocket, xBacklog );
 8002152:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002154:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002156:	f00e f9e3 	bl	8010520 <FreeRTOS_listen>

      for( ;; )
      {
	  /* Wait for incoming connections. */
	  xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
 800215a:	f107 0208 	add.w	r2, r7, #8
 800215e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002162:	4619      	mov	r1, r3
 8002164:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8002166:	f00d fead 	bl	800fec4 <FreeRTOS_accept>
 800216a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	  configASSERT( xConnectedSocket != FREERTOS_INVALID_SOCKET );
 800216c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800216e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002172:	d104      	bne.n	800217e <vCommandServerTask+0xa6>
 8002174:	f240 71e9 	movw	r1, #2025	@ 0x7e9
 8002178:	4807      	ldr	r0, [pc, #28]	@ (8002198 <vCommandServerTask+0xc0>)
 800217a:	f7ff fc0d 	bl	8001998 <vAssertCalled>

	  /* Spawn a RTOS task to handle the connection. */
	  xTaskCreate( prvCommandHandlerTask,
 800217e:	2300      	movs	r3, #0
 8002180:	9301      	str	r3, [sp, #4]
 8002182:	2300      	movs	r3, #0
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002188:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800218c:	4904      	ldr	r1, [pc, #16]	@ (80021a0 <vCommandServerTask+0xc8>)
 800218e:	4805      	ldr	r0, [pc, #20]	@ (80021a4 <vCommandServerTask+0xcc>)
 8002190:	f002 f9c8 	bl	8004524 <xTaskCreate>
	  xConnectedSocket = FreeRTOS_accept( xListeningSocket, &xClient, &xSize );
 8002194:	e7e1      	b.n	800215a <vCommandServerTask+0x82>
 8002196:	bf00      	nop
 8002198:	08024928 	.word	0x08024928
 800219c:	08027e90 	.word	0x08027e90
 80021a0:	080249b0 	.word	0x080249b0
 80021a4:	080021a9 	.word	0x080021a9

080021a8 <prvCommandHandlerTask>:
      }
}


static void prvCommandHandlerTask( void *pvParameters )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  static char cRxedData[ CMD_BUFFER_SIZE ];
  BaseType_t lBytesReceived;

      /* It is assumed the socket has already been created and connected before
   being passed into this RTOS task using the RTOS task's parameter. */
      xSocket = ( Socket_t ) pvParameters;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60fb      	str	r3, [r7, #12]

      for( ;; )
      {
	  /* Receive another block of data into the cRxedData buffer. */
	  lBytesReceived = FreeRTOS_recv( xSocket, &cRxedData, CMD_BUFFER_SIZE, 0 );
 80021b4:	2300      	movs	r3, #0
 80021b6:	2280      	movs	r2, #128	@ 0x80
 80021b8:	4950      	ldr	r1, [pc, #320]	@ (80022fc <prvCommandHandlerTask+0x154>)
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f00d ffd2 	bl	8010164 <FreeRTOS_recv>
 80021c0:	60b8      	str	r0, [r7, #8]

	  if( lBytesReceived > 0 )
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	dd79      	ble.n	80022bc <prvCommandHandlerTask+0x114>
	  {
	      /* Data was received, process it here. */
	      //prvProcessData( cRxedData, lBytesReceived );
	      cRxedData[lBytesReceived] = 0; //ensure null terminated string
 80021c8:	4a4c      	ldr	r2, [pc, #304]	@ (80022fc <prvCommandHandlerTask+0x154>)
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
	      if (strncmp(cRxedData, "INIT", 4) == 0){
 80021d2:	2204      	movs	r2, #4
 80021d4:	494a      	ldr	r1, [pc, #296]	@ (8002300 <prvCommandHandlerTask+0x158>)
 80021d6:	4849      	ldr	r0, [pc, #292]	@ (80022fc <prvCommandHandlerTask+0x154>)
 80021d8:	f021 fcb2 	bl	8023b40 <strncmp>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d116      	bne.n	8002210 <prvCommandHandlerTask+0x68>
		  FreeRTOS_printf(("Received Init Command\n"));
 80021e2:	4848      	ldr	r0, [pc, #288]	@ (8002304 <prvCommandHandlerTask+0x15c>)
 80021e4:	f020 fab6 	bl	8022754 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 80021e8:	2201      	movs	r2, #1
 80021ea:	2120      	movs	r1, #32
 80021ec:	4846      	ldr	r0, [pc, #280]	@ (8002308 <prvCommandHandlerTask+0x160>)
 80021ee:	f01a fd31 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 80021f2:	2200      	movs	r2, #0
 80021f4:	2104      	movs	r1, #4
 80021f6:	4844      	ldr	r0, [pc, #272]	@ (8002308 <prvCommandHandlerTask+0x160>)
 80021f8:	f01a fd2c 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_RESET);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2110      	movs	r1, #16
 8002200:	4841      	ldr	r0, [pc, #260]	@ (8002308 <prvCommandHandlerTask+0x160>)
 8002202:	f01a fd27 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2108      	movs	r1, #8
 800220a:	483f      	ldr	r0, [pc, #252]	@ (8002308 <prvCommandHandlerTask+0x160>)
 800220c:	f01a fd22 	bl	801cc54 <HAL_GPIO_WritePin>

	      }
	      if (strncmp(cRxedData, "STOP", 4) == 0){
 8002210:	2204      	movs	r2, #4
 8002212:	493e      	ldr	r1, [pc, #248]	@ (800230c <prvCommandHandlerTask+0x164>)
 8002214:	4839      	ldr	r0, [pc, #228]	@ (80022fc <prvCommandHandlerTask+0x154>)
 8002216:	f021 fc93 	bl	8023b40 <strncmp>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d116      	bne.n	800224e <prvCommandHandlerTask+0xa6>
		  FreeRTOS_printf(("Received Stop Command\n"));
 8002220:	483b      	ldr	r0, [pc, #236]	@ (8002310 <prvCommandHandlerTask+0x168>)
 8002222:	f020 fa97 	bl	8022754 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8002226:	2201      	movs	r2, #1
 8002228:	2120      	movs	r1, #32
 800222a:	4837      	ldr	r0, [pc, #220]	@ (8002308 <prvCommandHandlerTask+0x160>)
 800222c:	f01a fd12 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 8002230:	2200      	movs	r2, #0
 8002232:	2104      	movs	r1, #4
 8002234:	4834      	ldr	r0, [pc, #208]	@ (8002308 <prvCommandHandlerTask+0x160>)
 8002236:	f01a fd0d 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VICTRL_SEL_GPIO_Port, DUT_VICTRL_SEL_Pin, GPIO_PIN_RESET);
 800223a:	2200      	movs	r2, #0
 800223c:	2110      	movs	r1, #16
 800223e:	4832      	ldr	r0, [pc, #200]	@ (8002308 <prvCommandHandlerTask+0x160>)
 8002240:	f01a fd08 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_VGS_IDLE_SEL_GPIO_Port, DUT_VGS_IDLE_SEL_Pin, GPIO_PIN_RESET);
 8002244:	2200      	movs	r2, #0
 8002246:	2108      	movs	r1, #8
 8002248:	482f      	ldr	r0, [pc, #188]	@ (8002308 <prvCommandHandlerTask+0x160>)
 800224a:	f01a fd03 	bl	801cc54 <HAL_GPIO_WritePin>

	      }
	      if (strncmp(cRxedData, "HEAT", 4) == 0){
 800224e:	2204      	movs	r2, #4
 8002250:	4930      	ldr	r1, [pc, #192]	@ (8002314 <prvCommandHandlerTask+0x16c>)
 8002252:	482a      	ldr	r0, [pc, #168]	@ (80022fc <prvCommandHandlerTask+0x154>)
 8002254:	f021 fc74 	bl	8023b40 <strncmp>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d112      	bne.n	8002284 <prvCommandHandlerTask+0xdc>
		  FreeRTOS_printf(("Received Heat Command\n"));
 800225e:	482e      	ldr	r0, [pc, #184]	@ (8002318 <prvCommandHandlerTask+0x170>)
 8002260:	f020 fa78 	bl	8022754 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	2120      	movs	r1, #32
 8002268:	4827      	ldr	r0, [pc, #156]	@ (8002308 <prvCommandHandlerTask+0x160>)
 800226a:	f01a fcf3 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_SET);
 800226e:	2201      	movs	r2, #1
 8002270:	2104      	movs	r1, #4
 8002272:	4825      	ldr	r0, [pc, #148]	@ (8002308 <prvCommandHandlerTask+0x160>)
 8002274:	f01a fcee 	bl	801cc54 <HAL_GPIO_WritePin>
		  ulSevenSegD1 |= 1<<8; //turn first digit DP on
 8002278:	4b28      	ldr	r3, [pc, #160]	@ (800231c <prvCommandHandlerTask+0x174>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002280:	4a26      	ldr	r2, [pc, #152]	@ (800231c <prvCommandHandlerTask+0x174>)
 8002282:	6013      	str	r3, [r2, #0]
	      }
	      if (strncmp(cRxedData, "COOL", 4) == 0){
 8002284:	2204      	movs	r2, #4
 8002286:	4926      	ldr	r1, [pc, #152]	@ (8002320 <prvCommandHandlerTask+0x178>)
 8002288:	481c      	ldr	r0, [pc, #112]	@ (80022fc <prvCommandHandlerTask+0x154>)
 800228a:	f021 fc59 	bl	8023b40 <strncmp>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d18f      	bne.n	80021b4 <prvCommandHandlerTask+0xc>
		  FreeRTOS_printf(("Received Cool Command\n"));
 8002294:	4823      	ldr	r0, [pc, #140]	@ (8002324 <prvCommandHandlerTask+0x17c>)
 8002296:	f020 fa5d 	bl	8022754 <lUDPLoggingPrintf>
		  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	2120      	movs	r1, #32
 800229e:	481a      	ldr	r0, [pc, #104]	@ (8002308 <prvCommandHandlerTask+0x160>)
 80022a0:	f01a fcd8 	bl	801cc54 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(DUT_HVDC_ENABLE_GPIO_Port, DUT_HVDC_ENABLE_Pin, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2104      	movs	r1, #4
 80022a8:	4817      	ldr	r0, [pc, #92]	@ (8002308 <prvCommandHandlerTask+0x160>)
 80022aa:	f01a fcd3 	bl	801cc54 <HAL_GPIO_WritePin>
		  ulSevenSegD1 &= ~(1<<8); //turn first digit DP off
 80022ae:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <prvCommandHandlerTask+0x174>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022b6:	4a19      	ldr	r2, [pc, #100]	@ (800231c <prvCommandHandlerTask+0x174>)
 80022b8:	6013      	str	r3, [r2, #0]
 80022ba:	e77b      	b.n	80021b4 <prvCommandHandlerTask+0xc>
	      }
	  }
	  else if( lBytesReceived == 0 )
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f43f af78 	beq.w	80021b4 <prvCommandHandlerTask+0xc>
	  }
	  else
	  {
	      /* Error (maybe the connected socket already shut down the socket?).
		 Attempt graceful shutdown. */
	      FreeRTOS_shutdown( xSocket, FREERTOS_SHUT_RDWR );
 80022c4:	2102      	movs	r1, #2
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f00e f99b 	bl	8010602 <FreeRTOS_shutdown>
	      break;
 80022cc:	bf00      	nop

      /* The RTOS task will get here if an error is received on a read. Ensure the
   socket has shut down (indicated by FreeRTOS\_recv() returning a -pdFREERTOS\_ERRNO\_EINVAL
   error before closing the socket). */

      while( FreeRTOS_recv( xSocket, &usZero, 1, 0 ) >= 0 )
 80022ce:	e002      	b.n	80022d6 <prvCommandHandlerTask+0x12e>
      {
	  /* Wait for shutdown to complete. If a receive block time is used then
	     this delay will not be necessary as FreeRTOS\_recv() will place the RTOS task
	     into the Blocked state anyway. */
	  vTaskDelay( pdTICKS_TO_MS( 1 ) );
 80022d0:	2001      	movs	r0, #1
 80022d2:	f002 fb05 	bl	80048e0 <vTaskDelay>
      while( FreeRTOS_recv( xSocket, &usZero, 1, 0 ) >= 0 )
 80022d6:	2300      	movs	r3, #0
 80022d8:	2201      	movs	r2, #1
 80022da:	4913      	ldr	r1, [pc, #76]	@ (8002328 <prvCommandHandlerTask+0x180>)
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f00d ff41 	bl	8010164 <FreeRTOS_recv>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	daf3      	bge.n	80022d0 <prvCommandHandlerTask+0x128>
	  /* Note - real applications should implement a timeout here, not just
	     loop forever. */
      }

      /* Shutdown is complete and the socket can be safely closed. */
      FreeRTOS_closesocket( xSocket );
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f00c fd35 	bl	800ed58 <FreeRTOS_closesocket>

      /* Must not drop off the end of the RTOS task - delete the RTOS task. */
      vTaskDelete(NULL);
 80022ee:	2000      	movs	r0, #0
 80022f0:	f002 fa58 	bl	80047a4 <vTaskDelete>
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000d48 	.word	0x20000d48
 8002300:	080249c0 	.word	0x080249c0
 8002304:	080249c8 	.word	0x080249c8
 8002308:	58021000 	.word	0x58021000
 800230c:	080249e0 	.word	0x080249e0
 8002310:	080249e8 	.word	0x080249e8
 8002314:	08024a00 	.word	0x08024a00
 8002318:	08024a08 	.word	0x08024a08
 800231c:	30030108 	.word	0x30030108
 8002320:	08024a20 	.word	0x08024a20
 8002324:	08024a28 	.word	0x08024a28
 8002328:	30000000 	.word	0x30000000

0800232c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002332:	463b      	mov	r3, r7
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800233e:	f018 fb59 	bl	801a9f4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002342:	2301      	movs	r3, #1
 8002344:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002346:	2300      	movs	r3, #0
 8002348:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800234a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800234e:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8002350:	2312      	movs	r3, #18
 8002352:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002354:	2300      	movs	r3, #0
 8002356:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8002358:	2301      	movs	r3, #1
 800235a:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800235c:	2303      	movs	r3, #3
 800235e:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002360:	2300      	movs	r3, #0
 8002362:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002364:	2301      	movs	r3, #1
 8002366:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8002368:	2300      	movs	r3, #0
 800236a:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002370:	463b      	mov	r3, r7
 8002372:	4618      	mov	r0, r3
 8002374:	f018 fb76 	bl	801aa64 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002378:	2301      	movs	r3, #1
 800237a:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 800237c:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8002380:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002382:	463b      	mov	r3, r7
 8002384:	4618      	mov	r0, r3
 8002386:	f018 fb6d 	bl	801aa64 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800238a:	2004      	movs	r0, #4
 800238c:	f018 fb4a 	bl	801aa24 <HAL_MPU_Enable>

}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <Error_Handler+0x8>

080023a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_MspInit+0x30>)
 80023ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023b0:	4a08      	ldr	r2, [pc, #32]	@ (80023d4 <HAL_MspInit+0x30>)
 80023b2:	f043 0302 	orr.w	r3, r3, #2
 80023b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80023ba:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_MspInit+0x30>)
 80023bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	58024400 	.word	0x58024400

080023d8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b08e      	sub	sp, #56	@ 0x38
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a61      	ldr	r2, [pc, #388]	@ (800257c <HAL_ETH_MspInit+0x1a4>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	f040 80bb 	bne.w	8002572 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80023fc:	4b60      	ldr	r3, [pc, #384]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 80023fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002402:	4a5f      	ldr	r2, [pc, #380]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002408:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800240c:	4b5c      	ldr	r3, [pc, #368]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800240e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002412:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002416:	623b      	str	r3, [r7, #32]
 8002418:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800241a:	4b59      	ldr	r3, [pc, #356]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800241c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002420:	4a57      	ldr	r2, [pc, #348]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002426:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800242a:	4b55      	ldr	r3, [pc, #340]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800242c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002430:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002438:	4b51      	ldr	r3, [pc, #324]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800243a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800243e:	4a50      	ldr	r2, [pc, #320]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002444:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8002448:	4b4d      	ldr	r3, [pc, #308]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800244a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800244e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002452:	61bb      	str	r3, [r7, #24]
 8002454:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002456:	4b4a      	ldr	r3, [pc, #296]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800245c:	4a48      	ldr	r2, [pc, #288]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800245e:	f043 0304 	orr.w	r3, r3, #4
 8002462:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002466:	4b46      	ldr	r3, [pc, #280]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	617b      	str	r3, [r7, #20]
 8002472:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b42      	ldr	r3, [pc, #264]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247a:	4a41      	ldr	r2, [pc, #260]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002484:	4b3e      	ldr	r3, [pc, #248]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002492:	4b3b      	ldr	r3, [pc, #236]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002498:	4a39      	ldr	r2, [pc, #228]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 800249a:	f043 0302 	orr.w	r3, r3, #2
 800249e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024a2:	4b37      	ldr	r3, [pc, #220]	@ (8002580 <HAL_ETH_MspInit+0x1a8>)
 80024a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024b0:	2302      	movs	r3, #2
 80024b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024c0:	230b      	movs	r3, #11
 80024c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c8:	4619      	mov	r1, r3
 80024ca:	482e      	ldr	r0, [pc, #184]	@ (8002584 <HAL_ETH_MspInit+0x1ac>)
 80024cc:	f01a fa12 	bl	801c8f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80024d0:	2306      	movs	r3, #6
 80024d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d4:	2302      	movs	r3, #2
 80024d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024dc:	2303      	movs	r3, #3
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80024e0:	230b      	movs	r3, #11
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e8:	4619      	mov	r1, r3
 80024ea:	4827      	ldr	r0, [pc, #156]	@ (8002588 <HAL_ETH_MspInit+0x1b0>)
 80024ec:	f01a fa02 	bl	801c8f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024f0:	2380      	movs	r3, #128	@ 0x80
 80024f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002500:	230b      	movs	r3, #11
 8002502:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	481f      	ldr	r0, [pc, #124]	@ (8002588 <HAL_ETH_MspInit+0x1b0>)
 800250c:	f01a f9f2 	bl	801c8f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002510:	2330      	movs	r3, #48	@ 0x30
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251c:	2300      	movs	r3, #0
 800251e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002520:	230b      	movs	r3, #11
 8002522:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002524:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002528:	4619      	mov	r1, r3
 800252a:	4816      	ldr	r0, [pc, #88]	@ (8002584 <HAL_ETH_MspInit+0x1ac>)
 800252c:	f01a f9e2 	bl	801c8f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8002530:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8002534:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002536:	2302      	movs	r3, #2
 8002538:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800253a:	2300      	movs	r3, #0
 800253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253e:	2303      	movs	r3, #3
 8002540:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002542:	230b      	movs	r3, #11
 8002544:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002546:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800254a:	4619      	mov	r1, r3
 800254c:	480f      	ldr	r0, [pc, #60]	@ (800258c <HAL_ETH_MspInit+0x1b4>)
 800254e:	f01a f9d1 	bl	801c8f4 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2105      	movs	r1, #5
 8002556:	203d      	movs	r0, #61	@ 0x3d
 8002558:	f018 fa17 	bl	801a98a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800255c:	203d      	movs	r0, #61	@ 0x3d
 800255e:	f018 fa2e 	bl	801a9be <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8002562:	2200      	movs	r2, #0
 8002564:	2105      	movs	r1, #5
 8002566:	203e      	movs	r0, #62	@ 0x3e
 8002568:	f018 fa0f 	bl	801a98a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800256c:	203e      	movs	r0, #62	@ 0x3e
 800256e:	f018 fa26 	bl	801a9be <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002572:	bf00      	nop
 8002574:	3738      	adds	r7, #56	@ 0x38
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	40028000 	.word	0x40028000
 8002580:	58024400 	.word	0x58024400
 8002584:	58020800 	.word	0x58020800
 8002588:	58020000 	.word	0x58020000
 800258c:	58020400 	.word	0x58020400

08002590 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b0ba      	sub	sp, #232	@ 0xe8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002598:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	605a      	str	r2, [r3, #4]
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	60da      	str	r2, [r3, #12]
 80025a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80025a8:	f107 0310 	add.w	r3, r7, #16
 80025ac:	22c0      	movs	r2, #192	@ 0xc0
 80025ae:	2100      	movs	r1, #0
 80025b0:	4618      	mov	r0, r3
 80025b2:	f020 fbf8 	bl	8022da6 <memset>
  if(hi2c->Instance==I2C4)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a27      	ldr	r2, [pc, #156]	@ (8002658 <HAL_I2C_MspInit+0xc8>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	d146      	bne.n	800264e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80025c0:	f04f 0210 	mov.w	r2, #16
 80025c4:	f04f 0300 	mov.w	r3, #0
 80025c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025d2:	f107 0310 	add.w	r3, r7, #16
 80025d6:	4618      	mov	r0, r3
 80025d8:	f01b fcaa 	bl	801df30 <HAL_RCCEx_PeriphCLKConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80025e2:	f7ff fed9 	bl	8002398 <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e6:	4b1d      	ldr	r3, [pc, #116]	@ (800265c <HAL_I2C_MspInit+0xcc>)
 80025e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ec:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <HAL_I2C_MspInit+0xcc>)
 80025ee:	f043 0308 	orr.w	r3, r3, #8
 80025f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025f6:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_I2C_MspInit+0xcc>)
 80025f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002604:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002608:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260c:	2312      	movs	r3, #18
 800260e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002612:	2300      	movs	r3, #0
 8002614:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002618:	2300      	movs	r3, #0
 800261a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800261e:	2304      	movs	r3, #4
 8002620:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002624:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002628:	4619      	mov	r1, r3
 800262a:	480d      	ldr	r0, [pc, #52]	@ (8002660 <HAL_I2C_MspInit+0xd0>)
 800262c:	f01a f962 	bl	801c8f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8002630:	4b0a      	ldr	r3, [pc, #40]	@ (800265c <HAL_I2C_MspInit+0xcc>)
 8002632:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002636:	4a09      	ldr	r2, [pc, #36]	@ (800265c <HAL_I2C_MspInit+0xcc>)
 8002638:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800263c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002640:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_I2C_MspInit+0xcc>)
 8002642:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 800264e:	bf00      	nop
 8002650:	37e8      	adds	r7, #232	@ 0xe8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	58001c00 	.word	0x58001c00
 800265c:	58024400 	.word	0x58024400
 8002660:	58020c00 	.word	0x58020c00

08002664 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b090      	sub	sp, #64	@ 0x40
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800266c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002670:	2200      	movs	r2, #0
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	609a      	str	r2, [r3, #8]
 8002678:	60da      	str	r2, [r3, #12]
 800267a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a88      	ldr	r2, [pc, #544]	@ (80028a4 <HAL_SPI_MspInit+0x240>)
 8002682:	4293      	cmp	r3, r2
 8002684:	f040 8083 	bne.w	800278e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002688:	4b87      	ldr	r3, [pc, #540]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 800268a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800268e:	4a86      	ldr	r2, [pc, #536]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 8002690:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002694:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002698:	4b83      	ldr	r3, [pc, #524]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 800269a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800269e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a6:	4b80      	ldr	r3, [pc, #512]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80026a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ac:	4a7e      	ldr	r2, [pc, #504]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80026ae:	f043 0301 	orr.w	r3, r3, #1
 80026b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026b6:	4b7c      	ldr	r3, [pc, #496]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80026b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	4b78      	ldr	r3, [pc, #480]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80026c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026ca:	4a77      	ldr	r2, [pc, #476]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80026cc:	f043 0302 	orr.w	r3, r3, #2
 80026d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80026d4:	4b74      	ldr	r3, [pc, #464]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80026d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	623b      	str	r3, [r7, #32]
 80026e0:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80026e2:	2370      	movs	r3, #112	@ 0x70
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80026f2:	2305      	movs	r3, #5
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026fa:	4619      	mov	r1, r3
 80026fc:	486b      	ldr	r0, [pc, #428]	@ (80028ac <HAL_SPI_MspInit+0x248>)
 80026fe:	f01a f8f9 	bl	801c8f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002702:	2320      	movs	r3, #32
 8002704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002712:	2305      	movs	r3, #5
 8002714:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002716:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800271a:	4619      	mov	r1, r3
 800271c:	4864      	ldr	r0, [pc, #400]	@ (80028b0 <HAL_SPI_MspInit+0x24c>)
 800271e:	f01a f8e9 	bl	801c8f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8002722:	4b64      	ldr	r3, [pc, #400]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 8002724:	4a64      	ldr	r2, [pc, #400]	@ (80028b8 <HAL_SPI_MspInit+0x254>)
 8002726:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8002728:	4b62      	ldr	r3, [pc, #392]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 800272a:	2225      	movs	r2, #37	@ 0x25
 800272c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800272e:	4b61      	ldr	r3, [pc, #388]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 8002730:	2200      	movs	r2, #0
 8002732:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002734:	4b5f      	ldr	r3, [pc, #380]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 8002736:	2200      	movs	r2, #0
 8002738:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800273a:	4b5e      	ldr	r3, [pc, #376]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 800273c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002740:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002742:	4b5c      	ldr	r3, [pc, #368]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 8002744:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002748:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800274a:	4b5a      	ldr	r3, [pc, #360]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 800274c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002750:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002752:	4b58      	ldr	r3, [pc, #352]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 8002754:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002758:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800275a:	4b56      	ldr	r3, [pc, #344]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 800275c:	2200      	movs	r2, #0
 800275e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002760:	4b54      	ldr	r3, [pc, #336]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 8002762:	2200      	movs	r2, #0
 8002764:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002766:	4853      	ldr	r0, [pc, #332]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 8002768:	f018 f9bc 	bl	801aae4 <HAL_DMA_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8002772:	f7ff fe11 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a4e      	ldr	r2, [pc, #312]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 800277a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800277c:	4a4d      	ldr	r2, [pc, #308]	@ (80028b4 <HAL_SPI_MspInit+0x250>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	2023      	movs	r0, #35	@ 0x23
 8002788:	f018 f8ff 	bl	801a98a <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800278c:	e126      	b.n	80029dc <HAL_SPI_MspInit+0x378>
  else if(hspi->Instance==SPI2)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a4a      	ldr	r2, [pc, #296]	@ (80028bc <HAL_SPI_MspInit+0x258>)
 8002794:	4293      	cmp	r3, r2
 8002796:	f040 8097 	bne.w	80028c8 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800279a:	4b43      	ldr	r3, [pc, #268]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 800279c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027a0:	4a41      	ldr	r2, [pc, #260]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027a6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027aa:	4b3f      	ldr	r3, [pc, #252]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027b4:	61fb      	str	r3, [r7, #28]
 80027b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b8:	4b3b      	ldr	r3, [pc, #236]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027be:	4a3a      	ldr	r2, [pc, #232]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027c8:	4b37      	ldr	r3, [pc, #220]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	61bb      	str	r3, [r7, #24]
 80027d4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d6:	4b34      	ldr	r3, [pc, #208]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027dc:	4a32      	ldr	r2, [pc, #200]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027e6:	4b30      	ldr	r3, [pc, #192]	@ (80028a8 <HAL_SPI_MspInit+0x244>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	617b      	str	r3, [r7, #20]
 80027f2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80027f4:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002802:	2300      	movs	r3, #0
 8002804:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002806:	2305      	movs	r3, #5
 8002808:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800280a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800280e:	4619      	mov	r1, r3
 8002810:	4827      	ldr	r0, [pc, #156]	@ (80028b0 <HAL_SPI_MspInit+0x24c>)
 8002812:	f01a f86f 	bl	801c8f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002816:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002820:	2300      	movs	r3, #0
 8002822:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002828:	2305      	movs	r3, #5
 800282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002830:	4619      	mov	r1, r3
 8002832:	481e      	ldr	r0, [pc, #120]	@ (80028ac <HAL_SPI_MspInit+0x248>)
 8002834:	f01a f85e 	bl	801c8f4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8002838:	4b21      	ldr	r3, [pc, #132]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 800283a:	4a22      	ldr	r2, [pc, #136]	@ (80028c4 <HAL_SPI_MspInit+0x260>)
 800283c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800283e:	4b20      	ldr	r3, [pc, #128]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002840:	2227      	movs	r2, #39	@ 0x27
 8002842:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002844:	4b1e      	ldr	r3, [pc, #120]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 800284c:	2200      	movs	r2, #0
 800284e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002850:	4b1b      	ldr	r3, [pc, #108]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002852:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002856:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002858:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 800285a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800285e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002860:	4b17      	ldr	r3, [pc, #92]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002862:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002866:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 800286a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800286e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002870:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002876:	4b12      	ldr	r3, [pc, #72]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002878:	2200      	movs	r2, #0
 800287a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800287c:	4810      	ldr	r0, [pc, #64]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 800287e:	f018 f931 	bl	801aae4 <HAL_DMA_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8002888:	f7ff fd86 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a0c      	ldr	r2, [pc, #48]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002890:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002892:	4a0b      	ldr	r2, [pc, #44]	@ (80028c0 <HAL_SPI_MspInit+0x25c>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8002898:	2200      	movs	r2, #0
 800289a:	2100      	movs	r1, #0
 800289c:	2024      	movs	r0, #36	@ 0x24
 800289e:	f018 f874 	bl	801a98a <HAL_NVIC_SetPriority>
}
 80028a2:	e09b      	b.n	80029dc <HAL_SPI_MspInit+0x378>
 80028a4:	40013000 	.word	0x40013000
 80028a8:	58024400 	.word	0x58024400
 80028ac:	58020000 	.word	0x58020000
 80028b0:	58020400 	.word	0x58020400
 80028b4:	20000290 	.word	0x20000290
 80028b8:	40020010 	.word	0x40020010
 80028bc:	40003800 	.word	0x40003800
 80028c0:	20000308 	.word	0x20000308
 80028c4:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a45      	ldr	r2, [pc, #276]	@ (80029e4 <HAL_SPI_MspInit+0x380>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f040 8084 	bne.w	80029dc <HAL_SPI_MspInit+0x378>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028d4:	4b44      	ldr	r3, [pc, #272]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 80028d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028da:	4a43      	ldr	r2, [pc, #268]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 80028dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80028e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80028e4:	4b40      	ldr	r3, [pc, #256]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 80028e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80028ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ee:	613b      	str	r3, [r7, #16]
 80028f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f2:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 80028f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028f8:	4a3b      	ldr	r2, [pc, #236]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002902:	4b39      	ldr	r3, [pc, #228]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 8002904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002910:	4b35      	ldr	r3, [pc, #212]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 8002912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002916:	4a34      	ldr	r2, [pc, #208]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002920:	4b31      	ldr	r3, [pc, #196]	@ (80029e8 <HAL_SPI_MspInit+0x384>)
 8002922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800292e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002932:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293c:	2300      	movs	r3, #0
 800293e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002940:	2306      	movs	r3, #6
 8002942:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002948:	4619      	mov	r1, r3
 800294a:	4828      	ldr	r0, [pc, #160]	@ (80029ec <HAL_SPI_MspInit+0x388>)
 800294c:	f019 ffd2 	bl	801c8f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002950:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002956:	2302      	movs	r3, #2
 8002958:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295a:	2300      	movs	r3, #0
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800295e:	2300      	movs	r3, #0
 8002960:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002962:	2306      	movs	r3, #6
 8002964:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800296a:	4619      	mov	r1, r3
 800296c:	4820      	ldr	r0, [pc, #128]	@ (80029f0 <HAL_SPI_MspInit+0x38c>)
 800296e:	f019 ffc1 	bl	801c8f4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream7;
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 8002974:	4a20      	ldr	r2, [pc, #128]	@ (80029f8 <HAL_SPI_MspInit+0x394>)
 8002976:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 8002978:	4b1e      	ldr	r3, [pc, #120]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 800297a:	223d      	movs	r2, #61	@ 0x3d
 800297c:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002984:	4b1b      	ldr	r3, [pc, #108]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 8002986:	2200      	movs	r2, #0
 8002988:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800298a:	4b1a      	ldr	r3, [pc, #104]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 800298c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002990:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002992:	4b18      	ldr	r3, [pc, #96]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 8002994:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002998:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 800299c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a0:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80029a2:	4b14      	ldr	r3, [pc, #80]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 80029a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029a8:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029aa:	4b12      	ldr	r3, [pc, #72]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029b0:	4b10      	ldr	r3, [pc, #64]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80029b6:	480f      	ldr	r0, [pc, #60]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 80029b8:	f018 f894 	bl	801aae4 <HAL_DMA_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_SPI_MspInit+0x362>
      Error_Handler();
 80029c2:	f7ff fce9 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a0a      	ldr	r2, [pc, #40]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 80029ca:	67da      	str	r2, [r3, #124]	@ 0x7c
 80029cc:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <HAL_SPI_MspInit+0x390>)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80029d2:	2200      	movs	r2, #0
 80029d4:	2100      	movs	r1, #0
 80029d6:	2033      	movs	r0, #51	@ 0x33
 80029d8:	f017 ffd7 	bl	801a98a <HAL_NVIC_SetPriority>
}
 80029dc:	bf00      	nop
 80029de:	3740      	adds	r7, #64	@ 0x40
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40003c00 	.word	0x40003c00
 80029e8:	58024400 	.word	0x58024400
 80029ec:	58020000 	.word	0x58020000
 80029f0:	58020800 	.word	0x58020800
 80029f4:	20000380 	.word	0x20000380
 80029f8:	400200b8 	.word	0x400200b8

080029fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b088      	sub	sp, #32
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a87      	ldr	r2, [pc, #540]	@ (8002c28 <HAL_TIM_Base_MspInit+0x22c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d13e      	bne.n	8002a8c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0e:	4b87      	ldr	r3, [pc, #540]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002a10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a14:	4a85      	ldr	r2, [pc, #532]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002a16:	f043 0301 	orr.w	r3, r3, #1
 8002a1a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002a1e:	4b83      	ldr	r3, [pc, #524]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002a20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	61fb      	str	r3, [r7, #28]
 8002a2a:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8002a2c:	4b80      	ldr	r3, [pc, #512]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a2e:	4a81      	ldr	r2, [pc, #516]	@ (8002c34 <HAL_TIM_Base_MspInit+0x238>)
 8002a30:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8002a32:	4b7f      	ldr	r3, [pc, #508]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a34:	220f      	movs	r2, #15
 8002a36:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a38:	4b7d      	ldr	r3, [pc, #500]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a3a:	2240      	movs	r2, #64	@ 0x40
 8002a3c:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a3e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8002a44:	4b7a      	ldr	r3, [pc, #488]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a4a:	4b79      	ldr	r3, [pc, #484]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a50:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a52:	4b77      	ldr	r3, [pc, #476]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a58:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8002a5a:	4b75      	ldr	r3, [pc, #468]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a60:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8002a62:	4b73      	ldr	r3, [pc, #460]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a68:	4b71      	ldr	r3, [pc, #452]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002a6e:	4870      	ldr	r0, [pc, #448]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a70:	f018 f838 	bl	801aae4 <HAL_DMA_Init>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002a7a:	f7ff fc8d 	bl	8002398 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a6b      	ldr	r2, [pc, #428]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a82:	621a      	str	r2, [r3, #32]
 8002a84:	4a6a      	ldr	r2, [pc, #424]	@ (8002c30 <HAL_TIM_Base_MspInit+0x234>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a8a:	e129      	b.n	8002ce0 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a94:	d10f      	bne.n	8002ab6 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a96:	4b65      	ldr	r3, [pc, #404]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002a9c:	4a63      	ldr	r2, [pc, #396]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002a9e:	f043 0301 	orr.w	r3, r3, #1
 8002aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002aa6:	4b61      	ldr	r3, [pc, #388]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
}
 8002ab4:	e114      	b.n	8002ce0 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM3)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5f      	ldr	r2, [pc, #380]	@ (8002c38 <HAL_TIM_Base_MspInit+0x23c>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d13e      	bne.n	8002b3e <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ac6:	4a59      	ldr	r2, [pc, #356]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002ac8:	f043 0302 	orr.w	r3, r3, #2
 8002acc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002ad0:	4b56      	ldr	r3, [pc, #344]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002ade:	4b57      	ldr	r3, [pc, #348]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002ae0:	4a57      	ldr	r2, [pc, #348]	@ (8002c40 <HAL_TIM_Base_MspInit+0x244>)
 8002ae2:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002ae4:	4b55      	ldr	r3, [pc, #340]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002ae6:	221b      	movs	r2, #27
 8002ae8:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002aea:	4b54      	ldr	r3, [pc, #336]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002aec:	2240      	movs	r2, #64	@ 0x40
 8002aee:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002af0:	4b52      	ldr	r3, [pc, #328]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8002af6:	4b51      	ldr	r3, [pc, #324]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002afc:	4b4f      	ldr	r3, [pc, #316]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002afe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002b02:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b04:	4b4d      	ldr	r3, [pc, #308]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002b06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b0a:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8002b0c:	4b4b      	ldr	r3, [pc, #300]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002b0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b12:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8002b14:	4b49      	ldr	r3, [pc, #292]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b1a:	4b48      	ldr	r3, [pc, #288]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8002b20:	4846      	ldr	r0, [pc, #280]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002b22:	f017 ffdf 	bl	801aae4 <HAL_DMA_Init>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8002b2c:	f7ff fc34 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a42      	ldr	r2, [pc, #264]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002b34:	621a      	str	r2, [r3, #32]
 8002b36:	4a41      	ldr	r2, [pc, #260]	@ (8002c3c <HAL_TIM_Base_MspInit+0x240>)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002b3c:	e0d0      	b.n	8002ce0 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM4)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a40      	ldr	r2, [pc, #256]	@ (8002c44 <HAL_TIM_Base_MspInit+0x248>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	f040 8087 	bne.w	8002c58 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4a:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002b4c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b50:	4a36      	ldr	r2, [pc, #216]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002b52:	f043 0304 	orr.w	r3, r3, #4
 8002b56:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002b5a:	4b34      	ldr	r3, [pc, #208]	@ (8002c2c <HAL_TIM_Base_MspInit+0x230>)
 8002b5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 8002b68:	4b37      	ldr	r3, [pc, #220]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b6a:	4a38      	ldr	r2, [pc, #224]	@ (8002c4c <HAL_TIM_Base_MspInit+0x250>)
 8002b6c:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002b6e:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b70:	221d      	movs	r2, #29
 8002b72:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b74:	4b34      	ldr	r3, [pc, #208]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b76:	2240      	movs	r2, #64	@ 0x40
 8002b78:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7a:	4b33      	ldr	r3, [pc, #204]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002b80:	4b31      	ldr	r3, [pc, #196]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002b86:	4b30      	ldr	r3, [pc, #192]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002b8c:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b8e:	4b2e      	ldr	r3, [pc, #184]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b94:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002b96:	4b2c      	ldr	r3, [pc, #176]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002b98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002ba0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002ba4:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba6:	4b28      	ldr	r3, [pc, #160]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002bac:	4826      	ldr	r0, [pc, #152]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002bae:	f017 ff99 	bl	801aae4 <HAL_DMA_Init>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 8002bb8:	f7ff fbee 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a22      	ldr	r2, [pc, #136]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002bc0:	625a      	str	r2, [r3, #36]	@ 0x24
 8002bc2:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <HAL_TIM_Base_MspInit+0x24c>)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 8002bc8:	4b21      	ldr	r3, [pc, #132]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002bca:	4a22      	ldr	r2, [pc, #136]	@ (8002c54 <HAL_TIM_Base_MspInit+0x258>)
 8002bcc:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002bce:	4b20      	ldr	r3, [pc, #128]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002bd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002bd6:	2240      	movs	r2, #64	@ 0x40
 8002bd8:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bda:	4b1d      	ldr	r3, [pc, #116]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002be6:	4b1a      	ldr	r3, [pc, #104]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002be8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002bec:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002bee:	4b18      	ldr	r3, [pc, #96]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002bf0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002bf4:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 8002bf6:	4b16      	ldr	r3, [pc, #88]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002bf8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002bfc:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002bfe:	4b14      	ldr	r3, [pc, #80]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c04:	4b12      	ldr	r3, [pc, #72]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8002c0a:	4811      	ldr	r0, [pc, #68]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002c0c:	f017 ff6a 	bl	801aae4 <HAL_DMA_Init>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 8002c16:	f7ff fbbf 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002c1e:	621a      	str	r2, [r3, #32]
 8002c20:	4a0b      	ldr	r2, [pc, #44]	@ (8002c50 <HAL_TIM_Base_MspInit+0x254>)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002c26:	e05b      	b.n	8002ce0 <HAL_TIM_Base_MspInit+0x2e4>
 8002c28:	40010000 	.word	0x40010000
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	20000574 	.word	0x20000574
 8002c34:	40020040 	.word	0x40020040
 8002c38:	40000400 	.word	0x40000400
 8002c3c:	200005ec 	.word	0x200005ec
 8002c40:	40020058 	.word	0x40020058
 8002c44:	40000800 	.word	0x40000800
 8002c48:	20000664 	.word	0x20000664
 8002c4c:	40020070 	.word	0x40020070
 8002c50:	200006dc 	.word	0x200006dc
 8002c54:	40020088 	.word	0x40020088
  else if(htim_base->Instance==TIM5)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a22      	ldr	r2, [pc, #136]	@ (8002ce8 <HAL_TIM_Base_MspInit+0x2ec>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d13e      	bne.n	8002ce0 <HAL_TIM_Base_MspInit+0x2e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c62:	4b22      	ldr	r3, [pc, #136]	@ (8002cec <HAL_TIM_Base_MspInit+0x2f0>)
 8002c64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c68:	4a20      	ldr	r2, [pc, #128]	@ (8002cec <HAL_TIM_Base_MspInit+0x2f0>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002c72:	4b1e      	ldr	r3, [pc, #120]	@ (8002cec <HAL_TIM_Base_MspInit+0x2f0>)
 8002c74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002c78:	f003 0308 	and.w	r3, r3, #8
 8002c7c:	60fb      	str	r3, [r7, #12]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_up.Instance = DMA1_Stream6;
 8002c80:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002c82:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf4 <HAL_TIM_Base_MspInit+0x2f8>)
 8002c84:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 8002c86:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002c88:	223b      	movs	r2, #59	@ 0x3b
 8002c8a:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c8c:	4b18      	ldr	r3, [pc, #96]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002c8e:	2240      	movs	r2, #64	@ 0x40
 8002c90:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c92:	4b17      	ldr	r3, [pc, #92]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 8002c98:	4b15      	ldr	r3, [pc, #84]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002c9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c9e:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ca0:	4b13      	ldr	r3, [pc, #76]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ca6:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002caa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cae:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8002cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cb2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cb6:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_LOW;
 8002cb8:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8002cc4:	480a      	ldr	r0, [pc, #40]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cc6:	f017 ff0d 	bl	801aae4 <HAL_DMA_Init>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d001      	beq.n	8002cd4 <HAL_TIM_Base_MspInit+0x2d8>
      Error_Handler();
 8002cd0:	f7ff fb62 	bl	8002398 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a06      	ldr	r2, [pc, #24]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <HAL_TIM_Base_MspInit+0x2f4>)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002ce0:	bf00      	nop
 8002ce2:	3720      	adds	r7, #32
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40000c00 	.word	0x40000c00
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	20000754 	.word	0x20000754
 8002cf4:	400200a0 	.word	0x400200a0

08002cf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b088      	sub	sp, #32
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d00:	f107 030c 	add.w	r3, r7, #12
 8002d04:	2200      	movs	r2, #0
 8002d06:	601a      	str	r2, [r3, #0]
 8002d08:	605a      	str	r2, [r3, #4]
 8002d0a:	609a      	str	r2, [r3, #8]
 8002d0c:	60da      	str	r2, [r3, #12]
 8002d0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <HAL_TIM_MspPostInit+0x68>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d11e      	bne.n	8002d58 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1a:	4b12      	ldr	r3, [pc, #72]	@ (8002d64 <HAL_TIM_MspPostInit+0x6c>)
 8002d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d20:	4a10      	ldr	r2, [pc, #64]	@ (8002d64 <HAL_TIM_MspPostInit+0x6c>)
 8002d22:	f043 0302 	orr.w	r3, r3, #2
 8002d26:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d64 <HAL_TIM_MspPostInit+0x6c>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d38:	23c0      	movs	r3, #192	@ 0xc0
 8002d3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d48:	2302      	movs	r3, #2
 8002d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	4619      	mov	r1, r3
 8002d52:	4805      	ldr	r0, [pc, #20]	@ (8002d68 <HAL_TIM_MspPostInit+0x70>)
 8002d54:	f019 fdce 	bl	801c8f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002d58:	bf00      	nop
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40000800 	.word	0x40000800
 8002d64:	58024400 	.word	0x58024400
 8002d68:	58020400 	.word	0x58020400

08002d6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b0ba      	sub	sp, #232	@ 0xe8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	22c0      	movs	r2, #192	@ 0xc0
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f020 f80a 	bl	8022da6 <memset>
  if(huart->Instance==USART3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a27      	ldr	r2, [pc, #156]	@ (8002e34 <HAL_UART_MspInit+0xc8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d146      	bne.n	8002e2a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d9c:	f04f 0202 	mov.w	r2, #2
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dae:	f107 0310 	add.w	r3, r7, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f01b f8bc 	bl	801df30 <HAL_RCCEx_PeriphCLKConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002dbe:	f7ff faeb 	bl	8002398 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e38 <HAL_UART_MspInit+0xcc>)
 8002dc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e38 <HAL_UART_MspInit+0xcc>)
 8002dca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002dd2:	4b19      	ldr	r3, [pc, #100]	@ (8002e38 <HAL_UART_MspInit+0xcc>)
 8002dd4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002dd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de0:	4b15      	ldr	r3, [pc, #84]	@ (8002e38 <HAL_UART_MspInit+0xcc>)
 8002de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002de6:	4a14      	ldr	r2, [pc, #80]	@ (8002e38 <HAL_UART_MspInit+0xcc>)
 8002de8:	f043 0308 	orr.w	r3, r3, #8
 8002dec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002df0:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <HAL_UART_MspInit+0xcc>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002dfe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e02:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e06:	2302      	movs	r3, #2
 8002e08:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002e18:	2307      	movs	r3, #7
 8002e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e1e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002e22:	4619      	mov	r1, r3
 8002e24:	4805      	ldr	r0, [pc, #20]	@ (8002e3c <HAL_UART_MspInit+0xd0>)
 8002e26:	f019 fd65 	bl	801c8f4 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002e2a:	bf00      	nop
 8002e2c:	37e8      	adds	r7, #232	@ 0xe8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40004800 	.word	0x40004800
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	58020c00 	.word	0x58020c00

08002e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <NMI_Handler+0x4>

08002e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e4c:	bf00      	nop
 8002e4e:	e7fd      	b.n	8002e4c <MemManage_Handler+0x4>

08002e50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e54:	bf00      	nop
 8002e56:	e7fd      	b.n	8002e54 <BusFault_Handler+0x4>

08002e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e5c:	bf00      	nop
 8002e5e:	e7fd      	b.n	8002e5c <UsageFault_Handler+0x4>

08002e60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e64:	bf00      	nop
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr

08002e6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e72:	f017 fc4b 	bl	801a70c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002e76:	f002 fc09 	bl	800568c <xTaskGetSchedulerState>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d101      	bne.n	8002e84 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002e80:	f003 fcea 	bl	8006858 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002e92:	4b19      	ldr	r3, [pc, #100]	@ (8002ef8 <DMA1_Stream0_IRQHandler+0x70>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00c      	beq.n	8002eb8 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002e9e:	4b17      	ldr	r3, [pc, #92]	@ (8002efc <DMA1_Stream0_IRQHandler+0x74>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	e001      	b.n	8002eb8 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002eb8:	4811      	ldr	r0, [pc, #68]	@ (8002f00 <DMA1_Stream0_IRQHandler+0x78>)
 8002eba:	f018 fbb5 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <DMA1_Stream0_IRQHandler+0x7c>)
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2300      	movs	r3, #0
 8002ecc:	9300      	str	r3, [sp, #0]
 8002ece:	2301      	movs	r3, #1
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	f003 f832 	bl	8005f3c <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d007      	beq.n	8002eee <DMA1_Stream0_IRQHandler+0x66>
 8002ede:	4b0a      	ldr	r3, [pc, #40]	@ (8002f08 <DMA1_Stream0_IRQHandler+0x80>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40020000 	.word	0x40020000
 8002efc:	40020010 	.word	0x40020010
 8002f00:	20000290 	.word	0x20000290
 8002f04:	20000d34 	.word	0x20000d34
 8002f08:	e000ed04 	.word	0xe000ed04

08002f0c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 8002f16:	4b19      	ldr	r3, [pc, #100]	@ (8002f7c <DMA1_Stream1_IRQHandler+0x70>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00c      	beq.n	8002f3c <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 8002f22:	4b17      	ldr	r3, [pc, #92]	@ (8002f80 <DMA1_Stream1_IRQHandler+0x74>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	e001      	b.n	8002f3c <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002f3c:	4811      	ldr	r0, [pc, #68]	@ (8002f84 <DMA1_Stream1_IRQHandler+0x78>)
 8002f3e:	f018 fb73 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 8002f42:	2300      	movs	r3, #0
 8002f44:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 8002f46:	4b10      	ldr	r3, [pc, #64]	@ (8002f88 <DMA1_Stream1_IRQHandler+0x7c>)
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	1d3b      	adds	r3, r7, #4
 8002f4c:	9301      	str	r3, [sp, #4]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	2301      	movs	r3, #1
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	2100      	movs	r1, #0
 8002f58:	f002 fff0 	bl	8005f3c <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <DMA1_Stream1_IRQHandler+0x66>
 8002f62:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <DMA1_Stream1_IRQHandler+0x80>)
 8002f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020028 	.word	0x40020028
 8002f84:	20000308 	.word	0x20000308
 8002f88:	20000d38 	.word	0x20000d38
 8002f8c:	e000ed04 	.word	0xe000ed04

08002f90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002f94:	4802      	ldr	r0, [pc, #8]	@ (8002fa0 <DMA1_Stream2_IRQHandler+0x10>)
 8002f96:	f018 fb47 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f9a:	bf00      	nop
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000574 	.word	0x20000574

08002fa4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002fa8:	4802      	ldr	r0, [pc, #8]	@ (8002fb4 <DMA1_Stream3_IRQHandler+0x10>)
 8002faa:	f018 fb3d 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002fae:	bf00      	nop
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200005ec 	.word	0x200005ec

08002fb8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002fbc:	4802      	ldr	r0, [pc, #8]	@ (8002fc8 <DMA1_Stream4_IRQHandler+0x10>)
 8002fbe:	f018 fb33 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000664 	.word	0x20000664

08002fcc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002fd0:	4802      	ldr	r0, [pc, #8]	@ (8002fdc <DMA1_Stream5_IRQHandler+0x10>)
 8002fd2:	f018 fb29 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200006dc 	.word	0x200006dc

08002fe0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 8002fe4:	4802      	ldr	r0, [pc, #8]	@ (8002ff0 <DMA1_Stream6_IRQHandler+0x10>)
 8002fe6:	f018 fb1f 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000754 	.word	0x20000754

08002ff4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002ff8:	4802      	ldr	r0, [pc, #8]	@ (8003004 <SPI1_IRQHandler+0x10>)
 8002ffa:	f01c fee9 	bl	801fdd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	200000f8 	.word	0x200000f8

08003008 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800300c:	4802      	ldr	r0, [pc, #8]	@ (8003018 <SPI2_IRQHandler+0x10>)
 800300e:	f01c fedf 	bl	801fdd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000180 	.word	0x20000180

0800301c <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->HISR & DMA_FLAG_TCIF3_7){
 8003026:	4b19      	ldr	r3, [pc, #100]	@ (800308c <DMA1_Stream7_IRQHandler+0x70>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00c      	beq.n	800304c <DMA1_Stream7_IRQHandler+0x30>
      uint32_t status = DMA1_Stream7->CR;
 8003032:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <DMA1_Stream7_IRQHandler+0x74>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60bb      	str	r3, [r7, #8]
      if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <DMA1_Stream7_IRQHandler+0x2c>
      ulCurrBuf = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	60fb      	str	r3, [r7, #12]
 8003046:	e001      	b.n	800304c <DMA1_Stream7_IRQHandler+0x30>
      } else {
      ulCurrBuf = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	60fb      	str	r3, [r7, #12]
      }

    }
  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 800304c:	4811      	ldr	r0, [pc, #68]	@ (8003094 <DMA1_Stream7_IRQHandler+0x78>)
 800304e:	f018 faeb 	bl	801b628 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vTCADCTCPTaskHandle,
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <DMA1_Stream7_IRQHandler+0x7c>)
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	1d3b      	adds	r3, r7, #4
 800305c:	9301      	str	r3, [sp, #4]
 800305e:	2300      	movs	r3, #0
 8003060:	9300      	str	r3, [sp, #0]
 8003062:	2301      	movs	r3, #1
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	2100      	movs	r1, #0
 8003068:	f002 ff68 	bl	8005f3c <xTaskGenericNotifyFromISR>
			 &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <DMA1_Stream7_IRQHandler+0x66>
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <DMA1_Stream7_IRQHandler+0x80>)
 8003074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40020000 	.word	0x40020000
 8003090:	400200b8 	.word	0x400200b8
 8003094:	20000380 	.word	0x20000380
 8003098:	20000d3c 	.word	0x20000d3c
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <SPI3_IRQHandler+0x10>)
 80030a6:	f01c fe93 	bl	801fdd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	20000208 	.word	0x20000208

080030b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return 1;
 80030b8:	2301      	movs	r3, #1
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <_kill>:

int _kill(int pid, int sig)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030ce:	f020 fda3 	bl	8023c18 <__errno>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2216      	movs	r2, #22
 80030d6:	601a      	str	r2, [r3, #0]
  return -1;
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3708      	adds	r7, #8
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <_exit>:

void _exit (int status)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f7ff ffe7 	bl	80030c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <_exit+0x12>

080030fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b086      	sub	sp, #24
 80030fe:	af00      	add	r7, sp, #0
 8003100:	60f8      	str	r0, [r7, #12]
 8003102:	60b9      	str	r1, [r7, #8]
 8003104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e00a      	b.n	8003122 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800310c:	f3af 8000 	nop.w
 8003110:	4601      	mov	r1, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	60ba      	str	r2, [r7, #8]
 8003118:	b2ca      	uxtb	r2, r1
 800311a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	3301      	adds	r3, #1
 8003120:	617b      	str	r3, [r7, #20]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	429a      	cmp	r2, r3
 8003128:	dbf0      	blt.n	800310c <_read+0x12>
  }

  return len;
 800312a:	687b      	ldr	r3, [r7, #4]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3718      	adds	r7, #24
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	e009      	b.n	800315a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1c5a      	adds	r2, r3, #1
 800314a:	60ba      	str	r2, [r7, #8]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	3301      	adds	r3, #1
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	429a      	cmp	r2, r3
 8003160:	dbf1      	blt.n	8003146 <_write+0x12>
  }
  return len;
 8003162:	687b      	ldr	r3, [r7, #4]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <_close>:

int _close(int file)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003174:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003178:	4618      	mov	r0, r3
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003194:	605a      	str	r2, [r3, #4]
  return 0;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <_isatty>:

int _isatty(int file)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031ac:	2301      	movs	r3, #1
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b085      	sub	sp, #20
 80031be:	af00      	add	r7, sp, #0
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031dc:	4a14      	ldr	r2, [pc, #80]	@ (8003230 <_sbrk+0x5c>)
 80031de:	4b15      	ldr	r3, [pc, #84]	@ (8003234 <_sbrk+0x60>)
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031e8:	4b13      	ldr	r3, [pc, #76]	@ (8003238 <_sbrk+0x64>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d102      	bne.n	80031f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <_sbrk+0x64>)
 80031f2:	4a12      	ldr	r2, [pc, #72]	@ (800323c <_sbrk+0x68>)
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031f6:	4b10      	ldr	r3, [pc, #64]	@ (8003238 <_sbrk+0x64>)
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4413      	add	r3, r2
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	429a      	cmp	r2, r3
 8003202:	d207      	bcs.n	8003214 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003204:	f020 fd08 	bl	8023c18 <__errno>
 8003208:	4603      	mov	r3, r0
 800320a:	220c      	movs	r2, #12
 800320c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800320e:	f04f 33ff 	mov.w	r3, #4294967295
 8003212:	e009      	b.n	8003228 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <_sbrk+0x64>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800321a:	4b07      	ldr	r3, [pc, #28]	@ (8003238 <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <_sbrk+0x64>)
 8003224:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3718      	adds	r7, #24
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	24080000 	.word	0x24080000
 8003234:	00000400 	.word	0x00000400
 8003238:	20000dc8 	.word	0x20000dc8
 800323c:	20002888 	.word	0x20002888

08003240 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003246:	4b3f      	ldr	r3, [pc, #252]	@ (8003344 <SystemInit+0x104>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324c:	4a3d      	ldr	r2, [pc, #244]	@ (8003344 <SystemInit+0x104>)
 800324e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003252:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003256:	4b3c      	ldr	r3, [pc, #240]	@ (8003348 <SystemInit+0x108>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	2b06      	cmp	r3, #6
 8003260:	d807      	bhi.n	8003272 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003262:	4b39      	ldr	r3, [pc, #228]	@ (8003348 <SystemInit+0x108>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f023 030f 	bic.w	r3, r3, #15
 800326a:	4a37      	ldr	r2, [pc, #220]	@ (8003348 <SystemInit+0x108>)
 800326c:	f043 0307 	orr.w	r3, r3, #7
 8003270:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003272:	4b36      	ldr	r3, [pc, #216]	@ (800334c <SystemInit+0x10c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a35      	ldr	r2, [pc, #212]	@ (800334c <SystemInit+0x10c>)
 8003278:	f043 0301 	orr.w	r3, r3, #1
 800327c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800327e:	4b33      	ldr	r3, [pc, #204]	@ (800334c <SystemInit+0x10c>)
 8003280:	2200      	movs	r2, #0
 8003282:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003284:	4b31      	ldr	r3, [pc, #196]	@ (800334c <SystemInit+0x10c>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	4930      	ldr	r1, [pc, #192]	@ (800334c <SystemInit+0x10c>)
 800328a:	4b31      	ldr	r3, [pc, #196]	@ (8003350 <SystemInit+0x110>)
 800328c:	4013      	ands	r3, r2
 800328e:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003290:	4b2d      	ldr	r3, [pc, #180]	@ (8003348 <SystemInit+0x108>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0308 	and.w	r3, r3, #8
 8003298:	2b00      	cmp	r3, #0
 800329a:	d007      	beq.n	80032ac <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800329c:	4b2a      	ldr	r3, [pc, #168]	@ (8003348 <SystemInit+0x108>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f023 030f 	bic.w	r3, r3, #15
 80032a4:	4a28      	ldr	r2, [pc, #160]	@ (8003348 <SystemInit+0x108>)
 80032a6:	f043 0307 	orr.w	r3, r3, #7
 80032aa:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80032ac:	4b27      	ldr	r3, [pc, #156]	@ (800334c <SystemInit+0x10c>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80032b2:	4b26      	ldr	r3, [pc, #152]	@ (800334c <SystemInit+0x10c>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80032b8:	4b24      	ldr	r3, [pc, #144]	@ (800334c <SystemInit+0x10c>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80032be:	4b23      	ldr	r3, [pc, #140]	@ (800334c <SystemInit+0x10c>)
 80032c0:	4a24      	ldr	r2, [pc, #144]	@ (8003354 <SystemInit+0x114>)
 80032c2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80032c4:	4b21      	ldr	r3, [pc, #132]	@ (800334c <SystemInit+0x10c>)
 80032c6:	4a24      	ldr	r2, [pc, #144]	@ (8003358 <SystemInit+0x118>)
 80032c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80032ca:	4b20      	ldr	r3, [pc, #128]	@ (800334c <SystemInit+0x10c>)
 80032cc:	4a23      	ldr	r2, [pc, #140]	@ (800335c <SystemInit+0x11c>)
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80032d0:	4b1e      	ldr	r3, [pc, #120]	@ (800334c <SystemInit+0x10c>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80032d6:	4b1d      	ldr	r3, [pc, #116]	@ (800334c <SystemInit+0x10c>)
 80032d8:	4a20      	ldr	r2, [pc, #128]	@ (800335c <SystemInit+0x11c>)
 80032da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	@ (800334c <SystemInit+0x10c>)
 80032de:	2200      	movs	r2, #0
 80032e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80032e2:	4b1a      	ldr	r3, [pc, #104]	@ (800334c <SystemInit+0x10c>)
 80032e4:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <SystemInit+0x11c>)
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80032e8:	4b18      	ldr	r3, [pc, #96]	@ (800334c <SystemInit+0x10c>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80032ee:	4b17      	ldr	r3, [pc, #92]	@ (800334c <SystemInit+0x10c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a16      	ldr	r2, [pc, #88]	@ (800334c <SystemInit+0x10c>)
 80032f4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032f8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80032fa:	4b14      	ldr	r3, [pc, #80]	@ (800334c <SystemInit+0x10c>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003300:	4b17      	ldr	r3, [pc, #92]	@ (8003360 <SystemInit+0x120>)
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	4b17      	ldr	r3, [pc, #92]	@ (8003364 <SystemInit+0x124>)
 8003306:	4013      	ands	r3, r2
 8003308:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800330c:	d202      	bcs.n	8003314 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800330e:	4b16      	ldr	r3, [pc, #88]	@ (8003368 <SystemInit+0x128>)
 8003310:	2201      	movs	r2, #1
 8003312:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003314:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <SystemInit+0x10c>)
 8003316:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800331a:	4a0c      	ldr	r2, [pc, #48]	@ (800334c <SystemInit+0x10c>)
 800331c:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8003320:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003324:	4b09      	ldr	r3, [pc, #36]	@ (800334c <SystemInit+0x10c>)
 8003326:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800332a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800332c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800332e:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <SystemInit+0x12c>)
 8003330:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8003334:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	e000ed00 	.word	0xe000ed00
 8003348:	52002000 	.word	0x52002000
 800334c:	58024400 	.word	0x58024400
 8003350:	eaf6ed7f 	.word	0xeaf6ed7f
 8003354:	02020200 	.word	0x02020200
 8003358:	01ff0000 	.word	0x01ff0000
 800335c:	01010280 	.word	0x01010280
 8003360:	5c001000 	.word	0x5c001000
 8003364:	ffff0000 	.word	0xffff0000
 8003368:	51008108 	.word	0x51008108
 800336c:	52004000 	.word	0x52004000

08003370 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003370:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80033a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003374:	f7ff ff64 	bl	8003240 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003378:	480c      	ldr	r0, [pc, #48]	@ (80033ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800337a:	490d      	ldr	r1, [pc, #52]	@ (80033b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800337c:	4a0d      	ldr	r2, [pc, #52]	@ (80033b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800337e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003380:	e002      	b.n	8003388 <LoopCopyDataInit>

08003382 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003382:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003384:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003386:	3304      	adds	r3, #4

08003388 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003388:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800338a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800338c:	d3f9      	bcc.n	8003382 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800338e:	4a0a      	ldr	r2, [pc, #40]	@ (80033b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003390:	4c0a      	ldr	r4, [pc, #40]	@ (80033bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003394:	e001      	b.n	800339a <LoopFillZerobss>

08003396 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003396:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003398:	3204      	adds	r2, #4

0800339a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800339a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800339c:	d3fb      	bcc.n	8003396 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800339e:	f020 fc41 	bl	8023c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033a2:	f7fd f97d 	bl	80006a0 <main>
  bx  lr
 80033a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80033a8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80033ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033b0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80033b4:	080281f0 	.word	0x080281f0
  ldr r2, =_sbss
 80033b8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80033bc:	20002888 	.word	0x20002888

080033c0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033c0:	e7fe      	b.n	80033c0 <ADC3_IRQHandler>

080033c2 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b082      	sub	sp, #8
 80033c6:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80033c8:	201c      	movs	r0, #28
 80033ca:	f003 fac3 	bl	8006954 <pvPortMalloc>
 80033ce:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3304      	adds	r3, #4
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 f9c3 	bl	800376c <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 80033e6:	687b      	ldr	r3, [r7, #4]
        }
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08c      	sub	sp, #48	@ 0x30
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
 80033fc:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 8003402:	2300      	movs	r3, #0
 8003404:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8003406:	2300      	movs	r3, #0
 8003408:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <xEventGroupWaitBits+0x2a>
 8003410:	f240 1147 	movw	r1, #327	@ 0x147
 8003414:	4850      	ldr	r0, [pc, #320]	@ (8003558 <xEventGroupWaitBits+0x168>)
 8003416:	f7fe fabf 	bl	8001998 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003420:	d304      	bcc.n	800342c <xEventGroupWaitBits+0x3c>
 8003422:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8003426:	484c      	ldr	r0, [pc, #304]	@ (8003558 <xEventGroupWaitBits+0x168>)
 8003428:	f7fe fab6 	bl	8001998 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d104      	bne.n	800343c <xEventGroupWaitBits+0x4c>
 8003432:	f240 1149 	movw	r1, #329	@ 0x149
 8003436:	4848      	ldr	r0, [pc, #288]	@ (8003558 <xEventGroupWaitBits+0x168>)
 8003438:	f7fe faae 	bl	8001998 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800343c:	f002 f926 	bl	800568c <xTaskGetSchedulerState>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <xEventGroupWaitBits+0x5c>
 8003446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <xEventGroupWaitBits+0x60>
 800344c:	2301      	movs	r3, #1
 800344e:	e000      	b.n	8003452 <xEventGroupWaitBits+0x62>
 8003450:	2300      	movs	r3, #0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d104      	bne.n	8003460 <xEventGroupWaitBits+0x70>
 8003456:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800345a:	483f      	ldr	r0, [pc, #252]	@ (8003558 <xEventGroupWaitBits+0x168>)
 800345c:	f7fe fa9c 	bl	8001998 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8003460:	f001 faf6 	bl	8004a50 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8003464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800346a:	683a      	ldr	r2, [r7, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	69f8      	ldr	r0, [r7, #28]
 8003470:	f000 f95a 	bl	8003728 <prvTestWaitCondition>
 8003474:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d00e      	beq.n	800349a <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8003480:	2300      	movs	r3, #0
 8003482:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d028      	beq.n	80034dc <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800348a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	43db      	mvns	r3, r3
 8003492:	401a      	ands	r2, r3
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e020      	b.n	80034dc <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 800349a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800349c:	2b00      	cmp	r3, #0
 800349e:	d104      	bne.n	80034aa <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	623b      	str	r3, [r7, #32]
 80034a8:	e018      	b.n	80034dc <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80034b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80034be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80034c4:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	1d18      	adds	r0, r3, #4
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ce:	4313      	orrs	r3, r2
 80034d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034d2:	4619      	mov	r1, r3
 80034d4:	f001 fda4 	bl	8005020 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 80034d8:	2300      	movs	r3, #0
 80034da:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80034dc:	f001 fac6 	bl	8004a6c <xTaskResumeAll>
 80034e0:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 80034e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d031      	beq.n	800354c <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d107      	bne.n	80034fe <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 80034ee:	4b1b      	ldr	r3, [pc, #108]	@ (800355c <xEventGroupWaitBits+0x16c>)
 80034f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 80034fe:	f002 facf 	bl	8005aa0 <uxTaskResetEventItemValue>
 8003502:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d11a      	bne.n	8003544 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 800350e:	f003 f91f 	bl	8006750 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800351e:	f000 f903 	bl	8003728 <prvTestWaitCondition>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d006      	beq.n	800353c <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	43db      	mvns	r3, r3
 8003536:	401a      	ands	r2, r3
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8003540:	f003 f932 	bl	80067a8 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 800354c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800354e:	4618      	mov	r0, r3
 8003550:	3730      	adds	r7, #48	@ 0x30
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	08024a40 	.word	0x08024a40
 800355c:	e000ed04 	.word	0xe000ed04

08003560 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d104      	bne.n	800357e <xEventGroupClearBits+0x1e>
 8003574:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 8003578:	480f      	ldr	r0, [pc, #60]	@ (80035b8 <xEventGroupClearBits+0x58>)
 800357a:	f7fe fa0d 	bl	8001998 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003584:	d304      	bcc.n	8003590 <xEventGroupClearBits+0x30>
 8003586:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800358a:	480b      	ldr	r0, [pc, #44]	@ (80035b8 <xEventGroupClearBits+0x58>)
 800358c:	f7fe fa04 	bl	8001998 <vAssertCalled>

        taskENTER_CRITICAL();
 8003590:	f003 f8de 	bl	8006750 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	401a      	ands	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80035a8:	f003 f8fe 	bl	80067a8 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 80035ac:	68bb      	ldr	r3, [r7, #8]
    }
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	08024a40 	.word	0x08024a40

080035bc <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08c      	sub	sp, #48	@ 0x30
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80035c6:	2300      	movs	r3, #0
 80035c8:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d104      	bne.n	80035e2 <xEventGroupSetBits+0x26>
 80035d8:	f240 2132 	movw	r1, #562	@ 0x232
 80035dc:	4836      	ldr	r0, [pc, #216]	@ (80036b8 <xEventGroupSetBits+0xfc>)
 80035de:	f7fe f9db 	bl	8001998 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035e8:	d304      	bcc.n	80035f4 <xEventGroupSetBits+0x38>
 80035ea:	f240 2133 	movw	r1, #563	@ 0x233
 80035ee:	4832      	ldr	r0, [pc, #200]	@ (80036b8 <xEventGroupSetBits+0xfc>)
 80035f0:	f7fe f9d2 	bl	8001998 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 80035f4:	6a3b      	ldr	r3, [r7, #32]
 80035f6:	3304      	adds	r3, #4
 80035f8:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3308      	adds	r3, #8
 80035fe:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8003600:	f001 fa26 	bl	8004a50 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	431a      	orrs	r2, r3
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8003616:	e03c      	b.n	8003692 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800361e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8003624:	2300      	movs	r3, #0
 8003626:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800362e:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003636:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800363e:	2b00      	cmp	r3, #0
 8003640:	d108      	bne.n	8003654 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4013      	ands	r3, r2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 800364e:	2301      	movs	r3, #1
 8003650:	627b      	str	r3, [r7, #36]	@ 0x24
 8003652:	e008      	b.n	8003666 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4013      	ands	r3, r2
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	429a      	cmp	r2, r3
 8003660:	d101      	bne.n	8003666 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8003662:	2301      	movs	r3, #1
 8003664:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8003666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003668:	2b00      	cmp	r3, #0
 800366a:	d010      	beq.n	800368e <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 8003676:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800367e:	6a3b      	ldr	r3, [r7, #32]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003686:	4619      	mov	r1, r3
 8003688:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800368a:	f001 fde7 	bl	800525c <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 8003692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	429a      	cmp	r2, r3
 8003698:	d1be      	bne.n	8003618 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a0:	43db      	mvns	r3, r3
 80036a2:	401a      	ands	r2, r3
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 80036a8:	f001 f9e0 	bl	8004a6c <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80036ac:	6a3b      	ldr	r3, [r7, #32]
 80036ae:	681b      	ldr	r3, [r3, #0]
    }
 80036b0:	4618      	mov	r0, r3
 80036b2:	3730      	adds	r7, #48	@ 0x30
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	08024a40 	.word	0x08024a40

080036bc <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d104      	bne.n	80036d8 <vEventGroupDelete+0x1c>
 80036ce:	f240 218e 	movw	r1, #654	@ 0x28e
 80036d2:	4814      	ldr	r0, [pc, #80]	@ (8003724 <vEventGroupDelete+0x68>)
 80036d4:	f7fe f960 	bl	8001998 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	3304      	adds	r3, #4
 80036dc:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 80036de:	f001 f9b7 	bl	8004a50 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 80036e2:	e011      	b.n	8003708 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	3308      	adds	r3, #8
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d104      	bne.n	80036fa <vEventGroupDelete+0x3e>
 80036f0:	f240 219a 	movw	r1, #666	@ 0x29a
 80036f4:	480b      	ldr	r0, [pc, #44]	@ (8003724 <vEventGroupDelete+0x68>)
 80036f6:	f7fe f94f 	bl	8001998 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003702:	4618      	mov	r0, r3
 8003704:	f001 fdaa 	bl	800525c <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e9      	bne.n	80036e4 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8003710:	f001 f9ac 	bl	8004a6c <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f003 f9f1 	bl	8006afc <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	08024a40 	.word	0x08024a40

08003728 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d107      	bne.n	800374e <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4013      	ands	r3, r2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d00a      	beq.n	800375e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8003748:	2301      	movs	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e007      	b.n	800375e <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	4013      	ands	r3, r2
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	429a      	cmp	r2, r3
 8003758:	d101      	bne.n	800375e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800375a:	2301      	movs	r3, #1
 800375c:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 800375e:	697b      	ldr	r3, [r7, #20]
    }
 8003760:	4618      	mov	r0, r3
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f103 0208 	add.w	r2, r3, #8
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f04f 32ff 	mov.w	r2, #4294967295
 8003784:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 0208 	add.w	r2, r3, #8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f103 0208 	add.w	r2, r3, #8
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80037ba:	bf00      	nop
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr

080037c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80037c6:	b480      	push	{r7}
 80037c8:	b085      	sub	sp, #20
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8003802:	bf00      	nop
 8003804:	3714      	adds	r7, #20
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003824:	d103      	bne.n	800382e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	e00c      	b.n	8003848 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3308      	adds	r3, #8
 8003832:	60fb      	str	r3, [r7, #12]
 8003834:	e002      	b.n	800383c <vListInsert+0x2e>
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	429a      	cmp	r2, r3
 8003846:	d2f6      	bcs.n	8003836 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	685a      	ldr	r2, [r3, #4]
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003874:	bf00      	nop
 8003876:	3714      	adds	r7, #20
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	6852      	ldr	r2, [r2, #4]
 80038a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d103      	bne.n	80038b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	1e5a      	subs	r2, r3, #1
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr

080038d4 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80038de:	2301      	movs	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d104      	bne.n	80038f6 <xQueueGenericReset+0x22>
 80038ec:	f240 1137 	movw	r1, #311	@ 0x137
 80038f0:	4839      	ldr	r0, [pc, #228]	@ (80039d8 <xQueueGenericReset+0x104>)
 80038f2:	f7fe f851 	bl	8001998 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d05d      	beq.n	80039b8 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003900:	2b00      	cmp	r3, #0
 8003902:	d059      	beq.n	80039b8 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	2100      	movs	r1, #0
 800390e:	fba3 2302 	umull	r2, r3, r3, r2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d000      	beq.n	8003918 <xQueueGenericReset+0x44>
 8003916:	2101      	movs	r1, #1
 8003918:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800391a:	2b00      	cmp	r3, #0
 800391c:	d14c      	bne.n	80039b8 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800391e:	f002 ff17 	bl	8006750 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	441a      	add	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	2200      	movs	r2, #0
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	681a      	ldr	r2, [r3, #0]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394e:	3b01      	subs	r3, #1
 8003950:	68b9      	ldr	r1, [r7, #8]
 8003952:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	441a      	add	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	22ff      	movs	r2, #255	@ 0xff
 8003962:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	22ff      	movs	r2, #255	@ 0xff
 800396a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d114      	bne.n	800399e <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01a      	beq.n	80039b2 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	3310      	adds	r3, #16
 8003980:	4618      	mov	r0, r3
 8003982:	f001 fb99 	bl	80050b8 <xTaskRemoveFromEventList>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800398c:	4b13      	ldr	r3, [pc, #76]	@ (80039dc <xQueueGenericReset+0x108>)
 800398e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
 800399c:	e009      	b.n	80039b2 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	3310      	adds	r3, #16
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fee2 	bl	800376c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	3324      	adds	r3, #36	@ 0x24
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff fedd 	bl	800376c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80039b2:	f002 fef9 	bl	80067a8 <vPortExitCritical>
 80039b6:	e001      	b.n	80039bc <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d104      	bne.n	80039cc <xQueueGenericReset+0xf8>
 80039c2:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80039c6:	4804      	ldr	r0, [pc, #16]	@ (80039d8 <xQueueGenericReset+0x104>)
 80039c8:	f7fd ffe6 	bl	8001998 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80039cc:	68fb      	ldr	r3, [r7, #12]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	08024a6c 	.word	0x08024a6c
 80039dc:	e000ed04 	.word	0xe000ed04

080039e0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08a      	sub	sp, #40	@ 0x28
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	4613      	mov	r3, r2
 80039ec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02e      	beq.n	8003a56 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80039f8:	2100      	movs	r1, #0
 80039fa:	68ba      	ldr	r2, [r7, #8]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	fba3 2302 	umull	r2, r3, r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d000      	beq.n	8003a08 <xQueueGenericCreate+0x28>
 8003a06:	2101      	movs	r1, #1
 8003a08:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d123      	bne.n	8003a56 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	68ba      	ldr	r2, [r7, #8]
 8003a12:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003a16:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003a1a:	d81c      	bhi.n	8003a56 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68ba      	ldr	r2, [r7, #8]
 8003a20:	fb02 f303 	mul.w	r3, r2, r3
 8003a24:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	3350      	adds	r3, #80	@ 0x50
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f002 ff92 	bl	8006954 <pvPortMalloc>
 8003a30:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d016      	beq.n	8003a66 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3350      	adds	r3, #80	@ 0x50
 8003a40:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a42:	79fa      	ldrb	r2, [r7, #7]
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4613      	mov	r3, r2
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	68b9      	ldr	r1, [r7, #8]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f810 	bl	8003a74 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003a54:	e007      	b.n	8003a66 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <xQueueGenericCreate+0x86>
 8003a5c:	f240 212a 	movw	r1, #554	@ 0x22a
 8003a60:	4803      	ldr	r0, [pc, #12]	@ (8003a70 <xQueueGenericCreate+0x90>)
 8003a62:	f7fd ff99 	bl	8001998 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8003a66:	69fb      	ldr	r3, [r7, #28]
    }
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3720      	adds	r7, #32
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	08024a6c 	.word	0x08024a6c

08003a74 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
 8003a80:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d103      	bne.n	8003a90 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a88:	69bb      	ldr	r3, [r7, #24]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	601a      	str	r2, [r3, #0]
 8003a8e:	e002      	b.n	8003a96 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	68fa      	ldr	r2, [r7, #12]
 8003a9a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	69b8      	ldr	r0, [r7, #24]
 8003aa6:	f7ff ff15 	bl	80038d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d00e      	beq.n	8003ae6 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003ada:	2300      	movs	r3, #0
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f847 	bl	8003b74 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003af8:	2301      	movs	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	2300      	movs	r3, #0
 8003afe:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	461a      	mov	r2, r3
 8003b04:	6939      	ldr	r1, [r7, #16]
 8003b06:	6978      	ldr	r0, [r7, #20]
 8003b08:	f7ff ff6a 	bl	80039e0 <xQueueGenericCreate>
 8003b0c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f7ff ffd3 	bl	8003aba <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003b14:	68fb      	ldr	r3, [r7, #12]
    }
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <xQueueCreateCountingSemaphore+0x36>
 8003b34:	683a      	ldr	r2, [r7, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d80c      	bhi.n	8003b56 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	2100      	movs	r1, #0
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f7ff ff4d 	bl	80039e0 <xQueueGenericCreate>
 8003b46:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003b54:	e007      	b.n	8003b66 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d104      	bne.n	8003b66 <xQueueCreateCountingSemaphore+0x46>
 8003b5c:	f240 319f 	movw	r1, #927	@ 0x39f
 8003b60:	4803      	ldr	r0, [pc, #12]	@ (8003b70 <xQueueCreateCountingSemaphore+0x50>)
 8003b62:	f7fd ff19 	bl	8001998 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8003b66:	68fb      	ldr	r3, [r7, #12]
    }
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	08024a6c 	.word	0x08024a6c

08003b74 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08a      	sub	sp, #40	@ 0x28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d104      	bne.n	8003b9a <xQueueGenericSend+0x26>
 8003b90:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8003b94:	4869      	ldr	r0, [pc, #420]	@ (8003d3c <xQueueGenericSend+0x1c8>)
 8003b96:	f7fd feff 	bl	8001998 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <xQueueGenericSend+0x34>
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d101      	bne.n	8003bac <xQueueGenericSend+0x38>
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e000      	b.n	8003bae <xQueueGenericSend+0x3a>
 8003bac:	2300      	movs	r3, #0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d104      	bne.n	8003bbc <xQueueGenericSend+0x48>
 8003bb2:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8003bb6:	4861      	ldr	r0, [pc, #388]	@ (8003d3c <xQueueGenericSend+0x1c8>)
 8003bb8:	f7fd feee 	bl	8001998 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d103      	bne.n	8003bca <xQueueGenericSend+0x56>
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <xQueueGenericSend+0x5a>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <xQueueGenericSend+0x5c>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d104      	bne.n	8003bde <xQueueGenericSend+0x6a>
 8003bd4:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8003bd8:	4858      	ldr	r0, [pc, #352]	@ (8003d3c <xQueueGenericSend+0x1c8>)
 8003bda:	f7fd fedd 	bl	8001998 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bde:	f001 fd55 	bl	800568c <xTaskGetSchedulerState>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <xQueueGenericSend+0x7a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <xQueueGenericSend+0x7e>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <xQueueGenericSend+0x80>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d104      	bne.n	8003c02 <xQueueGenericSend+0x8e>
 8003bf8:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003bfc:	484f      	ldr	r0, [pc, #316]	@ (8003d3c <xQueueGenericSend+0x1c8>)
 8003bfe:	f7fd fecb 	bl	8001998 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c02:	f002 fda5 	bl	8006750 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c06:	6a3b      	ldr	r3, [r7, #32]
 8003c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d302      	bcc.n	8003c18 <xQueueGenericSend+0xa4>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d129      	bne.n	8003c6c <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	68b9      	ldr	r1, [r7, #8]
 8003c1c:	6a38      	ldr	r0, [r7, #32]
 8003c1e:	f000 fabb 	bl	8004198 <prvCopyDataToQueue>
 8003c22:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d010      	beq.n	8003c4e <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	3324      	adds	r3, #36	@ 0x24
 8003c30:	4618      	mov	r0, r3
 8003c32:	f001 fa41 	bl	80050b8 <xTaskRemoveFromEventList>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d013      	beq.n	8003c64 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003c3c:	4b40      	ldr	r3, [pc, #256]	@ (8003d40 <xQueueGenericSend+0x1cc>)
 8003c3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	f3bf 8f6f 	isb	sy
 8003c4c:	e00a      	b.n	8003c64 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003c54:	4b3a      	ldr	r3, [pc, #232]	@ (8003d40 <xQueueGenericSend+0x1cc>)
 8003c56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003c64:	f002 fda0 	bl	80067a8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e063      	b.n	8003d34 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c72:	f002 fd99 	bl	80067a8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e05c      	b.n	8003d34 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 fbc1 	bl	800540c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c8e:	f002 fd8b 	bl	80067a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c92:	f000 fedd 	bl	8004a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c96:	f002 fd5b 	bl	8006750 <vPortEnterCritical>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d103      	bne.n	8003cb0 <xQueueGenericSend+0x13c>
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d103      	bne.n	8003cc6 <xQueueGenericSend+0x152>
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cc6:	f002 fd6f 	bl	80067a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cca:	1d3a      	adds	r2, r7, #4
 8003ccc:	f107 0314 	add.w	r3, r7, #20
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 fbb0 	bl	8005438 <xTaskCheckForTimeOut>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d124      	bne.n	8003d28 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cde:	6a38      	ldr	r0, [r7, #32]
 8003ce0:	f000 fb52 	bl	8004388 <prvIsQueueFull>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d018      	beq.n	8003d1c <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	3310      	adds	r3, #16
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f001 f974 	bl	8004fe0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003cf8:	6a38      	ldr	r0, [r7, #32]
 8003cfa:	f000 fadd 	bl	80042b8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003cfe:	f000 feb5 	bl	8004a6c <xTaskResumeAll>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f47f af7c 	bne.w	8003c02 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d40 <xQueueGenericSend+0x1cc>)
 8003d0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	f3bf 8f4f 	dsb	sy
 8003d16:	f3bf 8f6f 	isb	sy
 8003d1a:	e772      	b.n	8003c02 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d1c:	6a38      	ldr	r0, [r7, #32]
 8003d1e:	f000 facb 	bl	80042b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d22:	f000 fea3 	bl	8004a6c <xTaskResumeAll>
 8003d26:	e76c      	b.n	8003c02 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d28:	6a38      	ldr	r0, [r7, #32]
 8003d2a:	f000 fac5 	bl	80042b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d2e:	f000 fe9d 	bl	8004a6c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003d32:	2300      	movs	r3, #0
        }
    }
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3728      	adds	r7, #40	@ 0x28
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	08024a6c 	.word	0x08024a6c
 8003d40:	e000ed04 	.word	0xe000ed04

08003d44 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08a      	sub	sp, #40	@ 0x28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003d50:	2300      	movs	r3, #0
 8003d52:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003d58:	6a3b      	ldr	r3, [r7, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d104      	bne.n	8003d68 <xQueueReceive+0x24>
 8003d5e:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003d62:	485e      	ldr	r0, [pc, #376]	@ (8003edc <xQueueReceive+0x198>)
 8003d64:	f7fd fe18 	bl	8001998 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d103      	bne.n	8003d76 <xQueueReceive+0x32>
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <xQueueReceive+0x36>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <xQueueReceive+0x38>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <xQueueReceive+0x46>
 8003d80:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8003d84:	4855      	ldr	r0, [pc, #340]	@ (8003edc <xQueueReceive+0x198>)
 8003d86:	f7fd fe07 	bl	8001998 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d8a:	f001 fc7f 	bl	800568c <xTaskGetSchedulerState>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d102      	bne.n	8003d9a <xQueueReceive+0x56>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <xQueueReceive+0x5a>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <xQueueReceive+0x5c>
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d104      	bne.n	8003dae <xQueueReceive+0x6a>
 8003da4:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8003da8:	484c      	ldr	r0, [pc, #304]	@ (8003edc <xQueueReceive+0x198>)
 8003daa:	f7fd fdf5 	bl	8001998 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003dae:	f002 fccf 	bl	8006750 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003db2:	6a3b      	ldr	r3, [r7, #32]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d01f      	beq.n	8003dfe <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dbe:	68b9      	ldr	r1, [r7, #8]
 8003dc0:	6a38      	ldr	r0, [r7, #32]
 8003dc2:	f000 fa53 	bl	800426c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	1e5a      	subs	r2, r3, #1
 8003dca:	6a3b      	ldr	r3, [r7, #32]
 8003dcc:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00f      	beq.n	8003df6 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dd6:	6a3b      	ldr	r3, [r7, #32]
 8003dd8:	3310      	adds	r3, #16
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f001 f96c 	bl	80050b8 <xTaskRemoveFromEventList>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d007      	beq.n	8003df6 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003de6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ee0 <xQueueReceive+0x19c>)
 8003de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003df6:	f002 fcd7 	bl	80067a8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e069      	b.n	8003ed2 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e04:	f002 fcd0 	bl	80067a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	e062      	b.n	8003ed2 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d106      	bne.n	8003e20 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e12:	f107 0314 	add.w	r3, r7, #20
 8003e16:	4618      	mov	r0, r3
 8003e18:	f001 faf8 	bl	800540c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e20:	f002 fcc2 	bl	80067a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e24:	f000 fe14 	bl	8004a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e28:	f002 fc92 	bl	8006750 <vPortEnterCritical>
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e32:	b25b      	sxtb	r3, r3
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d103      	bne.n	8003e42 <xQueueReceive+0xfe>
 8003e3a:	6a3b      	ldr	r3, [r7, #32]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e42:	6a3b      	ldr	r3, [r7, #32]
 8003e44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e48:	b25b      	sxtb	r3, r3
 8003e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4e:	d103      	bne.n	8003e58 <xQueueReceive+0x114>
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e58:	f002 fca6 	bl	80067a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e5c:	1d3a      	adds	r2, r7, #4
 8003e5e:	f107 0314 	add.w	r3, r7, #20
 8003e62:	4611      	mov	r1, r2
 8003e64:	4618      	mov	r0, r3
 8003e66:	f001 fae7 	bl	8005438 <xTaskCheckForTimeOut>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d123      	bne.n	8003eb8 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e70:	6a38      	ldr	r0, [r7, #32]
 8003e72:	f000 fa73 	bl	800435c <prvIsQueueEmpty>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d017      	beq.n	8003eac <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
 8003e7e:	3324      	adds	r3, #36	@ 0x24
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f001 f8ab 	bl	8004fe0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e8a:	6a38      	ldr	r0, [r7, #32]
 8003e8c:	f000 fa14 	bl	80042b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003e90:	f000 fdec 	bl	8004a6c <xTaskResumeAll>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d189      	bne.n	8003dae <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8003e9a:	4b11      	ldr	r3, [pc, #68]	@ (8003ee0 <xQueueReceive+0x19c>)
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea0:	601a      	str	r2, [r3, #0]
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	e780      	b.n	8003dae <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003eac:	6a38      	ldr	r0, [r7, #32]
 8003eae:	f000 fa03 	bl	80042b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003eb2:	f000 fddb 	bl	8004a6c <xTaskResumeAll>
 8003eb6:	e77a      	b.n	8003dae <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003eb8:	6a38      	ldr	r0, [r7, #32]
 8003eba:	f000 f9fd 	bl	80042b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ebe:	f000 fdd5 	bl	8004a6c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ec2:	6a38      	ldr	r0, [r7, #32]
 8003ec4:	f000 fa4a 	bl	800435c <prvIsQueueEmpty>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f43f af6f 	beq.w	8003dae <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003ed0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3728      	adds	r7, #40	@ 0x28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	08024a6c 	.word	0x08024a6c
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08a      	sub	sp, #40	@ 0x28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <xQueueSemaphoreTake+0x26>
 8003f00:	f240 6182 	movw	r1, #1666	@ 0x682
 8003f04:	486c      	ldr	r0, [pc, #432]	@ (80040b8 <xQueueSemaphoreTake+0x1d4>)
 8003f06:	f7fd fd47 	bl	8001998 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <xQueueSemaphoreTake+0x38>
 8003f12:	f240 6186 	movw	r1, #1670	@ 0x686
 8003f16:	4868      	ldr	r0, [pc, #416]	@ (80040b8 <xQueueSemaphoreTake+0x1d4>)
 8003f18:	f7fd fd3e 	bl	8001998 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f1c:	f001 fbb6 	bl	800568c <xTaskGetSchedulerState>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <xQueueSemaphoreTake+0x48>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <xQueueSemaphoreTake+0x4c>
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e000      	b.n	8003f32 <xQueueSemaphoreTake+0x4e>
 8003f30:	2300      	movs	r3, #0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d104      	bne.n	8003f40 <xQueueSemaphoreTake+0x5c>
 8003f36:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003f3a:	485f      	ldr	r0, [pc, #380]	@ (80040b8 <xQueueSemaphoreTake+0x1d4>)
 8003f3c:	f7fd fd2c 	bl	8001998 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f40:	f002 fc06 	bl	8006750 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f48:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d024      	beq.n	8003f9a <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	1e5a      	subs	r2, r3, #1
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d104      	bne.n	8003f6a <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003f60:	f001 fdb6 	bl	8005ad0 <pvTaskIncrementMutexHeldCount>
 8003f64:	4602      	mov	r2, r0
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f6a:	69fb      	ldr	r3, [r7, #28]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00f      	beq.n	8003f92 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3310      	adds	r3, #16
 8003f76:	4618      	mov	r0, r3
 8003f78:	f001 f89e 	bl	80050b8 <xTaskRemoveFromEventList>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d007      	beq.n	8003f92 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003f82:	4b4e      	ldr	r3, [pc, #312]	@ (80040bc <xQueueSemaphoreTake+0x1d8>)
 8003f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f88:	601a      	str	r2, [r3, #0]
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003f92:	f002 fc09 	bl	80067a8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e089      	b.n	80040ae <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d103      	bne.n	8003fa8 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003fa0:	f002 fc02 	bl	80067a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e082      	b.n	80040ae <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003fae:	f107 030c 	add.w	r3, r7, #12
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f001 fa2a 	bl	800540c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003fbc:	f002 fbf4 	bl	80067a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003fc0:	f000 fd46 	bl	8004a50 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003fc4:	f002 fbc4 	bl	8006750 <vPortEnterCritical>
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fce:	b25b      	sxtb	r3, r3
 8003fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd4:	d103      	bne.n	8003fde <xQueueSemaphoreTake+0xfa>
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fe4:	b25b      	sxtb	r3, r3
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d103      	bne.n	8003ff4 <xQueueSemaphoreTake+0x110>
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ff4:	f002 fbd8 	bl	80067a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ff8:	463a      	mov	r2, r7
 8003ffa:	f107 030c 	add.w	r3, r7, #12
 8003ffe:	4611      	mov	r1, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f001 fa19 	bl	8005438 <xTaskCheckForTimeOut>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d132      	bne.n	8004072 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800400c:	69f8      	ldr	r0, [r7, #28]
 800400e:	f000 f9a5 	bl	800435c <prvIsQueueEmpty>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d026      	beq.n	8004066 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d109      	bne.n	8004034 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8004020:	f002 fb96 	bl	8006750 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4618      	mov	r0, r3
 800402a:	f001 fb4d 	bl	80056c8 <xTaskPriorityInherit>
 800402e:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8004030:	f002 fbba 	bl	80067a8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	3324      	adds	r3, #36	@ 0x24
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	4611      	mov	r1, r2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 ffcf 	bl	8004fe0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004042:	69f8      	ldr	r0, [r7, #28]
 8004044:	f000 f938 	bl	80042b8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004048:	f000 fd10 	bl	8004a6c <xTaskResumeAll>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	f47f af76 	bne.w	8003f40 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8004054:	4b19      	ldr	r3, [pc, #100]	@ (80040bc <xQueueSemaphoreTake+0x1d8>)
 8004056:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	f3bf 8f4f 	dsb	sy
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	e76c      	b.n	8003f40 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8004066:	69f8      	ldr	r0, [r7, #28]
 8004068:	f000 f926 	bl	80042b8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800406c:	f000 fcfe 	bl	8004a6c <xTaskResumeAll>
 8004070:	e766      	b.n	8003f40 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8004072:	69f8      	ldr	r0, [r7, #28]
 8004074:	f000 f920 	bl	80042b8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004078:	f000 fcf8 	bl	8004a6c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800407c:	69f8      	ldr	r0, [r7, #28]
 800407e:	f000 f96d 	bl	800435c <prvIsQueueEmpty>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	f43f af5b 	beq.w	8003f40 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8004090:	f002 fb5e 	bl	8006750 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004094:	69f8      	ldr	r0, [r7, #28]
 8004096:	f000 f867 	bl	8004168 <prvGetDisinheritPriorityAfterTimeout>
 800409a:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 fc4c 	bl	8005940 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80040a8:	f002 fb7e 	bl	80067a8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80040ac:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3728      	adds	r7, #40	@ 0x28
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	08024a6c 	.word	0x08024a6c
 80040bc:	e000ed04 	.word	0xe000ed04

080040c0 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <uxQueueMessagesWaiting+0x18>
 80040ce:	f640 019b 	movw	r1, #2203	@ 0x89b
 80040d2:	4807      	ldr	r0, [pc, #28]	@ (80040f0 <uxQueueMessagesWaiting+0x30>)
 80040d4:	f7fd fc60 	bl	8001998 <vAssertCalled>

    taskENTER_CRITICAL();
 80040d8:	f002 fb3a 	bl	8006750 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e0:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80040e2:	f002 fb61 	bl	80067a8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	08024a6c 	.word	0x08024a6c

080040f4 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d104      	bne.n	8004110 <uxQueueSpacesAvailable+0x1c>
 8004106:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 800410a:	4809      	ldr	r0, [pc, #36]	@ (8004130 <uxQueueSpacesAvailable+0x3c>)
 800410c:	f7fd fc44 	bl	8001998 <vAssertCalled>

    taskENTER_CRITICAL();
 8004110:	f002 fb1e 	bl	8006750 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8004120:	f002 fb42 	bl	80067a8 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8004124:	68bb      	ldr	r3, [r7, #8]
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	08024a6c 	.word	0x08024a6c

08004134 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b084      	sub	sp, #16
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <vQueueDelete+0x1c>
 8004146:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800414a:	4806      	ldr	r0, [pc, #24]	@ (8004164 <vQueueDelete+0x30>)
 800414c:	f7fd fc24 	bl	8001998 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f979 	bl	8004448 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8004156:	68f8      	ldr	r0, [r7, #12]
 8004158:	f002 fcd0 	bl	8006afc <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800415c:	bf00      	nop
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	08024a6c 	.word	0x08024a6c

08004168 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e001      	b.n	800418a <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004186:	2300      	movs	r3, #0
 8004188:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800418a:	68fb      	ldr	r3, [r7, #12]
    }
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b086      	sub	sp, #24
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d10d      	bne.n	80041d2 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d14d      	bne.n	800425a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f001 fb20 	bl	8005808 <xTaskPriorityDisinherit>
 80041c8:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
 80041d0:	e043      	b.n	800425a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d119      	bne.n	800420c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6858      	ldr	r0, [r3, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	461a      	mov	r2, r3
 80041e2:	68b9      	ldr	r1, [r7, #8]
 80041e4:	f01e fcd2 	bl	8022b8c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	685a      	ldr	r2, [r3, #4]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f0:	441a      	add	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d32b      	bcc.n	800425a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	605a      	str	r2, [r3, #4]
 800420a:	e026      	b.n	800425a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	68d8      	ldr	r0, [r3, #12]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	461a      	mov	r2, r3
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	f01e fcb8 	bl	8022b8c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	425b      	negs	r3, r3
 8004226:	441a      	add	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68da      	ldr	r2, [r3, #12]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	429a      	cmp	r2, r3
 8004236:	d207      	bcs.n	8004248 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004240:	425b      	negs	r3, r3
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b02      	cmp	r3, #2
 800424c:	d105      	bne.n	800425a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d002      	beq.n	800425a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3b01      	subs	r3, #1
 8004258:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004262:	697b      	ldr	r3, [r7, #20]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3718      	adds	r7, #24
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d018      	beq.n	80042b0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004286:	441a      	add	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	429a      	cmp	r2, r3
 8004296:	d303      	bcc.n	80042a0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68d9      	ldr	r1, [r3, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a8:	461a      	mov	r2, r3
 80042aa:	6838      	ldr	r0, [r7, #0]
 80042ac:	f01e fc6e 	bl	8022b8c <memcpy>
    }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80042c0:	f002 fa46 	bl	8006750 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042ca:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042cc:	e011      	b.n	80042f2 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	3324      	adds	r3, #36	@ 0x24
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 feec 	bl	80050b8 <xTaskRemoveFromEventList>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80042e6:	f001 f903 	bl	80054f0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80042ea:	7bfb      	ldrb	r3, [r7, #15]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	dce9      	bgt.n	80042ce <prvUnlockQueue+0x16>
 80042fa:	e000      	b.n	80042fe <prvUnlockQueue+0x46>
                    break;
 80042fc:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	22ff      	movs	r2, #255	@ 0xff
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004306:	f002 fa4f 	bl	80067a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800430a:	f002 fa21 	bl	8006750 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004314:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004316:	e011      	b.n	800433c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d012      	beq.n	8004346 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3310      	adds	r3, #16
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fec7 	bl	80050b8 <xTaskRemoveFromEventList>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004330:	f001 f8de 	bl	80054f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004334:	7bbb      	ldrb	r3, [r7, #14]
 8004336:	3b01      	subs	r3, #1
 8004338:	b2db      	uxtb	r3, r3
 800433a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800433c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004340:	2b00      	cmp	r3, #0
 8004342:	dce9      	bgt.n	8004318 <prvUnlockQueue+0x60>
 8004344:	e000      	b.n	8004348 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004346:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	22ff      	movs	r2, #255	@ 0xff
 800434c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004350:	f002 fa2a 	bl	80067a8 <vPortExitCritical>
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004364:	f002 f9f4 	bl	8006750 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004370:	2301      	movs	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	e001      	b.n	800437a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004376:	2300      	movs	r3, #0
 8004378:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800437a:	f002 fa15 	bl	80067a8 <vPortExitCritical>

    return xReturn;
 800437e:	68fb      	ldr	r3, [r7, #12]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3710      	adds	r7, #16
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004390:	f002 f9de 	bl	8006750 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800439c:	429a      	cmp	r2, r3
 800439e:	d102      	bne.n	80043a6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80043a0:	2301      	movs	r3, #1
 80043a2:	60fb      	str	r3, [r7, #12]
 80043a4:	e001      	b.n	80043aa <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043aa:	f002 f9fd 	bl	80067a8 <vPortExitCritical>

    return xReturn;
 80043ae:	68fb      	ldr	r3, [r7, #12]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80043c2:	2300      	movs	r3, #0
 80043c4:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d104      	bne.n	80043d6 <vQueueAddToRegistry+0x1e>
 80043cc:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 80043d0:	481b      	ldr	r0, [pc, #108]	@ (8004440 <vQueueAddToRegistry+0x88>)
 80043d2:	f7fd fae1 	bl	8001998 <vAssertCalled>

        if( pcQueueName != NULL )
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d024      	beq.n	8004426 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043dc:	2300      	movs	r3, #0
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	e01e      	b.n	8004420 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80043e2:	4a18      	ldr	r2, [pc, #96]	@ (8004444 <vQueueAddToRegistry+0x8c>)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4413      	add	r3, r2
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d105      	bne.n	80043fe <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	00db      	lsls	r3, r3, #3
 80043f6:	4a13      	ldr	r2, [pc, #76]	@ (8004444 <vQueueAddToRegistry+0x8c>)
 80043f8:	4413      	add	r3, r2
 80043fa:	60bb      	str	r3, [r7, #8]
                    break;
 80043fc:	e013      	b.n	8004426 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10a      	bne.n	800441a <vQueueAddToRegistry+0x62>
 8004404:	4a0f      	ldr	r2, [pc, #60]	@ (8004444 <vQueueAddToRegistry+0x8c>)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d104      	bne.n	800441a <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4a0b      	ldr	r2, [pc, #44]	@ (8004444 <vQueueAddToRegistry+0x8c>)
 8004416:	4413      	add	r3, r2
 8004418:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3301      	adds	r3, #1
 800441e:	60fb      	str	r3, [r7, #12]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2b07      	cmp	r3, #7
 8004424:	d9dd      	bls.n	80043e2 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d005      	beq.n	8004438 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8004438:	bf00      	nop
 800443a:	3710      	adds	r7, #16
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	08024a6c 	.word	0x08024a6c
 8004444:	20000dcc 	.word	0x20000dcc

08004448 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8004448:	b580      	push	{r7, lr}
 800444a:	b084      	sub	sp, #16
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d104      	bne.n	8004460 <vQueueUnregisterQueue+0x18>
 8004456:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800445a:	4812      	ldr	r0, [pc, #72]	@ (80044a4 <vQueueUnregisterQueue+0x5c>)
 800445c:	f7fd fa9c 	bl	8001998 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]
 8004464:	e016      	b.n	8004494 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004466:	4a10      	ldr	r2, [pc, #64]	@ (80044a8 <vQueueUnregisterQueue+0x60>)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	00db      	lsls	r3, r3, #3
 800446c:	4413      	add	r3, r2
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	429a      	cmp	r2, r3
 8004474:	d10b      	bne.n	800448e <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8004476:	4a0c      	ldr	r2, [pc, #48]	@ (80044a8 <vQueueUnregisterQueue+0x60>)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2100      	movs	r1, #0
 800447c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004480:	4a09      	ldr	r2, [pc, #36]	@ (80044a8 <vQueueUnregisterQueue+0x60>)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	2200      	movs	r2, #0
 800448a:	605a      	str	r2, [r3, #4]
                break;
 800448c:	e006      	b.n	800449c <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	3301      	adds	r3, #1
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b07      	cmp	r3, #7
 8004498:	d9e5      	bls.n	8004466 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 800449a:	bf00      	nop
 800449c:	bf00      	nop
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}
 80044a4:	08024a6c 	.word	0x08024a6c
 80044a8:	20000dcc 	.word	0x20000dcc

080044ac <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b08a      	sub	sp, #40	@ 0x28
 80044b0:	af04      	add	r7, sp, #16
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4618      	mov	r0, r3
 80044c0:	f002 fa48 	bl	8006954 <pvPortMalloc>
 80044c4:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d013      	beq.n	80044f4 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80044cc:	206c      	movs	r0, #108	@ 0x6c
 80044ce:	f002 fa41 	bl	8006954 <pvPortMalloc>
 80044d2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d008      	beq.n	80044ec <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80044da:	226c      	movs	r2, #108	@ 0x6c
 80044dc:	2100      	movs	r1, #0
 80044de:	6978      	ldr	r0, [r7, #20]
 80044e0:	f01e fc61 	bl	8022da6 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80044ea:	e005      	b.n	80044f8 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80044ec:	6938      	ldr	r0, [r7, #16]
 80044ee:	f002 fb05 	bl	8006afc <vPortFree>
 80044f2:	e001      	b.n	80044f8 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00d      	beq.n	800451a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044fe:	2300      	movs	r3, #0
 8004500:	9303      	str	r3, [sp, #12]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	9302      	str	r3, [sp, #8]
 8004506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	6a3b      	ldr	r3, [r7, #32]
 800450c:	9300      	str	r3, [sp, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f829 	bl	800456c <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800451a:	697b      	ldr	r3, [r7, #20]
    }
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004524:	b580      	push	{r7, lr}
 8004526:	b088      	sub	sp, #32
 8004528:	af02      	add	r7, sp, #8
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	607a      	str	r2, [r7, #4]
 8004530:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	6a3b      	ldr	r3, [r7, #32]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	68b9      	ldr	r1, [r7, #8]
 8004540:	68f8      	ldr	r0, [r7, #12]
 8004542:	f7ff ffb3 	bl	80044ac <prvCreateTask>
 8004546:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d005      	beq.n	800455a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800454e:	6938      	ldr	r0, [r7, #16]
 8004550:	f000 f890 	bl	8004674 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004554:	2301      	movs	r3, #1
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	e002      	b.n	8004560 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800455a:	f04f 33ff 	mov.w	r3, #4294967295
 800455e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8004560:	697b      	ldr	r3, [r7, #20]
    }
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800457c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	461a      	mov	r2, r3
 8004584:	21a5      	movs	r1, #165	@ 0xa5
 8004586:	f01e fc0e 	bl	8022da6 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800458e:	6879      	ldr	r1, [r7, #4]
 8004590:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004594:	440b      	add	r3, r1
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	4413      	add	r3, r2
 800459a:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d004      	beq.n	80045b8 <prvInitialiseNewTask+0x4c>
 80045ae:	f240 712e 	movw	r1, #1838	@ 0x72e
 80045b2:	482f      	ldr	r0, [pc, #188]	@ (8004670 <prvInitialiseNewTask+0x104>)
 80045b4:	f7fd f9f0 	bl	8001998 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01e      	beq.n	80045fc <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
 80045c2:	e012      	b.n	80045ea <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	7819      	ldrb	r1, [r3, #0]
 80045cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	4413      	add	r3, r2
 80045d2:	3334      	adds	r3, #52	@ 0x34
 80045d4:	460a      	mov	r2, r1
 80045d6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	4413      	add	r3, r2
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d006      	beq.n	80045f2 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	3301      	adds	r3, #1
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b0f      	cmp	r3, #15
 80045ee:	d9e9      	bls.n	80045c4 <prvInitialiseNewTask+0x58>
 80045f0:	e000      	b.n	80045f4 <prvInitialiseNewTask+0x88>
            {
                break;
 80045f2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80045f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d904      	bls.n	800460c <prvInitialiseNewTask+0xa0>
 8004602:	f240 7164 	movw	r1, #1892	@ 0x764
 8004606:	481a      	ldr	r0, [pc, #104]	@ (8004670 <prvInitialiseNewTask+0x104>)
 8004608:	f7fd f9c6 	bl	8001998 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	2b06      	cmp	r3, #6
 8004610:	d901      	bls.n	8004616 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004612:	2306      	movs	r3, #6
 8004614:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004618:	6a3a      	ldr	r2, [r7, #32]
 800461a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	6a3a      	ldr	r2, [r7, #32]
 8004620:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff f8c0 	bl	80037ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800462c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462e:	3318      	adds	r3, #24
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff f8bb 	bl	80037ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004638:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800463a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	f1c3 0207 	rsb	r2, r3, #7
 8004642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004644:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004648:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	68f9      	ldr	r1, [r7, #12]
 8004650:	6938      	ldr	r0, [r7, #16]
 8004652:	f001 ff43 	bl	80064dc <pxPortInitialiseStack>
 8004656:	4602      	mov	r2, r0
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d002      	beq.n	8004668 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004666:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004668:	bf00      	nop
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}
 8004670:	08024a90 	.word	0x08024a90

08004674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800467c:	f002 f868 	bl	8006750 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8004680:	4b41      	ldr	r3, [pc, #260]	@ (8004788 <prvAddNewTaskToReadyList+0x114>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a40      	ldr	r2, [pc, #256]	@ (8004788 <prvAddNewTaskToReadyList+0x114>)
 8004688:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <prvAddNewTaskToReadyList+0x118>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8004692:	4a3e      	ldr	r2, [pc, #248]	@ (800478c <prvAddNewTaskToReadyList+0x118>)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004698:	4b3b      	ldr	r3, [pc, #236]	@ (8004788 <prvAddNewTaskToReadyList+0x114>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	d110      	bne.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80046a0:	f000 ff4a 	bl	8005538 <prvInitialiseTaskLists>
 80046a4:	e00d      	b.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80046a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004790 <prvAddNewTaskToReadyList+0x11c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046ae:	4b37      	ldr	r3, [pc, #220]	@ (800478c <prvAddNewTaskToReadyList+0x118>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d802      	bhi.n	80046c2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80046bc:	4a33      	ldr	r2, [pc, #204]	@ (800478c <prvAddNewTaskToReadyList+0x118>)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80046c2:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <prvAddNewTaskToReadyList+0x120>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	4a32      	ldr	r2, [pc, #200]	@ (8004794 <prvAddNewTaskToReadyList+0x120>)
 80046ca:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046cc:	4b31      	ldr	r3, [pc, #196]	@ (8004794 <prvAddNewTaskToReadyList+0x120>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	2201      	movs	r2, #1
 80046da:	409a      	lsls	r2, r3
 80046dc:	4b2e      	ldr	r3, [pc, #184]	@ (8004798 <prvAddNewTaskToReadyList+0x124>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	4a2d      	ldr	r2, [pc, #180]	@ (8004798 <prvAddNewTaskToReadyList+0x124>)
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ea:	492c      	ldr	r1, [pc, #176]	@ (800479c <prvAddNewTaskToReadyList+0x128>)
 80046ec:	4613      	mov	r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	440b      	add	r3, r1
 80046f6:	3304      	adds	r3, #4
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	60fb      	str	r3, [r7, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	609a      	str	r2, [r3, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689a      	ldr	r2, [r3, #8]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	60da      	str	r2, [r3, #12]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	3204      	adds	r2, #4
 8004712:	605a      	str	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	1d1a      	adds	r2, r3, #4
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004720:	4613      	mov	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	4a1c      	ldr	r2, [pc, #112]	@ (800479c <prvAddNewTaskToReadyList+0x128>)
 800472a:	441a      	add	r2, r3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	615a      	str	r2, [r3, #20]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004734:	4919      	ldr	r1, [pc, #100]	@ (800479c <prvAddNewTaskToReadyList+0x128>)
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	440b      	add	r3, r1
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004746:	1c59      	adds	r1, r3, #1
 8004748:	4814      	ldr	r0, [pc, #80]	@ (800479c <prvAddNewTaskToReadyList+0x128>)
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	4403      	add	r3, r0
 8004754:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8004756:	f002 f827 	bl	80067a8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <prvAddNewTaskToReadyList+0x11c>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00e      	beq.n	8004780 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <prvAddNewTaskToReadyList+0x118>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476c:	429a      	cmp	r2, r3
 800476e:	d207      	bcs.n	8004780 <prvAddNewTaskToReadyList+0x10c>
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <prvAddNewTaskToReadyList+0x12c>)
 8004772:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004780:	bf00      	nop
 8004782:	3710      	adds	r7, #16
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	20000f0c 	.word	0x20000f0c
 800478c:	20000e0c 	.word	0x20000e0c
 8004790:	20000f18 	.word	0x20000f18
 8004794:	20000f28 	.word	0x20000f28
 8004798:	20000f14 	.word	0x20000f14
 800479c:	20000e10 	.word	0x20000e10
 80047a0:	e000ed04 	.word	0xe000ed04

080047a4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 80047b0:	f001 ffce 	bl	8006750 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <vTaskDelete+0x1c>
 80047ba:	4b3e      	ldr	r3, [pc, #248]	@ (80048b4 <vTaskDelete+0x110>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	e000      	b.n	80047c2 <vTaskDelete+0x1e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	3304      	adds	r3, #4
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7ff f859 	bl	8003880 <uxListRemove>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d115      	bne.n	8004800 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047d8:	4937      	ldr	r1, [pc, #220]	@ (80048b8 <vTaskDelete+0x114>)
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	009b      	lsls	r3, r3, #2
 80047e2:	440b      	add	r3, r1
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10a      	bne.n	8004800 <vTaskDelete+0x5c>
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	2201      	movs	r2, #1
 80047f0:	fa02 f303 	lsl.w	r3, r2, r3
 80047f4:	43da      	mvns	r2, r3
 80047f6:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <vTaskDelete+0x118>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4013      	ands	r3, r2
 80047fc:	4a2f      	ldr	r2, [pc, #188]	@ (80048bc <vTaskDelete+0x118>)
 80047fe:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	3318      	adds	r3, #24
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff f837 	bl	8003880 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8004812:	4b2b      	ldr	r3, [pc, #172]	@ (80048c0 <vTaskDelete+0x11c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3301      	adds	r3, #1
 8004818:	4a29      	ldr	r2, [pc, #164]	@ (80048c0 <vTaskDelete+0x11c>)
 800481a:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 800481c:	4b25      	ldr	r3, [pc, #148]	@ (80048b4 <vTaskDelete+0x110>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	429a      	cmp	r2, r3
 8004824:	d101      	bne.n	800482a <vTaskDelete+0x86>
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <vTaskDelete+0x88>
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800482e:	4b25      	ldr	r3, [pc, #148]	@ (80048c4 <vTaskDelete+0x120>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d010      	beq.n	8004858 <vTaskDelete+0xb4>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00d      	beq.n	8004858 <vTaskDelete+0xb4>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	3304      	adds	r3, #4
 8004840:	4619      	mov	r1, r3
 8004842:	4821      	ldr	r0, [pc, #132]	@ (80048c8 <vTaskDelete+0x124>)
 8004844:	f7fe ffbf 	bl	80037c6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8004848:	4b20      	ldr	r3, [pc, #128]	@ (80048cc <vTaskDelete+0x128>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a1f      	ldr	r2, [pc, #124]	@ (80048cc <vTaskDelete+0x128>)
 8004850:	6013      	str	r3, [r2, #0]
                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8004852:	2301      	movs	r3, #1
 8004854:	617b      	str	r3, [r7, #20]
 8004856:	e006      	b.n	8004866 <vTaskDelete+0xc2>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8004858:	4b1d      	ldr	r3, [pc, #116]	@ (80048d0 <vTaskDelete+0x12c>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3b01      	subs	r3, #1
 800485e:	4a1c      	ldr	r2, [pc, #112]	@ (80048d0 <vTaskDelete+0x12c>)
 8004860:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8004862:	f000 fee7 	bl	8005634 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8004866:	f001 ff9f 	bl	80067a8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d002      	beq.n	8004876 <vTaskDelete+0xd2>
        {
            prvDeleteTCB( pxTCB );
 8004870:	6938      	ldr	r0, [r7, #16]
 8004872:	f000 fecf 	bl	8005614 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8004876:	4b13      	ldr	r3, [pc, #76]	@ (80048c4 <vTaskDelete+0x120>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d015      	beq.n	80048aa <vTaskDelete+0x106>
            {
                if( pxTCB == pxCurrentTCB )
 800487e:	4b0d      	ldr	r3, [pc, #52]	@ (80048b4 <vTaskDelete+0x110>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	429a      	cmp	r2, r3
 8004886:	d110      	bne.n	80048aa <vTaskDelete+0x106>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8004888:	4b12      	ldr	r3, [pc, #72]	@ (80048d4 <vTaskDelete+0x130>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <vTaskDelete+0xf6>
 8004890:	f640 1114 	movw	r1, #2324	@ 0x914
 8004894:	4810      	ldr	r0, [pc, #64]	@ (80048d8 <vTaskDelete+0x134>)
 8004896:	f7fd f87f 	bl	8001998 <vAssertCalled>
                    taskYIELD_WITHIN_API();
 800489a:	4b10      	ldr	r3, [pc, #64]	@ (80048dc <vTaskDelete+0x138>)
 800489c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	f3bf 8f6f 	isb	sy
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
    }
 80048aa:	bf00      	nop
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	20000e0c 	.word	0x20000e0c
 80048b8:	20000e10 	.word	0x20000e10
 80048bc:	20000f14 	.word	0x20000f14
 80048c0:	20000f28 	.word	0x20000f28
 80048c4:	20000f18 	.word	0x20000f18
 80048c8:	20000ee0 	.word	0x20000ee0
 80048cc:	20000ef4 	.word	0x20000ef4
 80048d0:	20000f0c 	.word	0x20000f0c
 80048d4:	20000f34 	.word	0x20000f34
 80048d8:	08024a90 	.word	0x08024a90
 80048dc:	e000ed04 	.word	0xe000ed04

080048e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d011      	beq.n	8004916 <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 80048f2:	f000 f8ad 	bl	8004a50 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80048f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004934 <vTaskDelay+0x54>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d004      	beq.n	8004908 <vTaskDelay+0x28>
 80048fe:	f640 118e 	movw	r1, #2446	@ 0x98e
 8004902:	480d      	ldr	r0, [pc, #52]	@ (8004938 <vTaskDelay+0x58>)
 8004904:	f7fd f848 	bl	8001998 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004908:	2100      	movs	r1, #0
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f001 fd64 	bl	80063d8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004910:	f000 f8ac 	bl	8004a6c <xTaskResumeAll>
 8004914:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d107      	bne.n	800492c <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 800491c:	4b07      	ldr	r3, [pc, #28]	@ (800493c <vTaskDelay+0x5c>)
 800491e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004922:	601a      	str	r2, [r3, #0]
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000f34 	.word	0x20000f34
 8004938:	08024a90 	.word	0x08024a90
 800493c:	e000ed04 	.word	0xe000ed04

08004940 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8004946:	2301      	movs	r3, #1
 8004948:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
 8004952:	e011      	b.n	8004978 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8004954:	4a1d      	ldr	r2, [pc, #116]	@ (80049cc <prvCreateIdleTasks+0x8c>)
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	7819      	ldrb	r1, [r3, #0]
 800495c:	463a      	mov	r2, r7
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	4413      	add	r3, r2
 8004962:	460a      	mov	r2, r1
 8004964:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8004966:	463a      	mov	r2, r7
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	4413      	add	r3, r2
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d006      	beq.n	8004980 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3301      	adds	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	ddea      	ble.n	8004954 <prvCreateIdleTasks+0x14>
 800497e:	e000      	b.n	8004982 <prvCreateIdleTasks+0x42>
        {
            break;
 8004980:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	e016      	b.n	80049b6 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004988:	4b11      	ldr	r3, [pc, #68]	@ (80049d0 <prvCreateIdleTasks+0x90>)
 800498a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4a10      	ldr	r2, [pc, #64]	@ (80049d4 <prvCreateIdleTasks+0x94>)
 8004992:	4413      	add	r3, r2
 8004994:	4639      	mov	r1, r7
 8004996:	9301      	str	r3, [sp, #4]
 8004998:	2300      	movs	r3, #0
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	2300      	movs	r3, #0
 800499e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049a2:	6938      	ldr	r0, [r7, #16]
 80049a4:	f7ff fdbe 	bl	8004524 <xTaskCreate>
 80049a8:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d006      	beq.n	80049be <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61bb      	str	r3, [r7, #24]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	dde5      	ble.n	8004988 <prvCreateIdleTasks+0x48>
 80049bc:	e000      	b.n	80049c0 <prvCreateIdleTasks+0x80>
        {
            break;
 80049be:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80049c0:	69fb      	ldr	r3, [r7, #28]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3720      	adds	r7, #32
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	08024ab4 	.word	0x08024ab4
 80049d0:	08005509 	.word	0x08005509
 80049d4:	20000f30 	.word	0x20000f30

080049d8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b082      	sub	sp, #8
 80049dc:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80049de:	f7ff ffaf 	bl	8004940 <prvCreateIdleTasks>
 80049e2:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d118      	bne.n	8004a1c <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80049ea:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80049ee:	b672      	cpsid	i
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	b662      	cpsie	i
 80049fe:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8004a00:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8004a02:	4b0e      	ldr	r3, [pc, #56]	@ (8004a3c <vTaskStartScheduler+0x64>)
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004a40 <vTaskStartScheduler+0x68>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a10:	4b0c      	ldr	r3, [pc, #48]	@ (8004a44 <vTaskStartScheduler+0x6c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8004a16:	f001 fded 	bl	80065f4 <xPortStartScheduler>
 8004a1a:	e008      	b.n	8004a2e <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a22:	d104      	bne.n	8004a2e <vTaskStartScheduler+0x56>
 8004a24:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8004a28:	4807      	ldr	r0, [pc, #28]	@ (8004a48 <vTaskStartScheduler+0x70>)
 8004a2a:	f7fc ffb5 	bl	8001998 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004a2e:	4b07      	ldr	r3, [pc, #28]	@ (8004a4c <vTaskStartScheduler+0x74>)
 8004a30:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8004a32:	bf00      	nop
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	20000f2c 	.word	0x20000f2c
 8004a40:	20000f18 	.word	0x20000f18
 8004a44:	20000f10 	.word	0x20000f10
 8004a48:	08024a90 	.word	0x08024a90
 8004a4c:	20000008 	.word	0x20000008

08004a50 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8004a54:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <vTaskSuspendAll+0x18>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	4a03      	ldr	r2, [pc, #12]	@ (8004a68 <vTaskSuspendAll+0x18>)
 8004a5c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004a5e:	bf00      	nop
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	20000f34 	.word	0x20000f34

08004a6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b088      	sub	sp, #32
 8004a70:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004a72:	2300      	movs	r3, #0
 8004a74:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004a7a:	f001 fe69 	bl	8006750 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004a7e:	2300      	movs	r3, #0
 8004a80:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8004a82:	4b72      	ldr	r3, [pc, #456]	@ (8004c4c <xTaskResumeAll+0x1e0>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <xTaskResumeAll+0x28>
 8004a8a:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8004a8e:	4870      	ldr	r0, [pc, #448]	@ (8004c50 <xTaskResumeAll+0x1e4>)
 8004a90:	f7fc ff82 	bl	8001998 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8004a94:	4b6d      	ldr	r3, [pc, #436]	@ (8004c4c <xTaskResumeAll+0x1e0>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c4c <xTaskResumeAll+0x1e0>)
 8004a9c:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004a9e:	4b6b      	ldr	r3, [pc, #428]	@ (8004c4c <xTaskResumeAll+0x1e0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	f040 80ca 	bne.w	8004c3c <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c54 <xTaskResumeAll+0x1e8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f000 80c5 	beq.w	8004c3c <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab2:	e08e      	b.n	8004bd2 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ab4:	4b68      	ldr	r3, [pc, #416]	@ (8004c58 <xTaskResumeAll+0x1ec>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	68db      	ldr	r3, [r3, #12]
 8004aba:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	60fb      	str	r3, [r7, #12]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	6a12      	ldr	r2, [r2, #32]
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
 8004ad0:	69fa      	ldr	r2, [r7, #28]
 8004ad2:	69d2      	ldr	r2, [r2, #28]
 8004ad4:	605a      	str	r2, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	3318      	adds	r3, #24
 8004ade:	429a      	cmp	r2, r3
 8004ae0:	d103      	bne.n	8004aea <xTaskResumeAll+0x7e>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	6a1a      	ldr	r2, [r3, #32]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	605a      	str	r2, [r3, #4]
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2200      	movs	r2, #0
 8004aee:	629a      	str	r2, [r3, #40]	@ 0x28
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	1e5a      	subs	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004afa:	69fb      	ldr	r3, [r7, #28]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	60bb      	str	r3, [r7, #8]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	69fa      	ldr	r2, [r7, #28]
 8004b06:	68d2      	ldr	r2, [r2, #12]
 8004b08:	609a      	str	r2, [r3, #8]
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	6892      	ldr	r2, [r2, #8]
 8004b12:	605a      	str	r2, [r3, #4]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d103      	bne.n	8004b28 <xTaskResumeAll+0xbc>
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	605a      	str	r2, [r3, #4]
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	615a      	str	r2, [r3, #20]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	1e5a      	subs	r2, r3, #1
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	409a      	lsls	r2, r3
 8004b40:	4b46      	ldr	r3, [pc, #280]	@ (8004c5c <xTaskResumeAll+0x1f0>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	4a45      	ldr	r2, [pc, #276]	@ (8004c5c <xTaskResumeAll+0x1f0>)
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	69fb      	ldr	r3, [r7, #28]
 8004b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b4e:	4944      	ldr	r1, [pc, #272]	@ (8004c60 <xTaskResumeAll+0x1f4>)
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	607b      	str	r3, [r7, #4]
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	69fa      	ldr	r2, [r7, #28]
 8004b74:	3204      	adds	r2, #4
 8004b76:	605a      	str	r2, [r3, #4]
 8004b78:	69fb      	ldr	r3, [r7, #28]
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b84:	4613      	mov	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	4a34      	ldr	r2, [pc, #208]	@ (8004c60 <xTaskResumeAll+0x1f4>)
 8004b8e:	441a      	add	r2, r3
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	615a      	str	r2, [r3, #20]
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b98:	4931      	ldr	r1, [pc, #196]	@ (8004c60 <xTaskResumeAll+0x1f4>)
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004baa:	1c59      	adds	r1, r3, #1
 8004bac:	482c      	ldr	r0, [pc, #176]	@ (8004c60 <xTaskResumeAll+0x1f4>)
 8004bae:	4613      	mov	r3, r2
 8004bb0:	009b      	lsls	r3, r3, #2
 8004bb2:	4413      	add	r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4403      	add	r3, r0
 8004bb8:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	4b29      	ldr	r3, [pc, #164]	@ (8004c64 <xTaskResumeAll+0x1f8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d904      	bls.n	8004bd2 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8004bc8:	4a27      	ldr	r2, [pc, #156]	@ (8004c68 <xTaskResumeAll+0x1fc>)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2101      	movs	r1, #1
 8004bce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bd2:	4b21      	ldr	r3, [pc, #132]	@ (8004c58 <xTaskResumeAll+0x1ec>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	f47f af6c 	bne.w	8004ab4 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8004be2:	f000 fd27 	bl	8005634 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004be6:	4b21      	ldr	r3, [pc, #132]	@ (8004c6c <xTaskResumeAll+0x200>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d012      	beq.n	8004c18 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8004bf2:	f000 f86d 	bl	8004cd0 <xTaskIncrementTick>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d004      	beq.n	8004c06 <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8004bfc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c68 <xTaskResumeAll+0x1fc>)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	2101      	movs	r1, #1
 8004c02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d1ef      	bne.n	8004bf2 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8004c12:	4b16      	ldr	r3, [pc, #88]	@ (8004c6c <xTaskResumeAll+0x200>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004c18:	4a13      	ldr	r2, [pc, #76]	@ (8004c68 <xTaskResumeAll+0x1fc>)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00b      	beq.n	8004c3c <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004c28:	4b0e      	ldr	r3, [pc, #56]	@ (8004c64 <xTaskResumeAll+0x1f8>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <xTaskResumeAll+0x204>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004c3c:	f001 fdb4 	bl	80067a8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004c40:	69bb      	ldr	r3, [r7, #24]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000f34 	.word	0x20000f34
 8004c50:	08024a90 	.word	0x08024a90
 8004c54:	20000f0c 	.word	0x20000f0c
 8004c58:	20000ecc 	.word	0x20000ecc
 8004c5c:	20000f14 	.word	0x20000f14
 8004c60:	20000e10 	.word	0x20000e10
 8004c64:	20000e0c 	.word	0x20000e0c
 8004c68:	20000f20 	.word	0x20000f20
 8004c6c:	20000f1c 	.word	0x20000f1c
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004c7a:	4b05      	ldr	r3, [pc, #20]	@ (8004c90 <xTaskGetTickCount+0x1c>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004c80:	687b      	ldr	r3, [r7, #4]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	370c      	adds	r7, #12
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	20000f10 	.word	0x20000f10

08004c94 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d102      	bne.n	8004ca8 <pcTaskGetName+0x14>
 8004ca2:	4b09      	ldr	r3, [pc, #36]	@ (8004cc8 <pcTaskGetName+0x34>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	e000      	b.n	8004caa <pcTaskGetName+0x16>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <pcTaskGetName+0x28>
 8004cb2:	f241 0155 	movw	r1, #4181	@ 0x1055
 8004cb6:	4805      	ldr	r0, [pc, #20]	@ (8004ccc <pcTaskGetName+0x38>)
 8004cb8:	f7fc fe6e 	bl	8001998 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	3334      	adds	r3, #52	@ 0x34
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	20000e0c 	.word	0x20000e0c
 8004ccc:	08024a90 	.word	0x08024a90

08004cd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004cda:	4b7b      	ldr	r3, [pc, #492]	@ (8004ec8 <xTaskIncrementTick+0x1f8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 80e8 	bne.w	8004eb4 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ce4:	4b79      	ldr	r3, [pc, #484]	@ (8004ecc <xTaskIncrementTick+0x1fc>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004cec:	4a77      	ldr	r2, [pc, #476]	@ (8004ecc <xTaskIncrementTick+0x1fc>)
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d11a      	bne.n	8004d2e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8004cf8:	4b75      	ldr	r3, [pc, #468]	@ (8004ed0 <xTaskIncrementTick+0x200>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d004      	beq.n	8004d0c <xTaskIncrementTick+0x3c>
 8004d02:	f241 215f 	movw	r1, #4703	@ 0x125f
 8004d06:	4873      	ldr	r0, [pc, #460]	@ (8004ed4 <xTaskIncrementTick+0x204>)
 8004d08:	f7fc fe46 	bl	8001998 <vAssertCalled>
 8004d0c:	4b70      	ldr	r3, [pc, #448]	@ (8004ed0 <xTaskIncrementTick+0x200>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	617b      	str	r3, [r7, #20]
 8004d12:	4b71      	ldr	r3, [pc, #452]	@ (8004ed8 <xTaskIncrementTick+0x208>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a6e      	ldr	r2, [pc, #440]	@ (8004ed0 <xTaskIncrementTick+0x200>)
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4a6f      	ldr	r2, [pc, #444]	@ (8004ed8 <xTaskIncrementTick+0x208>)
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	6013      	str	r3, [r2, #0]
 8004d20:	4b6e      	ldr	r3, [pc, #440]	@ (8004edc <xTaskIncrementTick+0x20c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	4a6d      	ldr	r2, [pc, #436]	@ (8004edc <xTaskIncrementTick+0x20c>)
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	f000 fc83 	bl	8005634 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004d2e:	4b6c      	ldr	r3, [pc, #432]	@ (8004ee0 <xTaskIncrementTick+0x210>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	429a      	cmp	r2, r3
 8004d36:	f0c0 80a8 	bcc.w	8004e8a <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d3a:	4b65      	ldr	r3, [pc, #404]	@ (8004ed0 <xTaskIncrementTick+0x200>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8004d44:	4b66      	ldr	r3, [pc, #408]	@ (8004ee0 <xTaskIncrementTick+0x210>)
 8004d46:	f04f 32ff 	mov.w	r2, #4294967295
 8004d4a:	601a      	str	r2, [r3, #0]
                    break;
 8004d4c:	e09d      	b.n	8004e8a <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004d4e:	4b60      	ldr	r3, [pc, #384]	@ (8004ed0 <xTaskIncrementTick+0x200>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	68db      	ldr	r3, [r3, #12]
 8004d56:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d203      	bcs.n	8004d6e <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004d66:	4a5e      	ldr	r2, [pc, #376]	@ (8004ee0 <xTaskIncrementTick+0x210>)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6013      	str	r3, [r2, #0]
                        break;
 8004d6c:	e08d      	b.n	8004e8a <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	68d2      	ldr	r2, [r2, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	6892      	ldr	r2, [r2, #8]
 8004d86:	605a      	str	r2, [r3, #4]
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	3304      	adds	r3, #4
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d103      	bne.n	8004d9c <xTaskIncrementTick+0xcc>
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	605a      	str	r2, [r3, #4]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	615a      	str	r2, [r3, #20]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	1e5a      	subs	r2, r3, #1
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01e      	beq.n	8004df2 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	607b      	str	r3, [r7, #4]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	6a12      	ldr	r2, [r2, #32]
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	69d2      	ldr	r2, [r2, #28]
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d103      	bne.n	8004de2 <xTaskIncrementTick+0x112>
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	6a1a      	ldr	r2, [r3, #32]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	2200      	movs	r2, #0
 8004de6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	1e5a      	subs	r2, r3, #1
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df6:	2201      	movs	r2, #1
 8004df8:	409a      	lsls	r2, r3
 8004dfa:	4b3a      	ldr	r3, [pc, #232]	@ (8004ee4 <xTaskIncrementTick+0x214>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	4a38      	ldr	r2, [pc, #224]	@ (8004ee4 <xTaskIncrementTick+0x214>)
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e08:	4937      	ldr	r1, [pc, #220]	@ (8004ee8 <xTaskIncrementTick+0x218>)
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	3304      	adds	r3, #4
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	603b      	str	r3, [r7, #0]
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	609a      	str	r2, [r3, #8]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	60da      	str	r2, [r3, #12]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	3204      	adds	r2, #4
 8004e30:	605a      	str	r2, [r3, #4]
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1d1a      	adds	r2, r3, #4
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e3e:	4613      	mov	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4a28      	ldr	r2, [pc, #160]	@ (8004ee8 <xTaskIncrementTick+0x218>)
 8004e48:	441a      	add	r2, r3
 8004e4a:	693b      	ldr	r3, [r7, #16]
 8004e4c:	615a      	str	r2, [r3, #20]
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e52:	4925      	ldr	r1, [pc, #148]	@ (8004ee8 <xTaskIncrementTick+0x218>)
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004e64:	1c59      	adds	r1, r3, #1
 8004e66:	4820      	ldr	r0, [pc, #128]	@ (8004ee8 <xTaskIncrementTick+0x218>)
 8004e68:	4613      	mov	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	4413      	add	r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4403      	add	r3, r0
 8004e72:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e78:	4b1c      	ldr	r3, [pc, #112]	@ (8004eec <xTaskIncrementTick+0x21c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	f67f af5b 	bls.w	8004d3a <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e88:	e757      	b.n	8004d3a <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004e8a:	4b18      	ldr	r3, [pc, #96]	@ (8004eec <xTaskIncrementTick+0x21c>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e90:	4915      	ldr	r1, [pc, #84]	@ (8004ee8 <xTaskIncrementTick+0x218>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d901      	bls.n	8004ea6 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8004ea6:	4b12      	ldr	r3, [pc, #72]	@ (8004ef0 <xTaskIncrementTick+0x220>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d007      	beq.n	8004ebe <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	61fb      	str	r3, [r7, #28]
 8004eb2:	e004      	b.n	8004ebe <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8004eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8004ef4 <xTaskIncrementTick+0x224>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	4a0e      	ldr	r2, [pc, #56]	@ (8004ef4 <xTaskIncrementTick+0x224>)
 8004ebc:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3720      	adds	r7, #32
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000f34 	.word	0x20000f34
 8004ecc:	20000f10 	.word	0x20000f10
 8004ed0:	20000ec4 	.word	0x20000ec4
 8004ed4:	08024a90 	.word	0x08024a90
 8004ed8:	20000ec8 	.word	0x20000ec8
 8004edc:	20000f24 	.word	0x20000f24
 8004ee0:	20000f2c 	.word	0x20000f2c
 8004ee4:	20000f14 	.word	0x20000f14
 8004ee8:	20000e10 	.word	0x20000e10
 8004eec:	20000e0c 	.word	0x20000e0c
 8004ef0:	20000f20 	.word	0x20000f20
 8004ef4:	20000f1c 	.word	0x20000f1c

08004ef8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8004efe:	4b30      	ldr	r3, [pc, #192]	@ (8004fc0 <vTaskSwitchContext+0xc8>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004f06:	4b2f      	ldr	r3, [pc, #188]	@ (8004fc4 <vTaskSwitchContext+0xcc>)
 8004f08:	2201      	movs	r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8004f0c:	e053      	b.n	8004fb6 <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8004f0e:	4b2d      	ldr	r3, [pc, #180]	@ (8004fc4 <vTaskSwitchContext+0xcc>)
 8004f10:	2200      	movs	r2, #0
 8004f12:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8004f14:	f7fc fd38 	bl	8001988 <ulGetRunTimeCounterValue>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8004fc8 <vTaskSwitchContext+0xd0>)
 8004f1c:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fc8 <vTaskSwitchContext+0xd0>)
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	4b2a      	ldr	r3, [pc, #168]	@ (8004fcc <vTaskSwitchContext+0xd4>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d909      	bls.n	8004f3e <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8004f2a:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <vTaskSwitchContext+0xd0>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <vTaskSwitchContext+0xd4>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	1ad1      	subs	r1, r2, r3
 8004f34:	4b26      	ldr	r3, [pc, #152]	@ (8004fd0 <vTaskSwitchContext+0xd8>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f3a:	440a      	add	r2, r1
 8004f3c:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8004f3e:	4b22      	ldr	r3, [pc, #136]	@ (8004fc8 <vTaskSwitchContext+0xd0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a22      	ldr	r2, [pc, #136]	@ (8004fcc <vTaskSwitchContext+0xd4>)
 8004f44:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8004f46:	4b23      	ldr	r3, [pc, #140]	@ (8004fd4 <vTaskSwitchContext+0xdc>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	fab3 f383 	clz	r3, r3
 8004f52:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	f1c3 031f 	rsb	r3, r3, #31
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	491e      	ldr	r1, [pc, #120]	@ (8004fd8 <vTaskSwitchContext+0xe0>)
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <vTaskSwitchContext+0x82>
 8004f70:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8004f74:	4819      	ldr	r0, [pc, #100]	@ (8004fdc <vTaskSwitchContext+0xe4>)
 8004f76:	f7fc fd0f 	bl	8001998 <vAssertCalled>
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4613      	mov	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	4413      	add	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4a14      	ldr	r2, [pc, #80]	@ (8004fd8 <vTaskSwitchContext+0xe0>)
 8004f86:	4413      	add	r3, r2
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	605a      	str	r2, [r3, #4]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	685a      	ldr	r2, [r3, #4]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d103      	bne.n	8004fa8 <vTaskSwitchContext+0xb0>
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	605a      	str	r2, [r3, #4]
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	4a08      	ldr	r2, [pc, #32]	@ (8004fd0 <vTaskSwitchContext+0xd8>)
 8004fb0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <vTaskSwitchContext+0xd8>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
    }
 8004fb6:	bf00      	nop
 8004fb8:	3710      	adds	r7, #16
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000f34 	.word	0x20000f34
 8004fc4:	20000f20 	.word	0x20000f20
 8004fc8:	20000f3c 	.word	0x20000f3c
 8004fcc:	20000f38 	.word	0x20000f38
 8004fd0:	20000e0c 	.word	0x20000e0c
 8004fd4:	20000f14 	.word	0x20000f14
 8004fd8:	20000e10 	.word	0x20000e10
 8004fdc:	08024a90 	.word	0x08024a90

08004fe0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d104      	bne.n	8004ffa <vTaskPlaceOnEventList+0x1a>
 8004ff0:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8004ff4:	4808      	ldr	r0, [pc, #32]	@ (8005018 <vTaskPlaceOnEventList+0x38>)
 8004ff6:	f7fc fccf 	bl	8001998 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ffa:	4b08      	ldr	r3, [pc, #32]	@ (800501c <vTaskPlaceOnEventList+0x3c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3318      	adds	r3, #24
 8005000:	4619      	mov	r1, r3
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f7fe fc03 	bl	800380e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005008:	2101      	movs	r1, #1
 800500a:	6838      	ldr	r0, [r7, #0]
 800500c:	f001 f9e4 	bl	80063d8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	08024a90 	.word	0x08024a90
 800501c:	20000e0c 	.word	0x20000e0c

08005020 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b086      	sub	sp, #24
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d104      	bne.n	800503c <vTaskPlaceOnUnorderedEventList+0x1c>
 8005032:	f241 419e 	movw	r1, #5278	@ 0x149e
 8005036:	481d      	ldr	r0, [pc, #116]	@ (80050ac <vTaskPlaceOnUnorderedEventList+0x8c>)
 8005038:	f7fc fcae 	bl	8001998 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800503c:	4b1c      	ldr	r3, [pc, #112]	@ (80050b0 <vTaskPlaceOnUnorderedEventList+0x90>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d104      	bne.n	800504e <vTaskPlaceOnUnorderedEventList+0x2e>
 8005044:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 8005048:	4818      	ldr	r0, [pc, #96]	@ (80050ac <vTaskPlaceOnUnorderedEventList+0x8c>)
 800504a:	f7fc fca5 	bl	8001998 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800504e:	4b19      	ldr	r3, [pc, #100]	@ (80050b4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8005058:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	617b      	str	r3, [r7, #20]
 8005060:	4b14      	ldr	r3, [pc, #80]	@ (80050b4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	61da      	str	r2, [r3, #28]
 8005068:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <vTaskPlaceOnUnorderedEventList+0x94>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	6892      	ldr	r2, [r2, #8]
 8005070:	621a      	str	r2, [r3, #32]
 8005072:	4b10      	ldr	r3, [pc, #64]	@ (80050b4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	3218      	adds	r2, #24
 800507c:	605a      	str	r2, [r3, #4]
 800507e:	4b0d      	ldr	r3, [pc, #52]	@ (80050b4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f103 0218 	add.w	r2, r3, #24
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	609a      	str	r2, [r3, #8]
 800508a:	4b0a      	ldr	r3, [pc, #40]	@ (80050b4 <vTaskPlaceOnUnorderedEventList+0x94>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	629a      	str	r2, [r3, #40]	@ 0x28
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800509c:	2101      	movs	r1, #1
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f001 f99a 	bl	80063d8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 80050a4:	bf00      	nop
 80050a6:	3718      	adds	r7, #24
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	08024a90 	.word	0x08024a90
 80050b0:	20000f34 	.word	0x20000f34
 80050b4:	20000e0c 	.word	0x20000e0c

080050b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b088      	sub	sp, #32
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <xTaskRemoveFromEventList+0x20>
 80050ce:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 80050d2:	485b      	ldr	r0, [pc, #364]	@ (8005240 <xTaskRemoveFromEventList+0x188>)
 80050d4:	f7fc fc60 	bl	8001998 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050dc:	617b      	str	r3, [r7, #20]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	69ba      	ldr	r2, [r7, #24]
 80050e4:	6a12      	ldr	r2, [r2, #32]
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	69d2      	ldr	r2, [r2, #28]
 80050f0:	605a      	str	r2, [r3, #4]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	685a      	ldr	r2, [r3, #4]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	3318      	adds	r3, #24
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d103      	bne.n	8005106 <xTaskRemoveFromEventList+0x4e>
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	6a1a      	ldr	r2, [r3, #32]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	605a      	str	r2, [r3, #4]
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	2200      	movs	r2, #0
 800510a:	629a      	str	r2, [r3, #40]	@ 0x28
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	1e5a      	subs	r2, r3, #1
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005116:	4b4b      	ldr	r3, [pc, #300]	@ (8005244 <xTaskRemoveFromEventList+0x18c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d160      	bne.n	80051e0 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800511e:	69bb      	ldr	r3, [r7, #24]
 8005120:	695b      	ldr	r3, [r3, #20]
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	68d2      	ldr	r2, [r2, #12]
 800512c:	609a      	str	r2, [r3, #8]
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	6892      	ldr	r2, [r2, #8]
 8005136:	605a      	str	r2, [r3, #4]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	3304      	adds	r3, #4
 8005140:	429a      	cmp	r2, r3
 8005142:	d103      	bne.n	800514c <xTaskRemoveFromEventList+0x94>
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	68da      	ldr	r2, [r3, #12]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	605a      	str	r2, [r3, #4]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	2200      	movs	r2, #0
 8005150:	615a      	str	r2, [r3, #20]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	1e5a      	subs	r2, r3, #1
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005160:	2201      	movs	r2, #1
 8005162:	409a      	lsls	r2, r3
 8005164:	4b38      	ldr	r3, [pc, #224]	@ (8005248 <xTaskRemoveFromEventList+0x190>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4313      	orrs	r3, r2
 800516a:	4a37      	ldr	r2, [pc, #220]	@ (8005248 <xTaskRemoveFromEventList+0x190>)
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005172:	4936      	ldr	r1, [pc, #216]	@ (800524c <xTaskRemoveFromEventList+0x194>)
 8005174:	4613      	mov	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4413      	add	r3, r2
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	440b      	add	r3, r1
 800517e:	3304      	adds	r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60bb      	str	r3, [r7, #8]
 8005184:	69bb      	ldr	r3, [r7, #24]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689a      	ldr	r2, [r3, #8]
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	60da      	str	r2, [r3, #12]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	3204      	adds	r2, #4
 800519a:	605a      	str	r2, [r3, #4]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	1d1a      	adds	r2, r3, #4
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	609a      	str	r2, [r3, #8]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4a26      	ldr	r2, [pc, #152]	@ (800524c <xTaskRemoveFromEventList+0x194>)
 80051b2:	441a      	add	r2, r3
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	615a      	str	r2, [r3, #20]
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051bc:	4923      	ldr	r1, [pc, #140]	@ (800524c <xTaskRemoveFromEventList+0x194>)
 80051be:	4613      	mov	r3, r2
 80051c0:	009b      	lsls	r3, r3, #2
 80051c2:	4413      	add	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	440b      	add	r3, r1
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69ba      	ldr	r2, [r7, #24]
 80051cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051ce:	1c59      	adds	r1, r3, #1
 80051d0:	481e      	ldr	r0, [pc, #120]	@ (800524c <xTaskRemoveFromEventList+0x194>)
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	4403      	add	r3, r0
 80051dc:	6019      	str	r1, [r3, #0]
 80051de:	e01b      	b.n	8005218 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80051e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005250 <xTaskRemoveFromEventList+0x198>)
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	693a      	ldr	r2, [r7, #16]
 80051ea:	61da      	str	r2, [r3, #28]
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	621a      	str	r2, [r3, #32]
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	3218      	adds	r2, #24
 80051fc:	605a      	str	r2, [r3, #4]
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	f103 0218 	add.w	r2, r3, #24
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	4a11      	ldr	r2, [pc, #68]	@ (8005250 <xTaskRemoveFromEventList+0x198>)
 800520c:	629a      	str	r2, [r3, #40]	@ 0x28
 800520e:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <xTaskRemoveFromEventList+0x198>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	3301      	adds	r3, #1
 8005214:	4a0e      	ldr	r2, [pc, #56]	@ (8005250 <xTaskRemoveFromEventList+0x198>)
 8005216:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005218:	69bb      	ldr	r3, [r7, #24]
 800521a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800521c:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <xTaskRemoveFromEventList+0x19c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	429a      	cmp	r2, r3
 8005224:	d905      	bls.n	8005232 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8005226:	2301      	movs	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800522a:	4b0b      	ldr	r3, [pc, #44]	@ (8005258 <xTaskRemoveFromEventList+0x1a0>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	e001      	b.n	8005236 <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8005236:	69fb      	ldr	r3, [r7, #28]
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	08024a90 	.word	0x08024a90
 8005244:	20000f34 	.word	0x20000f34
 8005248:	20000f14 	.word	0x20000f14
 800524c:	20000e10 	.word	0x20000e10
 8005250:	20000ecc 	.word	0x20000ecc
 8005254:	20000e0c 	.word	0x20000e0c
 8005258:	20000f20 	.word	0x20000f20

0800525c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8005266:	4b52      	ldr	r3, [pc, #328]	@ (80053b0 <vTaskRemoveFromUnorderedEventList+0x154>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d104      	bne.n	8005278 <vTaskRemoveFromUnorderedEventList+0x1c>
 800526e:	f241 5143 	movw	r1, #5443	@ 0x1543
 8005272:	4850      	ldr	r0, [pc, #320]	@ (80053b4 <vTaskRemoveFromUnorderedEventList+0x158>)
 8005274:	f7fc fb90 	bl	8001998 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <vTaskRemoveFromUnorderedEventList+0x3c>
 800528e:	f241 514e 	movw	r1, #5454	@ 0x154e
 8005292:	4848      	ldr	r0, [pc, #288]	@ (80053b4 <vTaskRemoveFromUnorderedEventList+0x158>)
 8005294:	f7fc fb80 	bl	8001998 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6892      	ldr	r2, [r2, #8]
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6852      	ldr	r2, [r2, #4]
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d103      	bne.n	80052c4 <vTaskRemoveFromUnorderedEventList+0x68>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	605a      	str	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	611a      	str	r2, [r3, #16]
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	1e5a      	subs	r2, r3, #1
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	68d2      	ldr	r2, [r2, #12]
 80052e2:	609a      	str	r2, [r3, #8]
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	697a      	ldr	r2, [r7, #20]
 80052ea:	6892      	ldr	r2, [r2, #8]
 80052ec:	605a      	str	r2, [r3, #4]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	3304      	adds	r3, #4
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d103      	bne.n	8005302 <vTaskRemoveFromUnorderedEventList+0xa6>
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	615a      	str	r2, [r3, #20]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	1e5a      	subs	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005316:	2201      	movs	r2, #1
 8005318:	409a      	lsls	r2, r3
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <vTaskRemoveFromUnorderedEventList+0x15c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4313      	orrs	r3, r2
 8005320:	4a25      	ldr	r2, [pc, #148]	@ (80053b8 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005328:	4924      	ldr	r1, [pc, #144]	@ (80053bc <vTaskRemoveFromUnorderedEventList+0x160>)
 800532a:	4613      	mov	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	3304      	adds	r3, #4
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	60bb      	str	r3, [r7, #8]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	60da      	str	r2, [r3, #12]
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	3204      	adds	r2, #4
 8005350:	605a      	str	r2, [r3, #4]
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	609a      	str	r2, [r3, #8]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4a15      	ldr	r2, [pc, #84]	@ (80053bc <vTaskRemoveFromUnorderedEventList+0x160>)
 8005368:	441a      	add	r2, r3
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	615a      	str	r2, [r3, #20]
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005372:	4912      	ldr	r1, [pc, #72]	@ (80053bc <vTaskRemoveFromUnorderedEventList+0x160>)
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005384:	1c59      	adds	r1, r3, #1
 8005386:	480d      	ldr	r0, [pc, #52]	@ (80053bc <vTaskRemoveFromUnorderedEventList+0x160>)
 8005388:	4613      	mov	r3, r2
 800538a:	009b      	lsls	r3, r3, #2
 800538c:	4413      	add	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4403      	add	r3, r0
 8005392:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005398:	4b09      	ldr	r3, [pc, #36]	@ (80053c0 <vTaskRemoveFromUnorderedEventList+0x164>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539e:	429a      	cmp	r2, r3
 80053a0:	d902      	bls.n	80053a8 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 80053a2:	4b08      	ldr	r3, [pc, #32]	@ (80053c4 <vTaskRemoveFromUnorderedEventList+0x168>)
 80053a4:	2201      	movs	r2, #1
 80053a6:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 80053a8:	bf00      	nop
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	20000f34 	.word	0x20000f34
 80053b4:	08024a90 	.word	0x08024a90
 80053b8:	20000f14 	.word	0x20000f14
 80053bc:	20000e10 	.word	0x20000e10
 80053c0:	20000e0c 	.word	0x20000e0c
 80053c4:	20000f20 	.word	0x20000f20

080053c8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d104      	bne.n	80053e0 <vTaskSetTimeOutState+0x18>
 80053d6:	f241 5186 	movw	r1, #5510	@ 0x1586
 80053da:	4809      	ldr	r0, [pc, #36]	@ (8005400 <vTaskSetTimeOutState+0x38>)
 80053dc:	f7fc fadc 	bl	8001998 <vAssertCalled>
    taskENTER_CRITICAL();
 80053e0:	f001 f9b6 	bl	8006750 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053e4:	4b07      	ldr	r3, [pc, #28]	@ (8005404 <vTaskSetTimeOutState+0x3c>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80053ec:	4b06      	ldr	r3, [pc, #24]	@ (8005408 <vTaskSetTimeOutState+0x40>)
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 80053f4:	f001 f9d8 	bl	80067a8 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 80053f8:	bf00      	nop
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	08024a90 	.word	0x08024a90
 8005404:	20000f24 	.word	0x20000f24
 8005408:	20000f10 	.word	0x20000f10

0800540c <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005414:	4b06      	ldr	r3, [pc, #24]	@ (8005430 <vTaskInternalSetTimeOutState+0x24>)
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800541c:	4b05      	ldr	r3, [pc, #20]	@ (8005434 <vTaskInternalSetTimeOutState+0x28>)
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8005424:	bf00      	nop
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr
 8005430:	20000f24 	.word	0x20000f24
 8005434:	20000f10 	.word	0x20000f10

08005438 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b086      	sub	sp, #24
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <xTaskCheckForTimeOut+0x1a>
 8005448:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800544c:	4825      	ldr	r0, [pc, #148]	@ (80054e4 <xTaskCheckForTimeOut+0xac>)
 800544e:	f7fc faa3 	bl	8001998 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <xTaskCheckForTimeOut+0x2a>
 8005458:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800545c:	4821      	ldr	r0, [pc, #132]	@ (80054e4 <xTaskCheckForTimeOut+0xac>)
 800545e:	f7fc fa9b 	bl	8001998 <vAssertCalled>

    taskENTER_CRITICAL();
 8005462:	f001 f975 	bl	8006750 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005466:	4b20      	ldr	r3, [pc, #128]	@ (80054e8 <xTaskCheckForTimeOut+0xb0>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	685b      	ldr	r3, [r3, #4]
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800547e:	d102      	bne.n	8005486 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005480:	2300      	movs	r3, #0
 8005482:	617b      	str	r3, [r7, #20]
 8005484:	e026      	b.n	80054d4 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	4b18      	ldr	r3, [pc, #96]	@ (80054ec <xTaskCheckForTimeOut+0xb4>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	429a      	cmp	r2, r3
 8005490:	d00a      	beq.n	80054a8 <xTaskCheckForTimeOut+0x70>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	429a      	cmp	r2, r3
 800549a:	d305      	bcc.n	80054a8 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800549c:	2301      	movs	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	e015      	b.n	80054d4 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d20b      	bcs.n	80054ca <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	1ad2      	subs	r2, r2, r3
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7ff ffa4 	bl	800540c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	e004      	b.n	80054d4 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80054d0:	2301      	movs	r3, #1
 80054d2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80054d4:	f001 f968 	bl	80067a8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80054d8:	697b      	ldr	r3, [r7, #20]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	08024a90 	.word	0x08024a90
 80054e8:	20000f10 	.word	0x20000f10
 80054ec:	20000f24 	.word	0x20000f24

080054f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80054f4:	4b03      	ldr	r3, [pc, #12]	@ (8005504 <vTaskMissedYield+0x14>)
 80054f6:	2201      	movs	r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80054fa:	bf00      	nop
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	20000f20 	.word	0x20000f20

08005508 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005510:	f000 f852 	bl	80055b8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8005514:	4b06      	ldr	r3, [pc, #24]	@ (8005530 <prvIdleTask+0x28>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d9f9      	bls.n	8005510 <prvIdleTask+0x8>
            {
                taskYIELD();
 800551c:	4b05      	ldr	r3, [pc, #20]	@ (8005534 <prvIdleTask+0x2c>)
 800551e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005522:	601a      	str	r2, [r3, #0]
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800552c:	e7f0      	b.n	8005510 <prvIdleTask+0x8>
 800552e:	bf00      	nop
 8005530:	20000e10 	.word	0x20000e10
 8005534:	e000ed04 	.word	0xe000ed04

08005538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800553e:	2300      	movs	r3, #0
 8005540:	607b      	str	r3, [r7, #4]
 8005542:	e00c      	b.n	800555e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	4a12      	ldr	r2, [pc, #72]	@ (8005598 <prvInitialiseTaskLists+0x60>)
 8005550:	4413      	add	r3, r2
 8005552:	4618      	mov	r0, r3
 8005554:	f7fe f90a 	bl	800376c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3301      	adds	r3, #1
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b06      	cmp	r3, #6
 8005562:	d9ef      	bls.n	8005544 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005564:	480d      	ldr	r0, [pc, #52]	@ (800559c <prvInitialiseTaskLists+0x64>)
 8005566:	f7fe f901 	bl	800376c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800556a:	480d      	ldr	r0, [pc, #52]	@ (80055a0 <prvInitialiseTaskLists+0x68>)
 800556c:	f7fe f8fe 	bl	800376c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005570:	480c      	ldr	r0, [pc, #48]	@ (80055a4 <prvInitialiseTaskLists+0x6c>)
 8005572:	f7fe f8fb 	bl	800376c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8005576:	480c      	ldr	r0, [pc, #48]	@ (80055a8 <prvInitialiseTaskLists+0x70>)
 8005578:	f7fe f8f8 	bl	800376c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800557c:	480b      	ldr	r0, [pc, #44]	@ (80055ac <prvInitialiseTaskLists+0x74>)
 800557e:	f7fe f8f5 	bl	800376c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005582:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <prvInitialiseTaskLists+0x78>)
 8005584:	4a05      	ldr	r2, [pc, #20]	@ (800559c <prvInitialiseTaskLists+0x64>)
 8005586:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005588:	4b0a      	ldr	r3, [pc, #40]	@ (80055b4 <prvInitialiseTaskLists+0x7c>)
 800558a:	4a05      	ldr	r2, [pc, #20]	@ (80055a0 <prvInitialiseTaskLists+0x68>)
 800558c:	601a      	str	r2, [r3, #0]
}
 800558e:	bf00      	nop
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	20000e10 	.word	0x20000e10
 800559c:	20000e9c 	.word	0x20000e9c
 80055a0:	20000eb0 	.word	0x20000eb0
 80055a4:	20000ecc 	.word	0x20000ecc
 80055a8:	20000ee0 	.word	0x20000ee0
 80055ac:	20000ef8 	.word	0x20000ef8
 80055b0:	20000ec4 	.word	0x20000ec4
 80055b4:	20000ec8 	.word	0x20000ec8

080055b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b082      	sub	sp, #8
 80055bc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055be:	e019      	b.n	80055f4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80055c0:	f001 f8c6 	bl	8006750 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80055c4:	4b10      	ldr	r3, [pc, #64]	@ (8005608 <prvCheckTasksWaitingTermination+0x50>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	3304      	adds	r3, #4
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe f955 	bl	8003880 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80055d6:	4b0d      	ldr	r3, [pc, #52]	@ (800560c <prvCheckTasksWaitingTermination+0x54>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3b01      	subs	r3, #1
 80055dc:	4a0b      	ldr	r2, [pc, #44]	@ (800560c <prvCheckTasksWaitingTermination+0x54>)
 80055de:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80055e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3b01      	subs	r3, #1
 80055e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055e8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80055ea:	f001 f8dd 	bl	80067a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f810 	bl	8005614 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055f4:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <prvCheckTasksWaitingTermination+0x58>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1e1      	bne.n	80055c0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	20000ee0 	.word	0x20000ee0
 800560c:	20000f0c 	.word	0x20000f0c
 8005610:	20000ef4 	.word	0x20000ef4

08005614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005620:	4618      	mov	r0, r3
 8005622:	f001 fa6b 	bl	8006afc <vPortFree>
            vPortFree( pxTCB );
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f001 fa68 	bl	8006afc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005638:	4b0a      	ldr	r3, [pc, #40]	@ (8005664 <prvResetNextTaskUnblockTime+0x30>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d104      	bne.n	800564c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005642:	4b09      	ldr	r3, [pc, #36]	@ (8005668 <prvResetNextTaskUnblockTime+0x34>)
 8005644:	f04f 32ff 	mov.w	r2, #4294967295
 8005648:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800564a:	e005      	b.n	8005658 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <prvResetNextTaskUnblockTime+0x30>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a04      	ldr	r2, [pc, #16]	@ (8005668 <prvResetNextTaskUnblockTime+0x34>)
 8005656:	6013      	str	r3, [r2, #0]
}
 8005658:	bf00      	nop
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000ec4 	.word	0x20000ec4
 8005668:	20000f2c 	.word	0x20000f2c

0800566c <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8005672:	4b05      	ldr	r3, [pc, #20]	@ (8005688 <xTaskGetCurrentTaskHandle+0x1c>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8005678:	687b      	ldr	r3, [r7, #4]
        }
 800567a:	4618      	mov	r0, r3
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000e0c 	.word	0x20000e0c

0800568c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8005692:	4b0b      	ldr	r3, [pc, #44]	@ (80056c0 <xTaskGetSchedulerState+0x34>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d102      	bne.n	80056a0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800569a:	2301      	movs	r3, #1
 800569c:	607b      	str	r3, [r7, #4]
 800569e:	e008      	b.n	80056b2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80056a0:	4b08      	ldr	r3, [pc, #32]	@ (80056c4 <xTaskGetSchedulerState+0x38>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d102      	bne.n	80056ae <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80056a8:	2302      	movs	r3, #2
 80056aa:	607b      	str	r3, [r7, #4]
 80056ac:	e001      	b.n	80056b2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80056ae:	2300      	movs	r3, #0
 80056b0:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80056b2:	687b      	ldr	r3, [r7, #4]
    }
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20000f18 	.word	0x20000f18
 80056c4:	20000f34 	.word	0x20000f34

080056c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8089 	beq.w	80057f2 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e4:	4b45      	ldr	r3, [pc, #276]	@ (80057fc <xTaskPriorityInherit+0x134>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d278      	bcs.n	80057e0 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	db06      	blt.n	8005704 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80056f6:	4b41      	ldr	r3, [pc, #260]	@ (80057fc <xTaskPriorityInherit+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056fc:	f1c3 0207 	rsb	r2, r3, #7
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	6959      	ldr	r1, [r3, #20]
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a3a      	ldr	r2, [pc, #232]	@ (8005800 <xTaskPriorityInherit+0x138>)
 8005716:	4413      	add	r3, r2
 8005718:	4299      	cmp	r1, r3
 800571a:	d159      	bne.n	80057d0 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3304      	adds	r3, #4
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe f8ad 	bl	8003880 <uxListRemove>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d10a      	bne.n	8005742 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005730:	2201      	movs	r2, #1
 8005732:	fa02 f303 	lsl.w	r3, r2, r3
 8005736:	43da      	mvns	r2, r3
 8005738:	4b32      	ldr	r3, [pc, #200]	@ (8005804 <xTaskPriorityInherit+0x13c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4013      	ands	r3, r2
 800573e:	4a31      	ldr	r2, [pc, #196]	@ (8005804 <xTaskPriorityInherit+0x13c>)
 8005740:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005742:	4b2e      	ldr	r3, [pc, #184]	@ (80057fc <xTaskPriorityInherit+0x134>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	2201      	movs	r2, #1
 8005752:	409a      	lsls	r2, r3
 8005754:	4b2b      	ldr	r3, [pc, #172]	@ (8005804 <xTaskPriorityInherit+0x13c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4313      	orrs	r3, r2
 800575a:	4a2a      	ldr	r2, [pc, #168]	@ (8005804 <xTaskPriorityInherit+0x13c>)
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005762:	4927      	ldr	r1, [pc, #156]	@ (8005800 <xTaskPriorityInherit+0x138>)
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	3304      	adds	r3, #4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	609a      	str	r2, [r3, #8]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	60da      	str	r2, [r3, #12]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	689b      	ldr	r3, [r3, #8]
 8005786:	693a      	ldr	r2, [r7, #16]
 8005788:	3204      	adds	r2, #4
 800578a:	605a      	str	r2, [r3, #4]
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	1d1a      	adds	r2, r3, #4
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	609a      	str	r2, [r3, #8]
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4a17      	ldr	r2, [pc, #92]	@ (8005800 <xTaskPriorityInherit+0x138>)
 80057a2:	441a      	add	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	615a      	str	r2, [r3, #20]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057ac:	4914      	ldr	r1, [pc, #80]	@ (8005800 <xTaskPriorityInherit+0x138>)
 80057ae:	4613      	mov	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	4413      	add	r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057be:	1c59      	adds	r1, r3, #1
 80057c0:	480f      	ldr	r0, [pc, #60]	@ (8005800 <xTaskPriorityInherit+0x138>)
 80057c2:	4613      	mov	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4413      	add	r3, r2
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4403      	add	r3, r0
 80057cc:	6019      	str	r1, [r3, #0]
 80057ce:	e004      	b.n	80057da <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80057d0:	4b0a      	ldr	r3, [pc, #40]	@ (80057fc <xTaskPriorityInherit+0x134>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e008      	b.n	80057f2 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057e4:	4b05      	ldr	r3, [pc, #20]	@ (80057fc <xTaskPriorityInherit+0x134>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d201      	bcs.n	80057f2 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80057f2:	697b      	ldr	r3, [r7, #20]
    }
 80057f4:	4618      	mov	r0, r3
 80057f6:	3718      	adds	r7, #24
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000e0c 	.word	0x20000e0c
 8005800:	20000e10 	.word	0x20000e10
 8005804:	20000f14 	.word	0x20000f14

08005808 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005808:	b580      	push	{r7, lr}
 800580a:	b086      	sub	sp, #24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 8082 	beq.w	8005924 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005820:	4b43      	ldr	r3, [pc, #268]	@ (8005930 <xTaskPriorityDisinherit+0x128>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	693a      	ldr	r2, [r7, #16]
 8005826:	429a      	cmp	r2, r3
 8005828:	d004      	beq.n	8005834 <xTaskPriorityDisinherit+0x2c>
 800582a:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800582e:	4841      	ldr	r0, [pc, #260]	@ (8005934 <xTaskPriorityDisinherit+0x12c>)
 8005830:	f7fc f8b2 	bl	8001998 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005838:	2b00      	cmp	r3, #0
 800583a:	d104      	bne.n	8005846 <xTaskPriorityDisinherit+0x3e>
 800583c:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8005840:	483c      	ldr	r0, [pc, #240]	@ (8005934 <xTaskPriorityDisinherit+0x12c>)
 8005842:	f7fc f8a9 	bl	8001998 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800584a:	1e5a      	subs	r2, r3, #1
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005858:	429a      	cmp	r2, r3
 800585a:	d063      	beq.n	8005924 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005860:	2b00      	cmp	r3, #0
 8005862:	d15f      	bne.n	8005924 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	3304      	adds	r3, #4
 8005868:	4618      	mov	r0, r3
 800586a:	f7fe f809 	bl	8003880 <uxListRemove>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d10a      	bne.n	800588a <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005878:	2201      	movs	r2, #1
 800587a:	fa02 f303 	lsl.w	r3, r2, r3
 800587e:	43da      	mvns	r2, r3
 8005880:	4b2d      	ldr	r3, [pc, #180]	@ (8005938 <xTaskPriorityDisinherit+0x130>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4013      	ands	r3, r2
 8005886:	4a2c      	ldr	r2, [pc, #176]	@ (8005938 <xTaskPriorityDisinherit+0x130>)
 8005888:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005896:	f1c3 0207 	rsb	r2, r3, #7
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a2:	2201      	movs	r2, #1
 80058a4:	409a      	lsls	r2, r3
 80058a6:	4b24      	ldr	r3, [pc, #144]	@ (8005938 <xTaskPriorityDisinherit+0x130>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	4a22      	ldr	r2, [pc, #136]	@ (8005938 <xTaskPriorityDisinherit+0x130>)
 80058ae:	6013      	str	r3, [r2, #0]
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b4:	4921      	ldr	r1, [pc, #132]	@ (800593c <xTaskPriorityDisinherit+0x134>)
 80058b6:	4613      	mov	r3, r2
 80058b8:	009b      	lsls	r3, r3, #2
 80058ba:	4413      	add	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	440b      	add	r3, r1
 80058c0:	3304      	adds	r3, #4
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	609a      	str	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	689a      	ldr	r2, [r3, #8]
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	60da      	str	r2, [r3, #12]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	3204      	adds	r2, #4
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	1d1a      	adds	r2, r3, #4
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	609a      	str	r2, [r3, #8]
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ea:	4613      	mov	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4413      	add	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4a12      	ldr	r2, [pc, #72]	@ (800593c <xTaskPriorityDisinherit+0x134>)
 80058f4:	441a      	add	r2, r3
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	615a      	str	r2, [r3, #20]
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058fe:	490f      	ldr	r1, [pc, #60]	@ (800593c <xTaskPriorityDisinherit+0x134>)
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	440b      	add	r3, r1
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005910:	1c59      	adds	r1, r3, #1
 8005912:	480a      	ldr	r0, [pc, #40]	@ (800593c <xTaskPriorityDisinherit+0x134>)
 8005914:	4613      	mov	r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	4413      	add	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4403      	add	r3, r0
 800591e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005920:	2301      	movs	r3, #1
 8005922:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8005924:	697b      	ldr	r3, [r7, #20]
    }
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000e0c 	.word	0x20000e0c
 8005934:	08024a90 	.word	0x08024a90
 8005938:	20000f14 	.word	0x20000f14
 800593c:	20000e10 	.word	0x20000e10

08005940 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800594e:	2301      	movs	r3, #1
 8005950:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 8096 	beq.w	8005a86 <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8005962:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8005966:	484a      	ldr	r0, [pc, #296]	@ (8005a90 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005968:	f7fc f816 	bl	8001998 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005970:	683a      	ldr	r2, [r7, #0]
 8005972:	429a      	cmp	r2, r3
 8005974:	d902      	bls.n	800597c <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	e002      	b.n	8005982 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005980:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	429a      	cmp	r2, r3
 800598a:	d07c      	beq.n	8005a86 <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	429a      	cmp	r2, r3
 8005994:	d177      	bne.n	8005a86 <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8005996:	4b3f      	ldr	r3, [pc, #252]	@ (8005a94 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	429a      	cmp	r2, r3
 800599e:	d104      	bne.n	80059aa <vTaskPriorityDisinheritAfterTimeout+0x6a>
 80059a0:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 80059a4:	483a      	ldr	r0, [pc, #232]	@ (8005a90 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80059a6:	f7fb fff7 	bl	8001998 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	db04      	blt.n	80059c8 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f1c3 0207 	rsb	r2, r3, #7
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	6959      	ldr	r1, [r3, #20]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4613      	mov	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	4413      	add	r3, r2
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4a30      	ldr	r2, [pc, #192]	@ (8005a98 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80059d8:	4413      	add	r3, r2
 80059da:	4299      	cmp	r1, r3
 80059dc:	d153      	bne.n	8005a86 <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fd ff4c 	bl	8003880 <uxListRemove>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d10a      	bne.n	8005a04 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059f2:	2201      	movs	r2, #1
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43da      	mvns	r2, r3
 80059fa:	4b28      	ldr	r3, [pc, #160]	@ (8005a9c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4013      	ands	r3, r2
 8005a00:	4a26      	ldr	r2, [pc, #152]	@ (8005a9c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a02:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a08:	2201      	movs	r2, #1
 8005a0a:	409a      	lsls	r2, r3
 8005a0c:	4b23      	ldr	r3, [pc, #140]	@ (8005a9c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	4a22      	ldr	r2, [pc, #136]	@ (8005a9c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8005a14:	6013      	str	r3, [r2, #0]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a1a:	491f      	ldr	r1, [pc, #124]	@ (8005a98 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	440b      	add	r3, r1
 8005a26:	3304      	adds	r3, #4
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	609a      	str	r2, [r3, #8]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	60da      	str	r2, [r3, #12]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	3204      	adds	r2, #4
 8005a42:	605a      	str	r2, [r3, #4]
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	1d1a      	adds	r2, r3, #4
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	609a      	str	r2, [r3, #8]
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a50:	4613      	mov	r3, r2
 8005a52:	009b      	lsls	r3, r3, #2
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4a0f      	ldr	r2, [pc, #60]	@ (8005a98 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a5a:	441a      	add	r2, r3
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	615a      	str	r2, [r3, #20]
 8005a60:	69bb      	ldr	r3, [r7, #24]
 8005a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a64:	490c      	ldr	r1, [pc, #48]	@ (8005a98 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005a76:	1c59      	adds	r1, r3, #1
 8005a78:	4807      	ldr	r0, [pc, #28]	@ (8005a98 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	009b      	lsls	r3, r3, #2
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4403      	add	r3, r0
 8005a84:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8005a86:	bf00      	nop
 8005a88:	3720      	adds	r7, #32
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	08024a90 	.word	0x08024a90
 8005a94:	20000e0c 	.word	0x20000e0c
 8005a98:	20000e10 	.word	0x20000e10
 8005a9c:	20000f14 	.word	0x20000f14

08005aa0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8005aa6:	4b09      	ldr	r3, [pc, #36]	@ (8005acc <uxTaskResetEventItemValue+0x2c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	699b      	ldr	r3, [r3, #24]
 8005aac:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8005aae:	4b07      	ldr	r3, [pc, #28]	@ (8005acc <uxTaskResetEventItemValue+0x2c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab4:	4b05      	ldr	r3, [pc, #20]	@ (8005acc <uxTaskResetEventItemValue+0x2c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f1c2 0207 	rsb	r2, r2, #7
 8005abc:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8005abe:	687b      	ldr	r3, [r7, #4]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr
 8005acc:	20000e0c 	.word	0x20000e0c

08005ad0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8005ad0:	b480      	push	{r7}
 8005ad2:	b083      	sub	sp, #12
 8005ad4:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8005ad6:	4b09      	ldr	r3, [pc, #36]	@ (8005afc <pvTaskIncrementMutexHeldCount+0x2c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d004      	beq.n	8005aec <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8005aec:	687b      	ldr	r3, [r7, #4]
    }
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	20000e0c 	.word	0x20000e0c

08005b00 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d004      	beq.n	8005b20 <ulTaskGenericNotifyTake+0x20>
 8005b16:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8005b1a:	4833      	ldr	r0, [pc, #204]	@ (8005be8 <ulTaskGenericNotifyTake+0xe8>)
 8005b1c:	f7fb ff3c 	bl	8001998 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005b20:	f7fe ff96 	bl	8004a50 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8005b24:	f000 fe14 	bl	8006750 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8005b28:	4b30      	ldr	r3, [pc, #192]	@ (8005bec <ulTaskGenericNotifyTake+0xec>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	3318      	adds	r3, #24
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10b      	bne.n	8005b52 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8005bec <ulTaskGenericNotifyTake+0xec>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	3368      	adds	r3, #104	@ 0x68
 8005b44:	2201      	movs	r2, #1
 8005b46:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d001      	beq.n	8005b52 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005b52:	f000 fe29 	bl	80067a8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d103      	bne.n	8005b64 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fc3a 	bl	80063d8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005b64:	f7fe ff82 	bl	8004a6c <xTaskResumeAll>
 8005b68:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d10a      	bne.n	8005b86 <ulTaskGenericNotifyTake+0x86>
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d107      	bne.n	8005b86 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8005b76:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf0 <ulTaskGenericNotifyTake+0xf0>)
 8005b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b7c:	601a      	str	r2, [r3, #0]
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005b86:	f000 fde3 	bl	8006750 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005b8a:	4b18      	ldr	r3, [pc, #96]	@ (8005bec <ulTaskGenericNotifyTake+0xec>)
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3318      	adds	r3, #24
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d014      	beq.n	8005bca <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d008      	beq.n	8005bb8 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8005ba6:	4b11      	ldr	r3, [pc, #68]	@ (8005bec <ulTaskGenericNotifyTake+0xec>)
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	3318      	adds	r3, #24
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	4413      	add	r3, r2
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	e008      	b.n	8005bca <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8005bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8005bec <ulTaskGenericNotifyTake+0xec>)
 8005bba:	6819      	ldr	r1, [r3, #0]
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	1e5a      	subs	r2, r3, #1
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3318      	adds	r3, #24
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005bca:	4b08      	ldr	r3, [pc, #32]	@ (8005bec <ulTaskGenericNotifyTake+0xec>)
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	3368      	adds	r3, #104	@ 0x68
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005bd8:	f000 fde6 	bl	80067a8 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8005bdc:	697b      	ldr	r3, [r7, #20]
    }
 8005bde:	4618      	mov	r0, r3
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	08024a90 	.word	0x08024a90
 8005bec:	20000e0c 	.word	0x20000e0c
 8005bf0:	e000ed04 	.word	0xe000ed04

08005bf4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b088      	sub	sp, #32
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	60f8      	str	r0, [r7, #12]
 8005bfc:	60b9      	str	r1, [r7, #8]
 8005bfe:	607a      	str	r2, [r7, #4]
 8005c00:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8005c02:	2300      	movs	r3, #0
 8005c04:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d004      	beq.n	8005c16 <xTaskGenericNotifyWait+0x22>
 8005c0c:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8005c10:	483e      	ldr	r0, [pc, #248]	@ (8005d0c <xTaskGenericNotifyWait+0x118>)
 8005c12:	f7fb fec1 	bl	8001998 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005c16:	f7fe ff1b 	bl	8004a50 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8005c1a:	f000 fd99 	bl	8006750 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8005d10 <xTaskGenericNotifyWait+0x11c>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4413      	add	r3, r2
 8005c26:	3368      	adds	r3, #104	@ 0x68
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d01a      	beq.n	8005c66 <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005c30:	4b37      	ldr	r3, [pc, #220]	@ (8005d10 <xTaskGenericNotifyWait+0x11c>)
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3318      	adds	r3, #24
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	4413      	add	r3, r2
 8005c3c:	6859      	ldr	r1, [r3, #4]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	43db      	mvns	r3, r3
 8005c42:	4019      	ands	r1, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3318      	adds	r3, #24
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	4413      	add	r3, r2
 8005c4c:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005c4e:	4b30      	ldr	r3, [pc, #192]	@ (8005d10 <xTaskGenericNotifyWait+0x11c>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	4413      	add	r3, r2
 8005c56:	3368      	adds	r3, #104	@ 0x68
 8005c58:	2201      	movs	r2, #1
 8005c5a:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8005c62:	2301      	movs	r3, #1
 8005c64:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8005c66:	f000 fd9f 	bl	80067a8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d103      	bne.n	8005c78 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c70:	2101      	movs	r1, #1
 8005c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c74:	f000 fbb0 	bl	80063d8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005c78:	f7fe fef8 	bl	8004a6c <xTaskResumeAll>
 8005c7c:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d10a      	bne.n	8005c9a <xTaskGenericNotifyWait+0xa6>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d107      	bne.n	8005c9a <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8005c8a:	4b22      	ldr	r3, [pc, #136]	@ (8005d14 <xTaskGenericNotifyWait+0x120>)
 8005c8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	f3bf 8f4f 	dsb	sy
 8005c96:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005c9a:	f000 fd59 	bl	8006750 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d008      	beq.n	8005cb6 <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8005d10 <xTaskGenericNotifyWait+0x11c>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3318      	adds	r3, #24
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005cb6:	4b16      	ldr	r3, [pc, #88]	@ (8005d10 <xTaskGenericNotifyWait+0x11c>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	3368      	adds	r3, #104	@ 0x68
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d002      	beq.n	8005cce <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	61fb      	str	r3, [r7, #28]
 8005ccc:	e010      	b.n	8005cf0 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8005cce:	4b10      	ldr	r3, [pc, #64]	@ (8005d10 <xTaskGenericNotifyWait+0x11c>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3318      	adds	r3, #24
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	4413      	add	r3, r2
 8005cda:	6859      	ldr	r1, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	4019      	ands	r1, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3318      	adds	r3, #24
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	4413      	add	r3, r2
 8005cea:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8005cec:	2301      	movs	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8005cf0:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <xTaskGenericNotifyWait+0x11c>)
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3368      	adds	r3, #104	@ 0x68
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005cfe:	f000 fd53 	bl	80067a8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8005d02:	69fb      	ldr	r3, [r7, #28]
    }
 8005d04:	4618      	mov	r0, r3
 8005d06:	3720      	adds	r7, #32
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	08024a90 	.word	0x08024a90
 8005d10:	20000e0c 	.word	0x20000e0c
 8005d14:	e000ed04 	.word	0xe000ed04

08005d18 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08a      	sub	sp, #40	@ 0x28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005d26:	2301      	movs	r3, #1
 8005d28:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <xTaskGenericNotify+0x22>
 8005d30:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8005d34:	487b      	ldr	r0, [pc, #492]	@ (8005f24 <xTaskGenericNotify+0x20c>)
 8005d36:	f7fb fe2f 	bl	8001998 <vAssertCalled>
        configASSERT( xTaskToNotify );
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d104      	bne.n	8005d4a <xTaskGenericNotify+0x32>
 8005d40:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8005d44:	4877      	ldr	r0, [pc, #476]	@ (8005f24 <xTaskGenericNotify+0x20c>)
 8005d46:	f7fb fe27 	bl	8001998 <vAssertCalled>
        pxTCB = xTaskToNotify;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8005d4e:	f000 fcff 	bl	8006750 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d007      	beq.n	8005d68 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005d58:	6a3a      	ldr	r2, [r7, #32]
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d66:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005d68:	6a3a      	ldr	r2, [r7, #32]
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	3368      	adds	r3, #104	@ 0x68
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	4413      	add	r3, r2
 8005d7a:	3368      	adds	r3, #104	@ 0x68
 8005d7c:	2202      	movs	r2, #2
 8005d7e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005d80:	78fb      	ldrb	r3, [r7, #3]
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d83f      	bhi.n	8005e06 <xTaskGenericNotify+0xee>
 8005d86:	a201      	add	r2, pc, #4	@ (adr r2, 8005d8c <xTaskGenericNotify+0x74>)
 8005d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8c:	08005e1b 	.word	0x08005e1b
 8005d90:	08005da1 	.word	0x08005da1
 8005d94:	08005dbf 	.word	0x08005dbf
 8005d98:	08005ddb 	.word	0x08005ddb
 8005d9c:	08005deb 	.word	0x08005deb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005da0:	6a3a      	ldr	r2, [r7, #32]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3318      	adds	r3, #24
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	431a      	orrs	r2, r3
 8005db0:	6a39      	ldr	r1, [r7, #32]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3318      	adds	r3, #24
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	605a      	str	r2, [r3, #4]
                    break;
 8005dbc:	e030      	b.n	8005e20 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005dbe:	6a3a      	ldr	r2, [r7, #32]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	3318      	adds	r3, #24
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	6a39      	ldr	r1, [r7, #32]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	3318      	adds	r3, #24
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	605a      	str	r2, [r3, #4]
                    break;
 8005dd8:	e022      	b.n	8005e20 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	3318      	adds	r3, #24
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	4413      	add	r3, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	605a      	str	r2, [r3, #4]
                    break;
 8005de8:	e01a      	b.n	8005e20 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d007      	beq.n	8005e00 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005df0:	6a3a      	ldr	r2, [r7, #32]
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	3318      	adds	r3, #24
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005dfe:	e00f      	b.n	8005e20 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8005e00:	2300      	movs	r3, #0
 8005e02:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8005e04:	e00c      	b.n	8005e20 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005e06:	4b48      	ldr	r3, [pc, #288]	@ (8005f28 <xTaskGenericNotify+0x210>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d007      	beq.n	8005e1e <xTaskGenericNotify+0x106>
 8005e0e:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8005e12:	4844      	ldr	r0, [pc, #272]	@ (8005f24 <xTaskGenericNotify+0x20c>)
 8005e14:	f7fb fdc0 	bl	8001998 <vAssertCalled>

                    break;
 8005e18:	e001      	b.n	8005e1e <xTaskGenericNotify+0x106>
                    break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <xTaskGenericNotify+0x108>
                    break;
 8005e1e:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e20:	7ffb      	ldrb	r3, [r7, #31]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d177      	bne.n	8005f16 <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	6a3b      	ldr	r3, [r7, #32]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	6a3a      	ldr	r2, [r7, #32]
 8005e32:	68d2      	ldr	r2, [r2, #12]
 8005e34:	609a      	str	r2, [r3, #8]
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	6a3a      	ldr	r2, [r7, #32]
 8005e3c:	6892      	ldr	r2, [r2, #8]
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	685a      	ldr	r2, [r3, #4]
 8005e44:	6a3b      	ldr	r3, [r7, #32]
 8005e46:	3304      	adds	r3, #4
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d103      	bne.n	8005e54 <xTaskGenericNotify+0x13c>
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	68da      	ldr	r2, [r3, #12]
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	605a      	str	r2, [r3, #4]
 8005e54:	6a3b      	ldr	r3, [r7, #32]
 8005e56:	2200      	movs	r2, #0
 8005e58:	615a      	str	r2, [r3, #20]
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	1e5a      	subs	r2, r3, #1
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e68:	2201      	movs	r2, #1
 8005e6a:	409a      	lsls	r2, r3
 8005e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005f2c <xTaskGenericNotify+0x214>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	4a2e      	ldr	r2, [pc, #184]	@ (8005f2c <xTaskGenericNotify+0x214>)
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	6a3b      	ldr	r3, [r7, #32]
 8005e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7a:	492d      	ldr	r1, [pc, #180]	@ (8005f30 <xTaskGenericNotify+0x218>)
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	3304      	adds	r3, #4
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	609a      	str	r2, [r3, #8]
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	689a      	ldr	r2, [r3, #8]
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	60da      	str	r2, [r3, #12]
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	6a3a      	ldr	r2, [r7, #32]
 8005ea0:	3204      	adds	r2, #4
 8005ea2:	605a      	str	r2, [r3, #4]
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	1d1a      	adds	r2, r3, #4
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	609a      	str	r2, [r3, #8]
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f30 <xTaskGenericNotify+0x218>)
 8005eba:	441a      	add	r2, r3
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	615a      	str	r2, [r3, #20]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec4:	491a      	ldr	r1, [pc, #104]	@ (8005f30 <xTaskGenericNotify+0x218>)
 8005ec6:	4613      	mov	r3, r2
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	4413      	add	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	440b      	add	r3, r1
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a3a      	ldr	r2, [r7, #32]
 8005ed4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005ed6:	1c59      	adds	r1, r3, #1
 8005ed8:	4815      	ldr	r0, [pc, #84]	@ (8005f30 <xTaskGenericNotify+0x218>)
 8005eda:	4613      	mov	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4413      	add	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4403      	add	r3, r0
 8005ee4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d004      	beq.n	8005ef8 <xTaskGenericNotify+0x1e0>
 8005eee:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8005ef2:	480c      	ldr	r0, [pc, #48]	@ (8005f24 <xTaskGenericNotify+0x20c>)
 8005ef4:	f7fb fd50 	bl	8001998 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8005ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f34 <xTaskGenericNotify+0x21c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d207      	bcs.n	8005f16 <xTaskGenericNotify+0x1fe>
 8005f06:	4b0c      	ldr	r3, [pc, #48]	@ (8005f38 <xTaskGenericNotify+0x220>)
 8005f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f0c:	601a      	str	r2, [r3, #0]
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f16:	f000 fc47 	bl	80067a8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3728      	adds	r7, #40	@ 0x28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	08024a90 	.word	0x08024a90
 8005f28:	20000f10 	.word	0x20000f10
 8005f2c:	20000f14 	.word	0x20000f14
 8005f30:	20000e10 	.word	0x20000e10
 8005f34:	20000e0c 	.word	0x20000e0c
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b08e      	sub	sp, #56	@ 0x38
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d104      	bne.n	8005f5e <xTaskGenericNotifyFromISR+0x22>
 8005f54:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005f58:	4899      	ldr	r0, [pc, #612]	@ (80061c0 <xTaskGenericNotifyFromISR+0x284>)
 8005f5a:	f7fb fd1d 	bl	8001998 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d004      	beq.n	8005f6e <xTaskGenericNotifyFromISR+0x32>
 8005f64:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005f68:	4895      	ldr	r0, [pc, #596]	@ (80061c0 <xTaskGenericNotifyFromISR+0x284>)
 8005f6a:	f7fb fd15 	bl	8001998 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f6e:	f000 fcbd 	bl	80068ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005f76:	f3ef 8211 	mrs	r2, BASEPRI
 8005f7a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005f7e:	b672      	cpsid	i
 8005f80:	f383 8811 	msr	BASEPRI, r3
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	f3bf 8f4f 	dsb	sy
 8005f8c:	b662      	cpsie	i
 8005f8e:	61ba      	str	r2, [r7, #24]
 8005f90:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005f92:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8005f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005f9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	3318      	adds	r3, #24
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005faa:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005fac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3368      	adds	r3, #104	@ 0x68
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005fba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	3368      	adds	r3, #104	@ 0x68
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	2b04      	cmp	r3, #4
 8005fca:	d841      	bhi.n	8006050 <xTaskGenericNotifyFromISR+0x114>
 8005fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd4 <xTaskGenericNotifyFromISR+0x98>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08006065 	.word	0x08006065
 8005fd8:	08005fe9 	.word	0x08005fe9
 8005fdc:	08006007 	.word	0x08006007
 8005fe0:	08006023 	.word	0x08006023
 8005fe4:	08006033 	.word	0x08006033
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	3318      	adds	r3, #24
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4413      	add	r3, r2
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3318      	adds	r3, #24
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	605a      	str	r2, [r3, #4]
                    break;
 8006004:	e031      	b.n	800606a <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	3318      	adds	r3, #24
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	4413      	add	r3, r2
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	3318      	adds	r3, #24
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	605a      	str	r2, [r3, #4]
                    break;
 8006020:	e023      	b.n	800606a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	3318      	adds	r3, #24
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	605a      	str	r2, [r3, #4]
                    break;
 8006030:	e01b      	b.n	800606a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006032:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006036:	2b02      	cmp	r3, #2
 8006038:	d007      	beq.n	800604a <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800603a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	3318      	adds	r3, #24
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4413      	add	r3, r2
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006048:	e00f      	b.n	800606a <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 800604a:	2300      	movs	r3, #0
 800604c:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800604e:	e00c      	b.n	800606a <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006050:	4b5c      	ldr	r3, [pc, #368]	@ (80061c4 <xTaskGenericNotifyFromISR+0x288>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d007      	beq.n	8006068 <xTaskGenericNotifyFromISR+0x12c>
 8006058:	f641 7169 	movw	r1, #8041	@ 0x1f69
 800605c:	4858      	ldr	r0, [pc, #352]	@ (80061c0 <xTaskGenericNotifyFromISR+0x284>)
 800605e:	f7fb fc9b 	bl	8001998 <vAssertCalled>
                    break;
 8006062:	e001      	b.n	8006068 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8006064:	bf00      	nop
 8006066:	e000      	b.n	800606a <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8006068:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800606a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800606e:	2b01      	cmp	r3, #1
 8006070:	f040 809a 	bne.w	80061a8 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <xTaskGenericNotifyFromISR+0x14a>
 800607c:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8006080:	484f      	ldr	r0, [pc, #316]	@ (80061c0 <xTaskGenericNotifyFromISR+0x284>)
 8006082:	f7fb fc89 	bl	8001998 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006086:	4b50      	ldr	r3, [pc, #320]	@ (80061c8 <xTaskGenericNotifyFromISR+0x28c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d160      	bne.n	8006150 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800608e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	623b      	str	r3, [r7, #32]
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609a:	68d2      	ldr	r2, [r2, #12]
 800609c:	609a      	str	r2, [r3, #8]
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80060a4:	6892      	ldr	r2, [r2, #8]
 80060a6:	605a      	str	r2, [r3, #4]
 80060a8:	6a3b      	ldr	r3, [r7, #32]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ae:	3304      	adds	r3, #4
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d103      	bne.n	80060bc <xTaskGenericNotifyFromISR+0x180>
 80060b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b6:	68da      	ldr	r2, [r3, #12]
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	605a      	str	r2, [r3, #4]
 80060bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060be:	2200      	movs	r2, #0
 80060c0:	615a      	str	r2, [r3, #20]
 80060c2:	6a3b      	ldr	r3, [r7, #32]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	1e5a      	subs	r2, r3, #1
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80060cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d0:	2201      	movs	r2, #1
 80060d2:	409a      	lsls	r2, r3
 80060d4:	4b3d      	ldr	r3, [pc, #244]	@ (80061cc <xTaskGenericNotifyFromISR+0x290>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4313      	orrs	r3, r2
 80060da:	4a3c      	ldr	r2, [pc, #240]	@ (80061cc <xTaskGenericNotifyFromISR+0x290>)
 80060dc:	6013      	str	r3, [r2, #0]
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e2:	493b      	ldr	r1, [pc, #236]	@ (80061d0 <xTaskGenericNotifyFromISR+0x294>)
 80060e4:	4613      	mov	r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	4413      	add	r3, r2
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	440b      	add	r3, r1
 80060ee:	3304      	adds	r3, #4
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	61fb      	str	r3, [r7, #28]
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	609a      	str	r2, [r3, #8]
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	689a      	ldr	r2, [r3, #8]
 80060fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006100:	60da      	str	r2, [r3, #12]
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006108:	3204      	adds	r2, #4
 800610a:	605a      	str	r2, [r3, #4]
 800610c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610e:	1d1a      	adds	r2, r3, #4
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	4a2b      	ldr	r2, [pc, #172]	@ (80061d0 <xTaskGenericNotifyFromISR+0x294>)
 8006122:	441a      	add	r2, r3
 8006124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006126:	615a      	str	r2, [r3, #20]
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800612c:	4928      	ldr	r1, [pc, #160]	@ (80061d0 <xTaskGenericNotifyFromISR+0x294>)
 800612e:	4613      	mov	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800613c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	4823      	ldr	r0, [pc, #140]	@ (80061d0 <xTaskGenericNotifyFromISR+0x294>)
 8006142:	4613      	mov	r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4403      	add	r3, r0
 800614c:	6019      	str	r1, [r3, #0]
 800614e:	e01b      	b.n	8006188 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006150:	4b20      	ldr	r3, [pc, #128]	@ (80061d4 <xTaskGenericNotifyFromISR+0x298>)
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	627b      	str	r3, [r7, #36]	@ 0x24
 8006156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006158:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800615a:	61da      	str	r2, [r3, #28]
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	621a      	str	r2, [r3, #32]
 8006164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616a:	3218      	adds	r2, #24
 800616c:	605a      	str	r2, [r3, #4]
 800616e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006170:	f103 0218 	add.w	r2, r3, #24
 8006174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006176:	609a      	str	r2, [r3, #8]
 8006178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800617a:	4a16      	ldr	r2, [pc, #88]	@ (80061d4 <xTaskGenericNotifyFromISR+0x298>)
 800617c:	629a      	str	r2, [r3, #40]	@ 0x28
 800617e:	4b15      	ldr	r3, [pc, #84]	@ (80061d4 <xTaskGenericNotifyFromISR+0x298>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3301      	adds	r3, #1
 8006184:	4a13      	ldr	r2, [pc, #76]	@ (80061d4 <xTaskGenericNotifyFromISR+0x298>)
 8006186:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800618a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618c:	4b12      	ldr	r3, [pc, #72]	@ (80061d8 <xTaskGenericNotifyFromISR+0x29c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006192:	429a      	cmp	r2, r3
 8006194:	d908      	bls.n	80061a8 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800619c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800619e:	2201      	movs	r2, #1
 80061a0:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80061a2:	4b0e      	ldr	r3, [pc, #56]	@ (80061dc <xTaskGenericNotifyFromISR+0x2a0>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061aa:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80061b2:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80061b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80061b6:	4618      	mov	r0, r3
 80061b8:	3738      	adds	r7, #56	@ 0x38
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	08024a90 	.word	0x08024a90
 80061c4:	20000f10 	.word	0x20000f10
 80061c8:	20000f34 	.word	0x20000f34
 80061cc:	20000f14 	.word	0x20000f14
 80061d0:	20000e10 	.word	0x20000e10
 80061d4:	20000ecc 	.word	0x20000ecc
 80061d8:	20000e0c 	.word	0x20000e0c
 80061dc:	20000f20 	.word	0x20000f20

080061e0 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08e      	sub	sp, #56	@ 0x38
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <vTaskGenericNotifyGiveFromISR+0x1c>
 80061f2:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80061f6:	4871      	ldr	r0, [pc, #452]	@ (80063bc <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80061f8:	f7fb fbce 	bl	8001998 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80061fc:	68bb      	ldr	r3, [r7, #8]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <vTaskGenericNotifyGiveFromISR+0x2c>
 8006202:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 8006206:	486d      	ldr	r0, [pc, #436]	@ (80063bc <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006208:	f7fb fbc6 	bl	8001998 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800620c:	f000 fb6e 	bl	80068ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8006214:	f3ef 8211 	mrs	r2, BASEPRI
 8006218:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800621c:	b672      	cpsid	i
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	b662      	cpsie	i
 800622c:	61fa      	str	r2, [r7, #28]
 800622e:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8006230:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8006232:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006234:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	4413      	add	r3, r2
 800623a:	3368      	adds	r3, #104	@ 0x68
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006242:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4413      	add	r3, r2
 8006248:	3368      	adds	r3, #104	@ 0x68
 800624a:	2202      	movs	r2, #2
 800624c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800624e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	3318      	adds	r3, #24
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	4413      	add	r3, r2
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	3318      	adds	r3, #24
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006268:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800626c:	2b01      	cmp	r3, #1
 800626e:	f040 809a 	bne.w	80063a6 <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006276:	2b00      	cmp	r3, #0
 8006278:	d004      	beq.n	8006284 <vTaskGenericNotifyGiveFromISR+0xa4>
 800627a:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 800627e:	484f      	ldr	r0, [pc, #316]	@ (80063bc <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8006280:	f7fb fb8a 	bl	8001998 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006284:	4b4e      	ldr	r3, [pc, #312]	@ (80063c0 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d160      	bne.n	800634e <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628e:	695b      	ldr	r3, [r3, #20]
 8006290:	627b      	str	r3, [r7, #36]	@ 0x24
 8006292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006298:	68d2      	ldr	r2, [r2, #12]
 800629a:	609a      	str	r2, [r3, #8]
 800629c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800629e:	68db      	ldr	r3, [r3, #12]
 80062a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062a2:	6892      	ldr	r2, [r2, #8]
 80062a4:	605a      	str	r2, [r3, #4]
 80062a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ac:	3304      	adds	r3, #4
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d103      	bne.n	80062ba <vTaskGenericNotifyGiveFromISR+0xda>
 80062b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b8:	605a      	str	r2, [r3, #4]
 80062ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062bc:	2200      	movs	r2, #0
 80062be:	615a      	str	r2, [r3, #20]
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	1e5a      	subs	r2, r3, #1
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80062ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ce:	2201      	movs	r2, #1
 80062d0:	409a      	lsls	r2, r3
 80062d2:	4b3c      	ldr	r3, [pc, #240]	@ (80063c4 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	4a3a      	ldr	r2, [pc, #232]	@ (80063c4 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e0:	4939      	ldr	r1, [pc, #228]	@ (80063c8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	3304      	adds	r3, #4
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	623b      	str	r3, [r7, #32]
 80062f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f4:	6a3a      	ldr	r2, [r7, #32]
 80062f6:	609a      	str	r2, [r3, #8]
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fe:	60da      	str	r2, [r3, #12]
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006306:	3204      	adds	r2, #4
 8006308:	605a      	str	r2, [r3, #4]
 800630a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800630c:	1d1a      	adds	r2, r3, #4
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	609a      	str	r2, [r3, #8]
 8006312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006314:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006316:	4613      	mov	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4a2a      	ldr	r2, [pc, #168]	@ (80063c8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006320:	441a      	add	r2, r3
 8006322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006324:	615a      	str	r2, [r3, #20]
 8006326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800632a:	4927      	ldr	r1, [pc, #156]	@ (80063c8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 800632c:	4613      	mov	r3, r2
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	4413      	add	r3, r2
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	440b      	add	r3, r1
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800633a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800633c:	1c59      	adds	r1, r3, #1
 800633e:	4822      	ldr	r0, [pc, #136]	@ (80063c8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8006340:	4613      	mov	r3, r2
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4413      	add	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4403      	add	r3, r0
 800634a:	6019      	str	r1, [r3, #0]
 800634c:	e01b      	b.n	8006386 <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800634e:	4b1f      	ldr	r3, [pc, #124]	@ (80063cc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006356:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006358:	61da      	str	r2, [r3, #28]
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006360:	621a      	str	r2, [r3, #32]
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006368:	3218      	adds	r2, #24
 800636a:	605a      	str	r2, [r3, #4]
 800636c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800636e:	f103 0218 	add.w	r2, r3, #24
 8006372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006374:	609a      	str	r2, [r3, #8]
 8006376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006378:	4a14      	ldr	r2, [pc, #80]	@ (80063cc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 800637a:	629a      	str	r2, [r3, #40]	@ 0x28
 800637c:	4b13      	ldr	r3, [pc, #76]	@ (80063cc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3301      	adds	r3, #1
 8006382:	4a12      	ldr	r2, [pc, #72]	@ (80063cc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8006384:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800638a:	4b11      	ldr	r3, [pc, #68]	@ (80063d0 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006390:	429a      	cmp	r2, r3
 8006392:	d908      	bls.n	80063a6 <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2201      	movs	r2, #1
 800639e:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 80063a2:	2201      	movs	r2, #1
 80063a4:	601a      	str	r2, [r3, #0]
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	617b      	str	r3, [r7, #20]
    __asm volatile
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f383 8811 	msr	BASEPRI, r3
}
 80063b0:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 80063b2:	bf00      	nop
 80063b4:	3738      	adds	r7, #56	@ 0x38
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	08024a90 	.word	0x08024a90
 80063c0:	20000f34 	.word	0x20000f34
 80063c4:	20000f14 	.word	0x20000f14
 80063c8:	20000e10 	.word	0x20000e10
 80063cc:	20000ecc 	.word	0x20000ecc
 80063d0:	20000e0c 	.word	0x20000e0c
 80063d4:	20000f20 	.word	0x20000f20

080063d8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b088      	sub	sp, #32
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80063e2:	4b37      	ldr	r3, [pc, #220]	@ (80064c0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80063e8:	4b36      	ldr	r3, [pc, #216]	@ (80064c4 <prvAddCurrentTaskToDelayedList+0xec>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80063ee:	4b36      	ldr	r3, [pc, #216]	@ (80064c8 <prvAddCurrentTaskToDelayedList+0xf0>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063f4:	4b35      	ldr	r3, [pc, #212]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fd fa40 	bl	8003880 <uxListRemove>
 8006400:	4603      	mov	r3, r0
 8006402:	2b00      	cmp	r3, #0
 8006404:	d10b      	bne.n	800641e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006406:	4b31      	ldr	r3, [pc, #196]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	2201      	movs	r2, #1
 800640e:	fa02 f303 	lsl.w	r3, r2, r3
 8006412:	43da      	mvns	r2, r3
 8006414:	4b2e      	ldr	r3, [pc, #184]	@ (80064d0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4013      	ands	r3, r2
 800641a:	4a2d      	ldr	r2, [pc, #180]	@ (80064d0 <prvAddCurrentTaskToDelayedList+0xf8>)
 800641c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006424:	d124      	bne.n	8006470 <prvAddCurrentTaskToDelayedList+0x98>
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d021      	beq.n	8006470 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800642c:	4b29      	ldr	r3, [pc, #164]	@ (80064d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	613b      	str	r3, [r7, #16]
 8006432:	4b26      	ldr	r3, [pc, #152]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	609a      	str	r2, [r3, #8]
 800643a:	4b24      	ldr	r3, [pc, #144]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	6892      	ldr	r2, [r2, #8]
 8006442:	60da      	str	r2, [r3, #12]
 8006444:	4b21      	ldr	r3, [pc, #132]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	3204      	adds	r2, #4
 800644e:	605a      	str	r2, [r3, #4]
 8006450:	4b1e      	ldr	r3, [pc, #120]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	1d1a      	adds	r2, r3, #4
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	609a      	str	r2, [r3, #8]
 800645a:	4b1c      	ldr	r3, [pc, #112]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a1d      	ldr	r2, [pc, #116]	@ (80064d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006460:	615a      	str	r2, [r3, #20]
 8006462:	4b1c      	ldr	r3, [pc, #112]	@ (80064d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	4a1a      	ldr	r2, [pc, #104]	@ (80064d4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800646a:	6013      	str	r3, [r2, #0]
 800646c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800646e:	e022      	b.n	80064b6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4413      	add	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006478:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	429a      	cmp	r2, r3
 8006486:	d207      	bcs.n	8006498 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006488:	4b10      	ldr	r3, [pc, #64]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3304      	adds	r3, #4
 800648e:	4619      	mov	r1, r3
 8006490:	6978      	ldr	r0, [r7, #20]
 8006492:	f7fd f9bc 	bl	800380e <vListInsert>
}
 8006496:	e00e      	b.n	80064b6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8006498:	4b0c      	ldr	r3, [pc, #48]	@ (80064cc <prvAddCurrentTaskToDelayedList+0xf4>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3304      	adds	r3, #4
 800649e:	4619      	mov	r1, r3
 80064a0:	69b8      	ldr	r0, [r7, #24]
 80064a2:	f7fd f9b4 	bl	800380e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80064a6:	4b0c      	ldr	r3, [pc, #48]	@ (80064d8 <prvAddCurrentTaskToDelayedList+0x100>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d202      	bcs.n	80064b6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80064b0:	4a09      	ldr	r2, [pc, #36]	@ (80064d8 <prvAddCurrentTaskToDelayedList+0x100>)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6013      	str	r3, [r2, #0]
}
 80064b6:	bf00      	nop
 80064b8:	3720      	adds	r7, #32
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	20000f10 	.word	0x20000f10
 80064c4:	20000ec4 	.word	0x20000ec4
 80064c8:	20000ec8 	.word	0x20000ec8
 80064cc:	20000e0c 	.word	0x20000e0c
 80064d0:	20000f14 	.word	0x20000f14
 80064d4:	20000ef8 	.word	0x20000ef8
 80064d8:	20000f2c 	.word	0x20000f2c

080064dc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3b04      	subs	r3, #4
 80064ec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80064f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3b04      	subs	r3, #4
 80064fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f023 0201 	bic.w	r2, r3, #1
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3b04      	subs	r3, #4
 800650a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800650c:	4a0c      	ldr	r2, [pc, #48]	@ (8006540 <pxPortInitialiseStack+0x64>)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3b14      	subs	r3, #20
 8006516:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	3b04      	subs	r3, #4
 8006522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f06f 0202 	mvn.w	r2, #2
 800652a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3b20      	subs	r3, #32
 8006530:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006532:	68fb      	ldr	r3, [r7, #12]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3714      	adds	r7, #20
 8006538:	46bd      	mov	sp, r7
 800653a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653e:	4770      	bx	lr
 8006540:	08006545 	.word	0x08006545

08006544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b082      	sub	sp, #8
 8006548:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800654e:	4b0f      	ldr	r3, [pc, #60]	@ (800658c <prvTaskExitError+0x48>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d003      	beq.n	8006560 <prvTaskExitError+0x1c>
 8006558:	21ee      	movs	r1, #238	@ 0xee
 800655a:	480d      	ldr	r0, [pc, #52]	@ (8006590 <prvTaskExitError+0x4c>)
 800655c:	f7fb fa1c 	bl	8001998 <vAssertCalled>
    __asm volatile
 8006560:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006564:	b672      	cpsid	i
 8006566:	f383 8811 	msr	BASEPRI, r3
 800656a:	f3bf 8f6f 	isb	sy
 800656e:	f3bf 8f4f 	dsb	sy
 8006572:	b662      	cpsie	i
 8006574:	607b      	str	r3, [r7, #4]
}
 8006576:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006578:	bf00      	nop
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d0fc      	beq.n	800657a <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	2000000c 	.word	0x2000000c
 8006590:	08024abc 	.word	0x08024abc
	...

080065a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80065a0:	4b07      	ldr	r3, [pc, #28]	@ (80065c0 <pxCurrentTCBConst2>)
 80065a2:	6819      	ldr	r1, [r3, #0]
 80065a4:	6808      	ldr	r0, [r1, #0]
 80065a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	f380 8809 	msr	PSP, r0
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f04f 0000 	mov.w	r0, #0
 80065b6:	f380 8811 	msr	BASEPRI, r0
 80065ba:	4770      	bx	lr
 80065bc:	f3af 8000 	nop.w

080065c0 <pxCurrentTCBConst2>:
 80065c0:	20000e0c 	.word	0x20000e0c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop

080065c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80065c8:	4808      	ldr	r0, [pc, #32]	@ (80065ec <prvPortStartFirstTask+0x24>)
 80065ca:	6800      	ldr	r0, [r0, #0]
 80065cc:	6800      	ldr	r0, [r0, #0]
 80065ce:	f380 8808 	msr	MSP, r0
 80065d2:	f04f 0000 	mov.w	r0, #0
 80065d6:	f380 8814 	msr	CONTROL, r0
 80065da:	b662      	cpsie	i
 80065dc:	b661      	cpsie	f
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	df00      	svc	0
 80065e8:	bf00      	nop
 80065ea:	0000      	.short	0x0000
 80065ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop

080065f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80065fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006724 <xPortStartScheduler+0x130>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	332c      	adds	r3, #44	@ 0x2c
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a48      	ldr	r2, [pc, #288]	@ (8006728 <xPortStartScheduler+0x134>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d004      	beq.n	8006616 <xPortStartScheduler+0x22>
 800660c:	f240 114b 	movw	r1, #331	@ 0x14b
 8006610:	4846      	ldr	r0, [pc, #280]	@ (800672c <xPortStartScheduler+0x138>)
 8006612:	f7fb f9c1 	bl	8001998 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	3338      	adds	r3, #56	@ 0x38
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a44      	ldr	r2, [pc, #272]	@ (8006730 <xPortStartScheduler+0x13c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d004      	beq.n	800662c <xPortStartScheduler+0x38>
 8006622:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006626:	4841      	ldr	r0, [pc, #260]	@ (800672c <xPortStartScheduler+0x138>)
 8006628:	f7fb f9b6 	bl	8001998 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006630:	4b40      	ldr	r3, [pc, #256]	@ (8006734 <xPortStartScheduler+0x140>)
 8006632:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	22ff      	movs	r2, #255	@ 0xff
 8006640:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	781b      	ldrb	r3, [r3, #0]
 8006646:	b2db      	uxtb	r3, r3
 8006648:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800664a:	79fb      	ldrb	r3, [r7, #7]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006652:	b2da      	uxtb	r2, r3
 8006654:	4b38      	ldr	r3, [pc, #224]	@ (8006738 <xPortStartScheduler+0x144>)
 8006656:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006658:	4b37      	ldr	r3, [pc, #220]	@ (8006738 <xPortStartScheduler+0x144>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d104      	bne.n	800666a <xPortStartScheduler+0x76>
 8006660:	f240 116f 	movw	r1, #367	@ 0x16f
 8006664:	4831      	ldr	r0, [pc, #196]	@ (800672c <xPortStartScheduler+0x138>)
 8006666:	f7fb f997 	bl	8001998 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	b2db      	uxtb	r3, r3
 800666e:	43db      	mvns	r3, r3
 8006670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00d      	beq.n	8006694 <xPortStartScheduler+0xa0>
 8006678:	f240 1173 	movw	r1, #371	@ 0x173
 800667c:	482b      	ldr	r0, [pc, #172]	@ (800672c <xPortStartScheduler+0x138>)
 800667e:	f7fb f98b 	bl	8001998 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006682:	e007      	b.n	8006694 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	3301      	adds	r3, #1
 8006688:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	b2db      	uxtb	r3, r3
 8006692:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800669c:	2b80      	cmp	r3, #128	@ 0x80
 800669e:	d0f1      	beq.n	8006684 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b08      	cmp	r3, #8
 80066a4:	d103      	bne.n	80066ae <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80066a6:	4b25      	ldr	r3, [pc, #148]	@ (800673c <xPortStartScheduler+0x148>)
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	e004      	b.n	80066b8 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	f1c3 0307 	rsb	r3, r3, #7
 80066b4:	4a21      	ldr	r2, [pc, #132]	@ (800673c <xPortStartScheduler+0x148>)
 80066b6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066b8:	4b20      	ldr	r3, [pc, #128]	@ (800673c <xPortStartScheduler+0x148>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	021b      	lsls	r3, r3, #8
 80066be:	4a1f      	ldr	r2, [pc, #124]	@ (800673c <xPortStartScheduler+0x148>)
 80066c0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80066c2:	4b1e      	ldr	r3, [pc, #120]	@ (800673c <xPortStartScheduler+0x148>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80066ca:	4a1c      	ldr	r2, [pc, #112]	@ (800673c <xPortStartScheduler+0x148>)
 80066cc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80066d6:	4b1a      	ldr	r3, [pc, #104]	@ (8006740 <xPortStartScheduler+0x14c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a19      	ldr	r2, [pc, #100]	@ (8006740 <xPortStartScheduler+0x14c>)
 80066dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80066e0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80066e2:	4b17      	ldr	r3, [pc, #92]	@ (8006740 <xPortStartScheduler+0x14c>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a16      	ldr	r2, [pc, #88]	@ (8006740 <xPortStartScheduler+0x14c>)
 80066e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80066ec:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80066ee:	4b15      	ldr	r3, [pc, #84]	@ (8006744 <xPortStartScheduler+0x150>)
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80066f4:	f000 f8d4 	bl	80068a0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80066f8:	4b13      	ldr	r3, [pc, #76]	@ (8006748 <xPortStartScheduler+0x154>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80066fe:	f000 f8e9 	bl	80068d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006702:	4b12      	ldr	r3, [pc, #72]	@ (800674c <xPortStartScheduler+0x158>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a11      	ldr	r2, [pc, #68]	@ (800674c <xPortStartScheduler+0x158>)
 8006708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800670c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800670e:	f7ff ff5b 	bl	80065c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006712:	f7fe fbf1 	bl	8004ef8 <vTaskSwitchContext>
    prvTaskExitError();
 8006716:	f7ff ff15 	bl	8006544 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3718      	adds	r7, #24
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	e000ed08 	.word	0xe000ed08
 8006728:	080065a1 	.word	0x080065a1
 800672c:	08024abc 	.word	0x08024abc
 8006730:	080067f1 	.word	0x080067f1
 8006734:	e000e400 	.word	0xe000e400
 8006738:	20000f40 	.word	0x20000f40
 800673c:	20000f44 	.word	0x20000f44
 8006740:	e000ed20 	.word	0xe000ed20
 8006744:	e000ed1c 	.word	0xe000ed1c
 8006748:	2000000c 	.word	0x2000000c
 800674c:	e000ef34 	.word	0xe000ef34

08006750 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
    __asm volatile
 8006756:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800675a:	b672      	cpsid	i
 800675c:	f383 8811 	msr	BASEPRI, r3
 8006760:	f3bf 8f6f 	isb	sy
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	b662      	cpsie	i
 800676a:	607b      	str	r3, [r7, #4]
}
 800676c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800676e:	4b0b      	ldr	r3, [pc, #44]	@ (800679c <vPortEnterCritical+0x4c>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3301      	adds	r3, #1
 8006774:	4a09      	ldr	r2, [pc, #36]	@ (800679c <vPortEnterCritical+0x4c>)
 8006776:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006778:	4b08      	ldr	r3, [pc, #32]	@ (800679c <vPortEnterCritical+0x4c>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d109      	bne.n	8006794 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006780:	4b07      	ldr	r3, [pc, #28]	@ (80067a0 <vPortEnterCritical+0x50>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <vPortEnterCritical+0x44>
 800678a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800678e:	4805      	ldr	r0, [pc, #20]	@ (80067a4 <vPortEnterCritical+0x54>)
 8006790:	f7fb f902 	bl	8001998 <vAssertCalled>
    }
}
 8006794:	bf00      	nop
 8006796:	3708      	adds	r7, #8
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	2000000c 	.word	0x2000000c
 80067a0:	e000ed04 	.word	0xe000ed04
 80067a4:	08024abc 	.word	0x08024abc

080067a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b082      	sub	sp, #8
 80067ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80067ae:	4b0e      	ldr	r3, [pc, #56]	@ (80067e8 <vPortExitCritical+0x40>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d104      	bne.n	80067c0 <vPortExitCritical+0x18>
 80067b6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80067ba:	480c      	ldr	r0, [pc, #48]	@ (80067ec <vPortExitCritical+0x44>)
 80067bc:	f7fb f8ec 	bl	8001998 <vAssertCalled>
    uxCriticalNesting--;
 80067c0:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <vPortExitCritical+0x40>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	4a08      	ldr	r2, [pc, #32]	@ (80067e8 <vPortExitCritical+0x40>)
 80067c8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80067ca:	4b07      	ldr	r3, [pc, #28]	@ (80067e8 <vPortExitCritical+0x40>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d105      	bne.n	80067de <vPortExitCritical+0x36>
 80067d2:	2300      	movs	r3, #0
 80067d4:	607b      	str	r3, [r7, #4]
    __asm volatile
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f383 8811 	msr	BASEPRI, r3
}
 80067dc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80067de:	bf00      	nop
 80067e0:	3708      	adds	r7, #8
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	2000000c 	.word	0x2000000c
 80067ec:	08024abc 	.word	0x08024abc

080067f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80067f0:	f3ef 8009 	mrs	r0, PSP
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	4b15      	ldr	r3, [pc, #84]	@ (8006850 <pxCurrentTCBConst>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	f01e 0f10 	tst.w	lr, #16
 8006800:	bf08      	it	eq
 8006802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680a:	6010      	str	r0, [r2, #0]
 800680c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006810:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8006814:	b672      	cpsid	i
 8006816:	f380 8811 	msr	BASEPRI, r0
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	b662      	cpsie	i
 8006824:	f7fe fb68 	bl	8004ef8 <vTaskSwitchContext>
 8006828:	f04f 0000 	mov.w	r0, #0
 800682c:	f380 8811 	msr	BASEPRI, r0
 8006830:	bc09      	pop	{r0, r3}
 8006832:	6819      	ldr	r1, [r3, #0]
 8006834:	6808      	ldr	r0, [r1, #0]
 8006836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800683a:	f01e 0f10 	tst.w	lr, #16
 800683e:	bf08      	it	eq
 8006840:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006844:	f380 8809 	msr	PSP, r0
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop

08006850 <pxCurrentTCBConst>:
 8006850:	20000e0c 	.word	0x20000e0c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006854:	bf00      	nop
 8006856:	bf00      	nop

08006858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
    __asm volatile
 800685e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006862:	b672      	cpsid	i
 8006864:	f383 8811 	msr	BASEPRI, r3
 8006868:	f3bf 8f6f 	isb	sy
 800686c:	f3bf 8f4f 	dsb	sy
 8006870:	b662      	cpsie	i
 8006872:	607b      	str	r3, [r7, #4]
}
 8006874:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006876:	f7fe fa2b 	bl	8004cd0 <xTaskIncrementTick>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d003      	beq.n	8006888 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006880:	4b06      	ldr	r3, [pc, #24]	@ (800689c <xPortSysTickHandler+0x44>)
 8006882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	f383 8811 	msr	BASEPRI, r3
}
 8006892:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006894:	bf00      	nop
 8006896:	3708      	adds	r7, #8
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}
 800689c:	e000ed04 	.word	0xe000ed04

080068a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068a4:	4b08      	ldr	r3, [pc, #32]	@ (80068c8 <vPortSetupTimerInterrupt+0x28>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068aa:	4b08      	ldr	r3, [pc, #32]	@ (80068cc <vPortSetupTimerInterrupt+0x2c>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068b0:	4b07      	ldr	r3, [pc, #28]	@ (80068d0 <vPortSetupTimerInterrupt+0x30>)
 80068b2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80068b6:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80068b8:	4b03      	ldr	r3, [pc, #12]	@ (80068c8 <vPortSetupTimerInterrupt+0x28>)
 80068ba:	2203      	movs	r2, #3
 80068bc:	601a      	str	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	e000e010 	.word	0xe000e010
 80068cc:	e000e018 	.word	0xe000e018
 80068d0:	e000e014 	.word	0xe000e014

080068d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80068d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80068e4 <vPortEnableVFP+0x10>
 80068d8:	6801      	ldr	r1, [r0, #0]
 80068da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80068de:	6001      	str	r1, [r0, #0]
 80068e0:	4770      	bx	lr
 80068e2:	0000      	.short	0x0000
 80068e4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop

080068ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80068f2:	f3ef 8305 	mrs	r3, IPSR
 80068f6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b0f      	cmp	r3, #15
 80068fc:	d90e      	bls.n	800691c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068fe:	4a10      	ldr	r2, [pc, #64]	@ (8006940 <vPortValidateInterruptPriority+0x54>)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4413      	add	r3, r2
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006908:	4b0e      	ldr	r3, [pc, #56]	@ (8006944 <vPortValidateInterruptPriority+0x58>)
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	78fa      	ldrb	r2, [r7, #3]
 800690e:	429a      	cmp	r2, r3
 8006910:	d204      	bcs.n	800691c <vPortValidateInterruptPriority+0x30>
 8006912:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8006916:	480c      	ldr	r0, [pc, #48]	@ (8006948 <vPortValidateInterruptPriority+0x5c>)
 8006918:	f7fb f83e 	bl	8001998 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800691c:	4b0b      	ldr	r3, [pc, #44]	@ (800694c <vPortValidateInterruptPriority+0x60>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006924:	4b0a      	ldr	r3, [pc, #40]	@ (8006950 <vPortValidateInterruptPriority+0x64>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d904      	bls.n	8006936 <vPortValidateInterruptPriority+0x4a>
 800692c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8006930:	4805      	ldr	r0, [pc, #20]	@ (8006948 <vPortValidateInterruptPriority+0x5c>)
 8006932:	f7fb f831 	bl	8001998 <vAssertCalled>
    }
 8006936:	bf00      	nop
 8006938:	3708      	adds	r7, #8
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	e000e3f0 	.word	0xe000e3f0
 8006944:	20000f40 	.word	0x20000f40
 8006948:	08024abc 	.word	0x08024abc
 800694c:	e000ed0c 	.word	0xe000ed0c
 8006950:	20000f44 	.word	0x20000f44

08006954 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b088      	sub	sp, #32
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8006960:	4b60      	ldr	r3, [pc, #384]	@ (8006ae4 <pvPortMalloc+0x190>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <pvPortMalloc+0x1c>
 8006968:	21da      	movs	r1, #218	@ 0xda
 800696a:	485f      	ldr	r0, [pc, #380]	@ (8006ae8 <pvPortMalloc+0x194>)
 800696c:	f7fb f814 	bl	8001998 <vAssertCalled>

    if( xWantedSize > 0 )
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d022      	beq.n	80069bc <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006976:	2308      	movs	r3, #8
 8006978:	43db      	mvns	r3, r3
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	429a      	cmp	r2, r3
 800697e:	d81b      	bhi.n	80069b8 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8006980:	2208      	movs	r2, #8
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4413      	add	r3, r2
 8006986:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	2b00      	cmp	r3, #0
 8006990:	d014      	beq.n	80069bc <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f003 0307 	and.w	r3, r3, #7
 8006998:	f1c3 0308 	rsb	r3, r3, #8
 800699c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	43db      	mvns	r3, r3
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d804      	bhi.n	80069b2 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	4413      	add	r3, r2
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	e004      	b.n	80069bc <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 80069b2:	2300      	movs	r3, #0
 80069b4:	607b      	str	r3, [r7, #4]
 80069b6:	e001      	b.n	80069bc <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80069b8:	2300      	movs	r3, #0
 80069ba:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80069bc:	f7fe f848 	bl	8004a50 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	db78      	blt.n	8006ab8 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d075      	beq.n	8006ab8 <pvPortMalloc+0x164>
 80069cc:	4b47      	ldr	r3, [pc, #284]	@ (8006aec <pvPortMalloc+0x198>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d870      	bhi.n	8006ab8 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80069d6:	4b46      	ldr	r3, [pc, #280]	@ (8006af0 <pvPortMalloc+0x19c>)
 80069d8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80069da:	4b45      	ldr	r3, [pc, #276]	@ (8006af0 <pvPortMalloc+0x19c>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80069e0:	e004      	b.n	80069ec <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d903      	bls.n	80069fe <pvPortMalloc+0xaa>
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f1      	bne.n	80069e2 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80069fe:	4b39      	ldr	r3, [pc, #228]	@ (8006ae4 <pvPortMalloc+0x190>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69fa      	ldr	r2, [r7, #28]
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d057      	beq.n	8006ab8 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8006a08:	69bb      	ldr	r3, [r7, #24]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2208      	movs	r2, #8
 8006a0e:	4413      	add	r3, r2
 8006a10:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d904      	bls.n	8006a2e <pvPortMalloc+0xda>
 8006a24:	f240 1129 	movw	r1, #297	@ 0x129
 8006a28:	482f      	ldr	r0, [pc, #188]	@ (8006ae8 <pvPortMalloc+0x194>)
 8006a2a:	f7fa ffb5 	bl	8001998 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	685a      	ldr	r2, [r3, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	1ad2      	subs	r2, r2, r3
 8006a36:	2308      	movs	r3, #8
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d91d      	bls.n	8006a7a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a3e:	69fa      	ldr	r2, [r7, #28]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4413      	add	r3, r2
 8006a44:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d004      	beq.n	8006a5a <pvPortMalloc+0x106>
 8006a50:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006a54:	4824      	ldr	r0, [pc, #144]	@ (8006ae8 <pvPortMalloc+0x194>)
 8006a56:	f7fa ff9f 	bl	8001998 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	685a      	ldr	r2, [r3, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	1ad2      	subs	r2, r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8006aec <pvPortMalloc+0x198>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	4a19      	ldr	r2, [pc, #100]	@ (8006aec <pvPortMalloc+0x198>)
 8006a86:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a88:	4b18      	ldr	r3, [pc, #96]	@ (8006aec <pvPortMalloc+0x198>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	4b19      	ldr	r3, [pc, #100]	@ (8006af4 <pvPortMalloc+0x1a0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d203      	bcs.n	8006a9c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a94:	4b15      	ldr	r3, [pc, #84]	@ (8006aec <pvPortMalloc+0x198>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a16      	ldr	r2, [pc, #88]	@ (8006af4 <pvPortMalloc+0x1a0>)
 8006a9a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006aae:	4b12      	ldr	r3, [pc, #72]	@ (8006af8 <pvPortMalloc+0x1a4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4a10      	ldr	r2, [pc, #64]	@ (8006af8 <pvPortMalloc+0x1a4>)
 8006ab6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006ab8:	f7fd ffd8 	bl	8004a6c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d101      	bne.n	8006ac6 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8006ac2:	f7fa ff7d 	bl	80019c0 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d004      	beq.n	8006ada <pvPortMalloc+0x186>
 8006ad0:	f240 1173 	movw	r1, #371	@ 0x173
 8006ad4:	4804      	ldr	r0, [pc, #16]	@ (8006ae8 <pvPortMalloc+0x194>)
 8006ad6:	f7fa ff5f 	bl	8001998 <vAssertCalled>
    return pvReturn;
 8006ada:	697b      	ldr	r3, [r7, #20]
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	20000f50 	.word	0x20000f50
 8006ae8:	08024af8 	.word	0x08024af8
 8006aec:	20000f54 	.word	0x20000f54
 8006af0:	20000f48 	.word	0x20000f48
 8006af4:	20000f58 	.word	0x20000f58
 8006af8:	20000f5c 	.word	0x20000f5c

08006afc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d03d      	beq.n	8006b8a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006b0e:	2308      	movs	r3, #8
 8006b10:	425b      	negs	r3, r3
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	db04      	blt.n	8006b2e <vPortFree+0x32>
 8006b24:	f240 1187 	movw	r1, #391	@ 0x187
 8006b28:	481a      	ldr	r0, [pc, #104]	@ (8006b94 <vPortFree+0x98>)
 8006b2a:	f7fa ff35 	bl	8001998 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <vPortFree+0x44>
 8006b36:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8006b3a:	4816      	ldr	r0, [pc, #88]	@ (8006b94 <vPortFree+0x98>)
 8006b3c:	f7fa ff2c 	bl	8001998 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	0fdb      	lsrs	r3, r3, #31
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01c      	beq.n	8006b8a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d118      	bne.n	8006b8a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006b64:	f7fd ff74 	bl	8004a50 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b98 <vPortFree+0x9c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4413      	add	r3, r2
 8006b72:	4a09      	ldr	r2, [pc, #36]	@ (8006b98 <vPortFree+0x9c>)
 8006b74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b76:	68b8      	ldr	r0, [r7, #8]
 8006b78:	f000 f82a 	bl	8006bd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <vPortFree+0xa0>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3301      	adds	r3, #1
 8006b82:	4a06      	ldr	r2, [pc, #24]	@ (8006b9c <vPortFree+0xa0>)
 8006b84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006b86:	f7fd ff71 	bl	8004a6c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8006b8a:	bf00      	nop
 8006b8c:	3710      	adds	r7, #16
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	08024af8 	.word	0x08024af8
 8006b98:	20000f54 	.word	0x20000f54
 8006b9c:	20000f60 	.word	0x20000f60

08006ba0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006ba4:	4b03      	ldr	r3, [pc, #12]	@ (8006bb4 <xPortGetFreeHeapSize+0x14>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	20000f54 	.word	0x20000f54

08006bb8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8006bbc:	4b03      	ldr	r3, [pc, #12]	@ (8006bcc <xPortGetMinimumEverFreeHeapSize+0x14>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	20000f58 	.word	0x20000f58

08006bd0 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006bd8:	4b28      	ldr	r3, [pc, #160]	@ (8006c7c <prvInsertBlockIntoFreeList+0xac>)
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	e002      	b.n	8006be4 <prvInsertBlockIntoFreeList+0x14>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	687a      	ldr	r2, [r7, #4]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d8f7      	bhi.n	8006bde <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d108      	bne.n	8006c12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	441a      	add	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	441a      	add	r2, r3
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d118      	bne.n	8006c58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b15      	ldr	r3, [pc, #84]	@ (8006c80 <prvInsertBlockIntoFreeList+0xb0>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d00d      	beq.n	8006c4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	441a      	add	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	601a      	str	r2, [r3, #0]
 8006c4c:	e008      	b.n	8006c60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c80 <prvInsertBlockIntoFreeList+0xb0>)
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	601a      	str	r2, [r3, #0]
 8006c56:	e003      	b.n	8006c60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d002      	beq.n	8006c6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006c6e:	bf00      	nop
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
 8006c7a:	bf00      	nop
 8006c7c:	20000f48 	.word	0x20000f48
 8006c80:	20000f50 	.word	0x20000f50

08006c84 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b08a      	sub	sp, #40	@ 0x28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006c90:	2300      	movs	r3, #0
 8006c92:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006c94:	2300      	movs	r3, #0
 8006c96:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006c98:	4b4b      	ldr	r3, [pc, #300]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d004      	beq.n	8006caa <vPortDefineHeapRegions+0x26>
 8006ca0:	f240 2121 	movw	r1, #545	@ 0x221
 8006ca4:	4849      	ldr	r0, [pc, #292]	@ (8006dcc <vPortDefineHeapRegions+0x148>)
 8006ca6:	f7fa fe77 	bl	8001998 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	00db      	lsls	r3, r3, #3
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4413      	add	r3, r2
 8006cb2:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006cb4:	e071      	b.n	8006d9a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cc2:	69bb      	ldr	r3, [r7, #24]
 8006cc4:	f003 0307 	and.w	r3, r3, #7
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00e      	beq.n	8006cea <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 8006ccc:	69bb      	ldr	r3, [r7, #24]
 8006cce:	3307      	adds	r3, #7
 8006cd0:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	f023 0307 	bic.w	r3, r3, #7
 8006cd8:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	69bb      	ldr	r3, [r7, #24]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ce6:	4413      	add	r3, r2
 8006ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d106      	bne.n	8006d02 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4a36      	ldr	r2, [pc, #216]	@ (8006dd0 <vPortDefineHeapRegions+0x14c>)
 8006cf8:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8006cfa:	4b35      	ldr	r3, [pc, #212]	@ (8006dd0 <vPortDefineHeapRegions+0x14c>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	605a      	str	r2, [r3, #4]
 8006d00:	e013      	b.n	8006d2a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8006d02:	4b31      	ldr	r3, [pc, #196]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d104      	bne.n	8006d14 <vPortDefineHeapRegions+0x90>
 8006d0a:	f240 2149 	movw	r1, #585	@ 0x249
 8006d0e:	482f      	ldr	r0, [pc, #188]	@ (8006dcc <vPortDefineHeapRegions+0x148>)
 8006d10:	f7fa fe42 	bl	8001998 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8006d14:	4b2c      	ldr	r3, [pc, #176]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d804      	bhi.n	8006d2a <vPortDefineHeapRegions+0xa6>
 8006d20:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006d24:	4829      	ldr	r0, [pc, #164]	@ (8006dcc <vPortDefineHeapRegions+0x148>)
 8006d26:	f7fa fe37 	bl	8001998 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 8006d2a:	4b27      	ldr	r3, [pc, #156]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d34:	4413      	add	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006d38:	2208      	movs	r2, #8
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	1a9b      	subs	r3, r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f023 0307 	bic.w	r3, r3, #7
 8006d46:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006d4c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 8006d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2200      	movs	r2, #0
 8006d54:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006d56:	4b1c      	ldr	r3, [pc, #112]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	1ad2      	subs	r2, r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8006d6c:	4b16      	ldr	r3, [pc, #88]	@ (8006dc8 <vPortDefineHeapRegions+0x144>)
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d002      	beq.n	8006d80 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	693a      	ldr	r2, [r7, #16]
 8006d7e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	6a3a      	ldr	r2, [r7, #32]
 8006d86:	4413      	add	r3, r2
 8006d88:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d189      	bne.n	8006cb6 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006da2:	4a0c      	ldr	r2, [pc, #48]	@ (8006dd4 <vPortDefineHeapRegions+0x150>)
 8006da4:	6a3b      	ldr	r3, [r7, #32]
 8006da6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006da8:	4a0b      	ldr	r2, [pc, #44]	@ (8006dd8 <vPortDefineHeapRegions+0x154>)
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d104      	bne.n	8006dbe <vPortDefineHeapRegions+0x13a>
 8006db4:	f240 2189 	movw	r1, #649	@ 0x289
 8006db8:	4804      	ldr	r0, [pc, #16]	@ (8006dcc <vPortDefineHeapRegions+0x148>)
 8006dba:	f7fa fded 	bl	8001998 <vAssertCalled>
}
 8006dbe:	bf00      	nop
 8006dc0:	3728      	adds	r7, #40	@ 0x28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000f50 	.word	0x20000f50
 8006dcc:	08024af8 	.word	0x08024af8
 8006dd0:	20000f48 	.word	0x20000f48
 8006dd4:	20000f58 	.word	0x20000f58
 8006dd8:	20000f54 	.word	0x20000f54

08006ddc <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b090      	sub	sp, #64	@ 0x40
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006de8:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8006dea:	2300      	movs	r3, #0
 8006dec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	330e      	adds	r3, #14
 8006dfa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfe:	881b      	ldrh	r3, [r3, #0]
 8006e00:	b29b      	uxth	r3, r3
 8006e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e06:	f040 81bb 	bne.w	8007180 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e0c:	885b      	ldrh	r3, [r3, #2]
 8006e0e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8006e10:	2b08      	cmp	r3, #8
 8006e12:	f040 81b5 	bne.w	8007180 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8006e1a:	2b06      	cmp	r3, #6
 8006e1c:	f040 81b0 	bne.w	8007180 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006e24:	2b04      	cmp	r3, #4
 8006e26:	f040 81ab 	bne.w	8007180 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8006e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2c:	330e      	adds	r3, #14
 8006e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8006e30:	f107 0320 	add.w	r3, r7, #32
 8006e34:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8006e46:	4b9c      	ldr	r3, [pc, #624]	@ (80070b8 <eARPProcessPacket+0x2dc>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8006e4e:	499b      	ldr	r1, [pc, #620]	@ (80070bc <eARPProcessPacket+0x2e0>)
 8006e50:	489b      	ldr	r0, [pc, #620]	@ (80070c0 <eARPProcessPacket+0x2e4>)
 8006e52:	f7fe faf1 	bl	8005438 <xTaskCheckForTimeOut>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d102      	bne.n	8006e62 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8006e5c:	4b96      	ldr	r3, [pc, #600]	@ (80070b8 <eARPProcessPacket+0x2dc>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	7a1b      	ldrb	r3, [r3, #8]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 8188 	bne.w	8007180 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	061a      	lsls	r2, r3, #24
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	021b      	lsls	r3, r3, #8
 8006e78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	0a1b      	lsrs	r3, r3, #8
 8006e82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006e86:	431a      	orrs	r2, r3
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	0e1b      	lsrs	r3, r3, #24
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006e92:	d311      	bcc.n	8006eb8 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	061a      	lsls	r2, r3, #24
 8006e98:	6a3b      	ldr	r3, [r7, #32]
 8006e9a:	021b      	lsls	r3, r3, #8
 8006e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ea0:	431a      	orrs	r2, r3
 8006ea2:	6a3b      	ldr	r3, [r7, #32]
 8006ea4:	0a1b      	lsrs	r3, r3, #8
 8006ea6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	6a3b      	ldr	r3, [r7, #32]
 8006eae:	0e1b      	lsrs	r3, r3, #24
 8006eb0:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	f280 8164 	bge.w	8007180 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d021      	beq.n	8006f02 <eARPProcessPacket+0x126>
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d11c      	bne.n	8006f02 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006ec8:	4b7b      	ldr	r3, [pc, #492]	@ (80070b8 <eARPProcessPacket+0x2dc>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f040 8157 	bne.w	8007180 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8006ed2:	4b79      	ldr	r3, [pc, #484]	@ (80070b8 <eARPProcessPacket+0x2dc>)
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	4a77      	ldr	r2, [pc, #476]	@ (80070b8 <eARPProcessPacket+0x2dc>)
 8006eda:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8006ee4:	f000 fe32 	bl	8007b4c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8006ee8:	f7fd fec4 	bl	8004c74 <xTaskGetTickCount>
 8006eec:	4603      	mov	r3, r0
 8006eee:	4a75      	ldr	r2, [pc, #468]	@ (80070c4 <eARPProcessPacket+0x2e8>)
 8006ef0:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8006ef2:	4873      	ldr	r0, [pc, #460]	@ (80070c0 <eARPProcessPacket+0x2e4>)
 8006ef4:	f7fe fa68 	bl	80053c8 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8006ef8:	4b70      	ldr	r3, [pc, #448]	@ (80070bc <eARPProcessPacket+0x2e0>)
 8006efa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006efe:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8006f00:	e13e      	b.n	8007180 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8006f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f04:	88db      	ldrh	r3, [r3, #6]
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f0c:	d14a      	bne.n	8006fa4 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	061a      	lsls	r2, r3, #24
 8006f12:	6a3b      	ldr	r3, [r7, #32]
 8006f14:	021b      	lsls	r3, r3, #8
 8006f16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	0a1b      	lsrs	r3, r3, #8
 8006f20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f24:	431a      	orrs	r2, r3
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	0e1b      	lsrs	r3, r3, #24
 8006f2a:	ea42 0103 	orr.w	r1, r2, r3
 8006f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f30:	061a      	lsls	r2, r3, #24
 8006f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f34:	021b      	lsls	r3, r3, #8
 8006f36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f3a:	431a      	orrs	r2, r3
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	0a1b      	lsrs	r3, r3, #8
 8006f40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f44:	431a      	orrs	r2, r3
 8006f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f48:	0e1b      	lsrs	r3, r3, #24
 8006f4a:	ea42 0003 	orr.w	r0, r2, r3
 8006f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <eARPProcessPacket+0x180>
 8006f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	061a      	lsls	r2, r3, #24
 8006f5a:	e000      	b.n	8006f5e <eARPProcessPacket+0x182>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d005      	beq.n	8006f70 <eARPProcessPacket+0x194>
 8006f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	021b      	lsls	r3, r3, #8
 8006f6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f6e:	e000      	b.n	8006f72 <eARPProcessPacket+0x196>
 8006f70:	2300      	movs	r3, #0
 8006f72:	431a      	orrs	r2, r3
 8006f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d005      	beq.n	8006f86 <eARPProcessPacket+0x1aa>
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	0a1b      	lsrs	r3, r3, #8
 8006f80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006f84:	e000      	b.n	8006f88 <eARPProcessPacket+0x1ac>
 8006f86:	2300      	movs	r3, #0
 8006f88:	431a      	orrs	r2, r3
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d003      	beq.n	8006f98 <eARPProcessPacket+0x1bc>
 8006f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	0e1b      	lsrs	r3, r3, #24
 8006f96:	e000      	b.n	8006f9a <eARPProcessPacket+0x1be>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	484a      	ldr	r0, [pc, #296]	@ (80070c8 <eARPProcessPacket+0x2ec>)
 8006fa0:	f01b fbd8 	bl	8022754 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa6:	88db      	ldrh	r3, [r3, #6]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fae:	d151      	bne.n	8007054 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d04d      	beq.n	8007054 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d04a      	beq.n	8007054 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	061a      	lsls	r2, r3, #24
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	021b      	lsls	r3, r3, #8
 8006fc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	0e1b      	lsrs	r3, r3, #24
 8006fda:	ea42 0103 	orr.w	r1, r2, r3
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	061a      	lsls	r2, r3, #24
 8006fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006fea:	431a      	orrs	r2, r3
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	0a1b      	lsrs	r3, r3, #8
 8006ff0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006ff4:	431a      	orrs	r2, r3
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff8:	0e1b      	lsrs	r3, r3, #24
 8006ffa:	ea42 0003 	orr.w	r0, r2, r3
 8006ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <eARPProcessPacket+0x230>
 8007004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	061a      	lsls	r2, r3, #24
 800700a:	e000      	b.n	800700e <eARPProcessPacket+0x232>
 800700c:	2200      	movs	r2, #0
 800700e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007010:	2b00      	cmp	r3, #0
 8007012:	d005      	beq.n	8007020 <eARPProcessPacket+0x244>
 8007014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	021b      	lsls	r3, r3, #8
 800701a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800701e:	e000      	b.n	8007022 <eARPProcessPacket+0x246>
 8007020:	2300      	movs	r3, #0
 8007022:	431a      	orrs	r2, r3
 8007024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007026:	2b00      	cmp	r3, #0
 8007028:	d005      	beq.n	8007036 <eARPProcessPacket+0x25a>
 800702a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007034:	e000      	b.n	8007038 <eARPProcessPacket+0x25c>
 8007036:	2300      	movs	r3, #0
 8007038:	431a      	orrs	r2, r3
 800703a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800703c:	2b00      	cmp	r3, #0
 800703e:	d003      	beq.n	8007048 <eARPProcessPacket+0x26c>
 8007040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	0e1b      	lsrs	r3, r3, #24
 8007046:	e000      	b.n	800704a <eARPProcessPacket+0x26e>
 8007048:	2300      	movs	r3, #0
 800704a:	4313      	orrs	r3, r2
 800704c:	4602      	mov	r2, r0
 800704e:	481f      	ldr	r0, [pc, #124]	@ (80070cc <eARPProcessPacket+0x2f0>)
 8007050:	f01b fb80 	bl	8022754 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8007054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007056:	2b00      	cmp	r3, #0
 8007058:	f000 8092 	beq.w	8007180 <eARPProcessPacket+0x3a4>
 800705c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007062:	f003 0310 	and.w	r3, r3, #16
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8089 	beq.w	8007180 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 800706e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007070:	88db      	ldrh	r3, [r3, #6]
 8007072:	b29b      	uxth	r3, r3
 8007074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007078:	d003      	beq.n	8007082 <eARPProcessPacket+0x2a6>
 800707a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800707e:	d077      	beq.n	8007170 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8007080:	e07e      	b.n	8007180 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8007082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007088:	429a      	cmp	r2, r3
 800708a:	d121      	bne.n	80070d0 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800708c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800708e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8007092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007094:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8007096:	2206      	movs	r2, #6
 8007098:	4619      	mov	r1, r3
 800709a:	f01c fd0c 	bl	8023ab6 <memcmp>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d06c      	beq.n	800717e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80070a4:	6a3b      	ldr	r3, [r7, #32]
 80070a6:	461a      	mov	r2, r3
 80070a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80070aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070ac:	f000 f872 	bl	8007194 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 80070b0:	2302      	movs	r3, #2
 80070b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 80070b6:	e062      	b.n	800717e <eARPProcessPacket+0x3a2>
 80070b8:	20000fc8 	.word	0x20000fc8
 80070bc:	20000010 	.word	0x20000010
 80070c0:	20000fcc 	.word	0x20000fcc
 80070c4:	20000fc4 	.word	0x20000fc4
 80070c8:	08024b30 	.word	0x08024b30
 80070cc:	08024b60 	.word	0x08024b60
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d152      	bne.n	800717e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 80070d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	405a      	eors	r2, r3
 80070e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d149      	bne.n	800717e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 80070ea:	4a28      	ldr	r2, [pc, #160]	@ (800718c <eARPProcessPacket+0x3b0>)
 80070ec:	f107 0318 	add.w	r3, r7, #24
 80070f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80070f4:	6018      	str	r0, [r3, #0]
 80070f6:	3304      	adds	r3, #4
 80070f8:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	3312      	adds	r3, #18
 80070fe:	2206      	movs	r2, #6
 8007100:	4923      	ldr	r1, [pc, #140]	@ (8007190 <eARPProcessPacket+0x3b4>)
 8007102:	4618      	mov	r0, r3
 8007104:	f01c fcd7 	bl	8023ab6 <memcmp>
 8007108:	4603      	mov	r3, r0
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800710e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007110:	3312      	adds	r3, #18
 8007112:	f107 0118 	add.w	r1, r7, #24
 8007116:	2206      	movs	r2, #6
 8007118:	4618      	mov	r0, r3
 800711a:	f01c fccc 	bl	8023ab6 <memcmp>
 800711e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8007120:	2b00      	cmp	r3, #0
 8007122:	d12c      	bne.n	800717e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8007124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007126:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800712a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800712c:	3308      	adds	r3, #8
 800712e:	2206      	movs	r2, #6
 8007130:	4619      	mov	r1, r3
 8007132:	f01c fcc0 	bl	8023ab6 <memcmp>
 8007136:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8007138:	2b00      	cmp	r3, #0
 800713a:	d020      	beq.n	800717e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8007140:	f107 020c 	add.w	r2, r7, #12
 8007144:	f107 0110 	add.w	r1, r7, #16
 8007148:	f107 0320 	add.w	r3, r7, #32
 800714c:	4618      	mov	r0, r3
 800714e:	f000 fb11 	bl	8007774 <eARPGetCacheEntry>
 8007152:	4603      	mov	r3, r0
 8007154:	2b01      	cmp	r3, #1
 8007156:	d112      	bne.n	800717e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800715c:	429a      	cmp	r2, r3
 800715e:	d10e      	bne.n	800717e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	3308      	adds	r3, #8
 8007164:	6a39      	ldr	r1, [r7, #32]
 8007166:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007168:	4618      	mov	r0, r3
 800716a:	f000 f9ef 	bl	800754c <vARPRefreshCacheEntry>
                            break;
 800716e:	e006      	b.n	800717e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8007170:	6a3b      	ldr	r3, [r7, #32]
 8007172:	461a      	mov	r2, r3
 8007174:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007176:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007178:	f000 f84a 	bl	8007210 <vARPProcessPacketReply>
                            break;
 800717c:	e000      	b.n	8007180 <eARPProcessPacket+0x3a4>
                            break;
 800717e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8007180:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8007184:	4618      	mov	r0, r3
 8007186:	3740      	adds	r7, #64	@ 0x40
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	08024b90 	.word	0x08024b90
 8007190:	08027edc 	.word	0x08027edc

08007194 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8007194:	b580      	push	{r7, lr}
 8007196:	b088      	sub	sp, #32
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	330e      	adds	r3, #14
 80071a4:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80071a6:	69fb      	ldr	r3, [r7, #28]
 80071a8:	3308      	adds	r3, #8
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	6879      	ldr	r1, [r7, #4]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f000 f9cc 	bl	800754c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	2200      	movs	r2, #0
 80071b8:	719a      	strb	r2, [r3, #6]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f042 0202 	orr.w	r2, r2, #2
 80071c0:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	3308      	adds	r3, #8
 80071c6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	3312      	adds	r3, #18
 80071cc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80071ce:	2206      	movs	r2, #6
 80071d0:	69b9      	ldr	r1, [r7, #24]
 80071d2:	6978      	ldr	r0, [r7, #20]
 80071d4:	f01b fcda 	bl	8022b8c <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	33e8      	adds	r3, #232	@ 0xe8
 80071e2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	3308      	adds	r3, #8
 80071e8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80071ea:	2206      	movs	r2, #6
 80071ec:	69b9      	ldr	r1, [r7, #24]
 80071ee:	6978      	ldr	r0, [r7, #20]
 80071f0:	f01b fccc 	bl	8022b8c <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	330e      	adds	r3, #14
 80071fc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	601a      	str	r2, [r3, #0]
    }
 8007208:	bf00      	nop
 800720a:	3720      	adds	r7, #32
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8007210:	b580      	push	{r7, lr}
 8007212:	b08c      	sub	sp, #48	@ 0x30
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	330e      	adds	r3, #14
 8007220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8007222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800722e:	429a      	cmp	r2, r3
 8007230:	d005      	beq.n	800723e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 f844 	bl	80072c0 <xIsIPInARPCache>
 8007238:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 800723a:	2b01      	cmp	r3, #1
 800723c:	d106      	bne.n	800724c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	3308      	adds	r3, #8
 8007242:	68ba      	ldr	r2, [r7, #8]
 8007244:	6879      	ldr	r1, [r7, #4]
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f980 	bl	800754c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800724c:	4b1b      	ldr	r3, [pc, #108]	@ (80072bc <vARPProcessPacketReply+0xac>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d02e      	beq.n	80072b2 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8007254:	4b19      	ldr	r3, [pc, #100]	@ (80072bc <vARPProcessPacketReply+0xac>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4618      	mov	r0, r3
 800725a:	f003 f8a5 	bl	800a3a8 <uxIPHeaderSizePacket>
 800725e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8007260:	2b14      	cmp	r3, #20
 8007262:	d126      	bne.n	80072b2 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8007264:	4b15      	ldr	r3, [pc, #84]	@ (80072bc <vARPProcessPacketReply+0xac>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800726a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	330e      	adds	r3, #14
 8007270:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	429a      	cmp	r2, r3
 800727a:	d11a      	bne.n	80072b2 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8007280:	2301      	movs	r3, #1
 8007282:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8007284:	4b0d      	ldr	r3, [pc, #52]	@ (80072bc <vARPProcessPacketReply+0xac>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800728a:	f107 0314 	add.w	r3, r7, #20
 800728e:	69f9      	ldr	r1, [r7, #28]
 8007290:	4618      	mov	r0, r3
 8007292:	f002 fcd5 	bl	8009c40 <xSendEventStructToIPTask>
 8007296:	4603      	mov	r3, r0
 8007298:	2b01      	cmp	r3, #1
 800729a:	d004      	beq.n	80072a6 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800729c:	4b07      	ldr	r3, [pc, #28]	@ (80072bc <vARPProcessPacketReply+0xac>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f010 fbaf 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 80072a6:	4b05      	ldr	r3, [pc, #20]	@ (80072bc <vARPProcessPacketReply+0xac>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 80072ac:	2000      	movs	r0, #0
 80072ae:	f003 fabd 	bl	800a82c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 80072b2:	bf00      	nop
 80072b4:	3730      	adds	r7, #48	@ 0x30
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	2000119c 	.word	0x2000119c

080072c0 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 80072c8:	2300      	movs	r3, #0
 80072ca:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80072cc:	2300      	movs	r3, #0
 80072ce:	60fb      	str	r3, [r7, #12]
 80072d0:	e017      	b.n	8007302 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80072d2:	4a12      	ldr	r2, [pc, #72]	@ (800731c <xIsIPInARPCache+0x5c>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	011b      	lsls	r3, r3, #4
 80072d8:	4413      	add	r3, r2
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d10c      	bne.n	80072fc <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 80072e2:	2301      	movs	r3, #1
 80072e4:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80072e6:	4a0d      	ldr	r2, [pc, #52]	@ (800731c <xIsIPInARPCache+0x5c>)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	4413      	add	r3, r2
 80072ee:	330b      	adds	r3, #11
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d109      	bne.n	800730a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 80072f6:	2300      	movs	r3, #0
 80072f8:	60bb      	str	r3, [r7, #8]
            }

            break;
 80072fa:	e006      	b.n	800730a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2b05      	cmp	r3, #5
 8007306:	dde4      	ble.n	80072d2 <xIsIPInARPCache+0x12>
 8007308:	e000      	b.n	800730c <xIsIPInARPCache+0x4c>
            break;
 800730a:	bf00      	nop
        }
    }

    return xReturn;
 800730c:	68bb      	ldr	r3, [r7, #8]
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	20000f64 	.word	0x20000f64

08007320 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8007320:	b590      	push	{r4, r7, lr}
 8007322:	b0a5      	sub	sp, #148	@ 0x94
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8007328:	2300      	movs	r3, #0
 800732a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f003 f83a 	bl	800a3a8 <uxIPHeaderSizePacket>
 8007334:	4603      	mov	r3, r0
 8007336:	2b14      	cmp	r3, #20
 8007338:	d002      	beq.n	8007340 <xCheckRequiresARPResolution+0x20>
 800733a:	2b28      	cmp	r3, #40	@ 0x28
 800733c:	d029      	beq.n	8007392 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800733e:	e0b6      	b.n	80074ae <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007344:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8007346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007348:	330e      	adds	r3, #14
 800734a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007350:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8007352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007354:	68da      	ldr	r2, [r3, #12]
 8007356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	405a      	eors	r2, r3
 800735c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	4013      	ands	r3, r2
 8007362:	2b00      	cmp	r3, #0
 8007364:	f040 80a0 	bne.w	80074a8 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8007368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	4618      	mov	r0, r3
 800736e:	f7ff ffa7 	bl	80072c0 <xIsIPInARPCache>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 8097 	bne.w	80074a8 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800737e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007380:	68db      	ldr	r3, [r3, #12]
 8007382:	4619      	mov	r1, r3
 8007384:	4610      	mov	r0, r2
 8007386:	f000 fbe1 	bl	8007b4c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 800738a:	2301      	movs	r3, #1
 800738c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8007390:	e08a      	b.n	80074a8 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800739a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800739e:	330e      	adds	r3, #14
 80073a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 80073a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073a8:	3308      	adds	r3, #8
 80073aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 80073ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80073b2:	799b      	ldrb	r3, [r3, #6]
 80073b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 80073b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80073bc:	2b06      	cmp	r3, #6
 80073be:	d003      	beq.n	80073c8 <xCheckRequiresARPResolution+0xa8>
 80073c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80073c4:	2b11      	cmp	r3, #17
 80073c6:	d171      	bne.n	80074ac <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 80073c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80073cc:	f006 ff68 	bl	800e2a0 <xIPv6_GetIPType>
 80073d0:	4603      	mov	r3, r0
 80073d2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 80073d6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80073da:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d00d      	beq.n	80073fe <xCheckRequiresARPResolution+0xde>
 80073e2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d007      	beq.n	80073fa <xCheckRequiresARPResolution+0xda>
 80073ea:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80073ee:	2b04      	cmp	r3, #4
 80073f0:	d101      	bne.n	80073f6 <xCheckRequiresARPResolution+0xd6>
 80073f2:	4b32      	ldr	r3, [pc, #200]	@ (80074bc <xCheckRequiresARPResolution+0x19c>)
 80073f4:	e004      	b.n	8007400 <xCheckRequiresARPResolution+0xe0>
 80073f6:	4b32      	ldr	r3, [pc, #200]	@ (80074c0 <xCheckRequiresARPResolution+0x1a0>)
 80073f8:	e002      	b.n	8007400 <xCheckRequiresARPResolution+0xe0>
 80073fa:	4b32      	ldr	r3, [pc, #200]	@ (80074c4 <xCheckRequiresARPResolution+0x1a4>)
 80073fc:	e000      	b.n	8007400 <xCheckRequiresARPResolution+0xe0>
 80073fe:	4b32      	ldr	r3, [pc, #200]	@ (80074c8 <xCheckRequiresARPResolution+0x1a8>)
 8007400:	461a      	mov	r2, r3
 8007402:	4832      	ldr	r0, [pc, #200]	@ (80074cc <xCheckRequiresARPResolution+0x1ac>)
 8007404:	f01b f9a6 	bl	8022754 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8007408:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800740c:	2b01      	cmp	r3, #1
 800740e:	d14d      	bne.n	80074ac <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	2250      	movs	r2, #80	@ 0x50
 8007416:	2100      	movs	r1, #0
 8007418:	4618      	mov	r0, r3
 800741a:	f01b fcc4 	bl	8022da6 <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800741e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8007422:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8007426:	4619      	mov	r1, r3
 8007428:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800742c:	f004 fe0e 	bl	800c04c <eNDGetCacheEntry>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8007436:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <xCheckRequiresARPResolution+0x12e>
 800743e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <xCheckRequiresARPResolution+0x12a>
 8007446:	4c22      	ldr	r4, [pc, #136]	@ (80074d0 <xCheckRequiresARPResolution+0x1b0>)
 8007448:	e002      	b.n	8007450 <xCheckRequiresARPResolution+0x130>
 800744a:	4c22      	ldr	r4, [pc, #136]	@ (80074d4 <xCheckRequiresARPResolution+0x1b4>)
 800744c:	e000      	b.n	8007450 <xCheckRequiresARPResolution+0x130>
 800744e:	4c22      	ldr	r4, [pc, #136]	@ (80074d8 <xCheckRequiresARPResolution+0x1b8>)
 8007450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007452:	f107 010c 	add.w	r1, r7, #12
 8007456:	2250      	movs	r2, #80	@ 0x50
 8007458:	4618      	mov	r0, r3
 800745a:	f006 ff79 	bl	800e350 <pcEndpointName>
 800745e:	4603      	mov	r3, r0
 8007460:	461a      	mov	r2, r3
 8007462:	4621      	mov	r1, r4
 8007464:	481d      	ldr	r0, [pc, #116]	@ (80074dc <xCheckRequiresARPResolution+0x1bc>)
 8007466:	f01b f975 	bl	8022754 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 800746a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800746e:	2b00      	cmp	r3, #0
 8007470:	d11c      	bne.n	80074ac <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8007472:	2356      	movs	r3, #86	@ 0x56
 8007474:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8007476:	2100      	movs	r1, #0
 8007478:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800747a:	f010 fa5b 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 800747e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8007480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00c      	beq.n	80074a0 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800748a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800748c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007494:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8007496:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800749a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800749c:	f005 f842 	bl	800c524 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 80074a0:	2301      	movs	r3, #1
 80074a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 80074a6:	e001      	b.n	80074ac <xCheckRequiresARPResolution+0x18c>
                   break;
 80074a8:	bf00      	nop
 80074aa:	e000      	b.n	80074ae <xCheckRequiresARPResolution+0x18e>
                   break;
 80074ac:	bf00      	nop
    }

    return xNeedsARPResolution;
 80074ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3794      	adds	r7, #148	@ 0x94
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd90      	pop	{r4, r7, pc}
 80074ba:	bf00      	nop
 80074bc:	08024b98 	.word	0x08024b98
 80074c0:	08024ba4 	.word	0x08024ba4
 80074c4:	08024bac 	.word	0x08024bac
 80074c8:	08024bb8 	.word	0x08024bb8
 80074cc:	08024bc0 	.word	0x08024bc0
 80074d0:	08024bec 	.word	0x08024bec
 80074d4:	08024bf0 	.word	0x08024bf0
 80074d8:	08024bf8 	.word	0x08024bf8
 80074dc:	08024c00 	.word	0x08024c00

080074e0 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b084      	sub	sp, #16
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
 80074e8:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d026      	beq.n	800753e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
 80074f4:	e020      	b.n	8007538 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80074f6:	4a14      	ldr	r2, [pc, #80]	@ (8007548 <vARPRefreshCacheEntryAge+0x68>)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	4413      	add	r3, r2
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	683a      	ldr	r2, [r7, #0]
 8007502:	429a      	cmp	r2, r3
 8007504:	d115      	bne.n	8007532 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	4a0f      	ldr	r2, [pc, #60]	@ (8007548 <vARPRefreshCacheEntryAge+0x68>)
 800750c:	4413      	add	r3, r2
 800750e:	3304      	adds	r3, #4
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	2206      	movs	r2, #6
 8007514:	4618      	mov	r0, r3
 8007516:	f01c face 	bl	8023ab6 <memcmp>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d108      	bne.n	8007532 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8007520:	4a09      	ldr	r2, [pc, #36]	@ (8007548 <vARPRefreshCacheEntryAge+0x68>)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	011b      	lsls	r3, r3, #4
 8007526:	4413      	add	r3, r2
 8007528:	330a      	adds	r3, #10
 800752a:	2296      	movs	r2, #150	@ 0x96
 800752c:	701a      	strb	r2, [r3, #0]
                    break;
 800752e:	bf00      	nop
                }
            }
        }
    }
}
 8007530:	e005      	b.n	800753e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	3301      	adds	r3, #1
 8007536:	60fb      	str	r3, [r7, #12]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2b05      	cmp	r3, #5
 800753c:	dddb      	ble.n	80074f6 <vARPRefreshCacheEntryAge+0x16>
}
 800753e:	bf00      	nop
 8007540:	3710      	adds	r7, #16
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	20000f64 	.word	0x20000f64

0800754c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b088      	sub	sp, #32
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8007558:	f107 0310 	add.w	r3, r7, #16
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f85b 	bl	800761c <prvFindCacheEntry>
 8007566:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d150      	bne.n	8007610 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b00      	cmp	r3, #0
 8007572:	db0e      	blt.n	8007592 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	db0e      	blt.n	800759c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	011b      	lsls	r3, r3, #4
 8007582:	4a25      	ldr	r2, [pc, #148]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 8007584:	4413      	add	r3, r2
 8007586:	2210      	movs	r2, #16
 8007588:	2100      	movs	r1, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f01b fc0b 	bl	8022da6 <memset>
 8007590:	e004      	b.n	800759c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	db01      	blt.n	800759c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	4a1e      	ldr	r2, [pc, #120]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	4413      	add	r3, r2
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01f      	beq.n	80075ee <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	011b      	lsls	r3, r3, #4
 80075b2:	4a19      	ldr	r2, [pc, #100]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 80075b4:	4413      	add	r3, r2
 80075b6:	3304      	adds	r3, #4
 80075b8:	68f9      	ldr	r1, [r7, #12]
 80075ba:	2206      	movs	r2, #6
 80075bc:	4618      	mov	r0, r3
 80075be:	f01b fae5 	bl	8022b8c <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	4a14      	ldr	r2, [pc, #80]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	4413      	add	r3, r2
 80075ca:	330a      	adds	r3, #10
 80075cc:	2296      	movs	r2, #150	@ 0x96
 80075ce:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 80075d0:	69bb      	ldr	r3, [r7, #24]
 80075d2:	4a11      	ldr	r2, [pc, #68]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 80075d4:	011b      	lsls	r3, r3, #4
 80075d6:	4413      	add	r3, r2
 80075d8:	330b      	adds	r3, #11
 80075da:	2201      	movs	r2, #1
 80075dc:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 80075de:	69bb      	ldr	r3, [r7, #24]
 80075e0:	4a0d      	ldr	r2, [pc, #52]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	4413      	add	r3, r2
 80075e6:	330c      	adds	r3, #12
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 80075ec:	e010      	b.n	8007610 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	da0d      	bge.n	8007610 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	4a08      	ldr	r2, [pc, #32]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 80075f8:	011b      	lsls	r3, r3, #4
 80075fa:	4413      	add	r3, r2
 80075fc:	330a      	adds	r3, #10
 80075fe:	2205      	movs	r2, #5
 8007600:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	4a04      	ldr	r2, [pc, #16]	@ (8007618 <vARPRefreshCacheEntry+0xcc>)
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	4413      	add	r3, r2
 800760a:	330b      	adds	r3, #11
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
}
 8007610:	bf00      	nop
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000f64 	.word	0x20000f64

0800761c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b08a      	sub	sp, #40	@ 0x28
 8007620:	af00      	add	r7, sp, #0
 8007622:	60f8      	str	r0, [r7, #12]
 8007624:	60b9      	str	r1, [r7, #8]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800762a:	2300      	movs	r3, #0
 800762c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800762e:	2300      	movs	r3, #0
 8007630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007638:	2102      	movs	r1, #2
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f006 fb24 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	bf14      	ite	ne
 8007646:	2301      	movne	r3, #1
 8007648:	2300      	moveq	r3, #0
 800764a:	b2db      	uxtb	r3, r3
 800764c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800764e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007652:	3b01      	subs	r3, #1
 8007654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	f04f 32ff 	mov.w	r2, #4294967295
 8007666:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	2200      	movs	r2, #0
 800766c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800766e:	2300      	movs	r3, #0
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
 8007672:	e074      	b.n	800775e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8007674:	2300      	movs	r3, #0
 8007676:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	011b      	lsls	r3, r3, #4
 8007682:	4a3b      	ldr	r2, [pc, #236]	@ (8007770 <prvFindCacheEntry+0x154>)
 8007684:	4413      	add	r3, r2
 8007686:	3304      	adds	r3, #4
 8007688:	68f9      	ldr	r1, [r7, #12]
 800768a:	2206      	movs	r2, #6
 800768c:	4618      	mov	r0, r3
 800768e:	f01c fa12 	bl	8023ab6 <memcmp>
 8007692:	4603      	mov	r3, r0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d101      	bne.n	800769c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8007698:	2301      	movs	r3, #1
 800769a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800769c:	4a34      	ldr	r2, [pc, #208]	@ (8007770 <prvFindCacheEntry+0x154>)
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	011b      	lsls	r3, r3, #4
 80076a2:	4413      	add	r3, r2
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68ba      	ldr	r2, [r7, #8]
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d125      	bne.n	80076f8 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d103      	bne.n	80076ba <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076b6:	601a      	str	r2, [r3, #0]
                break;
 80076b8:	e054      	b.n	8007764 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d017      	beq.n	80076f0 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80076c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007770 <prvFindCacheEntry+0x154>)
 80076c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	4413      	add	r3, r2
 80076c8:	330a      	adds	r3, #10
 80076ca:	2296      	movs	r2, #150	@ 0x96
 80076cc:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80076ce:	4a28      	ldr	r2, [pc, #160]	@ (8007770 <prvFindCacheEntry+0x154>)
 80076d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d2:	011b      	lsls	r3, r3, #4
 80076d4:	4413      	add	r3, r2
 80076d6:	330b      	adds	r3, #11
 80076d8:	2201      	movs	r2, #1
 80076da:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 80076dc:	4a24      	ldr	r2, [pc, #144]	@ (8007770 <prvFindCacheEntry+0x154>)
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	011b      	lsls	r3, r3, #4
 80076e2:	4413      	add	r3, r2
 80076e4:	330c      	adds	r3, #12
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 80076ea:	2301      	movs	r3, #1
 80076ec:	61fb      	str	r3, [r7, #28]
                break;
 80076ee:	e039      	b.n	8007764 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	e02f      	b.n	8007758 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d017      	beq.n	800772e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80076fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007770 <prvFindCacheEntry+0x154>)
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	011b      	lsls	r3, r3, #4
 8007704:	4413      	add	r3, r2
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2103      	movs	r1, #3
 800770a:	4618      	mov	r0, r3
 800770c:	f006 fabc 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 8007710:	4603      	mov	r3, r0
 8007712:	2b00      	cmp	r3, #0
 8007714:	bf14      	ite	ne
 8007716:	2301      	movne	r3, #1
 8007718:	2300      	moveq	r3, #0
 800771a:	b2db      	uxtb	r3, r3
 800771c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	429a      	cmp	r2, r3
 8007724:	d118      	bne.n	8007758 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800772a:	605a      	str	r2, [r3, #4]
 800772c:	e014      	b.n	8007758 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800772e:	4a10      	ldr	r2, [pc, #64]	@ (8007770 <prvFindCacheEntry+0x154>)
 8007730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007732:	011b      	lsls	r3, r3, #4
 8007734:	4413      	add	r3, r2
 8007736:	330a      	adds	r3, #10
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800773e:	429a      	cmp	r2, r3
 8007740:	d90a      	bls.n	8007758 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8007742:	4a0b      	ldr	r2, [pc, #44]	@ (8007770 <prvFindCacheEntry+0x154>)
 8007744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	4413      	add	r3, r2
 800774a:	330a      	adds	r3, #10
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007756:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	3301      	adds	r3, #1
 800775c:	627b      	str	r3, [r7, #36]	@ 0x24
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	2b05      	cmp	r3, #5
 8007762:	dd87      	ble.n	8007674 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8007764:	69fb      	ldr	r3, [r7, #28]
}
 8007766:	4618      	mov	r0, r3
 8007768:	3728      	adds	r7, #40	@ 0x28
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	20000f64 	.word	0x20000f64

08007774 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d104      	bne.n	8007794 <eARPGetCacheEntry+0x20>
 800778a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 800778e:	483c      	ldr	r0, [pc, #240]	@ (8007880 <eARPGetCacheEntry+0x10c>)
 8007790:	f7fa f902 	bl	8001998 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <eARPGetCacheEntry+0x30>
 800779a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800779e:	4838      	ldr	r0, [pc, #224]	@ (8007880 <eARPGetCacheEntry+0x10c>)
 80077a0:	f7fa f8fa 	bl	8001998 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d104      	bne.n	80077b4 <eARPGetCacheEntry+0x40>
 80077aa:	f240 31cb 	movw	r1, #971	@ 0x3cb
 80077ae:	4834      	ldr	r0, [pc, #208]	@ (8007880 <eARPGetCacheEntry+0x10c>)
 80077b0:	f7fa f8f2 	bl	8001998 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 80077c0:	2100      	movs	r1, #0
 80077c2:	6978      	ldr	r0, [r7, #20]
 80077c4:	f006 f9d4 	bl	800db70 <FreeRTOS_FindEndPointOnIP_IPv4>
 80077c8:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80077ca:	6978      	ldr	r0, [r7, #20]
 80077cc:	f003 fc3c 	bl	800b048 <xIsIPv4Multicast>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d021      	beq.n	800781a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 80077d6:	68b9      	ldr	r1, [r7, #8]
 80077d8:	6978      	ldr	r0, [r7, #20]
 80077da:	f003 fd63 	bl	800b2a4 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 80077de:	2302      	movs	r3, #2
 80077e0:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80077e2:	2000      	movs	r0, #0
 80077e4:	f006 f978 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 80077e8:	61b8      	str	r0, [r7, #24]

            for( ;
 80077ea:	e012      	b.n	8007812 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 80077ec:	69bb      	ldr	r3, [r7, #24]
 80077ee:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80077f2:	f003 0304 	and.w	r3, r3, #4
 80077f6:	b2db      	uxtb	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d105      	bne.n	8007808 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8007802:	2301      	movs	r3, #1
 8007804:	77fb      	strb	r3, [r7, #31]
                    break;
 8007806:	e035      	b.n	8007874 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8007808:	69b9      	ldr	r1, [r7, #24]
 800780a:	2000      	movs	r0, #0
 800780c:	f006 f986 	bl	800db1c <FreeRTOS_NextEndPoint>
 8007810:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d1e9      	bne.n	80077ec <eARPGetCacheEntry+0x78>
 8007818:	e02c      	b.n	8007874 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	061a      	lsls	r2, r3, #24
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	021b      	lsls	r3, r3, #8
 8007822:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007826:	431a      	orrs	r2, r3
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	0a1b      	lsrs	r3, r3, #8
 800782c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007830:	431a      	orrs	r2, r3
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	0e1b      	lsrs	r3, r3, #24
 8007836:	4313      	orrs	r3, r2
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2bff      	cmp	r3, #255	@ 0xff
 800783c:	d113      	bne.n	8007866 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800783e:	68bb      	ldr	r3, [r7, #8]
 8007840:	4a10      	ldr	r2, [pc, #64]	@ (8007884 <eARPGetCacheEntry+0x110>)
 8007842:	6811      	ldr	r1, [r2, #0]
 8007844:	6019      	str	r1, [r3, #0]
 8007846:	8892      	ldrh	r2, [r2, #4]
 8007848:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 800784a:	2104      	movs	r1, #4
 800784c:	6978      	ldr	r0, [r7, #20]
 800784e:	f006 fa1b 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 8007852:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d002      	beq.n	8007860 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	69ba      	ldr	r2, [r7, #24]
 800785e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8007860:	2301      	movs	r3, #1
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e006      	b.n	8007874 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	68b9      	ldr	r1, [r7, #8]
 800786a:	68f8      	ldr	r0, [r7, #12]
 800786c:	f000 f80c 	bl	8007888 <eARPGetCacheEntryGateWay>
 8007870:	4603      	mov	r3, r0
 8007872:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8007874:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007876:	4618      	mov	r0, r3
 8007878:	3720      	adds	r7, #32
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	08024c34 	.word	0x08024c34
 8007884:	08027edc 	.word	0x08027edc

08007888 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af00      	add	r7, sp, #0
 800788e:	60f8      	str	r0, [r7, #12]
 8007890:	60b9      	str	r1, [r7, #8]
 8007892:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007894:	2300      	movs	r3, #0
 8007896:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 80078a4:	2104      	movs	r1, #4
 80078a6:	69b8      	ldr	r0, [r7, #24]
 80078a8:	f006 f9ee 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 80078ac:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d11b      	bne.n	80078ec <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	68b9      	ldr	r1, [r7, #8]
 80078b8:	69b8      	ldr	r0, [r7, #24]
 80078ba:	f000 f86b 	bl	8007994 <prvCacheLookup>
 80078be:	4603      	mov	r3, r0
 80078c0:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 80078c2:	7ffb      	ldrb	r3, [r7, #31]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d017      	beq.n	80078f8 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 80078c8:	2040      	movs	r0, #64	@ 0x40
 80078ca:	f006 fca9 	bl	800e220 <FreeRTOS_FindGateWay>
 80078ce:	4602      	mov	r2, r0
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d004      	beq.n	80078e6 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	61bb      	str	r3, [r7, #24]
 80078e4:	e008      	b.n	80078f8 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 80078e6:	2300      	movs	r3, #0
 80078e8:	61bb      	str	r3, [r7, #24]
 80078ea:	e005      	b.n	80078f8 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 80078f8:	7ffb      	ldrb	r3, [r7, #31]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d13f      	bne.n	800797e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d102      	bne.n	800790a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8007904:	2302      	movs	r3, #2
 8007906:	77fb      	strb	r3, [r7, #31]
 8007908:	e039      	b.n	800797e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	68b9      	ldr	r1, [r7, #8]
 800790e:	69b8      	ldr	r0, [r7, #24]
 8007910:	f000 f840 	bl	8007994 <prvCacheLookup>
 8007914:	4603      	mov	r3, r0
 8007916:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8007918:	7ffb      	ldrb	r3, [r7, #31]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d103      	bne.n	8007926 <eARPGetCacheEntryGateWay+0x9e>
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	429a      	cmp	r2, r3
 8007924:	d028      	beq.n	8007978 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	061a      	lsls	r2, r3, #24
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	021b      	lsls	r3, r3, #8
 800792e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007932:	431a      	orrs	r2, r3
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	0a1b      	lsrs	r3, r3, #8
 8007938:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800793c:	431a      	orrs	r2, r3
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	0e1b      	lsrs	r3, r3, #24
 8007942:	ea42 0103 	orr.w	r1, r2, r3
 8007946:	7ffb      	ldrb	r3, [r7, #31]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d101      	bne.n	8007950 <eARPGetCacheEntryGateWay+0xc8>
 800794c:	480e      	ldr	r0, [pc, #56]	@ (8007988 <eARPGetCacheEntryGateWay+0x100>)
 800794e:	e000      	b.n	8007952 <eARPGetCacheEntryGateWay+0xca>
 8007950:	480e      	ldr	r0, [pc, #56]	@ (800798c <eARPGetCacheEntryGateWay+0x104>)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	061a      	lsls	r2, r3, #24
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	021b      	lsls	r3, r3, #8
 800795a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800795e:	431a      	orrs	r2, r3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	0a1b      	lsrs	r3, r3, #8
 8007964:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007968:	431a      	orrs	r2, r3
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	0e1b      	lsrs	r3, r3, #24
 800796e:	4313      	orrs	r3, r2
 8007970:	4602      	mov	r2, r0
 8007972:	4807      	ldr	r0, [pc, #28]	@ (8007990 <eARPGetCacheEntryGateWay+0x108>)
 8007974:	f01a feee 	bl	8022754 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	69ba      	ldr	r2, [r7, #24]
 800797c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800797e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007980:	4618      	mov	r0, r3
 8007982:	3720      	adds	r7, #32
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	08024c60 	.word	0x08024c60
 800798c:	08024c64 	.word	0x08024c64
 8007990:	08024c6c 	.word	0x08024c6c

08007994 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 80079a0:	2300      	movs	r3, #0
 80079a2:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80079a4:	2300      	movs	r3, #0
 80079a6:	617b      	str	r3, [r7, #20]
 80079a8:	e02a      	b.n	8007a00 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80079aa:	4a19      	ldr	r2, [pc, #100]	@ (8007a10 <prvCacheLookup+0x7c>)
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	011b      	lsls	r3, r3, #4
 80079b0:	4413      	add	r3, r2
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d11f      	bne.n	80079fa <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80079ba:	4a15      	ldr	r2, [pc, #84]	@ (8007a10 <prvCacheLookup+0x7c>)
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	011b      	lsls	r3, r3, #4
 80079c0:	4413      	add	r3, r2
 80079c2:	330b      	adds	r3, #11
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d102      	bne.n	80079d0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 80079ca:	2302      	movs	r3, #2
 80079cc:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 80079ce:	e01a      	b.n	8007a06 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80079d0:	68b8      	ldr	r0, [r7, #8]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	011b      	lsls	r3, r3, #4
 80079d6:	4a0e      	ldr	r2, [pc, #56]	@ (8007a10 <prvCacheLookup+0x7c>)
 80079d8:	4413      	add	r3, r2
 80079da:	3304      	adds	r3, #4
 80079dc:	2206      	movs	r2, #6
 80079de:	4619      	mov	r1, r3
 80079e0:	f01b f8d4 	bl	8022b8c <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 80079e4:	4a0a      	ldr	r2, [pc, #40]	@ (8007a10 <prvCacheLookup+0x7c>)
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	4413      	add	r3, r2
 80079ec:	330c      	adds	r3, #12
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80079f4:	2301      	movs	r3, #1
 80079f6:	74fb      	strb	r3, [r7, #19]
                break;
 80079f8:	e005      	b.n	8007a06 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	3301      	adds	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	2b05      	cmp	r3, #5
 8007a04:	ddd1      	ble.n	80079aa <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8007a06:	7cfb      	ldrb	r3, [r7, #19]
    }
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3718      	adds	r7, #24
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	20000f64 	.word	0x20000f64

08007a14 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	60fb      	str	r3, [r7, #12]
 8007a1e:	e048      	b.n	8007ab2 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007a20:	4a47      	ldr	r2, [pc, #284]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	011b      	lsls	r3, r3, #4
 8007a26:	4413      	add	r3, r2
 8007a28:	330a      	adds	r3, #10
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d03d      	beq.n	8007aac <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007a30:	4a43      	ldr	r2, [pc, #268]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	011b      	lsls	r3, r3, #4
 8007a36:	4413      	add	r3, r2
 8007a38:	330a      	adds	r3, #10
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	3b01      	subs	r3, #1
 8007a3e:	b2d9      	uxtb	r1, r3
 8007a40:	4a3f      	ldr	r2, [pc, #252]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	011b      	lsls	r3, r3, #4
 8007a46:	4413      	add	r3, r2
 8007a48:	330a      	adds	r3, #10
 8007a4a:	460a      	mov	r2, r1
 8007a4c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8007a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	011b      	lsls	r3, r3, #4
 8007a54:	4413      	add	r3, r2
 8007a56:	330b      	adds	r3, #11
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d108      	bne.n	8007a70 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007a5e:	4a38      	ldr	r2, [pc, #224]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	011b      	lsls	r3, r3, #4
 8007a64:	4413      	add	r3, r2
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f000 f8d7 	bl	8007c1c <FreeRTOS_OutputARPRequest>
 8007a6e:	e00f      	b.n	8007a90 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007a70:	4a33      	ldr	r2, [pc, #204]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	4413      	add	r3, r2
 8007a78:	330a      	adds	r3, #10
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	2b03      	cmp	r3, #3
 8007a7e:	d807      	bhi.n	8007a90 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007a80:	4a2f      	ldr	r2, [pc, #188]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	011b      	lsls	r3, r3, #4
 8007a86:	4413      	add	r3, r2
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 f8c6 	bl	8007c1c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8007a90:	4a2b      	ldr	r2, [pc, #172]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	4413      	add	r3, r2
 8007a98:	330a      	adds	r3, #10
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d105      	bne.n	8007aac <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8007aa0:	4a27      	ldr	r2, [pc, #156]	@ (8007b40 <vARPAgeCache+0x12c>)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	011b      	lsls	r3, r3, #4
 8007aa6:	4413      	add	r3, r2
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	3301      	adds	r3, #1
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b05      	cmp	r3, #5
 8007ab6:	ddb3      	ble.n	8007a20 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8007ab8:	f7fd f8dc 	bl	8004c74 <xTaskGetTickCount>
 8007abc:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8007abe:	4b21      	ldr	r3, [pc, #132]	@ (8007b44 <vARPAgeCache+0x130>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <vARPAgeCache+0xc2>
 8007ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b44 <vARPAgeCache+0x130>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d92f      	bls.n	8007b36 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8007ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8007b48 <vARPAgeCache+0x134>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8007adc:	e025      	b.n	8007b2a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007ae4:	f003 0310 	and.w	r3, r3, #16
 8007ae8:	b2db      	uxtb	r3, r3
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d019      	beq.n	8007b22 <vARPAgeCache+0x10e>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d015      	beq.n	8007b22 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007afc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <vARPAgeCache+0xf8>
 8007b06:	2b01      	cmp	r3, #1
 8007b08:	d007      	beq.n	8007b1a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8007b0a:	e00a      	b.n	8007b22 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4619      	mov	r1, r3
 8007b12:	68b8      	ldr	r0, [r7, #8]
 8007b14:	f000 f81a 	bl	8007b4c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8007b18:	e003      	b.n	8007b22 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8007b1a:	68b8      	ldr	r0, [r7, #8]
 8007b1c:	f005 f822 	bl	800cb64 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8007b20:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007b28:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1d6      	bne.n	8007ade <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007b30:	4a04      	ldr	r2, [pc, #16]	@ (8007b44 <vARPAgeCache+0x130>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6013      	str	r3, [r2, #0]
        }
    }
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000f64 	.word	0x20000f64
 8007b44:	20000fc4 	.word	0x20000fc4
 8007b48:	20001528 	.word	0x20001528

08007b4c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b086      	sub	sp, #24
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007b5c:	f003 0304 	and.w	r3, r3, #4
 8007b60:	b2db      	uxtb	r3, r3
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d156      	bne.n	8007c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d052      	beq.n	8007c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8007b6e:	2100      	movs	r1, #0
 8007b70:	202a      	movs	r0, #42	@ 0x2a
 8007b72:	f00f fedf 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 8007b76:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8007b78:	693b      	ldr	r3, [r7, #16]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d04a      	beq.n	8007c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	683a      	ldr	r2, [r7, #0]
 8007b82:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007b94:	6938      	ldr	r0, [r7, #16]
 8007b96:	f000 f855 	bl	8007c44 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007ba0:	d812      	bhi.n	8007bc8 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	e008      	b.n	8007bbc <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	3301      	adds	r3, #1
 8007bba:	617b      	str	r3, [r7, #20]
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8007bc0:	ddf3      	ble.n	8007baa <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8007bc2:	693b      	ldr	r3, [r7, #16]
 8007bc4:	223c      	movs	r2, #60	@ 0x3c
 8007bc6:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8007bc8:	f002 ff7c 	bl	800aac4 <xIsCallingFromIPTask>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00f      	beq.n	8007bf2 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d01b      	beq.n	8007c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8007be2:	68db      	ldr	r3, [r3, #12]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8007bea:	2201      	movs	r2, #1
 8007bec:	6939      	ldr	r1, [r7, #16]
 8007bee:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8007bf0:	e010      	b.n	8007c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8007bf2:	2302      	movs	r3, #2
 8007bf4:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8007bfa:	f107 0308 	add.w	r3, r7, #8
 8007bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 f81c 	bl	8009c40 <xSendEventStructToIPTask>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d102      	bne.n	8007c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8007c0e:	6938      	ldr	r0, [r7, #16]
 8007c10:	f00f fef8 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
    }
 8007c14:	bf00      	nop
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8007c24:	210c      	movs	r1, #12
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f006 f82e 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 8007c2c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f7ff ff88 	bl	8007b4c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8007c3c:	bf00      	nop
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b086      	sub	sp, #24
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <vARPGenerateRequestPacket+0x18>
 8007c52:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007c56:	4828      	ldr	r0, [pc, #160]	@ (8007cf8 <vARPGenerateRequestPacket+0xb4>)
 8007c58:	f7f9 fe9e 	bl	8001998 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c60:	2b29      	cmp	r3, #41	@ 0x29
 8007c62:	d804      	bhi.n	8007c6e <vARPGenerateRequestPacket+0x2a>
 8007c64:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007c68:	4823      	ldr	r0, [pc, #140]	@ (8007cf8 <vARPGenerateRequestPacket+0xb4>)
 8007c6a:	f7f9 fe95 	bl	8001998 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d104      	bne.n	8007c80 <vARPGenerateRequestPacket+0x3c>
 8007c76:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8007c7a:	481f      	ldr	r0, [pc, #124]	@ (8007cf8 <vARPGenerateRequestPacket+0xb4>)
 8007c7c:	f7f9 fe8c 	bl	8001998 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007c86:	4b1d      	ldr	r3, [pc, #116]	@ (8007cfc <vARPGenerateRequestPacket+0xb8>)
 8007c88:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8007c8e:	2226      	movs	r2, #38	@ 0x26
 8007c90:	6939      	ldr	r1, [r7, #16]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f01a ff7a 	bl	8022b8c <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c9c:	33e8      	adds	r3, #232	@ 0xe8
 8007c9e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	3306      	adds	r3, #6
 8007ca4:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007ca6:	2206      	movs	r2, #6
 8007ca8:	6939      	ldr	r1, [r7, #16]
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	f01a ff6e 	bl	8022b8c <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb4:	33e8      	adds	r3, #232	@ 0xe8
 8007cb6:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	3316      	adds	r3, #22
 8007cbc:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007cbe:	2206      	movs	r2, #6
 8007cc0:	6939      	ldr	r1, [r7, #16]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f01a ff62 	bl	8022b8c <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ccc:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	331c      	adds	r3, #28
 8007cd2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	461a      	mov	r2, r3
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	695a      	ldr	r2, [r3, #20]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	222a      	movs	r2, #42	@ 0x2a
 8007cec:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 8007cee:	bf00      	nop
 8007cf0:	3718      	adds	r7, #24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	08024c34 	.word	0x08024c34
 8007cfc:	08027ea4 	.word	0x08027ea4

08007d00 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d01b      	beq.n	8007d46 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60fb      	str	r3, [r7, #12]
 8007d12:	e014      	b.n	8007d3e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8007d14:	4a10      	ldr	r2, [pc, #64]	@ (8007d58 <FreeRTOS_ClearARP+0x58>)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	4413      	add	r3, r2
 8007d1c:	330c      	adds	r3, #12
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d108      	bne.n	8007d38 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	011b      	lsls	r3, r3, #4
 8007d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8007d58 <FreeRTOS_ClearARP+0x58>)
 8007d2c:	4413      	add	r3, r2
 8007d2e:	2210      	movs	r2, #16
 8007d30:	2100      	movs	r1, #0
 8007d32:	4618      	mov	r0, r3
 8007d34:	f01b f837 	bl	8022da6 <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	60fb      	str	r3, [r7, #12]
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b05      	cmp	r3, #5
 8007d42:	dde7      	ble.n	8007d14 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007d44:	e004      	b.n	8007d50 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007d46:	2260      	movs	r2, #96	@ 0x60
 8007d48:	2100      	movs	r1, #0
 8007d4a:	4803      	ldr	r0, [pc, #12]	@ (8007d58 <FreeRTOS_ClearARP+0x58>)
 8007d4c:	f01b f82b 	bl	8022da6 <memset>
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	20000f64 	.word	0x20000f64

08007d5c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007d60:	f000 fc8a 	bl	8008678 <vDNSCallbackInitialise>
        }
 8007d64:	bf00      	nop
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b088      	sub	sp, #32
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007d74:	2300      	movs	r3, #0
 8007d76:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007d78:	2048      	movs	r0, #72	@ 0x48
 8007d7a:	f7fe fdeb 	bl	8006954 <pvPortMalloc>
 8007d7e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007d80:	69bb      	ldr	r3, [r7, #24]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d057      	beq.n	8007e36 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007d86:	69bb      	ldr	r3, [r7, #24]
 8007d88:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 8007d8a:	2248      	movs	r2, #72	@ 0x48
 8007d8c:	2100      	movs	r1, #0
 8007d8e:	69f8      	ldr	r0, [r7, #28]
 8007d90:	f01b f809 	bl	8022da6 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	3338      	adds	r3, #56	@ 0x38
 8007da2:	220f      	movs	r2, #15
 8007da4:	68f9      	ldr	r1, [r7, #12]
 8007da6:	4618      	mov	r0, r3
 8007da8:	f01b fedc 	bl	8023b64 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	2200      	movs	r2, #0
 8007db0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f103 0220 	add.w	r2, r3, #32
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	2b02      	cmp	r3, #2
 8007dc2:	d003      	beq.n	8007dcc <pxNew_AddrInfo+0x64>
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	2b0a      	cmp	r3, #10
 8007dc8:	d01e      	beq.n	8007e08 <pxNew_AddrInfo+0xa0>
 8007dca:	e02b      	b.n	8007e24 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f003 f87d 	bl	800aecc <ulChar2u32>
 8007dd2:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	061a      	lsls	r2, r3, #24
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	021b      	lsls	r3, r3, #8
 8007ddc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007de0:	431a      	orrs	r2, r3
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	0a1b      	lsrs	r3, r3, #8
 8007de6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007dea:	ea42 0103 	orr.w	r1, r2, r3
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	0e1a      	lsrs	r2, r3, #24
 8007df2:	69fb      	ldr	r3, [r7, #28]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8007dfa:	69fb      	ldr	r3, [r7, #28]
 8007dfc:	2202      	movs	r2, #2
 8007dfe:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2204      	movs	r2, #4
 8007e04:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8007e06:	e016      	b.n	8007e36 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	220a      	movs	r2, #10
 8007e0c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	2210      	movs	r2, #16
 8007e12:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8007e14:	69fb      	ldr	r3, [r7, #28]
 8007e16:	3328      	adds	r3, #40	@ 0x28
 8007e18:	2210      	movs	r2, #16
 8007e1a:	6879      	ldr	r1, [r7, #4]
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f01a feb5 	bl	8022b8c <memcpy>
                        break;
 8007e22:	e008      	b.n	8007e36 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8007e24:	4806      	ldr	r0, [pc, #24]	@ (8007e40 <pxNew_AddrInfo+0xd8>)
 8007e26:	f01a fc95 	bl	8022754 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 8007e2a:	69b8      	ldr	r0, [r7, #24]
 8007e2c:	f7fe fe66 	bl	8006afc <vPortFree>
                    pxAddrInfo = NULL;
 8007e30:	2300      	movs	r3, #0
 8007e32:	61fb      	str	r3, [r7, #28]

                    break;
 8007e34:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8007e36:	69fb      	ldr	r3, [r7, #28]
    }
 8007e38:	4618      	mov	r0, r3
 8007e3a:	3720      	adds	r7, #32
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	08024cd8 	.word	0x08024cd8

08007e44 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00b      	beq.n	8007e6e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8007e56:	e007      	b.n	8007e68 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	69db      	ldr	r3, [r3, #28]
 8007e5c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7fe fe4c 	bl	8006afc <vPortFree>
                pxIterator = pxNext;
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1f4      	bne.n	8007e58 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8007e6e:	bf00      	nop
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b088      	sub	sp, #32
 8007e7a:	af02      	add	r7, sp, #8
 8007e7c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f002 fa92 	bl	800a3a8 <uxIPHeaderSizePacket>
 8007e84:	4603      	mov	r3, r0
 8007e86:	3316      	adds	r3, #22
 8007e88:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e8e:	697a      	ldr	r2, [r7, #20]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d829      	bhi.n	8007ee8 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	1ad3      	subs	r3, r2, r3
 8007e9c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	2b0b      	cmp	r3, #11
 8007ea2:	d921      	bls.n	8007ee8 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	4413      	add	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007eb6:	021b      	lsls	r3, r3, #8
 8007eb8:	b21a      	sxth	r2, r3
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007ebe:	0a1b      	lsrs	r3, r3, #8
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	b21b      	sxth	r3, r3
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	f107 0208 	add.w	r2, r7, #8
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	6939      	ldr	r1, [r7, #16]
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f000 fcb5 	bl	8008844 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff ffae 	bl	8007e44 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8007ee8:	2300      	movs	r3, #0
    }
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b086      	sub	sp, #24
 8007ef6:	af02      	add	r7, sp, #8
 8007ef8:	60f8      	str	r0, [r7, #12]
 8007efa:	60b9      	str	r1, [r7, #8]
 8007efc:	607a      	str	r2, [r7, #4]
 8007efe:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	9300      	str	r3, [sp, #0]
 8007f04:	2300      	movs	r3, #0
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	68b9      	ldr	r1, [r7, #8]
 8007f0a:	68f8      	ldr	r0, [r7, #12]
 8007f0c:	f000 f818 	bl	8007f40 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8007f10:	2301      	movs	r3, #1
    }
 8007f12:	4618      	mov	r0, r3
 8007f14:	3710      	adds	r7, #16
 8007f16:	46bd      	mov	sp, r7
 8007f18:	bd80      	pop	{r7, pc}
	...

08007f1c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8007f20:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8007f24:	2100      	movs	r1, #0
 8007f26:	4804      	ldr	r0, [pc, #16]	@ (8007f38 <FreeRTOS_dnsclear+0x1c>)
 8007f28:	f01a ff3d 	bl	8022da6 <memset>
        uxFreeEntry = 0U;
 8007f2c:	4b03      	ldr	r3, [pc, #12]	@ (8007f3c <FreeRTOS_dnsclear+0x20>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	601a      	str	r2, [r3, #0]
    }
 8007f32:	bf00      	nop
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000fd4 	.word	0x20000fd4
 8007f3c:	20001184 	.word	0x20001184

08007f40 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007f40:	b590      	push	{r4, r7, lr}
 8007f42:	b09b      	sub	sp, #108	@ 0x6c
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	60b9      	str	r1, [r7, #8]
 8007f4a:	607a      	str	r2, [r7, #4]
 8007f4c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8007f4e:	f7fc fe91 	bl	8004c74 <xTaskGetTickCount>
 8007f52:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <FreeRTOS_ProcessDNSCache+0x22>
 8007f5a:	21d8      	movs	r1, #216	@ 0xd8
 8007f5c:	4841      	ldr	r0, [pc, #260]	@ (8008064 <FreeRTOS_ProcessDNSCache+0x124>)
 8007f5e:	f7f9 fd1b 	bl	8001998 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d002      	beq.n	8007f6e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8007f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f70:	4a3d      	ldr	r2, [pc, #244]	@ (8008068 <FreeRTOS_ProcessDNSCache+0x128>)
 8007f72:	fba2 2303 	umull	r2, r3, r2, r3
 8007f76:	099b      	lsrs	r3, r3, #6
 8007f78:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8007f7a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8007f7e:	461a      	mov	r2, r3
 8007f80:	68b9      	ldr	r1, [r7, #8]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 f87a 	bl	800807c <prvFindEntryIndex>
 8007f88:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d110      	bne.n	8007fb2 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	2b01      	cmp	r3, #1
 8007f94:	d106      	bne.n	8007fa4 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007f96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007f9c:	68b9      	ldr	r1, [r7, #8]
 8007f9e:	f000 f8b1 	bl	8008104 <prvGetCacheIPEntry>
 8007fa2:	e013      	b.n	8007fcc <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007fa4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	6879      	ldr	r1, [r7, #4]
 8007fac:	f000 f94a 	bl	8008244 <prvUpdateCacheEntry>
 8007fb0:	e00c      	b.n	8007fcc <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d103      	bne.n	8007fc0 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e005      	b.n	8007fcc <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8007fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	6879      	ldr	r1, [r7, #4]
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f000 f994 	bl	80082f4 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <FreeRTOS_ProcessDNSCache+0x9a>
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d03f      	beq.n	800805a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 8007fda:	2302      	movs	r3, #2
 8007fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	691b      	ldr	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d00c      	beq.n	8008000 <FreeRTOS_ProcessDNSCache+0xc0>
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d10e      	bne.n	8008008 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8007ff0:	6818      	ldr	r0, [r3, #0]
 8007ff2:	6859      	ldr	r1, [r3, #4]
 8007ff4:	689a      	ldr	r2, [r3, #8]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 8007ffe:	e007      	b.n	8008010 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8008006:	e003      	b.n	8008010 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8008008:	4818      	ldr	r0, [pc, #96]	@ (800806c <FreeRTOS_ProcessDNSCache+0x12c>)
 800800a:	f01a fba3 	bl	8022754 <lUDPLoggingPrintf>
                        break;
 800800e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8008010:	f107 0214 	add.w	r2, r7, #20
 8008014:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8008018:	2328      	movs	r3, #40	@ 0x28
 800801a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800801c:	f007 fc62 	bl	800f8e4 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <FreeRTOS_ProcessDNSCache+0xea>
 8008026:	4912      	ldr	r1, [pc, #72]	@ (8008070 <FreeRTOS_ProcessDNSCache+0x130>)
 8008028:	e000      	b.n	800802c <FreeRTOS_ProcessDNSCache+0xec>
 800802a:	4912      	ldr	r1, [pc, #72]	@ (8008074 <FreeRTOS_ProcessDNSCache+0x134>)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	061a      	lsls	r2, r3, #24
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	021b      	lsls	r3, r3, #8
 8008034:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	0a1b      	lsrs	r3, r3, #8
 800803e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008042:	431a      	orrs	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	0e1b      	lsrs	r3, r3, #24
 8008048:	4313      	orrs	r3, r2
 800804a:	f107 0214 	add.w	r2, r7, #20
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	4613      	mov	r3, r2
 8008052:	68fa      	ldr	r2, [r7, #12]
 8008054:	4808      	ldr	r0, [pc, #32]	@ (8008078 <FreeRTOS_ProcessDNSCache+0x138>)
 8008056:	f01a fb7d 	bl	8022754 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 800805a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 800805c:	4618      	mov	r0, r3
 800805e:	3764      	adds	r7, #100	@ 0x64
 8008060:	46bd      	mov	sp, r7
 8008062:	bd90      	pop	{r4, r7, pc}
 8008064:	08024f54 	.word	0x08024f54
 8008068:	10624dd3 	.word	0x10624dd3
 800806c:	08024f88 	.word	0x08024f88
 8008070:	08024fb8 	.word	0x08024fb8
 8008074:	08024fc0 	.word	0x08024fc0
 8008078:	08024fc4 	.word	0x08024fc4

0800807c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]
 8008090:	e02d      	b.n	80080ee <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8008092:	4a1b      	ldr	r2, [pc, #108]	@ (8008100 <prvFindEntryIndex+0x84>)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	216c      	movs	r1, #108	@ 0x6c
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	4413      	add	r3, r2
 800809e:	3350      	adds	r3, #80	@ 0x50
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01f      	beq.n	80080e6 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	226c      	movs	r2, #108	@ 0x6c
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	3350      	adds	r3, #80	@ 0x50
 80080b0:	4a13      	ldr	r2, [pc, #76]	@ (8008100 <prvFindEntryIndex+0x84>)
 80080b2:	4413      	add	r3, r2
 80080b4:	68f9      	ldr	r1, [r7, #12]
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7f8 f912 	bl	80002e0 <strcmp>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d112      	bne.n	80080e8 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	490e      	ldr	r1, [pc, #56]	@ (8008100 <prvFindEntryIndex+0x84>)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	206c      	movs	r0, #108	@ 0x6c
 80080cc:	fb00 f303 	mul.w	r3, r0, r3
 80080d0:	440b      	add	r3, r1
 80080d2:	3310      	adds	r3, #16
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d106      	bne.n	80080e8 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 80080da:	2301      	movs	r3, #1
 80080dc:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	693a      	ldr	r2, [r7, #16]
 80080e2:	601a      	str	r2, [r3, #0]
                    break;
 80080e4:	e006      	b.n	80080f4 <prvFindEntryIndex+0x78>
                continue;
 80080e6:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	3301      	adds	r3, #1
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	d9ce      	bls.n	8008092 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 80080f4:	697b      	ldr	r3, [r7, #20]
    }
 80080f6:	4618      	mov	r0, r3
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000fd4 	.word	0x20000fd4

08008104 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8008104:	b580      	push	{r7, lr}
 8008106:	b088      	sub	sp, #32
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
 8008110:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8008112:	2300      	movs	r3, #0
 8008114:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8008116:	4a4a      	ldr	r2, [pc, #296]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	216c      	movs	r1, #108	@ 0x6c
 800811c:	fb01 f303 	mul.w	r3, r1, r3
 8008120:	4413      	add	r3, r2
 8008122:	3364      	adds	r3, #100	@ 0x64
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	1ad3      	subs	r3, r2, r3
 800812a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 800812c:	4a44      	ldr	r2, [pc, #272]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	216c      	movs	r1, #108	@ 0x6c
 8008132:	fb01 f303 	mul.w	r3, r1, r3
 8008136:	4413      	add	r3, r2
 8008138:	3360      	adds	r3, #96	@ 0x60
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	061a      	lsls	r2, r3, #24
 800813e:	4940      	ldr	r1, [pc, #256]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	206c      	movs	r0, #108	@ 0x6c
 8008144:	fb00 f303 	mul.w	r3, r0, r3
 8008148:	440b      	add	r3, r1
 800814a:	3360      	adds	r3, #96	@ 0x60
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	021b      	lsls	r3, r3, #8
 8008150:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008154:	431a      	orrs	r2, r3
 8008156:	493a      	ldr	r1, [pc, #232]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	206c      	movs	r0, #108	@ 0x6c
 800815c:	fb00 f303 	mul.w	r3, r0, r3
 8008160:	440b      	add	r3, r1
 8008162:	3360      	adds	r3, #96	@ 0x60
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	0a1b      	lsrs	r3, r3, #8
 8008168:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800816c:	431a      	orrs	r2, r3
 800816e:	4934      	ldr	r1, [pc, #208]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	206c      	movs	r0, #108	@ 0x6c
 8008174:	fb00 f303 	mul.w	r3, r0, r3
 8008178:	440b      	add	r3, r1
 800817a:	3360      	adds	r3, #96	@ 0x60
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	0e1b      	lsrs	r3, r3, #24
 8008180:	4313      	orrs	r3, r2
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	429a      	cmp	r2, r3
 8008186:	d24a      	bcs.n	800821e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8008188:	4a2d      	ldr	r2, [pc, #180]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	216c      	movs	r1, #108	@ 0x6c
 800818e:	fb01 f303 	mul.w	r3, r1, r3
 8008192:	4413      	add	r3, r2
 8008194:	3369      	adds	r3, #105	@ 0x69
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	4929      	ldr	r1, [pc, #164]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 800819a:	68fa      	ldr	r2, [r7, #12]
 800819c:	206c      	movs	r0, #108	@ 0x6c
 800819e:	fb00 f202 	mul.w	r2, r0, r2
 80081a2:	440a      	add	r2, r1
 80081a4:	3268      	adds	r2, #104	@ 0x68
 80081a6:	7812      	ldrb	r2, [r2, #0]
 80081a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80081ac:	fb01 f202 	mul.w	r2, r1, r2
 80081b0:	1a9b      	subs	r3, r3, r2
 80081b2:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80081b4:	7cfb      	ldrb	r3, [r7, #19]
 80081b6:	f003 0303 	and.w	r3, r3, #3
 80081ba:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 80081bc:	7cfb      	ldrb	r3, [r7, #19]
 80081be:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 80081c0:	4a1f      	ldr	r2, [pc, #124]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	216c      	movs	r1, #108	@ 0x6c
 80081c6:	fb01 f303 	mul.w	r3, r1, r3
 80081ca:	4413      	add	r3, r2
 80081cc:	3369      	adds	r3, #105	@ 0x69
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	3301      	adds	r3, #1
 80081d2:	b2d8      	uxtb	r0, r3
 80081d4:	4a1a      	ldr	r2, [pc, #104]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	216c      	movs	r1, #108	@ 0x6c
 80081da:	fb01 f303 	mul.w	r3, r1, r3
 80081de:	4413      	add	r3, r2
 80081e0:	3369      	adds	r3, #105	@ 0x69
 80081e2:	4602      	mov	r2, r0
 80081e4:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4613      	mov	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	4413      	add	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	68fa      	ldr	r2, [r7, #12]
 80081f2:	216c      	movs	r1, #108	@ 0x6c
 80081f4:	fb01 f202 	mul.w	r2, r1, r2
 80081f8:	4413      	add	r3, r2
 80081fa:	4a11      	ldr	r2, [pc, #68]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 80081fc:	4413      	add	r3, r2
 80081fe:	2214      	movs	r2, #20
 8008200:	4619      	mov	r1, r3
 8008202:	68b8      	ldr	r0, [r7, #8]
 8008204:	f01a fcc2 	bl	8022b8c <memcpy>
            isRead = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d010      	beq.n	8008234 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 f8dc 	bl	80083d4 <prvReadDNSCache>
 800821c:	e00a      	b.n	8008234 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800821e:	4a08      	ldr	r2, [pc, #32]	@ (8008240 <prvGetCacheIPEntry+0x13c>)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	216c      	movs	r1, #108	@ 0x6c
 8008224:	fb01 f303 	mul.w	r3, r1, r3
 8008228:	4413      	add	r3, r2
 800822a:	3350      	adds	r3, #80	@ 0x50
 800822c:	2200      	movs	r2, #0
 800822e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8008234:	69fb      	ldr	r3, [r7, #28]
    }
 8008236:	4618      	mov	r0, r3
 8008238:	3720      	adds	r7, #32
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}
 800823e:	bf00      	nop
 8008240:	20000fd4 	.word	0x20000fd4

08008244 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8008244:	b580      	push	{r7, lr}
 8008246:	b086      	sub	sp, #24
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8008252:	2300      	movs	r3, #0
 8008254:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8008256:	4a26      	ldr	r2, [pc, #152]	@ (80082f0 <prvUpdateCacheEntry+0xac>)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	216c      	movs	r1, #108	@ 0x6c
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	4413      	add	r3, r2
 8008262:	3368      	adds	r3, #104	@ 0x68
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b03      	cmp	r3, #3
 8008268:	d81b      	bhi.n	80082a2 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 800826a:	4a21      	ldr	r2, [pc, #132]	@ (80082f0 <prvUpdateCacheEntry+0xac>)
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	216c      	movs	r1, #108	@ 0x6c
 8008270:	fb01 f303 	mul.w	r3, r1, r3
 8008274:	4413      	add	r3, r2
 8008276:	3368      	adds	r3, #104	@ 0x68
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 800827c:	4a1c      	ldr	r2, [pc, #112]	@ (80082f0 <prvUpdateCacheEntry+0xac>)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	216c      	movs	r1, #108	@ 0x6c
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	4413      	add	r3, r2
 8008288:	3368      	adds	r3, #104	@ 0x68
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	3301      	adds	r3, #1
 800828e:	b2d8      	uxtb	r0, r3
 8008290:	4a17      	ldr	r2, [pc, #92]	@ (80082f0 <prvUpdateCacheEntry+0xac>)
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	216c      	movs	r1, #108	@ 0x6c
 8008296:	fb01 f303 	mul.w	r3, r1, r3
 800829a:	4413      	add	r3, r2
 800829c:	3368      	adds	r3, #104	@ 0x68
 800829e:	4602      	mov	r2, r0
 80082a0:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 80082a2:	697a      	ldr	r2, [r7, #20]
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	216c      	movs	r1, #108	@ 0x6c
 80082b0:	fb01 f202 	mul.w	r2, r1, r2
 80082b4:	4413      	add	r3, r2
 80082b6:	4a0e      	ldr	r2, [pc, #56]	@ (80082f0 <prvUpdateCacheEntry+0xac>)
 80082b8:	4413      	add	r3, r2
 80082ba:	2214      	movs	r2, #20
 80082bc:	6879      	ldr	r1, [r7, #4]
 80082be:	4618      	mov	r0, r3
 80082c0:	f01a fc64 	bl	8022b8c <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 80082c4:	4a0a      	ldr	r2, [pc, #40]	@ (80082f0 <prvUpdateCacheEntry+0xac>)
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	216c      	movs	r1, #108	@ 0x6c
 80082ca:	fb01 f303 	mul.w	r3, r1, r3
 80082ce:	4413      	add	r3, r2
 80082d0:	3360      	adds	r3, #96	@ 0x60
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80082d6:	4a06      	ldr	r2, [pc, #24]	@ (80082f0 <prvUpdateCacheEntry+0xac>)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	216c      	movs	r1, #108	@ 0x6c
 80082dc:	fb01 f303 	mul.w	r3, r1, r3
 80082e0:	4413      	add	r3, r2
 80082e2:	3364      	adds	r3, #100	@ 0x64
 80082e4:	683a      	ldr	r2, [r7, #0]
 80082e6:	601a      	str	r2, [r3, #0]
    }
 80082e8:	bf00      	nop
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	20000fd4 	.word	0x20000fd4

080082f4 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	607a      	str	r2, [r7, #4]
 8008300:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8008302:	68f8      	ldr	r0, [r7, #12]
 8008304:	f7f7 fff6 	bl	80002f4 <strlen>
 8008308:	4603      	mov	r3, r0
 800830a:	2b0f      	cmp	r3, #15
 800830c:	d859      	bhi.n	80083c2 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800830e:	4b2f      	ldr	r3, [pc, #188]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	226c      	movs	r2, #108	@ 0x6c
 8008314:	fb02 f303 	mul.w	r3, r2, r3
 8008318:	3350      	adds	r3, #80	@ 0x50
 800831a:	4a2d      	ldr	r2, [pc, #180]	@ (80083d0 <prvInsertCacheEntry+0xdc>)
 800831c:	4413      	add	r3, r2
 800831e:	2210      	movs	r2, #16
 8008320:	68f9      	ldr	r1, [r7, #12]
 8008322:	4618      	mov	r0, r3
 8008324:	f01b fc1e 	bl	8023b64 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8008328:	4b28      	ldr	r3, [pc, #160]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	226c      	movs	r2, #108	@ 0x6c
 800832e:	fb02 f303 	mul.w	r3, r2, r3
 8008332:	4a27      	ldr	r2, [pc, #156]	@ (80083d0 <prvInsertCacheEntry+0xdc>)
 8008334:	4413      	add	r3, r2
 8008336:	2214      	movs	r2, #20
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	4618      	mov	r0, r3
 800833c:	f01a fc26 	bl	8022b8c <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8008340:	4b22      	ldr	r3, [pc, #136]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a22      	ldr	r2, [pc, #136]	@ (80083d0 <prvInsertCacheEntry+0xdc>)
 8008346:	216c      	movs	r1, #108	@ 0x6c
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	4413      	add	r3, r2
 800834e:	3360      	adds	r3, #96	@ 0x60
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8008354:	4b1d      	ldr	r3, [pc, #116]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a1d      	ldr	r2, [pc, #116]	@ (80083d0 <prvInsertCacheEntry+0xdc>)
 800835a:	216c      	movs	r1, #108	@ 0x6c
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	4413      	add	r3, r2
 8008362:	3364      	adds	r3, #100	@ 0x64
 8008364:	683a      	ldr	r2, [r7, #0]
 8008366:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8008368:	4b18      	ldr	r3, [pc, #96]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a18      	ldr	r2, [pc, #96]	@ (80083d0 <prvInsertCacheEntry+0xdc>)
 800836e:	216c      	movs	r1, #108	@ 0x6c
 8008370:	fb01 f303 	mul.w	r3, r1, r3
 8008374:	4413      	add	r3, r2
 8008376:	3368      	adds	r3, #104	@ 0x68
 8008378:	2201      	movs	r2, #1
 800837a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 800837c:	4b13      	ldr	r3, [pc, #76]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a13      	ldr	r2, [pc, #76]	@ (80083d0 <prvInsertCacheEntry+0xdc>)
 8008382:	216c      	movs	r1, #108	@ 0x6c
 8008384:	fb01 f303 	mul.w	r3, r1, r3
 8008388:	4413      	add	r3, r2
 800838a:	3369      	adds	r3, #105	@ 0x69
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8008390:	4b0e      	ldr	r3, [pc, #56]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	226c      	movs	r2, #108	@ 0x6c
 8008396:	fb02 f303 	mul.w	r3, r2, r3
 800839a:	3314      	adds	r3, #20
 800839c:	4a0c      	ldr	r2, [pc, #48]	@ (80083d0 <prvInsertCacheEntry+0xdc>)
 800839e:	4413      	add	r3, r2
 80083a0:	223c      	movs	r2, #60	@ 0x3c
 80083a2:	2100      	movs	r1, #0
 80083a4:	4618      	mov	r0, r3
 80083a6:	f01a fcfe 	bl	8022da6 <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 80083aa:	4b08      	ldr	r3, [pc, #32]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	3301      	adds	r3, #1
 80083b0:	4a06      	ldr	r2, [pc, #24]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 80083b2:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80083b4:	4b05      	ldr	r3, [pc, #20]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d102      	bne.n	80083c2 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 80083bc:	4b03      	ldr	r3, [pc, #12]	@ (80083cc <prvInsertCacheEntry+0xd8>)
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80083c2:	bf00      	nop
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
 80083ca:	bf00      	nop
 80083cc:	20001184 	.word	0x20001184
 80083d0:	20000fd4 	.word	0x20000fd4

080083d4 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 80083de:	2301      	movs	r3, #1
 80083e0:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 80083ea:	4a2e      	ldr	r2, [pc, #184]	@ (80084a4 <prvReadDNSCache+0xd0>)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	216c      	movs	r1, #108	@ 0x6c
 80083f0:	fb01 f303 	mul.w	r3, r1, r3
 80083f4:	4413      	add	r3, r2
 80083f6:	3368      	adds	r3, #104	@ 0x68
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	2b04      	cmp	r3, #4
 8008400:	d901      	bls.n	8008406 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008402:	2304      	movs	r3, #4
 8008404:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8008406:	2300      	movs	r3, #0
 8008408:	61fb      	str	r3, [r7, #28]
 800840a:	e041      	b.n	8008490 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800840c:	69fa      	ldr	r2, [r7, #28]
 800840e:	4613      	mov	r3, r2
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	216c      	movs	r1, #108	@ 0x6c
 800841a:	fb01 f202 	mul.w	r2, r1, r2
 800841e:	4413      	add	r3, r2
 8008420:	4a20      	ldr	r2, [pc, #128]	@ (80084a4 <prvReadDNSCache+0xd0>)
 8008422:	4413      	add	r3, r2
 8008424:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	691b      	ldr	r3, [r3, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d002      	beq.n	8008434 <prvReadDNSCache+0x60>
 800842e:	2b01      	cmp	r3, #1
 8008430:	d010      	beq.n	8008454 <prvReadDNSCache+0x80>
 8008432:	e01d      	b.n	8008470 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	226c      	movs	r2, #108	@ 0x6c
 800843c:	fb02 f303 	mul.w	r3, r2, r3
 8008440:	3350      	adds	r3, #80	@ 0x50
 8008442:	4a18      	ldr	r2, [pc, #96]	@ (80084a4 <prvReadDNSCache+0xd0>)
 8008444:	4413      	add	r3, r2
 8008446:	68ba      	ldr	r2, [r7, #8]
 8008448:	2102      	movs	r1, #2
 800844a:	4618      	mov	r0, r3
 800844c:	f7ff fc8c 	bl	8007d68 <pxNew_AddrInfo>
 8008450:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8008452:	e011      	b.n	8008478 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	226c      	movs	r2, #108	@ 0x6c
 8008458:	fb02 f303 	mul.w	r3, r2, r3
 800845c:	3350      	adds	r3, #80	@ 0x50
 800845e:	4a11      	ldr	r2, [pc, #68]	@ (80084a4 <prvReadDNSCache+0xd0>)
 8008460:	4413      	add	r3, r2
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	210a      	movs	r1, #10
 8008466:	4618      	mov	r0, r3
 8008468:	f7ff fc7e 	bl	8007d68 <pxNew_AddrInfo>
 800846c:	6178      	str	r0, [r7, #20]
                        break;
 800846e:	e003      	b.n	8008478 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8008470:	480d      	ldr	r0, [pc, #52]	@ (80084a8 <prvReadDNSCache+0xd4>)
 8008472:	f01a f96f 	bl	8022754 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8008476:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d00d      	beq.n	800849a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	697a      	ldr	r2, [r7, #20]
 8008482:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	331c      	adds	r3, #28
 8008488:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800848a:	69fb      	ldr	r3, [r7, #28]
 800848c:	3301      	adds	r3, #1
 800848e:	61fb      	str	r3, [r7, #28]
 8008490:	69fa      	ldr	r2, [r7, #28]
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	429a      	cmp	r2, r3
 8008496:	d3b9      	bcc.n	800840c <prvReadDNSCache+0x38>
        }
    }
 8008498:	e000      	b.n	800849c <prvReadDNSCache+0xc8>
                break;
 800849a:	bf00      	nop
    }
 800849c:	bf00      	nop
 800849e:	3720      	adds	r7, #32
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	20000fd4 	.word	0x20000fd4
 80084a8:	08024ff8 	.word	0x08024ff8

080084ac <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b08a      	sub	sp, #40	@ 0x28
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80084b6:	2300      	movs	r3, #0
 80084b8:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80084ba:	4b28      	ldr	r3, [pc, #160]	@ (800855c <xDNSDoCallback+0xb0>)
 80084bc:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	881b      	ldrh	r3, [r3, #0]
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 80084d0:	f7fc fabe 	bl	8004a50 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80084d4:	697b      	ldr	r3, [r7, #20]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	623b      	str	r3, [r7, #32]
 80084da:	e029      	b.n	8008530 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80084dc:	6a3b      	ldr	r3, [r7, #32]
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d101      	bne.n	80084f0 <xDNSDoCallback+0x44>
 80084ec:	2301      	movs	r3, #1
 80084ee:	e000      	b.n	80084f2 <xDNSDoCallback+0x46>
 80084f0:	2300      	movs	r3, #0
 80084f2:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d117      	bne.n	800852a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3314      	adds	r3, #20
 800850a:	4618      	mov	r0, r3
 800850c:	f7fb f9b8 	bl	8003880 <uxListRemove>
                    vPortFree( pxCallback );
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f7fe faf3 	bl	8006afc <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008516:	4b12      	ldr	r3, [pc, #72]	@ (8008560 <xDNSDoCallback+0xb4>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d102      	bne.n	8008524 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800851e:	2000      	movs	r0, #0
 8008520:	f002 f9ca 	bl	800a8b8 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8008528:	e006      	b.n	8008538 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800852a:	6a3b      	ldr	r3, [r7, #32]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8008530:	6a3a      	ldr	r2, [r7, #32]
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	429a      	cmp	r2, r3
 8008536:	d1d1      	bne.n	80084dc <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8008538:	f7fc fa98 	bl	8004a6c <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d006      	beq.n	8008550 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	683a      	ldr	r2, [r7, #0]
 800854c:	69b9      	ldr	r1, [r7, #24]
 800854e:	4798      	blx	r3
        }

        return xResult;
 8008550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008552:	4618      	mov	r0, r3
 8008554:	3728      	adds	r7, #40	@ 0x28
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	20001190 	.word	0x20001190
 8008560:	20001188 	.word	0x20001188

08008564 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8008564:	b580      	push	{r7, lr}
 8008566:	b08c      	sub	sp, #48	@ 0x30
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800856c:	4b40      	ldr	r3, [pc, #256]	@ (8008670 <vDNSCheckCallBack+0x10c>)
 800856e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8008570:	f107 030c 	add.w	r3, r7, #12
 8008574:	4618      	mov	r0, r3
 8008576:	f7fb f8f9 	bl	800376c <vListInitialise>

        vTaskSuspendAll();
 800857a:	f7fc fa69 	bl	8004a50 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800857e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008584:	e02e      	b.n	80085e4 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008588:	68db      	ldr	r3, [r3, #12]
 800858a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800858c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d00d      	beq.n	80085b4 <vDNSCheckCallBack+0x50>
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	691b      	ldr	r3, [r3, #16]
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d108      	bne.n	80085b4 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	3314      	adds	r3, #20
 80085a6:	4618      	mov	r0, r3
 80085a8:	f7fb f96a 	bl	8003880 <uxListRemove>
                    vPortFree( pxCallback );
 80085ac:	6a38      	ldr	r0, [r7, #32]
 80085ae:	f7fe faa5 	bl	8006afc <vPortFree>
 80085b2:	e017      	b.n	80085e4 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	3308      	adds	r3, #8
 80085b8:	6a3a      	ldr	r2, [r7, #32]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7fc ff3b 	bl	8005438 <xTaskCheckForTimeOut>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00d      	beq.n	80085e4 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	3314      	adds	r3, #20
 80085cc:	4618      	mov	r0, r3
 80085ce:	f7fb f957 	bl	8003880 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f103 0214 	add.w	r2, r3, #20
 80085d8:	f107 030c 	add.w	r3, r7, #12
 80085dc:	4611      	mov	r1, r2
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fb f8f1 	bl	80037c6 <vListInsertEnd>
                 pxIterator != xEnd; )
 80085e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d1cc      	bne.n	8008586 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 80085ec:	f7fc fa3e 	bl	8004a6c <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d030      	beq.n	8008658 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 80085f6:	f107 030c 	add.w	r3, r7, #12
 80085fa:	3308      	adds	r3, #8
 80085fc:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80085fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008604:	e024      	b.n	8008650 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8008606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008608:	68db      	ldr	r3, [r3, #12]
 800860a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800860c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8008612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008616:	2b00      	cmp	r3, #0
 8008618:	d009      	beq.n	800862e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	685b      	ldr	r3, [r3, #4]
 800861e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008620:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008626:	6911      	ldr	r1, [r2, #16]
 8008628:	2200      	movs	r2, #0
 800862a:	4798      	blx	r3
 800862c:	e008      	b.n	8008640 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800862e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008634:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800863a:	6911      	ldr	r1, [r2, #16]
 800863c:	2200      	movs	r2, #0
 800863e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008642:	3314      	adds	r3, #20
 8008644:	4618      	mov	r0, r3
 8008646:	f7fb f91b 	bl	8003880 <uxListRemove>
                vPortFree( pxCallback );
 800864a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800864c:	f7fe fa56 	bl	8006afc <vPortFree>
                 pxIterator != xEnd;
 8008650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008654:	429a      	cmp	r2, r3
 8008656:	d1d6      	bne.n	8008606 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008658:	4b06      	ldr	r3, [pc, #24]	@ (8008674 <vDNSCheckCallBack+0x110>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d102      	bne.n	8008666 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8008660:	2000      	movs	r0, #0
 8008662:	f002 f929 	bl	800a8b8 <vIPSetDNSTimerEnableState>
        }
    }
 8008666:	bf00      	nop
 8008668:	3730      	adds	r7, #48	@ 0x30
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	20001190 	.word	0x20001190
 8008674:	20001188 	.word	0x20001188

08008678 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8008678:	b580      	push	{r7, lr}
 800867a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 800867c:	4802      	ldr	r0, [pc, #8]	@ (8008688 <vDNSCallbackInitialise+0x10>)
 800867e:	f7fb f875 	bl	800376c <vListInitialise>
    }
 8008682:	bf00      	nop
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	20001188 	.word	0x20001188

0800868c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 800868c:	b480      	push	{r7}
 800868e:	b089      	sub	sp, #36	@ 0x24
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8008696:	2300      	movs	r3, #0
 8008698:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800869a:	2300      	movs	r3, #0
 800869c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	695b      	ldr	r3, [r3, #20]
 80086a2:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d102      	bne.n	80086b6 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 80086b0:	2300      	movs	r3, #0
 80086b2:	61bb      	str	r3, [r7, #24]
 80086b4:	e069      	b.n	800878a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80086b6:	68fa      	ldr	r2, [r7, #12]
 80086b8:	69bb      	ldr	r3, [r7, #24]
 80086ba:	4413      	add	r3, r2
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80086c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80086c4:	d144      	bne.n	8008750 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d903      	bls.n	80086d4 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 80086cc:	69bb      	ldr	r3, [r7, #24]
 80086ce:	3302      	adds	r3, #2
 80086d0:	61bb      	str	r3, [r7, #24]
 80086d2:	e05a      	b.n	800878a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 80086d4:	2300      	movs	r3, #0
 80086d6:	61bb      	str	r3, [r7, #24]
 80086d8:	e057      	b.n	800878a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 80086da:	69fb      	ldr	r3, [r7, #28]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d008      	beq.n	80086f2 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	4413      	add	r3, r2
 80086e6:	3334      	adds	r3, #52	@ 0x34
 80086e8:	222e      	movs	r2, #46	@ 0x2e
 80086ea:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80086ec:	69fb      	ldr	r3, [r7, #28]
 80086ee:	3301      	adds	r3, #1
 80086f0:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	4413      	add	r3, r2
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 80086fc:	69bb      	ldr	r3, [r7, #24]
 80086fe:	3301      	adds	r3, #1
 8008700:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8008702:	69ba      	ldr	r2, [r7, #24]
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	4413      	add	r3, r2
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	429a      	cmp	r2, r3
 800870c:	d202      	bcs.n	8008714 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	61bb      	str	r3, [r7, #24]
                    break;
 8008712:	e027      	b.n	8008764 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	4413      	add	r3, r2
 800871a:	683a      	ldr	r2, [r7, #0]
 800871c:	429a      	cmp	r2, r3
 800871e:	d812      	bhi.n	8008746 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8008720:	2300      	movs	r3, #0
 8008722:	61bb      	str	r3, [r7, #24]
                    break;
 8008724:	e01e      	b.n	8008764 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008726:	68fa      	ldr	r2, [r7, #12]
 8008728:	69bb      	ldr	r3, [r7, #24]
 800872a:	4413      	add	r3, r2
 800872c:	7819      	ldrb	r1, [r3, #0]
 800872e:	687a      	ldr	r2, [r7, #4]
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	4413      	add	r3, r2
 8008734:	3334      	adds	r3, #52	@ 0x34
 8008736:	460a      	mov	r2, r1
 8008738:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	3301      	adds	r3, #1
 800873e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8008740:	69bb      	ldr	r3, [r7, #24]
 8008742:	3301      	adds	r3, #1
 8008744:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	1e5a      	subs	r2, r3, #1
 800874a:	617a      	str	r2, [r7, #20]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d1ea      	bne.n	8008726 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	429a      	cmp	r2, r3
 8008756:	d205      	bcs.n	8008764 <DNS_ReadNameField+0xd8>
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	4413      	add	r3, r2
 800875e:	781b      	ldrb	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1ba      	bne.n	80086da <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00f      	beq.n	800878a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	429a      	cmp	r2, r3
 8008770:	d209      	bcs.n	8008786 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8008772:	687a      	ldr	r2, [r7, #4]
 8008774:	69fb      	ldr	r3, [r7, #28]
 8008776:	4413      	add	r3, r2
 8008778:	3334      	adds	r3, #52	@ 0x34
 800877a:	2200      	movs	r2, #0
 800877c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 800877e:	69bb      	ldr	r3, [r7, #24]
 8008780:	3301      	adds	r3, #1
 8008782:	61bb      	str	r3, [r7, #24]
 8008784:	e001      	b.n	800878a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 800878a:	69bb      	ldr	r3, [r7, #24]
    }
 800878c:	4618      	mov	r0, r3
 800878e:	3724      	adds	r7, #36	@ 0x24
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	613b      	str	r3, [r7, #16]
 80087b4:	e03f      	b.n	8008836 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	4413      	add	r3, r2
 80087bc:	781b      	ldrb	r3, [r3, #0]
 80087be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80087c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80087c4:	d11f      	bne.n	8008806 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	d903      	bls.n	80087d4 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	3302      	adds	r3, #2
 80087d0:	613b      	str	r3, [r7, #16]
 80087d2:	e030      	b.n	8008836 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	613b      	str	r3, [r7, #16]
 80087d8:	e02d      	b.n	8008836 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	4413      	add	r3, r2
 80087e0:	781b      	ldrb	r3, [r3, #0]
 80087e2:	3301      	adds	r3, #1
 80087e4:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d908      	bls.n	8008800 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 80087ee:	697a      	ldr	r2, [r7, #20]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80087f6:	693a      	ldr	r2, [r7, #16]
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	4413      	add	r3, r2
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	e002      	b.n	8008806 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	613b      	str	r3, [r7, #16]
                    break;
 8008804:	e008      	b.n	8008818 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	4413      	add	r3, r2
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <DNS_SkipNameField+0x80>
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d8e0      	bhi.n	80087da <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00b      	beq.n	8008836 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	4413      	add	r3, r2
 8008824:	781b      	ldrb	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d103      	bne.n	8008832 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800882a:	693b      	ldr	r3, [r7, #16]
 800882c:	3301      	adds	r3, #1
 800882e:	613b      	str	r3, [r7, #16]
 8008830:	e001      	b.n	8008836 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008836:	693b      	ldr	r3, [r7, #16]
    }
 8008838:	4618      	mov	r0, r3
 800883a:	371c      	adds	r7, #28
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008844:	b5b0      	push	{r4, r5, r7, lr}
 8008846:	b0f6      	sub	sp, #472	@ 0x1d8
 8008848:	af00      	add	r7, sp, #0
 800884a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800884e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8008852:	6020      	str	r0, [r4, #0]
 8008854:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008858:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 800885c:	6001      	str	r1, [r0, #0]
 800885e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008862:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8008866:	600a      	str	r2, [r1, #0]
 8008868:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800886c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8008870:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8008872:	2301      	movs	r3, #1
 8008874:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800887e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008882:	224c      	movs	r2, #76	@ 0x4c
 8008884:	2100      	movs	r1, #0
 8008886:	4618      	mov	r0, r3
 8008888:	f01a fa8d 	bl	8022da6 <memset>
        xSet.usPortNumber = usPort;
 800888c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8008890:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8008894:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008898:	3344      	adds	r3, #68	@ 0x44
 800889a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 800889e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088a2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 80088ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	2b0b      	cmp	r3, #11
 80088b8:	d803      	bhi.n	80088c2 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 80088ba:	2300      	movs	r3, #0
 80088bc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80088c0:	e35a      	b.n	8008f78 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 80088c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088c6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 80088d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 80088de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088e2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 80088f2:	2300      	movs	r3, #0
 80088f4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 80088f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088fc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8008906:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800890a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	330c      	adds	r3, #12
 8008912:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8008916:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800891a:	3b0c      	subs	r3, #12
 800891c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008920:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008924:	889b      	ldrh	r3, [r3, #4]
 8008926:	b29b      	uxth	r3, r3
 8008928:	021b      	lsls	r3, r3, #8
 800892a:	b21a      	sxth	r2, r3
 800892c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008930:	889b      	ldrh	r3, [r3, #4]
 8008932:	b29b      	uxth	r3, r3
 8008934:	0a1b      	lsrs	r3, r3, #8
 8008936:	b29b      	uxth	r3, r3
 8008938:	b21b      	sxth	r3, r3
 800893a:	4313      	orrs	r3, r2
 800893c:	b21b      	sxth	r3, r3
 800893e:	b29b      	uxth	r3, r3
 8008940:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008944:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008948:	88db      	ldrh	r3, [r3, #6]
 800894a:	b29b      	uxth	r3, r3
 800894c:	021b      	lsls	r3, r3, #8
 800894e:	b21a      	sxth	r2, r3
 8008950:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008954:	88db      	ldrh	r3, [r3, #6]
 8008956:	b29b      	uxth	r3, r3
 8008958:	0a1b      	lsrs	r3, r3, #8
 800895a:	b29b      	uxth	r3, r3
 800895c:	b21b      	sxth	r3, r3
 800895e:	4313      	orrs	r3, r2
 8008960:	b21b      	sxth	r3, r3
 8008962:	b29b      	uxth	r3, r3
 8008964:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008968:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800896c:	885b      	ldrh	r3, [r3, #2]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008974:	2b80      	cmp	r3, #128	@ 0x80
 8008976:	d11b      	bne.n	80089b0 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8008978:	2301      	movs	r3, #1
 800897a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 800897e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8008982:	2b00      	cmp	r3, #0
 8008984:	d103      	bne.n	800898e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8008986:	2300      	movs	r3, #0
 8008988:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800898c:	e2f4      	b.n	8008f78 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 800898e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008992:	2b00      	cmp	r3, #0
 8008994:	d114      	bne.n	80089c0 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008996:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800899a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 800899e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80089a2:	2110      	movs	r1, #16
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7ff fe71 	bl	800868c <DNS_ReadNameField>
 80089aa:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80089ae:	e007      	b.n	80089c0 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 80089b0:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d103      	bne.n	80089c0 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80089be:	e2db      	b.n	8008f78 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 80089c0:	2300      	movs	r3, #0
 80089c2:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 80089c6:	e064      	b.n	8008a92 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 80089c8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d103      	bne.n	80089d8 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80089d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089d4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 80089d8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d108      	bne.n	80089f2 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 80089e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80089e4:	2110      	movs	r1, #16
 80089e6:	4618      	mov	r0, r3
 80089e8:	f7ff fe50 	bl	800868c <DNS_ReadNameField>
 80089ec:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80089f0:	e009      	b.n	8008a06 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 80089f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80089f6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80089fa:	4611      	mov	r1, r2
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7ff fecb 	bl	8008798 <DNS_SkipNameField>
 8008a02:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8008a06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d103      	bne.n	8008a16 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008a14:	e043      	b.n	8008a9e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8008a16:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8008a1a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a1e:	4413      	add	r3, r2
 8008a20:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008a24:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008a28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a2c:	4413      	add	r3, r2
 8008a2e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008a32:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008a36:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8008a3a:	1ad3      	subs	r3, r2, r3
 8008a3c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008a40:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008a44:	2b03      	cmp	r3, #3
 8008a46:	d91b      	bls.n	8008a80 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a4c:	4618      	mov	r0, r3
 8008a4e:	f002 fa58 	bl	800af02 <usChar2u16>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a5c:	3302      	adds	r3, #2
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f002 fa4f 	bl	800af02 <usChar2u16>
 8008a64:	4603      	mov	r3, r0
 8008a66:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8008a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008a6e:	3304      	adds	r3, #4
 8008a70:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008a74:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008a78:	3b04      	subs	r3, #4
 8008a7a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8008a7e:	e003      	b.n	8008a88 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008a80:	2300      	movs	r3, #0
 8008a82:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008a86:	e00a      	b.n	8008a9e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008a88:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8008a8c:	3301      	adds	r3, #1
 8008a8e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008a92:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008a96:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d394      	bcc.n	80089c8 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8008a9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8265 	beq.w	8008f72 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008aa8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d10d      	bne.n	8008acc <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008ab0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8008ab4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ab8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8008abc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8008ac0:	6819      	ldr	r1, [r3, #0]
 8008ac2:	f000 fa73 	bl	8008fac <parseDNSAnswer>
 8008ac6:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8008aca:	e255      	b.n	8008f78 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008acc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d004      	beq.n	8008ade <DNS_ParseDNSReply+0x29a>
 8008ad4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008ad8:	2b1c      	cmp	r3, #28
 8008ada:	f040 824d 	bne.w	8008f78 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8008ade:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8008ae2:	2b01      	cmp	r3, #1
 8008ae4:	f040 8248 	bne.w	8008f78 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8008ae8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008aec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008af0:	6818      	ldr	r0, [r3, #0]
 8008af2:	f001 ff9f 	bl	800aa34 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8008af6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8008afa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d103      	bne.n	8008b0a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8008b02:	48c4      	ldr	r0, [pc, #784]	@ (8008e14 <DNS_ParseDNSReply+0x5d0>)
 8008b04:	f019 fe26 	bl	8022754 <lUDPLoggingPrintf>
                            break;
 8008b08:	e236      	b.n	8008f78 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8008b0a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b10:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008b14:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8008b18:	6812      	ldr	r2, [r2, #0]
 8008b1a:	1ad3      	subs	r3, r2, r3
 8008b1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8008b20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008b24:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b26:	d003      	beq.n	8008b30 <DNS_ParseDNSReply+0x2ec>
 8008b28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008b2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8008b2e:	d101      	bne.n	8008b34 <DNS_ParseDNSReply+0x2f0>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e000      	b.n	8008b36 <DNS_ParseDNSReply+0x2f2>
 8008b34:	2300      	movs	r3, #0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d104      	bne.n	8008b44 <DNS_ParseDNSReply+0x300>
 8008b3a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8008b3e:	48b6      	ldr	r0, [pc, #728]	@ (8008e18 <DNS_ParseDNSReply+0x5d4>)
 8008b40:	f7f8 ff2a 	bl	8001998 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008b44:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	f000 8213 	beq.w	8008f76 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008b50:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b56:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8008b5a:	f107 0314 	add.w	r3, r7, #20
 8008b5e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008b62:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008b66:	4618      	mov	r0, r3
 8008b68:	f01a f810 	bl	8022b8c <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8008b6c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008b70:	461a      	mov	r2, r3
 8008b72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008b76:	3334      	adds	r3, #52	@ 0x34
 8008b78:	4619      	mov	r1, r3
 8008b7a:	48a8      	ldr	r0, [pc, #672]	@ (8008e1c <DNS_ParseDNSReply+0x5d8>)
 8008b7c:	f019 fdea 	bl	8022754 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008b80:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008b8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008b8e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008b92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008b96:	3334      	adds	r3, #52	@ 0x34
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7f8 ff91 	bl	8001ac0 <xApplicationDNSQueryHook>
 8008b9e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008ba2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d014      	beq.n	8008bd4 <DNS_ParseDNSReply+0x390>
 8008baa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008bb2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008bb6:	f003 0304 	and.w	r3, r3, #4
 8008bba:	b2db      	uxtb	r3, r3
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d109      	bne.n	8008bd4 <DNS_ParseDNSReply+0x390>
 8008bc0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008bc4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d102      	bne.n	8008bd4 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8008bd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	f000 81cd 	beq.w	8008f78 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8008bea:	4b8d      	ldr	r3, [pc, #564]	@ (8008e20 <DNS_ParseDNSReply+0x5dc>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d164      	bne.n	8008cbc <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8008bf2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008bf6:	f001 fbd7 	bl	800a3a8 <uxIPHeaderSizePacket>
 8008bfa:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8008bfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8008c08:	3316      	adds	r3, #22
 8008c0a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008c0e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008c12:	2b1c      	cmp	r3, #28
 8008c14:	d103      	bne.n	8008c1e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8008c16:	231c      	movs	r3, #28
 8008c18:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8008c1c:	e002      	b.n	8008c24 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8008c1e:	2310      	movs	r3, #16
 8008c20:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008c24:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008c28:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008c2c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8008c2e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008c36:	4413      	add	r3, r2
 8008c38:	4619      	mov	r1, r3
 8008c3a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008c3e:	f001 fe65 	bl	800a90c <pxDuplicateNetworkBufferWithDescriptor>
 8008c42:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008c46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d032      	beq.n	8008cb4 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8008c4e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008c52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c56:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008c62:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008c66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008c6a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	1ad3      	subs	r3, r2, r3
 8008c72:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008c76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008c7a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008c7e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008c84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008c88:	4413      	add	r3, r2
 8008c8a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 8008c8e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008c92:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008c96:	4413      	add	r3, r2
 8008c98:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8008c9c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008ca0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008ca4:	4413      	add	r3, r2
 8008ca6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 8008caa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008cae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008cb2:	e00b      	b.n	8008ccc <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8008cba:	e007      	b.n	8008ccc <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8008cbc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008cc2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 8008ccc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	f000 8151 	beq.w	8008f78 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8008cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8008cda:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 8008cde:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008ce2:	3302      	adds	r3, #2
 8008ce4:	2280      	movs	r2, #128	@ 0x80
 8008ce6:	701a      	strb	r2, [r3, #0]
 8008ce8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008cec:	3303      	adds	r3, #3
 8008cee:	2200      	movs	r2, #0
 8008cf0:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8008cf2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008cf6:	3306      	adds	r3, #6
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	701a      	strb	r2, [r3, #0]
 8008cfc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d00:	3307      	adds	r3, #7
 8008d02:	2201      	movs	r2, #1
 8008d04:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8008d06:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	701a      	strb	r2, [r3, #0]
 8008d10:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d14:	3309      	adds	r3, #9
 8008d16:	2200      	movs	r2, #0
 8008d18:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 8008d1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d1e:	330a      	adds	r3, #10
 8008d20:	2200      	movs	r2, #0
 8008d22:	701a      	strb	r2, [r3, #0]
 8008d24:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008d28:	330b      	adds	r3, #11
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8008d2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d32:	22c0      	movs	r2, #192	@ 0xc0
 8008d34:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008d36:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008d3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008d3e:	1ad3      	subs	r3, r2, r3
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d46:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008d48:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008d4c:	0a1b      	lsrs	r3, r3, #8
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d54:	3302      	adds	r3, #2
 8008d56:	b2d2      	uxtb	r2, r2
 8008d58:	701a      	strb	r2, [r3, #0]
 8008d5a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 8008d5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d62:	3303      	adds	r3, #3
 8008d64:	b2d2      	uxtb	r2, r2
 8008d66:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008d68:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	2200      	movs	r2, #0
 8008d70:	701a      	strb	r2, [r3, #0]
 8008d72:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d76:	3305      	adds	r3, #5
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8008d7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d80:	3306      	adds	r3, #6
 8008d82:	2200      	movs	r2, #0
 8008d84:	701a      	strb	r2, [r3, #0]
 8008d86:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d8a:	3307      	adds	r3, #7
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	701a      	strb	r2, [r3, #0]
 8008d90:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d94:	3308      	adds	r3, #8
 8008d96:	2201      	movs	r2, #1
 8008d98:	701a      	strb	r2, [r3, #0]
 8008d9a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008d9e:	3309      	adds	r3, #9
 8008da0:	222c      	movs	r2, #44	@ 0x2c
 8008da2:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008da4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008da8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008dac:	1ad3      	subs	r3, r2, r3
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	3310      	adds	r3, #16
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008db8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008dbc:	2b1c      	cmp	r3, #28
 8008dbe:	d131      	bne.n	8008e24 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8008dc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dc4:	330a      	adds	r3, #10
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
 8008dca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dce:	330b      	adds	r3, #11
 8008dd0:	2210      	movs	r2, #16
 8008dd2:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008dd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dd8:	f103 020c 	add.w	r2, r3, #12
 8008ddc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008de0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008de4:	4615      	mov	r5, r2
 8008de6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8008dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dec:	6028      	str	r0, [r5, #0]
 8008dee:	6069      	str	r1, [r5, #4]
 8008df0:	60aa      	str	r2, [r5, #8]
 8008df2:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008df4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008df8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008dfc:	1ad3      	subs	r3, r2, r3
 8008dfe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8008e02:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	331c      	adds	r3, #28
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8008e10:	e09a      	b.n	8008f48 <DNS_ParseDNSReply+0x704>
 8008e12:	bf00      	nop
 8008e14:	080250a0 	.word	0x080250a0
 8008e18:	080250d4 	.word	0x080250d4
 8008e1c:	08025108 	.word	0x08025108
 8008e20:	08027fc8 	.word	0x08027fc8
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8008e24:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e28:	330a      	adds	r3, #10
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e32:	330b      	adds	r3, #11
 8008e34:	2204      	movs	r2, #4
 8008e36:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8008e38:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e3c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	061a      	lsls	r2, r3, #24
 8008e44:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e48:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	021b      	lsls	r3, r3, #8
 8008e50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e54:	431a      	orrs	r2, r3
 8008e56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e5a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	0a1b      	lsrs	r3, r3, #8
 8008e62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e66:	431a      	orrs	r2, r3
 8008e68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e6c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	0e1b      	lsrs	r3, r3, #24
 8008e74:	4313      	orrs	r3, r2
 8008e76:	0e1a      	lsrs	r2, r3, #24
 8008e78:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008e7c:	330c      	adds	r3, #12
 8008e7e:	b2d2      	uxtb	r2, r2
 8008e80:	701a      	strb	r2, [r3, #0]
 8008e82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	061a      	lsls	r2, r3, #24
 8008e8e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008e92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	021b      	lsls	r3, r3, #8
 8008e9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ea4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	0a1b      	lsrs	r3, r3, #8
 8008eac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008eb0:	431a      	orrs	r2, r3
 8008eb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008eb6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	0e1b      	lsrs	r3, r3, #24
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	0c1a      	lsrs	r2, r3, #16
 8008ec2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008ec6:	330d      	adds	r3, #13
 8008ec8:	b2d2      	uxtb	r2, r2
 8008eca:	701a      	strb	r2, [r3, #0]
 8008ecc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008ed0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	061a      	lsls	r2, r3, #24
 8008ed8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008edc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008ee8:	431a      	orrs	r2, r3
 8008eea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008eee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008efa:	431a      	orrs	r2, r3
 8008efc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f00:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	0e1b      	lsrs	r3, r3, #24
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	0a1a      	lsrs	r2, r3, #8
 8008f0c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f10:	330e      	adds	r3, #14
 8008f12:	b2d2      	uxtb	r2, r2
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f1a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	0e1a      	lsrs	r2, r3, #24
 8008f22:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008f26:	330f      	adds	r3, #15
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8008f2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008f30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8008f3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008f3e:	b29b      	uxth	r3, r3
 8008f40:	3310      	adds	r3, #16
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8008f48:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008f52:	f000 fa21 	bl	8009398 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008f56:	2100      	movs	r1, #0
 8008f58:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008f5c:	f001 f924 	bl	800a1a8 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008f60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d007      	beq.n	8008f78 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008f68:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8008f6c:	f00e fd4a 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
 8008f70:	e002      	b.n	8008f78 <DNS_ParseDNSReply+0x734>
                    break;
 8008f72:	bf00      	nop
 8008f74:	e000      	b.n	8008f78 <DNS_ParseDNSReply+0x734>
                            break;
 8008f76:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008f78:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d103      	bne.n	8008f88 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008f80:	2300      	movs	r3, #0
 8008f82:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008f86:	e009      	b.n	8008f9c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008f88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008f8c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008f96:	2300      	movs	r3, #0
 8008f98:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8008f9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8008faa:	bf00      	nop

08008fac <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b0a7      	sub	sp, #156	@ 0x9c
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8008fbe:	2304      	movs	r3, #4
 8008fc0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008fd6:	e1c1      	b.n	800935c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008fe0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	f240 81c1 	bls.w	800936c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	68da      	ldr	r2, [r3, #12]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	695b      	ldr	r3, [r3, #20]
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	4610      	mov	r0, r2
 8008ff6:	f7ff fbcf 	bl	8008798 <DNS_SkipNameField>
 8008ffa:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8008ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d103      	bne.n	800900a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8009002:	2300      	movs	r3, #0
 8009004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009008:	e1b1      	b.n	800936e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d005      	beq.n	800901c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009016:	441a      	add	r2, r3
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	68da      	ldr	r2, [r3, #12]
 8009020:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009022:	441a      	add	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	695a      	ldr	r2, [r3, #20]
 800902c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800902e:	1ad2      	subs	r2, r2, r3
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	2b01      	cmp	r3, #1
 800903a:	d803      	bhi.n	8009044 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 800903c:	2300      	movs	r3, #0
 800903e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8009042:	e194      	b.n	800936e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	4618      	mov	r0, r3
 800904a:	f001 ff5a 	bl	800af02 <usChar2u16>
 800904e:	4603      	mov	r3, r0
 8009050:	461a      	mov	r2, r3
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8b1b      	ldrh	r3, [r3, #24]
 800905a:	2b1c      	cmp	r3, #28
 800905c:	d10c      	bne.n	8009078 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2210      	movs	r2, #16
 8009062:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	695a      	ldr	r2, [r3, #20]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	330a      	adds	r3, #10
 800906e:	429a      	cmp	r2, r3
 8009070:	d323      	bcc.n	80090ba <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8009072:	2301      	movs	r3, #1
 8009074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009076:	e020      	b.n	80090ba <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	8b1b      	ldrh	r3, [r3, #24]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d11c      	bne.n	80090ba <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	2204      	movs	r2, #4
 8009084:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	695a      	ldr	r2, [r3, #20]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	330a      	adds	r3, #10
 8009090:	429a      	cmp	r2, r3
 8009092:	d312      	bcc.n	80090ba <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68db      	ldr	r3, [r3, #12]
 8009098:	330a      	adds	r3, #10
 800909a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800909c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80090a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6a1b      	ldr	r3, [r3, #32]
 80090a6:	461a      	mov	r2, r3
 80090a8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80090aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80090ac:	f019 fd6e 	bl	8022b8c <memcpy>

                    if( ulTestAddress != 0U )
 80090b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d001      	beq.n	80090ba <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 80090b6:	2301      	movs	r3, #1
 80090b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 80090ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 810d 	beq.w	80092dc <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 80090c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090ca:	891b      	ldrh	r3, [r3, #8]
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	021b      	lsls	r3, r3, #8
 80090d0:	b21a      	sxth	r2, r3
 80090d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80090d4:	891b      	ldrh	r3, [r3, #8]
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	0a1b      	lsrs	r3, r3, #8
 80090da:	b29b      	uxth	r3, r3
 80090dc:	b21b      	sxth	r3, r3
 80090de:	4313      	orrs	r3, r2
 80090e0:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 80090e6:	b21b      	sxth	r3, r3
 80090e8:	429a      	cmp	r2, r3
 80090ea:	f040 80d0 	bne.w	800928e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	2b10      	cmp	r3, #16
 80090f4:	d11c      	bne.n	8009130 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 80090fc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	6859      	ldr	r1, [r3, #4]
 8009104:	689a      	ldr	r2, [r3, #8]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d009      	beq.n	8009124 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	3334      	adds	r3, #52	@ 0x34
 8009114:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8009118:	210a      	movs	r1, #10
 800911a:	4618      	mov	r0, r3
 800911c:	f7fe fe24 	bl	8007d68 <pxNew_AddrInfo>
 8009120:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8009124:	2301      	movs	r3, #1
 8009126:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2201      	movs	r2, #1
 800912c:	61da      	str	r2, [r3, #28]
 800912e:	e021      	b.n	8009174 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	330a      	adds	r3, #10
 8009136:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	331c      	adds	r3, #28
 800913c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6a1b      	ldr	r3, [r3, #32]
 8009142:	461a      	mov	r2, r3
 8009144:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009146:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8009148:	f019 fd20 	bl	8022b8c <memcpy>

                        if( ppxAddressInfo != NULL )
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	331c      	adds	r3, #28
 8009156:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3334      	adds	r3, #52	@ 0x34
 800915c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800915e:	2102      	movs	r1, #2
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fe01 	bl	8007d68 <pxNew_AddrInfo>
 8009166:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8009170:	2300      	movs	r3, #0
 8009172:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8009174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009178:	2b00      	cmp	r3, #0
 800917a:	d013      	beq.n	80091a4 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800918a:	601a      	str	r2, [r3, #0]
 800918c:	e004      	b.n	8009198 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009192:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009196:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8009198:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800919c:	f103 021c 	add.w	r2, r3, #28
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d002      	beq.n	80091b0 <parseDNSAnswer+0x204>
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	e000      	b.n	80091b2 <parseDNSAnswer+0x206>
 80091b0:	2300      	movs	r3, #0
 80091b2:	4619      	mov	r1, r3
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f7ff f979 	bl	80084ac <xDNSDoCallback>
 80091ba:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 80091bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d002      	beq.n	80091c8 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2201      	movs	r2, #1
 80091c6:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d011      	beq.n	80091f4 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 80091d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091d8:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 80091da:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80091de:	2300      	movs	r3, #0
 80091e0:	9300      	str	r3, [sp, #0]
 80091e2:	2300      	movs	r3, #0
 80091e4:	f7fe fe85 	bl	8007ef2 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80091ec:	3301      	adds	r3, #1
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	8b1b      	ldrh	r3, [r3, #24]
 80091f8:	2b1c      	cmp	r3, #28
 80091fa:	d11f      	bne.n	800923c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 80091fc:	f107 0214 	add.w	r2, r7, #20
 8009200:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009204:	2328      	movs	r3, #40	@ 0x28
 8009206:	200a      	movs	r0, #10
 8009208:	f006 fb6c 	bl	800f8e4 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	881b      	ldrh	r3, [r3, #0]
 8009212:	b29b      	uxth	r3, r3
 8009214:	4618      	mov	r0, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009220:	2b00      	cmp	r3, #0
 8009222:	d001      	beq.n	8009228 <parseDNSAnswer+0x27c>
 8009224:	4b58      	ldr	r3, [pc, #352]	@ (8009388 <parseDNSAnswer+0x3dc>)
 8009226:	e000      	b.n	800922a <parseDNSAnswer+0x27e>
 8009228:	4b58      	ldr	r3, [pc, #352]	@ (800938c <parseDNSAnswer+0x3e0>)
 800922a:	f107 0114 	add.w	r1, r7, #20
 800922e:	9300      	str	r3, [sp, #0]
 8009230:	460b      	mov	r3, r1
 8009232:	4601      	mov	r1, r0
 8009234:	4856      	ldr	r0, [pc, #344]	@ (8009390 <parseDNSAnswer+0x3e4>)
 8009236:	f019 fa8d 	bl	8022754 <lUDPLoggingPrintf>
 800923a:	e01f      	b.n	800927c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8009242:	f107 0214 	add.w	r2, r7, #20
 8009246:	2328      	movs	r3, #40	@ 0x28
 8009248:	2002      	movs	r0, #2
 800924a:	f006 fb4b 	bl	800f8e4 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	881b      	ldrh	r3, [r3, #0]
 8009254:	b29b      	uxth	r3, r3
 8009256:	4618      	mov	r0, r3
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <parseDNSAnswer+0x2be>
 8009266:	4b48      	ldr	r3, [pc, #288]	@ (8009388 <parseDNSAnswer+0x3dc>)
 8009268:	e000      	b.n	800926c <parseDNSAnswer+0x2c0>
 800926a:	4b48      	ldr	r3, [pc, #288]	@ (800938c <parseDNSAnswer+0x3e0>)
 800926c:	f107 0114 	add.w	r1, r7, #20
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	460b      	mov	r3, r1
 8009274:	4601      	mov	r1, r0
 8009276:	4846      	ldr	r0, [pc, #280]	@ (8009390 <parseDNSAnswer+0x3e4>)
 8009278:	f019 fa6c 	bl	8022754 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800927c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009280:	2b00      	cmp	r3, #0
 8009282:	d119      	bne.n	80092b8 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	69db      	ldr	r3, [r3, #28]
 8009288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800928c:	e014      	b.n	80092b8 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800928e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009290:	891b      	ldrh	r3, [r3, #8]
 8009292:	b29b      	uxth	r3, r3
 8009294:	021b      	lsls	r3, r3, #8
 8009296:	b21a      	sxth	r2, r3
 8009298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800929a:	891b      	ldrh	r3, [r3, #8]
 800929c:	b29b      	uxth	r3, r3
 800929e:	0a1b      	lsrs	r3, r3, #8
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	b21b      	sxth	r3, r3
 80092a4:	4313      	orrs	r3, r2
 80092a6:	b21b      	sxth	r3, r3
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	4619      	mov	r1, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a1b      	ldr	r3, [r3, #32]
 80092b0:	461a      	mov	r2, r3
 80092b2:	4838      	ldr	r0, [pc, #224]	@ (8009394 <parseDNSAnswer+0x3e8>)
 80092b4:	f019 fa4e 	bl	8022754 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	68da      	ldr	r2, [r3, #12]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	330a      	adds	r3, #10
 80092c2:	441a      	add	r2, r3
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	695a      	ldr	r2, [r3, #20]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	f1a3 020a 	sub.w	r2, r3, #10
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	615a      	str	r2, [r3, #20]
 80092da:	e03a      	b.n	8009352 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	2b09      	cmp	r3, #9
 80092e2:	d936      	bls.n	8009352 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	68db      	ldr	r3, [r3, #12]
 80092e8:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f103 020a 	add.w	r2, r3, #10
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	695b      	ldr	r3, [r3, #20]
 80092fa:	f1a3 020a 	sub.w	r2, r3, #10
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8009302:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009304:	891b      	ldrh	r3, [r3, #8]
 8009306:	b29b      	uxth	r3, r3
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	b21a      	sxth	r2, r3
 800930c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800930e:	891b      	ldrh	r3, [r3, #8]
 8009310:	b29b      	uxth	r3, r3
 8009312:	0a1b      	lsrs	r3, r3, #8
 8009314:	b29b      	uxth	r3, r3
 8009316:	b21b      	sxth	r3, r3
 8009318:	4313      	orrs	r3, r2
 800931a:	b21b      	sxth	r3, r3
 800931c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	695a      	ldr	r2, [r3, #20]
 8009324:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009328:	429a      	cmp	r2, r3
 800932a:	d30e      	bcc.n	800934a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68da      	ldr	r2, [r3, #12]
 8009330:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009334:	441a      	add	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	695a      	ldr	r2, [r3, #20]
 800933e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8009342:	1ad2      	subs	r2, r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	615a      	str	r2, [r3, #20]
 8009348:	e003      	b.n	8009352 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800934a:	2300      	movs	r3, #0
 800934c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8009350:	e00d      	b.n	800936e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8009352:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009356:	3301      	adds	r3, #1
 8009358:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	88db      	ldrh	r3, [r3, #6]
 8009360:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009364:	429a      	cmp	r2, r3
 8009366:	f4ff ae37 	bcc.w	8008fd8 <parseDNSAnswer+0x2c>
 800936a:	e000      	b.n	800936e <parseDNSAnswer+0x3c2>
                break;
 800936c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 800936e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <parseDNSAnswer+0x3d0>
 8009376:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800937a:	e000      	b.n	800937e <parseDNSAnswer+0x3d2>
 800937c:	2300      	movs	r3, #0
    }
 800937e:	4618      	mov	r0, r3
 8009380:	3794      	adds	r7, #148	@ 0x94
 8009382:	46bd      	mov	sp, r7
 8009384:	bd90      	pop	{r4, r7, pc}
 8009386:	bf00      	nop
 8009388:	08025138 	.word	0x08025138
 800938c:	0802513c 	.word	0x0802513c
 8009390:	08025144 	.word	0x08025144
 8009394:	0802517c 	.word	0x0802517c

08009398 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8009398:	b580      	push	{r7, lr}
 800939a:	b08c      	sub	sp, #48	@ 0x30
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80093a6:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 fffd 	bl	800a3a8 <uxIPHeaderSizePacket>
 80093ae:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 80093b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <prepareReplyDNSMessage+0x28>
 80093b6:	f240 319f 	movw	r1, #927	@ 0x39f
 80093ba:	4865      	ldr	r0, [pc, #404]	@ (8009550 <prepareReplyDNSMessage+0x1b8>)
 80093bc:	f7f8 faec 	bl	8001998 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093c4:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 80093c6:	6a3b      	ldr	r3, [r7, #32]
 80093c8:	330e      	adds	r3, #14
 80093ca:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 80093cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ce:	2b28      	cmp	r3, #40	@ 0x28
 80093d0:	d150      	bne.n	8009474 <prepareReplyDNSMessage+0xdc>
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80093da:	2b60      	cmp	r3, #96	@ 0x60
 80093dc:	d14a      	bne.n	8009474 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093e2:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	330e      	adds	r3, #14
 80093e8:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	3336      	adds	r3, #54	@ 0x36
 80093ee:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	b29b      	uxth	r3, r3
 80093f4:	3308      	adds	r3, #8
 80093f6:	b29b      	uxth	r3, r3
 80093f8:	021b      	lsls	r3, r3, #8
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	3308      	adds	r3, #8
 8009402:	0a1b      	lsrs	r3, r3, #8
 8009404:	b29b      	uxth	r3, r3
 8009406:	4313      	orrs	r3, r2
 8009408:	b29a      	uxth	r2, r3
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800940e:	697b      	ldr	r3, [r7, #20]
 8009410:	f103 0018 	add.w	r0, r3, #24
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	3308      	adds	r3, #8
 8009418:	2210      	movs	r2, #16
 800941a:	4619      	mov	r1, r3
 800941c:	f019 fbb6 	bl	8022b8c <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f103 0008 	add.w	r0, r3, #8
 8009426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009428:	3338      	adds	r3, #56	@ 0x38
 800942a:	2210      	movs	r2, #16
 800942c:	4619      	mov	r1, r3
 800942e:	f019 fbad 	bl	8022b8c <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	3308      	adds	r3, #8
 8009438:	b29b      	uxth	r3, r3
 800943a:	021b      	lsls	r3, r3, #8
 800943c:	b29a      	uxth	r2, r3
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	b29b      	uxth	r3, r3
 8009442:	3308      	adds	r3, #8
 8009444:	0a1b      	lsrs	r3, r3, #8
 8009446:	b29b      	uxth	r3, r3
 8009448:	4313      	orrs	r3, r2
 800944a:	b29a      	uxth	r2, r3
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	781a      	ldrb	r2, [r3, #0]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	4313      	orrs	r3, r2
 800945a:	81fb      	strh	r3, [r7, #14]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	885b      	ldrh	r3, [r3, #2]
 8009460:	b29a      	uxth	r2, r3
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	801a      	strh	r2, [r3, #0]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	89fa      	ldrh	r2, [r7, #14]
 800946a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	333e      	adds	r3, #62	@ 0x3e
 8009470:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8009472:	e066      	b.n	8009542 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8009474:	6a3b      	ldr	r3, [r7, #32]
 8009476:	3322      	adds	r3, #34	@ 0x22
 8009478:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	b29a      	uxth	r2, r3
 800947e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009480:	b29b      	uxth	r3, r3
 8009482:	4413      	add	r3, r2
 8009484:	b29b      	uxth	r3, r3
 8009486:	3308      	adds	r3, #8
 8009488:	b29b      	uxth	r3, r3
 800948a:	021b      	lsls	r3, r3, #8
 800948c:	b29a      	uxth	r2, r3
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	b29b      	uxth	r3, r3
 8009492:	4619      	mov	r1, r3
 8009494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009496:	440b      	add	r3, r1
 8009498:	3308      	adds	r3, #8
 800949a:	0a1b      	lsrs	r3, r3, #8
 800949c:	b29b      	uxth	r3, r3
 800949e:	4313      	orrs	r3, r2
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	69fb      	ldr	r3, [r7, #28]
 80094a4:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	4a2a      	ldr	r2, [pc, #168]	@ (8009554 <prepareReplyDNSMessage+0x1bc>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d103      	bne.n	80094b8 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 80094b0:	69fb      	ldr	r3, [r7, #28]
 80094b2:	22ff      	movs	r2, #255	@ 0xff
 80094b4:	721a      	strb	r2, [r3, #8]
 80094b6:	e006      	b.n	80094c6 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	68da      	ldr	r2, [r3, #12]
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	2280      	movs	r2, #128	@ 0x80
 80094c4:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 80094c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80094ce:	4b22      	ldr	r3, [pc, #136]	@ (8009558 <prepareReplyDNSMessage+0x1c0>)
 80094d0:	881b      	ldrh	r3, [r3, #0]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	b21a      	sxth	r2, r3
 80094d6:	4b20      	ldr	r3, [pc, #128]	@ (8009558 <prepareReplyDNSMessage+0x1c0>)
 80094d8:	881b      	ldrh	r3, [r3, #0]
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	b29b      	uxth	r3, r3
 80094de:	b21b      	sxth	r3, r3
 80094e0:	4313      	orrs	r3, r2
 80094e2:	b21b      	sxth	r3, r3
 80094e4:	b29a      	uxth	r2, r3
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 80094ea:	69fb      	ldr	r3, [r7, #28]
 80094ec:	2200      	movs	r2, #0
 80094ee:	719a      	strb	r2, [r3, #6]
 80094f0:	2200      	movs	r2, #0
 80094f2:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 80094f4:	4b18      	ldr	r3, [pc, #96]	@ (8009558 <prepareReplyDNSMessage+0x1c0>)
 80094f6:	881b      	ldrh	r3, [r3, #0]
 80094f8:	3301      	adds	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	4b16      	ldr	r3, [pc, #88]	@ (8009558 <prepareReplyDNSMessage+0x1c0>)
 80094fe:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	b29b      	uxth	r3, r3
 8009504:	3308      	adds	r3, #8
 8009506:	b29b      	uxth	r3, r3
 8009508:	021b      	lsls	r3, r3, #8
 800950a:	b29a      	uxth	r2, r3
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	3308      	adds	r3, #8
 8009510:	0a1b      	lsrs	r3, r3, #8
 8009512:	b29b      	uxth	r3, r3
 8009514:	4313      	orrs	r3, r2
 8009516:	b29a      	uxth	r2, r3
 8009518:	693b      	ldr	r3, [r7, #16]
 800951a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	781a      	ldrb	r2, [r3, #0]
 8009520:	785b      	ldrb	r3, [r3, #1]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	4313      	orrs	r3, r2
 8009526:	81bb      	strh	r3, [r7, #12]
 8009528:	693b      	ldr	r3, [r7, #16]
 800952a:	885b      	ldrh	r3, [r3, #2]
 800952c:	b29a      	uxth	r2, r3
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	801a      	strh	r2, [r3, #0]
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	89ba      	ldrh	r2, [r7, #12]
 8009536:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8009538:	683a      	ldr	r2, [r7, #0]
 800953a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800953c:	4413      	add	r3, r2
 800953e:	3316      	adds	r3, #22
 8009540:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009546:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8009548:	bf00      	nop
 800954a:	3730      	adds	r7, #48	@ 0x30
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	080250d4 	.word	0x080250d4
 8009554:	fb0000e0 	.word	0xfb0000e0
 8009558:	200011a4 	.word	0x200011a4

0800955c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009564:	2300      	movs	r3, #0
 8009566:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800956c:	2b29      	cmp	r3, #41	@ 0x29
 800956e:	d803      	bhi.n	8009578 <ProcessICMPPacket+0x1c>
 8009570:	2159      	movs	r1, #89	@ 0x59
 8009572:	4811      	ldr	r0, [pc, #68]	@ (80095b8 <ProcessICMPPacket+0x5c>)
 8009574:	f7f8 fa10 	bl	8001998 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800957c:	2b29      	cmp	r3, #41	@ 0x29
 800957e:	d915      	bls.n	80095ac <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009584:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800958c:	2b00      	cmp	r3, #0
 800958e:	d008      	beq.n	80095a2 <ProcessICMPPacket+0x46>
 8009590:	2b08      	cmp	r3, #8
 8009592:	d10a      	bne.n	80095aa <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8009594:	6879      	ldr	r1, [r7, #4]
 8009596:	68b8      	ldr	r0, [r7, #8]
 8009598:	f000 f810 	bl	80095bc <prvProcessICMPEchoRequest>
 800959c:	4603      	mov	r3, r0
 800959e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 80095a0:	e004      	b.n	80095ac <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 80095a2:	68b8      	ldr	r0, [r7, #8]
 80095a4:	f000 f836 	bl	8009614 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 80095a8:	e000      	b.n	80095ac <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 80095aa:	bf00      	nop
            }
        }

        return eReturn;
 80095ac:	7bfb      	ldrb	r3, [r7, #15]
    }
 80095ae:	4618      	mov	r0, r3
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	080251a0 	.word	0x080251a0

080095bc <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80095bc:	b480      	push	{r7}
 80095be:	b087      	sub	sp, #28
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	3322      	adds	r3, #34	@ 0x22
 80095ca:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	330e      	adds	r3, #14
 80095d0:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	691b      	ldr	r3, [r3, #16]
 80095dc:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	68da      	ldr	r2, [r3, #12]
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	2240      	movs	r2, #64	@ 0x40
 80095f0:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	2200      	movs	r2, #0
 80095f6:	719a      	strb	r2, [r3, #6]
 80095f8:	2200      	movs	r2, #0
 80095fa:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	2200      	movs	r2, #0
 8009600:	709a      	strb	r2, [r3, #2]
 8009602:	2200      	movs	r2, #0
 8009604:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8009606:	2302      	movs	r3, #2
    }
 8009608:	4618      	mov	r0, r3
 800960a:	371c      	adds	r7, #28
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800961c:	2300      	movs	r3, #0
 800961e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	7c1a      	ldrb	r2, [r3, #16]
 8009624:	7c5b      	ldrb	r3, [r3, #17]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	4313      	orrs	r3, r2
 800962a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800962c:	89fb      	ldrh	r3, [r7, #14]
 800962e:	021b      	lsls	r3, r3, #8
 8009630:	b21a      	sxth	r2, r3
 8009632:	89fb      	ldrh	r3, [r7, #14]
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	b29b      	uxth	r3, r3
 8009638:	b21b      	sxth	r3, r3
 800963a:	4313      	orrs	r3, r2
 800963c:	b21b      	sxth	r3, r3
 800963e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8009640:	89fb      	ldrh	r3, [r7, #14]
 8009642:	3b14      	subs	r3, #20
 8009644:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8009646:	89fb      	ldrh	r3, [r7, #14]
 8009648:	3b08      	subs	r3, #8
 800964a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	332a      	adds	r3, #42	@ 0x2a
 8009654:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009656:	2300      	movs	r3, #0
 8009658:	82bb      	strh	r3, [r7, #20]
 800965a:	e00c      	b.n	8009676 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	2b78      	cmp	r3, #120	@ 0x78
 8009662:	d002      	beq.n	800966a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8009664:	2302      	movs	r3, #2
 8009666:	75fb      	strb	r3, [r7, #23]
                break;
 8009668:	e009      	b.n	800967e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	3301      	adds	r3, #1
 800966e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009670:	8abb      	ldrh	r3, [r7, #20]
 8009672:	3301      	adds	r3, #1
 8009674:	82bb      	strh	r3, [r7, #20]
 8009676:	8aba      	ldrh	r2, [r7, #20]
 8009678:	89fb      	ldrh	r3, [r7, #14]
 800967a:	429a      	cmp	r2, r3
 800967c:	d3ee      	bcc.n	800965c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009682:	b29a      	uxth	r2, r3
 8009684:	7dfb      	ldrb	r3, [r7, #23]
 8009686:	4611      	mov	r1, r2
 8009688:	4618      	mov	r0, r3
 800968a:	f7f8 fa3b 	bl	8001b04 <vApplicationPingReplyHook>
    }
 800968e:	bf00      	nop
 8009690:	3718      	adds	r7, #24
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
	...

08009698 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 80096a0:	f000 f90e 	bl	80098c0 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 80096a4:	4802      	ldr	r0, [pc, #8]	@ (80096b0 <prvIPTask+0x18>)
 80096a6:	f019 f855 	bl	8022754 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 80096aa:	f000 f803 	bl	80096b4 <prvProcessIPEventsAndTimers>
 80096ae:	e7fc      	b.n	80096aa <prvIPTask+0x12>
 80096b0:	080251d0 	.word	0x080251d0

080096b4 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 80096b4:	b590      	push	{r4, r7, lr}
 80096b6:	b08d      	sub	sp, #52	@ 0x34
 80096b8:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 80096ba:	f000 ff09 	bl	800a4d0 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 80096be:	f000 fea7 	bl	800a410 <xCalculateSleepTime>
 80096c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80096c4:	4b7c      	ldr	r3, [pc, #496]	@ (80098b8 <prvProcessIPEventsAndTimers+0x204>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f107 0118 	add.w	r1, r7, #24
 80096cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fa fb38 	bl	8003d44 <xQueueReceive>
 80096d4:	4603      	mov	r3, r0
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d101      	bne.n	80096de <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 80096da:	23ff      	movs	r3, #255	@ 0xff
 80096dc:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 80096de:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80096e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e6:	d00d      	beq.n	8009704 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80096e8:	4b73      	ldr	r3, [pc, #460]	@ (80098b8 <prvProcessIPEventsAndTimers+0x204>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7fa fd01 	bl	80040f4 <uxQueueSpacesAvailable>
 80096f2:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 80096f4:	4b71      	ldr	r3, [pc, #452]	@ (80098bc <prvProcessIPEventsAndTimers+0x208>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80096fa:	429a      	cmp	r2, r3
 80096fc:	d202      	bcs.n	8009704 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 80096fe:	4a6f      	ldr	r2, [pc, #444]	@ (80098bc <prvProcessIPEventsAndTimers+0x208>)
 8009700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009702:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8009704:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8009708:	3301      	adds	r3, #1
 800970a:	2b0e      	cmp	r3, #14
 800970c:	f200 80ca 	bhi.w	80098a4 <prvProcessIPEventsAndTimers+0x1f0>
 8009710:	a201      	add	r2, pc, #4	@ (adr r2, 8009718 <prvProcessIPEventsAndTimers+0x64>)
 8009712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009716:	bf00      	nop
 8009718:	080098a5 	.word	0x080098a5
 800971c:	08009755 	.word	0x08009755
 8009720:	0800975f 	.word	0x0800975f
 8009724:	08009769 	.word	0x08009769
 8009728:	08009775 	.word	0x08009775
 800972c:	0800983f 	.word	0x0800983f
 8009730:	08009849 	.word	0x08009849
 8009734:	0800985d 	.word	0x0800985d
 8009738:	08009865 	.word	0x08009865
 800973c:	08009889 	.word	0x08009889
 8009740:	0800977f 	.word	0x0800977f
 8009744:	08009835 	.word	0x08009835
 8009748:	08009853 	.word	0x08009853
 800974c:	080098a5 	.word	0x080098a5
 8009750:	0800988f 	.word	0x0800988f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	4618      	mov	r0, r3
 8009758:	f001 f9cc 	bl	800aaf4 <prvProcessNetworkDownEvent>
            break;
 800975c:	e0a5      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4618      	mov	r0, r3
 8009762:	f000 f955 	bl	8009a10 <prvHandleEthernetPacket>
            break;
 8009766:	e0a0      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2101      	movs	r1, #1
 800976c:	4618      	mov	r0, r3
 800976e:	f000 f95d 	bl	8009a2c <prvForwardTxPacket>
            break;
 8009772:	e09a      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8009774:	f7fe f94e 	bl	8007a14 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8009778:	f002 fdb6 	bl	800c2e8 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 800977c:	e095      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8009782:	2318      	movs	r3, #24
 8009784:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009786:	6a3b      	ldr	r3, [r7, #32]
 8009788:	7a1b      	ldrb	r3, [r3, #8]
 800978a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800978e:	b2db      	uxtb	r3, r3
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <prvProcessIPEventsAndTimers+0xe6>
 8009794:	2b01      	cmp	r3, #1
 8009796:	d01a      	beq.n	80097ce <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009798:	e02c      	b.n	80097f4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800979a:	2302      	movs	r3, #2
 800979c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800979e:	6a3b      	ldr	r3, [r7, #32]
 80097a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a2:	061a      	lsls	r2, r3, #24
 80097a4:	6a3b      	ldr	r3, [r7, #32]
 80097a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097a8:	021b      	lsls	r3, r3, #8
 80097aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097ae:	431a      	orrs	r2, r3
 80097b0:	6a3b      	ldr	r3, [r7, #32]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b4:	0a1b      	lsrs	r3, r3, #8
 80097b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80097ba:	431a      	orrs	r2, r3
 80097bc:	6a3b      	ldr	r3, [r7, #32]
 80097be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097c0:	0e1b      	lsrs	r3, r3, #24
 80097c2:	4313      	orrs	r3, r2
 80097c4:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	2200      	movs	r2, #0
 80097ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 80097cc:	e012      	b.n	80097f4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 80097ce:	230a      	movs	r3, #10
 80097d0:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 80097d2:	6a3b      	ldr	r3, [r7, #32]
 80097d4:	3328      	adds	r3, #40	@ 0x28
 80097d6:	f107 0408 	add.w	r4, r7, #8
 80097da:	6818      	ldr	r0, [r3, #0]
 80097dc:	6859      	ldr	r1, [r3, #4]
 80097de:	689a      	ldr	r2, [r3, #8]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 80097e4:	6a3b      	ldr	r3, [r7, #32]
 80097e6:	3328      	adds	r3, #40	@ 0x28
 80097e8:	2210      	movs	r2, #16
 80097ea:	2100      	movs	r1, #0
 80097ec:	4618      	mov	r0, r3
 80097ee:	f019 fada 	bl	8022da6 <memset>
                        break;
 80097f2:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80097f4:	6a3b      	ldr	r3, [r7, #32]
 80097f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80097f8:	021b      	lsls	r3, r3, #8
 80097fa:	b21a      	sxth	r2, r3
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	b29b      	uxth	r3, r3
 8009804:	b21b      	sxth	r3, r3
 8009806:	4313      	orrs	r3, r2
 8009808:	b21b      	sxth	r3, r3
 800980a:	b29b      	uxth	r3, r3
 800980c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	2200      	movs	r2, #0
 8009812:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8009814:	4639      	mov	r1, r7
 8009816:	2300      	movs	r3, #0
 8009818:	2218      	movs	r2, #24
 800981a:	6a38      	ldr	r0, [r7, #32]
 800981c:	f005 fa32 	bl	800ec84 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009820:	6a3b      	ldr	r3, [r7, #32]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f043 0210 	orr.w	r2, r3, #16
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800982c:	6a38      	ldr	r0, [r7, #32]
 800982e:	f006 f8d8 	bl	800f9e2 <vSocketWakeUpUser>
            break;
 8009832:	e03a      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	4618      	mov	r0, r3
 8009838:	f005 fad8 	bl	800edec <vSocketClose>
            break;
 800983c:	e035      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	4618      	mov	r0, r3
 8009842:	f00d facf 	bl	8016de4 <vProcessGeneratedUDPPacket>
            break;
 8009846:	e030      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8009848:	69fb      	ldr	r3, [r7, #28]
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f88c 	bl	8009968 <prvCallDHCP_RA_Handler>
            break;
 8009850:	e02b      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	4618      	mov	r0, r3
 8009856:	f007 fbd1 	bl	8010ffc <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800985a:	e026      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800985c:	2001      	movs	r0, #1
 800985e:	f000 ffab 	bl	800a7b8 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8009862:	e022      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009868:	6a38      	ldr	r0, [r7, #32]
 800986a:	f008 fd0b 	bl	8012284 <xTCPCheckNewClient>
 800986e:	4603      	mov	r3, r0
 8009870:	2b00      	cmp	r3, #0
 8009872:	d019      	beq.n	80098a8 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8009874:	6a3b      	ldr	r3, [r7, #32]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f043 0204 	orr.w	r2, r3, #4
 800987c:	6a3b      	ldr	r3, [r7, #32]
 800987e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8009880:	6a38      	ldr	r0, [r7, #32]
 8009882:	f006 f8ae 	bl	800f9e2 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8009886:	e00f      	b.n	80098a8 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8009888:	f007 faa2 	bl	8010dd0 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800988c:	e00d      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8009892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4618      	mov	r0, r3
 8009898:	f7f9 ff10 	bl	80036bc <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800989c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800989e:	f7fd f92d 	bl	8006afc <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80098a2:	e002      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 80098a4:	bf00      	nop
 80098a6:	e000      	b.n	80098aa <prvProcessIPEventsAndTimers+0x1f6>
            break;
 80098a8:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 80098aa:	f000 f833 	bl	8009914 <prvIPTask_CheckPendingEvents>
}
 80098ae:	bf00      	nop
 80098b0:	3734      	adds	r7, #52	@ 0x34
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd90      	pop	{r4, r7, pc}
 80098b6:	bf00      	nop
 80098b8:	200011a0 	.word	0x200011a0
 80098bc:	20000014 	.word	0x20000014

080098c0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 80098c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80098ca:	f000 ff2b 	bl	800a724 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80098ce:	4b0f      	ldr	r3, [pc, #60]	@ (800990c <prvIPTask_Initialise+0x4c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	607b      	str	r3, [r7, #4]
 80098d4:	e005      	b.n	80098e2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 80098d6:	6878      	ldr	r0, [r7, #4]
 80098d8:	f000 f8be 	bl	8009a58 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e0:	607b      	str	r3, [r7, #4]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1f6      	bne.n	80098d6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 80098e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80098ec:	f000 fee8 	bl	800a6c0 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 80098f0:	2000      	movs	r0, #0
 80098f2:	f000 ff9b 	bl	800a82c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 80098f6:	f7fe fa31 	bl	8007d5c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 80098fa:	f7fe fb0f 	bl	8007f1c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 80098fe:	4b04      	ldr	r3, [pc, #16]	@ (8009910 <prvIPTask_Initialise+0x50>)
 8009900:	2201      	movs	r2, #1
 8009902:	601a      	str	r2, [r3, #0]
}
 8009904:	bf00      	nop
 8009906:	3708      	adds	r7, #8
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	2000152c 	.word	0x2000152c
 8009910:	200011b0 	.word	0x200011b0

08009914 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800991a:	4b12      	ldr	r3, [pc, #72]	@ (8009964 <prvIPTask_CheckPendingEvents+0x50>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d01c      	beq.n	800995c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009922:	4b10      	ldr	r3, [pc, #64]	@ (8009964 <prvIPTask_CheckPendingEvents+0x50>)
 8009924:	2200      	movs	r2, #0
 8009926:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009928:	f004 f836 	bl	800d998 <FreeRTOS_FirstNetworkInterface>
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	e012      	b.n	8009956 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	7f1b      	ldrb	r3, [r3, #28]
 8009934:	f003 0302 	and.w	r3, r3, #2
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b00      	cmp	r3, #0
 800993c:	d007      	beq.n	800994e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f001 f8d8 	bl	800aaf4 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	7f13      	ldrb	r3, [r2, #28]
 8009948:	f36f 0341 	bfc	r3, #1, #1
 800994c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f004 f82e 	bl	800d9b0 <FreeRTOS_NextNetworkInterface>
 8009954:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1e9      	bne.n	8009930 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800995c:	bf00      	nop
 800995e:	3708      	adds	r7, #8
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200011a8 	.word	0x200011a8

08009968 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8009970:	2300      	movs	r3, #0
 8009972:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800997a:	f003 0304 	and.w	r3, r3, #4
 800997e:	b2db      	uxtb	r3, r3
 8009980:	2b00      	cmp	r3, #0
 8009982:	d001      	beq.n	8009988 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8009984:	2301      	movs	r3, #1
 8009986:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b01      	cmp	r3, #1
 800998c:	d10b      	bne.n	80099a6 <prvCallDHCP_RA_Handler+0x3e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009994:	f003 0302 	and.w	r3, r3, #2
 8009998:	b2db      	uxtb	r3, r3
 800999a:	2b00      	cmp	r3, #0
 800999c:	d003      	beq.n	80099a6 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 800999e:	6879      	ldr	r1, [r7, #4]
 80099a0:	2000      	movs	r0, #0
 80099a2:	f003 fecd 	bl	800d740 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 80099a6:	bf00      	nop
 80099a8:	3710      	adds	r7, #16
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 80099b0:	b480      	push	{r7}
 80099b2:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 80099b4:	4b03      	ldr	r3, [pc, #12]	@ (80099c4 <FreeRTOS_GetIPTaskHandle+0x14>)
 80099b6:	681b      	ldr	r3, [r3, #0]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	200011ac 	.word	0x200011ac

080099c8 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	b082      	sub	sp, #8
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80099d6:	f003 0304 	and.w	r3, r3, #4
 80099da:	b2db      	uxtb	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 80099e0:	2101      	movs	r1, #1
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f002 fa7e 	bl	800bee4 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 80099e8:	687a      	ldr	r2, [r7, #4]
 80099ea:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80099ee:	f043 0310 	orr.w	r3, r3, #16
 80099f2:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80099f6:	2000      	movs	r0, #0
 80099f8:	f7f8 f802 	bl	8001a00 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 80099fc:	f7fe f9ae 	bl	8007d5c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8009a00:	f242 7010 	movw	r0, #10000	@ 0x2710
 8009a04:	f000 fe6a 	bl	800a6dc <vARPTimerReload>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d002      	beq.n	8009a24 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f000 f9c8 	bl	8009db4 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009a24:	bf00      	nop
 8009a26:	3708      	adds	r7, #8
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	687a      	ldr	r2, [r7, #4]
 8009a46:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009a48:	683a      	ldr	r2, [r7, #0]
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4798      	blx	r3
    }
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}
	...

08009a58 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b086      	sub	sp, #24
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	7f13      	ldrb	r3, [r2, #28]
 8009a68:	f36f 0300 	bfc	r3, #0, #1
 8009a6c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009a76:	f107 030c 	add.w	r3, r7, #12
 8009a7a:	6979      	ldr	r1, [r7, #20]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 f8df 	bl	8009c40 <xSendEventStructToIPTask>
 8009a82:	4603      	mov	r3, r0
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d008      	beq.n	8009a9a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	7f13      	ldrb	r3, [r2, #28]
 8009a8c:	f043 0302 	orr.w	r3, r3, #2
 8009a90:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8009a92:	4b06      	ldr	r3, [pc, #24]	@ (8009aac <FreeRTOS_NetworkDown+0x54>)
 8009a94:	2201      	movs	r2, #1
 8009a96:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009a98:	e004      	b.n	8009aa4 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	7f13      	ldrb	r3, [r2, #28]
 8009a9e:	f36f 0341 	bfc	r3, #1, #1
 8009aa2:	7713      	strb	r3, [r2, #28]
}
 8009aa4:	bf00      	nop
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200011a8 	.word	0x200011a8

08009ab0 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8009aba:	f003 ff6d 	bl	800d998 <FreeRTOS_FirstNetworkInterface>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d104      	bne.n	8009ace <FreeRTOS_IPInit_Multi+0x1e>
 8009ac4:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8009ac8:	4823      	ldr	r0, [pc, #140]	@ (8009b58 <FreeRTOS_IPInit_Multi+0xa8>)
 8009aca:	f7f7 ff65 	bl	8001998 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8009ace:	f001 f8cb 	bl	800ac68 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	2108      	movs	r1, #8
 8009ad6:	2045      	movs	r0, #69	@ 0x45
 8009ad8:	f7f9 ff82 	bl	80039e0 <xQueueGenericCreate>
 8009adc:	4603      	mov	r3, r0
 8009ade:	4a1f      	ldr	r2, [pc, #124]	@ (8009b5c <FreeRTOS_IPInit_Multi+0xac>)
 8009ae0:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8009ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b5c <FreeRTOS_IPInit_Multi+0xac>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d104      	bne.n	8009af4 <FreeRTOS_IPInit_Multi+0x44>
 8009aea:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8009aee:	481a      	ldr	r0, [pc, #104]	@ (8009b58 <FreeRTOS_IPInit_Multi+0xa8>)
 8009af0:	f7f7 ff52 	bl	8001998 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8009af4:	4b19      	ldr	r3, [pc, #100]	@ (8009b5c <FreeRTOS_IPInit_Multi+0xac>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d025      	beq.n	8009b48 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8009afc:	4b17      	ldr	r3, [pc, #92]	@ (8009b5c <FreeRTOS_IPInit_Multi+0xac>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4917      	ldr	r1, [pc, #92]	@ (8009b60 <FreeRTOS_IPInit_Multi+0xb0>)
 8009b02:	4618      	mov	r0, r3
 8009b04:	f7fa fc58 	bl	80043b8 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8009b08:	f00d feaa 	bl	8017860 <xNetworkBuffersInitialise>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d10e      	bne.n	8009b30 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8009b12:	f004 fc7f 	bl	800e414 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8009b16:	4b13      	ldr	r3, [pc, #76]	@ (8009b64 <FreeRTOS_IPInit_Multi+0xb4>)
 8009b18:	9301      	str	r3, [sp, #4]
 8009b1a:	2304      	movs	r3, #4
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8009b24:	4910      	ldr	r1, [pc, #64]	@ (8009b68 <FreeRTOS_IPInit_Multi+0xb8>)
 8009b26:	4811      	ldr	r0, [pc, #68]	@ (8009b6c <FreeRTOS_IPInit_Multi+0xbc>)
 8009b28:	f7fa fcfc 	bl	8004524 <xTaskCreate>
 8009b2c:	6078      	str	r0, [r7, #4]
 8009b2e:	e00e      	b.n	8009b4e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009b30:	480f      	ldr	r0, [pc, #60]	@ (8009b70 <FreeRTOS_IPInit_Multi+0xc0>)
 8009b32:	f018 fe0f 	bl	8022754 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009b36:	4b09      	ldr	r3, [pc, #36]	@ (8009b5c <FreeRTOS_IPInit_Multi+0xac>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	f7fa fafa 	bl	8004134 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009b40:	4b06      	ldr	r3, [pc, #24]	@ (8009b5c <FreeRTOS_IPInit_Multi+0xac>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	e002      	b.n	8009b4e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009b48:	480a      	ldr	r0, [pc, #40]	@ (8009b74 <FreeRTOS_IPInit_Multi+0xc4>)
 8009b4a:	f018 fe03 	bl	8022754 <lUDPLoggingPrintf>
    }

    return xReturn;
 8009b4e:	687b      	ldr	r3, [r7, #4]
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	080251e4 	.word	0x080251e4
 8009b5c:	200011a0 	.word	0x200011a0
 8009b60:	08025210 	.word	0x08025210
 8009b64:	200011ac 	.word	0x200011ac
 8009b68:	08025218 	.word	0x08025218
 8009b6c:	08009699 	.word	0x08009699
 8009b70:	08025220 	.word	0x08025220
 8009b74:	0802525c 	.word	0x0802525c

08009b78 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	60f8      	str	r0, [r7, #12]
 8009b80:	60b9      	str	r1, [r7, #8]
 8009b82:	607a      	str	r2, [r7, #4]
 8009b84:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d023      	beq.n	8009bd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009b92:	f003 0304 	and.w	r3, r3, #4
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d11b      	bne.n	8009bd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d003      	beq.n	8009baa <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d003      	beq.n	8009bb8 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009bb0:	69bb      	ldr	r3, [r7, #24]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d003      	beq.n	8009bc6 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d003      	beq.n	8009bd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8009bcc:	69bb      	ldr	r3, [r7, #24]
 8009bce:	68da      	ldr	r2, [r3, #12]
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8009bd4:	bf00      	nop
 8009bd6:	3714      	adds	r7, #20
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr

08009be0 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b088      	sub	sp, #32
 8009be4:	af02      	add	r7, sp, #8
 8009be6:	60f8      	str	r0, [r7, #12]
 8009be8:	60b9      	str	r1, [r7, #8]
 8009bea:	607a      	str	r2, [r7, #4]
 8009bec:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8009bee:	2000      	movs	r0, #0
 8009bf0:	f003 ff72 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 8009bf4:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d007      	beq.n	8009c0c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	9300      	str	r3, [sp, #0]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	687a      	ldr	r2, [r7, #4]
 8009c04:	68b9      	ldr	r1, [r7, #8]
 8009c06:	68f8      	ldr	r0, [r7, #12]
 8009c08:	f7ff ffb6 	bl	8009b78 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8009c0c:	bf00      	nop
 8009c0e:	3718      	adds	r7, #24
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b086      	sub	sp, #24
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009c26:	2300      	movs	r3, #0
 8009c28:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8009c2a:	f107 030c 	add.w	r3, r7, #12
 8009c2e:	6979      	ldr	r1, [r7, #20]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 f805 	bl	8009c40 <xSendEventStructToIPTask>
 8009c36:	4603      	mov	r3, r0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3718      	adds	r7, #24
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8009c4e:	f000 fb93 	bl	800a378 <xIPIsNetworkTaskReady>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d107      	bne.n	8009c68 <xSendEventStructToIPTask+0x28>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d002      	beq.n	8009c68 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009c62:	2300      	movs	r3, #0
 8009c64:	617b      	str	r3, [r7, #20]
 8009c66:	e035      	b.n	8009cd4 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8009c72:	2b06      	cmp	r3, #6
 8009c74:	d10c      	bne.n	8009c90 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009c76:	2001      	movs	r0, #1
 8009c78:	f000 fd9e 	bl	800a7b8 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8009c7c:	4b18      	ldr	r3, [pc, #96]	@ (8009ce0 <xSendEventStructToIPTask+0xa0>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7fa fa1d 	bl	80040c0 <uxQueueMessagesWaiting>
 8009c86:	4603      	mov	r3, r0
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d001      	beq.n	8009c90 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d01c      	beq.n	8009cd0 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009c96:	f000 ff15 	bl	800aac4 <xIsCallingFromIPTask>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d104      	bne.n	8009caa <xSendEventStructToIPTask+0x6a>
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d001      	beq.n	8009caa <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009ca6:	2300      	movs	r3, #0
 8009ca8:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8009caa:	4b0d      	ldr	r3, [pc, #52]	@ (8009ce0 <xSendEventStructToIPTask+0xa0>)
 8009cac:	6818      	ldr	r0, [r3, #0]
 8009cae:	2300      	movs	r3, #0
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	6879      	ldr	r1, [r7, #4]
 8009cb4:	f7f9 ff5e 	bl	8003b74 <xQueueGenericSend>
 8009cb8:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d109      	bne.n	8009cd4 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8009cc6:	4619      	mov	r1, r3
 8009cc8:	4806      	ldr	r0, [pc, #24]	@ (8009ce4 <xSendEventStructToIPTask+0xa4>)
 8009cca:	f018 fd43 	bl	8022754 <lUDPLoggingPrintf>
 8009cce:	e001      	b.n	8009cd4 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8009cd4:	697b      	ldr	r3, [r7, #20]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3718      	adds	r7, #24
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	200011a0 	.word	0x200011a0
 8009ce4:	080252a0 	.word	0x080252a0

08009ce8 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d102      	bne.n	8009d08 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8009d02:	2300      	movs	r3, #0
 8009d04:	75fb      	strb	r3, [r7, #23]
 8009d06:	e032      	b.n	8009d6e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f003 ff81 	bl	800dc18 <FreeRTOS_FindEndPointOnMAC>
 8009d16:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d002      	beq.n	8009d24 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	75fb      	strb	r3, [r7, #23]
 8009d22:	e024      	b.n	8009d6e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009d24:	693b      	ldr	r3, [r7, #16]
 8009d26:	2206      	movs	r2, #6
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4820      	ldr	r0, [pc, #128]	@ (8009dac <eConsiderFrameForProcessing+0xc4>)
 8009d2c:	f019 fec3 	bl	8023ab6 <memcmp>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d102      	bne.n	8009d3c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009d36:	2301      	movs	r3, #1
 8009d38:	75fb      	strb	r3, [r7, #23]
 8009d3a:	e018      	b.n	8009d6e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	2206      	movs	r2, #6
 8009d40:	4619      	mov	r1, r3
 8009d42:	481b      	ldr	r0, [pc, #108]	@ (8009db0 <eConsiderFrameForProcessing+0xc8>)
 8009d44:	f019 feb7 	bl	8023ab6 <memcmp>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d102      	bne.n	8009d54 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 8009d4e:	2301      	movs	r3, #1
 8009d50:	75fb      	strb	r3, [r7, #23]
 8009d52:	e00c      	b.n	8009d6e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	781b      	ldrb	r3, [r3, #0]
 8009d58:	2b33      	cmp	r3, #51	@ 0x33
 8009d5a:	d106      	bne.n	8009d6a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009d60:	2b33      	cmp	r3, #51	@ 0x33
 8009d62:	d102      	bne.n	8009d6a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009d64:	2301      	movs	r3, #1
 8009d66:	75fb      	strb	r3, [r7, #23]
 8009d68:	e001      	b.n	8009d6e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 8009d6e:	7dfb      	ldrb	r3, [r7, #23]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d115      	bne.n	8009da0 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009d74:	693b      	ldr	r3, [r7, #16]
 8009d76:	7b1a      	ldrb	r2, [r3, #12]
 8009d78:	7b5b      	ldrb	r3, [r3, #13]
 8009d7a:	021b      	lsls	r3, r3, #8
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009d80:	897b      	ldrh	r3, [r7, #10]
 8009d82:	021b      	lsls	r3, r3, #8
 8009d84:	b21a      	sxth	r2, r3
 8009d86:	897b      	ldrh	r3, [r7, #10]
 8009d88:	0a1b      	lsrs	r3, r3, #8
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	b21b      	sxth	r3, r3
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	b21b      	sxth	r3, r3
 8009d92:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009d94:	897b      	ldrh	r3, [r7, #10]
 8009d96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009d9a:	d801      	bhi.n	8009da0 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3718      	adds	r7, #24
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	08027edc 	.word	0x08027edc
 8009db0:	08027ecc 	.word	0x08027ecc

08009db4 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b084      	sub	sp, #16
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d03d      	beq.n	8009e44 <prvProcessEthernetPacket+0x90>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d039      	beq.n	8009e44 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd4:	2b0d      	cmp	r3, #13
 8009dd6:	d934      	bls.n	8009e42 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8009dd8:	2301      	movs	r3, #1
 8009dda:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009de0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	899b      	ldrh	r3, [r3, #12]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d015      	beq.n	8009e1c <prvProcessEthernetPacket+0x68>
 8009df0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009df4:	4293      	cmp	r3, r2
 8009df6:	dc21      	bgt.n	8009e3c <prvProcessEthernetPacket+0x88>
 8009df8:	2b08      	cmp	r3, #8
 8009dfa:	d00f      	beq.n	8009e1c <prvProcessEthernetPacket+0x68>
 8009dfc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8009e00:	d11c      	bne.n	8009e3c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e06:	2b29      	cmp	r3, #41	@ 0x29
 8009e08:	d905      	bls.n	8009e16 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f7fc ffe6 	bl	8006ddc <eARPProcessPacket>
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8009e14:	e016      	b.n	8009e44 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8009e16:	2300      	movs	r3, #0
 8009e18:	73fb      	strb	r3, [r7, #15]
                        break;
 8009e1a:	e013      	b.n	8009e44 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e20:	2b21      	cmp	r3, #33	@ 0x21
 8009e22:	d908      	bls.n	8009e36 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e28:	6879      	ldr	r1, [r7, #4]
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 f8c6 	bl	8009fbc <prvProcessIPPacket>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009e34:	e006      	b.n	8009e44 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73fb      	strb	r3, [r7, #15]
                    break;
 8009e3a:	e003      	b.n	8009e44 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8009e40:	e000      	b.n	8009e44 <prvProcessEthernetPacket+0x90>
            break;
 8009e42:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009e44:	7bfb      	ldrb	r3, [r7, #15]
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	d00b      	beq.n	8009e62 <prvProcessEthernetPacket+0xae>
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	dc19      	bgt.n	8009e82 <prvProcessEthernetPacket+0xce>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d002      	beq.n	8009e58 <prvProcessEthernetPacket+0xa4>
 8009e52:	2b03      	cmp	r3, #3
 8009e54:	d019      	beq.n	8009e8a <prvProcessEthernetPacket+0xd6>
 8009e56:	e014      	b.n	8009e82 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009e58:	2101      	movs	r1, #1
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 f9a4 	bl	800a1a8 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009e60:	e014      	b.n	8009e8c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009e62:	4b0c      	ldr	r3, [pc, #48]	@ (8009e94 <prvProcessEthernetPacket+0xe0>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d107      	bne.n	8009e7a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8009e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8009e94 <prvProcessEthernetPacket+0xe0>)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009e70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009e74:	f000 fc06 	bl	800a684 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009e78:	e008      	b.n	8009e8c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f00d fdc2 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009e80:	e004      	b.n	8009e8c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f00d fdbe 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009e88:	e000      	b.n	8009e8c <prvProcessEthernetPacket+0xd8>
            break;
 8009e8a:	bf00      	nop
    }
}
 8009e8c:	bf00      	nop
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	2000119c 	.word	0x2000119c

08009e98 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009e98:	b5b0      	push	{r4, r5, r7, lr}
 8009e9a:	b08c      	sub	sp, #48	@ 0x30
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eae:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb2:	3322      	adds	r3, #34	@ 0x22
 8009eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fa76 	bl	800a3a8 <uxIPHeaderSizePacket>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	3316      	adds	r3, #22
 8009ec0:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	899b      	ldrh	r3, [r3, #12]
 8009ec6:	b29b      	uxth	r3, r3
 8009ec8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	d105      	bne.n	8009edc <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ed4:	3336      	adds	r3, #54	@ 0x36
 8009ed6:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	889b      	ldrh	r3, [r3, #4]
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	021b      	lsls	r3, r3, #8
 8009ee4:	b21a      	sxth	r2, r3
 8009ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee8:	889b      	ldrh	r3, [r3, #4]
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	0a1b      	lsrs	r3, r3, #8
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	b21b      	sxth	r3, r3
 8009ef2:	4313      	orrs	r3, r2
 8009ef4:	b21b      	sxth	r3, r3
 8009ef6:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8009ef8:	8b7b      	ldrh	r3, [r7, #26]
 8009efa:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009efe:	899b      	ldrh	r3, [r3, #12]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	2b08      	cmp	r3, #8
 8009f04:	d11a      	bne.n	8009f3c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8009f06:	8b7c      	ldrh	r4, [r7, #26]
 8009f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f0a:	8a1b      	ldrh	r3, [r3, #16]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	b21a      	sxth	r2, r3
 8009f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f14:	8a1b      	ldrh	r3, [r3, #16]
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	0a1b      	lsrs	r3, r3, #8
 8009f1a:	b29b      	uxth	r3, r3
 8009f1c:	b21b      	sxth	r3, r3
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	b21b      	sxth	r3, r3
 8009f22:	b29b      	uxth	r3, r3
 8009f24:	461d      	mov	r5, r3
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f000 fa3e 	bl	800a3a8 <uxIPHeaderSizePacket>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009f30:	429c      	cmp	r4, r3
 8009f32:	d903      	bls.n	8009f3c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009f3a:	e038      	b.n	8009fae <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f40:	6a3a      	ldr	r2, [r7, #32]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d833      	bhi.n	8009fae <prvProcessUDPPacket+0x116>
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	2b07      	cmp	r3, #7
 8009f4a:	d930      	bls.n	8009fae <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	1ad3      	subs	r3, r2, r3
 8009f54:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	3b08      	subs	r3, #8
 8009f5a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8009f5c:	693a      	ldr	r2, [r7, #16]
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d904      	bls.n	8009f6e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	6a3b      	ldr	r3, [r7, #32]
 8009f68:	441a      	add	r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8009f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f70:	881b      	ldrh	r3, [r3, #0]
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	885b      	ldrh	r3, [r3, #2]
 8009f86:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009f88:	f107 0208 	add.w	r2, r7, #8
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f00c ff48 	bl	8016e24 <xProcessReceivedUDPPacket>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d103      	bne.n	8009fa2 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009fa0:	e005      	b.n	8009fae <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d102      	bne.n	8009fae <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009fa8:	2304      	movs	r3, #4
 8009faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8009fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3730      	adds	r7, #48	@ 0x30
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009fbc <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8009fc6:	2314      	movs	r3, #20
 8009fc8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	330e      	adds	r3, #14
 8009fd6:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	899b      	ldrh	r3, [r3, #12]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	2b08      	cmp	r3, #8
 8009fe0:	d023      	beq.n	800a02a <prvProcessIPPacket+0x6e>
 8009fe2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d144      	bne.n	800a074 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fee:	2b35      	cmp	r3, #53	@ 0x35
 8009ff0:	d802      	bhi.n	8009ff8 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8009ff6:	e043      	b.n	800a080 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ffc:	330e      	adds	r3, #14
 8009ffe:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 800a000:	2328      	movs	r3, #40	@ 0x28
 800a002:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a004:	693b      	ldr	r3, [r7, #16]
 800a006:	799b      	ldrb	r3, [r3, #6]
 800a008:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	330e      	adds	r3, #14
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	4618      	mov	r0, r3
 800a014:	f001 fb6c 	bl	800b6f0 <prvAllowIPPacketIPv6>
 800a018:	4603      	mov	r3, r0
 800a01a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a020:	3b06      	subs	r3, #6
 800a022:	693a      	ldr	r2, [r7, #16]
 800a024:	7812      	ldrb	r2, [r2, #0]
 800a026:	701a      	strb	r2, [r3, #0]
                break;
 800a028:	e02a      	b.n	800a080 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	009b      	lsls	r3, r3, #2
 800a034:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a038:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a03e:	3b0e      	subs	r3, #14
 800a040:	69ba      	ldr	r2, [r7, #24]
 800a042:	429a      	cmp	r2, r3
 800a044:	d802      	bhi.n	800a04c <prvProcessIPPacket+0x90>
 800a046:	69bb      	ldr	r3, [r7, #24]
 800a048:	2b13      	cmp	r3, #19
 800a04a:	d802      	bhi.n	800a052 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 800a04c:	2300      	movs	r3, #0
 800a04e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 800a050:	e016      	b.n	800a080 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	7ddb      	ldrb	r3, [r3, #23]
 800a056:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f001 f81b 	bl	800b098 <prvAllowIPPacketIPv4>
 800a062:	4603      	mov	r3, r0
 800a064:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a06a:	3b06      	subs	r3, #6
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	7812      	ldrb	r2, [r2, #0]
 800a070:	701a      	strb	r2, [r3, #0]
                   break;
 800a072:	e005      	b.n	800a080 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 800a074:	2300      	movs	r3, #0
 800a076:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 800a078:	484a      	ldr	r0, [pc, #296]	@ (800a1a4 <prvProcessIPPacket+0x1e8>)
 800a07a:	f018 fb6b 	bl	8022754 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 800a07e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 800a080:	7ffb      	ldrb	r3, [r7, #31]
 800a082:	2b01      	cmp	r3, #1
 800a084:	f040 8088 	bne.w	800a198 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	899b      	ldrh	r3, [r3, #12]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	2b08      	cmp	r3, #8
 800a090:	d004      	beq.n	800a09c <prvProcessIPPacket+0xe0>
 800a092:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a096:	4293      	cmp	r3, r2
 800a098:	d009      	beq.n	800a0ae <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800a09a:	e020      	b.n	800a0de <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800a09c:	69bb      	ldr	r3, [r7, #24]
 800a09e:	2b14      	cmp	r3, #20
 800a0a0:	d91a      	bls.n	800a0d8 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 800a0a2:	6838      	ldr	r0, [r7, #0]
 800a0a4:	f001 f852 	bl	800b14c <prvCheckIP4HeaderOptions>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	77fb      	strb	r3, [r7, #31]
                    break;
 800a0ac:	e014      	b.n	800a0d8 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f001 fb3a 	bl	800b72c <xGetExtensionOrder>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dd0e      	ble.n	800a0dc <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 800a0be:	2101      	movs	r1, #1
 800a0c0:	6838      	ldr	r0, [r7, #0]
 800a0c2:	f001 fb99 	bl	800b7f8 <eHandleIPv6ExtensionHeaders>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 800a0ca:	7ffb      	ldrb	r3, [r7, #31]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d005      	beq.n	800a0dc <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	799b      	ldrb	r3, [r3, #6]
 800a0d4:	75fb      	strb	r3, [r7, #23]
                    break;
 800a0d6:	e001      	b.n	800a0dc <prvProcessIPPacket+0x120>
                    break;
 800a0d8:	bf00      	nop
 800a0da:	e000      	b.n	800a0de <prvProcessIPPacket+0x122>
                    break;
 800a0dc:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 800a0de:	7ffb      	ldrb	r3, [r7, #31]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d059      	beq.n	800a198 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 800a0e4:	7dfb      	ldrb	r3, [r7, #23]
 800a0e6:	2b11      	cmp	r3, #17
 800a0e8:	d026      	beq.n	800a138 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 800a0ea:	6838      	ldr	r0, [r7, #0]
 800a0ec:	f7fd f918 	bl	8007320 <xCheckRequiresARPResolution>
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	d102      	bne.n	800a0fc <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 800a0f6:	2304      	movs	r3, #4
 800a0f8:	77fb      	strb	r3, [r7, #31]
 800a0fa:	e01d      	b.n	800a138 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	899b      	ldrh	r3, [r3, #12]
 800a100:	b29b      	uxth	r3, r3
 800a102:	2b08      	cmp	r3, #8
 800a104:	d00e      	beq.n	800a124 <prvProcessIPPacket+0x168>
 800a106:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d113      	bne.n	800a136 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	1d98      	adds	r0, r3, #6
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	f103 0108 	add.w	r1, r3, #8
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a11c:	461a      	mov	r2, r3
 800a11e:	f002 f843 	bl	800c1a8 <vNDRefreshCacheEntry>
                                break;
 800a122:	e009      	b.n	800a138 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	1d9a      	adds	r2, r3, #6
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	68db      	ldr	r3, [r3, #12]
 800a12c:	4619      	mov	r1, r3
 800a12e:	4610      	mov	r0, r2
 800a130:	f7fd f9d6 	bl	80074e0 <vARPRefreshCacheEntryAge>
                                break;
 800a134:	e000      	b.n	800a138 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 800a136:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 800a138:	7ffb      	ldrb	r3, [r7, #31]
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d02c      	beq.n	800a198 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
 800a140:	2b3a      	cmp	r3, #58	@ 0x3a
 800a142:	d010      	beq.n	800a166 <prvProcessIPPacket+0x1aa>
 800a144:	2b3a      	cmp	r3, #58	@ 0x3a
 800a146:	dc23      	bgt.n	800a190 <prvProcessIPPacket+0x1d4>
 800a148:	2b11      	cmp	r3, #17
 800a14a:	d012      	beq.n	800a172 <prvProcessIPPacket+0x1b6>
 800a14c:	2b11      	cmp	r3, #17
 800a14e:	dc1f      	bgt.n	800a190 <prvProcessIPPacket+0x1d4>
 800a150:	2b01      	cmp	r3, #1
 800a152:	d002      	beq.n	800a15a <prvProcessIPPacket+0x19e>
 800a154:	2b06      	cmp	r3, #6
 800a156:	d012      	beq.n	800a17e <prvProcessIPPacket+0x1c2>
 800a158:	e01a      	b.n	800a190 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800a15a:	6838      	ldr	r0, [r7, #0]
 800a15c:	f7ff f9fe 	bl	800955c <ProcessICMPPacket>
 800a160:	4603      	mov	r3, r0
 800a162:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 800a164:	e018      	b.n	800a198 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 800a166:	6838      	ldr	r0, [r7, #0]
 800a168:	f002 fb6e 	bl	800c848 <prvProcessICMPMessage_IPv6>
 800a16c:	4603      	mov	r3, r0
 800a16e:	77fb      	strb	r3, [r7, #31]
                            break;
 800a170:	e012      	b.n	800a198 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 800a172:	6838      	ldr	r0, [r7, #0]
 800a174:	f7ff fe90 	bl	8009e98 <prvProcessUDPPacket>
 800a178:	4603      	mov	r3, r0
 800a17a:	77fb      	strb	r3, [r7, #31]
                        break;
 800a17c:	e00c      	b.n	800a198 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800a17e:	6838      	ldr	r0, [r7, #0]
 800a180:	f007 febe 	bl	8011f00 <xProcessReceivedTCPPacket>
 800a184:	4603      	mov	r3, r0
 800a186:	2b01      	cmp	r3, #1
 800a188:	d105      	bne.n	800a196 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800a18a:	2303      	movs	r3, #3
 800a18c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800a18e:	e002      	b.n	800a196 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 800a190:	2300      	movs	r3, #0
 800a192:	77fb      	strb	r3, [r7, #31]
                        break;
 800a194:	e000      	b.n	800a198 <prvProcessIPPacket+0x1dc>
                                break;
 800a196:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 800a198:	7ffb      	ldrb	r3, [r7, #31]
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	080252cc 	.word	0x080252cc

0800a1a8 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b08e      	sub	sp, #56	@ 0x38
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1b6:	2b3b      	cmp	r3, #59	@ 0x3b
 800a1b8:	d818      	bhi.n	800a1ec <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1be:	4619      	mov	r1, r3
 800a1c0:	486a      	ldr	r0, [pc, #424]	@ (800a36c <vReturnEthernetFrame+0x1c4>)
 800a1c2:	f018 fac7 	bl	8022754 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1cc:	e008      	b.n	800a1e0 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a1d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1d4:	4413      	add	r3, r2
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 800a1da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1dc:	3301      	adds	r3, #1
 800a1de:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1e2:	2b3b      	cmp	r3, #59	@ 0x3b
 800a1e4:	ddf3      	ble.n	800a1ce <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	223c      	movs	r2, #60	@ 0x3c
 800a1ea:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d111      	bne.n	800a216 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f000 fb87 	bl	800a90c <pxDuplicateNetworkBufferWithDescriptor>
 800a1fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 800a200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a202:	2b00      	cmp	r3, #0
 800a204:	d005      	beq.n	800a212 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 800a206:	2301      	movs	r3, #1
 800a208:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a210:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 800a212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a214:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f000 80a3 	beq.w	800a364 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a222:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 800a224:	2300      	movs	r3, #0
 800a226:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 800a228:	2300      	movs	r3, #0
 800a22a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a230:	2b00      	cmp	r3, #0
 800a232:	d12f      	bne.n	800a294 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 800a234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a236:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a23a:	061a      	lsls	r2, r3, #24
 800a23c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a242:	021b      	lsls	r3, r3, #8
 800a244:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a248:	431a      	orrs	r2, r3
 800a24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a250:	0a1b      	lsrs	r3, r3, #8
 800a252:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a256:	431a      	orrs	r2, r3
 800a258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a25a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a25e:	0e1b      	lsrs	r3, r3, #24
 800a260:	4313      	orrs	r3, r2
 800a262:	4619      	mov	r1, r3
 800a264:	4842      	ldr	r0, [pc, #264]	@ (800a370 <vReturnEthernetFrame+0x1c8>)
 800a266:	f018 fa75 	bl	8022754 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a26e:	899b      	ldrh	r3, [r3, #12]
 800a270:	b29b      	uxth	r3, r3
 800a272:	2b08      	cmp	r3, #8
 800a274:	d003      	beq.n	800a27e <vReturnEthernetFrame+0xd6>
 800a276:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a27a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800a27c:	e00a      	b.n	800a294 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800a27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a280:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a284:	2107      	movs	r1, #7
 800a286:	4618      	mov	r0, r3
 800a288:	f003 fcfe 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 800a28c:	4602      	mov	r2, r0
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 800a292:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d063      	beq.n	800a364 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800a2a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 800a2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2a8:	899b      	ldrh	r3, [r3, #12]
 800a2aa:	b29b      	uxth	r3, r3
 800a2ac:	2b08      	cmp	r3, #8
 800a2ae:	d11c      	bne.n	800a2ea <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 800a2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2b2:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800a2b6:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800a2be:	f107 0114 	add.w	r1, r7, #20
 800a2c2:	f107 0310 	add.w	r3, r7, #16
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7fd fa54 	bl	8007774 <eARPGetCacheEntry>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 800a2d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d103      	bne.n	800a2e2 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 800a2da:	f107 0314 	add.w	r3, r7, #20
 800a2de:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 800a2e0:	e007      	b.n	800a2f2 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e4:	3306      	adds	r3, #6
 800a2e6:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 800a2e8:	e003      	b.n	800a2f2 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	3306      	adds	r3, #6
 800a2ee:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 800a2f0:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 800a2f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2f4:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 800a2f6:	2206      	movs	r2, #6
 800a2f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a2fa:	69f8      	ldr	r0, [r7, #28]
 800a2fc:	f018 fc46 	bl	8022b8c <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a304:	33e8      	adds	r3, #232	@ 0xe8
 800a306:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 800a308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a30a:	3306      	adds	r3, #6
 800a30c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800a30e:	2206      	movs	r2, #6
 800a310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a312:	69f8      	ldr	r0, [r7, #28]
 800a314:	f018 fc3a 	bl	8022b8c <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 800a318:	f000 fbd4 	bl	800aac4 <xIsCallingFromIPTask>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b01      	cmp	r3, #1
 800a320:	d106      	bne.n	800a330 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800a322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a324:	68db      	ldr	r3, [r3, #12]
 800a326:	683a      	ldr	r2, [r7, #0]
 800a328:	6879      	ldr	r1, [r7, #4]
 800a32a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a32c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 800a32e:	e019      	b.n	800a364 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d011      	beq.n	800a35a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 800a336:	2302      	movs	r3, #2
 800a338:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800a33e:	f107 0308 	add.w	r3, r7, #8
 800a342:	f04f 31ff 	mov.w	r1, #4294967295
 800a346:	4618      	mov	r0, r3
 800a348:	f7ff fc7a 	bl	8009c40 <xSendEventStructToIPTask>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d108      	bne.n	800a364 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f00d fb56 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
}
 800a358:	e004      	b.n	800a364 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 800a35a:	f640 019f 	movw	r1, #2207	@ 0x89f
 800a35e:	4805      	ldr	r0, [pc, #20]	@ (800a374 <vReturnEthernetFrame+0x1cc>)
 800a360:	f7f7 fb1a 	bl	8001998 <vAssertCalled>
}
 800a364:	bf00      	nop
 800a366:	3738      	adds	r7, #56	@ 0x38
 800a368:	46bd      	mov	sp, r7
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	080252f8 	.word	0x080252f8
 800a370:	0802531c 	.word	0x0802531c
 800a374:	080251e4 	.word	0x080251e4

0800a378 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 800a378:	b480      	push	{r7}
 800a37a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800a37c:	4b03      	ldr	r3, [pc, #12]	@ (800a38c <xIPIsNetworkTaskReady+0x14>)
 800a37e:	681b      	ldr	r3, [r3, #0]
}
 800a380:	4618      	mov	r0, r3
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	200011b0 	.word	0x200011b0

0800a390 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 800a390:	b480      	push	{r7}
 800a392:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 800a394:	4b03      	ldr	r3, [pc, #12]	@ (800a3a4 <uxGetMinimumIPQueueSpace+0x14>)
 800a396:	681b      	ldr	r3, [r3, #0]
    }
 800a398:	4618      	mov	r0, r3
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	20000014 	.word	0x20000014

0800a3a8 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3b4:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	899b      	ldrh	r3, [r3, #12]
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d102      	bne.n	800a3ca <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a3c4:	2328      	movs	r3, #40	@ 0x28
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	e001      	b.n	800a3ce <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a3ca:	2314      	movs	r3, #20
 800a3cc:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <uxIPHeaderSizeSocket+0x22>
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	7a1b      	ldrb	r3, [r3, #8]
 800a3ee:	f003 0301 	and.w	r3, r3, #1
 800a3f2:	b2db      	uxtb	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d002      	beq.n	800a3fe <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 800a3f8:	2328      	movs	r3, #40	@ 0x28
 800a3fa:	60fb      	str	r3, [r7, #12]
 800a3fc:	e001      	b.n	800a402 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 800a3fe:	2314      	movs	r3, #20
 800a400:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 800a402:	68fb      	ldr	r3, [r7, #12]
}
 800a404:	4618      	mov	r0, r3
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 800a416:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a41a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800a41c:	4b28      	ldr	r3, [pc, #160]	@ (800a4c0 <xCalculateSleepTime+0xb0>)
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 0301 	and.w	r3, r3, #1
 800a424:	b2db      	uxtb	r3, r3
 800a426:	2b00      	cmp	r3, #0
 800a428:	d007      	beq.n	800a43a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a42a:	4b25      	ldr	r3, [pc, #148]	@ (800a4c0 <xCalculateSleepTime+0xb0>)
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	687a      	ldr	r2, [r7, #4]
 800a430:	429a      	cmp	r2, r3
 800a432:	d902      	bls.n	800a43a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 800a434:	4b22      	ldr	r3, [pc, #136]	@ (800a4c0 <xCalculateSleepTime+0xb0>)
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a43a:	4b22      	ldr	r3, [pc, #136]	@ (800a4c4 <xCalculateSleepTime+0xb4>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 800a440:	e015      	b.n	800a46e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	b2db      	uxtb	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d009      	beq.n	800a466 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d903      	bls.n	800a466 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800a464:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a46c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e6      	bne.n	800a442 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 800a474:	4b14      	ldr	r3, [pc, #80]	@ (800a4c8 <xCalculateSleepTime+0xb8>)
 800a476:	781b      	ldrb	r3, [r3, #0]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d007      	beq.n	800a492 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 800a482:	4b11      	ldr	r3, [pc, #68]	@ (800a4c8 <xCalculateSleepTime+0xb8>)
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d902      	bls.n	800a492 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800a48c:	4b0e      	ldr	r3, [pc, #56]	@ (800a4c8 <xCalculateSleepTime+0xb8>)
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 800a492:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <xCalculateSleepTime+0xbc>)
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	f003 0301 	and.w	r3, r3, #1
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d007      	beq.n	800a4b0 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 800a4a0:	4b0a      	ldr	r3, [pc, #40]	@ (800a4cc <xCalculateSleepTime+0xbc>)
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	687a      	ldr	r2, [r7, #4]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d902      	bls.n	800a4b0 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800a4aa:	4b08      	ldr	r3, [pc, #32]	@ (800a4cc <xCalculateSleepTime+0xbc>)
 800a4ac:	68db      	ldr	r3, [r3, #12]
 800a4ae:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 800a4b0:	687b      	ldr	r3, [r7, #4]
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	200011cc 	.word	0x200011cc
 800a4c4:	20001528 	.word	0x20001528
 800a4c8:	200011e0 	.word	0x200011e0
 800a4cc:	200011f4 	.word	0x200011f4

0800a4d0 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 800a4d6:	484f      	ldr	r0, [pc, #316]	@ (800a614 <vCheckNetworkTimers+0x144>)
 800a4d8:	f000 f932 	bl	800a740 <prvIPTimerCheck>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 800a4e2:	2003      	movs	r0, #3
 800a4e4:	f7ff fb96 	bl	8009c14 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 800a4e8:	484b      	ldr	r0, [pc, #300]	@ (800a618 <vCheckNetworkTimers+0x148>)
 800a4ea:	f000 f929 	bl	800a740 <prvIPTimerCheck>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00e      	beq.n	800a512 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 800a4f4:	4b49      	ldr	r3, [pc, #292]	@ (800a61c <vCheckNetworkTimers+0x14c>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d00a      	beq.n	800a512 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800a4fc:	2000      	movs	r0, #0
 800a4fe:	f000 f995 	bl	800a82c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800a502:	4b46      	ldr	r3, [pc, #280]	@ (800a61c <vCheckNetworkTimers+0x14c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4618      	mov	r0, r3
 800a508:	f00d fa7c 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800a50c:	4b43      	ldr	r3, [pc, #268]	@ (800a61c <vCheckNetworkTimers+0x14c>)
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800a512:	4b43      	ldr	r3, [pc, #268]	@ (800a620 <vCheckNetworkTimers+0x150>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 800a518:	e01f      	b.n	800a55a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	33f8      	adds	r3, #248	@ 0xf8
 800a51e:	4618      	mov	r0, r3
 800a520:	f000 f90e 	bl	800a740 <prvIPTimerCheck>
 800a524:	4603      	mov	r3, r0
 800a526:	2b00      	cmp	r3, #0
 800a528:	d013      	beq.n	800a552 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a530:	f003 0304 	and.w	r3, r3, #4
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b00      	cmp	r3, #0
 800a538:	d00b      	beq.n	800a552 <vCheckNetworkTimers+0x82>
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a540:	f003 0302 	and.w	r3, r3, #2
 800a544:	b2db      	uxtb	r3, r3
 800a546:	2b00      	cmp	r3, #0
 800a548:	d003      	beq.n	800a552 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800a54a:	6939      	ldr	r1, [r7, #16]
 800a54c:	2000      	movs	r0, #0
 800a54e:	f003 f8f7 	bl	800d740 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800a558:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d1dc      	bne.n	800a51a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 800a560:	4830      	ldr	r0, [pc, #192]	@ (800a624 <vCheckNetworkTimers+0x154>)
 800a562:	f000 f8ed 	bl	800a740 <prvIPTimerCheck>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d002      	beq.n	800a572 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800a56c:	2000      	movs	r0, #0
 800a56e:	f7fd fff9 	bl	8008564 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 800a572:	4b2d      	ldr	r3, [pc, #180]	@ (800a628 <vCheckNetworkTimers+0x158>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4618      	mov	r0, r3
 800a578:	f7f9 fda2 	bl	80040c0 <uxQueueMessagesWaiting>
 800a57c:	4603      	mov	r3, r0
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d102      	bne.n	800a588 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 800a582:	2301      	movs	r3, #1
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	e001      	b.n	800a58c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800a58c:	4827      	ldr	r0, [pc, #156]	@ (800a62c <vCheckNetworkTimers+0x15c>)
 800a58e:	f000 f8d7 	bl	800a740 <prvIPTimerCheck>
 800a592:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d001      	beq.n	800a59e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800a59a:	2301      	movs	r3, #1
 800a59c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d007      	beq.n	800a5b4 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f006 f85d 	bl	8010664 <xTCPTimerCheck>
 800a5aa:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800a5ac:	6839      	ldr	r1, [r7, #0]
 800a5ae:	481f      	ldr	r0, [pc, #124]	@ (800a62c <vCheckNetworkTimers+0x15c>)
 800a5b0:	f000 f844 	bl	800a63c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 800a5b4:	2000      	movs	r0, #0
 800a5b6:	f006 ff8d 	bl	80114d4 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 800a5ba:	2000      	movs	r0, #0
 800a5bc:	f006 ffa6 	bl	801150c <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 800a5c0:	4b1b      	ldr	r3, [pc, #108]	@ (800a630 <vCheckNetworkTimers+0x160>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d120      	bne.n	800a60a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 800a5c8:	481a      	ldr	r0, [pc, #104]	@ (800a634 <vCheckNetworkTimers+0x164>)
 800a5ca:	f000 f8b9 	bl	800a740 <prvIPTimerCheck>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d01a      	beq.n	800a60a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a5d8:	4b17      	ldr	r3, [pc, #92]	@ (800a638 <vCheckNetworkTimers+0x168>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	e00e      	b.n	800a5fe <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	7f1b      	ldrb	r3, [r3, #28]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	b2db      	uxtb	r3, r3
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d104      	bne.n	800a5f8 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 800a5f2:	6978      	ldr	r0, [r7, #20]
 800a5f4:	f7ff fa30 	bl	8009a58 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 800a5f8:	697b      	ldr	r3, [r7, #20]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5fc:	617b      	str	r3, [r7, #20]
 800a5fe:	697b      	ldr	r3, [r7, #20]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d1ed      	bne.n	800a5e0 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f000 f971 	bl	800a8ec <vSetAllNetworksUp>
        }
    }
}
 800a60a:	bf00      	nop
 800a60c:	3718      	adds	r7, #24
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	200011cc 	.word	0x200011cc
 800a618:	200011b8 	.word	0x200011b8
 800a61c:	2000119c 	.word	0x2000119c
 800a620:	20001528 	.word	0x20001528
 800a624:	200011f4 	.word	0x200011f4
 800a628:	200011a0 	.word	0x200011a0
 800a62c:	200011e0 	.word	0x200011e0
 800a630:	200011b4 	.word	0x200011b4
 800a634:	20001208 	.word	0x20001208
 800a638:	2000152c 	.word	0x2000152c

0800a63c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	3304      	adds	r3, #4
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fa febc 	bl	80053c8 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	683a      	ldr	r2, [r7, #0]
 800a654:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d105      	bne.n	800a668 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	7813      	ldrb	r3, [r2, #0]
 800a660:	f043 0302 	orr.w	r3, r3, #2
 800a664:	7013      	strb	r3, [r2, #0]
 800a666:	e004      	b.n	800a672 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	7813      	ldrb	r3, [r2, #0]
 800a66c:	f36f 0341 	bfc	r3, #1, #1
 800a670:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	7813      	ldrb	r3, [r2, #0]
 800a676:	f043 0301 	orr.w	r3, r3, #1
 800a67a:	7013      	strb	r3, [r2, #0]
}
 800a67c:	bf00      	nop
 800a67e:	3708      	adds	r7, #8
 800a680:	46bd      	mov	sp, r7
 800a682:	bd80      	pop	{r7, pc}

0800a684 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 800a684:	b580      	push	{r7, lr}
 800a686:	b082      	sub	sp, #8
 800a688:	af00      	add	r7, sp, #0
 800a68a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	4803      	ldr	r0, [pc, #12]	@ (800a69c <vIPTimerStartARPResolution+0x18>)
 800a690:	f7ff ffd4 	bl	800a63c <prvIPTimerStart>
}
 800a694:	bf00      	nop
 800a696:	3708      	adds	r7, #8
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}
 800a69c:	200011b8 	.word	0x200011b8

0800a6a0 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b082      	sub	sp, #8
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	683a      	ldr	r2, [r7, #0]
 800a6ae:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	6878      	ldr	r0, [r7, #4]
 800a6b4:	f7ff ffc2 	bl	800a63c <prvIPTimerStart>
}
 800a6b8:	bf00      	nop
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}

0800a6c0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a6c8:	6879      	ldr	r1, [r7, #4]
 800a6ca:	4803      	ldr	r0, [pc, #12]	@ (800a6d8 <vTCPTimerReload+0x18>)
 800a6cc:	f7ff ffe8 	bl	800a6a0 <prvIPTimerReload>
    }
 800a6d0:	bf00      	nop
 800a6d2:	3708      	adds	r7, #8
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}
 800a6d8:	200011e0 	.word	0x200011e0

0800a6dc <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4803      	ldr	r0, [pc, #12]	@ (800a6f4 <vARPTimerReload+0x18>)
 800a6e8:	f7ff ffda 	bl	800a6a0 <prvIPTimerReload>
}
 800a6ec:	bf00      	nop
 800a6ee:	3708      	adds	r7, #8
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	200011cc 	.word	0x200011cc

0800a6f8 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b082      	sub	sp, #8
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 800a702:	6839      	ldr	r1, [r7, #0]
 800a704:	4806      	ldr	r0, [pc, #24]	@ (800a720 <vDHCP_RATimerReload+0x28>)
 800a706:	f018 f825 	bl	8022754 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	33f8      	adds	r3, #248	@ 0xf8
 800a70e:	6839      	ldr	r1, [r7, #0]
 800a710:	4618      	mov	r0, r3
 800a712:	f7ff ffc5 	bl	800a6a0 <prvIPTimerReload>
    }
 800a716:	bf00      	nop
 800a718:	3708      	adds	r7, #8
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	08025350 	.word	0x08025350

0800a724 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4803      	ldr	r0, [pc, #12]	@ (800a73c <vNetworkTimerReload+0x18>)
 800a730:	f7ff ffb6 	bl	800a6a0 <prvIPTimerReload>
}
 800a734:	bf00      	nop
 800a736:	3708      	adds	r7, #8
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}
 800a73c:	20001208 	.word	0x20001208

0800a740 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b084      	sub	sp, #16
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f003 0301 	and.w	r3, r3, #1
 800a750:	b2db      	uxtb	r3, r3
 800a752:	2b00      	cmp	r3, #0
 800a754:	d102      	bne.n	800a75c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a756:	2300      	movs	r3, #0
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	e028      	b.n	800a7ae <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	f003 0302 	and.w	r3, r3, #2
 800a764:	b2db      	uxtb	r3, r3
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10f      	bne.n	800a78a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	1d1a      	adds	r2, r3, #4
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	330c      	adds	r3, #12
 800a772:	4619      	mov	r1, r3
 800a774:	4610      	mov	r0, r2
 800a776:	f7fa fe5f 	bl	8005438 <xTaskCheckForTimeOut>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d004      	beq.n	800a78a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a780:	687a      	ldr	r2, [r7, #4]
 800a782:	7813      	ldrb	r3, [r2, #0]
 800a784:	f043 0302 	orr.w	r3, r3, #2
 800a788:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	781b      	ldrb	r3, [r3, #0]
 800a78e:	f003 0302 	and.w	r3, r3, #2
 800a792:	b2db      	uxtb	r3, r3
 800a794:	2b00      	cmp	r3, #0
 800a796:	d008      	beq.n	800a7aa <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	4619      	mov	r1, r3
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff ff4c 	bl	800a63c <prvIPTimerStart>
            xReturn = pdTRUE;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]
 800a7a8:	e001      	b.n	800a7ae <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3710      	adds	r7, #16
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	bd80      	pop	{r7, pc}

0800a7b8 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a7c0:	4a0c      	ldr	r2, [pc, #48]	@ (800a7f4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a7c2:	7813      	ldrb	r3, [r2, #0]
 800a7c4:	f043 0301 	orr.w	r3, r3, #1
 800a7c8:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d005      	beq.n	800a7dc <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a7d0:	4a08      	ldr	r2, [pc, #32]	@ (800a7f4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a7d2:	7813      	ldrb	r3, [r2, #0]
 800a7d4:	f043 0302 	orr.w	r3, r3, #2
 800a7d8:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a7da:	e004      	b.n	800a7e6 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a7dc:	4a05      	ldr	r2, [pc, #20]	@ (800a7f4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a7de:	7813      	ldrb	r3, [r2, #0]
 800a7e0:	f36f 0341 	bfc	r3, #1, #1
 800a7e4:	7013      	strb	r3, [r2, #0]
    }
 800a7e6:	bf00      	nop
 800a7e8:	370c      	adds	r7, #12
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	200011e0 	.word	0x200011e0

0800a7f8 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d005      	beq.n	800a812 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a806:	4a08      	ldr	r2, [pc, #32]	@ (800a828 <vIPSetARPTimerEnableState+0x30>)
 800a808:	7813      	ldrb	r3, [r2, #0]
 800a80a:	f043 0301 	orr.w	r3, r3, #1
 800a80e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a810:	e004      	b.n	800a81c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a812:	4a05      	ldr	r2, [pc, #20]	@ (800a828 <vIPSetARPTimerEnableState+0x30>)
 800a814:	7813      	ldrb	r3, [r2, #0]
 800a816:	f36f 0300 	bfc	r3, #0, #1
 800a81a:	7013      	strb	r3, [r2, #0]
}
 800a81c:	bf00      	nop
 800a81e:	370c      	adds	r7, #12
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr
 800a828:	200011cc 	.word	0x200011cc

0800a82c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a83a:	4a08      	ldr	r2, [pc, #32]	@ (800a85c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a83c:	7813      	ldrb	r3, [r2, #0]
 800a83e:	f043 0301 	orr.w	r3, r3, #1
 800a842:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a844:	e004      	b.n	800a850 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a846:	4a05      	ldr	r2, [pc, #20]	@ (800a85c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a848:	7813      	ldrb	r3, [r2, #0]
 800a84a:	f36f 0300 	bfc	r3, #0, #1
 800a84e:	7013      	strb	r3, [r2, #0]
}
 800a850:	bf00      	nop
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	200011b8 	.word	0x200011b8

0800a860 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <vIPSetDHCP_RATimerEnableState+0x14>
 800a870:	4b0e      	ldr	r3, [pc, #56]	@ (800a8ac <vIPSetDHCP_RATimerEnableState+0x4c>)
 800a872:	e000      	b.n	800a876 <vIPSetDHCP_RATimerEnableState+0x16>
 800a874:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b0 <vIPSetDHCP_RATimerEnableState+0x50>)
 800a876:	4619      	mov	r1, r3
 800a878:	480e      	ldr	r0, [pc, #56]	@ (800a8b4 <vIPSetDHCP_RATimerEnableState+0x54>)
 800a87a:	f017 ff6b 	bl	8022754 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d007      	beq.n	800a894 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a88a:	f043 0301 	orr.w	r3, r3, #1
 800a88e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a892:	e006      	b.n	800a8a2 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800a894:	687a      	ldr	r2, [r7, #4]
 800a896:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a89a:	f36f 0300 	bfc	r3, #0, #1
 800a89e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 800a8a2:	bf00      	nop
 800a8a4:	3708      	adds	r7, #8
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0802536c 	.word	0x0802536c
 800a8b0:	08025370 	.word	0x08025370
 800a8b4:	08025374 	.word	0x08025374

0800a8b8 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d005      	beq.n	800a8d2 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a8c6:	4a08      	ldr	r2, [pc, #32]	@ (800a8e8 <vIPSetDNSTimerEnableState+0x30>)
 800a8c8:	7813      	ldrb	r3, [r2, #0]
 800a8ca:	f043 0301 	orr.w	r3, r3, #1
 800a8ce:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a8d0:	e004      	b.n	800a8dc <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a8d2:	4a05      	ldr	r2, [pc, #20]	@ (800a8e8 <vIPSetDNSTimerEnableState+0x30>)
 800a8d4:	7813      	ldrb	r3, [r2, #0]
 800a8d6:	f36f 0300 	bfc	r3, #0, #1
 800a8da:	7013      	strb	r3, [r2, #0]
    }
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr
 800a8e8:	200011f4 	.word	0x200011f4

0800a8ec <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a8f4:	4a04      	ldr	r2, [pc, #16]	@ (800a908 <vSetAllNetworksUp+0x1c>)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6013      	str	r3, [r2, #0]
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	200011b4 	.word	0x200011b4

0800a90c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b084      	sub	sp, #16
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a91a:	2100      	movs	r1, #0
 800a91c:	6838      	ldr	r0, [r7, #0]
 800a91e:	f00d f809 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 800a922:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 800a924:	68bb      	ldr	r3, [r7, #8]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d03e      	beq.n	800a9a8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a92a:	68bb      	ldr	r3, [r7, #8]
 800a92c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d104      	bne.n	800a93c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800a932:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a936:	481f      	ldr	r0, [pc, #124]	@ (800a9b4 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800a938:	f7f7 f82e 	bl	8001998 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a940:	68fa      	ldr	r2, [r7, #12]
 800a942:	429a      	cmp	r2, r3
 800a944:	d902      	bls.n	800a94c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a94a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	683a      	ldr	r2, [r7, #0]
 800a950:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	695a      	ldr	r2, [r3, #20]
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a976:	68bb      	ldr	r3, [r7, #8]
 800a978:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a982:	68fa      	ldr	r2, [r7, #12]
 800a984:	4619      	mov	r1, r3
 800a986:	f018 f901 	bl	8022b8c <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800a98a:	68b8      	ldr	r0, [r7, #8]
 800a98c:	f7ff fd0c 	bl	800a3a8 <uxIPHeaderSizePacket>
 800a990:	4603      	mov	r3, r0
 800a992:	2b28      	cmp	r3, #40	@ 0x28
 800a994:	d108      	bne.n	800a9a8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	f103 0014 	add.w	r0, r3, #20
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	3314      	adds	r3, #20
 800a9a0:	2210      	movs	r2, #16
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	f018 f8f2 	bl	8022b8c <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a9a8:	68bb      	ldr	r3, [r7, #8]
}
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	3710      	adds	r7, #16
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	08025398 	.word	0x08025398

0800a9b8 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	60fb      	str	r3, [r7, #12]
 800a9cc:	e013      	b.n	800a9f6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f816 	bl	800aa00 <void_ptr_to_uintptr>
 800a9d4:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	3b0a      	subs	r3, #10
 800a9de:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	f003 0303 	and.w	r3, r3, #3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d103      	bne.n	800a9f2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	e001      	b.n	800a9f6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800aa22:	2100      	movs	r1, #0
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f7ff ffc7 	bl	800a9b8 <prvPacketBuffer_to_NetworkBuffer>
 800aa2a:	4603      	mov	r3, r0
    }
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b088      	sub	sp, #32
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d102      	bne.n	800aa48 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800aa42:	2300      	movs	r3, #0
 800aa44:	61fb      	str	r3, [r7, #28]
 800aa46:	e033      	b.n	800aab0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff ffd9 	bl	800aa00 <void_ptr_to_uintptr>
 800aa4e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	3b30      	subs	r3, #48	@ 0x30
 800aa54:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800aa56:	697b      	ldr	r3, [r7, #20]
 800aa58:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	f023 030f 	bic.w	r3, r3, #15
 800aa62:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800aa64:	7bfb      	ldrb	r3, [r7, #15]
 800aa66:	2b40      	cmp	r3, #64	@ 0x40
 800aa68:	d002      	beq.n	800aa70 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
 800aa6c:	2b60      	cmp	r3, #96	@ 0x60
 800aa6e:	d101      	bne.n	800aa74 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800aa70:	2301      	movs	r3, #1
 800aa72:	e000      	b.n	800aa76 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800aa74:	2300      	movs	r3, #0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d104      	bne.n	800aa84 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800aa7a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800aa7e:	480f      	ldr	r0, [pc, #60]	@ (800aabc <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800aa80:	f7f6 ff8a 	bl	8001998 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
 800aa86:	2b40      	cmp	r3, #64	@ 0x40
 800aa88:	d004      	beq.n	800aa94 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800aa8a:	2b60      	cmp	r3, #96	@ 0x60
 800aa8c:	d105      	bne.n	800aa9a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800aa8e:	233e      	movs	r3, #62	@ 0x3e
 800aa90:	61bb      	str	r3, [r7, #24]
                    break;
 800aa92:	e008      	b.n	800aaa6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800aa94:	232a      	movs	r3, #42	@ 0x2a
 800aa96:	61bb      	str	r3, [r7, #24]
                    break;
 800aa98:	e005      	b.n	800aaa6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800aa9a:	4809      	ldr	r0, [pc, #36]	@ (800aac0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800aa9c:	f017 fe5a 	bl	8022754 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800aaa0:	232a      	movs	r3, #42	@ 0x2a
 800aaa2:	61bb      	str	r3, [r7, #24]
                break;
 800aaa4:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800aaa6:	69b9      	ldr	r1, [r7, #24]
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f7ff ff85 	bl	800a9b8 <prvPacketBuffer_to_NetworkBuffer>
 800aaae:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800aab0:	69fb      	ldr	r3, [r7, #28]
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
 800aaba:	bf00      	nop
 800aabc:	08025398 	.word	0x08025398
 800aac0:	08025470 	.word	0x08025470

0800aac4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b084      	sub	sp, #16
 800aac8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800aaca:	f7fa fdcf 	bl	800566c <xTaskGetCurrentTaskHandle>
 800aace:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800aad0:	f7fe ff6e 	bl	80099b0 <FreeRTOS_GetIPTaskHandle>
 800aad4:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d102      	bne.n	800aae4 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800aade:	2301      	movs	r3, #1
 800aae0:	60fb      	str	r3, [r7, #12]
 800aae2:	e001      	b.n	800aae8 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800aae8:	68fb      	ldr	r3, [r7, #12]
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	3710      	adds	r7, #16
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	bd80      	pop	{r7, pc}
	...

0800aaf4 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b084      	sub	sp, #16
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d104      	bne.n	800ab0c <prvProcessNetworkDownEvent+0x18>
 800ab02:	f240 3137 	movw	r1, #823	@ 0x337
 800ab06:	4857      	ldr	r0, [pc, #348]	@ (800ac64 <prvProcessNetworkDownEvent+0x170>)
 800ab08:	f7f6 ff46 	bl	8001998 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d104      	bne.n	800ab1e <prvProcessNetworkDownEvent+0x2a>
 800ab14:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800ab18:	4852      	ldr	r0, [pc, #328]	@ (800ac64 <prvProcessNetworkDownEvent+0x170>)
 800ab1a:	f7f6 ff3d 	bl	8001998 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800ab1e:	2000      	movs	r0, #0
 800ab20:	f7ff fe6a 	bl	800a7f8 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f002 ffd7 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	e041      	b.n	800abb2 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800ab34:	f36f 1304 	bfc	r3, #4, #1
 800ab38:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ab42:	f003 0304 	and.w	r3, r3, #4
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d003      	beq.n	800ab54 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800ab4c:	2100      	movs	r1, #0
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f001 f9c8 	bl	800bee4 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ab5a:	f003 0308 	and.w	r3, r3, #8
 800ab5e:	b2db      	uxtb	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d003      	beq.n	800ab6c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800ab64:	2001      	movs	r0, #1
 800ab66:	f7f6 ff4b 	bl	8001a00 <vApplicationIPNetworkEventHook>
 800ab6a:	e006      	b.n	800ab7a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800ab72:	f043 0308 	orr.w	r3, r3, #8
 800ab76:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	f7fd f8c0 	bl	8007d00 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ab86:	f003 0304 	and.w	r3, r3, #4
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d00b      	beq.n	800aba8 <prvProcessNetworkDownEvent+0xb4>
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ab96:	f003 0302 	and.w	r3, r3, #2
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d003      	beq.n	800aba8 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800aba0:	2100      	movs	r1, #0
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f7ff fe5c 	bl	800a860 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800aba8:	68f9      	ldr	r1, [r7, #12]
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f002 ffb6 	bl	800db1c <FreeRTOS_NextEndPoint>
 800abb0:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1ba      	bne.n	800ab2e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	4798      	blx	r3
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d147      	bne.n	800ac56 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	7f13      	ldrb	r3, [r2, #28]
 800abca:	f043 0301 	orr.w	r3, r3, #1
 800abce:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f002 ff81 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	e039      	b.n	800ac4e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	b2db      	uxtb	r3, r3
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d00c      	beq.n	800ac04 <prvProcessNetworkDownEvent+0x110>
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abf0:	f003 0302 	and.w	r3, r3, #2
 800abf4:	b2db      	uxtb	r3, r3
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d004      	beq.n	800ac04 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800abfa:	68f9      	ldr	r1, [r7, #12]
 800abfc:	2001      	movs	r0, #1
 800abfe:	f002 fd9f 	bl	800d740 <vRAProcess>
 800ac02:	e01f      	b.n	800ac44 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ac0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <prvProcessNetworkDownEvent+0x126>
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d008      	beq.n	800ac2a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ac18:	e011      	b.n	800ac3e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800ac1a:	68f8      	ldr	r0, [r7, #12]
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	331c      	adds	r3, #28
 800ac20:	221c      	movs	r2, #28
 800ac22:	4619      	mov	r1, r3
 800ac24:	f017 ffb2 	bl	8022b8c <memcpy>
                            break;
 800ac28:	e009      	b.n	800ac3e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3390      	adds	r3, #144	@ 0x90
 800ac34:	2258      	movs	r2, #88	@ 0x58
 800ac36:	4619      	mov	r1, r3
 800ac38:	f017 ffa8 	bl	8022b8c <memcpy>
                            break;
 800ac3c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800ac3e:	68f8      	ldr	r0, [r7, #12]
 800ac40:	f7fe fec2 	bl	80099c8 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ac44:	68f9      	ldr	r1, [r7, #12]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f002 ff68 	bl	800db1c <FreeRTOS_NextEndPoint>
 800ac4c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1c2      	bne.n	800abda <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800ac54:	e002      	b.n	800ac5c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800ac56:	2000      	movs	r0, #0
 800ac58:	f7ff fe48 	bl	800a8ec <vSetAllNetworksUp>
}
 800ac5c:	bf00      	nop
 800ac5e:	3710      	adds	r7, #16
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	08025398 	.word	0x08025398

0800ac68 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800ac6e:	f7ff fb83 	bl	800a378 <xIPIsNetworkTaskReady>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d004      	beq.n	800ac82 <vPreCheckConfigs+0x1a>
 800ac78:	f240 31db 	movw	r1, #987	@ 0x3db
 800ac7c:	4831      	ldr	r0, [pc, #196]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800ac7e:	f7f6 fe8b 	bl	8001998 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800ac82:	4b31      	ldr	r3, [pc, #196]	@ (800ad48 <vPreCheckConfigs+0xe0>)
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d004      	beq.n	800ac94 <vPreCheckConfigs+0x2c>
 800ac8a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800ac8e:	482d      	ldr	r0, [pc, #180]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800ac90:	f7f6 fe82 	bl	8001998 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800ac94:	f7fe fe8c 	bl	80099b0 <FreeRTOS_GetIPTaskHandle>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d004      	beq.n	800aca8 <vPreCheckConfigs+0x40>
 800ac9e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800aca2:	4828      	ldr	r0, [pc, #160]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800aca4:	f7f6 fe78 	bl	8001998 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800aca8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800acac:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	f240 52db 	movw	r2, #1499	@ 0x5db
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d804      	bhi.n	800acc2 <vPreCheckConfigs+0x5a>
 800acb8:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800acbc:	4821      	ldr	r0, [pc, #132]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800acbe:	f7f6 fe6b 	bl	8001998 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800acc2:	230e      	movs	r3, #14
 800acc4:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b0e      	cmp	r3, #14
 800acca:	d004      	beq.n	800acd6 <vPreCheckConfigs+0x6e>
 800accc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800acd0:	481c      	ldr	r0, [pc, #112]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800acd2:	f7f6 fe61 	bl	8001998 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800acd6:	231c      	movs	r3, #28
 800acd8:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2b1c      	cmp	r3, #28
 800acde:	d004      	beq.n	800acea <vPreCheckConfigs+0x82>
 800ace0:	f240 4102 	movw	r1, #1026	@ 0x402
 800ace4:	4817      	ldr	r0, [pc, #92]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800ace6:	f7f6 fe57 	bl	8001998 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800acea:	2314      	movs	r3, #20
 800acec:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b14      	cmp	r3, #20
 800acf2:	d004      	beq.n	800acfe <vPreCheckConfigs+0x96>
 800acf4:	f240 4105 	movw	r1, #1029	@ 0x405
 800acf8:	4812      	ldr	r0, [pc, #72]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800acfa:	f7f6 fe4d 	bl	8001998 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800acfe:	2308      	movs	r3, #8
 800ad00:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2b08      	cmp	r3, #8
 800ad06:	d004      	beq.n	800ad12 <vPreCheckConfigs+0xaa>
 800ad08:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800ad0c:	480d      	ldr	r0, [pc, #52]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800ad0e:	f7f6 fe43 	bl	8001998 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800ad12:	2308      	movs	r3, #8
 800ad14:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b08      	cmp	r3, #8
 800ad1a:	d004      	beq.n	800ad26 <vPreCheckConfigs+0xbe>
 800ad1c:	f240 410b 	movw	r1, #1035	@ 0x40b
 800ad20:	4808      	ldr	r0, [pc, #32]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800ad22:	f7f6 fe39 	bl	8001998 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800ad26:	2324      	movs	r3, #36	@ 0x24
 800ad28:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b24      	cmp	r3, #36	@ 0x24
 800ad2e:	d004      	beq.n	800ad3a <vPreCheckConfigs+0xd2>
 800ad30:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800ad34:	4803      	ldr	r0, [pc, #12]	@ (800ad44 <vPreCheckConfigs+0xdc>)
 800ad36:	f7f6 fe2f 	bl	8001998 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800ad3a:	bf00      	nop
 800ad3c:	3708      	adds	r7, #8
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	bd80      	pop	{r7, pc}
 800ad42:	bf00      	nop
 800ad44:	08025398 	.word	0x08025398
 800ad48:	200011a0 	.word	0x200011a0

0800ad4c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800ad52:	f00c fe9d 	bl	8017a90 <uxGetMinimumFreeNetworkBuffers>
 800ad56:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800ad58:	4b24      	ldr	r3, [pc, #144]	@ (800adec <vPrintResourceStats+0xa0>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	429a      	cmp	r2, r3
 800ad60:	d20a      	bcs.n	800ad78 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800ad62:	4a22      	ldr	r2, [pc, #136]	@ (800adec <vPrintResourceStats+0xa0>)
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800ad68:	f00c fe9e 	bl	8017aa8 <uxGetNumberOfFreeNetworkBuffers>
 800ad6c:	4603      	mov	r3, r0
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	4619      	mov	r1, r3
 800ad72:	481f      	ldr	r0, [pc, #124]	@ (800adf0 <vPrintResourceStats+0xa4>)
 800ad74:	f017 fcee 	bl	8022754 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800ad78:	f7fb ff1e 	bl	8006bb8 <xPortGetMinimumEverFreeHeapSize>
 800ad7c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800ad7e:	4b1d      	ldr	r3, [pc, #116]	@ (800adf4 <vPrintResourceStats+0xa8>)
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d103      	bne.n	800ad8e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800ad86:	4a1b      	ldr	r2, [pc, #108]	@ (800adf4 <vPrintResourceStats+0xa8>)
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	6013      	str	r3, [r2, #0]
 800ad8c:	e019      	b.n	800adc2 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad94:	d215      	bcs.n	800adc2 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800ad96:	4b17      	ldr	r3, [pc, #92]	@ (800adf4 <vPrintResourceStats+0xa8>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	225a      	movs	r2, #90	@ 0x5a
 800ad9c:	fb03 f202 	mul.w	r2, r3, r2
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2164      	movs	r1, #100	@ 0x64
 800ada4:	fb01 f303 	mul.w	r3, r1, r3
 800ada8:	429a      	cmp	r2, r3
 800adaa:	d90a      	bls.n	800adc2 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800adac:	4a11      	ldr	r2, [pc, #68]	@ (800adf4 <vPrintResourceStats+0xa8>)
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800adb2:	f7fb fef5 	bl	8006ba0 <xPortGetFreeHeapSize>
 800adb6:	4603      	mov	r3, r0
 800adb8:	68ba      	ldr	r2, [r7, #8]
 800adba:	4619      	mov	r1, r3
 800adbc:	480e      	ldr	r0, [pc, #56]	@ (800adf8 <vPrintResourceStats+0xac>)
 800adbe:	f017 fcc9 	bl	8022754 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800adc2:	2300      	movs	r3, #0
 800adc4:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800adc6:	f7ff fae3 	bl	800a390 <uxGetMinimumIPQueueSpace>
 800adca:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800adcc:	4b0b      	ldr	r3, [pc, #44]	@ (800adfc <vPrintResourceStats+0xb0>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	429a      	cmp	r2, r3
 800add4:	d006      	beq.n	800ade4 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800add6:	4a09      	ldr	r2, [pc, #36]	@ (800adfc <vPrintResourceStats+0xb0>)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800addc:	6879      	ldr	r1, [r7, #4]
 800adde:	4808      	ldr	r0, [pc, #32]	@ (800ae00 <vPrintResourceStats+0xb4>)
 800ade0:	f017 fcb8 	bl	8022754 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800ade4:	bf00      	nop
 800ade6:	3710      	adds	r7, #16
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}
 800adec:	20000018 	.word	0x20000018
 800adf0:	08025508 	.word	0x08025508
 800adf4:	2000121c 	.word	0x2000121c
 800adf8:	0802552c 	.word	0x0802552c
 800adfc:	20001220 	.word	0x20001220
 800ae00:	08025548 	.word	0x08025548

0800ae04 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800ae0e:	687a      	ldr	r2, [r7, #4]
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	bf38      	it	cc
 800ae16:	4613      	movcc	r3, r2
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	370c      	adds	r7, #12
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
 800ae2c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	4293      	cmp	r3, r2
 800ae34:	bfa8      	it	ge
 800ae36:	4613      	movge	r3, r2
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	4293      	cmp	r3, r2
 800ae54:	bf28      	it	cs
 800ae56:	4613      	movcs	r3, r2
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800ae6e:	687a      	ldr	r2, [r7, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	4293      	cmp	r3, r2
 800ae74:	bf28      	it	cs
 800ae76:	4613      	movcs	r3, r2
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	370c      	adds	r7, #12
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae82:	4770      	bx	lr

0800ae84 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b084      	sub	sp, #16
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d104      	bne.n	800aea2 <FreeRTOS_round_up+0x1e>
 800ae98:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800ae9c:	480a      	ldr	r0, [pc, #40]	@ (800aec8 <FreeRTOS_round_up+0x44>)
 800ae9e:	f7f6 fd7b 	bl	8001998 <vAssertCalled>

    if( d != 0U )
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d00a      	beq.n	800aebe <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	683b      	ldr	r3, [r7, #0]
 800aeac:	4413      	add	r3, r2
 800aeae:	1e5a      	subs	r2, r3, #1
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	fbb2 f2f3 	udiv	r2, r2, r3
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	fb02 f303 	mul.w	r3, r2, r3
 800aebc:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800aebe:	68fb      	ldr	r3, [r7, #12]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3710      	adds	r7, #16
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	08025398 	.word	0x08025398

0800aecc <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800aecc:	b480      	push	{r7}
 800aece:	b083      	sub	sp, #12
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	3301      	adds	r3, #1
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800aee2:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	3302      	adds	r3, #2
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800aeec:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	3203      	adds	r2, #3
 800aef2:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800aef4:	4313      	orrs	r3, r2
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr

0800af02 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800af02:	b480      	push	{r7}
 800af04:	b083      	sub	sp, #12
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	3201      	adds	r2, #1
 800af16:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800af18:	4313      	orrs	r3, r2
 800af1a:	b29b      	uxth	r3, r3
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08a      	sub	sp, #40	@ 0x28
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800af32:	2300      	movs	r3, #0
 800af34:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800af3a:	2300      	movs	r3, #0
 800af3c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b21      	cmp	r3, #33	@ 0x21
 800af42:	d802      	bhi.n	800af4a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800af44:	2301      	movs	r3, #1
 800af46:	61fb      	str	r3, [r7, #28]
                break;
 800af48:	e06f      	b.n	800b02a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800af4a:	69bb      	ldr	r3, [r7, #24]
 800af4c:	7b9b      	ldrb	r3, [r3, #14]
 800af4e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800af50:	8afb      	ldrh	r3, [r7, #22]
 800af52:	2b44      	cmp	r3, #68	@ 0x44
 800af54:	d902      	bls.n	800af5c <xCheckIPv4SizeFields+0x34>
 800af56:	8afb      	ldrh	r3, [r7, #22]
 800af58:	2b4f      	cmp	r3, #79	@ 0x4f
 800af5a:	d902      	bls.n	800af62 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800af5c:	2302      	movs	r3, #2
 800af5e:	61fb      	str	r3, [r7, #28]
                break;
 800af60:	e063      	b.n	800b02a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800af62:	8afb      	ldrh	r3, [r7, #22]
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	b29b      	uxth	r3, r3
 800af68:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800af6c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800af6e:	8afb      	ldrh	r3, [r7, #22]
 800af70:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	330e      	adds	r3, #14
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d202      	bcs.n	800af82 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800af7c:	2303      	movs	r3, #3
 800af7e:	61fb      	str	r3, [r7, #28]
                break;
 800af80:	e053      	b.n	800b02a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	7c1a      	ldrb	r2, [r3, #16]
 800af86:	7c5b      	ldrb	r3, [r3, #17]
 800af88:	021b      	lsls	r3, r3, #8
 800af8a:	4313      	orrs	r3, r2
 800af8c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800af8e:	89fb      	ldrh	r3, [r7, #14]
 800af90:	021b      	lsls	r3, r3, #8
 800af92:	b21a      	sxth	r2, r3
 800af94:	89fb      	ldrh	r3, [r7, #14]
 800af96:	0a1b      	lsrs	r3, r3, #8
 800af98:	b29b      	uxth	r3, r3
 800af9a:	b21b      	sxth	r3, r3
 800af9c:	4313      	orrs	r3, r2
 800af9e:	b21b      	sxth	r3, r3
 800afa0:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800afa2:	89fb      	ldrh	r3, [r7, #14]
 800afa4:	330e      	adds	r3, #14
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d202      	bcs.n	800afb2 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800afac:	2304      	movs	r3, #4
 800afae:	61fb      	str	r3, [r7, #28]
                break;
 800afb0:	e03b      	b.n	800b02a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	7ddb      	ldrb	r3, [r3, #23]
 800afb6:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800afb8:	7b7b      	ldrb	r3, [r7, #13]
 800afba:	2b11      	cmp	r3, #17
 800afbc:	d103      	bne.n	800afc6 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	3316      	adds	r3, #22
 800afc2:	627b      	str	r3, [r7, #36]	@ 0x24
 800afc4:	e013      	b.n	800afee <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800afc6:	7b7b      	ldrb	r3, [r7, #13]
 800afc8:	2b06      	cmp	r3, #6
 800afca:	d103      	bne.n	800afd4 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	3322      	adds	r3, #34	@ 0x22
 800afd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800afd2:	e00c      	b.n	800afee <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800afd4:	7b7b      	ldrb	r3, [r7, #13]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d002      	beq.n	800afe0 <xCheckIPv4SizeFields+0xb8>
 800afda:	7b7b      	ldrb	r3, [r7, #13]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d103      	bne.n	800afe8 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3316      	adds	r3, #22
 800afe4:	627b      	str	r3, [r7, #36]	@ 0x24
 800afe6:	e002      	b.n	800afee <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800afe8:	2305      	movs	r3, #5
 800afea:	61fb      	str	r3, [r7, #28]
                break;
 800afec:	e01d      	b.n	800b02a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d202      	bcs.n	800affc <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800aff6:	2306      	movs	r3, #6
 800aff8:	61fb      	str	r3, [r7, #28]
                break;
 800affa:	e016      	b.n	800b02a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800affc:	89fb      	ldrh	r3, [r7, #14]
 800affe:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800b000:	693b      	ldr	r3, [r7, #16]
 800b002:	b29b      	uxth	r3, r3
 800b004:	461a      	mov	r2, r3
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	1a9b      	subs	r3, r3, r2
 800b00a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	2b07      	cmp	r3, #7
 800b010:	d906      	bls.n	800b020 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800b012:	693a      	ldr	r2, [r7, #16]
 800b014:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800b018:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800b01a:	68ba      	ldr	r2, [r7, #8]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d902      	bls.n	800b026 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b020:	2307      	movs	r3, #7
 800b022:	61fb      	str	r3, [r7, #28]
                break;
 800b024:	e001      	b.n	800b02a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800b026:	2301      	movs	r3, #1
 800b028:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b02a:	6a3b      	ldr	r3, [r7, #32]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d003      	beq.n	800b038 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800b030:	69f9      	ldr	r1, [r7, #28]
 800b032:	4804      	ldr	r0, [pc, #16]	@ (800b044 <xCheckIPv4SizeFields+0x11c>)
 800b034:	f017 fb8e 	bl	8022754 <lUDPLoggingPrintf>
        }

        return xResult;
 800b038:	6a3b      	ldr	r3, [r7, #32]
    }
 800b03a:	4618      	mov	r0, r3
 800b03c:	3728      	adds	r7, #40	@ 0x28
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	08025614 	.word	0x08025614

0800b048 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	061a      	lsls	r2, r3, #24
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	021b      	lsls	r3, r3, #8
 800b058:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b05c:	431a      	orrs	r2, r3
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	0a1b      	lsrs	r3, r3, #8
 800b062:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b066:	431a      	orrs	r2, r3
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	0e1b      	lsrs	r3, r3, #24
 800b06c:	4313      	orrs	r3, r2
 800b06e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800b076:	d306      	bcc.n	800b086 <xIsIPv4Multicast+0x3e>
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800b07e:	d202      	bcs.n	800b086 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800b080:	2301      	movs	r3, #1
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	e001      	b.n	800b08a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800b086:	2300      	movs	r3, #0
 800b088:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b08a:	68fb      	ldr	r3, [r7, #12]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b086      	sub	sp, #24
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b0a4:	2301      	movs	r3, #1
 800b0a6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b0a8:	7dfb      	ldrb	r3, [r7, #23]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d10c      	bne.n	800b0c8 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b6:	4619      	mov	r1, r3
 800b0b8:	4610      	mov	r0, r2
 800b0ba:	f7ff ff35 	bl	800af28 <xCheckIPv4SizeFields>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	2b01      	cmp	r3, #1
 800b0c2:	d001      	beq.n	800b0c8 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800b0c8:	7dfb      	ldrb	r3, [r7, #23]
 800b0ca:	2b01      	cmp	r3, #1
 800b0cc:	d134      	bne.n	800b138 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	7ddb      	ldrb	r3, [r3, #23]
 800b0d2:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d8:	3322      	adds	r3, #34	@ 0x22
 800b0da:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800b0dc:	7dbb      	ldrb	r3, [r7, #22]
 800b0de:	2b11      	cmp	r3, #17
 800b0e0:	d12a      	bne.n	800b138 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	88db      	ldrh	r3, [r3, #6]
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d125      	bne.n	800b138 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800b0ec:	4b15      	ldr	r3, [pc, #84]	@ (800b144 <prvAllowIPPacketIPv4+0xac>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b04      	cmp	r3, #4
 800b0f2:	dc1f      	bgt.n	800b134 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b0fa:	061a      	lsls	r2, r3, #24
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b102:	021b      	lsls	r3, r3, #8
 800b104:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b108:	431a      	orrs	r2, r3
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b110:	0a1b      	lsrs	r3, r3, #8
 800b112:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b116:	431a      	orrs	r2, r3
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800b11e:	0e1b      	lsrs	r3, r3, #24
 800b120:	4313      	orrs	r3, r2
 800b122:	4619      	mov	r1, r3
 800b124:	4808      	ldr	r0, [pc, #32]	@ (800b148 <prvAllowIPPacketIPv4+0xb0>)
 800b126:	f017 fb15 	bl	8022754 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800b12a:	4b06      	ldr	r3, [pc, #24]	@ (800b144 <prvAllowIPPacketIPv4+0xac>)
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3301      	adds	r3, #1
 800b130:	4a04      	ldr	r2, [pc, #16]	@ (800b144 <prvAllowIPPacketIPv4+0xac>)
 800b132:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800b134:	2300      	movs	r3, #0
 800b136:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800b138:	7dfb      	ldrb	r3, [r7, #23]
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3718      	adds	r7, #24
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop
 800b144:	20001224 	.word	0x20001224
 800b148:	08025638 	.word	0x08025638

0800b14c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b08a      	sub	sp, #40	@ 0x28
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800b154:	2301      	movs	r3, #1
 800b156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15e:	330e      	adds	r3, #14
 800b160:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800b162:	6a3b      	ldr	r3, [r7, #32]
 800b164:	781b      	ldrb	r3, [r3, #0]
 800b166:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800b170:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	3b14      	subs	r3, #20
 800b176:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	330e      	adds	r3, #14
 800b180:	4413      	add	r3, r2
 800b182:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b188:	3322      	adds	r3, #34	@ 0x22
 800b18a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	1ad3      	subs	r3, r2, r3
 800b194:	3b22      	subs	r3, #34	@ 0x22
 800b196:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	6939      	ldr	r1, [r7, #16]
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f018 fc9a 	bl	8023ad6 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	1ad2      	subs	r2, r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	885b      	ldrh	r3, [r3, #2]
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	021b      	lsls	r3, r3, #8
 800b1b6:	b21a      	sxth	r2, r3
 800b1b8:	6a3b      	ldr	r3, [r7, #32]
 800b1ba:	885b      	ldrh	r3, [r3, #2]
 800b1bc:	b29b      	uxth	r3, r3
 800b1be:	0a1b      	lsrs	r3, r3, #8
 800b1c0:	b29b      	uxth	r3, r3
 800b1c2:	b21b      	sxth	r3, r3
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	b21b      	sxth	r3, r3
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	b29b      	uxth	r3, r3
 800b1ce:	1ad3      	subs	r3, r2, r3
 800b1d0:	b29b      	uxth	r3, r3
 800b1d2:	021b      	lsls	r3, r3, #8
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	6a3b      	ldr	r3, [r7, #32]
 800b1d8:	885b      	ldrh	r3, [r3, #2]
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	021b      	lsls	r3, r3, #8
 800b1de:	b219      	sxth	r1, r3
 800b1e0:	6a3b      	ldr	r3, [r7, #32]
 800b1e2:	885b      	ldrh	r3, [r3, #2]
 800b1e4:	b29b      	uxth	r3, r3
 800b1e6:	0a1b      	lsrs	r3, r3, #8
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	b21b      	sxth	r3, r3
 800b1ec:	430b      	orrs	r3, r1
 800b1ee:	b21b      	sxth	r3, r3
 800b1f0:	b29b      	uxth	r3, r3
 800b1f2:	4619      	mov	r1, r3
 800b1f4:	697b      	ldr	r3, [r7, #20]
 800b1f6:	1acb      	subs	r3, r1, r3
 800b1f8:	0a1b      	lsrs	r3, r3, #8
 800b1fa:	b29b      	uxth	r3, r3
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	b29a      	uxth	r2, r3
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800b204:	6a3b      	ldr	r3, [r7, #32]
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	f023 030f 	bic.w	r3, r3, #15
 800b20c:	b2db      	uxtb	r3, r3
 800b20e:	f043 0305 	orr.w	r3, r3, #5
 800b212:	b2da      	uxtb	r2, r3
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800b218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3728      	adds	r7, #40	@ 0x28
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b088      	sub	sp, #32
 800b228:	af00      	add	r7, sp, #0
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b0f      	cmp	r3, #15
 800b234:	d802      	bhi.n	800b23c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800b236:	2300      	movs	r3, #0
 800b238:	61fb      	str	r3, [r7, #28]
 800b23a:	e00e      	b.n	800b25a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800b23c:	f107 0314 	add.w	r3, r7, #20
 800b240:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	4618      	mov	r0, r3
 800b252:	f004 fac9 	bl	800f7e8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800b25a:	69fb      	ldr	r3, [r7, #28]
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3720      	adds	r7, #32
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b264:	b480      	push	{r7}
 800b266:	b085      	sub	sp, #20
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d010      	beq.n	800b296 <xSend_UDP_Update_IPv4+0x32>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00d      	beq.n	800b296 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b27e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	689a      	ldr	r2, [r3, #8]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	2200      	movs	r2, #0
 800b28c:	f042 0208 	orr.w	r2, r2, #8
 800b290:	731a      	strb	r2, [r3, #12]
 800b292:	2200      	movs	r2, #0
 800b294:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	061a      	lsls	r2, r3, #24
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	021b      	lsls	r3, r3, #8
 800b2b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b2ba:	431a      	orrs	r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	0a1b      	lsrs	r3, r3, #8
 800b2c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	0e1b      	lsrs	r3, r3, #24
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	2201      	movs	r2, #1
 800b2d2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	225e      	movs	r2, #94	@ 0x5e
 800b2de:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	0c1b      	lsrs	r3, r3, #16
 800b2e4:	b2db      	uxtb	r3, r3
 800b2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2ea:	b2da      	uxtb	r2, r3
 800b2ec:	683b      	ldr	r3, [r7, #0]
 800b2ee:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	0a1b      	lsrs	r3, r3, #8
 800b2f4:	b2da      	uxtb	r2, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	b2da      	uxtb	r2, r3
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	715a      	strb	r2, [r3, #5]
}
 800b302:	bf00      	nop
 800b304:	3714      	adds	r7, #20
 800b306:	46bd      	mov	sp, r7
 800b308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30c:	4770      	bx	lr
	...

0800b310 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800b310:	b580      	push	{r7, lr}
 800b312:	b08c      	sub	sp, #48	@ 0x30
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
 800b318:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800b31a:	2300      	movs	r3, #0
 800b31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800b31e:	2300      	movs	r3, #0
 800b320:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800b322:	2300      	movs	r3, #0
 800b324:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800b32e:	2300      	movs	r3, #0
 800b330:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b27      	cmp	r3, #39	@ 0x27
 800b336:	d802      	bhi.n	800b33e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800b338:	2301      	movs	r3, #1
 800b33a:	61fb      	str	r3, [r7, #28]
                break;
 800b33c:	e098      	b.n	800b470 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	7b9b      	ldrb	r3, [r3, #14]
 800b342:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800b344:	89fb      	ldrh	r3, [r7, #14]
 800b346:	111b      	asrs	r3, r3, #4
 800b348:	f003 030f 	and.w	r3, r3, #15
 800b34c:	2b06      	cmp	r3, #6
 800b34e:	d002      	beq.n	800b356 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800b350:	2302      	movs	r3, #2
 800b352:	61fb      	str	r3, [r7, #28]
                break;
 800b354:	e08c      	b.n	800b470 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	2b35      	cmp	r3, #53	@ 0x35
 800b35a:	d802      	bhi.n	800b362 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800b35c:	2303      	movs	r3, #3
 800b35e:	61fb      	str	r3, [r7, #28]
                break;
 800b360:	e086      	b.n	800b470 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	8a5b      	ldrh	r3, [r3, #18]
 800b366:	b29b      	uxth	r3, r3
 800b368:	021b      	lsls	r3, r3, #8
 800b36a:	b21a      	sxth	r2, r3
 800b36c:	693b      	ldr	r3, [r7, #16]
 800b36e:	8a5b      	ldrh	r3, [r3, #18]
 800b370:	b29b      	uxth	r3, r3
 800b372:	0a1b      	lsrs	r3, r3, #8
 800b374:	b29b      	uxth	r3, r3
 800b376:	b21b      	sxth	r3, r3
 800b378:	4313      	orrs	r3, r2
 800b37a:	b21b      	sxth	r3, r3
 800b37c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800b37e:	89bb      	ldrh	r3, [r7, #12]
 800b380:	3336      	adds	r3, #54	@ 0x36
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	429a      	cmp	r2, r3
 800b386:	d002      	beq.n	800b38e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800b388:	2304      	movs	r3, #4
 800b38a:	61fb      	str	r3, [r7, #28]
                break;
 800b38c:	e070      	b.n	800b470 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	7d1b      	ldrb	r3, [r3, #20]
 800b392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800b396:	e015      	b.n	800b3c4 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	3336      	adds	r3, #54	@ 0x36
 800b39c:	697a      	ldr	r2, [r7, #20]
 800b39e:	4413      	add	r3, r2
 800b3a0:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	785b      	ldrb	r3, [r3, #1]
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	00db      	lsls	r3, r3, #3
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	3336      	adds	r3, #54	@ 0x36
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d908      	bls.n	800b3d6 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800b3c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f000 f85f 	bl	800b48c <xIsExtHeader>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d1e1      	bne.n	800b398 <xCheckIPv6SizeFields+0x88>
 800b3d4:	e000      	b.n	800b3d8 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800b3d6:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	3336      	adds	r3, #54	@ 0x36
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d802      	bhi.n	800b3e8 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800b3e2:	2307      	movs	r3, #7
 800b3e4:	61fb      	str	r3, [r7, #28]
                break;
 800b3e6:	e043      	b.n	800b470 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800b3e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3ec:	2b11      	cmp	r3, #17
 800b3ee:	d103      	bne.n	800b3f8 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800b3f0:	6a3b      	ldr	r3, [r7, #32]
 800b3f2:	333e      	adds	r3, #62	@ 0x3e
 800b3f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3f6:	e032      	b.n	800b45e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800b3f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b3fc:	2b06      	cmp	r3, #6
 800b3fe:	d103      	bne.n	800b408 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	334a      	adds	r3, #74	@ 0x4a
 800b404:	627b      	str	r3, [r7, #36]	@ 0x24
 800b406:	e02a      	b.n	800b45e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800b408:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800b40c:	2b3a      	cmp	r3, #58	@ 0x3a
 800b40e:	d123      	bne.n	800b458 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800b410:	6a3b      	ldr	r3, [r7, #32]
 800b412:	3336      	adds	r3, #54	@ 0x36
 800b414:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b41a:	4413      	add	r3, r2
 800b41c:	781b      	ldrb	r3, [r3, #0]
 800b41e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800b420:	7afb      	ldrb	r3, [r7, #11]
 800b422:	2b80      	cmp	r3, #128	@ 0x80
 800b424:	d002      	beq.n	800b42c <xCheckIPv6SizeFields+0x11c>
 800b426:	7afb      	ldrb	r3, [r7, #11]
 800b428:	2b81      	cmp	r3, #129	@ 0x81
 800b42a:	d103      	bne.n	800b434 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800b42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b42e:	3308      	adds	r3, #8
 800b430:	627b      	str	r3, [r7, #36]	@ 0x24
 800b432:	e014      	b.n	800b45e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800b434:	7afb      	ldrb	r3, [r7, #11]
 800b436:	2b85      	cmp	r3, #133	@ 0x85
 800b438:	d103      	bne.n	800b442 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800b43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b43c:	3308      	adds	r3, #8
 800b43e:	627b      	str	r3, [r7, #36]	@ 0x24
 800b440:	e00d      	b.n	800b45e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800b442:	7afb      	ldrb	r3, [r7, #11]
 800b444:	2b86      	cmp	r3, #134	@ 0x86
 800b446:	d103      	bne.n	800b450 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800b448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44a:	3310      	adds	r3, #16
 800b44c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b44e:	e006      	b.n	800b45e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	3318      	adds	r3, #24
 800b454:	627b      	str	r3, [r7, #36]	@ 0x24
 800b456:	e002      	b.n	800b45e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800b458:	2305      	movs	r3, #5
 800b45a:	61fb      	str	r3, [r7, #28]
                break;
 800b45c:	e008      	b.n	800b470 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800b45e:	683a      	ldr	r2, [r7, #0]
 800b460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b462:	429a      	cmp	r2, r3
 800b464:	d202      	bcs.n	800b46c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800b466:	2306      	movs	r3, #6
 800b468:	61fb      	str	r3, [r7, #28]
                break;
 800b46a:	e001      	b.n	800b470 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800b46c:	2301      	movs	r3, #1
 800b46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800b470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b472:	2b01      	cmp	r3, #1
 800b474:	d003      	beq.n	800b47e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800b476:	69f9      	ldr	r1, [r7, #28]
 800b478:	4803      	ldr	r0, [pc, #12]	@ (800b488 <xCheckIPv6SizeFields+0x178>)
 800b47a:	f017 f96b 	bl	8022754 <lUDPLoggingPrintf>
        }

        return xResult;
 800b47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800b480:	4618      	mov	r0, r3
 800b482:	3730      	adds	r7, #48	@ 0x30
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	08025674 	.word	0x08025674

0800b48c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	4603      	mov	r3, r0
 800b494:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800b49a:	79fb      	ldrb	r3, [r7, #7]
 800b49c:	2b87      	cmp	r3, #135	@ 0x87
 800b49e:	d016      	beq.n	800b4ce <xIsExtHeader+0x42>
 800b4a0:	2b87      	cmp	r3, #135	@ 0x87
 800b4a2:	dc16      	bgt.n	800b4d2 <xIsExtHeader+0x46>
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d012      	beq.n	800b4ce <xIsExtHeader+0x42>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	db12      	blt.n	800b4d2 <xIsExtHeader+0x46>
 800b4ac:	2b3c      	cmp	r3, #60	@ 0x3c
 800b4ae:	dc10      	bgt.n	800b4d2 <xIsExtHeader+0x46>
 800b4b0:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4b2:	db0e      	blt.n	800b4d2 <xIsExtHeader+0x46>
 800b4b4:	3b2b      	subs	r3, #43	@ 0x2b
 800b4b6:	4a0a      	ldr	r2, [pc, #40]	@ (800b4e0 <xIsExtHeader+0x54>)
 800b4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4bc:	f003 0301 	and.w	r3, r3, #1
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	bf14      	ite	ne
 800b4c4:	2301      	movne	r3, #1
 800b4c6:	2300      	moveq	r3, #0
 800b4c8:	b2db      	uxtb	r3, r3
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d001      	beq.n	800b4d2 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
    }
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	00020183 	.word	0x00020183

0800b4e4 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d104      	bne.n	800b4fe <xGetIPv6MulticastGroupID+0x1a>
 800b4f4:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800b4f8:	480e      	ldr	r0, [pc, #56]	@ (800b534 <xGetIPv6MulticastGroupID+0x50>)
 800b4fa:	f7f6 fa4d 	bl	8001998 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d104      	bne.n	800b50e <xGetIPv6MulticastGroupID+0x2a>
 800b504:	f240 1113 	movw	r1, #275	@ 0x113
 800b508:	480a      	ldr	r0, [pc, #40]	@ (800b534 <xGetIPv6MulticastGroupID+0x50>)
 800b50a:	f7f6 fa45 	bl	8001998 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	2200      	movs	r2, #0
 800b512:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	2200      	movs	r2, #0
 800b518:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	1c98      	adds	r0, r3, #2
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	3302      	adds	r3, #2
 800b522:	220e      	movs	r2, #14
 800b524:	4619      	mov	r1, r3
 800b526:	f017 fb31 	bl	8022b8c <memcpy>
}
 800b52a:	bf00      	nop
 800b52c:	3708      	adds	r7, #8
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}
 800b532:	bf00      	nop
 800b534:	08025698 	.word	0x08025698

0800b538 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b540:	2300      	movs	r3, #0
 800b542:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2210      	movs	r2, #16
 800b548:	4906      	ldr	r1, [pc, #24]	@ (800b564 <xIsIPv6Loopback+0x2c>)
 800b54a:	4618      	mov	r0, r3
 800b54c:	f018 fab3 	bl	8023ab6 <memcmp>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d101      	bne.n	800b55a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800b556:	2301      	movs	r3, #1
 800b558:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800b55a:	68fb      	ldr	r3, [r7, #12]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	08027ef4 	.word	0x08027ef4

0800b568 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b088      	sub	sp, #32
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800b570:	2300      	movs	r3, #0
 800b572:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2bff      	cmp	r3, #255	@ 0xff
 800b57a:	d123      	bne.n	800b5c4 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800b57c:	f107 030c 	add.w	r3, r7, #12
 800b580:	4619      	mov	r1, r3
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff ffae 	bl	800b4e4 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	785b      	ldrb	r3, [r3, #1]
 800b58c:	f003 030f 	and.w	r3, r3, #15
 800b590:	2b00      	cmp	r3, #0
 800b592:	d102      	bne.n	800b59a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800b594:	2300      	movs	r3, #0
 800b596:	61fb      	str	r3, [r7, #28]
 800b598:	e014      	b.n	800b5c4 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	785b      	ldrb	r3, [r3, #1]
 800b59e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d10c      	bne.n	800b5c0 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800b5a6:	f107 030c 	add.w	r3, r7, #12
 800b5aa:	2210      	movs	r2, #16
 800b5ac:	4908      	ldr	r1, [pc, #32]	@ (800b5d0 <xIsIPv6AllowedMulticast+0x68>)
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f018 fa81 	bl	8023ab6 <memcmp>
 800b5b4:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d102      	bne.n	800b5c0 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	61fb      	str	r3, [r7, #28]
 800b5be:	e001      	b.n	800b5c4 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b5c4:	69fb      	ldr	r3, [r7, #28]
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3720      	adds	r7, #32
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	08027ee4 	.word	0x08027ee4

0800b5d4 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08a      	sub	sp, #40	@ 0x28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	781b      	ldrb	r3, [r3, #0]
 800b5e4:	2bff      	cmp	r3, #255	@ 0xff
 800b5e6:	d112      	bne.n	800b60e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d10e      	bne.n	800b60e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800b5f4:	2bff      	cmp	r3, #255	@ 0xff
 800b5f6:	d10a      	bne.n	800b60e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f103 000d 	add.w	r0, r3, #13
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	330d      	adds	r3, #13
 800b602:	2203      	movs	r2, #3
 800b604:	4619      	mov	r1, r3
 800b606:	f018 fa56 	bl	8023ab6 <memcmp>
 800b60a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b60c:	e069      	b.n	800b6e2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	2210      	movs	r2, #16
 800b612:	4936      	ldr	r1, [pc, #216]	@ (800b6ec <xCompareIPv6_Address+0x118>)
 800b614:	4618      	mov	r0, r3
 800b616:	f018 fa4e 	bl	8023ab6 <memcmp>
 800b61a:	4603      	mov	r3, r0
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d102      	bne.n	800b626 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	627b      	str	r3, [r7, #36]	@ 0x24
 800b624:	e05d      	b.n	800b6e2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	781b      	ldrb	r3, [r3, #0]
 800b62a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b62c:	d10e      	bne.n	800b64c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b632:	2b80      	cmp	r3, #128	@ 0x80
 800b634:	d10a      	bne.n	800b64c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b63a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b63c:	d106      	bne.n	800b64c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b642:	2b80      	cmp	r3, #128	@ 0x80
 800b644:	d102      	bne.n	800b64c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	627b      	str	r3, [r7, #36]	@ 0x24
 800b64a:	e04a      	b.n	800b6e2 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d102      	bne.n	800b658 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	627b      	str	r3, [r7, #36]	@ 0x24
 800b656:	e044      	b.n	800b6e2 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b80      	cmp	r3, #128	@ 0x80
 800b65c:	d107      	bne.n	800b66e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	68b9      	ldr	r1, [r7, #8]
 800b662:	2210      	movs	r2, #16
 800b664:	4618      	mov	r0, r3
 800b666:	f018 fa26 	bl	8023ab6 <memcmp>
 800b66a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b66c:	e039      	b.n	800b6e2 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	08db      	lsrs	r3, r3, #3
 800b672:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800b674:	2300      	movs	r3, #0
 800b676:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800b678:	6a3b      	ldr	r3, [r7, #32]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d006      	beq.n	800b68c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	68b9      	ldr	r1, [r7, #8]
 800b682:	6a3a      	ldr	r2, [r7, #32]
 800b684:	4618      	mov	r0, r3
 800b686:	f018 fa16 	bl	8023ab6 <memcmp>
 800b68a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800b68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d127      	bne.n	800b6e2 <xCompareIPv6_Address+0x10e>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f003 0307 	and.w	r3, r3, #7
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d022      	beq.n	800b6e2 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f003 0307 	and.w	r3, r3, #7
 800b6a2:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800b6a4:	69fb      	ldr	r3, [r7, #28]
 800b6a6:	f1c3 0308 	rsb	r3, r3, #8
 800b6aa:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b6ac:	2201      	movs	r2, #1
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800b6b4:	3b01      	subs	r3, #1
 800b6b6:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b6b8:	697b      	ldr	r3, [r7, #20]
 800b6ba:	b2db      	uxtb	r3, r3
 800b6bc:	43db      	mvns	r3, r3
 800b6be:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	6a3b      	ldr	r3, [r7, #32]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	781a      	ldrb	r2, [r3, #0]
 800b6c8:	68b9      	ldr	r1, [r7, #8]
 800b6ca:	6a3b      	ldr	r3, [r7, #32]
 800b6cc:	440b      	add	r3, r1
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	4053      	eors	r3, r2
 800b6d2:	b2da      	uxtb	r2, r3
 800b6d4:	7cfb      	ldrb	r3, [r7, #19]
 800b6d6:	4013      	ands	r3, r2
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d001      	beq.n	800b6e2 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800b6de:	2301      	movs	r3, #1
 800b6e0:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3728      	adds	r7, #40	@ 0x28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	08027f04 	.word	0x08027f04

0800b6f0 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b086      	sub	sp, #24
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b700:	7dfb      	ldrb	r3, [r7, #23]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d10c      	bne.n	800b720 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b70e:	4619      	mov	r1, r3
 800b710:	4610      	mov	r0, r2
 800b712:	f7ff fdfd 	bl	800b310 <xCheckIPv6SizeFields>
 800b716:	4603      	mov	r3, r0
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d001      	beq.n	800b720 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b71c:	2300      	movs	r3, #0
 800b71e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800b720:	7dfb      	ldrb	r3, [r7, #23]
}
 800b722:	4618      	mov	r0, r3
 800b724:	3718      	adds	r7, #24
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800b72c:	b480      	push	{r7}
 800b72e:	b085      	sub	sp, #20
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	460a      	mov	r2, r1
 800b736:	71fb      	strb	r3, [r7, #7]
 800b738:	4613      	mov	r3, r2
 800b73a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800b73c:	79fb      	ldrb	r3, [r7, #7]
 800b73e:	2b87      	cmp	r3, #135	@ 0x87
 800b740:	d04b      	beq.n	800b7da <xGetExtensionOrder+0xae>
 800b742:	2b87      	cmp	r3, #135	@ 0x87
 800b744:	dc4c      	bgt.n	800b7e0 <xGetExtensionOrder+0xb4>
 800b746:	2b00      	cmp	r3, #0
 800b748:	d030      	beq.n	800b7ac <xGetExtensionOrder+0x80>
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	db48      	blt.n	800b7e0 <xGetExtensionOrder+0xb4>
 800b74e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b750:	dc46      	bgt.n	800b7e0 <xGetExtensionOrder+0xb4>
 800b752:	2b2b      	cmp	r3, #43	@ 0x2b
 800b754:	db44      	blt.n	800b7e0 <xGetExtensionOrder+0xb4>
 800b756:	3b2b      	subs	r3, #43	@ 0x2b
 800b758:	2b11      	cmp	r3, #17
 800b75a:	d841      	bhi.n	800b7e0 <xGetExtensionOrder+0xb4>
 800b75c:	a201      	add	r2, pc, #4	@ (adr r2, 800b764 <xGetExtensionOrder+0x38>)
 800b75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b762:	bf00      	nop
 800b764:	0800b7c3 	.word	0x0800b7c3
 800b768:	0800b7c9 	.word	0x0800b7c9
 800b76c:	0800b7e1 	.word	0x0800b7e1
 800b770:	0800b7e1 	.word	0x0800b7e1
 800b774:	0800b7e1 	.word	0x0800b7e1
 800b778:	0800b7e1 	.word	0x0800b7e1
 800b77c:	0800b7e1 	.word	0x0800b7e1
 800b780:	0800b7d5 	.word	0x0800b7d5
 800b784:	0800b7cf 	.word	0x0800b7cf
 800b788:	0800b7e1 	.word	0x0800b7e1
 800b78c:	0800b7e1 	.word	0x0800b7e1
 800b790:	0800b7e1 	.word	0x0800b7e1
 800b794:	0800b7e1 	.word	0x0800b7e1
 800b798:	0800b7e1 	.word	0x0800b7e1
 800b79c:	0800b7e1 	.word	0x0800b7e1
 800b7a0:	0800b7e1 	.word	0x0800b7e1
 800b7a4:	0800b7e1 	.word	0x0800b7e1
 800b7a8:	0800b7b3 	.word	0x0800b7b3
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800b7ac:	2301      	movs	r3, #1
 800b7ae:	60fb      	str	r3, [r7, #12]
            break;
 800b7b0:	e01b      	b.n	800b7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800b7b2:	2307      	movs	r3, #7
 800b7b4:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800b7b6:	79bb      	ldrb	r3, [r7, #6]
 800b7b8:	2b2b      	cmp	r3, #43	@ 0x2b
 800b7ba:	d115      	bne.n	800b7e8 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800b7bc:	2302      	movs	r3, #2
 800b7be:	60fb      	str	r3, [r7, #12]
            }

            break;
 800b7c0:	e012      	b.n	800b7e8 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800b7c2:	2303      	movs	r3, #3
 800b7c4:	60fb      	str	r3, [r7, #12]
            break;
 800b7c6:	e010      	b.n	800b7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800b7c8:	2304      	movs	r3, #4
 800b7ca:	60fb      	str	r3, [r7, #12]
            break;
 800b7cc:	e00d      	b.n	800b7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800b7ce:	2305      	movs	r3, #5
 800b7d0:	60fb      	str	r3, [r7, #12]
            break;
 800b7d2:	e00a      	b.n	800b7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800b7d4:	2306      	movs	r3, #6
 800b7d6:	60fb      	str	r3, [r7, #12]
            break;
 800b7d8:	e007      	b.n	800b7ea <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800b7da:	2308      	movs	r3, #8
 800b7dc:	60fb      	str	r3, [r7, #12]
            break;
 800b7de:	e004      	b.n	800b7ea <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800b7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800b7e4:	60fb      	str	r3, [r7, #12]
            break;
 800b7e6:	e000      	b.n	800b7ea <xGetExtensionOrder+0xbe>
            break;
 800b7e8:	bf00      	nop
    }

    return xReturn;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08e      	sub	sp, #56	@ 0x38
 800b7fc:	af02      	add	r7, sp, #8
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800b802:	2300      	movs	r3, #0
 800b804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b80c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b812:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800b814:	2300      	movs	r3, #0
 800b816:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800b818:	2300      	movs	r3, #0
 800b81a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800b820:	2300      	movs	r3, #0
 800b822:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b82c:	f107 020b 	add.w	r2, r7, #11
 800b830:	4619      	mov	r1, r3
 800b832:	f000 faa5 	bl	800bd80 <usGetExtensionHeaderLength>
 800b836:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800b838:	69fb      	ldr	r3, [r7, #28]
 800b83a:	3336      	adds	r3, #54	@ 0x36
 800b83c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800b83e:	69ba      	ldr	r2, [r7, #24]
 800b840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b842:	429a      	cmp	r2, r3
 800b844:	d243      	bcs.n	800b8ce <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800b846:	6a3b      	ldr	r3, [r7, #32]
 800b848:	8a5b      	ldrh	r3, [r3, #18]
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	021b      	lsls	r3, r3, #8
 800b84e:	b21a      	sxth	r2, r3
 800b850:	6a3b      	ldr	r3, [r7, #32]
 800b852:	8a5b      	ldrh	r3, [r3, #18]
 800b854:	b29b      	uxth	r3, r3
 800b856:	0a1b      	lsrs	r3, r3, #8
 800b858:	b29b      	uxth	r3, r3
 800b85a:	b21b      	sxth	r3, r3
 800b85c:	4313      	orrs	r3, r2
 800b85e:	b21b      	sxth	r3, r3
 800b860:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800b862:	8afb      	ldrh	r3, [r7, #22]
 800b864:	69fa      	ldr	r2, [r7, #28]
 800b866:	429a      	cmp	r2, r3
 800b868:	d231      	bcs.n	800b8ce <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d12e      	bne.n	800b8ce <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800b870:	7afa      	ldrb	r2, [r7, #11]
 800b872:	6a3b      	ldr	r3, [r7, #32]
 800b874:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b87a:	3336      	adds	r3, #54	@ 0x36
 800b87c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b882:	69bb      	ldr	r3, [r7, #24]
 800b884:	4413      	add	r3, r2
 800b886:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800b888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800b890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b892:	68f9      	ldr	r1, [r7, #12]
 800b894:	6938      	ldr	r0, [r7, #16]
 800b896:	f018 f91e 	bl	8023ad6 <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	1ad2      	subs	r2, r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	b29b      	uxth	r3, r3
 800b8aa:	8afa      	ldrh	r2, [r7, #22]
 800b8ac:	1ad3      	subs	r3, r2, r3
 800b8ae:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800b8b0:	8afb      	ldrh	r3, [r7, #22]
 800b8b2:	021b      	lsls	r3, r3, #8
 800b8b4:	b21a      	sxth	r2, r3
 800b8b6:	8afb      	ldrh	r3, [r7, #22]
 800b8b8:	0a1b      	lsrs	r3, r3, #8
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	b21b      	sxth	r3, r3
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	b21b      	sxth	r3, r3
 800b8c2:	b29a      	uxth	r2, r3
 800b8c4:	6a3b      	ldr	r3, [r7, #32]
 800b8c6:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800b8c8:	2301      	movs	r3, #1
 800b8ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800b8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b8d2:	2b01      	cmp	r3, #1
 800b8d4:	d101      	bne.n	800b8da <eHandleIPv6ExtensionHeaders+0xe2>
 800b8d6:	4910      	ldr	r1, [pc, #64]	@ (800b918 <eHandleIPv6ExtensionHeaders+0x120>)
 800b8d8:	e000      	b.n	800b8dc <eHandleIPv6ExtensionHeaders+0xe4>
 800b8da:	4910      	ldr	r1, [pc, #64]	@ (800b91c <eHandleIPv6ExtensionHeaders+0x124>)
 800b8dc:	6a3b      	ldr	r3, [r7, #32]
 800b8de:	8a5b      	ldrh	r3, [r3, #18]
 800b8e0:	b29b      	uxth	r3, r3
 800b8e2:	021b      	lsls	r3, r3, #8
 800b8e4:	b21a      	sxth	r2, r3
 800b8e6:	6a3b      	ldr	r3, [r7, #32]
 800b8e8:	8a5b      	ldrh	r3, [r3, #18]
 800b8ea:	b29b      	uxth	r3, r3
 800b8ec:	0a1b      	lsrs	r3, r3, #8
 800b8ee:	b29b      	uxth	r3, r3
 800b8f0:	b21b      	sxth	r3, r3
 800b8f2:	4313      	orrs	r3, r2
 800b8f4:	b21b      	sxth	r3, r3
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	461a      	mov	r2, r3
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b8fe:	9301      	str	r3, [sp, #4]
 800b900:	9200      	str	r2, [sp, #0]
 800b902:	69fb      	ldr	r3, [r7, #28]
 800b904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b906:	4806      	ldr	r0, [pc, #24]	@ (800b920 <eHandleIPv6ExtensionHeaders+0x128>)
 800b908:	f016 ff24 	bl	8022754 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800b90c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b910:	4618      	mov	r0, r3
 800b912:	3730      	adds	r7, #48	@ 0x30
 800b914:	46bd      	mov	sp, r7
 800b916:	bd80      	pop	{r7, pc}
 800b918:	080256c8 	.word	0x080256c8
 800b91c:	080256d0 	.word	0x080256d0
 800b920:	080256d4 	.word	0x080256d4

0800b924 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800b924:	b580      	push	{r7, lr}
 800b926:	b084      	sub	sp, #16
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d026      	beq.n	800b986 <pxTCPSocketLookup_IPv6+0x62>
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d023      	beq.n	800b986 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	7a1b      	ldrb	r3, [r3, #8]
 800b942:	f003 0301 	and.w	r3, r3, #1
 800b946:	b2db      	uxtb	r3, r3
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d010      	beq.n	800b96e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d018      	beq.n	800b986 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	3354      	adds	r3, #84	@ 0x54
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	2210      	movs	r2, #16
 800b95c:	4618      	mov	r0, r3
 800b95e:	f018 f8aa 	bl	8023ab6 <memcmp>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d10e      	bne.n	800b986 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	60fb      	str	r3, [r7, #12]
 800b96c:	e00b      	b.n	800b986 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d107      	bne.n	800b986 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	429a      	cmp	r2, r3
 800b980:	d101      	bne.n	800b986 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800b986:	68fb      	ldr	r3, [r7, #12]
    }
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}

0800b990 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b084      	sub	sp, #16
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
 800b998:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b99e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800b9a6:	683b      	ldr	r3, [r7, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d103      	bne.n	800b9b4 <xSend_UDP_Update_IPv6+0x24>
 800b9ac:	2173      	movs	r1, #115	@ 0x73
 800b9ae:	4811      	ldr	r0, [pc, #68]	@ (800b9f4 <xSend_UDP_Update_IPv6+0x64>)
 800b9b0:	f7f5 fff2 	bl	8001998 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	3308      	adds	r3, #8
 800b9be:	2210      	movs	r2, #16
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	f017 f8e3 	bl	8022b8c <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f103 0014 	add.w	r0, r3, #20
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	2210      	movs	r2, #16
 800b9d2:	4619      	mov	r1, r3
 800b9d4:	f017 f8da 	bl	8022b8c <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b9e0:	731a      	strb	r2, [r3, #12]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b9e8:	735a      	strb	r2, [r3, #13]

    return NULL;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	0802572c 	.word	0x0802572c

0800b9f8 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	4603      	mov	r3, r0
 800ba00:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800ba02:	2330      	movs	r3, #48	@ 0x30
 800ba04:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800ba06:	88fb      	ldrh	r3, [r7, #6]
 800ba08:	2b09      	cmp	r3, #9
 800ba0a:	d805      	bhi.n	800ba18 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800ba0c:	88fb      	ldrh	r3, [r7, #6]
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	7bfb      	ldrb	r3, [r7, #15]
 800ba12:	4413      	add	r3, r2
 800ba14:	73fb      	strb	r3, [r7, #15]
 800ba16:	e010      	b.n	800ba3a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800ba18:	88fb      	ldrh	r3, [r7, #6]
 800ba1a:	2b0f      	cmp	r3, #15
 800ba1c:	d809      	bhi.n	800ba32 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800ba1e:	2361      	movs	r3, #97	@ 0x61
 800ba20:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800ba22:	88fb      	ldrh	r3, [r7, #6]
 800ba24:	b2da      	uxtb	r2, r3
 800ba26:	7bfb      	ldrb	r3, [r7, #15]
 800ba28:	4413      	add	r3, r2
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	3b0a      	subs	r3, #10
 800ba2e:	73fb      	strb	r3, [r7, #15]
 800ba30:	e003      	b.n	800ba3a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800ba32:	21b3      	movs	r1, #179	@ 0xb3
 800ba34:	4803      	ldr	r0, [pc, #12]	@ (800ba44 <cHexToChar+0x4c>)
 800ba36:	f7f5 ffaf 	bl	8001998 <vAssertCalled>
    }

    return cReturn;
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	3710      	adds	r7, #16
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}
 800ba44:	0802572c 	.word	0x0802572c

0800ba48 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800ba48:	b590      	push	{r4, r7, lr}
 800ba4a:	b08b      	sub	sp, #44	@ 0x2c
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	60f8      	str	r0, [r7, #12]
 800ba50:	60b9      	str	r1, [r7, #8]
 800ba52:	4613      	mov	r3, r2
 800ba54:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800ba56:	2304      	movs	r3, #4
 800ba58:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800ba5e:	88fb      	ldrh	r3, [r7, #6]
 800ba60:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800ba62:	2300      	movs	r3, #0
 800ba64:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800ba66:	2300      	movs	r3, #0
 800ba68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ba6a:	e026      	b.n	800baba <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800ba6c:	8bfb      	ldrh	r3, [r7, #30]
 800ba6e:	0b1b      	lsrs	r3, r3, #12
 800ba70:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800ba72:	8a7b      	ldrh	r3, [r7, #18]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d104      	bne.n	800ba8c <uxHexPrintShort+0x44>
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d110      	bne.n	800baae <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	6a3a      	ldr	r2, [r7, #32]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d216      	bcs.n	800bac4 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800ba96:	68fa      	ldr	r2, [r7, #12]
 800ba98:	6a3b      	ldr	r3, [r7, #32]
 800ba9a:	18d4      	adds	r4, r2, r3
 800ba9c:	8a7b      	ldrh	r3, [r7, #18]
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff ffaa 	bl	800b9f8 <cHexToChar>
 800baa4:	4603      	mov	r3, r0
 800baa6:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800baa8:	6a3b      	ldr	r3, [r7, #32]
 800baaa:	3301      	adds	r3, #1
 800baac:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800baae:	8bfb      	ldrh	r3, [r7, #30]
 800bab0:	011b      	lsls	r3, r3, #4
 800bab2:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800bab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab6:	3301      	adds	r3, #1
 800bab8:	627b      	str	r3, [r7, #36]	@ 0x24
 800baba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800babc:	697b      	ldr	r3, [r7, #20]
 800babe:	429a      	cmp	r2, r3
 800bac0:	d3d4      	bcc.n	800ba6c <uxHexPrintShort+0x24>
 800bac2:	e000      	b.n	800bac6 <uxHexPrintShort+0x7e>
                break;
 800bac4:	bf00      	nop
    }

    return uxIndex;
 800bac6:	6a3b      	ldr	r3, [r7, #32]
}
 800bac8:	4618      	mov	r0, r3
 800baca:	372c      	adds	r7, #44	@ 0x2c
 800bacc:	46bd      	mov	sp, r7
 800bace:	bd90      	pop	{r4, r7, pc}

0800bad0 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800bad0:	b480      	push	{r7}
 800bad2:	b089      	sub	sp, #36	@ 0x24
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800bad8:	2300      	movs	r3, #0
 800bada:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800badc:	2300      	movs	r3, #0
 800bade:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800bae0:	2300      	movs	r3, #0
 800bae2:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bae4:	2308      	movs	r3, #8
 800bae6:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f04f 32ff 	mov.w	r2, #4294967295
 800baee:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800baf0:	e02c      	b.n	800bb4c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	005b      	lsls	r3, r3, #1
 800bafa:	4413      	add	r3, r2
 800bafc:	881b      	ldrh	r3, [r3, #0]
 800bafe:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800bb00:	89fb      	ldrh	r3, [r7, #14]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d107      	bne.n	800bb16 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800bb06:	697b      	ldr	r3, [r7, #20]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d101      	bne.n	800bb10 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800bb10:	697b      	ldr	r3, [r7, #20]
 800bb12:	3301      	adds	r3, #1
 800bb14:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800bb16:	89fb      	ldrh	r3, [r7, #14]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d104      	bne.n	800bb26 <prv_ntop6_search_zeros+0x56>
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	3b01      	subs	r3, #1
 800bb20:	69fa      	ldr	r2, [r7, #28]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d10f      	bne.n	800bb46 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800bb26:	697b      	ldr	r3, [r7, #20]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	dd0a      	ble.n	800bb42 <prv_ntop6_search_zeros+0x72>
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	697a      	ldr	r2, [r7, #20]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	dd05      	ble.n	800bb42 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	697a      	ldr	r2, [r7, #20]
 800bb3a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	69ba      	ldr	r2, [r7, #24]
 800bb40:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	61fb      	str	r3, [r7, #28]
 800bb4c:	69fa      	ldr	r2, [r7, #28]
 800bb4e:	693b      	ldr	r3, [r7, #16]
 800bb50:	429a      	cmp	r2, r3
 800bb52:	dbce      	blt.n	800baf2 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800bb54:	bf00      	nop
 800bb56:	bf00      	nop
 800bb58:	3724      	adds	r7, #36	@ 0x24
 800bb5a:	46bd      	mov	sp, r7
 800bb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb60:	4770      	bx	lr

0800bb62 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bb62:	b480      	push	{r7}
 800bb64:	b087      	sub	sp, #28
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	60f8      	str	r0, [r7, #12]
 800bb6a:	60b9      	str	r1, [r7, #8]
 800bb6c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800bb72:	2308      	movs	r3, #8
 800bb74:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	691a      	ldr	r2, [r3, #16]
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	3b01      	subs	r3, #1
 800bb7e:	429a      	cmp	r2, r3
 800bb80:	d827      	bhi.n	800bbd2 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	691b      	ldr	r3, [r3, #16]
 800bb86:	68fa      	ldr	r2, [r7, #12]
 800bb88:	4413      	add	r3, r2
 800bb8a:	223a      	movs	r2, #58	@ 0x3a
 800bb8c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	691b      	ldr	r3, [r3, #16]
 800bb92:	1c5a      	adds	r2, r3, #1
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68da      	ldr	r2, [r3, #12]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	689b      	ldr	r3, [r3, #8]
 800bba0:	4413      	add	r3, r2
 800bba2:	693a      	ldr	r2, [r7, #16]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d116      	bne.n	800bbd6 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	691a      	ldr	r2, [r3, #16]
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d80b      	bhi.n	800bbcc <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	223a      	movs	r2, #58	@ 0x3a
 800bbbe:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	691b      	ldr	r3, [r3, #16]
 800bbc4:	1c5a      	adds	r2, r3, #1
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	611a      	str	r2, [r3, #16]
 800bbca:	e004      	b.n	800bbd6 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800bbcc:	2300      	movs	r3, #0
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	e001      	b.n	800bbd6 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800bbd6:	697b      	ldr	r3, [r7, #20]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	371c      	adds	r7, #28
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr

0800bbe4 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800bbe4:	b590      	push	{r4, r7, lr}
 800bbe6:	b089      	sub	sp, #36	@ 0x24
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	60f8      	str	r0, [r7, #12]
 800bbec:	60b9      	str	r1, [r7, #8]
 800bbee:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800bbf4:	2304      	movs	r3, #4
 800bbf6:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	dd13      	ble.n	800bc28 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	691a      	ldr	r2, [r3, #16]
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	3b01      	subs	r3, #1
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	d302      	bcc.n	800bc12 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	61fb      	str	r3, [r7, #28]
 800bc10:	e00a      	b.n	800bc28 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	691b      	ldr	r3, [r3, #16]
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	223a      	movs	r2, #58	@ 0x3a
 800bc1c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	1c5a      	adds	r2, r3, #1
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800bc28:	69fb      	ldr	r3, [r7, #28]
 800bc2a:	2b01      	cmp	r3, #1
 800bc2c:	d130      	bne.n	800bc90 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691a      	ldr	r2, [r3, #16]
 800bc32:	68b9      	ldr	r1, [r7, #8]
 800bc34:	69bb      	ldr	r3, [r7, #24]
 800bc36:	1acb      	subs	r3, r1, r3
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d827      	bhi.n	800bc8c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	691b      	ldr	r3, [r3, #16]
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	18d0      	adds	r0, r2, r3
 800bc44:	69bb      	ldr	r3, [r7, #24]
 800bc46:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68db      	ldr	r3, [r3, #12]
 800bc50:	005b      	lsls	r3, r3, #1
 800bc52:	4413      	add	r3, r2
 800bc54:	881b      	ldrh	r3, [r3, #0]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	b21a      	sxth	r2, r3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6819      	ldr	r1, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	005b      	lsls	r3, r3, #1
 800bc64:	440b      	add	r3, r1
 800bc66:	881b      	ldrh	r3, [r3, #0]
 800bc68:	0a1b      	lsrs	r3, r3, #8
 800bc6a:	b29b      	uxth	r3, r3
 800bc6c:	b21b      	sxth	r3, r3
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	461a      	mov	r2, r3
 800bc76:	4621      	mov	r1, r4
 800bc78:	f7ff fee6 	bl	800ba48 <uxHexPrintShort>
 800bc7c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	691a      	ldr	r2, [r3, #16]
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	441a      	add	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	611a      	str	r2, [r3, #16]
 800bc8a:	e001      	b.n	800bc90 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800bc90:	69fb      	ldr	r3, [r7, #28]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	3724      	adds	r7, #36	@ 0x24
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bd90      	pop	{r4, r7, pc}

0800bc9a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800bc9a:	b580      	push	{r7, lr}
 800bc9c:	b08a      	sub	sp, #40	@ 0x28
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	60f8      	str	r0, [r7, #12]
 800bca2:	60b9      	str	r1, [r7, #8]
 800bca4:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800bca6:	f107 0310 	add.w	r3, r7, #16
 800bcaa:	2214      	movs	r2, #20
 800bcac:	2100      	movs	r1, #0
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f017 f879 	bl	8022da6 <memset>

    xSet.pusAddress = pvSource;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2b02      	cmp	r3, #2
 800bcbc:	d92c      	bls.n	800bd18 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800bcbe:	f107 0310 	add.w	r3, r7, #16
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	f7ff ff04 	bl	800bad0 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800bcc8:	e01f      	b.n	800bd0a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800bcca:	69fa      	ldr	r2, [r7, #28]
 800bccc:	697b      	ldr	r3, [r7, #20]
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d10e      	bne.n	800bcf0 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bcd2:	f107 0310 	add.w	r3, r7, #16
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	6879      	ldr	r1, [r7, #4]
 800bcda:	68b8      	ldr	r0, [r7, #8]
 800bcdc:	f7ff ff41 	bl	800bb62 <prv_ntop6_write_zeros>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d015      	beq.n	800bd12 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800bce6:	69fa      	ldr	r2, [r7, #28]
 800bce8:	69bb      	ldr	r3, [r7, #24]
 800bcea:	4413      	add	r3, r2
 800bcec:	61fb      	str	r3, [r7, #28]
 800bcee:	e00c      	b.n	800bd0a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800bcf0:	f107 0310 	add.w	r3, r7, #16
 800bcf4:	461a      	mov	r2, r3
 800bcf6:	6879      	ldr	r1, [r7, #4]
 800bcf8:	68b8      	ldr	r0, [r7, #8]
 800bcfa:	f7ff ff73 	bl	800bbe4 <prv_ntop6_write_short>
 800bcfe:	4603      	mov	r3, r0
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d008      	beq.n	800bd16 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	3301      	adds	r3, #1
 800bd08:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800bd0a:	69fb      	ldr	r3, [r7, #28]
 800bd0c:	2b07      	cmp	r3, #7
 800bd0e:	dddc      	ble.n	800bcca <FreeRTOS_inet_ntop6+0x30>
 800bd10:	e002      	b.n	800bd18 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bd12:	bf00      	nop
 800bd14:	e000      	b.n	800bd18 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800bd16:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800bd18:	69fb      	ldr	r3, [r7, #28]
 800bd1a:	2b07      	cmp	r3, #7
 800bd1c:	dc02      	bgt.n	800bd24 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800bd1e:	2300      	movs	r3, #0
 800bd20:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd22:	e006      	b.n	800bd32 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	68ba      	ldr	r2, [r7, #8]
 800bd28:	4413      	add	r3, r2
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3728      	adds	r7, #40	@ 0x28
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	2233      	movs	r2, #51	@ 0x33
 800bd4a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	2233      	movs	r2, #51	@ 0x33
 800bd50:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	7b1a      	ldrb	r2, [r3, #12]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	7b5a      	ldrb	r2, [r3, #13]
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	7b9a      	ldrb	r2, [r3, #14]
 800bd66:	683b      	ldr	r3, [r7, #0]
 800bd68:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	7bda      	ldrb	r2, [r3, #15]
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	715a      	strb	r2, [r3, #5]
}
 800bd72:	bf00      	nop
 800bd74:	370c      	adds	r7, #12
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
	...

0800bd80 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b08e      	sub	sp, #56	@ 0x38
 800bd84:	af02      	add	r7, sp, #8
 800bd86:	60f8      	str	r0, [r7, #12]
 800bd88:	60b9      	str	r1, [r7, #8]
 800bd8a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800bd92:	2336      	movs	r3, #54	@ 0x36
 800bd94:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800bd96:	2300      	movs	r3, #0
 800bd98:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800bd9e:	2300      	movs	r3, #0
 800bda0:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 808c 	beq.w	800bec6 <usGetExtensionHeaderLength+0x146>
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	f000 8088 	beq.w	800bec6 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	7d1b      	ldrb	r3, [r3, #20]
 800bdbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800bdc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f7ff fcaf 	bl	800b72c <xGetExtensionOrder>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	dd72      	ble.n	800beba <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800bdd4:	e06b      	b.n	800beae <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800bdd6:	68fa      	ldr	r2, [r7, #12]
 800bdd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdda:	4413      	add	r3, r2
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800bde2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800bde6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800bdea:	4611      	mov	r1, r2
 800bdec:	4618      	mov	r0, r3
 800bdee:	f7ff fc9d 	bl	800b72c <xGetExtensionOrder>
 800bdf2:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800bdf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	4413      	add	r3, r2
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800be00:	69fb      	ldr	r3, [r7, #28]
 800be02:	3301      	adds	r3, #1
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800be08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	4413      	add	r3, r2
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	429a      	cmp	r2, r3
 800be12:	d806      	bhi.n	800be22 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	69fa      	ldr	r2, [r7, #28]
 800be18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800be1a:	482d      	ldr	r0, [pc, #180]	@ (800bed0 <usGetExtensionHeaderLength+0x150>)
 800be1c:	f016 fc9a 	bl	8022754 <lUDPLoggingPrintf>
                    break;
 800be20:	e051      	b.n	800bec6 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800be22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	4413      	add	r3, r2
 800be28:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800be2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be2e:	2b06      	cmp	r3, #6
 800be30:	d007      	beq.n	800be42 <usGetExtensionHeaderLength+0xc2>
 800be32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be36:	2b11      	cmp	r3, #17
 800be38:	d003      	beq.n	800be42 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800be3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be3e:	2b3a      	cmp	r3, #58	@ 0x3a
 800be40:	d10d      	bne.n	800be5e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800be42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be46:	4619      	mov	r1, r3
 800be48:	4822      	ldr	r0, [pc, #136]	@ (800bed4 <usGetExtensionHeaderLength+0x154>)
 800be4a:	f016 fc83 	bl	8022754 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800be4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be50:	3b36      	subs	r3, #54	@ 0x36
 800be52:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800be5a:	701a      	strb	r2, [r3, #0]
                    break;
 800be5c:	e033      	b.n	800bec6 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be62:	4413      	add	r3, r2
 800be64:	781a      	ldrb	r2, [r3, #0]
 800be66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800be6a:	4611      	mov	r1, r2
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7ff fc5d 	bl	800b72c <xGetExtensionOrder>
 800be72:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800be74:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800be78:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	4613      	mov	r3, r2
 800be82:	69ba      	ldr	r2, [r7, #24]
 800be84:	4814      	ldr	r0, [pc, #80]	@ (800bed8 <usGetExtensionHeaderLength+0x158>)
 800be86:	f016 fc65 	bl	8022754 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	2b01      	cmp	r3, #1
 800be8e:	d103      	bne.n	800be98 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800be90:	4812      	ldr	r0, [pc, #72]	@ (800bedc <usGetExtensionHeaderLength+0x15c>)
 800be92:	f016 fc5f 	bl	8022754 <lUDPLoggingPrintf>
                    break;
 800be96:	e016      	b.n	800bec6 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	da03      	bge.n	800bea6 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800be9e:	4810      	ldr	r0, [pc, #64]	@ (800bee0 <usGetExtensionHeaderLength+0x160>)
 800bea0:	f016 fc58 	bl	8022754 <lUDPLoggingPrintf>
                    break;
 800bea4:	e00f      	b.n	800bec6 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800bea6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800beaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800beae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800beb0:	3308      	adds	r3, #8
 800beb2:	68ba      	ldr	r2, [r7, #8]
 800beb4:	429a      	cmp	r2, r3
 800beb6:	d88e      	bhi.n	800bdd6 <usGetExtensionHeaderLength+0x56>
 800beb8:	e005      	b.n	800bec6 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800bec0:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800bec2:	2300      	movs	r3, #0
 800bec4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800bec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bec8:	4618      	mov	r0, r3
 800beca:	3730      	adds	r7, #48	@ 0x30
 800becc:	46bd      	mov	sp, r7
 800bece:	bd80      	pop	{r7, pc}
 800bed0:	08025774 	.word	0x08025774
 800bed4:	080257bc 	.word	0x080257bc
 800bed8:	080257d0 	.word	0x080257d0
 800bedc:	080257f8 	.word	0x080257f8
 800bee0:	08025858 	.word	0x08025858

0800bee4 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
 800beec:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d104      	bne.n	800befe <vManageSolicitedNodeAddress+0x1a>
 800bef4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800bef8:	482d      	ldr	r0, [pc, #180]	@ (800bfb0 <vManageSolicitedNodeAddress+0xcc>)
 800befa:	f7f5 fd4d 	bl	8001998 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d104      	bne.n	800bf12 <vManageSolicitedNodeAddress+0x2e>
 800bf08:	f240 1133 	movw	r1, #307	@ 0x133
 800bf0c:	4828      	ldr	r0, [pc, #160]	@ (800bfb0 <vManageSolicitedNodeAddress+0xcc>)
 800bf0e:	f7f5 fd43 	bl	8001998 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3338      	adds	r3, #56	@ 0x38
 800bf16:	4618      	mov	r0, r3
 800bf18:	f002 f9c2 	bl	800e2a0 <xIPv6_GetIPType>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800bf20:	7bfb      	ldrb	r3, [r7, #15]
 800bf22:	2b01      	cmp	r3, #1
 800bf24:	d005      	beq.n	800bf32 <vManageSolicitedNodeAddress+0x4e>
 800bf26:	7bfb      	ldrb	r3, [r7, #15]
 800bf28:	2b02      	cmp	r3, #2
 800bf2a:	d002      	beq.n	800bf32 <vManageSolicitedNodeAddress+0x4e>
 800bf2c:	7bfb      	ldrb	r3, [r7, #15]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d138      	bne.n	800bfa4 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bf32:	2333      	movs	r3, #51	@ 0x33
 800bf34:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800bf36:	2333      	movs	r3, #51	@ 0x33
 800bf38:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800bf3a:	23ff      	movs	r3, #255	@ 0xff
 800bf3c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bf44:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800bf4c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800bf54:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d111      	bne.n	800bf80 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf62:	695b      	ldr	r3, [r3, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d01e      	beq.n	800bfa6 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf6e:	695b      	ldr	r3, [r3, #20]
 800bf70:	687a      	ldr	r2, [r7, #4]
 800bf72:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800bf76:	f107 0108 	add.w	r1, r7, #8
 800bf7a:	4610      	mov	r0, r2
 800bf7c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800bf7e:	e012      	b.n	800bfa6 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf86:	699b      	ldr	r3, [r3, #24]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d00c      	beq.n	800bfa6 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bf92:	699b      	ldr	r3, [r3, #24]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800bf9a:	f107 0108 	add.w	r1, r7, #8
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	4798      	blx	r3
}
 800bfa2:	e000      	b.n	800bfa6 <vManageSolicitedNodeAddress+0xc2>
            break;
 800bfa4:	bf00      	nop
}
 800bfa6:	bf00      	nop
 800bfa8:	3710      	adds	r7, #16
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	0802587c 	.word	0x0802587c

0800bfb4 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800bfba:	2000      	movs	r0, #0
 800bfbc:	f001 fd8c 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	e016      	b.n	800bff2 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bfca:	f003 0304 	and.w	r3, r3, #4
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d009      	beq.n	800bfe8 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	3338      	adds	r3, #56	@ 0x38
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f002 f961 	bl	800e2a0 <xIPv6_GetIPType>
 800bfde:	4603      	mov	r3, r0
 800bfe0:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800bfe2:	78fb      	ldrb	r3, [r7, #3]
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d008      	beq.n	800bffa <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800bfe8:	6879      	ldr	r1, [r7, #4]
 800bfea:	2000      	movs	r0, #0
 800bfec:	f001 fd96 	bl	800db1c <FreeRTOS_NextEndPoint>
 800bff0:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1e5      	bne.n	800bfc4 <pxFindLocalEndpoint+0x10>
 800bff8:	e000      	b.n	800bffc <pxFindLocalEndpoint+0x48>
                {
                    break;
 800bffa:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800bffc:	687b      	ldr	r3, [r7, #4]
    }
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800c006:	b580      	push	{r7, lr}
 800c008:	b086      	sub	sp, #24
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	60f8      	str	r0, [r7, #12]
 800c00e:	60b9      	str	r1, [r7, #8]
 800c010:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800c012:	68f8      	ldr	r0, [r7, #12]
 800c014:	f7ff faa8 	bl	800b568 <xIsIPv6AllowedMulticast>
 800c018:	4603      	mov	r3, r0
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00e      	beq.n	800c03c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800c01e:	68b9      	ldr	r1, [r7, #8]
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f7ff fe8b 	bl	800bd3c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d004      	beq.n	800c036 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800c02c:	f7ff ffc2 	bl	800bfb4 <pxFindLocalEndpoint>
 800c030:	4602      	mov	r2, r0
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800c036:	2301      	movs	r3, #1
 800c038:	75fb      	strb	r3, [r7, #23]
 800c03a:	e001      	b.n	800c040 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800c03c:	2300      	movs	r3, #0
 800c03e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800c040:	7dfb      	ldrb	r3, [r7, #23]
    }
 800c042:	4618      	mov	r0, r3
 800c044:	3718      	adds	r7, #24
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
	...

0800c04c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c058:	687a      	ldr	r2, [r7, #4]
 800c05a:	68b9      	ldr	r1, [r7, #8]
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	f7ff ffd2 	bl	800c006 <prvMACResolve>
 800c062:	4603      	mov	r3, r0
 800c064:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800c066:	7ffb      	ldrb	r3, [r7, #31]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d106      	bne.n	800c07a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c06c:	687a      	ldr	r2, [r7, #4]
 800c06e:	68b9      	ldr	r1, [r7, #8]
 800c070:	68f8      	ldr	r0, [r7, #12]
 800c072:	f000 f9a9 	bl	800c3c8 <prvNDCacheLookup>
 800c076:	4603      	mov	r3, r0
 800c078:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800c07a:	7ffb      	ldrb	r3, [r7, #31]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4619      	mov	r1, r3
 800c084:	4840      	ldr	r0, [pc, #256]	@ (800c188 <eNDGetCacheEntry+0x13c>)
 800c086:	f016 fb65 	bl	8022754 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800c08a:	7ffb      	ldrb	r3, [r7, #31]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d176      	bne.n	800c17e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800c090:	68f8      	ldr	r0, [r7, #12]
 800c092:	f002 f905 	bl	800e2a0 <xIPv6_GetIPType>
 800c096:	4603      	mov	r3, r0
 800c098:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800c09a:	68f8      	ldr	r0, [r7, #12]
 800c09c:	f001 fdae 	bl	800dbfc <FreeRTOS_FindEndPointOnIP_IPv6>
 800c0a0:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800c0a2:	69bb      	ldr	r3, [r7, #24]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d00d      	beq.n	800c0c4 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d002      	beq.n	800c0b4 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	69ba      	ldr	r2, [r7, #24]
 800c0b2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800c0b4:	68f9      	ldr	r1, [r7, #12]
 800c0b6:	69bb      	ldr	r3, [r7, #24]
 800c0b8:	3338      	adds	r3, #56	@ 0x38
 800c0ba:	461a      	mov	r2, r3
 800c0bc:	4833      	ldr	r0, [pc, #204]	@ (800c18c <eNDGetCacheEntry+0x140>)
 800c0be:	f016 fb49 	bl	8022754 <lUDPLoggingPrintf>
 800c0c2:	e05c      	b.n	800c17e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800c0c4:	7dfb      	ldrb	r3, [r7, #23]
 800c0c6:	2b01      	cmp	r3, #1
 800c0c8:	d12b      	bne.n	800c122 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800c0ca:	2000      	movs	r0, #0
 800c0cc:	f001 fd04 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800c0d0:	61b8      	str	r0, [r7, #24]
 800c0d2:	e017      	b.n	800c104 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c0d4:	69bb      	ldr	r3, [r7, #24]
 800c0d6:	3338      	adds	r3, #56	@ 0x38
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f002 f8e1 	bl	800e2a0 <xIPv6_GetIPType>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800c0e2:	7dba      	ldrb	r2, [r7, #22]
 800c0e4:	7dfb      	ldrb	r3, [r7, #23]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d107      	bne.n	800c0fa <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c0ea:	687a      	ldr	r2, [r7, #4]
 800c0ec:	68b9      	ldr	r1, [r7, #8]
 800c0ee:	68f8      	ldr	r0, [r7, #12]
 800c0f0:	f000 f96a 	bl	800c3c8 <prvNDCacheLookup>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	77fb      	strb	r3, [r7, #31]
                            break;
 800c0f8:	e007      	b.n	800c10a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800c0fa:	69b9      	ldr	r1, [r7, #24]
 800c0fc:	2000      	movs	r0, #0
 800c0fe:	f001 fd0d 	bl	800db1c <FreeRTOS_NextEndPoint>
 800c102:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800c104:	69bb      	ldr	r3, [r7, #24]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d1e4      	bne.n	800c0d4 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800c10a:	68f9      	ldr	r1, [r7, #12]
 800c10c:	7ffb      	ldrb	r3, [r7, #31]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d101      	bne.n	800c116 <eNDGetCacheEntry+0xca>
 800c112:	4b1f      	ldr	r3, [pc, #124]	@ (800c190 <eNDGetCacheEntry+0x144>)
 800c114:	e000      	b.n	800c118 <eNDGetCacheEntry+0xcc>
 800c116:	4b1f      	ldr	r3, [pc, #124]	@ (800c194 <eNDGetCacheEntry+0x148>)
 800c118:	461a      	mov	r2, r3
 800c11a:	481f      	ldr	r0, [pc, #124]	@ (800c198 <eNDGetCacheEntry+0x14c>)
 800c11c:	f016 fb1a 	bl	8022754 <lUDPLoggingPrintf>
 800c120:	e02d      	b.n	800c17e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800c122:	2060      	movs	r0, #96	@ 0x60
 800c124:	f002 f87c 	bl	800e220 <FreeRTOS_FindGateWay>
 800c128:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800c12a:	69bb      	ldr	r3, [r7, #24]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d026      	beq.n	800c17e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c130:	68f8      	ldr	r0, [r7, #12]
 800c132:	69bb      	ldr	r3, [r7, #24]
 800c134:	335c      	adds	r3, #92	@ 0x5c
 800c136:	2210      	movs	r2, #16
 800c138:	4619      	mov	r1, r3
 800c13a:	f016 fd27 	bl	8022b8c <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	4619      	mov	r1, r3
 800c142:	4816      	ldr	r0, [pc, #88]	@ (800c19c <eNDGetCacheEntry+0x150>)
 800c144:	f016 fb06 	bl	8022754 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	3338      	adds	r3, #56	@ 0x38
 800c14c:	4619      	mov	r1, r3
 800c14e:	4814      	ldr	r0, [pc, #80]	@ (800c1a0 <eNDGetCacheEntry+0x154>)
 800c150:	f016 fb00 	bl	8022754 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	68b9      	ldr	r1, [r7, #8]
 800c158:	68f8      	ldr	r0, [r7, #12]
 800c15a:	f000 f935 	bl	800c3c8 <prvNDCacheLookup>
 800c15e:	4603      	mov	r3, r0
 800c160:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d006      	beq.n	800c178 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	3338      	adds	r3, #56	@ 0x38
 800c170:	4619      	mov	r1, r3
 800c172:	480c      	ldr	r0, [pc, #48]	@ (800c1a4 <eNDGetCacheEntry+0x158>)
 800c174:	f016 faee 	bl	8022754 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	69ba      	ldr	r2, [r7, #24]
 800c17c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800c17e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800c180:	4618      	mov	r0, r3
 800c182:	3720      	adds	r7, #32
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	080258b0 	.word	0x080258b0
 800c18c:	080258d4 	.word	0x080258d4
 800c190:	08025918 	.word	0x08025918
 800c194:	0802591c 	.word	0x0802591c
 800c198:	08025924 	.word	0x08025924
 800c19c:	0802594c 	.word	0x0802594c
 800c1a0:	08025970 	.word	0x08025970
 800c1a4:	08025994 	.word	0x08025994

0800c1a8 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800c1a8:	b5b0      	push	{r4, r5, r7, lr}
 800c1aa:	b08e      	sub	sp, #56	@ 0x38
 800c1ac:	af04      	add	r7, sp, #16
 800c1ae:	60f8      	str	r0, [r7, #12]
 800c1b0:	60b9      	str	r1, [r7, #8]
 800c1b2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800c1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b8:	623b      	str	r3, [r7, #32]
 800c1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c1be:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800c1c0:	2397      	movs	r3, #151	@ 0x97
 800c1c2:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c1cc:	e033      	b.n	800c236 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c1ce:	4a44      	ldr	r2, [pc, #272]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1d2:	015b      	lsls	r3, r3, #5
 800c1d4:	4413      	add	r3, r2
 800c1d6:	331d      	adds	r3, #29
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800c1de:	6a3b      	ldr	r3, [r7, #32]
 800c1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1e4:	d124      	bne.n	800c230 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e8:	623b      	str	r3, [r7, #32]
 800c1ea:	e021      	b.n	800c230 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ee:	015b      	lsls	r3, r3, #5
 800c1f0:	4a3b      	ldr	r2, [pc, #236]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c1f2:	4413      	add	r3, r2
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	2210      	movs	r2, #16
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f017 fc5c 	bl	8023ab6 <memcmp>
 800c1fe:	4603      	mov	r3, r0
 800c200:	2b00      	cmp	r3, #0
 800c202:	d102      	bne.n	800c20a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800c204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c206:	61fb      	str	r3, [r7, #28]
                break;
 800c208:	e018      	b.n	800c23c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800c20a:	4a35      	ldr	r2, [pc, #212]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c20e:	015b      	lsls	r3, r3, #5
 800c210:	4413      	add	r3, r2
 800c212:	331c      	adds	r3, #28
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	8b7b      	ldrh	r3, [r7, #26]
 800c21a:	4293      	cmp	r3, r2
 800c21c:	d908      	bls.n	800c230 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800c21e:	4a30      	ldr	r2, [pc, #192]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c222:	015b      	lsls	r3, r3, #5
 800c224:	4413      	add	r3, r2
 800c226:	331c      	adds	r3, #28
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800c22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c22e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c232:	3301      	adds	r3, #1
 800c234:	627b      	str	r3, [r7, #36]	@ 0x24
 800c236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c238:	2b17      	cmp	r3, #23
 800c23a:	ddc8      	ble.n	800c1ce <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	da22      	bge.n	800c288 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	2b00      	cmp	r3, #0
 800c246:	db02      	blt.n	800c24e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	61fb      	str	r3, [r7, #28]
 800c24c:	e01c      	b.n	800c288 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	461c      	mov	r4, r3
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	785b      	ldrb	r3, [r3, #1]
 800c25c:	461d      	mov	r5, r3
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	789b      	ldrb	r3, [r3, #2]
 800c262:	461a      	mov	r2, r3
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	78db      	ldrb	r3, [r3, #3]
 800c268:	4619      	mov	r1, r3
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	791b      	ldrb	r3, [r3, #4]
 800c26e:	4618      	mov	r0, r3
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	795b      	ldrb	r3, [r3, #5]
 800c274:	9303      	str	r3, [sp, #12]
 800c276:	9002      	str	r0, [sp, #8]
 800c278:	9101      	str	r1, [sp, #4]
 800c27a:	9200      	str	r2, [sp, #0]
 800c27c:	462b      	mov	r3, r5
 800c27e:	4622      	mov	r2, r4
 800c280:	69f9      	ldr	r1, [r7, #28]
 800c282:	4818      	ldr	r0, [pc, #96]	@ (800c2e4 <vNDRefreshCacheEntry+0x13c>)
 800c284:	f016 fa66 	bl	8022754 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	015b      	lsls	r3, r3, #5
 800c28c:	4a14      	ldr	r2, [pc, #80]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c28e:	4413      	add	r3, r2
 800c290:	68b9      	ldr	r1, [r7, #8]
 800c292:	2210      	movs	r2, #16
 800c294:	4618      	mov	r0, r3
 800c296:	f016 fc79 	bl	8022b8c <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	015b      	lsls	r3, r3, #5
 800c29e:	3310      	adds	r3, #16
 800c2a0:	4a0f      	ldr	r2, [pc, #60]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c2a2:	4413      	add	r3, r2
 800c2a4:	68f9      	ldr	r1, [r7, #12]
 800c2a6:	2206      	movs	r2, #6
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	f016 fc6f 	bl	8022b8c <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800c2ae:	4a0c      	ldr	r2, [pc, #48]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	015b      	lsls	r3, r3, #5
 800c2b4:	4413      	add	r3, r2
 800c2b6:	3318      	adds	r3, #24
 800c2b8:	687a      	ldr	r2, [r7, #4]
 800c2ba:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800c2bc:	4a08      	ldr	r2, [pc, #32]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	015b      	lsls	r3, r3, #5
 800c2c2:	4413      	add	r3, r2
 800c2c4:	331c      	adds	r3, #28
 800c2c6:	2296      	movs	r2, #150	@ 0x96
 800c2c8:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800c2ca:	4a05      	ldr	r2, [pc, #20]	@ (800c2e0 <vNDRefreshCacheEntry+0x138>)
 800c2cc:	69fb      	ldr	r3, [r7, #28]
 800c2ce:	015b      	lsls	r3, r3, #5
 800c2d0:	4413      	add	r3, r2
 800c2d2:	331d      	adds	r3, #29
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	701a      	strb	r2, [r3, #0]
    }
 800c2d8:	bf00      	nop
 800c2da:	3728      	adds	r7, #40	@ 0x28
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e0:	20001228 	.word	0x20001228
 800c2e4:	080259bc 	.word	0x080259bc

0800c2e8 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	60fb      	str	r3, [r7, #12]
 800c2f2:	e05f      	b.n	800c3b4 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800c2f8:	4a32      	ldr	r2, [pc, #200]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	015b      	lsls	r3, r3, #5
 800c2fe:	4413      	add	r3, r2
 800c300:	331c      	adds	r3, #28
 800c302:	781b      	ldrb	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d052      	beq.n	800c3ae <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800c308:	4a2e      	ldr	r2, [pc, #184]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	015b      	lsls	r3, r3, #5
 800c30e:	4413      	add	r3, r2
 800c310:	331c      	adds	r3, #28
 800c312:	781b      	ldrb	r3, [r3, #0]
 800c314:	3b01      	subs	r3, #1
 800c316:	b2d9      	uxtb	r1, r3
 800c318:	4a2a      	ldr	r2, [pc, #168]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	015b      	lsls	r3, r3, #5
 800c31e:	4413      	add	r3, r2
 800c320:	331c      	adds	r3, #28
 800c322:	460a      	mov	r2, r1
 800c324:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800c326:	4a27      	ldr	r2, [pc, #156]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	015b      	lsls	r3, r3, #5
 800c32c:	4413      	add	r3, r2
 800c32e:	331c      	adds	r3, #28
 800c330:	781b      	ldrb	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d109      	bne.n	800c34a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	015b      	lsls	r3, r3, #5
 800c33a:	4a22      	ldr	r2, [pc, #136]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c33c:	4413      	add	r3, r2
 800c33e:	2220      	movs	r2, #32
 800c340:	2100      	movs	r1, #0
 800c342:	4618      	mov	r0, r3
 800c344:	f016 fd2f 	bl	8022da6 <memset>
 800c348:	e031      	b.n	800c3ae <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c34a:	4a1e      	ldr	r2, [pc, #120]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	015b      	lsls	r3, r3, #5
 800c350:	4413      	add	r3, r2
 800c352:	331d      	adds	r3, #29
 800c354:	781b      	ldrb	r3, [r3, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d102      	bne.n	800c360 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800c35a:	2301      	movs	r3, #1
 800c35c:	60bb      	str	r3, [r7, #8]
 800c35e:	e009      	b.n	800c374 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800c360:	4a18      	ldr	r2, [pc, #96]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	015b      	lsls	r3, r3, #5
 800c366:	4413      	add	r3, r2
 800c368:	331c      	adds	r3, #28
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d801      	bhi.n	800c374 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800c370:	2301      	movs	r3, #1
 800c372:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d019      	beq.n	800c3ae <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c37a:	2356      	movs	r3, #86	@ 0x56
 800c37c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800c37e:	2100      	movs	r1, #0
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f00b fad7 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 800c386:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d00f      	beq.n	800c3ae <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800c38e:	4a0d      	ldr	r2, [pc, #52]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	015b      	lsls	r3, r3, #5
 800c394:	4413      	add	r3, r2
 800c396:	3318      	adds	r3, #24
 800c398:	681a      	ldr	r2, [r3, #0]
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	015b      	lsls	r3, r3, #5
 800c3a2:	4a08      	ldr	r2, [pc, #32]	@ (800c3c4 <vNDAgeCache+0xdc>)
 800c3a4:	4413      	add	r3, r2
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6838      	ldr	r0, [r7, #0]
 800c3aa:	f000 f8bb 	bl	800c524 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2b17      	cmp	r3, #23
 800c3b8:	dd9c      	ble.n	800c2f4 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800c3ba:	bf00      	nop
 800c3bc:	bf00      	nop
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	20001228 	.word	0x20001228

0800c3c8 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800c3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ca:	b08d      	sub	sp, #52	@ 0x34
 800c3cc:	af06      	add	r7, sp, #24
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c3d8:	2300      	movs	r3, #0
 800c3da:	617b      	str	r3, [r7, #20]
 800c3dc:	e04a      	b.n	800c474 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800c3de:	4a30      	ldr	r2, [pc, #192]	@ (800c4a0 <prvNDCacheLookup+0xd8>)
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	015b      	lsls	r3, r3, #5
 800c3e4:	4413      	add	r3, r2
 800c3e6:	331d      	adds	r3, #29
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d03f      	beq.n	800c46e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c3ee:	697b      	ldr	r3, [r7, #20]
 800c3f0:	015b      	lsls	r3, r3, #5
 800c3f2:	4a2b      	ldr	r2, [pc, #172]	@ (800c4a0 <prvNDCacheLookup+0xd8>)
 800c3f4:	4413      	add	r3, r2
 800c3f6:	68f9      	ldr	r1, [r7, #12]
 800c3f8:	2210      	movs	r2, #16
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f017 fb5b 	bl	8023ab6 <memcmp>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d133      	bne.n	800c46e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c406:	68b8      	ldr	r0, [r7, #8]
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	015b      	lsls	r3, r3, #5
 800c40c:	3310      	adds	r3, #16
 800c40e:	4a24      	ldr	r2, [pc, #144]	@ (800c4a0 <prvNDCacheLookup+0xd8>)
 800c410:	4413      	add	r3, r2
 800c412:	2206      	movs	r2, #6
 800c414:	4619      	mov	r1, r3
 800c416:	f016 fbb9 	bl	8022b8c <memcpy>
                eReturn = eARPCacheHit;
 800c41a:	2301      	movs	r3, #1
 800c41c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	d007      	beq.n	800c434 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800c424:	4a1e      	ldr	r2, [pc, #120]	@ (800c4a0 <prvNDCacheLookup+0xd8>)
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	015b      	lsls	r3, r3, #5
 800c42a:	4413      	add	r3, r2
 800c42c:	3318      	adds	r3, #24
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	461e      	mov	r6, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	785b      	ldrb	r3, [r3, #1]
 800c440:	4619      	mov	r1, r3
 800c442:	68bb      	ldr	r3, [r7, #8]
 800c444:	789b      	ldrb	r3, [r3, #2]
 800c446:	4618      	mov	r0, r3
 800c448:	68bb      	ldr	r3, [r7, #8]
 800c44a:	78db      	ldrb	r3, [r3, #3]
 800c44c:	461c      	mov	r4, r3
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	791b      	ldrb	r3, [r3, #4]
 800c452:	461d      	mov	r5, r3
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	795b      	ldrb	r3, [r3, #5]
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	9503      	str	r5, [sp, #12]
 800c45c:	9402      	str	r4, [sp, #8]
 800c45e:	9001      	str	r0, [sp, #4]
 800c460:	9100      	str	r1, [sp, #0]
 800c462:	4633      	mov	r3, r6
 800c464:	6979      	ldr	r1, [r7, #20]
 800c466:	480f      	ldr	r0, [pc, #60]	@ (800c4a4 <prvNDCacheLookup+0xdc>)
 800c468:	f016 f974 	bl	8022754 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800c46c:	e005      	b.n	800c47a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	3301      	adds	r3, #1
 800c472:	617b      	str	r3, [r7, #20]
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2b17      	cmp	r3, #23
 800c478:	ddb1      	ble.n	800c3de <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800c47a:	7cfb      	ldrb	r3, [r7, #19]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d10a      	bne.n	800c496 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	4619      	mov	r1, r3
 800c484:	4808      	ldr	r0, [pc, #32]	@ (800c4a8 <prvNDCacheLookup+0xe0>)
 800c486:	f016 f965 	bl	8022754 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d002      	beq.n	800c496 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800c496:	7cfb      	ldrb	r3, [r7, #19]
    }
 800c498:	4618      	mov	r0, r3
 800c49a:	371c      	adds	r7, #28
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4a0:	20001228 	.word	0x20001228
 800c4a4:	08025a20 	.word	0x08025a20
 800c4a8:	08025a60 	.word	0x08025a60

0800c4ac <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ba:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4c0:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	3316      	adds	r3, #22
 800c4cc:	2210      	movs	r2, #16
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f016 fb5c 	bl	8022b8c <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	f103 0016 	add.w	r0, r3, #22
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	3338      	adds	r3, #56	@ 0x38
 800c4de:	2210      	movs	r2, #16
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	f016 fb53 	bl	8022b8c <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800c4e6:	683b      	ldr	r3, [r7, #0]
 800c4e8:	b29b      	uxth	r3, r3
 800c4ea:	021b      	lsls	r3, r3, #8
 800c4ec:	b29a      	uxth	r2, r3
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	0a1b      	lsrs	r3, r3, #8
 800c4f2:	b29b      	uxth	r3, r3
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	b29a      	uxth	r2, r3
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	2200      	movs	r2, #0
 800c50a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800c50e:	2200      	movs	r2, #0
 800c510:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800c514:	2100      	movs	r1, #0
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7fd fe46 	bl	800a1a8 <vReturnEthernetFrame>
    }
 800c51c:	bf00      	nop
 800c51e:	3710      	adds	r7, #16
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800c524:	b5b0      	push	{r4, r5, r7, lr}
 800c526:	b090      	sub	sp, #64	@ 0x40
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c532:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c538:	2300      	movs	r3, #0
 800c53a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800c53c:	2300      	movs	r3, #0
 800c53e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800c540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c542:	2b00      	cmp	r3, #0
 800c544:	f000 80c1 	beq.w	800c6ca <vNDSendNeighbourSolicitation+0x1a6>
 800c548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c54a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c54e:	f003 0304 	and.w	r3, r3, #4
 800c552:	b2db      	uxtb	r3, r3
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 80b8 	beq.w	800c6ca <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c55a:	2356      	movs	r3, #86	@ 0x56
 800c55c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800c55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c564:	429a      	cmp	r2, r3
 800c566:	d909      	bls.n	800c57c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c56a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c56c:	f7fe f9ce 	bl	800a90c <pxDuplicateNetworkBufferWithDescriptor>
 800c570:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c572:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c574:	f00b fa46 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800c578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800c57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	f000 80a3 	beq.w	800c6ca <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800c584:	2320      	movs	r3, #32
 800c586:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c58c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	3336      	adds	r3, #54	@ 0x36
 800c592:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800c594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c598:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800c59a:	2333      	movs	r3, #51	@ 0x33
 800c59c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800c59e:	2333      	movs	r3, #51	@ 0x33
 800c5a0:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800c5a2:	23ff      	movs	r3, #255	@ 0xff
 800c5a4:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	7b5b      	ldrb	r3, [r3, #13]
 800c5aa:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	7b9b      	ldrb	r3, [r3, #14]
 800c5b0:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	7bdb      	ldrb	r3, [r3, #15]
 800c5b6:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ba:	3306      	adds	r3, #6
 800c5bc:	461a      	mov	r2, r3
 800c5be:	f107 0308 	add.w	r3, r7, #8
 800c5c2:	6818      	ldr	r0, [r3, #0]
 800c5c4:	6010      	str	r0, [r2, #0]
 800c5c6:	889b      	ldrh	r3, [r3, #4]
 800c5c8:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c5ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c5ce:	33e8      	adds	r3, #232	@ 0xe8
 800c5d0:	2206      	movs	r2, #6
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	f016 fada 	bl	8022b8c <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c5e0:	731a      	strb	r2, [r3, #12]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c5e8:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800c5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ec:	2260      	movs	r2, #96	@ 0x60
 800c5ee:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	741a      	strb	r2, [r3, #16]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800c600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c602:	b29b      	uxth	r3, r3
 800c604:	021b      	lsls	r3, r3, #8
 800c606:	b29a      	uxth	r2, r3
 800c608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c60a:	0a1b      	lsrs	r3, r3, #8
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	4313      	orrs	r3, r2
 800c610:	b29a      	uxth	r2, r3
 800c612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c614:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c618:	223a      	movs	r2, #58	@ 0x3a
 800c61a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c61e:	22ff      	movs	r2, #255	@ 0xff
 800c620:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c624:	f103 0016 	add.w	r0, r3, #22
 800c628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c62a:	3338      	adds	r3, #56	@ 0x38
 800c62c:	2210      	movs	r2, #16
 800c62e:	4619      	mov	r1, r3
 800c630:	f016 faac 	bl	8022b8c <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800c634:	f107 0310 	add.w	r3, r7, #16
 800c638:	2210      	movs	r2, #16
 800c63a:	2100      	movs	r1, #0
 800c63c:	4618      	mov	r0, r3
 800c63e:	f016 fbb2 	bl	8022da6 <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800c642:	23ff      	movs	r3, #255	@ 0xff
 800c644:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800c646:	2302      	movs	r3, #2
 800c648:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800c64a:	2301      	movs	r3, #1
 800c64c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800c64e:	23ff      	movs	r3, #255	@ 0xff
 800c650:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	7b5b      	ldrb	r3, [r3, #13]
 800c656:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	7b9b      	ldrb	r3, [r3, #14]
 800c65c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	7bdb      	ldrb	r3, [r3, #15]
 800c662:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c666:	3326      	adds	r3, #38	@ 0x26
 800c668:	461d      	mov	r5, r3
 800c66a:	f107 0410 	add.w	r4, r7, #16
 800c66e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c670:	6028      	str	r0, [r5, #0]
 800c672:	6069      	str	r1, [r5, #4]
 800c674:	60aa      	str	r2, [r5, #8]
 800c676:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800c678:	2220      	movs	r2, #32
 800c67a:	2100      	movs	r1, #0
 800c67c:	6a38      	ldr	r0, [r7, #32]
 800c67e:	f016 fb92 	bl	8022da6 <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800c682:	6a3b      	ldr	r3, [r7, #32]
 800c684:	2287      	movs	r2, #135	@ 0x87
 800c686:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c688:	6a3b      	ldr	r3, [r7, #32]
 800c68a:	3308      	adds	r3, #8
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	2210      	movs	r2, #16
 800c690:	4618      	mov	r0, r3
 800c692:	f016 fa7b 	bl	8022b8c <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800c696:	6a3b      	ldr	r3, [r7, #32]
 800c698:	2201      	movs	r2, #1
 800c69a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800c69c:	6a3b      	ldr	r3, [r7, #32]
 800c69e:	2201      	movs	r2, #1
 800c6a0:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c6a2:	6a3b      	ldr	r3, [r7, #32]
 800c6a4:	f103 001a 	add.w	r0, r3, #26
 800c6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c6aa:	33e8      	adds	r3, #232	@ 0xe8
 800c6ac:	2206      	movs	r2, #6
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f016 fa6c 	bl	8022b8c <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800c6b4:	6a3b      	ldr	r3, [r7, #32]
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	709a      	strb	r2, [r3, #2]
 800c6ba:	2200      	movs	r2, #0
 800c6bc:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c6be:	2101      	movs	r1, #1
 800c6c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c6c2:	f7fd fd71 	bl	800a1a8 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800c6c6:	2301      	movs	r3, #1
 800c6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800c6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d005      	beq.n	800c6dc <vNDSendNeighbourSolicitation+0x1b8>
 800c6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d102      	bne.n	800c6dc <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c6d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c6d8:	f00b f994 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800c6dc:	bf00      	nop
 800c6de:	3740      	adds	r7, #64	@ 0x40
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bdb0      	pop	{r4, r5, r7, pc}

0800c6e4 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	b2db      	uxtb	r3, r3
 800c6f0:	2b04      	cmp	r3, #4
 800c6f2:	dc29      	bgt.n	800c748 <pcMessageType+0x64>
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	dc19      	bgt.n	800c72c <pcMessageType+0x48>
 800c6f8:	e049      	b.n	800c78e <pcMessageType+0xaa>
 800c6fa:	3b80      	subs	r3, #128	@ 0x80
 800c6fc:	2b08      	cmp	r3, #8
 800c6fe:	d846      	bhi.n	800c78e <pcMessageType+0xaa>
 800c700:	a201      	add	r2, pc, #4	@ (adr r2, 800c708 <pcMessageType+0x24>)
 800c702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c706:	bf00      	nop
 800c708:	0800c76b 	.word	0x0800c76b
 800c70c:	0800c771 	.word	0x0800c771
 800c710:	0800c78f 	.word	0x0800c78f
 800c714:	0800c78f 	.word	0x0800c78f
 800c718:	0800c78f 	.word	0x0800c78f
 800c71c:	0800c777 	.word	0x0800c777
 800c720:	0800c77d 	.word	0x0800c77d
 800c724:	0800c783 	.word	0x0800c783
 800c728:	0800c789 	.word	0x0800c789
 800c72c:	3b01      	subs	r3, #1
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d82d      	bhi.n	800c78e <pcMessageType+0xaa>
 800c732:	a201      	add	r2, pc, #4	@ (adr r2, 800c738 <pcMessageType+0x54>)
 800c734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c738:	0800c753 	.word	0x0800c753
 800c73c:	0800c759 	.word	0x0800c759
 800c740:	0800c75f 	.word	0x0800c75f
 800c744:	0800c765 	.word	0x0800c765
 800c748:	2b88      	cmp	r3, #136	@ 0x88
 800c74a:	dc20      	bgt.n	800c78e <pcMessageType+0xaa>
 800c74c:	2b80      	cmp	r3, #128	@ 0x80
 800c74e:	dad4      	bge.n	800c6fa <pcMessageType+0x16>
 800c750:	e01d      	b.n	800c78e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800c752:	4b14      	ldr	r3, [pc, #80]	@ (800c7a4 <pcMessageType+0xc0>)
 800c754:	60fb      	str	r3, [r7, #12]
                    break;
 800c756:	e01d      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800c758:	4b13      	ldr	r3, [pc, #76]	@ (800c7a8 <pcMessageType+0xc4>)
 800c75a:	60fb      	str	r3, [r7, #12]
                    break;
 800c75c:	e01a      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800c75e:	4b13      	ldr	r3, [pc, #76]	@ (800c7ac <pcMessageType+0xc8>)
 800c760:	60fb      	str	r3, [r7, #12]
                    break;
 800c762:	e017      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800c764:	4b12      	ldr	r3, [pc, #72]	@ (800c7b0 <pcMessageType+0xcc>)
 800c766:	60fb      	str	r3, [r7, #12]
                    break;
 800c768:	e014      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800c76a:	4b12      	ldr	r3, [pc, #72]	@ (800c7b4 <pcMessageType+0xd0>)
 800c76c:	60fb      	str	r3, [r7, #12]
                    break;
 800c76e:	e011      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800c770:	4b11      	ldr	r3, [pc, #68]	@ (800c7b8 <pcMessageType+0xd4>)
 800c772:	60fb      	str	r3, [r7, #12]
                    break;
 800c774:	e00e      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800c776:	4b11      	ldr	r3, [pc, #68]	@ (800c7bc <pcMessageType+0xd8>)
 800c778:	60fb      	str	r3, [r7, #12]
                    break;
 800c77a:	e00b      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800c77c:	4b10      	ldr	r3, [pc, #64]	@ (800c7c0 <pcMessageType+0xdc>)
 800c77e:	60fb      	str	r3, [r7, #12]
                    break;
 800c780:	e008      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800c782:	4b10      	ldr	r3, [pc, #64]	@ (800c7c4 <pcMessageType+0xe0>)
 800c784:	60fb      	str	r3, [r7, #12]
                    break;
 800c786:	e005      	b.n	800c794 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800c788:	4b0f      	ldr	r3, [pc, #60]	@ (800c7c8 <pcMessageType+0xe4>)
 800c78a:	60fb      	str	r3, [r7, #12]
                    break;
 800c78c:	e002      	b.n	800c794 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800c78e:	4b0f      	ldr	r3, [pc, #60]	@ (800c7cc <pcMessageType+0xe8>)
 800c790:	60fb      	str	r3, [r7, #12]
                    break;
 800c792:	bf00      	nop
            }

            return pcReturn;
 800c794:	68fb      	ldr	r3, [r7, #12]
        }
 800c796:	4618      	mov	r0, r3
 800c798:	3714      	adds	r7, #20
 800c79a:	46bd      	mov	sp, r7
 800c79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a0:	4770      	bx	lr
 800c7a2:	bf00      	nop
 800c7a4:	08025b28 	.word	0x08025b28
 800c7a8:	08025b3c 	.word	0x08025b3c
 800c7ac:	08025b4c 	.word	0x08025b4c
 800c7b0:	08025b5c 	.word	0x08025b5c
 800c7b4:	08025b70 	.word	0x08025b70
 800c7b8:	08025b80 	.word	0x08025b80
 800c7bc:	08025b8c 	.word	0x08025b8c
 800c7c0:	08025b98 	.word	0x08025b98
 800c7c4:	08025ba4 	.word	0x08025ba4
 800c7c8:	08025bb4 	.word	0x08025bb4
 800c7cc:	08025bc4 	.word	0x08025bc4

0800c7d0 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b088      	sub	sp, #32
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800c7d8:	4b19      	ldr	r3, [pc, #100]	@ (800c840 <prvCheckWaitingBuffer+0x70>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c7e0:	69fb      	ldr	r3, [r7, #28]
 800c7e2:	330e      	adds	r3, #14
 800c7e4:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	69bb      	ldr	r3, [r7, #24]
 800c7ea:	3308      	adds	r3, #8
 800c7ec:	2210      	movs	r2, #16
 800c7ee:	4619      	mov	r1, r3
 800c7f0:	f017 f961 	bl	8023ab6 <memcmp>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d11d      	bne.n	800c836 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800c7fe:	4811      	ldr	r0, [pc, #68]	@ (800c844 <prvCheckWaitingBuffer+0x74>)
 800c800:	f015 ffa8 	bl	8022754 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800c804:	2301      	movs	r3, #1
 800c806:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800c808:	4b0d      	ldr	r3, [pc, #52]	@ (800c840 <prvCheckWaitingBuffer+0x70>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800c80e:	f107 030c 	add.w	r3, r7, #12
 800c812:	6979      	ldr	r1, [r7, #20]
 800c814:	4618      	mov	r0, r3
 800c816:	f7fd fa13 	bl	8009c40 <xSendEventStructToIPTask>
 800c81a:	4603      	mov	r3, r0
 800c81c:	2b01      	cmp	r3, #1
 800c81e:	d004      	beq.n	800c82a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800c820:	4b07      	ldr	r3, [pc, #28]	@ (800c840 <prvCheckWaitingBuffer+0x70>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4618      	mov	r0, r3
 800c826:	f00b f8ed 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800c82a:	4b05      	ldr	r3, [pc, #20]	@ (800c840 <prvCheckWaitingBuffer+0x70>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800c830:	2000      	movs	r0, #0
 800c832:	f7fd fffb 	bl	800a82c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800c836:	bf00      	nop
 800c838:	3720      	adds	r7, #32
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}
 800c83e:	bf00      	nop
 800c840:	2000119c 	.word	0x2000119c
 800c844:	08025bd4 	.word	0x08025bd4

0800c848 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800c848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c84c:	b09e      	sub	sp, #120	@ 0x78
 800c84e:	af02      	add	r7, sp, #8
 800c850:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c856:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c85a:	3336      	adds	r3, #54	@ 0x36
 800c85c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c862:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800c864:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	2b80      	cmp	r3, #128	@ 0x80
 800c86a:	d01e      	beq.n	800c8aa <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800c86c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c86e:	781b      	ldrb	r3, [r3, #0]
 800c870:	4698      	mov	r8, r3
 800c872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	4618      	mov	r0, r3
 800c878:	f7ff ff34 	bl	800c6e4 <pcMessageType>
 800c87c:	4606      	mov	r6, r0
 800c87e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c880:	f103 0516 	add.w	r5, r3, #22
 800c884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c886:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800c88a:	f107 030c 	add.w	r3, r7, #12
 800c88e:	2228      	movs	r2, #40	@ 0x28
 800c890:	4619      	mov	r1, r3
 800c892:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c894:	f001 fd5c 	bl	800e350 <pcEndpointName>
 800c898:	4603      	mov	r3, r0
 800c89a:	9301      	str	r3, [sp, #4]
 800c89c:	9400      	str	r4, [sp, #0]
 800c89e:	462b      	mov	r3, r5
 800c8a0:	4632      	mov	r2, r6
 800c8a2:	4641      	mov	r1, r8
 800c8a4:	48a7      	ldr	r0, [pc, #668]	@ (800cb44 <prvProcessICMPMessage_IPv6+0x2fc>)
 800c8a6:	f015 ff55 	bl	8022754 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c8ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c8b0:	f003 0304 	and.w	r3, r3, #4
 800c8b4:	b2db      	uxtb	r3, r3
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	f000 813e 	beq.w	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c8bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	2b04      	cmp	r3, #4
 800c8c2:	dc1d      	bgt.n	800c900 <prvProcessICMPMessage_IPv6+0xb8>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	f300 8130 	bgt.w	800cb2a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800c8ca:	e130      	b.n	800cb2e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c8cc:	3b80      	subs	r3, #128	@ 0x80
 800c8ce:	2b08      	cmp	r3, #8
 800c8d0:	f200 812d 	bhi.w	800cb2e <prvProcessICMPMessage_IPv6+0x2e6>
 800c8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800c8dc <prvProcessICMPMessage_IPv6+0x94>)
 800c8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8da:	bf00      	nop
 800c8dc:	0800c90d 	.word	0x0800c90d
 800c8e0:	0800c955 	.word	0x0800c955
 800c8e4:	0800cb2f 	.word	0x0800cb2f
 800c8e8:	0800cb2f 	.word	0x0800cb2f
 800c8ec:	0800cb2f 	.word	0x0800cb2f
 800c8f0:	0800cb2f 	.word	0x0800cb2f
 800c8f4:	0800cb23 	.word	0x0800cb23
 800c8f8:	0800c9cb 	.word	0x0800c9cb
 800c8fc:	0800cadb 	.word	0x0800cadb
 800c900:	2b88      	cmp	r3, #136	@ 0x88
 800c902:	f300 8114 	bgt.w	800cb2e <prvProcessICMPMessage_IPv6+0x2e6>
 800c906:	2b80      	cmp	r3, #128	@ 0x80
 800c908:	dae0      	bge.n	800c8cc <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800c90a:	e110      	b.n	800cb2e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800c90c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c90e:	8a5b      	ldrh	r3, [r3, #18]
 800c910:	b29b      	uxth	r3, r3
 800c912:	021b      	lsls	r3, r3, #8
 800c914:	b21a      	sxth	r2, r3
 800c916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c918:	8a5b      	ldrh	r3, [r3, #18]
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	0a1b      	lsrs	r3, r3, #8
 800c91e:	b29b      	uxth	r3, r3
 800c920:	b21b      	sxth	r3, r3
 800c922:	4313      	orrs	r3, r2
 800c924:	b21b      	sxth	r3, r3
 800c926:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800c928:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c92a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c92e:	3336      	adds	r3, #54	@ 0x36
 800c930:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c938:	429a      	cmp	r2, r3
 800c93a:	d903      	bls.n	800c944 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c93c:	4882      	ldr	r0, [pc, #520]	@ (800cb48 <prvProcessICMPMessage_IPv6+0x300>)
 800c93e:	f015 ff09 	bl	8022754 <lUDPLoggingPrintf>
                           break;
 800c942:	e0f9      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800c944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c946:	2281      	movs	r2, #129	@ 0x81
 800c948:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c94a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f7ff fdad 	bl	800c4ac <prvReturnICMP_IPv6>
                   break;
 800c952:	e0f1      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800c954:	2300      	movs	r3, #0
 800c956:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800c95a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c95c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800c95e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c960:	8a5b      	ldrh	r3, [r3, #18]
 800c962:	b29b      	uxth	r3, r3
 800c964:	021b      	lsls	r3, r3, #8
 800c966:	b21a      	sxth	r2, r3
 800c968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c96a:	8a5b      	ldrh	r3, [r3, #18]
 800c96c:	b29b      	uxth	r3, r3
 800c96e:	0a1b      	lsrs	r3, r3, #8
 800c970:	b29b      	uxth	r3, r3
 800c972:	b21b      	sxth	r3, r3
 800c974:	4313      	orrs	r3, r2
 800c976:	b21b      	sxth	r3, r3
 800c978:	b29b      	uxth	r3, r3
 800c97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800c97c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c97e:	3b08      	subs	r3, #8
 800c980:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800c982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c984:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800c986:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c988:	3308      	adds	r3, #8
 800c98a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c98c:	2300      	movs	r3, #0
 800c98e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c990:	e00d      	b.n	800c9ae <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800c992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b78      	cmp	r3, #120	@ 0x78
 800c998:	d003      	beq.n	800c9a2 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800c99a:	2302      	movs	r3, #2
 800c99c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800c9a0:	e009      	b.n	800c9b6 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800c9a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c9a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c9ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c9b2:	429a      	cmp	r2, r3
 800c9b4:	d3ed      	bcc.n	800c992 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800c9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c9b8:	889b      	ldrh	r3, [r3, #4]
 800c9ba:	b29a      	uxth	r2, r3
 800c9bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f7f5 f89e 	bl	8001b04 <vApplicationPingReplyHook>
                           break;
 800c9c8:	e0b6      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800c9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c9cc:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c9d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	4619      	mov	r1, r3
 800c9d8:	4610      	mov	r0, r2
 800c9da:	f001 f9cd 	bl	800dd78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800c9de:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800c9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d002      	beq.n	800c9ec <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800c9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c9e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c9ea:	e005      	b.n	800c9f8 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800c9ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c9ee:	3308      	adds	r3, #8
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	4856      	ldr	r0, [pc, #344]	@ (800cb4c <prvProcessICMPMessage_IPv6+0x304>)
 800c9f4:	f015 feae 	bl	8022754 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c9f8:	2320      	movs	r3, #32
 800c9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c9fe:	3336      	adds	r3, #54	@ 0x36
 800ca00:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca08:	429a      	cmp	r2, r3
 800ca0a:	d903      	bls.n	800ca14 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800ca0c:	484e      	ldr	r0, [pc, #312]	@ (800cb48 <prvProcessICMPMessage_IPv6+0x300>)
 800ca0e:	f015 fea1 	bl	8022754 <lUDPLoggingPrintf>
                           break;
 800ca12:	e091      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ca14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca16:	f103 0008 	add.w	r0, r3, #8
 800ca1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ca1c:	3338      	adds	r3, #56	@ 0x38
 800ca1e:	2210      	movs	r2, #16
 800ca20:	4619      	mov	r1, r3
 800ca22:	f017 f848 	bl	8023ab6 <memcmp>
 800ca26:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800ca28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca2a:	f103 0108 	add.w	r1, r3, #8
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ca36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <prvProcessICMPMessage_IPv6+0x1f8>
 800ca3c:	4b44      	ldr	r3, [pc, #272]	@ (800cb50 <prvProcessICMPMessage_IPv6+0x308>)
 800ca3e:	e000      	b.n	800ca42 <prvProcessICMPMessage_IPv6+0x1fa>
 800ca40:	4b44      	ldr	r3, [pc, #272]	@ (800cb54 <prvProcessICMPMessage_IPv6+0x30c>)
 800ca42:	4845      	ldr	r0, [pc, #276]	@ (800cb58 <prvProcessICMPMessage_IPv6+0x310>)
 800ca44:	f015 fe86 	bl	8022754 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800ca48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d171      	bne.n	800cb32 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800ca4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca50:	2288      	movs	r2, #136	@ 0x88
 800ca52:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800ca54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca56:	2200      	movs	r2, #0
 800ca58:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800ca5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	711a      	strb	r2, [r3, #4]
 800ca60:	2200      	movs	r2, #0
 800ca62:	715a      	strb	r2, [r3, #5]
 800ca64:	2200      	movs	r2, #0
 800ca66:	719a      	strb	r2, [r3, #6]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ca6e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800ca70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	061a      	lsls	r2, r3, #24
 800ca76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca78:	685b      	ldr	r3, [r3, #4]
 800ca7a:	021b      	lsls	r3, r3, #8
 800ca7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca80:	431a      	orrs	r2, r3
 800ca82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	0a1b      	lsrs	r3, r3, #8
 800ca88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ca8c:	431a      	orrs	r2, r3
 800ca8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	0e1b      	lsrs	r3, r3, #24
 800ca94:	431a      	orrs	r2, r3
 800ca96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca98:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800ca9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ca9c:	2202      	movs	r2, #2
 800ca9e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800caa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caa2:	2201      	movs	r2, #1
 800caa4:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800caa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caa8:	f103 001a 	add.w	r0, r3, #26
 800caac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800caae:	33e8      	adds	r3, #232	@ 0xe8
 800cab0:	2206      	movs	r2, #6
 800cab2:	4619      	mov	r1, r3
 800cab4:	f016 f86a 	bl	8022b8c <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800cab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800caba:	22ff      	movs	r2, #255	@ 0xff
 800cabc:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800cabe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cac0:	f103 0008 	add.w	r0, r3, #8
 800cac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cac6:	3338      	adds	r3, #56	@ 0x38
 800cac8:	2210      	movs	r2, #16
 800caca:	4619      	mov	r1, r3
 800cacc:	f016 f85e 	bl	8022b8c <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800cad0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800cad2:	6878      	ldr	r0, [r7, #4]
 800cad4:	f7ff fcea 	bl	800c4ac <prvReturnICMP_IPv6>
                   break;
 800cad8:	e02b      	b.n	800cb32 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800cada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cadc:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800cae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cae2:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800cae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800cae6:	4619      	mov	r1, r3
 800cae8:	f7ff fb5e 	bl	800c1a8 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800caec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800caee:	3308      	adds	r3, #8
 800caf0:	4619      	mov	r1, r3
 800caf2:	481a      	ldr	r0, [pc, #104]	@ (800cb5c <prvProcessICMPMessage_IPv6+0x314>)
 800caf4:	f015 fe2e 	bl	8022754 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fa89 	bl	800d010 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800cafe:	4b18      	ldr	r3, [pc, #96]	@ (800cb60 <prvProcessICMPMessage_IPv6+0x318>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d017      	beq.n	800cb36 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800cb06:	4b16      	ldr	r3, [pc, #88]	@ (800cb60 <prvProcessICMPMessage_IPv6+0x318>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	f7fd fc4c 	bl	800a3a8 <uxIPHeaderSizePacket>
 800cb10:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800cb12:	2b28      	cmp	r3, #40	@ 0x28
 800cb14:	d10f      	bne.n	800cb36 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800cb16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cb18:	3308      	adds	r3, #8
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff fe58 	bl	800c7d0 <prvCheckWaitingBuffer>
                    break;
 800cb20:	e009      	b.n	800cb36 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f000 fb9a 	bl	800d25c <vReceiveRA>
                            break;
 800cb28:	e006      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb2a:	bf00      	nop
 800cb2c:	e004      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb2e:	bf00      	nop
 800cb30:	e002      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800cb32:	bf00      	nop
 800cb34:	e000      	b.n	800cb38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800cb36:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800cb38:	2300      	movs	r3, #0
    }
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3770      	adds	r7, #112	@ 0x70
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb44:	08025be4 	.word	0x08025be4
 800cb48:	08025c1c 	.word	0x08025c1c
 800cb4c:	08025c28 	.word	0x08025c28
 800cb50:	08025c58 	.word	0x08025c58
 800cb54:	08025c60 	.word	0x08025c60
 800cb58:	08025c68 	.word	0x08025c68
 800cb5c:	08025c8c 	.word	0x08025c8c
 800cb60:	2000119c 	.word	0x2000119c

0800cb64 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800cb64:	b5b0      	push	{r4, r5, r7, lr}
 800cb66:	b088      	sub	sp, #32
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800cb6c:	2356      	movs	r3, #86	@ 0x56
 800cb6e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800cb70:	2100      	movs	r1, #0
 800cb72:	69f8      	ldr	r0, [r7, #28]
 800cb74:	f00a fede 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 800cb78:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800cb7a:	69bb      	ldr	r3, [r7, #24]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f000 80b1 	beq.w	800cce4 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cb82:	69bb      	ldr	r3, [r7, #24]
 800cb84:	3314      	adds	r3, #20
 800cb86:	2210      	movs	r2, #16
 800cb88:	2100      	movs	r1, #0
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f016 f90b 	bl	8022da6 <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	687a      	ldr	r2, [r7, #4]
 800cb94:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cb9c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d104      	bne.n	800cbae <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800cba4:	f240 419e 	movw	r1, #1182	@ 0x49e
 800cba8:	4850      	ldr	r0, [pc, #320]	@ (800ccec <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800cbaa:	f7f4 fef5 	bl	8001998 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800cbae:	69bb      	ldr	r3, [r7, #24]
 800cbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbb2:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	3336      	adds	r3, #54	@ 0x36
 800cbb8:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	4a4c      	ldr	r2, [pc, #304]	@ (800ccf0 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800cbbe:	6810      	ldr	r0, [r2, #0]
 800cbc0:	6018      	str	r0, [r3, #0]
 800cbc2:	8892      	ldrh	r2, [r2, #4]
 800cbc4:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	1d98      	adds	r0, r3, #6
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	33e8      	adds	r3, #232	@ 0xe8
 800cbce:	2206      	movs	r2, #6
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	f015 ffdb 	bl	8022b8c <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cbde:	731a      	strb	r2, [r3, #12]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cbe6:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800cbe8:	693b      	ldr	r3, [r7, #16]
 800cbea:	2260      	movs	r2, #96	@ 0x60
 800cbec:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	2200      	movs	r2, #0
 800cbf8:	741a      	strb	r2, [r3, #16]
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	2200      	movs	r2, #0
 800cc02:	749a      	strb	r2, [r3, #18]
 800cc04:	2200      	movs	r2, #0
 800cc06:	f042 0220 	orr.w	r2, r2, #32
 800cc0a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	223a      	movs	r2, #58	@ 0x3a
 800cc10:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800cc12:	693b      	ldr	r3, [r7, #16]
 800cc14:	22ff      	movs	r2, #255	@ 0xff
 800cc16:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f103 0016 	add.w	r0, r3, #22
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	3338      	adds	r3, #56	@ 0x38
 800cc22:	2210      	movs	r2, #16
 800cc24:	4619      	mov	r1, r3
 800cc26:	f015 ffb1 	bl	8022b8c <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	3326      	adds	r3, #38	@ 0x26
 800cc2e:	4a31      	ldr	r2, [pc, #196]	@ (800ccf4 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800cc30:	461c      	mov	r4, r3
 800cc32:	4615      	mov	r5, r2
 800cc34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cc36:	6020      	str	r0, [r4, #0]
 800cc38:	6061      	str	r1, [r4, #4]
 800cc3a:	60a2      	str	r2, [r4, #8]
 800cc3c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800cc3e:	2320      	movs	r3, #32
 800cc40:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2288      	movs	r2, #136	@ 0x88
 800cc46:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	2200      	movs	r2, #0
 800cc52:	711a      	strb	r2, [r3, #4]
 800cc54:	2200      	movs	r2, #0
 800cc56:	715a      	strb	r2, [r3, #5]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	719a      	strb	r2, [r3, #6]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800cc62:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	685b      	ldr	r3, [r3, #4]
 800cc68:	061a      	lsls	r2, r3, #24
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	685b      	ldr	r3, [r3, #4]
 800cc6e:	021b      	lsls	r3, r3, #8
 800cc70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cc74:	431a      	orrs	r2, r3
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	0a1b      	lsrs	r3, r3, #8
 800cc7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cc80:	431a      	orrs	r2, r3
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	0e1b      	lsrs	r3, r3, #24
 800cc88:	431a      	orrs	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2202      	movs	r2, #2
 800cc92:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	2201      	movs	r2, #1
 800cc98:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f103 001a 	add.w	r0, r3, #26
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	33e8      	adds	r3, #232	@ 0xe8
 800cca4:	2206      	movs	r2, #6
 800cca6:	4619      	mov	r1, r3
 800cca8:	f015 ff70 	bl	8022b8c <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	22ff      	movs	r2, #255	@ 0xff
 800ccb0:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	f103 0008 	add.w	r0, r3, #8
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3338      	adds	r3, #56	@ 0x38
 800ccbc:	2210      	movs	r2, #16
 800ccbe:	4619      	mov	r1, r3
 800ccc0:	f015 ff64 	bl	8022b8c <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	709a      	strb	r2, [r3, #2]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	68db      	ldr	r3, [r3, #12]
 800ccdc:	2201      	movs	r2, #1
 800ccde:	69b9      	ldr	r1, [r7, #24]
 800cce0:	6978      	ldr	r0, [r7, #20]
 800cce2:	4798      	blx	r3
        }
    }
 800cce4:	bf00      	nop
 800cce6:	3720      	adds	r7, #32
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bdb0      	pop	{r4, r5, r7, pc}
 800ccec:	08025ca4 	.word	0x08025ca4
 800ccf0:	08027f24 	.word	0x08027f24
 800ccf4:	08027f14 	.word	0x08027f14

0800ccf8 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b090      	sub	sp, #64	@ 0x40
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
 800cd04:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800cd06:	2301      	movs	r3, #1
 800cd08:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d017      	beq.n	800cd40 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cd10:	2300      	movs	r3, #0
 800cd12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd14:	e010      	b.n	800cd38 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800cd16:	f107 0214 	add.w	r2, r7, #20
 800cd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd1c:	009b      	lsls	r3, r3, #2
 800cd1e:	4413      	add	r3, r2
 800cd20:	4618      	mov	r0, r3
 800cd22:	f7f4 ff03 	bl	8001b2c <xApplicationGetRandomNumber>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d102      	bne.n	800cd32 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800cd30:	e00d      	b.n	800cd4e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800cd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd34:	3301      	adds	r3, #1
 800cd36:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3a:	2b03      	cmp	r3, #3
 800cd3c:	ddeb      	ble.n	800cd16 <FreeRTOS_CreateIPv6Address+0x1e>
 800cd3e:	e006      	b.n	800cd4e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800cd40:	f107 0314 	add.w	r3, r7, #20
 800cd44:	2210      	movs	r2, #16
 800cd46:	2100      	movs	r1, #0
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f016 f82c 	bl	8022da6 <memset>
        }

        if( xResult == pdPASS )
 800cd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd50:	2b01      	cmp	r3, #1
 800cd52:	d167      	bne.n	800ce24 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d004      	beq.n	800cd64 <FreeRTOS_CreateIPv6Address+0x6c>
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	2b80      	cmp	r3, #128	@ 0x80
 800cd5e:	d801      	bhi.n	800cd64 <FreeRTOS_CreateIPv6Address+0x6c>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e000      	b.n	800cd66 <FreeRTOS_CreateIPv6Address+0x6e>
 800cd64:	2300      	movs	r3, #0
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d104      	bne.n	800cd74 <FreeRTOS_CreateIPv6Address+0x7c>
 800cd6a:	f240 5105 	movw	r1, #1285	@ 0x505
 800cd6e:	4830      	ldr	r0, [pc, #192]	@ (800ce30 <FreeRTOS_CreateIPv6Address+0x138>)
 800cd70:	f7f4 fe12 	bl	8001998 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b07      	cmp	r3, #7
 800cd78:	d907      	bls.n	800cd8a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800cd7a:	68f8      	ldr	r0, [r7, #12]
 800cd7c:	68b9      	ldr	r1, [r7, #8]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	3307      	adds	r3, #7
 800cd82:	08db      	lsrs	r3, r3, #3
 800cd84:	461a      	mov	r2, r3
 800cd86:	f015 ff01 	bl	8022b8c <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800cd8a:	f107 0314 	add.w	r3, r7, #20
 800cd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	08db      	lsrs	r3, r3, #3
 800cd94:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	f003 0307 	and.w	r3, r3, #7
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d034      	beq.n	800ce0a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f003 0307 	and.w	r3, r3, #7
 800cda6:	f1c3 0308 	rsb	r3, r3, #8
 800cdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800cdac:	2201      	movs	r2, #1
 800cdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800cdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	43db      	mvns	r3, r3
 800cdbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc6:	4413      	add	r3, r2
 800cdc8:	781a      	ldrb	r2, [r3, #0]
 800cdca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cdce:	4013      	ands	r3, r2
 800cdd0:	b2d9      	uxtb	r1, r3
 800cdd2:	68fa      	ldr	r2, [r7, #12]
 800cdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd6:	4413      	add	r3, r2
 800cdd8:	460a      	mov	r2, r1
 800cdda:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde0:	4413      	add	r3, r2
 800cde2:	781a      	ldrb	r2, [r3, #0]
 800cde4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cde6:	7819      	ldrb	r1, [r3, #0]
 800cde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	400b      	ands	r3, r1
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	4313      	orrs	r3, r2
 800cdf2:	b2d9      	uxtb	r1, r3
 800cdf4:	68fa      	ldr	r2, [r7, #12]
 800cdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf8:	4413      	add	r3, r2
 800cdfa:	460a      	mov	r2, r1
 800cdfc:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800cdfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ce00:	3301      	adds	r3, #1
 800ce02:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800ce04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce06:	3301      	adds	r3, #1
 800ce08:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0c:	2b0f      	cmp	r3, #15
 800ce0e:	d809      	bhi.n	800ce24 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800ce10:	68fa      	ldr	r2, [r7, #12]
 800ce12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce14:	18d0      	adds	r0, r2, r3
 800ce16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce18:	f1c3 0310 	rsb	r3, r3, #16
 800ce1c:	461a      	mov	r2, r3
 800ce1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce20:	f015 feb4 	bl	8022b8c <memcpy>
            }
        }

        return xResult;
 800ce24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ce26:	4618      	mov	r0, r3
 800ce28:	3740      	adds	r7, #64	@ 0x40
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
 800ce2e:	bf00      	nop
 800ce30:	08025ca4 	.word	0x08025ca4

0800ce34 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
 800ce3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f000 fe48 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800ce48:	60b8      	str	r0, [r7, #8]
 800ce4a:	e01a      	b.n	800ce82 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ce52:	2bfe      	cmp	r3, #254	@ 0xfe
 800ce54:	d110      	bne.n	800ce78 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800ce56:	68bb      	ldr	r3, [r7, #8]
 800ce58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ce5c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ce60:	2b80      	cmp	r3, #128	@ 0x80
 800ce62:	d109      	bne.n	800ce78 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ce64:	6838      	ldr	r0, [r7, #0]
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	3338      	adds	r3, #56	@ 0x38
 800ce6a:	2210      	movs	r2, #16
 800ce6c:	4619      	mov	r1, r3
 800ce6e:	f015 fe8d 	bl	8022b8c <memcpy>
                xResult = pdPASS;
 800ce72:	2301      	movs	r3, #1
 800ce74:	60fb      	str	r3, [r7, #12]
                break;
 800ce76:	e007      	b.n	800ce88 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ce78:	68b9      	ldr	r1, [r7, #8]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fe4e 	bl	800db1c <FreeRTOS_NextEndPoint>
 800ce80:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d1e1      	bne.n	800ce4c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800ce88:	68fb      	ldr	r3, [r7, #12]
    }
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3710      	adds	r7, #16
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}
	...

0800ce94 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800ce94:	b5b0      	push	{r4, r5, r7, lr}
 800ce96:	b090      	sub	sp, #64	@ 0x40
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cea2:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800cea4:	233e      	movs	r3, #62	@ 0x3e
 800cea6:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800ceac:	2300      	movs	r3, #0
 800ceae:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d103      	bne.n	800cebe <vNDSendRouterSolicitation+0x2a>
 800ceb6:	218f      	movs	r1, #143	@ 0x8f
 800ceb8:	4852      	ldr	r0, [pc, #328]	@ (800d004 <vNDSendRouterSolicitation+0x170>)
 800ceba:	f7f4 fd6d 	bl	8001998 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800cebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cec0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cec4:	f003 0304 	and.w	r3, r3, #4
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d103      	bne.n	800ced6 <vNDSendRouterSolicitation+0x42>
 800cece:	2190      	movs	r1, #144	@ 0x90
 800ced0:	484c      	ldr	r0, [pc, #304]	@ (800d004 <vNDSendRouterSolicitation+0x170>)
 800ced2:	f7f4 fd61 	bl	8001998 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800ced6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ced8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cedc:	f107 020c 	add.w	r2, r7, #12
 800cee0:	4611      	mov	r1, r2
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7ff ffa6 	bl	800ce34 <xGetLinkLocalAddress>
 800cee8:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800ceea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d10a      	bne.n	800cf06 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800cef0:	4845      	ldr	r0, [pc, #276]	@ (800d008 <vNDSendRouterSolicitation+0x174>)
 800cef2:	f015 fc2f 	bl	8022754 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800cef6:	f107 030c 	add.w	r3, r7, #12
 800cefa:	2210      	movs	r2, #16
 800cefc:	2100      	movs	r1, #0
 800cefe:	4618      	mov	r0, r3
 800cf00:	f015 ff51 	bl	8022da6 <memset>
 800cf04:	e005      	b.n	800cf12 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800cf06:	f107 030c 	add.w	r3, r7, #12
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	483f      	ldr	r0, [pc, #252]	@ (800d00c <vNDSendRouterSolicitation+0x178>)
 800cf0e:	f015 fc21 	bl	8022754 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800cf12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cf16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d909      	bls.n	800cf30 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800cf1c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800cf1e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf20:	f7fd fcf4 	bl	800a90c <pxDuplicateNetworkBufferWithDescriptor>
 800cf24:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800cf26:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cf28:	f00a fd6c 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800cf30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d062      	beq.n	800cffc <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800cf36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf3a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3e:	3336      	adds	r3, #54	@ 0x36
 800cf40:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800cf42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cf44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cf46:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800cf48:	f107 031c 	add.w	r3, r7, #28
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	4619      	mov	r1, r3
 800cf50:	6838      	ldr	r0, [r7, #0]
 800cf52:	f7ff f87b 	bl	800c04c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cf56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf58:	3306      	adds	r3, #6
 800cf5a:	461a      	mov	r2, r3
 800cf5c:	f107 031c 	add.w	r3, r7, #28
 800cf60:	6818      	ldr	r0, [r3, #0]
 800cf62:	6010      	str	r0, [r2, #0]
 800cf64:	889b      	ldrh	r3, [r3, #4]
 800cf66:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cf68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf6c:	33e8      	adds	r3, #232	@ 0xe8
 800cf6e:	2206      	movs	r2, #6
 800cf70:	4619      	mov	r1, r3
 800cf72:	f015 fe0b 	bl	8022b8c <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800cf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800cf7e:	731a      	strb	r2, [r3, #12]
 800cf80:	2200      	movs	r2, #0
 800cf82:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800cf86:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800cf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf8a:	2260      	movs	r2, #96	@ 0x60
 800cf8c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800cf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf90:	2200      	movs	r2, #0
 800cf92:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800cf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf96:	2200      	movs	r2, #0
 800cf98:	741a      	strb	r2, [r3, #16]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800cf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	749a      	strb	r2, [r3, #18]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	f042 0208 	orr.w	r2, r2, #8
 800cfaa:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800cfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfae:	223a      	movs	r2, #58	@ 0x3a
 800cfb0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800cfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfb4:	22ff      	movs	r2, #255	@ 0xff
 800cfb6:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfba:	3316      	adds	r3, #22
 800cfbc:	461d      	mov	r5, r3
 800cfbe:	f107 040c 	add.w	r4, r7, #12
 800cfc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cfc4:	6028      	str	r0, [r5, #0]
 800cfc6:	6069      	str	r1, [r5, #4]
 800cfc8:	60aa      	str	r2, [r5, #8]
 800cfca:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cfcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfce:	3326      	adds	r3, #38	@ 0x26
 800cfd0:	6839      	ldr	r1, [r7, #0]
 800cfd2:	2210      	movs	r2, #16
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f015 fdd9 	bl	8022b8c <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800cfda:	2208      	movs	r2, #8
 800cfdc:	2100      	movs	r1, #0
 800cfde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cfe0:	f015 fee1 	bl	8022da6 <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800cfe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfe6:	2285      	movs	r2, #133	@ 0x85
 800cfe8:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800cfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cfec:	2200      	movs	r2, #0
 800cfee:	709a      	strb	r2, [r3, #2]
 800cff0:	2200      	movs	r2, #0
 800cff2:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800cff4:	2101      	movs	r1, #1
 800cff6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800cff8:	f7fd f8d6 	bl	800a1a8 <vReturnEthernetFrame>
        }
    }
 800cffc:	bf00      	nop
 800cffe:	3740      	adds	r7, #64	@ 0x40
 800d000:	46bd      	mov	sp, r7
 800d002:	bdb0      	pop	{r4, r5, r7, pc}
 800d004:	08025cd0 	.word	0x08025cd0
 800d008:	08025cfc 	.word	0x08025cfc
 800d00c:	08025d24 	.word	0x08025d24

0800d010 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d010:	b580      	push	{r7, lr}
 800d012:	b086      	sub	sp, #24
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d01c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d022:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	3336      	adds	r3, #54	@ 0x36
 800d028:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800d02a:	6938      	ldr	r0, [r7, #16]
 800d02c:	f000 fd54 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800d030:	6178      	str	r0, [r7, #20]
 800d032:	e028      	b.n	800d086 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d03a:	f003 0302 	and.w	r3, r3, #2
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	2b00      	cmp	r3, #0
 800d042:	d01b      	beq.n	800d07c <vReceiveNA+0x6c>
 800d044:	697b      	ldr	r3, [r7, #20]
 800d046:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d116      	bne.n	800d07c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800d04e:	697b      	ldr	r3, [r7, #20]
 800d050:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d054:	68bb      	ldr	r3, [r7, #8]
 800d056:	3308      	adds	r3, #8
 800d058:	2210      	movs	r2, #16
 800d05a:	4619      	mov	r1, r3
 800d05c:	f016 fd2b 	bl	8023ab6 <memcmp>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10a      	bne.n	800d07c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d066:	697a      	ldr	r2, [r7, #20]
 800d068:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d06c:	f043 0302 	orr.w	r3, r3, #2
 800d070:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800d074:	2164      	movs	r1, #100	@ 0x64
 800d076:	6978      	ldr	r0, [r7, #20]
 800d078:	f7fd fb3e 	bl	800a6f8 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800d07c:	6979      	ldr	r1, [r7, #20]
 800d07e:	6938      	ldr	r0, [r7, #16]
 800d080:	f000 fd4c 	bl	800db1c <FreeRTOS_NextEndPoint>
 800d084:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d1d3      	bne.n	800d034 <vReceiveNA+0x24>
                }
            }
        }
    }
 800d08c:	bf00      	nop
 800d08e:	bf00      	nop
 800d090:	3718      	adds	r7, #24
 800d092:	46bd      	mov	sp, r7
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d09a:	b091      	sub	sp, #68	@ 0x44
 800d09c:	af04      	add	r7, sp, #16
 800d09e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d0a4:	2310      	movs	r3, #16
 800d0a6:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0aa:	3336      	adds	r3, #54	@ 0x36
 800d0ac:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d0b2:	6a3b      	ldr	r3, [r7, #32]
 800d0b4:	1ad3      	subs	r3, r2, r3
 800d0b6:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d0bc:	6a3b      	ldr	r3, [r7, #32]
 800d0be:	4413      	add	r3, r2
 800d0c0:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800d0c6:	e0b2      	b.n	800d22e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800d0c8:	69ba      	ldr	r2, [r7, #24]
 800d0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0cc:	4413      	add	r3, r2
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800d0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d0d4:	3301      	adds	r3, #1
 800d0d6:	69ba      	ldr	r2, [r7, #24]
 800d0d8:	4413      	add	r3, r2
 800d0da:	781b      	ldrb	r3, [r3, #0]
 800d0dc:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	00db      	lsls	r3, r3, #3
 800d0e2:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d103      	bne.n	800d0f2 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800d0ea:	4856      	ldr	r0, [pc, #344]	@ (800d244 <vReceiveRA_ReadReply+0x1ac>)
 800d0ec:	f015 fb32 	bl	8022754 <lUDPLoggingPrintf>
                break;
 800d0f0:	e0a3      	b.n	800d23a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800d0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	69fa      	ldr	r2, [r7, #28]
 800d0fa:	429a      	cmp	r2, r3
 800d0fc:	d208      	bcs.n	800d110 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800d0fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	4413      	add	r3, r2
 800d104:	69fa      	ldr	r2, [r7, #28]
 800d106:	4619      	mov	r1, r3
 800d108:	484f      	ldr	r0, [pc, #316]	@ (800d248 <vReceiveRA_ReadReply+0x1b0>)
 800d10a:	f015 fb23 	bl	8022754 <lUDPLoggingPrintf>
                break;
 800d10e:	e094      	b.n	800d23a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800d110:	7dfb      	ldrb	r3, [r7, #23]
 800d112:	3b01      	subs	r3, #1
 800d114:	2b04      	cmp	r3, #4
 800d116:	d87f      	bhi.n	800d218 <vReceiveRA_ReadReply+0x180>
 800d118:	a201      	add	r2, pc, #4	@ (adr r2, 800d120 <vReceiveRA_ReadReply+0x88>)
 800d11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d11e:	bf00      	nop
 800d120:	0800d135 	.word	0x0800d135
 800d124:	0800d225 	.word	0x0800d225
 800d128:	0800d18f 	.word	0x0800d18f
 800d12c:	0800d225 	.word	0x0800d225
 800d130:	0800d1ff 	.word	0x0800d1ff
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800d134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d136:	3302      	adds	r3, #2
 800d138:	69ba      	ldr	r2, [r7, #24]
 800d13a:	4413      	add	r3, r2
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	461c      	mov	r4, r3
 800d140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d142:	3303      	adds	r3, #3
 800d144:	69ba      	ldr	r2, [r7, #24]
 800d146:	4413      	add	r3, r2
 800d148:	781b      	ldrb	r3, [r3, #0]
 800d14a:	461d      	mov	r5, r3
 800d14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d14e:	3304      	adds	r3, #4
 800d150:	69ba      	ldr	r2, [r7, #24]
 800d152:	4413      	add	r3, r2
 800d154:	781b      	ldrb	r3, [r3, #0]
 800d156:	461e      	mov	r6, r3
 800d158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15a:	3305      	adds	r3, #5
 800d15c:	69ba      	ldr	r2, [r7, #24]
 800d15e:	4413      	add	r3, r2
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	4619      	mov	r1, r3
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	3306      	adds	r3, #6
 800d168:	69ba      	ldr	r2, [r7, #24]
 800d16a:	4413      	add	r3, r2
 800d16c:	781b      	ldrb	r3, [r3, #0]
 800d16e:	4618      	mov	r0, r3
 800d170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d172:	3307      	adds	r3, #7
 800d174:	69ba      	ldr	r2, [r7, #24]
 800d176:	4413      	add	r3, r2
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	9302      	str	r3, [sp, #8]
 800d17c:	9001      	str	r0, [sp, #4]
 800d17e:	9100      	str	r1, [sp, #0]
 800d180:	4633      	mov	r3, r6
 800d182:	462a      	mov	r2, r5
 800d184:	4621      	mov	r1, r4
 800d186:	4831      	ldr	r0, [pc, #196]	@ (800d24c <vReceiveRA_ReadReply+0x1b4>)
 800d188:	f015 fae4 	bl	8022754 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800d18c:	e04b      	b.n	800d226 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800d18e:	69ba      	ldr	r2, [r7, #24]
 800d190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d192:	4413      	add	r3, r2
 800d194:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800d196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d198:	789b      	ldrb	r3, [r3, #2]
 800d19a:	4618      	mov	r0, r3
 800d19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d19e:	685b      	ldr	r3, [r3, #4]
 800d1a0:	061a      	lsls	r2, r3, #24
 800d1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	021b      	lsls	r3, r3, #8
 800d1a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d1ac:	431a      	orrs	r2, r3
 800d1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	0a1b      	lsrs	r3, r3, #8
 800d1b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d1b8:	431a      	orrs	r2, r3
 800d1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1bc:	685b      	ldr	r3, [r3, #4]
 800d1be:	0e1b      	lsrs	r3, r3, #24
 800d1c0:	ea42 0103 	orr.w	r1, r2, r3
 800d1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	061a      	lsls	r2, r3, #24
 800d1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1cc:	689b      	ldr	r3, [r3, #8]
 800d1ce:	021b      	lsls	r3, r3, #8
 800d1d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d1d4:	431a      	orrs	r2, r3
 800d1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d8:	689b      	ldr	r3, [r3, #8]
 800d1da:	0a1b      	lsrs	r3, r3, #8
 800d1dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d1e0:	431a      	orrs	r2, r3
 800d1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	0e1b      	lsrs	r3, r3, #24
 800d1e8:	431a      	orrs	r2, r3
 800d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1ec:	3310      	adds	r3, #16
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	460a      	mov	r2, r1
 800d1f4:	4601      	mov	r1, r0
 800d1f6:	4816      	ldr	r0, [pc, #88]	@ (800d250 <vReceiveRA_ReadReply+0x1b8>)
 800d1f8:	f015 faac 	bl	8022754 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800d1fc:	e013      	b.n	800d226 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800d1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d200:	3304      	adds	r3, #4
 800d202:	69ba      	ldr	r2, [r7, #24]
 800d204:	4413      	add	r3, r2
 800d206:	4618      	mov	r0, r3
 800d208:	f7fd fe60 	bl	800aecc <ulChar2u32>
 800d20c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800d20e:	68b9      	ldr	r1, [r7, #8]
 800d210:	4810      	ldr	r0, [pc, #64]	@ (800d254 <vReceiveRA_ReadReply+0x1bc>)
 800d212:	f015 fa9f 	bl	8022754 <lUDPLoggingPrintf>
                   }
                   break;
 800d216:	e006      	b.n	800d226 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800d218:	7dfb      	ldrb	r3, [r7, #23]
 800d21a:	4619      	mov	r1, r3
 800d21c:	480e      	ldr	r0, [pc, #56]	@ (800d258 <vReceiveRA_ReadReply+0x1c0>)
 800d21e:	f015 fa99 	bl	8022754 <lUDPLoggingPrintf>
                    break;
 800d222:	e000      	b.n	800d226 <vReceiveRA_ReadReply+0x18e>
                    break;
 800d224:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800d226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	4413      	add	r3, r2
 800d22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800d22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d230:	3301      	adds	r3, #1
 800d232:	69fa      	ldr	r2, [r7, #28]
 800d234:	429a      	cmp	r2, r3
 800d236:	f63f af47 	bhi.w	800d0c8 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800d23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800d23c:	4618      	mov	r0, r3
 800d23e:	3734      	adds	r7, #52	@ 0x34
 800d240:	46bd      	mov	sp, r7
 800d242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d244:	08025d38 	.word	0x08025d38
 800d248:	08025d6c 	.word	0x08025d6c
 800d24c:	08025d90 	.word	0x08025d90
 800d250:	08025dbc 	.word	0x08025dbc
 800d254:	08025de4 	.word	0x08025de4
 800d258:	08025df4 	.word	0x08025df4

0800d25c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800d25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d25e:	b08d      	sub	sp, #52	@ 0x34
 800d260:	af04      	add	r7, sp, #16
 800d262:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d268:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800d26a:	2300      	movs	r3, #0
 800d26c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800d26e:	2310      	movs	r3, #16
 800d270:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800d272:	693b      	ldr	r3, [r7, #16]
 800d274:	3336      	adds	r3, #54	@ 0x36
 800d276:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	429a      	cmp	r2, r3
 800d280:	d903      	bls.n	800d28a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800d282:	485b      	ldr	r0, [pc, #364]	@ (800d3f0 <vReceiveRA+0x194>)
 800d284:	f015 fa66 	bl	8022754 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800d288:	e0ae      	b.n	800d3e8 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	3336      	adds	r3, #54	@ 0x36
 800d28e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	461c      	mov	r4, r3
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	785b      	ldrb	r3, [r3, #1]
 800d29a:	461d      	mov	r5, r3
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	885b      	ldrh	r3, [r3, #2]
 800d2a0:	b29b      	uxth	r3, r3
 800d2a2:	021b      	lsls	r3, r3, #8
 800d2a4:	b21a      	sxth	r2, r3
 800d2a6:	68bb      	ldr	r3, [r7, #8]
 800d2a8:	885b      	ldrh	r3, [r3, #2]
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	0a1b      	lsrs	r3, r3, #8
 800d2ae:	b29b      	uxth	r3, r3
 800d2b0:	b21b      	sxth	r3, r3
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	b21b      	sxth	r3, r3
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	461e      	mov	r6, r3
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	791b      	ldrb	r3, [r3, #4]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	795b      	ldrb	r3, [r3, #5]
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	88db      	ldrh	r3, [r3, #6]
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	021b      	lsls	r3, r3, #8
 800d2ce:	b21a      	sxth	r2, r3
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	88db      	ldrh	r3, [r3, #6]
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	0a1b      	lsrs	r3, r3, #8
 800d2d8:	b29b      	uxth	r3, r3
 800d2da:	b21b      	sxth	r3, r3
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	b21b      	sxth	r3, r3
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	9302      	str	r3, [sp, #8]
 800d2e4:	9001      	str	r0, [sp, #4]
 800d2e6:	9100      	str	r1, [sp, #0]
 800d2e8:	4633      	mov	r3, r6
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	4621      	mov	r1, r4
 800d2ee:	4841      	ldr	r0, [pc, #260]	@ (800d3f4 <vReceiveRA+0x198>)
 800d2f0:	f015 fa30 	bl	8022754 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	88db      	ldrh	r3, [r3, #6]
 800d2f8:	b29b      	uxth	r3, r3
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d074      	beq.n	800d3e8 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f7ff feca 	bl	800d098 <vReceiveRA_ReadReply>
 800d304:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d104      	bne.n	800d318 <vReceiveRA+0xbc>
 800d30e:	f240 118b 	movw	r1, #395	@ 0x18b
 800d312:	4839      	ldr	r0, [pc, #228]	@ (800d3f8 <vReceiveRA+0x19c>)
 800d314:	f7f4 fb40 	bl	8001998 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d064      	beq.n	800d3e8 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d322:	4618      	mov	r0, r3
 800d324:	f000 fbd8 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800d328:	61f8      	str	r0, [r7, #28]
 800d32a:	e05a      	b.n	800d3e2 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d332:	f003 0302 	and.w	r3, r3, #2
 800d336:	b2db      	uxtb	r3, r3
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d04b      	beq.n	800d3d4 <vReceiveRA+0x178>
 800d33c:	69fb      	ldr	r3, [r7, #28]
 800d33e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d342:	2b01      	cmp	r3, #1
 800d344:	d146      	bne.n	800d3d4 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	789b      	ldrb	r3, [r3, #2]
 800d34a:	461a      	mov	r2, r3
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	3310      	adds	r3, #16
 800d35a:	2210      	movs	r2, #16
 800d35c:	4619      	mov	r1, r3
 800d35e:	f015 fc15 	bl	8022b8c <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	3316      	adds	r3, #22
 800d36c:	2210      	movs	r2, #16
 800d36e:	4619      	mov	r1, r3
 800d370:	f015 fc0c 	bl	8022b8c <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800d374:	69fa      	ldr	r2, [r7, #28]
 800d376:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d37a:	f043 0301 	orr.w	r3, r3, #1
 800d37e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800d382:	69fb      	ldr	r3, [r7, #28]
 800d384:	2200      	movs	r2, #0
 800d386:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	689b      	ldr	r3, [r3, #8]
 800d38e:	061a      	lsls	r2, r3, #24
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	689b      	ldr	r3, [r3, #8]
 800d394:	021b      	lsls	r3, r3, #8
 800d396:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d39a:	431a      	orrs	r2, r3
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	689b      	ldr	r3, [r3, #8]
 800d3a0:	0a1b      	lsrs	r3, r3, #8
 800d3a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d3a6:	431a      	orrs	r2, r3
 800d3a8:	697b      	ldr	r3, [r7, #20]
 800d3aa:	689b      	ldr	r3, [r3, #8]
 800d3ac:	0e1b      	lsrs	r3, r3, #24
 800d3ae:	431a      	orrs	r2, r3
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d3b6:	69fa      	ldr	r2, [r7, #28]
 800d3b8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d3bc:	f043 0302 	orr.w	r3, r3, #2
 800d3c0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d3c4:	69fb      	ldr	r3, [r7, #28]
 800d3c6:	2202      	movs	r2, #2
 800d3c8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800d3cc:	69f9      	ldr	r1, [r7, #28]
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	f000 f9b6 	bl	800d740 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d8:	69f9      	ldr	r1, [r7, #28]
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f000 fb9e 	bl	800db1c <FreeRTOS_NextEndPoint>
 800d3e0:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d1a1      	bne.n	800d32c <vReceiveRA+0xd0>
    }
 800d3e8:	bf00      	nop
 800d3ea:	3724      	adds	r7, #36	@ 0x24
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3f0:	08025e18 	.word	0x08025e18
 800d3f4:	08025e48 	.word	0x08025e48
 800d3f8:	08025cd0 	.word	0x08025cd0

0800d3fc <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800d3fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d400:	b088      	sub	sp, #32
 800d402:	af00      	add	r7, sp, #0
 800d404:	6178      	str	r0, [r7, #20]
 800d406:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d408:	6939      	ldr	r1, [r7, #16]
 800d40a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800d40c:	6979      	ldr	r1, [r7, #20]
 800d40e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d412:	2901      	cmp	r1, #1
 800d414:	d133      	bne.n	800d47e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d41c:	1c5a      	adds	r2, r3, #1
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d42a:	2b02      	cmp	r3, #2
 800d42c:	d804      	bhi.n	800d438 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d42e:	697b      	ldr	r3, [r7, #20]
 800d430:	2200      	movs	r2, #0
 800d432:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d436:	e0bf      	b.n	800d5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800d438:	4862      	ldr	r0, [pc, #392]	@ (800d5c4 <xRAProcess_HandleWaitStates+0x1c8>)
 800d43a:	f015 f98b 	bl	8022754 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	3390      	adds	r3, #144	@ 0x90
 800d448:	2258      	movs	r2, #88	@ 0x58
 800d44a:	4619      	mov	r1, r3
 800d44c:	f015 fb9e 	bl	8022b8c <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800d450:	697a      	ldr	r2, [r7, #20]
 800d452:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d456:	f36f 0300 	bfc	r3, #0, #1
 800d45a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d45e:	697b      	ldr	r3, [r7, #20]
 800d460:	2200      	movs	r2, #0
 800d462:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d46c:	f043 0302 	orr.w	r3, r3, #2
 800d470:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2202      	movs	r2, #2
 800d478:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800d47c:	e09c      	b.n	800d5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800d47e:	6979      	ldr	r1, [r7, #20]
 800d480:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800d484:	2903      	cmp	r1, #3
 800d486:	f040 8097 	bne.w	800d5b8 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800d48a:	6979      	ldr	r1, [r7, #20]
 800d48c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d490:	f001 0102 	and.w	r1, r1, #2
 800d494:	b2c9      	uxtb	r1, r1
 800d496:	2900      	cmp	r1, #0
 800d498:	d00b      	beq.n	800d4b2 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800d49a:	697b      	ldr	r3, [r7, #20]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d4a2:	697b      	ldr	r3, [r7, #20]
 800d4a4:	2202      	movs	r2, #2
 800d4a6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d4aa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d4ae:	61fb      	str	r3, [r7, #28]
 800d4b0:	e082      	b.n	800d5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800d4b2:	6979      	ldr	r1, [r7, #20]
 800d4b4:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800d4b8:	2902      	cmp	r1, #2
 800d4ba:	d80e      	bhi.n	800d4da <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d4c2:	1c5a      	adds	r2, r3, #1
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2202      	movs	r2, #2
 800d4ce:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800d4d2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800d4d6:	61fb      	str	r3, [r7, #28]
 800d4d8:	e06e      	b.n	800d5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800d4da:	6979      	ldr	r1, [r7, #20]
 800d4dc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800d4e0:	f001 0101 	and.w	r1, r1, #1
 800d4e4:	b2c9      	uxtb	r1, r1
 800d4e6:	2900      	cmp	r1, #0
 800d4e8:	d057      	beq.n	800d59a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800d4ea:	6979      	ldr	r1, [r7, #20]
 800d4ec:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	4688      	mov	r8, r1
 800d4f4:	4681      	mov	r9, r0
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	4649      	mov	r1, r9
 800d4fa:	f04f 0a00 	mov.w	sl, #0
 800d4fe:	f04f 0b00 	mov.w	fp, #0
 800d502:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800d506:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800d50a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800d50e:	4650      	mov	r0, sl
 800d510:	4659      	mov	r1, fp
 800d512:	ebb0 0208 	subs.w	r2, r0, r8
 800d516:	eb61 0309 	sbc.w	r3, r1, r9
 800d51a:	f04f 0000 	mov.w	r0, #0
 800d51e:	f04f 0100 	mov.w	r1, #0
 800d522:	0259      	lsls	r1, r3, #9
 800d524:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800d528:	0250      	lsls	r0, r2, #9
 800d52a:	4602      	mov	r2, r0
 800d52c:	460b      	mov	r3, r1
 800d52e:	eb12 0408 	adds.w	r4, r2, r8
 800d532:	eb43 0509 	adc.w	r5, r3, r9
 800d536:	f04f 0200 	mov.w	r2, #0
 800d53a:	f04f 0300 	mov.w	r3, #0
 800d53e:	01ab      	lsls	r3, r5, #6
 800d540:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800d544:	01a2      	lsls	r2, r4, #6
 800d546:	1b11      	subs	r1, r2, r4
 800d548:	6039      	str	r1, [r7, #0]
 800d54a:	eb63 0305 	sbc.w	r3, r3, r5
 800d54e:	607b      	str	r3, [r7, #4]
 800d550:	e9d7 1200 	ldrd	r1, r2, [r7]
 800d554:	460b      	mov	r3, r1
 800d556:	eb13 0308 	adds.w	r3, r3, r8
 800d55a:	60bb      	str	r3, [r7, #8]
 800d55c:	4613      	mov	r3, r2
 800d55e:	eb43 0309 	adc.w	r3, r3, r9
 800d562:	60fb      	str	r3, [r7, #12]
 800d564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d568:	f04f 0300 	mov.w	r3, #0
 800d56c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d570:	f7f2 ff1e 	bl	80003b0 <__aeabi_uldivmod>
 800d574:	4602      	mov	r2, r0
 800d576:	460b      	mov	r3, r1
 800d578:	4613      	mov	r3, r2
 800d57a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800d57c:	697b      	ldr	r3, [r7, #20]
 800d57e:	2204      	movs	r2, #4
 800d580:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d58a:	697b      	ldr	r3, [r7, #20]
 800d58c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800d590:	461a      	mov	r2, r3
 800d592:	480d      	ldr	r0, [pc, #52]	@ (800d5c8 <xRAProcess_HandleWaitStates+0x1cc>)
 800d594:	f015 f8de 	bl	8022754 <lUDPLoggingPrintf>
 800d598:	e00b      	b.n	800d5b2 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2206      	movs	r2, #6
 800d59e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	3338      	adds	r3, #56	@ 0x38
 800d5a6:	4619      	mov	r1, r3
 800d5a8:	4808      	ldr	r0, [pc, #32]	@ (800d5cc <xRAProcess_HandleWaitStates+0x1d0>)
 800d5aa:	f015 f8d3 	bl	8022754 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800d5b2:	6978      	ldr	r0, [r7, #20]
 800d5b4:	f7fc fa08 	bl	80099c8 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800d5b8:	69fb      	ldr	r3, [r7, #28]
    }
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	3720      	adds	r7, #32
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5c4:	08025e8c 	.word	0x08025e8c
 800d5c8:	08025eb4 	.word	0x08025eb4
 800d5cc:	08025ef4 	.word	0x08025ef4

0800d5d0 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08c      	sub	sp, #48	@ 0x30
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d5e4:	2b06      	cmp	r3, #6
 800d5e6:	f200 808c 	bhi.w	800d702 <xRAProcess_HandleOtherStates+0x132>
 800d5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f0 <xRAProcess_HandleOtherStates+0x20>)
 800d5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f0:	0800d60d 	.word	0x0800d60d
 800d5f4:	0800d703 	.word	0x0800d703
 800d5f8:	0800d66f 	.word	0x0800d66f
 800d5fc:	0800d703 	.word	0x0800d703
 800d600:	0800d6eb 	.word	0x0800d6eb
 800d604:	0800d6f5 	.word	0x0800d6f5
 800d608:	0800d703 	.word	0x0800d703
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800d60c:	f107 030c 	add.w	r3, r7, #12
 800d610:	2210      	movs	r2, #16
 800d612:	2100      	movs	r1, #0
 800d614:	4618      	mov	r0, r3
 800d616:	f015 fbc6 	bl	8022da6 <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800d61a:	23ff      	movs	r3, #255	@ 0xff
 800d61c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800d61e:	2302      	movs	r3, #2
 800d620:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800d622:	2302      	movs	r3, #2
 800d624:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d626:	233e      	movs	r3, #62	@ 0x3e
 800d628:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d62a:	2100      	movs	r1, #0
 800d62c:	6a38      	ldr	r0, [r7, #32]
 800d62e:	f00a f981 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 800d632:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d008      	beq.n	800d64c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800d640:	f107 030c 	add.w	r3, r7, #12
 800d644:	4619      	mov	r1, r3
 800d646:	69f8      	ldr	r0, [r7, #28]
 800d648:	f7ff fc24 	bl	800ce94 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d652:	3301      	adds	r3, #1
 800d654:	2203      	movs	r2, #3
 800d656:	4619      	mov	r1, r3
 800d658:	482d      	ldr	r0, [pc, #180]	@ (800d710 <xRAProcess_HandleOtherStates+0x140>)
 800d65a:	f015 f87b 	bl	8022754 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800d65e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d662:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d66c:	e04a      	b.n	800d704 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d674:	f003 0302 	and.w	r3, r3, #2
 800d678:	b2db      	uxtb	r3, r3
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d014      	beq.n	800d6a8 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800d67e:	687a      	ldr	r2, [r7, #4]
 800d680:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d684:	f36f 0341 	bfc	r3, #1, #1
 800d688:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d69c:	2301      	movs	r3, #1
 800d69e:	f7ff fb2b 	bl	800ccf8 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800d6a2:	481c      	ldr	r0, [pc, #112]	@ (800d714 <xRAProcess_HandleOtherStates+0x144>)
 800d6a4:	f015 f856 	bl	8022754 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	3338      	adds	r3, #56	@ 0x38
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	481a      	ldr	r0, [pc, #104]	@ (800d718 <xRAProcess_HandleOtherStates+0x148>)
 800d6b0:	f015 f850 	bl	8022754 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800d6b4:	2356      	movs	r3, #86	@ 0x56
 800d6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d6b8:	2100      	movs	r1, #0
 800d6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d6bc:	f00a f93a 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 800d6c0:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800d6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d008      	beq.n	800d6da <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ca:	687a      	ldr	r2, [r7, #4]
 800d6cc:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3338      	adds	r3, #56	@ 0x38
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d6d6:	f7fe ff25 	bl	800c524 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d6da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2203      	movs	r2, #3
 800d6e4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d6e8:	e00c      	b.n	800d704 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2205      	movs	r2, #5
 800d6ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800d6f2:	e007      	b.n	800d704 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f811 	bl	800d71c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d6fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800d700:	e000      	b.n	800d704 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800d702:	bf00      	nop
        }

        return uxNewReloadTime;
 800d704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800d706:	4618      	mov	r0, r3
 800d708:	3730      	adds	r7, #48	@ 0x30
 800d70a:	46bd      	mov	sp, r7
 800d70c:	bd80      	pop	{r7, pc}
 800d70e:	bf00      	nop
 800d710:	08025f30 	.word	0x08025f30
 800d714:	08025f64 	.word	0x08025f64
 800d718:	08025f88 	.word	0x08025f88

0800d71c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800d71c:	b480      	push	{r7}
 800d71e:	b083      	sub	sp, #12
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	2200      	movs	r2, #0
 800d730:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800d734:	bf00      	nop
 800d736:	370c      	adds	r7, #12
 800d738:	46bd      	mov	sp, r7
 800d73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73e:	4770      	bx	lr

0800d740 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800d740:	b590      	push	{r4, r7, lr}
 800d742:	b089      	sub	sp, #36	@ 0x24
 800d744:	af04      	add	r7, sp, #16
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800d74a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d74e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d104      	bne.n	800d760 <vRAProcess+0x20>
 800d756:	f240 2189 	movw	r1, #649	@ 0x289
 800d75a:	4828      	ldr	r0, [pc, #160]	@ (800d7fc <vRAProcess+0xbc>)
 800d75c:	f7f4 f91c 	bl	8001998 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800d760:	683b      	ldr	r3, [r7, #0]
 800d762:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d766:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800d76e:	6838      	ldr	r0, [r7, #0]
 800d770:	f7ff ffd4 	bl	800d71c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800d774:	68f9      	ldr	r1, [r7, #12]
 800d776:	6838      	ldr	r0, [r7, #0]
 800d778:	f7ff fe40 	bl	800d3fc <xRAProcess_HandleWaitStates>
 800d77c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800d77e:	68f9      	ldr	r1, [r7, #12]
 800d780:	6838      	ldr	r0, [r7, #0]
 800d782:	f7ff ff25 	bl	800d5d0 <xRAProcess_HandleOtherStates>
 800d786:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d794:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d798:	b2db      	uxtb	r3, r3
 800d79a:	461c      	mov	r4, r3
 800d79c:	683b      	ldr	r3, [r7, #0]
 800d79e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d7a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d7a6:	b2db      	uxtb	r3, r3
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	7afb      	ldrb	r3, [r7, #11]
 800d7ac:	683a      	ldr	r2, [r7, #0]
 800d7ae:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800d7b2:	9202      	str	r2, [sp, #8]
 800d7b4:	9301      	str	r3, [sp, #4]
 800d7b6:	9000      	str	r0, [sp, #0]
 800d7b8:	4623      	mov	r3, r4
 800d7ba:	460a      	mov	r2, r1
 800d7bc:	6879      	ldr	r1, [r7, #4]
 800d7be:	4810      	ldr	r0, [pc, #64]	@ (800d800 <vRAProcess+0xc0>)
 800d7c0:	f014 ffc8 	bl	8022754 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d00d      	beq.n	800d7e6 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	4a0d      	ldr	r2, [pc, #52]	@ (800d804 <vRAProcess+0xc4>)
 800d7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d7d2:	099b      	lsrs	r3, r3, #6
 800d7d4:	4619      	mov	r1, r3
 800d7d6:	480c      	ldr	r0, [pc, #48]	@ (800d808 <vRAProcess+0xc8>)
 800d7d8:	f014 ffbc 	bl	8022754 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800d7dc:	68f9      	ldr	r1, [r7, #12]
 800d7de:	6838      	ldr	r0, [r7, #0]
 800d7e0:	f7fc ff8a 	bl	800a6f8 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800d7e4:	e006      	b.n	800d7f4 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800d7e6:	4809      	ldr	r0, [pc, #36]	@ (800d80c <vRAProcess+0xcc>)
 800d7e8:	f014 ffb4 	bl	8022754 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	6838      	ldr	r0, [r7, #0]
 800d7f0:	f7fd f836 	bl	800a860 <vIPSetDHCP_RATimerEnableState>
    }
 800d7f4:	bf00      	nop
 800d7f6:	3714      	adds	r7, #20
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd90      	pop	{r4, r7, pc}
 800d7fc:	08025cd0 	.word	0x08025cd0
 800d800:	08025fb0 	.word	0x08025fb0
 800d804:	10624dd3 	.word	0x10624dd3
 800d808:	08025ffc 	.word	0x08025ffc
 800d80c:	08026014 	.word	0x08026014

0800d810 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af00      	add	r7, sp, #0
 800d816:	60f8      	str	r0, [r7, #12]
 800d818:	60b9      	str	r1, [r7, #8]
 800d81a:	607a      	str	r2, [r7, #4]
 800d81c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d002      	beq.n	800d82a <FreeRTOS_FillEndPoint+0x1a>
 800d824:	68bb      	ldr	r3, [r7, #8]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d105      	bne.n	800d836 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	68f9      	ldr	r1, [r7, #12]
 800d82e:	483f      	ldr	r0, [pc, #252]	@ (800d92c <FreeRTOS_FillEndPoint+0x11c>)
 800d830:	f014 ff90 	bl	8022754 <lUDPLoggingPrintf>
 800d834:	e075      	b.n	800d922 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d83c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800d83e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d842:	2100      	movs	r1, #0
 800d844:	68b8      	ldr	r0, [r7, #8]
 800d846:	f015 faae 	bl	8022da6 <memset>
            pxEndPoint->pxNext = pxNext;
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	697a      	ldr	r2, [r7, #20]
 800d84e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3303      	adds	r3, #3
 800d856:	781b      	ldrb	r3, [r3, #0]
 800d858:	061a      	lsls	r2, r3, #24
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	3302      	adds	r3, #2
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	041b      	lsls	r3, r3, #16
 800d862:	431a      	orrs	r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	3301      	adds	r3, #1
 800d868:	781b      	ldrb	r3, [r3, #0]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	4313      	orrs	r3, r2
 800d86e:	687a      	ldr	r2, [r7, #4]
 800d870:	7812      	ldrb	r2, [r2, #0]
 800d872:	4313      	orrs	r3, r2
 800d874:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	3303      	adds	r3, #3
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	061a      	lsls	r2, r3, #24
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	3302      	adds	r3, #2
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	041b      	lsls	r3, r3, #16
 800d886:	431a      	orrs	r2, r3
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	3301      	adds	r3, #1
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	021b      	lsls	r3, r3, #8
 800d890:	4313      	orrs	r3, r2
 800d892:	683a      	ldr	r2, [r7, #0]
 800d894:	7812      	ldrb	r2, [r2, #0]
 800d896:	431a      	orrs	r2, r3
 800d898:	68bb      	ldr	r3, [r7, #8]
 800d89a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800d89c:	6a3b      	ldr	r3, [r7, #32]
 800d89e:	3303      	adds	r3, #3
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	061a      	lsls	r2, r3, #24
 800d8a4:	6a3b      	ldr	r3, [r7, #32]
 800d8a6:	3302      	adds	r3, #2
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	041b      	lsls	r3, r3, #16
 800d8ac:	431a      	orrs	r2, r3
 800d8ae:	6a3b      	ldr	r3, [r7, #32]
 800d8b0:	3301      	adds	r3, #1
 800d8b2:	781b      	ldrb	r3, [r3, #0]
 800d8b4:	021b      	lsls	r3, r3, #8
 800d8b6:	4313      	orrs	r3, r2
 800d8b8:	6a3a      	ldr	r2, [r7, #32]
 800d8ba:	7812      	ldrb	r2, [r2, #0]
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	68bb      	ldr	r3, [r7, #8]
 800d8c0:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c4:	3303      	adds	r3, #3
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	061a      	lsls	r2, r3, #24
 800d8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8cc:	3302      	adds	r3, #2
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	041b      	lsls	r3, r3, #16
 800d8d2:	431a      	orrs	r2, r3
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d6:	3301      	adds	r3, #1
 800d8d8:	781b      	ldrb	r3, [r3, #0]
 800d8da:	021b      	lsls	r3, r3, #8
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d8e0:	7812      	ldrb	r2, [r2, #0]
 800d8e2:	431a      	orrs	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	43da      	mvns	r2, r3
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	431a      	orrs	r2, r3
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800d8f6:	68bb      	ldr	r3, [r7, #8]
 800d8f8:	331c      	adds	r3, #28
 800d8fa:	68b9      	ldr	r1, [r7, #8]
 800d8fc:	221c      	movs	r2, #28
 800d8fe:	4618      	mov	r0, r3
 800d900:	f015 f944 	bl	8022b8c <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	693a      	ldr	r2, [r7, #16]
 800d908:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800d90a:	68bb      	ldr	r3, [r7, #8]
 800d90c:	33e8      	adds	r3, #232	@ 0xe8
 800d90e:	2206      	movs	r2, #6
 800d910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d912:	4618      	mov	r0, r3
 800d914:	f015 f93a 	bl	8022b8c <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800d918:	68b9      	ldr	r1, [r7, #8]
 800d91a:	68f8      	ldr	r0, [r7, #12]
 800d91c:	f000 f85c 	bl	800d9d8 <FreeRTOS_AddEndPoint>
        }
    }
 800d920:	bf00      	nop
 800d922:	bf00      	nop
 800d924:	3718      	adds	r7, #24
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	0802602c 	.word	0x0802602c

0800d930 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800d930:	b480      	push	{r7}
 800d932:	b085      	sub	sp, #20
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800d938:	2300      	movs	r3, #0
 800d93a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d021      	beq.n	800d986 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800d942:	4b14      	ldr	r3, [pc, #80]	@ (800d994 <FreeRTOS_AddNetworkInterface+0x64>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d106      	bne.n	800d958 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800d94a:	4a12      	ldr	r2, [pc, #72]	@ (800d994 <FreeRTOS_AddNetworkInterface+0x64>)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	625a      	str	r2, [r3, #36]	@ 0x24
 800d956:	e016      	b.n	800d986 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800d958:	4b0e      	ldr	r3, [pc, #56]	@ (800d994 <FreeRTOS_AddNetworkInterface+0x64>)
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800d95e:	68fa      	ldr	r2, [r7, #12]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	429a      	cmp	r2, r3
 800d964:	d00e      	beq.n	800d984 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d106      	bne.n	800d97c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	687a      	ldr	r2, [r7, #4]
 800d972:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2200      	movs	r2, #0
 800d978:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800d97a:	e004      	b.n	800d986 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d980:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800d982:	e7ec      	b.n	800d95e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800d984:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800d986:	687b      	ldr	r3, [r7, #4]
    }
 800d988:	4618      	mov	r0, r3
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr
 800d994:	2000152c 	.word	0x2000152c

0800d998 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800d998:	b480      	push	{r7}
 800d99a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800d99c:	4b03      	ldr	r3, [pc, #12]	@ (800d9ac <FreeRTOS_FirstNetworkInterface+0x14>)
 800d99e:	681b      	ldr	r3, [r3, #0]
    }
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr
 800d9aa:	bf00      	nop
 800d9ac:	2000152c 	.word	0x2000152c

0800d9b0 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800d9b0:	b480      	push	{r7}
 800d9b2:	b085      	sub	sp, #20
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d003      	beq.n	800d9c6 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9c2:	60fb      	str	r3, [r7, #12]
 800d9c4:	e001      	b.n	800d9ca <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
    }
 800d9cc:	4618      	mov	r0, r3
 800d9ce:	3714      	adds	r7, #20
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d6:	4770      	bx	lr

0800d9d8 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
 800d9e0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800d9e6:	683b      	ldr	r3, [r7, #0]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a1b      	ldr	r3, [r3, #32]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d102      	bne.n	800d9fc <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	683a      	ldr	r2, [r7, #0]
 800d9fa:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800d9fc:	4b33      	ldr	r3, [pc, #204]	@ (800dacc <FreeRTOS_AddEndPoint+0xf4>)
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d107      	bne.n	800da14 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2200      	movs	r2, #0
 800da08:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800da0c:	4a2f      	ldr	r2, [pc, #188]	@ (800dacc <FreeRTOS_AddEndPoint+0xf4>)
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	6013      	str	r3, [r2, #0]
 800da12:	e01a      	b.n	800da4a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800da14:	4b2d      	ldr	r3, [pc, #180]	@ (800dacc <FreeRTOS_AddEndPoint+0xf4>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800da1a:	68fa      	ldr	r2, [r7, #12]
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	429a      	cmp	r2, r3
 800da20:	d012      	beq.n	800da48 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d108      	bne.n	800da3e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2200      	movs	r2, #0
 800da30:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	683a      	ldr	r2, [r7, #0]
 800da38:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800da3c:	e005      	b.n	800da4a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800da44:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800da46:	e7e8      	b.n	800da1a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800da48:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800da50:	f003 0304 	and.w	r3, r3, #4
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d00c      	beq.n	800da74 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800da60:	4619      	mov	r1, r3
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800da68:	461a      	mov	r2, r3
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	3390      	adds	r3, #144	@ 0x90
 800da6e:	4818      	ldr	r0, [pc, #96]	@ (800dad0 <FreeRTOS_AddEndPoint+0xf8>)
 800da70:	f014 fe70 	bl	8022754 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800da7a:	f003 0304 	and.w	r3, r3, #4
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b00      	cmp	r3, #0
 800da82:	d11e      	bne.n	800dac2 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800da84:	683b      	ldr	r3, [r7, #0]
 800da86:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800da8a:	4619      	mov	r1, r3
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800da92:	4618      	mov	r0, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	69db      	ldr	r3, [r3, #28]
 800da98:	061a      	lsls	r2, r3, #24
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	69db      	ldr	r3, [r3, #28]
 800da9e:	021b      	lsls	r3, r3, #8
 800daa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800daa4:	431a      	orrs	r2, r3
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	69db      	ldr	r3, [r3, #28]
 800daaa:	0a1b      	lsrs	r3, r3, #8
 800daac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dab0:	431a      	orrs	r2, r3
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	69db      	ldr	r3, [r3, #28]
 800dab6:	0e1b      	lsrs	r3, r3, #24
 800dab8:	4313      	orrs	r3, r2
 800daba:	4602      	mov	r2, r0
 800dabc:	4805      	ldr	r0, [pc, #20]	@ (800dad4 <FreeRTOS_AddEndPoint+0xfc>)
 800dabe:	f014 fe49 	bl	8022754 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800dac2:	683b      	ldr	r3, [r7, #0]
    }
 800dac4:	4618      	mov	r0, r3
 800dac6:	3710      	adds	r7, #16
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd80      	pop	{r7, pc}
 800dacc:	20001528 	.word	0x20001528
 800dad0:	0802606c 	.word	0x0802606c
 800dad4:	080260a0 	.word	0x080260a0

0800dad8 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800dad8:	b480      	push	{r7}
 800dada:	b085      	sub	sp, #20
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dae0:	4b0d      	ldr	r3, [pc, #52]	@ (800db18 <FreeRTOS_FirstEndPoint+0x40>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800dae6:	e00c      	b.n	800db02 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00c      	beq.n	800db08 <FreeRTOS_FirstEndPoint+0x30>
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	429a      	cmp	r2, r3
 800daf8:	d006      	beq.n	800db08 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800db00:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d1ef      	bne.n	800dae8 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800db08:	68fb      	ldr	r3, [r7, #12]
    }
 800db0a:	4618      	mov	r0, r3
 800db0c:	3714      	adds	r7, #20
 800db0e:	46bd      	mov	sp, r7
 800db10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db14:	4770      	bx	lr
 800db16:	bf00      	nop
 800db18:	20001528 	.word	0x20001528

0800db1c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b084      	sub	sp, #16
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
 800db24:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d015      	beq.n	800db5c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800db36:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800db38:	e00c      	b.n	800db54 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d011      	beq.n	800db64 <FreeRTOS_NextEndPoint+0x48>
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d00b      	beq.n	800db64 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800db52:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d1ef      	bne.n	800db3a <FreeRTOS_NextEndPoint+0x1e>
 800db5a:	e003      	b.n	800db64 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f7ff ffbb 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800db62:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800db64:	68fb      	ldr	r3, [r7, #12]
    }
 800db66:	4618      	mov	r0, r3
 800db68:	3710      	adds	r7, #16
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}
	...

0800db70 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800db70:	b480      	push	{r7}
 800db72:	b085      	sub	sp, #20
 800db74:	af00      	add	r7, sp, #0
 800db76:	6078      	str	r0, [r7, #4]
 800db78:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800db7a:	4b1e      	ldr	r3, [pc, #120]	@ (800dbf4 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800db80:	2308      	movs	r3, #8
 800db82:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800db84:	4b1c      	ldr	r3, [pc, #112]	@ (800dbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3301      	adds	r3, #1
 800db8a:	4a1b      	ldr	r2, [pc, #108]	@ (800dbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800db8c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	429a      	cmp	r2, r3
 800db94:	d223      	bcs.n	800dbde <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800db96:	4a18      	ldr	r2, [pc, #96]	@ (800dbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	3312      	adds	r3, #18
 800db9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dba0:	1c5a      	adds	r2, r3, #1
 800dba2:	4915      	ldr	r1, [pc, #84]	@ (800dbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	3312      	adds	r3, #18
 800dba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800dbac:	e017      	b.n	800dbde <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dbb4:	f003 0304 	and.w	r3, r3, #4
 800dbb8:	b2db      	uxtb	r3, r3
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d10b      	bne.n	800dbd6 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d00f      	beq.n	800dbe4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d00b      	beq.n	800dbe4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800dbd0:	687a      	ldr	r2, [r7, #4]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d006      	beq.n	800dbe4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dbdc:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d1e4      	bne.n	800dbae <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
    }
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	3714      	adds	r7, #20
 800dbea:	46bd      	mov	sp, r7
 800dbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf0:	4770      	bx	lr
 800dbf2:	bf00      	nop
 800dbf4:	20001528 	.word	0x20001528
 800dbf8:	20001530 	.word	0x20001530

0800dbfc <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800dc04:	6879      	ldr	r1, [r7, #4]
 800dc06:	2000      	movs	r0, #0
 800dc08:	f000 f8b6 	bl	800dd78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800dc0c:	4603      	mov	r3, r0
        }
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3708      	adds	r7, #8
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800dc18:	b580      	push	{r7, lr}
 800dc1a:	b084      	sub	sp, #16
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
 800dc20:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dc22:	4b17      	ldr	r3, [pc, #92]	@ (800dc80 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800dc28:	4b16      	ldr	r3, [pc, #88]	@ (800dc84 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	3301      	adds	r3, #1
 800dc2e:	4a15      	ldr	r2, [pc, #84]	@ (800dc84 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800dc30:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d119      	bne.n	800dc6c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800dc38:	2300      	movs	r3, #0
 800dc3a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800dc3c:	e016      	b.n	800dc6c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d005      	beq.n	800dc50 <FreeRTOS_FindEndPointOnMAC+0x38>
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dc4a:	683a      	ldr	r2, [r7, #0]
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d109      	bne.n	800dc64 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	33e8      	adds	r3, #232	@ 0xe8
 800dc54:	6879      	ldr	r1, [r7, #4]
 800dc56:	2206      	movs	r2, #6
 800dc58:	4618      	mov	r0, r3
 800dc5a:	f015 ff2c 	bl	8023ab6 <memcmp>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d007      	beq.n	800dc74 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dc6a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d1e5      	bne.n	800dc3e <FreeRTOS_FindEndPointOnMAC+0x26>
 800dc72:	e000      	b.n	800dc76 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800dc74:	bf00      	nop
        }

        return pxEndPoint;
 800dc76:	68fb      	ldr	r3, [r7, #12]
    }
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	20001528 	.word	0x20001528
 800dc84:	20001530 	.word	0x20001530

0800dc88 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	6879      	ldr	r1, [r7, #4]
 800dc96:	2000      	movs	r0, #0
 800dc98:	f000 f806 	bl	800dca8 <FreeRTOS_InterfaceEndPointOnNetMask>
 800dc9c:	4603      	mov	r3, r0
    }
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
	...

0800dca8 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b086      	sub	sp, #24
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	60f8      	str	r0, [r7, #12]
 800dcb0:	60b9      	str	r1, [r7, #8]
 800dcb2:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dcb4:	4b2d      	ldr	r3, [pc, #180]	@ (800dd6c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800dcba:	230e      	movs	r3, #14
 800dcbc:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800dcbe:	4b2c      	ldr	r3, [pc, #176]	@ (800dd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dcc0:	689b      	ldr	r3, [r3, #8]
 800dcc2:	3301      	adds	r3, #1
 800dcc4:	4a2a      	ldr	r2, [pc, #168]	@ (800dd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dcc6:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	429a      	cmp	r2, r3
 800dcce:	d22d      	bcs.n	800dd2c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800dcd0:	4a27      	ldr	r2, [pc, #156]	@ (800dd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	3304      	adds	r3, #4
 800dcd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dcda:	1c5a      	adds	r2, r3, #1
 800dcdc:	4924      	ldr	r1, [pc, #144]	@ (800dd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	3304      	adds	r3, #4
 800dce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800dce6:	e021      	b.n	800dd2c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d005      	beq.n	800dcfa <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800dcee:	697b      	ldr	r3, [r7, #20]
 800dcf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dcf4:	68fa      	ldr	r2, [r7, #12]
 800dcf6:	429a      	cmp	r2, r3
 800dcf8:	d114      	bne.n	800dd24 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800dcfa:	697b      	ldr	r3, [r7, #20]
 800dcfc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dd00:	f003 0304 	and.w	r3, r3, #4
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10c      	bne.n	800dd24 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd10:	d00f      	beq.n	800dd32 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	405a      	eors	r2, r3
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d006      	beq.n	800dd32 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dd2a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800dd2c:	697b      	ldr	r3, [r7, #20]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d1da      	bne.n	800dce8 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d113      	bne.n	800dd60 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800dd38:	68bb      	ldr	r3, [r7, #8]
 800dd3a:	061a      	lsls	r2, r3, #24
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	021b      	lsls	r3, r3, #8
 800dd40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dd44:	431a      	orrs	r2, r3
 800dd46:	68bb      	ldr	r3, [r7, #8]
 800dd48:	0a1b      	lsrs	r3, r3, #8
 800dd4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dd4e:	431a      	orrs	r2, r3
 800dd50:	68bb      	ldr	r3, [r7, #8]
 800dd52:	0e1b      	lsrs	r3, r3, #24
 800dd54:	4313      	orrs	r3, r2
 800dd56:	461a      	mov	r2, r3
 800dd58:	6879      	ldr	r1, [r7, #4]
 800dd5a:	4806      	ldr	r0, [pc, #24]	@ (800dd74 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800dd5c:	f014 fcfa 	bl	8022754 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800dd60:	697b      	ldr	r3, [r7, #20]
    }
 800dd62:	4618      	mov	r0, r3
 800dd64:	3718      	adds	r7, #24
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20001528 	.word	0x20001528
 800dd70:	20001530 	.word	0x20001530
 800dd74:	080260d4 	.word	0x080260d4

0800dd78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	6078      	str	r0, [r7, #4]
 800dd80:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dd82:	4b17      	ldr	r3, [pc, #92]	@ (800dde0 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800dd88:	e020      	b.n	800ddcc <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d005      	beq.n	800dd9c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800dd96:	687a      	ldr	r2, [r7, #4]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d113      	bne.n	800ddc4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dda2:	f003 0304 	and.w	r3, r3, #4
 800dda6:	b2db      	uxtb	r3, r3
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00b      	beq.n	800ddc4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	6839      	ldr	r1, [r7, #0]
 800ddba:	f7fd fc0b 	bl	800b5d4 <xCompareIPv6_Address>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d007      	beq.n	800ddd4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ddca:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1db      	bne.n	800dd8a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800ddd2:	e000      	b.n	800ddd6 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800ddd4:	bf00      	nop
            }

            return pxEndPoint;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
        }
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20001528 	.word	0x20001528

0800dde4 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800dde4:	b5b0      	push	{r4, r5, r7, lr}
 800dde6:	b0b0      	sub	sp, #192	@ 0xc0
 800dde8:	af04      	add	r7, sp, #16
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	607a      	str	r2, [r7, #4]
 800ddee:	603b      	str	r3, [r7, #0]
 800ddf0:	460b      	mov	r3, r1
 800ddf2:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800ddfa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800ddfe:	2200      	movs	r2, #0
 800de00:	601a      	str	r2, [r3, #0]
 800de02:	605a      	str	r2, [r3, #4]
 800de04:	609a      	str	r2, [r3, #8]
 800de06:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800de08:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800de0c:	2200      	movs	r2, #0
 800de0e:	601a      	str	r2, [r3, #0]
 800de10:	605a      	str	r2, [r3, #4]
 800de12:	609a      	str	r2, [r3, #8]
 800de14:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800de16:	897b      	ldrh	r3, [r7, #10]
 800de18:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d101      	bne.n	800de24 <pxEasyFit+0x40>
 800de20:	2301      	movs	r3, #1
 800de22:	e000      	b.n	800de26 <pxEasyFit+0x42>
 800de24:	2300      	movs	r3, #0
 800de26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800de2a:	2300      	movs	r3, #0
 800de2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800de30:	2300      	movs	r3, #0
 800de32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800de36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d123      	bne.n	800de86 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800de3e:	683b      	ldr	r3, [r7, #0]
 800de40:	2210      	movs	r2, #16
 800de42:	4619      	mov	r1, r3
 800de44:	4888      	ldr	r0, [pc, #544]	@ (800e068 <pxEasyFit+0x284>)
 800de46:	f015 fe36 	bl	8023ab6 <memcmp>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d101      	bne.n	800de54 <pxEasyFit+0x70>
 800de50:	2301      	movs	r3, #1
 800de52:	e000      	b.n	800de56 <pxEasyFit+0x72>
 800de54:	2300      	movs	r3, #0
 800de56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800de5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800de5e:	2b01      	cmp	r3, #1
 800de60:	d105      	bne.n	800de6e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	683a      	ldr	r2, [r7, #0]
 800de66:	4619      	mov	r1, r3
 800de68:	4880      	ldr	r0, [pc, #512]	@ (800e06c <pxEasyFit+0x288>)
 800de6a:	f014 fc73 	bl	8022754 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	4618      	mov	r0, r3
 800de72:	f000 fa15 	bl	800e2a0 <xIPv6_GetIPType>
 800de76:	4603      	mov	r3, r0
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d101      	bne.n	800de80 <pxEasyFit+0x9c>
 800de7c:	2301      	movs	r3, #1
 800de7e:	e000      	b.n	800de82 <pxEasyFit+0x9e>
 800de80:	2300      	movs	r3, #0
 800de82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800de86:	68f8      	ldr	r0, [r7, #12]
 800de88:	f7ff fe26 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 800de8c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800de90:	e07d      	b.n	800df8e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800de92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800de96:	33e8      	adds	r3, #232	@ 0xe8
 800de98:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800de9c:	2206      	movs	r2, #6
 800de9e:	4618      	mov	r0, r3
 800dea0:	f015 fe09 	bl	8023ab6 <memcmp>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d101      	bne.n	800deae <pxEasyFit+0xca>
 800deaa:	2301      	movs	r3, #1
 800deac:	e000      	b.n	800deb0 <pxEasyFit+0xcc>
 800deae:	2300      	movs	r3, #0
 800deb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800deb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800deb8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800debc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dec0:	b2db      	uxtb	r3, r3
 800dec2:	461a      	mov	r2, r3
 800dec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dec8:	4293      	cmp	r3, r2
 800deca:	d159      	bne.n	800df80 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800decc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ded0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800ded2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ded4:	3301      	adds	r3, #1
 800ded6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ded8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800dedc:	2b01      	cmp	r3, #1
 800dede:	d134      	bne.n	800df4a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800dee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800dee4:	3338      	adds	r3, #56	@ 0x38
 800dee6:	4618      	mov	r0, r3
 800dee8:	f000 f9da 	bl	800e2a0 <xIPv6_GetIPType>
 800deec:	4603      	mov	r3, r0
 800deee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800def2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800def6:	2b05      	cmp	r3, #5
 800def8:	d035      	beq.n	800df66 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800defa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800defe:	2b00      	cmp	r3, #0
 800df00:	d101      	bne.n	800df06 <pxEasyFit+0x122>
 800df02:	2301      	movs	r3, #1
 800df04:	e000      	b.n	800df08 <pxEasyFit+0x124>
 800df06:	2300      	movs	r3, #0
 800df08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800df0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df10:	3338      	adds	r3, #56	@ 0x38
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	2210      	movs	r2, #16
 800df16:	4618      	mov	r0, r3
 800df18:	f015 fdcd 	bl	8023ab6 <memcmp>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d106      	bne.n	800df30 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800df22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df26:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800df28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df2a:	3301      	adds	r3, #1
 800df2c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800df2e:	e01a      	b.n	800df66 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800df30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800df34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800df38:	429a      	cmp	r2, r3
 800df3a:	d114      	bne.n	800df66 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800df3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df40:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800df42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df44:	3301      	adds	r3, #1
 800df46:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800df48:	e00d      	b.n	800df66 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800df4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	683b      	ldr	r3, [r7, #0]
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	429a      	cmp	r2, r3
 800df56:	d108      	bne.n	800df6a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800df58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df5c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800df5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800df60:	3301      	adds	r3, #1
 800df62:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800df64:	e001      	b.n	800df6a <pxEasyFit+0x186>
                           break;
 800df66:	bf00      	nop
 800df68:	e000      	b.n	800df6c <pxEasyFit+0x188>
                        break;
 800df6a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800df6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800df70:	2b01      	cmp	r3, #1
 800df72:	d105      	bne.n	800df80 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800df74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800df76:	3301      	adds	r3, #1
 800df78:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800df7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df7e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800df80:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7ff fdc9 	bl	800db1c <FreeRTOS_NextEndPoint>
 800df8a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800df8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800df92:	2b00      	cmp	r3, #0
 800df94:	f47f af7d 	bne.w	800de92 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800df98:	2300      	movs	r3, #0
 800df9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800df9e:	e017      	b.n	800dfd0 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800dfa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dfa4:	009b      	lsls	r3, r3, #2
 800dfa6:	33b0      	adds	r3, #176	@ 0xb0
 800dfa8:	443b      	add	r3, r7
 800dfaa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	dd09      	ble.n	800dfc6 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800dfb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	33b0      	adds	r3, #176	@ 0xb0
 800dfba:	443b      	add	r3, r7
 800dfbc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800dfc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800dfc4:	e008      	b.n	800dfd8 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800dfc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dfca:	3301      	adds	r3, #1
 800dfcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800dfd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800dfd4:	2b03      	cmp	r3, #3
 800dfd6:	dde3      	ble.n	800dfa0 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800dfd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d13c      	bne.n	800e05a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800dfe0:	897b      	ldrh	r3, [r7, #10]
 800dfe2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dfe6:	4293      	cmp	r3, r2
 800dfe8:	d101      	bne.n	800dfee <pxEasyFit+0x20a>
 800dfea:	230a      	movs	r3, #10
 800dfec:	e000      	b.n	800dff0 <pxEasyFit+0x20c>
 800dfee:	2302      	movs	r3, #2
 800dff0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800dff4:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800dff6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800dffa:	2328      	movs	r3, #40	@ 0x28
 800dffc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e000:	f001 fc70 	bl	800f8e4 <FreeRTOS_inet_ntop>
 800e004:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800e008:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800e00a:	f107 0210 	add.w	r2, r7, #16
 800e00e:	2328      	movs	r3, #40	@ 0x28
 800e010:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800e014:	f001 fc66 	bl	800f8e4 <FreeRTOS_inet_ntop>
 800e018:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800e01c:	8979      	ldrh	r1, [r7, #10]
 800e01e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e020:	461c      	mov	r4, r3
 800e022:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e024:	461d      	mov	r5, r3
 800e026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e028:	4618      	mov	r0, r3
 800e02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d002      	beq.n	800e038 <pxEasyFit+0x254>
 800e032:	f107 0310 	add.w	r3, r7, #16
 800e036:	e000      	b.n	800e03a <pxEasyFit+0x256>
 800e038:	4b0d      	ldr	r3, [pc, #52]	@ (800e070 <pxEasyFit+0x28c>)
 800e03a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800e03e:	2a00      	cmp	r2, #0
 800e040:	d002      	beq.n	800e048 <pxEasyFit+0x264>
 800e042:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800e046:	e000      	b.n	800e04a <pxEasyFit+0x266>
 800e048:	4a09      	ldr	r2, [pc, #36]	@ (800e070 <pxEasyFit+0x28c>)
 800e04a:	9202      	str	r2, [sp, #8]
 800e04c:	9301      	str	r3, [sp, #4]
 800e04e:	9000      	str	r0, [sp, #0]
 800e050:	462b      	mov	r3, r5
 800e052:	4622      	mov	r2, r4
 800e054:	4807      	ldr	r0, [pc, #28]	@ (800e074 <pxEasyFit+0x290>)
 800e056:	f014 fb7d 	bl	8022754 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800e05a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800e05e:	4618      	mov	r0, r3
 800e060:	37b0      	adds	r7, #176	@ 0xb0
 800e062:	46bd      	mov	sp, r7
 800e064:	bdb0      	pop	{r4, r5, r7, pc}
 800e066:	bf00      	nop
 800e068:	08027f2c 	.word	0x08027f2c
 800e06c:	08026170 	.word	0x08026170
 800e070:	0802618c 	.word	0x0802618c
 800e074:	08026194 	.word	0x08026194

0800e078 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800e078:	b590      	push	{r4, r7, lr}
 800e07a:	b097      	sub	sp, #92	@ 0x5c
 800e07c:	af02      	add	r7, sp, #8
 800e07e:	6078      	str	r0, [r7, #4]
 800e080:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800e082:	2300      	movs	r3, #0
 800e084:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d104      	bne.n	800e09e <FreeRTOS_MatchingEndpoint+0x26>
 800e094:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800e098:	485e      	ldr	r0, [pc, #376]	@ (800e214 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e09a:	f7f3 fc7d 	bl	8001998 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800e0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0a4:	3302      	adds	r3, #2
 800e0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800e0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0aa:	f003 0303 	and.w	r3, r3, #3
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d004      	beq.n	800e0bc <FreeRTOS_MatchingEndpoint+0x44>
 800e0b2:	f240 319b 	movw	r1, #923	@ 0x39b
 800e0b6:	4857      	ldr	r0, [pc, #348]	@ (800e214 <FreeRTOS_MatchingEndpoint+0x19c>)
 800e0b8:	f7f3 fc6e 	bl	8001998 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800e0bc:	4b56      	ldr	r3, [pc, #344]	@ (800e218 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	4a55      	ldr	r2, [pc, #340]	@ (800e218 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800e0c4:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800e0c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e0c8:	7b1a      	ldrb	r2, [r3, #12]
 800e0ca:	7b5b      	ldrb	r3, [r3, #13]
 800e0cc:	021b      	lsls	r3, r3, #8
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e0da:	2210      	movs	r2, #16
 800e0dc:	2100      	movs	r1, #0
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f014 fe61 	bl	8022da6 <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800e0e4:	f107 0314 	add.w	r3, r7, #20
 800e0e8:	2210      	movs	r2, #16
 800e0ea:	2100      	movs	r1, #0
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f014 fe5a 	bl	8022da6 <memset>

            switch( usFrameType )
 800e0f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e0f4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d009      	beq.n	800e110 <FreeRTOS_MatchingEndpoint+0x98>
 800e0fc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800e100:	4293      	cmp	r3, r2
 800e102:	dc6a      	bgt.n	800e1da <FreeRTOS_MatchingEndpoint+0x162>
 800e104:	2b08      	cmp	r3, #8
 800e106:	d05d      	beq.n	800e1c4 <FreeRTOS_MatchingEndpoint+0x14c>
 800e108:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800e10c:	d015      	beq.n	800e13a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800e10e:	e064      	b.n	800e1da <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e112:	3316      	adds	r3, #22
 800e114:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	6859      	ldr	r1, [r3, #4]
 800e11c:	689a      	ldr	r2, [r3, #8]
 800e11e:	68db      	ldr	r3, [r3, #12]
 800e120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e124:	3326      	adds	r3, #38	@ 0x26
 800e126:	f107 0414 	add.w	r4, r7, #20
 800e12a:	6818      	ldr	r0, [r3, #0]
 800e12c:	6859      	ldr	r1, [r3, #4]
 800e12e:	689a      	ldr	r2, [r3, #8]
 800e130:	68db      	ldr	r3, [r3, #12]
 800e132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800e134:	2301      	movs	r3, #1
 800e136:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e138:	e050      	b.n	800e1dc <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800e13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e140:	8a9b      	ldrh	r3, [r3, #20]
 800e142:	b29b      	uxth	r3, r3
 800e144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e148:	d108      	bne.n	800e15c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e14c:	331c      	adds	r3, #28
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e154:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e158:	617b      	str	r3, [r7, #20]
 800e15a:	e00d      	b.n	800e178 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800e15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e15e:	8a9b      	ldrh	r3, [r3, #20]
 800e160:	b29b      	uxth	r3, r3
 800e162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e166:	d107      	bne.n	800e178 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800e168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e16a:	331c      	adds	r3, #28
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800e170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e172:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800e176:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800e178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17a:	061a      	lsls	r2, r3, #24
 800e17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e17e:	021b      	lsls	r3, r3, #8
 800e180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e184:	431a      	orrs	r2, r3
 800e186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e188:	0a1b      	lsrs	r3, r3, #8
 800e18a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e18e:	431a      	orrs	r2, r3
 800e190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e192:	0e1b      	lsrs	r3, r3, #24
 800e194:	ea42 0103 	orr.w	r1, r2, r3
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	061a      	lsls	r2, r3, #24
 800e19c:	697b      	ldr	r3, [r7, #20]
 800e19e:	021b      	lsls	r3, r3, #8
 800e1a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e1a4:	431a      	orrs	r2, r3
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	0a1b      	lsrs	r3, r3, #8
 800e1aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e1ae:	431a      	orrs	r2, r3
 800e1b0:	697b      	ldr	r3, [r7, #20]
 800e1b2:	0e1b      	lsrs	r3, r3, #24
 800e1b4:	4313      	orrs	r3, r2
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	4818      	ldr	r0, [pc, #96]	@ (800e21c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800e1ba:	f014 facb 	bl	8022754 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800e1be:	2301      	movs	r3, #1
 800e1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e1c2:	e00b      	b.n	800e1dc <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800e1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1c6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800e1ca:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800e1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1ce:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800e1d2:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800e1d8:	e000      	b.n	800e1dc <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800e1da:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800e1dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d113      	bne.n	800e20a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800e1e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e1e4:	f107 030c 	add.w	r3, r7, #12
 800e1e8:	6810      	ldr	r0, [r2, #0]
 800e1ea:	6018      	str	r0, [r3, #0]
 800e1ec:	8892      	ldrh	r2, [r2, #4]
 800e1ee:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800e1f0:	f107 0014 	add.w	r0, r7, #20
 800e1f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800e1f8:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800e1fa:	f107 030c 	add.w	r3, r7, #12
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	4603      	mov	r3, r0
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7ff fdee 	bl	800dde4 <pxEasyFit>
 800e208:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800e20a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800e20c:	4618      	mov	r0, r3
 800e20e:	3754      	adds	r7, #84	@ 0x54
 800e210:	46bd      	mov	sp, r7
 800e212:	bd90      	pop	{r4, r7, pc}
 800e214:	080261bc 	.word	0x080261bc
 800e218:	20001530 	.word	0x20001530
 800e21c:	080261ec 	.word	0x080261ec

0800e220 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800e228:	4b1b      	ldr	r3, [pc, #108]	@ (800e298 <FreeRTOS_FindGateWay+0x78>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800e22e:	e028      	b.n	800e282 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2b60      	cmp	r3, #96	@ 0x60
 800e234:	d112      	bne.n	800e25c <FreeRTOS_FindGateWay+0x3c>
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	b2db      	uxtb	r3, r3
 800e242:	2b00      	cmp	r3, #0
 800e244:	d00a      	beq.n	800e25c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	335c      	adds	r3, #92	@ 0x5c
 800e24a:	2210      	movs	r2, #16
 800e24c:	4619      	mov	r1, r3
 800e24e:	4813      	ldr	r0, [pc, #76]	@ (800e29c <FreeRTOS_FindGateWay+0x7c>)
 800e250:	f015 fc31 	bl	8023ab6 <memcmp>
 800e254:	4603      	mov	r3, r0
 800e256:	2b00      	cmp	r3, #0
 800e258:	d00f      	beq.n	800e27a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800e25a:	e017      	b.n	800e28c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b40      	cmp	r3, #64	@ 0x40
 800e260:	d10b      	bne.n	800e27a <FreeRTOS_FindGateWay+0x5a>
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e268:	f003 0304 	and.w	r3, r3, #4
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d103      	bne.n	800e27a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d107      	bne.n	800e28a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800e280:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d1d3      	bne.n	800e230 <FreeRTOS_FindGateWay+0x10>
 800e288:	e000      	b.n	800e28c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800e28a:	bf00      	nop
        }

        return pxEndPoint;
 800e28c:	68fb      	ldr	r3, [r7, #12]
    }
 800e28e:	4618      	mov	r0, r3
 800e290:	3710      	adds	r7, #16
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	20001528 	.word	0x20001528
 800e29c:	08027ee4 	.word	0x08027ee4

0800e2a0 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b086      	sub	sp, #24
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800e2a8:	2305      	movs	r3, #5
 800e2aa:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d046      	beq.n	800e340 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	613b      	str	r3, [r7, #16]
 800e2b6:	e040      	b.n	800e33a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	021b      	lsls	r3, r3, #8
 800e2be:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	785b      	ldrb	r3, [r3, #1]
 800e2c4:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800e2c6:	4313      	orrs	r3, r2
 800e2c8:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800e2ca:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800e2cc:	491f      	ldr	r1, [pc, #124]	@ (800e34c <xIPv6_GetIPType+0xac>)
 800e2ce:	693a      	ldr	r2, [r7, #16]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	005b      	lsls	r3, r3, #1
 800e2d4:	4413      	add	r3, r2
 800e2d6:	005b      	lsls	r3, r3, #1
 800e2d8:	440b      	add	r3, r1
 800e2da:	781b      	ldrb	r3, [r3, #0]
 800e2dc:	2b04      	cmp	r3, #4
 800e2de:	d108      	bne.n	800e2f2 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7fd f929 	bl	800b538 <xIsIPv6Loopback>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d002      	beq.n	800e2f2 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800e2ec:	2304      	movs	r3, #4
 800e2ee:	75fb      	strb	r3, [r7, #23]
                        break;
 800e2f0:	e026      	b.n	800e340 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800e2f2:	4916      	ldr	r1, [pc, #88]	@ (800e34c <xIPv6_GetIPType+0xac>)
 800e2f4:	693a      	ldr	r2, [r7, #16]
 800e2f6:	4613      	mov	r3, r2
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	4413      	add	r3, r2
 800e2fc:	005b      	lsls	r3, r3, #1
 800e2fe:	440b      	add	r3, r1
 800e300:	3302      	adds	r3, #2
 800e302:	881a      	ldrh	r2, [r3, #0]
 800e304:	89fb      	ldrh	r3, [r7, #14]
 800e306:	4013      	ands	r3, r2
 800e308:	b299      	uxth	r1, r3
 800e30a:	4810      	ldr	r0, [pc, #64]	@ (800e34c <xIPv6_GetIPType+0xac>)
 800e30c:	693a      	ldr	r2, [r7, #16]
 800e30e:	4613      	mov	r3, r2
 800e310:	005b      	lsls	r3, r3, #1
 800e312:	4413      	add	r3, r2
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	4403      	add	r3, r0
 800e318:	3304      	adds	r3, #4
 800e31a:	881b      	ldrh	r3, [r3, #0]
 800e31c:	4299      	cmp	r1, r3
 800e31e:	d109      	bne.n	800e334 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800e320:	490a      	ldr	r1, [pc, #40]	@ (800e34c <xIPv6_GetIPType+0xac>)
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	4613      	mov	r3, r2
 800e326:	005b      	lsls	r3, r3, #1
 800e328:	4413      	add	r3, r2
 800e32a:	005b      	lsls	r3, r3, #1
 800e32c:	440b      	add	r3, r1
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	75fb      	strb	r3, [r7, #23]
                    break;
 800e332:	e005      	b.n	800e340 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800e334:	693b      	ldr	r3, [r7, #16]
 800e336:	3301      	adds	r3, #1
 800e338:	613b      	str	r3, [r7, #16]
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	2b04      	cmp	r3, #4
 800e33e:	ddbb      	ble.n	800e2b8 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800e340:	7dfb      	ldrb	r3, [r7, #23]
    }
 800e342:	4618      	mov	r0, r3
 800e344:	3718      	adds	r7, #24
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	08027f3c 	.word	0x08027f3c

0800e350 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d105      	bne.n	800e36e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e362:	4a16      	ldr	r2, [pc, #88]	@ (800e3bc <pcEndpointName+0x6c>)
 800e364:	6879      	ldr	r1, [r7, #4]
 800e366:	68b8      	ldr	r0, [r7, #8]
 800e368:	f015 fa20 	bl	80237ac <snprintf>
 800e36c:	e020      	b.n	800e3b0 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800e374:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800e378:	b2db      	uxtb	r3, r3
 800e37a:	2b00      	cmp	r3, #0
 800e37c:	d002      	beq.n	800e384 <pcEndpointName+0x34>
 800e37e:	2b01      	cmp	r3, #1
 800e380:	d007      	beq.n	800e392 <pcEndpointName+0x42>
 800e382:	e00f      	b.n	800e3a4 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800e384:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	68ba      	ldr	r2, [r7, #8]
 800e38a:	2002      	movs	r0, #2
 800e38c:	f001 faaa 	bl	800f8e4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e390:	e00e      	b.n	800e3b0 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	68ba      	ldr	r2, [r7, #8]
 800e39c:	200a      	movs	r0, #10
 800e39e:	f001 faa1 	bl	800f8e4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800e3a2:	e005      	b.n	800e3b0 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800e3a4:	4a05      	ldr	r2, [pc, #20]	@ (800e3bc <pcEndpointName+0x6c>)
 800e3a6:	6879      	ldr	r1, [r7, #4]
 800e3a8:	68b8      	ldr	r0, [r7, #8]
 800e3aa:	f015 f9ff 	bl	80237ac <snprintf>
                    break;
 800e3ae:	bf00      	nop
            }
        }

        return pcBuffer;
 800e3b0:	68bb      	ldr	r3, [r7, #8]
    }
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3710      	adds	r7, #16
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	0802620c 	.word	0x0802620c

0800e3c0 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b086      	sub	sp, #24
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f002 fc3f 	bl	8010c50 <xSocketValid>
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d102      	bne.n	800e3de <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	617b      	str	r3, [r7, #20]
 800e3dc:	e015      	b.n	800e40a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d006      	beq.n	800e3f2 <prvValidSocket+0x32>
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	69db      	ldr	r3, [r3, #28]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d102      	bne.n	800e3f2 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	617b      	str	r3, [r7, #20]
 800e3f0:	e00b      	b.n	800e40a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d002      	beq.n	800e406 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800e400:	2300      	movs	r3, #0
 800e402:	617b      	str	r3, [r7, #20]
 800e404:	e001      	b.n	800e40a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800e406:	2301      	movs	r3, #1
 800e408:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e40a:	697b      	ldr	r3, [r7, #20]
}
 800e40c:	4618      	mov	r0, r3
 800e40e:	3718      	adds	r7, #24
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800e414:	b580      	push	{r7, lr}
 800e416:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800e418:	4803      	ldr	r0, [pc, #12]	@ (800e428 <vNetworkSocketsInit+0x14>)
 800e41a:	f7f5 f9a7 	bl	800376c <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800e41e:	4803      	ldr	r0, [pc, #12]	@ (800e42c <vNetworkSocketsInit+0x18>)
 800e420:	f7f5 f9a4 	bl	800376c <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800e424:	bf00      	nop
 800e426:	bd80      	pop	{r7, pc}
 800e428:	200015f4 	.word	0x200015f4
 800e42c:	20001608 	.word	0x20001608

0800e430 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b086      	sub	sp, #24
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800e43e:	2301      	movs	r3, #1
 800e440:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800e442:	2300      	movs	r3, #0
 800e444:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800e446:	f7fb ff97 	bl	800a378 <xIPIsNetworkTaskReady>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d102      	bne.n	800e456 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800e450:	2300      	movs	r3, #0
 800e452:	617b      	str	r3, [r7, #20]
 800e454:	e05e      	b.n	800e514 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	2b02      	cmp	r3, #2
 800e45a:	d004      	beq.n	800e466 <prvDetermineSocketSize+0x36>
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2b0a      	cmp	r3, #10
 800e460:	d001      	beq.n	800e466 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800e462:	2300      	movs	r3, #0
 800e464:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	2b02      	cmp	r3, #2
 800e46a:	d002      	beq.n	800e472 <prvDetermineSocketSize+0x42>
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2b0a      	cmp	r3, #10
 800e470:	d101      	bne.n	800e476 <prvDetermineSocketSize+0x46>
 800e472:	2301      	movs	r3, #1
 800e474:	e000      	b.n	800e478 <prvDetermineSocketSize+0x48>
 800e476:	2300      	movs	r3, #0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d104      	bne.n	800e486 <prvDetermineSocketSize+0x56>
 800e47c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e480:	4827      	ldr	r0, [pc, #156]	@ (800e520 <prvDetermineSocketSize+0xf0>)
 800e482:	f7f3 fa89 	bl	8001998 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800e486:	4b27      	ldr	r3, [pc, #156]	@ (800e524 <prvDetermineSocketSize+0xf4>)
 800e488:	689b      	ldr	r3, [r3, #8]
 800e48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e48e:	d004      	beq.n	800e49a <prvDetermineSocketSize+0x6a>
 800e490:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800e494:	4822      	ldr	r0, [pc, #136]	@ (800e520 <prvDetermineSocketSize+0xf0>)
 800e496:	f7f3 fa7f 	bl	8001998 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800e49a:	4b23      	ldr	r3, [pc, #140]	@ (800e528 <prvDetermineSocketSize+0xf8>)
 800e49c:	689b      	ldr	r3, [r3, #8]
 800e49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4a2:	d004      	beq.n	800e4ae <prvDetermineSocketSize+0x7e>
 800e4a4:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800e4a8:	481d      	ldr	r0, [pc, #116]	@ (800e520 <prvDetermineSocketSize+0xf0>)
 800e4aa:	f7f3 fa75 	bl	8001998 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2b11      	cmp	r3, #17
 800e4b2:	d110      	bne.n	800e4d6 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	d009      	beq.n	800e4ce <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d004      	beq.n	800e4ce <prvDetermineSocketSize+0x9e>
 800e4c4:	f240 2106 	movw	r1, #518	@ 0x206
 800e4c8:	4815      	ldr	r0, [pc, #84]	@ (800e520 <prvDetermineSocketSize+0xf0>)
 800e4ca:	f7f3 fa65 	bl	8001998 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2270      	movs	r2, #112	@ 0x70
 800e4d2:	601a      	str	r2, [r3, #0]
 800e4d4:	e01e      	b.n	800e514 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	2b06      	cmp	r3, #6
 800e4da:	d111      	bne.n	800e500 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800e4dc:	68bb      	ldr	r3, [r7, #8]
 800e4de:	2b01      	cmp	r3, #1
 800e4e0:	d009      	beq.n	800e4f6 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e4e6:	697b      	ldr	r3, [r7, #20]
 800e4e8:	2b01      	cmp	r3, #1
 800e4ea:	d004      	beq.n	800e4f6 <prvDetermineSocketSize+0xc6>
 800e4ec:	f240 2113 	movw	r1, #531	@ 0x213
 800e4f0:	480b      	ldr	r0, [pc, #44]	@ (800e520 <prvDetermineSocketSize+0xf0>)
 800e4f2:	f7f3 fa51 	bl	8001998 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	e009      	b.n	800e514 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800e500:	2300      	movs	r3, #0
 800e502:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800e504:	697b      	ldr	r3, [r7, #20]
 800e506:	2b01      	cmp	r3, #1
 800e508:	d004      	beq.n	800e514 <prvDetermineSocketSize+0xe4>
 800e50a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800e50e:	4804      	ldr	r0, [pc, #16]	@ (800e520 <prvDetermineSocketSize+0xf0>)
 800e510:	f7f3 fa42 	bl	8001998 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800e514:	697b      	ldr	r3, [r7, #20]
}
 800e516:	4618      	mov	r0, r3
 800e518:	3718      	adds	r7, #24
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	08026214 	.word	0x08026214
 800e524:	200015f4 	.word	0x200015f4
 800e528:	20001608 	.word	0x20001608

0800e52c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800e52c:	b580      	push	{r7, lr}
 800e52e:	b084      	sub	sp, #16
 800e530:	af00      	add	r7, sp, #0
 800e532:	6078      	str	r0, [r7, #4]
 800e534:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800e53c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	7a1b      	ldrb	r3, [r3, #8]
 800e544:	f003 0301 	and.w	r3, r3, #1
 800e548:	b2db      	uxtb	r3, r3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d00a      	beq.n	800e564 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800e54e:	2314      	movs	r3, #20
 800e550:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800e558:	89fb      	ldrh	r3, [r7, #14]
 800e55a:	1ad3      	subs	r3, r2, r3
 800e55c:	b29a      	uxth	r2, r3
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e56a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800e56e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800e572:	f640 3068 	movw	r0, #2920	@ 0xb68
 800e576:	f7fc fc85 	bl	800ae84 <FreeRTOS_round_up>
 800e57a:	4602      	mov	r2, r0
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e588:	08db      	lsrs	r3, r3, #3
 800e58a:	4a10      	ldr	r2, [pc, #64]	@ (800e5cc <prvInitialiseTCPFields+0xa0>)
 800e58c:	fba2 2303 	umull	r2, r3, r2, r3
 800e590:	099b      	lsrs	r3, r3, #6
 800e592:	4619      	mov	r1, r3
 800e594:	2001      	movs	r0, #1
 800e596:	f7fc fc35 	bl	800ae04 <FreeRTOS_max_size_t>
 800e59a:	4602      	mov	r2, r0
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800e5a8:	08db      	lsrs	r3, r3, #3
 800e5aa:	4a08      	ldr	r2, [pc, #32]	@ (800e5cc <prvInitialiseTCPFields+0xa0>)
 800e5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800e5b0:	099b      	lsrs	r3, r3, #6
 800e5b2:	4619      	mov	r1, r3
 800e5b4:	2001      	movs	r0, #1
 800e5b6:	f7fc fc25 	bl	800ae04 <FreeRTOS_max_size_t>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800e5c2:	bf00      	nop
 800e5c4:	3710      	adds	r7, #16
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	bd80      	pop	{r7, pc}
 800e5ca:	bf00      	nop
 800e5cc:	2ce33e6d 	.word	0x2ce33e6d

0800e5d0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800e5d0:	b580      	push	{r7, lr}
 800e5d2:	b08a      	sub	sp, #40	@ 0x28
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	60f8      	str	r0, [r7, #12]
 800e5d8:	60b9      	str	r1, [r7, #8]
 800e5da:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800e5dc:	2301      	movs	r3, #1
 800e5de:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	2b0a      	cmp	r3, #10
 800e5e8:	d002      	beq.n	800e5f0 <FreeRTOS_socket+0x20>
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	d101      	bne.n	800e5f4 <FreeRTOS_socket+0x24>
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e000      	b.n	800e5f6 <FreeRTOS_socket+0x26>
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d104      	bne.n	800e604 <FreeRTOS_socket+0x34>
 800e5fa:	f240 2171 	movw	r1, #625	@ 0x271
 800e5fe:	4845      	ldr	r0, [pc, #276]	@ (800e714 <FreeRTOS_socket+0x144>)
 800e600:	f7f3 f9ca 	bl	8001998 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d10c      	bne.n	800e624 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	2b01      	cmp	r3, #1
 800e60e:	d005      	beq.n	800e61c <FreeRTOS_socket+0x4c>
 800e610:	68bb      	ldr	r3, [r7, #8]
 800e612:	2b02      	cmp	r3, #2
 800e614:	d105      	bne.n	800e622 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800e616:	2311      	movs	r3, #17
 800e618:	623b      	str	r3, [r7, #32]
                    break;
 800e61a:	e003      	b.n	800e624 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800e61c:	2306      	movs	r3, #6
 800e61e:	623b      	str	r3, [r7, #32]
                    break;
 800e620:	e000      	b.n	800e624 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800e622:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800e624:	f107 0314 	add.w	r3, r7, #20
 800e628:	6a3a      	ldr	r2, [r7, #32]
 800e62a:	68b9      	ldr	r1, [r7, #8]
 800e62c:	68f8      	ldr	r0, [r7, #12]
 800e62e:	f7ff feff 	bl	800e430 <prvDetermineSocketSize>
 800e632:	4603      	mov	r3, r0
 800e634:	2b00      	cmp	r3, #0
 800e636:	d103      	bne.n	800e640 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e638:	f04f 33ff 	mov.w	r3, #4294967295
 800e63c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e63e:	e063      	b.n	800e708 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800e640:	697b      	ldr	r3, [r7, #20]
 800e642:	4618      	mov	r0, r3
 800e644:	f7f8 f986 	bl	8006954 <pvPortMalloc>
 800e648:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800e64a:	69fb      	ldr	r3, [r7, #28]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d103      	bne.n	800e658 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e650:	f04f 33ff 	mov.w	r3, #4294967295
 800e654:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800e656:	e057      	b.n	800e708 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800e658:	f7f4 feb3 	bl	80033c2 <xEventGroupCreate>
 800e65c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d106      	bne.n	800e672 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800e664:	69f8      	ldr	r0, [r7, #28]
 800e666:	f7f8 fa49 	bl	8006afc <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e66a:	f04f 33ff 	mov.w	r3, #4294967295
 800e66e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e670:	e04a      	b.n	800e708 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	461a      	mov	r2, r3
 800e676:	2100      	movs	r1, #0
 800e678:	69f8      	ldr	r0, [r7, #28]
 800e67a:	f014 fb94 	bl	8022da6 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800e67e:	69fb      	ldr	r3, [r7, #28]
 800e680:	69ba      	ldr	r2, [r7, #24]
 800e682:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	2b02      	cmp	r3, #2
 800e688:	d008      	beq.n	800e69c <FreeRTOS_socket+0xcc>
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2b0a      	cmp	r3, #10
 800e68e:	d10b      	bne.n	800e6a8 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e690:	69fa      	ldr	r2, [r7, #28]
 800e692:	7a13      	ldrb	r3, [r2, #8]
 800e694:	f043 0301 	orr.w	r3, r3, #1
 800e698:	7213      	strb	r3, [r2, #8]
                        break;
 800e69a:	e009      	b.n	800e6b0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e69c:	69fa      	ldr	r2, [r7, #28]
 800e69e:	7a13      	ldrb	r3, [r2, #8]
 800e6a0:	f36f 0300 	bfc	r3, #0, #1
 800e6a4:	7213      	strb	r3, [r2, #8]
                        break;
 800e6a6:	e003      	b.n	800e6b0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800e6a8:	481b      	ldr	r0, [pc, #108]	@ (800e718 <FreeRTOS_socket+0x148>)
 800e6aa:	f014 f853 	bl	8022754 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800e6ae:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800e6b0:	6a3b      	ldr	r3, [r7, #32]
 800e6b2:	2b11      	cmp	r3, #17
 800e6b4:	d105      	bne.n	800e6c2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e6b6:	69fb      	ldr	r3, [r7, #28]
 800e6b8:	3354      	adds	r3, #84	@ 0x54
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f7f5 f856 	bl	800376c <vListInitialise>
 800e6c0:	e007      	b.n	800e6d2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	2b06      	cmp	r3, #6
 800e6c6:	d104      	bne.n	800e6d2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800e6c8:	697b      	ldr	r3, [r7, #20]
 800e6ca:	4619      	mov	r1, r3
 800e6cc:	69f8      	ldr	r0, [r7, #28]
 800e6ce:	f7ff ff2d 	bl	800e52c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800e6d2:	69fb      	ldr	r3, [r7, #28]
 800e6d4:	330c      	adds	r3, #12
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7f5 f868 	bl	80037ac <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800e6dc:	69fb      	ldr	r3, [r7, #28]
 800e6de:	69fa      	ldr	r2, [r7, #28]
 800e6e0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800e6e2:	69fb      	ldr	r3, [r7, #28]
 800e6e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6e8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e6f0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	2202      	movs	r2, #2
 800e6f6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800e6fa:	6a3b      	ldr	r3, [r7, #32]
 800e6fc:	b2da      	uxtb	r2, r3
 800e6fe:	69fb      	ldr	r3, [r7, #28]
 800e700:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800e708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e70a:	4618      	mov	r0, r3
 800e70c:	3728      	adds	r7, #40	@ 0x28
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	08026214 	.word	0x08026214
 800e718:	08026244 	.word	0x08026244

0800e71c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800e71c:	b580      	push	{r7, lr}
 800e71e:	b084      	sub	sp, #16
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800e724:	2200      	movs	r2, #0
 800e726:	2111      	movs	r1, #17
 800e728:	6878      	ldr	r0, [r7, #4]
 800e72a:	f7ff fe49 	bl	800e3c0 <prvValidSocket>
 800e72e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2b01      	cmp	r3, #1
 800e734:	d10d      	bne.n	800e752 <prvMakeSureSocketIsBound+0x36>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	69db      	ldr	r3, [r3, #28]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d109      	bne.n	800e752 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800e73e:	2200      	movs	r2, #0
 800e740:	2100      	movs	r1, #0
 800e742:	6878      	ldr	r0, [r7, #4]
 800e744:	f000 f934 	bl	800e9b0 <FreeRTOS_bind>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d001      	beq.n	800e752 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800e74e:	2300      	movs	r3, #0
 800e750:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800e752:	68fb      	ldr	r3, [r7, #12]
}
 800e754:	4618      	mov	r0, r3
 800e756:	3710      	adds	r7, #16
 800e758:	46bd      	mov	sp, r7
 800e75a:	bd80      	pop	{r7, pc}

0800e75c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800e75c:	b580      	push	{r7, lr}
 800e75e:	b088      	sub	sp, #32
 800e760:	af00      	add	r7, sp, #0
 800e762:	60f8      	str	r0, [r7, #12]
 800e764:	60b9      	str	r1, [r7, #8]
 800e766:	607a      	str	r2, [r7, #4]
 800e768:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e76a:	2300      	movs	r3, #0
 800e76c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e76e:	2304      	movs	r3, #4
 800e770:	753b      	strb	r3, [r7, #20]
 800e772:	2300      	movs	r3, #0
 800e774:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e778:	785b      	ldrb	r3, [r3, #1]
 800e77a:	2b02      	cmp	r3, #2
 800e77c:	d006      	beq.n	800e78c <prvSendUDPPacket+0x30>
 800e77e:	2b0a      	cmp	r3, #10
 800e780:	d109      	bne.n	800e796 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800e782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e784:	68b8      	ldr	r0, [r7, #8]
 800e786:	f7fd f903 	bl	800b990 <xSend_UDP_Update_IPv6>
                break;
 800e78a:	e005      	b.n	800e798 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800e78c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e78e:	68b8      	ldr	r0, [r7, #8]
 800e790:	f7fc fd68 	bl	800b264 <xSend_UDP_Update_IPv4>
                break;
 800e794:	e000      	b.n	800e798 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e796:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800e798:	687a      	ldr	r2, [r7, #4]
 800e79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e79c:	441a      	add	r2, r3
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a4:	885a      	ldrh	r2, [r3, #2]
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	68db      	ldr	r3, [r3, #12]
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e7b4:	68bb      	ldr	r3, [r7, #8]
 800e7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7b8:	3306      	adds	r3, #6
 800e7ba:	68fa      	ldr	r2, [r7, #12]
 800e7bc:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800e7c0:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e7c6:	f107 0314 	add.w	r3, r7, #20
 800e7ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fb fa37 	bl	8009c40 <xSendEventStructToIPTask>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d10b      	bne.n	800e7f0 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d00d      	beq.n	800e800 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e7e8:	6879      	ldr	r1, [r7, #4]
 800e7ea:	68f8      	ldr	r0, [r7, #12]
 800e7ec:	4798      	blx	r3
 800e7ee:	e007      	b.n	800e800 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	f003 0301 	and.w	r3, r3, #1
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d102      	bne.n	800e800 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e7fa:	68b8      	ldr	r0, [r7, #8]
 800e7fc:	f009 f902 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800e800:	69fb      	ldr	r3, [r7, #28]
}
 800e802:	4618      	mov	r0, r3
 800e804:	3720      	adds	r7, #32
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}

0800e80a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b08e      	sub	sp, #56	@ 0x38
 800e80e:	af04      	add	r7, sp, #16
 800e810:	60f8      	str	r0, [r7, #12]
 800e812:	60b9      	str	r1, [r7, #8]
 800e814:	607a      	str	r2, [r7, #4]
 800e816:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e818:	2300      	movs	r3, #0
 800e81a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e820:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e822:	683b      	ldr	r3, [r7, #0]
 800e824:	f003 0310 	and.w	r3, r3, #16
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d104      	bne.n	800e836 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800e82c:	f7fc f94a 	bl	800aac4 <xIsCallingFromIPTask>
 800e830:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e832:	2b00      	cmp	r3, #0
 800e834:	d001      	beq.n	800e83a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800e836:	2300      	movs	r3, #0
 800e838:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e83a:	683b      	ldr	r3, [r7, #0]
 800e83c:	f003 0301 	and.w	r3, r3, #1
 800e840:	2b00      	cmp	r3, #0
 800e842:	d128      	bne.n	800e896 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800e844:	f107 0310 	add.w	r3, r7, #16
 800e848:	4618      	mov	r0, r3
 800e84a:	f7f6 fdbd 	bl	80053c8 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800e84e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	4413      	add	r3, r2
 800e854:	69ba      	ldr	r2, [r7, #24]
 800e856:	4611      	mov	r1, r2
 800e858:	4618      	mov	r0, r3
 800e85a:	f009 f86b 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 800e85e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800e860:	6a3b      	ldr	r3, [r7, #32]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d01b      	beq.n	800e89e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e86c:	4413      	add	r3, r2
 800e86e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	68b9      	ldr	r1, [r7, #8]
 800e874:	69f8      	ldr	r0, [r7, #28]
 800e876:	f014 f989 	bl	8022b8c <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800e87a:	f107 0218 	add.w	r2, r7, #24
 800e87e:	f107 0310 	add.w	r3, r7, #16
 800e882:	4611      	mov	r1, r2
 800e884:	4618      	mov	r0, r3
 800e886:	f7f6 fdd7 	bl	8005438 <xTaskCheckForTimeOut>
 800e88a:	4603      	mov	r3, r0
 800e88c:	2b01      	cmp	r3, #1
 800e88e:	d106      	bne.n	800e89e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800e890:	2300      	movs	r3, #0
 800e892:	61bb      	str	r3, [r7, #24]
 800e894:	e003      	b.n	800e89e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800e896:	68b8      	ldr	r0, [r7, #8]
 800e898:	f7fc f8cc 	bl	800aa34 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800e89c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800e89e:	6a3b      	ldr	r3, [r7, #32]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d010      	beq.n	800e8c6 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e8a8:	6a3b      	ldr	r3, [r7, #32]
 800e8aa:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e8b0:	9202      	str	r2, [sp, #8]
 800e8b2:	9301      	str	r3, [sp, #4]
 800e8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	6a39      	ldr	r1, [r7, #32]
 800e8be:	68f8      	ldr	r0, [r7, #12]
 800e8c0:	f7ff ff4c 	bl	800e75c <prvSendUDPPacket>
 800e8c4:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800e8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3728      	adds	r7, #40	@ 0x28
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b090      	sub	sp, #64	@ 0x40
 800e8d4:	af02      	add	r7, sp, #8
 800e8d6:	60f8      	str	r0, [r7, #12]
 800e8d8:	60b9      	str	r1, [r7, #8]
 800e8da:	607a      	str	r2, [r7, #4]
 800e8dc:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800e8ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d013      	beq.n	800e91c <FreeRTOS_sendto+0x4c>
 800e8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8f6:	785b      	ldrb	r3, [r3, #1]
 800e8f8:	2b0a      	cmp	r3, #10
 800e8fa:	d00f      	beq.n	800e91c <FreeRTOS_sendto+0x4c>
 800e8fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8fe:	785b      	ldrb	r3, [r3, #1]
 800e900:	2b02      	cmp	r3, #2
 800e902:	d00b      	beq.n	800e91c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800e904:	f107 0310 	add.w	r3, r7, #16
 800e908:	2218      	movs	r2, #24
 800e90a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e90c:	4618      	mov	r0, r3
 800e90e:	f014 f93d 	bl	8022b8c <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800e912:	2302      	movs	r3, #2
 800e914:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800e916:	f107 0310 	add.w	r3, r7, #16
 800e91a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800e91c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d104      	bne.n	800e92c <FreeRTOS_sendto+0x5c>
 800e922:	f240 6143 	movw	r1, #1603	@ 0x643
 800e926:	4820      	ldr	r0, [pc, #128]	@ (800e9a8 <FreeRTOS_sendto+0xd8>)
 800e928:	f7f3 f836 	bl	8001998 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800e92c:	68bb      	ldr	r3, [r7, #8]
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d104      	bne.n	800e93c <FreeRTOS_sendto+0x6c>
 800e932:	f240 6144 	movw	r1, #1604	@ 0x644
 800e936:	481c      	ldr	r0, [pc, #112]	@ (800e9a8 <FreeRTOS_sendto+0xd8>)
 800e938:	f7f3 f82e 	bl	8001998 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800e93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e93e:	785b      	ldrb	r3, [r3, #1]
 800e940:	2b02      	cmp	r3, #2
 800e942:	d007      	beq.n	800e954 <FreeRTOS_sendto+0x84>
 800e944:	2b0a      	cmp	r3, #10
 800e946:	d10b      	bne.n	800e960 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800e948:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800e94c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800e94e:	233e      	movs	r3, #62	@ 0x3e
 800e950:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e952:	e00c      	b.n	800e96e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800e954:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e958:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800e95a:	232a      	movs	r3, #42	@ 0x2a
 800e95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e95e:	e006      	b.n	800e96e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800e960:	4812      	ldr	r0, [pc, #72]	@ (800e9ac <FreeRTOS_sendto+0xdc>)
 800e962:	f013 fef7 	bl	8022754 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e966:	f06f 0315 	mvn.w	r3, #21
 800e96a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e96c:	bf00      	nop
    }

    if( lReturn == 0 )
 800e96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e970:	2b00      	cmp	r3, #0
 800e972:	d114      	bne.n	800e99e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e978:	429a      	cmp	r2, r3
 800e97a:	d810      	bhi.n	800e99e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800e97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e97e:	f7ff fecd 	bl	800e71c <prvMakeSureSocketIsBound>
 800e982:	4603      	mov	r3, r0
 800e984:	2b01      	cmp	r3, #1
 800e986:	d10a      	bne.n	800e99e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800e988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e98a:	9301      	str	r3, [sp, #4]
 800e98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e998:	f7ff ff37 	bl	800e80a <prvSendTo_ActualSend>
 800e99c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800e99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3738      	adds	r7, #56	@ 0x38
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	08026214 	.word	0x08026214
 800e9ac:	080262c8 	.word	0x080262c8

0800e9b0 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b090      	sub	sp, #64	@ 0x40
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	60f8      	str	r0, [r7, #12]
 800e9b8:	60b9      	str	r1, [r7, #8]
 800e9ba:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d013      	beq.n	800e9f2 <FreeRTOS_bind+0x42>
 800e9ca:	68bb      	ldr	r3, [r7, #8]
 800e9cc:	785b      	ldrb	r3, [r3, #1]
 800e9ce:	2b0a      	cmp	r3, #10
 800e9d0:	d00f      	beq.n	800e9f2 <FreeRTOS_bind+0x42>
 800e9d2:	68bb      	ldr	r3, [r7, #8]
 800e9d4:	785b      	ldrb	r3, [r3, #1]
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d00b      	beq.n	800e9f2 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800e9da:	f107 0310 	add.w	r3, r7, #16
 800e9de:	2218      	movs	r2, #24
 800e9e0:	68b9      	ldr	r1, [r7, #8]
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	f014 f8d2 	bl	8022b8c <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800e9ec:	f107 0310 	add.w	r3, r7, #16
 800e9f0:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800e9f2:	f7fc f867 	bl	800aac4 <xIsCallingFromIPTask>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d004      	beq.n	800ea06 <FreeRTOS_bind+0x56>
 800e9fc:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800ea00:	484b      	ldr	r0, [pc, #300]	@ (800eb30 <FreeRTOS_bind+0x180>)
 800ea02:	f7f2 ffc9 	bl	8001998 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800ea06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ea08:	f002 f922 	bl	8010c50 <xSocketValid>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d103      	bne.n	800ea1a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea12:	f06f 0315 	mvn.w	r3, #21
 800ea16:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea18:	e084      	b.n	800eb24 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ea1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea1c:	69db      	ldr	r3, [r3, #28]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d009      	beq.n	800ea36 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800ea22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea24:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ea26:	4619      	mov	r1, r3
 800ea28:	4842      	ldr	r0, [pc, #264]	@ (800eb34 <FreeRTOS_bind+0x184>)
 800ea2a:	f013 fe93 	bl	8022754 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ea2e:	f06f 0315 	mvn.w	r3, #21
 800ea32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ea34:	e076      	b.n	800eb24 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800ea36:	2309      	movs	r3, #9
 800ea38:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d042      	beq.n	800eacc <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	785b      	ldrb	r3, [r3, #1]
 800ea4a:	2b02      	cmp	r3, #2
 800ea4c:	d010      	beq.n	800ea70 <FreeRTOS_bind+0xc0>
 800ea4e:	2b0a      	cmp	r3, #10
 800ea50:	d129      	bne.n	800eaa6 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ea52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea54:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ea58:	68bb      	ldr	r3, [r7, #8]
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	2210      	movs	r2, #16
 800ea5e:	4619      	mov	r1, r3
 800ea60:	f014 f894 	bl	8022b8c <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800ea64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea66:	7a13      	ldrb	r3, [r2, #8]
 800ea68:	f043 0301 	orr.w	r3, r3, #1
 800ea6c:	7213      	strb	r3, [r2, #8]
                        break;
 800ea6e:	e01e      	b.n	800eaae <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	689b      	ldr	r3, [r3, #8]
 800ea74:	061a      	lsls	r2, r3, #24
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	689b      	ldr	r3, [r3, #8]
 800ea7a:	021b      	lsls	r3, r3, #8
 800ea7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ea80:	431a      	orrs	r2, r3
 800ea82:	68bb      	ldr	r3, [r7, #8]
 800ea84:	689b      	ldr	r3, [r3, #8]
 800ea86:	0a1b      	lsrs	r3, r3, #8
 800ea88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ea8c:	431a      	orrs	r2, r3
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	689b      	ldr	r3, [r3, #8]
 800ea92:	0e1b      	lsrs	r3, r3, #24
 800ea94:	431a      	orrs	r2, r3
 800ea96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ea98:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800ea9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ea9c:	7a13      	ldrb	r3, [r2, #8]
 800ea9e:	f36f 0300 	bfc	r3, #0, #1
 800eaa2:	7213      	strb	r3, [r2, #8]
                        break;
 800eaa4:	e003      	b.n	800eaae <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800eaa6:	4824      	ldr	r0, [pc, #144]	@ (800eb38 <FreeRTOS_bind+0x188>)
 800eaa8:	f013 fe54 	bl	8022754 <lUDPLoggingPrintf>
                    break;
 800eaac:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800eaae:	68bb      	ldr	r3, [r7, #8]
 800eab0:	885b      	ldrh	r3, [r3, #2]
 800eab2:	021b      	lsls	r3, r3, #8
 800eab4:	b21a      	sxth	r2, r3
 800eab6:	68bb      	ldr	r3, [r7, #8]
 800eab8:	885b      	ldrh	r3, [r3, #2]
 800eaba:	0a1b      	lsrs	r3, r3, #8
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	b21b      	sxth	r3, r3
 800eac0:	4313      	orrs	r3, r2
 800eac2:	b21b      	sxth	r3, r3
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eac8:	871a      	strh	r2, [r3, #56]	@ 0x38
 800eaca:	e009      	b.n	800eae0 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800eacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eace:	2200      	movs	r2, #0
 800ead0:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ead2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ead4:	3328      	adds	r3, #40	@ 0x28
 800ead6:	2210      	movs	r2, #16
 800ead8:	2100      	movs	r1, #0
 800eada:	4618      	mov	r0, r3
 800eadc:	f014 f963 	bl	8022da6 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800eae0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800eae4:	f04f 31ff 	mov.w	r1, #4294967295
 800eae8:	4618      	mov	r0, r3
 800eaea:	f7fb f8a9 	bl	8009c40 <xSendEventStructToIPTask>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d106      	bne.n	800eb02 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800eaf4:	4811      	ldr	r0, [pc, #68]	@ (800eb3c <FreeRTOS_bind+0x18c>)
 800eaf6:	f013 fe2d 	bl	8022754 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800eafa:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800eafe:	637b      	str	r3, [r7, #52]	@ 0x34
 800eb00:	e010      	b.n	800eb24 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800eb02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb04:	6858      	ldr	r0, [r3, #4]
 800eb06:	f04f 33ff 	mov.w	r3, #4294967295
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	2300      	movs	r3, #0
 800eb0e:	2201      	movs	r2, #1
 800eb10:	2110      	movs	r1, #16
 800eb12:	f7f4 fc6d 	bl	80033f0 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800eb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb18:	69db      	ldr	r3, [r3, #28]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d102      	bne.n	800eb24 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eb1e:	f06f 0315 	mvn.w	r3, #21
 800eb22:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800eb24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3738      	adds	r7, #56	@ 0x38
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	bd80      	pop	{r7, pc}
 800eb2e:	bf00      	nop
 800eb30:	08026214 	.word	0x08026214
 800eb34:	080262f0 	.word	0x080262f0
 800eb38:	0802631c 	.word	0x0802631c
 800eb3c:	08026344 	.word	0x08026344

0800eb40 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b086      	sub	sp, #24
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800eb4e:	2300      	movs	r3, #0
 800eb50:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800eb52:	683b      	ldr	r3, [r7, #0]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d004      	beq.n	800eb62 <prvSocketBindAdd+0x22>
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eb5e:	2b06      	cmp	r3, #6
 800eb60:	d024      	beq.n	800ebac <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	885b      	ldrh	r3, [r3, #2]
 800eb66:	4619      	mov	r1, r3
 800eb68:	6878      	ldr	r0, [r7, #4]
 800eb6a:	f000 fdf1 	bl	800f750 <pxListFindListItemWithValue>
 800eb6e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d01b      	beq.n	800ebac <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eb7a:	2b06      	cmp	r3, #6
 800eb7c:	d101      	bne.n	800eb82 <prvSocketBindAdd+0x42>
 800eb7e:	493e      	ldr	r1, [pc, #248]	@ (800ec78 <prvSocketBindAdd+0x138>)
 800eb80:	e000      	b.n	800eb84 <prvSocketBindAdd+0x44>
 800eb82:	493e      	ldr	r1, [pc, #248]	@ (800ec7c <prvSocketBindAdd+0x13c>)
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	885b      	ldrh	r3, [r3, #2]
 800eb88:	021b      	lsls	r3, r3, #8
 800eb8a:	b21a      	sxth	r2, r3
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	885b      	ldrh	r3, [r3, #2]
 800eb90:	0a1b      	lsrs	r3, r3, #8
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	b21b      	sxth	r3, r3
 800eb96:	4313      	orrs	r3, r2
 800eb98:	b21b      	sxth	r3, r3
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	461a      	mov	r2, r3
 800eb9e:	4838      	ldr	r0, [pc, #224]	@ (800ec80 <prvSocketBindAdd+0x140>)
 800eba0:	f013 fdd8 	bl	8022754 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800eba4:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800eba8:	617b      	str	r3, [r7, #20]
 800ebaa:	e060      	b.n	800ec6e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	885b      	ldrh	r3, [r3, #2]
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800ebb6:	68bb      	ldr	r3, [r7, #8]
 800ebb8:	885b      	ldrh	r3, [r3, #2]
 800ebba:	021b      	lsls	r3, r3, #8
 800ebbc:	b21a      	sxth	r2, r3
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	885b      	ldrh	r3, [r3, #2]
 800ebc2:	0a1b      	lsrs	r3, r3, #8
 800ebc4:	b29b      	uxth	r3, r3
 800ebc6:	b21b      	sxth	r3, r3
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	b21b      	sxth	r3, r3
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	68fb      	ldr	r3, [r7, #12]
 800ebd0:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	785b      	ldrb	r3, [r3, #1]
 800ebd6:	2b0a      	cmp	r3, #10
 800ebd8:	d109      	bne.n	800ebee <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800ebe0:	68bb      	ldr	r3, [r7, #8]
 800ebe2:	3308      	adds	r3, #8
 800ebe4:	2210      	movs	r2, #16
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	f013 ffd0 	bl	8022b8c <memcpy>
 800ebec:	e00c      	b.n	800ec08 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	689b      	ldr	r3, [r3, #8]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d008      	beq.n	800ec08 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800ebf6:	68bb      	ldr	r3, [r7, #8]
 800ebf8:	689b      	ldr	r3, [r3, #8]
 800ebfa:	2107      	movs	r1, #7
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7fe ffb7 	bl	800db70 <FreeRTOS_FindEndPointOnIP_IPv4>
 800ec02:	4602      	mov	r2, r0
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d019      	beq.n	800ec44 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	061a      	lsls	r2, r3, #24
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	021b      	lsls	r3, r3, #8
 800ec20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec24:	431a      	orrs	r2, r3
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	0a1b      	lsrs	r3, r3, #8
 800ec2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ec32:	431a      	orrs	r2, r3
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	0e1b      	lsrs	r3, r3, #24
 800ec3c:	431a      	orrs	r2, r3
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	629a      	str	r2, [r3, #40]	@ 0x28
 800ec42:	e00a      	b.n	800ec5a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800ec44:	68bb      	ldr	r3, [r7, #8]
 800ec46:	785b      	ldrb	r3, [r3, #1]
 800ec48:	2b0a      	cmp	r3, #10
 800ec4a:	d006      	beq.n	800ec5a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	3328      	adds	r3, #40	@ 0x28
 800ec50:	2210      	movs	r2, #16
 800ec52:	2100      	movs	r1, #0
 800ec54:	4618      	mov	r0, r3
 800ec56:	f014 f8a6 	bl	8022da6 <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800ec5a:	f7f5 fef9 	bl	8004a50 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	330c      	adds	r3, #12
 800ec62:	4619      	mov	r1, r3
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f7f4 fdae 	bl	80037c6 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800ec6a:	f7f5 feff 	bl	8004a6c <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800ec6e:	697b      	ldr	r3, [r7, #20]
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3718      	adds	r7, #24
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	08026368 	.word	0x08026368
 800ec7c:	0802636c 	.word	0x0802636c
 800ec80:	08026370 	.word	0x08026370

0800ec84 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b08e      	sub	sp, #56	@ 0x38
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	60f8      	str	r0, [r7, #12]
 800ec8c:	60b9      	str	r1, [r7, #8]
 800ec8e:	607a      	str	r2, [r7, #4]
 800ec90:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800ec92:	2300      	movs	r3, #0
 800ec94:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f001 ffd8 	bl	8010c50 <xSocketValid>
 800eca0:	4603      	mov	r3, r0
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d004      	beq.n	800ecb0 <vSocketBind+0x2c>
 800eca6:	f240 716f 	movw	r1, #1903	@ 0x76f
 800ecaa:	4828      	ldr	r0, [pc, #160]	@ (800ed4c <vSocketBind+0xc8>)
 800ecac:	f7f2 fe74 	bl	8001998 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ecb6:	2b06      	cmp	r3, #6
 800ecb8:	d102      	bne.n	800ecc0 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800ecba:	4b25      	ldr	r3, [pc, #148]	@ (800ed50 <vSocketBind+0xcc>)
 800ecbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800ecbe:	e001      	b.n	800ecc4 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800ecc0:	4b24      	ldr	r3, [pc, #144]	@ (800ed54 <vSocketBind+0xd0>)
 800ecc2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800ecc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d115      	bne.n	800ecf6 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800ecca:	f107 0314 	add.w	r3, r7, #20
 800ecce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800ecd0:	2218      	movs	r2, #24
 800ecd2:	2100      	movs	r1, #0
 800ecd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ecd6:	f014 f866 	bl	8022da6 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	7a1b      	ldrb	r3, [r3, #8]
 800ecde:	f003 0301 	and.w	r3, r3, #1
 800ece2:	b2db      	uxtb	r3, r3
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d003      	beq.n	800ecf0 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800ece8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecea:	220a      	movs	r2, #10
 800ecec:	705a      	strb	r2, [r3, #1]
 800ecee:	e002      	b.n	800ecf6 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800ecf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf2:	2202      	movs	r2, #2
 800ecf4:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800ecf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d104      	bne.n	800ed06 <vSocketBind+0x82>
 800ecfc:	f240 719b 	movw	r1, #1947	@ 0x79b
 800ed00:	4812      	ldr	r0, [pc, #72]	@ (800ed4c <vSocketBind+0xc8>)
 800ed02:	f7f2 fe49 	bl	8001998 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800ed06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed08:	885b      	ldrh	r3, [r3, #2]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d111      	bne.n	800ed32 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed14:	4618      	mov	r0, r3
 800ed16:	f000 fcc3 	bl	800f6a0 <prvGetPrivatePortNumber>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	461a      	mov	r2, r3
 800ed1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed20:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800ed22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed24:	885b      	ldrh	r3, [r3, #2]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d103      	bne.n	800ed32 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800ed2a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800ed2e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800ed30:	e006      	b.n	800ed40 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ed38:	68f8      	ldr	r0, [r7, #12]
 800ed3a:	f7ff ff01 	bl	800eb40 <prvSocketBindAdd>
 800ed3e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800ed40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800ed42:	4618      	mov	r0, r3
 800ed44:	3738      	adds	r7, #56	@ 0x38
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	08026214 	.word	0x08026214
 800ed50:	20001608 	.word	0x20001608
 800ed54:	200015f4 	.word	0x200015f4

0800ed58 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b086      	sub	sp, #24
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800ed64:	230a      	movs	r3, #10
 800ed66:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f001 ff6f 	bl	8010c50 <xSocketValid>
 800ed72:	4603      	mov	r3, r0
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d102      	bne.n	800ed7e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	617b      	str	r3, [r7, #20]
 800ed7c:	e02f      	b.n	800edde <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ed7e:	693b      	ldr	r3, [r7, #16]
 800ed80:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed84:	2b06      	cmp	r3, #6
 800ed86:	d10c      	bne.n	800eda2 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	2200      	movs	r2, #0
 800ed8c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800ed90:	693b      	ldr	r3, [r7, #16]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800eda0:	e00a      	b.n	800edb8 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800eda2:	693b      	ldr	r3, [r7, #16]
 800eda4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eda8:	2b11      	cmp	r3, #17
 800edaa:	d105      	bne.n	800edb8 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	2200      	movs	r2, #0
 800edb0:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	2200      	movs	r2, #0
 800edb6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800edb8:	f107 0308 	add.w	r3, r7, #8
 800edbc:	f04f 31ff 	mov.w	r1, #4294967295
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fa ff3d 	bl	8009c40 <xSendEventStructToIPTask>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d106      	bne.n	800edda <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800edcc:	4806      	ldr	r0, [pc, #24]	@ (800ede8 <FreeRTOS_closesocket+0x90>)
 800edce:	f013 fcc1 	bl	8022754 <lUDPLoggingPrintf>
            xResult = -1;
 800edd2:	f04f 33ff 	mov.w	r3, #4294967295
 800edd6:	617b      	str	r3, [r7, #20]
 800edd8:	e001      	b.n	800edde <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800edda:	2301      	movs	r3, #1
 800eddc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800edde:	697b      	ldr	r3, [r7, #20]
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	08026394 	.word	0x08026394

0800edec <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800edec:	b590      	push	{r4, r7, lr}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800edfa:	2b06      	cmp	r3, #6
 800edfc:	d129      	bne.n	800ee52 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d005      	beq.n	800ee14 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f008 fdf8 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f007 f804 	bl	8015e28 <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d005      	beq.n	800ee36 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7f7 fe63 	bl	8006afc <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d005      	beq.n	800ee4c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7f7 fe58 	bl	8006afc <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 f8bd 	bl	800efcc <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	69db      	ldr	r3, [r3, #28]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d008      	beq.n	800ee6c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800ee5a:	f7f5 fdf9 	bl	8004a50 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	330c      	adds	r3, #12
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7f4 fd0c 	bl	8003880 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800ee68:	f7f5 fe00 	bl	8004a6c <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee72:	2b11      	cmp	r3, #17
 800ee74:	d10f      	bne.n	800ee96 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800ee76:	e00a      	b.n	800ee8e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7f4 fcfc 	bl	8003880 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800ee88:	68f8      	ldr	r0, [r7, #12]
 800ee8a:	f008 fdbb 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d1f0      	bne.n	800ee78 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	685b      	ldr	r3, [r3, #4]
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d004      	beq.n	800eea8 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	685b      	ldr	r3, [r3, #4]
 800eea2:	4618      	mov	r0, r3
 800eea4:	f7f4 fc0a 	bl	80036bc <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eeae:	2b06      	cmp	r3, #6
 800eeb0:	d10c      	bne.n	800eecc <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800eeb2:	6878      	ldr	r0, [r7, #4]
 800eeb4:	f000 f816 	bl	800eee4 <prvSocketProps>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	f008 fdf5 	bl	8017aa8 <uxGetNumberOfFreeNetworkBuffers>
 800eebe:	4602      	mov	r2, r0
 800eec0:	4b06      	ldr	r3, [pc, #24]	@ (800eedc <vSocketClose+0xf0>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4621      	mov	r1, r4
 800eec6:	4806      	ldr	r0, [pc, #24]	@ (800eee0 <vSocketClose+0xf4>)
 800eec8:	f013 fc44 	bl	8022754 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800eecc:	6878      	ldr	r0, [r7, #4]
 800eece:	f7f7 fe15 	bl	8006afc <vPortFree>

    return NULL;
 800eed2:	2300      	movs	r3, #0
} /* Tested */
 800eed4:	4618      	mov	r0, r3
 800eed6:	3714      	adds	r7, #20
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd90      	pop	{r4, r7, pc}
 800eedc:	20001608 	.word	0x20001608
 800eee0:	080263b4 	.word	0x080263b4

0800eee4 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b086      	sub	sp, #24
 800eee8:	af04      	add	r7, sp, #16
 800eeea:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eef2:	2b06      	cmp	r3, #6
 800eef4:	d132      	bne.n	800ef5c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	7a1b      	ldrb	r3, [r3, #8]
 800eefa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d002      	beq.n	800ef0a <prvSocketProps+0x26>
 800ef04:	2b01      	cmp	r3, #1
 800ef06:	d014      	beq.n	800ef32 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800ef08:	e050      	b.n	800efac <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ef12:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800ef18:	687a      	ldr	r2, [r7, #4]
 800ef1a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800ef1e:	9202      	str	r2, [sp, #8]
 800ef20:	9301      	str	r3, [sp, #4]
 800ef22:	9000      	str	r0, [sp, #0]
 800ef24:	460b      	mov	r3, r1
 800ef26:	4a24      	ldr	r2, [pc, #144]	@ (800efb8 <prvSocketProps+0xd4>)
 800ef28:	215c      	movs	r1, #92	@ 0x5c
 800ef2a:	4824      	ldr	r0, [pc, #144]	@ (800efbc <prvSocketProps+0xd8>)
 800ef2c:	f014 fc3e 	bl	80237ac <snprintf>
                            break;
 800ef30:	e03c      	b.n	800efac <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800ef3c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800ef48:	9202      	str	r2, [sp, #8]
 800ef4a:	9301      	str	r3, [sp, #4]
 800ef4c:	9000      	str	r0, [sp, #0]
 800ef4e:	460b      	mov	r3, r1
 800ef50:	4a1b      	ldr	r2, [pc, #108]	@ (800efc0 <prvSocketProps+0xdc>)
 800ef52:	215c      	movs	r1, #92	@ 0x5c
 800ef54:	4819      	ldr	r0, [pc, #100]	@ (800efbc <prvSocketProps+0xd8>)
 800ef56:	f014 fc29 	bl	80237ac <snprintf>
                            break;
 800ef5a:	e027      	b.n	800efac <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ef62:	2b11      	cmp	r3, #17
 800ef64:	d122      	bne.n	800efac <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	7a1b      	ldrb	r3, [r3, #8]
 800ef6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800ef6e:	b2db      	uxtb	r3, r3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d002      	beq.n	800ef7a <prvSocketProps+0x96>
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d00c      	beq.n	800ef92 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800ef78:	e018      	b.n	800efac <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800ef82:	9300      	str	r3, [sp, #0]
 800ef84:	4613      	mov	r3, r2
 800ef86:	4a0f      	ldr	r2, [pc, #60]	@ (800efc4 <prvSocketProps+0xe0>)
 800ef88:	215c      	movs	r1, #92	@ 0x5c
 800ef8a:	480c      	ldr	r0, [pc, #48]	@ (800efbc <prvSocketProps+0xd8>)
 800ef8c:	f014 fc0e 	bl	80237ac <snprintf>
                        break;
 800ef90:	e00c      	b.n	800efac <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800ef9c:	9300      	str	r3, [sp, #0]
 800ef9e:	4613      	mov	r3, r2
 800efa0:	4a09      	ldr	r2, [pc, #36]	@ (800efc8 <prvSocketProps+0xe4>)
 800efa2:	215c      	movs	r1, #92	@ 0x5c
 800efa4:	4805      	ldr	r0, [pc, #20]	@ (800efbc <prvSocketProps+0xd8>)
 800efa6:	f014 fc01 	bl	80237ac <snprintf>
                        break;
 800efaa:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800efac:	4b03      	ldr	r3, [pc, #12]	@ (800efbc <prvSocketProps+0xd8>)
    }
 800efae:	4618      	mov	r0, r3
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	080263e8 	.word	0x080263e8
 800efbc:	20001598 	.word	0x20001598
 800efc0:	08026408 	.word	0x08026408
 800efc4:	08026428 	.word	0x08026428
 800efc8:	08026438 	.word	0x08026438

0800efcc <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800efcc:	b580      	push	{r7, lr}
 800efce:	b088      	sub	sp, #32
 800efd0:	af02      	add	r7, sp, #8
 800efd2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800efd4:	4b3c      	ldr	r3, [pc, #240]	@ (800f0c8 <prvTCPSetSocketCount+0xfc>)
 800efd6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800efdc:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d12b      	bne.n	800f040 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800efee:	e022      	b.n	800f036 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	68db      	ldr	r3, [r3, #12]
 800eff4:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800eff6:	697b      	ldr	r3, [r7, #20]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f002:	2b01      	cmp	r3, #1
 800f004:	d017      	beq.n	800f036 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800f00a:	89fa      	ldrh	r2, [r7, #14]
 800f00c:	429a      	cmp	r2, r3
 800f00e:	d112      	bne.n	800f036 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f016:	f003 0304 	and.w	r3, r3, #4
 800f01a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d107      	bne.n	800f030 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f026:	f003 0302 	and.w	r3, r3, #2
 800f02a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d002      	beq.n	800f036 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800f030:	68b8      	ldr	r0, [r7, #8]
 800f032:	f7ff fedb 	bl	800edec <vSocketClose>
            while( pxIterator != pxEnd )
 800f036:	697a      	ldr	r2, [r7, #20]
 800f038:	693b      	ldr	r3, [r7, #16]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d1d8      	bne.n	800eff0 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800f03e:	e03e      	b.n	800f0be <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800f040:	693b      	ldr	r3, [r7, #16]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	617b      	str	r3, [r7, #20]
 800f046:	e036      	b.n	800f0b6 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	68db      	ldr	r3, [r3, #12]
 800f04c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f054:	2b01      	cmp	r3, #1
 800f056:	d12b      	bne.n	800f0b0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800f05c:	89fa      	ldrh	r2, [r7, #14]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d126      	bne.n	800f0b0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800f062:	68bb      	ldr	r3, [r7, #8]
 800f064:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d021      	beq.n	800f0b0 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f072:	3b01      	subs	r3, #1
 800f074:	b29a      	uxth	r2, r3
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800f07c:	68bb      	ldr	r3, [r7, #8]
 800f07e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f080:	4619      	mov	r1, r3
 800f082:	68bb      	ldr	r3, [r7, #8]
 800f084:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f088:	461a      	mov	r2, r3
 800f08a:	68bb      	ldr	r3, [r7, #8]
 800f08c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800f090:	4618      	mov	r0, r3
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800f098:	2b01      	cmp	r3, #1
 800f09a:	d101      	bne.n	800f0a0 <prvTCPSetSocketCount+0xd4>
 800f09c:	4b0b      	ldr	r3, [pc, #44]	@ (800f0cc <prvTCPSetSocketCount+0x100>)
 800f09e:	e000      	b.n	800f0a2 <prvTCPSetSocketCount+0xd6>
 800f0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d0 <prvTCPSetSocketCount+0x104>)
 800f0a2:	9300      	str	r3, [sp, #0]
 800f0a4:	4603      	mov	r3, r0
 800f0a6:	480b      	ldr	r0, [pc, #44]	@ (800f0d4 <prvTCPSetSocketCount+0x108>)
 800f0a8:	f013 fb54 	bl	8022754 <lUDPLoggingPrintf>
                    break;
 800f0ac:	bf00      	nop
    }
 800f0ae:	e006      	b.n	800f0be <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	685b      	ldr	r3, [r3, #4]
 800f0b4:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800f0b6:	697a      	ldr	r2, [r7, #20]
 800f0b8:	693b      	ldr	r3, [r7, #16]
 800f0ba:	429a      	cmp	r2, r3
 800f0bc:	d1c4      	bne.n	800f048 <prvTCPSetSocketCount+0x7c>
    }
 800f0be:	bf00      	nop
 800f0c0:	3718      	adds	r7, #24
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}
 800f0c6:	bf00      	nop
 800f0c8:	20001610 	.word	0x20001610
 800f0cc:	08026448 	.word	0x08026448
 800f0d0:	0802644c 	.word	0x0802644c
 800f0d4:	08026450 	.word	0x08026450

0800f0d8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b086      	sub	sp, #24
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	60f8      	str	r0, [r7, #12]
 800f0e0:	60b9      	str	r1, [r7, #8]
 800f0e2:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f0ea:	2b06      	cmp	r3, #6
 800f0ec:	d00d      	beq.n	800f10a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	2b04      	cmp	r3, #4
 800f0f2:	d101      	bne.n	800f0f8 <prvSockopt_so_buffer+0x20>
 800f0f4:	4b23      	ldr	r3, [pc, #140]	@ (800f184 <prvSockopt_so_buffer+0xac>)
 800f0f6:	e000      	b.n	800f0fa <prvSockopt_so_buffer+0x22>
 800f0f8:	4b23      	ldr	r3, [pc, #140]	@ (800f188 <prvSockopt_so_buffer+0xb0>)
 800f0fa:	4619      	mov	r1, r3
 800f0fc:	4823      	ldr	r0, [pc, #140]	@ (800f18c <prvSockopt_so_buffer+0xb4>)
 800f0fe:	f013 fb29 	bl	8022754 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f102:	f06f 0315 	mvn.w	r3, #21
 800f106:	617b      	str	r3, [r7, #20]
 800f108:	e036      	b.n	800f178 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	2b04      	cmp	r3, #4
 800f10e:	d104      	bne.n	800f11a <prvSockopt_so_buffer+0x42>
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f116:	2b00      	cmp	r3, #0
 800f118:	d107      	bne.n	800f12a <prvSockopt_so_buffer+0x52>
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	2b05      	cmp	r3, #5
 800f11e:	d112      	bne.n	800f146 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f126:	2b00      	cmp	r3, #0
 800f128:	d00d      	beq.n	800f146 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	2b04      	cmp	r3, #4
 800f12e:	d101      	bne.n	800f134 <prvSockopt_so_buffer+0x5c>
 800f130:	4b14      	ldr	r3, [pc, #80]	@ (800f184 <prvSockopt_so_buffer+0xac>)
 800f132:	e000      	b.n	800f136 <prvSockopt_so_buffer+0x5e>
 800f134:	4b14      	ldr	r3, [pc, #80]	@ (800f188 <prvSockopt_so_buffer+0xb0>)
 800f136:	4619      	mov	r1, r3
 800f138:	4815      	ldr	r0, [pc, #84]	@ (800f190 <prvSockopt_so_buffer+0xb8>)
 800f13a:	f013 fb0b 	bl	8022754 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f13e:	f06f 0315 	mvn.w	r3, #21
 800f142:	617b      	str	r3, [r7, #20]
 800f144:	e018      	b.n	800f178 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	2b04      	cmp	r3, #4
 800f150:	d10c      	bne.n	800f16c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800f158:	4619      	mov	r1, r3
 800f15a:	6938      	ldr	r0, [r7, #16]
 800f15c:	f7fb fe92 	bl	800ae84 <FreeRTOS_round_up>
 800f160:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	693a      	ldr	r2, [r7, #16]
 800f166:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800f16a:	e003      	b.n	800f174 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	693a      	ldr	r2, [r7, #16]
 800f170:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800f178:	697b      	ldr	r3, [r7, #20]
    }
 800f17a:	4618      	mov	r0, r3
 800f17c:	3718      	adds	r7, #24
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	0802647c 	.word	0x0802647c
 800f188:	08026480 	.word	0x08026480
 800f18c:	08026484 	.word	0x08026484
 800f190:	080264a8 	.word	0x080264a8

0800f194 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800f194:	b480      	push	{r7}
 800f196:	b087      	sub	sp, #28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800f1a0:	2300      	movs	r3, #0
 800f1a2:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	2b09      	cmp	r3, #9
 800f1a8:	d002      	beq.n	800f1b0 <prvSetOptionCallback+0x1c>
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	2b0a      	cmp	r3, #10
 800f1ae:	d102      	bne.n	800f1b6 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800f1b0:	2311      	movs	r3, #17
 800f1b2:	613b      	str	r3, [r7, #16]
 800f1b4:	e001      	b.n	800f1ba <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800f1b6:	2306      	movs	r3, #6
 800f1b8:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	b2db      	uxtb	r3, r3
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d002      	beq.n	800f1ce <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f1c8:	f06f 0315 	mvn.w	r3, #21
 800f1cc:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d131      	bne.n	800f238 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	3b06      	subs	r3, #6
 800f1d8:	2b04      	cmp	r3, #4
 800f1da:	d829      	bhi.n	800f230 <prvSetOptionCallback+0x9c>
 800f1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e4 <prvSetOptionCallback+0x50>)
 800f1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e2:	bf00      	nop
 800f1e4:	0800f1f9 	.word	0x0800f1f9
 800f1e8:	0800f205 	.word	0x0800f205
 800f1ec:	0800f211 	.word	0x0800f211
 800f1f0:	0800f21d 	.word	0x0800f21d
 800f1f4:	0800f227 	.word	0x0800f227
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681a      	ldr	r2, [r3, #0]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800f202:	e019      	b.n	800f238 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	685a      	ldr	r2, [r3, #4]
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800f20e:	e013      	b.n	800f238 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	689a      	ldr	r2, [r3, #8]
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800f21a:	e00d      	b.n	800f238 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	68da      	ldr	r2, [r3, #12]
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800f224:	e008      	b.n	800f238 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	691a      	ldr	r2, [r3, #16]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800f22e:	e003      	b.n	800f238 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f230:	f06f 0315 	mvn.w	r3, #21
 800f234:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800f236:	bf00      	nop
            }
        }

        return xReturn;
 800f238:	697b      	ldr	r3, [r7, #20]
    }
 800f23a:	4618      	mov	r0, r3
 800f23c:	371c      	adds	r7, #28
 800f23e:	46bd      	mov	sp, r7
 800f240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f244:	4770      	bx	lr
 800f246:	bf00      	nop

0800f248 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800f248:	b580      	push	{r7, lr}
 800f24a:	b086      	sub	sp, #24
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
 800f250:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f252:	f06f 0315 	mvn.w	r3, #21
 800f256:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	3354      	adds	r3, #84	@ 0x54
 800f25c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f264:	2b06      	cmp	r3, #6
 800f266:	d003      	beq.n	800f270 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800f268:	4825      	ldr	r0, [pc, #148]	@ (800f300 <prvSetOptionTCPWindows+0xb8>)
 800f26a:	f013 fa73 	bl	8022754 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800f26e:	e042      	b.n	800f2f6 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	461a      	mov	r2, r3
 800f278:	2104      	movs	r1, #4
 800f27a:	6878      	ldr	r0, [r7, #4]
 800f27c:	f7ff ff2c 	bl	800f0d8 <prvSockopt_so_buffer>
 800f280:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f282:	697b      	ldr	r3, [r7, #20]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d133      	bne.n	800f2f0 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	3308      	adds	r3, #8
 800f28c:	461a      	mov	r2, r3
 800f28e:	2105      	movs	r1, #5
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f7ff ff21 	bl	800f0d8 <prvSockopt_so_buffer>
 800f296:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d12a      	bne.n	800f2f4 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	693b      	ldr	r3, [r7, #16]
 800f2a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800f2b6:	693b      	ldr	r3, [r7, #16]
 800f2b8:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800f2bc:	f003 0301 	and.w	r3, r3, #1
 800f2c0:	b2db      	uxtb	r3, r3
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d017      	beq.n	800f2f6 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800f2c6:	693b      	ldr	r3, [r7, #16]
 800f2c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f2cc:	693a      	ldr	r2, [r7, #16]
 800f2ce:	8bd2      	ldrh	r2, [r2, #30]
 800f2d0:	fb03 f202 	mul.w	r2, r3, r2
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800f2e0:	693a      	ldr	r2, [r7, #16]
 800f2e2:	8bd2      	ldrh	r2, [r2, #30]
 800f2e4:	fb03 f202 	mul.w	r2, r3, r2
 800f2e8:	693b      	ldr	r3, [r7, #16]
 800f2ea:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800f2ee:	e002      	b.n	800f2f6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f2f0:	bf00      	nop
 800f2f2:	e000      	b.n	800f2f6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800f2f4:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800f2f6:	697b      	ldr	r3, [r7, #20]
    }
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	3718      	adds	r7, #24
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	bd80      	pop	{r7, pc}
 800f300:	080264d0 	.word	0x080264d0

0800f304 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f30e:	f06f 0315 	mvn.w	r3, #21
 800f312:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f31e:	2b06      	cmp	r3, #6
 800f320:	d003      	beq.n	800f32a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800f322:	4813      	ldr	r0, [pc, #76]	@ (800f370 <prvSetOptionLowHighWater+0x6c>)
 800f324:	f013 fa16 	bl	8022754 <lUDPLoggingPrintf>
 800f328:	e01c      	b.n	800f364 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f32a:	68bb      	ldr	r3, [r7, #8]
 800f32c:	681a      	ldr	r2, [r3, #0]
 800f32e:	68bb      	ldr	r3, [r7, #8]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	429a      	cmp	r2, r3
 800f334:	d206      	bcs.n	800f344 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	685a      	ldr	r2, [r3, #4]
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800f340:	429a      	cmp	r2, r3
 800f342:	d903      	bls.n	800f34c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800f344:	480b      	ldr	r0, [pc, #44]	@ (800f374 <prvSetOptionLowHighWater+0x70>)
 800f346:	f013 fa05 	bl	8022754 <lUDPLoggingPrintf>
 800f34a:	e00b      	b.n	800f364 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800f34c:	68bb      	ldr	r3, [r7, #8]
 800f34e:	681a      	ldr	r2, [r3, #0]
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	685a      	ldr	r2, [r3, #4]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800f360:	2300      	movs	r3, #0
 800f362:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f364:	68fb      	ldr	r3, [r7, #12]
    }
 800f366:	4618      	mov	r0, r3
 800f368:	3710      	adds	r7, #16
 800f36a:	46bd      	mov	sp, r7
 800f36c:	bd80      	pop	{r7, pc}
 800f36e:	bf00      	nop
 800f370:	080264f4 	.word	0x080264f4
 800f374:	08026528 	.word	0x08026528

0800f378 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800f378:	b580      	push	{r7, lr}
 800f37a:	b084      	sub	sp, #16
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f382:	f06f 0315 	mvn.w	r3, #21
 800f386:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f38e:	2b06      	cmp	r3, #6
 800f390:	d126      	bne.n	800f3e0 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d007      	beq.n	800f3aa <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800f39a:	687a      	ldr	r2, [r7, #4]
 800f39c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f3a0:	f043 0302 	orr.w	r3, r3, #2
 800f3a4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800f3a8:	e006      	b.n	800f3b8 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800f3b0:	f36f 0341 	bfc	r3, #1, #1
 800f3b4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f3be:	2b04      	cmp	r3, #4
 800f3c0:	d90c      	bls.n	800f3dc <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f001 fbd8 	bl	8010b78 <FreeRTOS_tx_size>
 800f3c8:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d006      	beq.n	800f3dc <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f3d6:	2006      	movs	r0, #6
 800f3d8:	f7fa fc1c 	bl	8009c14 <xSendEventToIPTask>
            }

            xReturn = 0;
 800f3dc:	2300      	movs	r3, #0
 800f3de:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f3e0:	68fb      	ldr	r3, [r7, #12]
    }
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3710      	adds	r7, #16
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b084      	sub	sp, #16
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	6078      	str	r0, [r7, #4]
 800f3f2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f3f4:	f06f 0315 	mvn.w	r3, #21
 800f3f8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f400:	2b06      	cmp	r3, #6
 800f402:	d122      	bne.n	800f44a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f404:	683b      	ldr	r3, [r7, #0]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d007      	beq.n	800f41c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f412:	f043 0304 	orr.w	r3, r3, #4
 800f416:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800f41a:	e006      	b.n	800f42a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800f41c:	687a      	ldr	r2, [r7, #4]
 800f41e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f422:	f36f 0382 	bfc	r3, #2, #1
 800f426:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f430:	f043 0301 	orr.w	r3, r3, #1
 800f434:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	2201      	movs	r2, #1
 800f43c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f440:	2006      	movs	r0, #6
 800f442:	f7fa fbe7 	bl	8009c14 <xSendEventToIPTask>
            xReturn = 0;
 800f446:	2300      	movs	r3, #0
 800f448:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f44a:	68fb      	ldr	r3, [r7, #12]
    }
 800f44c:	4618      	mov	r0, r3
 800f44e:	3710      	adds	r7, #16
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800f454:	b480      	push	{r7}
 800f456:	b087      	sub	sp, #28
 800f458:	af00      	add	r7, sp, #0
 800f45a:	60f8      	str	r0, [r7, #12]
 800f45c:	60b9      	str	r1, [r7, #8]
 800f45e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b01      	cmp	r3, #1
 800f46a:	d110      	bne.n	800f48e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f472:	2b11      	cmp	r3, #17
 800f474:	d107      	bne.n	800f486 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800f47c:	4293      	cmp	r3, r2
 800f47e:	d902      	bls.n	800f486 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800f480:	f241 3388 	movw	r3, #5000	@ 0x1388
 800f484:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	697a      	ldr	r2, [r7, #20]
 800f48a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800f48c:	e002      	b.n	800f494 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	697a      	ldr	r2, [r7, #20]
 800f492:	621a      	str	r2, [r3, #32]
}
 800f494:	bf00      	nop
 800f496:	371c      	adds	r7, #28
 800f498:	46bd      	mov	sp, r7
 800f49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f49e:	4770      	bx	lr

0800f4a0 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800f4a0:	b480      	push	{r7}
 800f4a2:	b085      	sub	sp, #20
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f4aa:	f06f 0315 	mvn.w	r3, #21
 800f4ae:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f4b6:	2b06      	cmp	r3, #6
 800f4b8:	d114      	bne.n	800f4e4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d007      	beq.n	800f4d2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800f4c2:	687a      	ldr	r2, [r7, #4]
 800f4c4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f4c8:	f043 0308 	orr.w	r3, r3, #8
 800f4cc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f4d0:	e006      	b.n	800f4e0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f4d8:	f36f 03c3 	bfc	r3, #3, #1
 800f4dc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
    }
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	3714      	adds	r7, #20
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr

0800f4f2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800f4f2:	b480      	push	{r7}
 800f4f4:	b085      	sub	sp, #20
 800f4f6:	af00      	add	r7, sp, #0
 800f4f8:	6078      	str	r0, [r7, #4]
 800f4fa:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f4fc:	f06f 0315 	mvn.w	r3, #21
 800f500:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f508:	2b06      	cmp	r3, #6
 800f50a:	d114      	bne.n	800f536 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d007      	beq.n	800f524 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800f514:	687a      	ldr	r2, [r7, #4]
 800f516:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f51a:	f043 0310 	orr.w	r3, r3, #16
 800f51e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800f522:	e006      	b.n	800f532 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800f524:	687a      	ldr	r2, [r7, #4]
 800f526:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f52a:	f36f 1304 	bfc	r3, #4, #1
 800f52e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800f532:	2300      	movs	r3, #0
 800f534:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f536:	68fb      	ldr	r3, [r7, #12]
    }
 800f538:	4618      	mov	r0, r3
 800f53a:	3714      	adds	r7, #20
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr

0800f544 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800f544:	b580      	push	{r7, lr}
 800f546:	b086      	sub	sp, #24
 800f548:	af00      	add	r7, sp, #0
 800f54a:	60f8      	str	r0, [r7, #12]
 800f54c:	60b9      	str	r1, [r7, #8]
 800f54e:	607a      	str	r2, [r7, #4]
 800f550:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f552:	f06f 0315 	mvn.w	r3, #21
 800f556:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800f55c:	6938      	ldr	r0, [r7, #16]
 800f55e:	f001 fb77 	bl	8010c50 <xSocketValid>
 800f562:	4603      	mov	r3, r0
 800f564:	2b01      	cmp	r3, #1
 800f566:	f040 8093 	bne.w	800f690 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	2b12      	cmp	r3, #18
 800f56e:	f200 808b 	bhi.w	800f688 <FreeRTOS_setsockopt+0x144>
 800f572:	a201      	add	r2, pc, #4	@ (adr r2, 800f578 <FreeRTOS_setsockopt+0x34>)
 800f574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f578:	0800f5c5 	.word	0x0800f5c5
 800f57c:	0800f5d5 	.word	0x0800f5d5
 800f580:	0800f5e5 	.word	0x0800f5e5
 800f584:	0800f625 	.word	0x0800f625
 800f588:	0800f63f 	.word	0x0800f63f
 800f58c:	0800f63f 	.word	0x0800f63f
 800f590:	0800f617 	.word	0x0800f617
 800f594:	0800f617 	.word	0x0800f617
 800f598:	0800f617 	.word	0x0800f617
 800f59c:	0800f617 	.word	0x0800f617
 800f5a0:	0800f617 	.word	0x0800f617
 800f5a4:	0800f659 	.word	0x0800f659
 800f5a8:	0800f665 	.word	0x0800f665
 800f5ac:	0800f64d 	.word	0x0800f64d
 800f5b0:	0800f671 	.word	0x0800f671
 800f5b4:	0800f67d 	.word	0x0800f67d
 800f5b8:	0800f689 	.word	0x0800f689
 800f5bc:	0800f689 	.word	0x0800f689
 800f5c0:	0800f633 	.word	0x0800f633
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	6839      	ldr	r1, [r7, #0]
 800f5c8:	6938      	ldr	r0, [r7, #16]
 800f5ca:	f7ff ff43 	bl	800f454 <prvSetOptionTimeout>
                xReturn = 0;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	617b      	str	r3, [r7, #20]
                break;
 800f5d2:	e060      	b.n	800f696 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800f5d4:	2201      	movs	r2, #1
 800f5d6:	6839      	ldr	r1, [r7, #0]
 800f5d8:	6938      	ldr	r0, [r7, #16]
 800f5da:	f7ff ff3b 	bl	800f454 <prvSetOptionTimeout>
                xReturn = 0;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	617b      	str	r3, [r7, #20]
                break;
 800f5e2:	e058      	b.n	800f696 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800f5e4:	683b      	ldr	r3, [r7, #0]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d109      	bne.n	800f5fe <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f5f0:	f023 0302 	bic.w	r3, r3, #2
 800f5f4:	b2da      	uxtb	r2, r3
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800f5fc:	e008      	b.n	800f610 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800f604:	f043 0302 	orr.w	r3, r3, #2
 800f608:	b2da      	uxtb	r2, r3
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800f610:	2300      	movs	r3, #0
 800f612:	617b      	str	r3, [r7, #20]
                break;
 800f614:	e03f      	b.n	800f696 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800f616:	683a      	ldr	r2, [r7, #0]
 800f618:	6879      	ldr	r1, [r7, #4]
 800f61a:	6938      	ldr	r0, [r7, #16]
 800f61c:	f7ff fdba 	bl	800f194 <prvSetOptionCallback>
 800f620:	6178      	str	r0, [r7, #20]
                        break;
 800f622:	e038      	b.n	800f696 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	681a      	ldr	r2, [r3, #0]
 800f628:	693b      	ldr	r3, [r7, #16]
 800f62a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800f62c:	2300      	movs	r3, #0
 800f62e:	617b      	str	r3, [r7, #20]
                        break;
 800f630:	e031      	b.n	800f696 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800f632:	6839      	ldr	r1, [r7, #0]
 800f634:	6938      	ldr	r0, [r7, #16]
 800f636:	f7ff fe65 	bl	800f304 <prvSetOptionLowHighWater>
 800f63a:	6178      	str	r0, [r7, #20]
                        break;
 800f63c:	e02b      	b.n	800f696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	6879      	ldr	r1, [r7, #4]
 800f642:	6938      	ldr	r0, [r7, #16]
 800f644:	f7ff fd48 	bl	800f0d8 <prvSockopt_so_buffer>
 800f648:	6178      	str	r0, [r7, #20]
                        break;
 800f64a:	e024      	b.n	800f696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800f64c:	6839      	ldr	r1, [r7, #0]
 800f64e:	6938      	ldr	r0, [r7, #16]
 800f650:	f7ff fdfa 	bl	800f248 <prvSetOptionTCPWindows>
 800f654:	6178      	str	r0, [r7, #20]
                        break;
 800f656:	e01e      	b.n	800f696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800f658:	6839      	ldr	r1, [r7, #0]
 800f65a:	6938      	ldr	r0, [r7, #16]
 800f65c:	f7ff ff20 	bl	800f4a0 <prvSetOptionReuseListenSocket>
 800f660:	6178      	str	r0, [r7, #20]
                        break;
 800f662:	e018      	b.n	800f696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800f664:	6839      	ldr	r1, [r7, #0]
 800f666:	6938      	ldr	r0, [r7, #16]
 800f668:	f7ff ff43 	bl	800f4f2 <prvSetOptionCloseAfterSend>
 800f66c:	6178      	str	r0, [r7, #20]
                        break;
 800f66e:	e012      	b.n	800f696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800f670:	6839      	ldr	r1, [r7, #0]
 800f672:	6938      	ldr	r0, [r7, #16]
 800f674:	f7ff fe80 	bl	800f378 <prvSetOptionSetFullSize>
 800f678:	6178      	str	r0, [r7, #20]
                        break;
 800f67a:	e00c      	b.n	800f696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	6938      	ldr	r0, [r7, #16]
 800f680:	f7ff feb3 	bl	800f3ea <prvSetOptionStopRX>
 800f684:	6178      	str	r0, [r7, #20]
                        break;
 800f686:	e006      	b.n	800f696 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800f688:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800f68c:	617b      	str	r3, [r7, #20]
                break;
 800f68e:	e002      	b.n	800f696 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f690:	f06f 0315 	mvn.w	r3, #21
 800f694:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800f696:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f698:	4618      	mov	r0, r3
 800f69a:	3718      	adds	r7, #24
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b086      	sub	sp, #24
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800f6a8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800f6ac:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800f6ae:	89fb      	ldrh	r3, [r7, #14]
 800f6b0:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2b06      	cmp	r3, #6
 800f6be:	d102      	bne.n	800f6c6 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800f6c0:	4b21      	ldr	r3, [pc, #132]	@ (800f748 <prvGetPrivatePortNumber+0xa8>)
 800f6c2:	613b      	str	r3, [r7, #16]
 800f6c4:	e001      	b.n	800f6ca <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800f6c6:	4b21      	ldr	r3, [pc, #132]	@ (800f74c <prvGetPrivatePortNumber+0xac>)
 800f6c8:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800f6ca:	f107 0308 	add.w	r3, r7, #8
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7f2 fa2c 	bl	8001b2c <xApplicationGetRandomNumber>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	d030      	beq.n	800f73c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800f6de:	89fa      	ldrh	r2, [r7, #14]
 800f6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6e4:	fb01 f202 	mul.w	r2, r1, r2
 800f6e8:	1a9b      	subs	r3, r3, r2
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f6f0:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800f6f2:	8abb      	ldrh	r3, [r7, #20]
 800f6f4:	021b      	lsls	r3, r3, #8
 800f6f6:	b21a      	sxth	r2, r3
 800f6f8:	8abb      	ldrh	r3, [r7, #20]
 800f6fa:	0a1b      	lsrs	r3, r3, #8
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	b21b      	sxth	r3, r3
 800f700:	4313      	orrs	r3, r2
 800f702:	b21b      	sxth	r3, r3
 800f704:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800f706:	4619      	mov	r1, r3
 800f708:	6938      	ldr	r0, [r7, #16]
 800f70a:	f000 f821 	bl	800f750 <pxListFindListItemWithValue>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d10a      	bne.n	800f72a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800f714:	8abb      	ldrh	r3, [r7, #20]
 800f716:	021b      	lsls	r3, r3, #8
 800f718:	b21a      	sxth	r2, r3
 800f71a:	8abb      	ldrh	r3, [r7, #20]
 800f71c:	0a1b      	lsrs	r3, r3, #8
 800f71e:	b29b      	uxth	r3, r3
 800f720:	b21b      	sxth	r3, r3
 800f722:	4313      	orrs	r3, r2
 800f724:	b21b      	sxth	r3, r3
 800f726:	82bb      	strh	r3, [r7, #20]
            break;
 800f728:	e009      	b.n	800f73e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800f72a:	2300      	movs	r3, #0
 800f72c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800f72e:	8afb      	ldrh	r3, [r7, #22]
 800f730:	3b01      	subs	r3, #1
 800f732:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800f734:	8afb      	ldrh	r3, [r7, #22]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d1c7      	bne.n	800f6ca <prvGetPrivatePortNumber+0x2a>
 800f73a:	e000      	b.n	800f73e <prvGetPrivatePortNumber+0x9e>
            break;
 800f73c:	bf00      	nop

    return usResult;
 800f73e:	8abb      	ldrh	r3, [r7, #20]
}
 800f740:	4618      	mov	r0, r3
 800f742:	3718      	adds	r7, #24
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}
 800f748:	20001608 	.word	0x20001608
 800f74c:	200015f4 	.word	0x200015f4

0800f750 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b086      	sub	sp, #24
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800f75a:	2300      	movs	r3, #0
 800f75c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800f75e:	f7fa fe0b 	bl	800a378 <xIPIsNetworkTaskReady>
 800f762:	4603      	mov	r3, r0
 800f764:	2b00      	cmp	r3, #0
 800f766:	d018      	beq.n	800f79a <pxListFindListItemWithValue+0x4a>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d015      	beq.n	800f79a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	3308      	adds	r3, #8
 800f772:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	685b      	ldr	r3, [r3, #4]
 800f778:	613b      	str	r3, [r7, #16]
 800f77a:	e00a      	b.n	800f792 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	683a      	ldr	r2, [r7, #0]
 800f782:	429a      	cmp	r2, r3
 800f784:	d102      	bne.n	800f78c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	617b      	str	r3, [r7, #20]
                break;
 800f78a:	e006      	b.n	800f79a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800f792:	693a      	ldr	r2, [r7, #16]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	429a      	cmp	r2, r3
 800f798:	d1f0      	bne.n	800f77c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800f79a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f79c:	4618      	mov	r0, r3
 800f79e:	3718      	adds	r7, #24
 800f7a0:	46bd      	mov	sp, r7
 800f7a2:	bd80      	pop	{r7, pc}

0800f7a4 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800f7b0:	6879      	ldr	r1, [r7, #4]
 800f7b2:	480b      	ldr	r0, [pc, #44]	@ (800f7e0 <pxUDPSocketLookup+0x3c>)
 800f7b4:	f7ff ffcc 	bl	800f750 <pxListFindListItemWithValue>
 800f7b8:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d00a      	beq.n	800f7d6 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	68db      	ldr	r3, [r3, #12]
 800f7c4:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d104      	bne.n	800f7d6 <pxUDPSocketLookup+0x32>
 800f7cc:	f640 4111 	movw	r1, #3089	@ 0xc11
 800f7d0:	4804      	ldr	r0, [pc, #16]	@ (800f7e4 <pxUDPSocketLookup+0x40>)
 800f7d2:	f7f2 f8e1 	bl	8001998 <vAssertCalled>
    }

    return pxSocket;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
}
 800f7d8:	4618      	mov	r0, r3
 800f7da:	3710      	adds	r7, #16
 800f7dc:	46bd      	mov	sp, r7
 800f7de:	bd80      	pop	{r7, pc}
 800f7e0:	200015f4 	.word	0x200015f4
 800f7e4:	08026214 	.word	0x08026214

0800f7e8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b08b      	sub	sp, #44	@ 0x2c
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800f7f6:	1d3b      	adds	r3, r7, #4
 800f7f8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800f7fa:	683b      	ldr	r3, [r7, #0]
 800f7fc:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f7fe:	2300      	movs	r3, #0
 800f800:	627b      	str	r3, [r7, #36]	@ 0x24
 800f802:	e062      	b.n	800f8ca <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f808:	4413      	add	r3, r2
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800f80e:	2302      	movs	r3, #2
 800f810:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f812:	7ffa      	ldrb	r2, [r7, #31]
 800f814:	4b32      	ldr	r3, [pc, #200]	@ (800f8e0 <FreeRTOS_inet_ntoa+0xf8>)
 800f816:	fba3 1302 	umull	r1, r3, r3, r2
 800f81a:	08d9      	lsrs	r1, r3, #3
 800f81c:	460b      	mov	r3, r1
 800f81e:	009b      	lsls	r3, r3, #2
 800f820:	440b      	add	r3, r1
 800f822:	005b      	lsls	r3, r3, #1
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	b2d9      	uxtb	r1, r3
 800f828:	f107 020c 	add.w	r2, r7, #12
 800f82c:	69bb      	ldr	r3, [r7, #24]
 800f82e:	4413      	add	r3, r2
 800f830:	460a      	mov	r2, r1
 800f832:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800f834:	7ffb      	ldrb	r3, [r7, #31]
 800f836:	4a2a      	ldr	r2, [pc, #168]	@ (800f8e0 <FreeRTOS_inet_ntoa+0xf8>)
 800f838:	fba2 2303 	umull	r2, r3, r2, r3
 800f83c:	08db      	lsrs	r3, r3, #3
 800f83e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b01      	cmp	r3, #1
 800f844:	d003      	beq.n	800f84e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800f846:	69bb      	ldr	r3, [r7, #24]
 800f848:	3b01      	subs	r3, #1
 800f84a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f84c:	e7e1      	b.n	800f812 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800f84e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800f850:	7ffb      	ldrb	r3, [r7, #31]
 800f852:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f854:	2300      	movs	r3, #0
 800f856:	61bb      	str	r3, [r7, #24]
 800f858:	e009      	b.n	800f86e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800f85a:	f107 020c 	add.w	r2, r7, #12
 800f85e:	69bb      	ldr	r3, [r7, #24]
 800f860:	4413      	add	r3, r2
 800f862:	781b      	ldrb	r3, [r3, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d106      	bne.n	800f876 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f868:	69bb      	ldr	r3, [r7, #24]
 800f86a:	3301      	adds	r3, #1
 800f86c:	61bb      	str	r3, [r7, #24]
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d9f2      	bls.n	800f85a <FreeRTOS_inet_ntoa+0x72>
 800f874:	e012      	b.n	800f89c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800f876:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f878:	e010      	b.n	800f89c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800f87a:	f107 020c 	add.w	r2, r7, #12
 800f87e:	69bb      	ldr	r3, [r7, #24]
 800f880:	4413      	add	r3, r2
 800f882:	781a      	ldrb	r2, [r3, #0]
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	6a3b      	ldr	r3, [r7, #32]
 800f888:	440b      	add	r3, r1
 800f88a:	3230      	adds	r2, #48	@ 0x30
 800f88c:	b2d2      	uxtb	r2, r2
 800f88e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800f890:	6a3b      	ldr	r3, [r7, #32]
 800f892:	3301      	adds	r3, #1
 800f894:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f896:	69bb      	ldr	r3, [r7, #24]
 800f898:	3301      	adds	r3, #1
 800f89a:	61bb      	str	r3, [r7, #24]
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	2b02      	cmp	r3, #2
 800f8a0:	d9eb      	bls.n	800f87a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800f8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8a4:	2b02      	cmp	r3, #2
 800f8a6:	d805      	bhi.n	800f8b4 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800f8a8:	683a      	ldr	r2, [r7, #0]
 800f8aa:	6a3b      	ldr	r3, [r7, #32]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	222e      	movs	r2, #46	@ 0x2e
 800f8b0:	701a      	strb	r2, [r3, #0]
 800f8b2:	e004      	b.n	800f8be <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800f8b4:	683a      	ldr	r2, [r7, #0]
 800f8b6:	6a3b      	ldr	r3, [r7, #32]
 800f8b8:	4413      	add	r3, r2
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800f8be:	6a3b      	ldr	r3, [r7, #32]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8c6:	3301      	adds	r3, #1
 800f8c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8cc:	2b03      	cmp	r3, #3
 800f8ce:	d999      	bls.n	800f804 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800f8d0:	693b      	ldr	r3, [r7, #16]
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	372c      	adds	r7, #44	@ 0x2c
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8dc:	4770      	bx	lr
 800f8de:	bf00      	nop
 800f8e0:	cccccccd 	.word	0xcccccccd

0800f8e4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b086      	sub	sp, #24
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	60f8      	str	r0, [r7, #12]
 800f8ec:	60b9      	str	r1, [r7, #8]
 800f8ee:	607a      	str	r2, [r7, #4]
 800f8f0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2b02      	cmp	r3, #2
 800f8f6:	d003      	beq.n	800f900 <FreeRTOS_inet_ntop+0x1c>
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2b0a      	cmp	r3, #10
 800f8fc:	d007      	beq.n	800f90e <FreeRTOS_inet_ntop+0x2a>
 800f8fe:	e00d      	b.n	800f91c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800f900:	683a      	ldr	r2, [r7, #0]
 800f902:	6879      	ldr	r1, [r7, #4]
 800f904:	68b8      	ldr	r0, [r7, #8]
 800f906:	f7fb fc8d 	bl	800b224 <FreeRTOS_inet_ntop4>
 800f90a:	6178      	str	r0, [r7, #20]
                break;
 800f90c:	e009      	b.n	800f922 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800f90e:	683a      	ldr	r2, [r7, #0]
 800f910:	6879      	ldr	r1, [r7, #4]
 800f912:	68b8      	ldr	r0, [r7, #8]
 800f914:	f7fc f9c1 	bl	800bc9a <FreeRTOS_inet_ntop6>
 800f918:	6178      	str	r0, [r7, #20]
                break;
 800f91a:	e002      	b.n	800f922 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800f91c:	2300      	movs	r3, #0
 800f91e:	617b      	str	r3, [r7, #20]
            break;
 800f920:	bf00      	nop
    }

    return pcResult;
 800f922:	697b      	ldr	r3, [r7, #20]
}
 800f924:	4618      	mov	r0, r3
 800f926:	3718      	adds	r7, #24
 800f928:	46bd      	mov	sp, r7
 800f92a:	bd80      	pop	{r7, pc}

0800f92c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b084      	sub	sp, #16
 800f930:	af00      	add	r7, sp, #0
 800f932:	6078      	str	r0, [r7, #4]
 800f934:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	7a1b      	ldrb	r3, [r3, #8]
 800f93e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f942:	b2db      	uxtb	r3, r3
 800f944:	2b00      	cmp	r3, #0
 800f946:	d002      	beq.n	800f94e <FreeRTOS_GetLocalAddress+0x22>
 800f948:	2b01      	cmp	r3, #1
 800f94a:	d02a      	beq.n	800f9a2 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800f94c:	e044      	b.n	800f9d8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800f94e:	683b      	ldr	r3, [r7, #0]
 800f950:	2202      	movs	r2, #2
 800f952:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800f954:	683b      	ldr	r3, [r7, #0]
 800f956:	2218      	movs	r2, #24
 800f958:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f95e:	061a      	lsls	r2, r3, #24
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f964:	021b      	lsls	r3, r3, #8
 800f966:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f96a:	431a      	orrs	r2, r3
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f970:	0a1b      	lsrs	r3, r3, #8
 800f972:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f976:	431a      	orrs	r2, r3
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f97c:	0e1b      	lsrs	r3, r3, #24
 800f97e:	431a      	orrs	r2, r3
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f988:	021b      	lsls	r3, r3, #8
 800f98a:	b21a      	sxth	r2, r3
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f990:	0a1b      	lsrs	r3, r3, #8
 800f992:	b29b      	uxth	r3, r3
 800f994:	b21b      	sxth	r3, r3
 800f996:	4313      	orrs	r3, r2
 800f998:	b21b      	sxth	r3, r3
 800f99a:	b29a      	uxth	r2, r3
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	805a      	strh	r2, [r3, #2]
                break;
 800f9a0:	e01a      	b.n	800f9d8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	220a      	movs	r2, #10
 800f9a6:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	f103 0008 	add.w	r0, r3, #8
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	3328      	adds	r3, #40	@ 0x28
 800f9b2:	2210      	movs	r2, #16
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	f013 f8e9 	bl	8022b8c <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f9be:	021b      	lsls	r3, r3, #8
 800f9c0:	b21a      	sxth	r2, r3
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f9c6:	0a1b      	lsrs	r3, r3, #8
 800f9c8:	b29b      	uxth	r3, r3
 800f9ca:	b21b      	sxth	r3, r3
 800f9cc:	4313      	orrs	r3, r2
 800f9ce:	b21b      	sxth	r3, r3
 800f9d0:	b29a      	uxth	r2, r3
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	805a      	strh	r2, [r3, #2]
                break;
 800f9d6:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800f9d8:	2318      	movs	r3, #24
}
 800f9da:	4618      	mov	r0, r3
 800f9dc:	3710      	adds	r7, #16
 800f9de:	46bd      	mov	sp, r7
 800f9e0:	bd80      	pop	{r7, pc}

0800f9e2 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800f9e2:	b580      	push	{r7, lr}
 800f9e4:	b084      	sub	sp, #16
 800f9e6:	af00      	add	r7, sp, #0
 800f9e8:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d006      	beq.n	800fa00 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	2100      	movs	r1, #0
 800f9fc:	f7f4 f8ba 	bl	8003b74 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d015      	beq.n	800fa34 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	0a1b      	lsrs	r3, r3, #8
 800fa0e:	f003 030f 	and.w	r3, r3, #15
 800fa12:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d00c      	beq.n	800fa34 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	431a      	orrs	r2, r3
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	68f9      	ldr	r1, [r7, #12]
 800fa2e:	4618      	mov	r0, r3
 800fa30:	f7f3 fdc4 	bl	80035bc <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	685b      	ldr	r3, [r3, #4]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d00b      	beq.n	800fa60 <vSocketWakeUpUser+0x7e>
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d007      	beq.n	800fa60 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	685a      	ldr	r2, [r3, #4]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4610      	mov	r0, r2
 800fa5c:	f7f3 fdae 	bl	80035bc <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
}
 800fa66:	bf00      	nop
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}

0800fa6e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800fa6e:	b480      	push	{r7}
 800fa70:	b085      	sub	sp, #20
 800fa72:	af00      	add	r7, sp, #0
 800fa74:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fa7c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800fa7e:	7afb      	ldrb	r3, [r7, #11]
 800fa80:	2b08      	cmp	r3, #8
 800fa82:	d006      	beq.n	800fa92 <bMayConnect+0x24>
 800fa84:	2b08      	cmp	r3, #8
 800fa86:	dc0b      	bgt.n	800faa0 <bMayConnect+0x32>
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d002      	beq.n	800fa92 <bMayConnect+0x24>
 800fa8c:	2b02      	cmp	r3, #2
 800fa8e:	d003      	beq.n	800fa98 <bMayConnect+0x2a>
 800fa90:	e006      	b.n	800faa0 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800fa92:	2300      	movs	r3, #0
 800fa94:	60fb      	str	r3, [r7, #12]
                break;
 800fa96:	e007      	b.n	800faa8 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800fa98:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800fa9c:	60fb      	str	r3, [r7, #12]
                break;
 800fa9e:	e003      	b.n	800faa8 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800faa0:	f06f 030a 	mvn.w	r3, #10
 800faa4:	60fb      	str	r3, [r7, #12]
                break;
 800faa6:	bf00      	nop
        }

        return xResult;
 800faa8:	68fb      	ldr	r3, [r7, #12]
    }
 800faaa:	4618      	mov	r0, r3
 800faac:	3714      	adds	r7, #20
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr
	...

0800fab8 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800fac2:	2300      	movs	r3, #0
 800fac4:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d103      	bne.n	800fad4 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800facc:	f06f 0315 	mvn.w	r3, #21
 800fad0:	60fb      	str	r3, [r7, #12]
 800fad2:	e01f      	b.n	800fb14 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800fad4:	2200      	movs	r2, #0
 800fad6:	2106      	movs	r1, #6
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f7fe fc71 	bl	800e3c0 <prvValidSocket>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d103      	bne.n	800faec <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800fae4:	f06f 0308 	mvn.w	r3, #8
 800fae8:	60fb      	str	r3, [r7, #12]
 800faea:	e013      	b.n	800fb14 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f001 f867 	bl	8010bc0 <FreeRTOS_issocketconnected>
 800faf2:	4603      	mov	r3, r0
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	dd03      	ble.n	800fb00 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800faf8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800fafc:	60fb      	str	r3, [r7, #12]
 800fafe:	e009      	b.n	800fb14 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	69db      	ldr	r3, [r3, #28]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d105      	bne.n	800fb14 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800fb08:	2200      	movs	r2, #0
 800fb0a:	2100      	movs	r1, #0
 800fb0c:	6878      	ldr	r0, [r7, #4]
 800fb0e:	f7fe ff4f 	bl	800e9b0 <FreeRTOS_bind>
 800fb12:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800fb14:	68fb      	ldr	r3, [r7, #12]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	f040 80a6 	bne.w	800fc68 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f7ff ffa6 	bl	800fa6e <bMayConnect>
 800fb22:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f040 809e 	bne.w	800fc68 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800fb2c:	687a      	ldr	r2, [r7, #4]
 800fb2e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fb32:	f36f 03c3 	bfc	r3, #3, #1
 800fb36:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	785b      	ldrb	r3, [r3, #1]
 800fb46:	2b02      	cmp	r3, #2
 800fb48:	d027      	beq.n	800fb9a <prvTCPConnectStart+0xe2>
 800fb4a:	2b0a      	cmp	r3, #10
 800fb4c:	d168      	bne.n	800fc20 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	7a13      	ldrb	r3, [r2, #8]
 800fb52:	f043 0301 	orr.w	r3, r3, #1
 800fb56:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	f103 0108 	add.w	r1, r3, #8
 800fb64:	683b      	ldr	r3, [r7, #0]
 800fb66:	885b      	ldrh	r3, [r3, #2]
 800fb68:	021b      	lsls	r3, r3, #8
 800fb6a:	b21a      	sxth	r2, r3
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	885b      	ldrh	r3, [r3, #2]
 800fb70:	0a1b      	lsrs	r3, r3, #8
 800fb72:	b29b      	uxth	r3, r3
 800fb74:	b21b      	sxth	r3, r3
 800fb76:	4313      	orrs	r3, r2
 800fb78:	b21b      	sxth	r3, r3
 800fb7a:	b29b      	uxth	r3, r3
 800fb7c:	460a      	mov	r2, r1
 800fb7e:	4601      	mov	r1, r0
 800fb80:	483c      	ldr	r0, [pc, #240]	@ (800fc74 <prvTCPConnectStart+0x1bc>)
 800fb82:	f012 fde7 	bl	8022754 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	3308      	adds	r3, #8
 800fb90:	2210      	movs	r2, #16
 800fb92:	4619      	mov	r1, r3
 800fb94:	f012 fffa 	bl	8022b8c <memcpy>
                            break;
 800fb98:	e046      	b.n	800fc28 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800fb9a:	687a      	ldr	r2, [r7, #4]
 800fb9c:	7a13      	ldrb	r3, [r2, #8]
 800fb9e:	f36f 0300 	bfc	r3, #0, #1
 800fba2:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fba8:	4618      	mov	r0, r3
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	061a      	lsls	r2, r3, #24
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	689b      	ldr	r3, [r3, #8]
 800fbb4:	021b      	lsls	r3, r3, #8
 800fbb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fbba:	431a      	orrs	r2, r3
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	0a1b      	lsrs	r3, r3, #8
 800fbc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fbc6:	431a      	orrs	r2, r3
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	689b      	ldr	r3, [r3, #8]
 800fbcc:	0e1b      	lsrs	r3, r3, #24
 800fbce:	ea42 0103 	orr.w	r1, r2, r3
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	885b      	ldrh	r3, [r3, #2]
 800fbd6:	021b      	lsls	r3, r3, #8
 800fbd8:	b21a      	sxth	r2, r3
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	885b      	ldrh	r3, [r3, #2]
 800fbde:	0a1b      	lsrs	r3, r3, #8
 800fbe0:	b29b      	uxth	r3, r3
 800fbe2:	b21b      	sxth	r3, r3
 800fbe4:	4313      	orrs	r3, r2
 800fbe6:	b21b      	sxth	r3, r3
 800fbe8:	b29b      	uxth	r3, r3
 800fbea:	460a      	mov	r2, r1
 800fbec:	4601      	mov	r1, r0
 800fbee:	4822      	ldr	r0, [pc, #136]	@ (800fc78 <prvTCPConnectStart+0x1c0>)
 800fbf0:	f012 fdb0 	bl	8022754 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	689b      	ldr	r3, [r3, #8]
 800fbf8:	061a      	lsls	r2, r3, #24
 800fbfa:	683b      	ldr	r3, [r7, #0]
 800fbfc:	689b      	ldr	r3, [r3, #8]
 800fbfe:	021b      	lsls	r3, r3, #8
 800fc00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fc04:	431a      	orrs	r2, r3
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	689b      	ldr	r3, [r3, #8]
 800fc0a:	0a1b      	lsrs	r3, r3, #8
 800fc0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fc10:	431a      	orrs	r2, r3
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	689b      	ldr	r3, [r3, #8]
 800fc16:	0e1b      	lsrs	r3, r3, #24
 800fc18:	431a      	orrs	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800fc1e:	e003      	b.n	800fc28 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800fc20:	4816      	ldr	r0, [pc, #88]	@ (800fc7c <prvTCPConnectStart+0x1c4>)
 800fc22:	f012 fd97 	bl	8022754 <lUDPLoggingPrintf>
                        break;
 800fc26:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	885b      	ldrh	r3, [r3, #2]
 800fc2c:	021b      	lsls	r3, r3, #8
 800fc2e:	b21a      	sxth	r2, r3
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	885b      	ldrh	r3, [r3, #2]
 800fc34:	0a1b      	lsrs	r3, r3, #8
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	b21b      	sxth	r3, r3
 800fc3a:	4313      	orrs	r3, r2
 800fc3c:	b21b      	sxth	r3, r3
 800fc3e:	b29a      	uxth	r2, r3
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800fc46:	2102      	movs	r1, #2
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f001 fd77 	bl	801173c <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2201      	movs	r2, #1
 800fc52:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800fc56:	2006      	movs	r0, #6
 800fc58:	f7f9 ffdc 	bl	8009c14 <xSendEventToIPTask>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d002      	beq.n	800fc68 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800fc62:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800fc66:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800fc68:	68fb      	ldr	r3, [r7, #12]
    }
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3710      	adds	r7, #16
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}
 800fc72:	bf00      	nop
 800fc74:	08026554 	.word	0x08026554
 800fc78:	0802657c 	.word	0x0802657c
 800fc7c:	080265a0 	.word	0x080265a0

0800fc80 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b094      	sub	sp, #80	@ 0x50
 800fc84:	af02      	add	r7, sp, #8
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	60b9      	str	r1, [r7, #8]
 800fc8a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fc90:	2300      	movs	r3, #0
 800fc92:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800fc94:	f06f 0315 	mvn.w	r3, #21
 800fc98:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d013      	beq.n	800fcc8 <FreeRTOS_connect+0x48>
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	785b      	ldrb	r3, [r3, #1]
 800fca4:	2b0a      	cmp	r3, #10
 800fca6:	d00f      	beq.n	800fcc8 <FreeRTOS_connect+0x48>
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	785b      	ldrb	r3, [r3, #1]
 800fcac:	2b02      	cmp	r3, #2
 800fcae:	d00b      	beq.n	800fcc8 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800fcb0:	f107 0314 	add.w	r3, r7, #20
 800fcb4:	2218      	movs	r2, #24
 800fcb6:	68b9      	ldr	r1, [r7, #8]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f012 ff67 	bl	8022b8c <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800fcbe:	2302      	movs	r3, #2
 800fcc0:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800fcc2:	f107 0314 	add.w	r3, r7, #20
 800fcc6:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800fcc8:	68b9      	ldr	r1, [r7, #8]
 800fcca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fccc:	f7ff fef4 	bl	800fab8 <prvTCPConnectStart>
 800fcd0:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800fcd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d146      	bne.n	800fd66 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800fcd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d110      	bne.n	800fd00 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800fcde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fce0:	6a1b      	ldr	r3, [r3, #32]
 800fce2:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800fce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d103      	bne.n	800fcf2 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800fcea:	f06f 030a 	mvn.w	r3, #10
 800fcee:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800fcf0:	e039      	b.n	800fd66 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800fcf2:	2301      	movs	r3, #1
 800fcf4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800fcf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7f5 fb64 	bl	80053c8 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800fd00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fd02:	f000 ff5d 	bl	8010bc0 <FreeRTOS_issocketconnected>
 800fd06:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800fd08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	db2a      	blt.n	800fd64 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800fd0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	dd02      	ble.n	800fd1a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800fd14:	2300      	movs	r3, #0
 800fd16:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fd18:	e025      	b.n	800fd66 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800fd1a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800fd1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800fd22:	4611      	mov	r1, r2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7f5 fb87 	bl	8005438 <xTaskCheckForTimeOut>
 800fd2a:	4603      	mov	r3, r0
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d003      	beq.n	800fd38 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800fd30:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800fd34:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800fd36:	e016      	b.n	800fd66 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800fd38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd3a:	6858      	ldr	r0, [r3, #4]
 800fd3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fd3e:	9300      	str	r3, [sp, #0]
 800fd40:	2300      	movs	r3, #0
 800fd42:	2201      	movs	r2, #1
 800fd44:	2128      	movs	r1, #40	@ 0x28
 800fd46:	f7f3 fb53 	bl	80033f0 <xEventGroupWaitBits>
 800fd4a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800fd4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fd4e:	f003 0320 	and.w	r3, r3, #32
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d0c0      	beq.n	800fcd8 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800fd56:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fd5a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800fd5c:	4804      	ldr	r0, [pc, #16]	@ (800fd70 <FreeRTOS_connect+0xf0>)
 800fd5e:	f012 fcf9 	bl	8022754 <lUDPLoggingPrintf>
                    break;
 800fd62:	e000      	b.n	800fd66 <FreeRTOS_connect+0xe6>
                    break;
 800fd64:	bf00      	nop
                }
            }
        }

        return xResult;
 800fd66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3748      	adds	r7, #72	@ 0x48
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}
 800fd70:	080265cc 	.word	0x080265cc

0800fd74 <prvAcceptWaitClient>:
 * @return A new connected socket or NULL.
 */
    static FreeRTOS_Socket_t * prvAcceptWaitClient( FreeRTOS_Socket_t * pxParentSocket,
                                                    struct freertos_sockaddr * pxAddress,
                                                    socklen_t * pxAddressLength )
    {
 800fd74:	b580      	push	{r7, lr}
 800fd76:	b086      	sub	sp, #24
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	60f8      	str	r0, [r7, #12]
 800fd7c:	60b9      	str	r1, [r7, #8]
 800fd7e:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800fd80:	2300      	movs	r3, #0
 800fd82:	617b      	str	r3, [r7, #20]

        /* Is there a new client? */
        vTaskSuspendAll();
 800fd84:	f7f4 fe64 	bl	8004a50 <vTaskSuspendAll>
        {
            if( pxParentSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800fd88:	68fb      	ldr	r3, [r7, #12]
 800fd8a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fd8e:	f003 0308 	and.w	r3, r3, #8
 800fd92:	b2db      	uxtb	r3, r3
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d10b      	bne.n	800fdb0 <prvAcceptWaitClient+0x3c>
            {
                pxClientSocket = pxParentSocket->u.xTCP.pxPeerSocket;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd9c:	617b      	str	r3, [r7, #20]

                if( pxClientSocket != NULL )
 800fd9e:	697b      	ldr	r3, [r7, #20]
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	d007      	beq.n	800fdb4 <prvAcceptWaitClient+0x40>
                {
                    FreeRTOS_printf( ( "prvAcceptWaitClient: client %p parent %p\n",
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	6979      	ldr	r1, [r7, #20]
 800fda8:	4845      	ldr	r0, [pc, #276]	@ (800fec0 <prvAcceptWaitClient+0x14c>)
 800fdaa:	f012 fcd3 	bl	8022754 <lUDPLoggingPrintf>
 800fdae:	e001      	b.n	800fdb4 <prvAcceptWaitClient+0x40>
                                       ( void * ) pxClientSocket, ( void * ) pxParentSocket ) );
                }
            }
            else
            {
                pxClientSocket = pxParentSocket;
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	617b      	str	r3, [r7, #20]
            }

            if( pxClientSocket != NULL )
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d018      	beq.n	800fdec <prvAcceptWaitClient+0x78>
            {
                /* Is it still not taken ? */
                if( pxClientSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED )
 800fdba:	697b      	ldr	r3, [r7, #20]
 800fdbc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fdc0:	f003 0302 	and.w	r3, r3, #2
 800fdc4:	b2db      	uxtb	r3, r3
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00e      	beq.n	800fde8 <prvAcceptWaitClient+0x74>
                {
                    if( pxParentSocket->u.xTCP.pxPeerSocket != NULL )
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d002      	beq.n	800fdd8 <prvAcceptWaitClient+0x64>
                    {
                        pxParentSocket->u.xTCP.pxPeerSocket = NULL;
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	67da      	str	r2, [r3, #124]	@ 0x7c
                    }

                    pxClientSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 800fdd8:	697a      	ldr	r2, [r7, #20]
 800fdda:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fdde:	f36f 0341 	bfc	r3, #1, #1
 800fde2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800fde6:	e001      	b.n	800fdec <prvAcceptWaitClient+0x78>
                }
                else
                {
                    pxClientSocket = NULL;
 800fde8:	2300      	movs	r3, #0
 800fdea:	617b      	str	r3, [r7, #20]
                }
            }
        }
        ( void ) xTaskResumeAll();
 800fdec:	f7f4 fe3e 	bl	8004a6c <xTaskResumeAll>

        if( pxClientSocket != NULL )
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d05e      	beq.n	800feb4 <prvAcceptWaitClient+0x140>
        {
            if( pxAddressLength != NULL )
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <prvAcceptWaitClient+0x8e>
            {
                *pxAddressLength = sizeof( struct freertos_sockaddr );
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2218      	movs	r2, #24
 800fe00:	601a      	str	r2, [r3, #0]
            }

            switch( pxClientSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	7a1b      	ldrb	r3, [r3, #8]
 800fe06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d002      	beq.n	800fe16 <prvAcceptWaitClient+0xa2>
 800fe10:	2b01      	cmp	r3, #1
 800fe12:	d02c      	beq.n	800fe6e <prvAcceptWaitClient+0xfa>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800fe14:	e04e      	b.n	800feb4 <prvAcceptWaitClient+0x140>
                        if( pxAddress != NULL )
 800fe16:	68bb      	ldr	r3, [r7, #8]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d048      	beq.n	800feae <prvAcceptWaitClient+0x13a>
                            pxAddress->sin_family = FREERTOS_AF_INET4;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	2202      	movs	r2, #2
 800fe20:	705a      	strb	r2, [r3, #1]
                            pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_ntohl( pxClientSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe26:	061a      	lsls	r2, r3, #24
 800fe28:	697b      	ldr	r3, [r7, #20]
 800fe2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe2c:	021b      	lsls	r3, r3, #8
 800fe2e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800fe32:	431a      	orrs	r2, r3
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe38:	0a1b      	lsrs	r3, r3, #8
 800fe3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fe3e:	431a      	orrs	r2, r3
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe44:	0e1b      	lsrs	r3, r3, #24
 800fe46:	431a      	orrs	r2, r3
 800fe48:	68bb      	ldr	r3, [r7, #8]
 800fe4a:	609a      	str	r2, [r3, #8]
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe52:	021b      	lsls	r3, r3, #8
 800fe54:	b21a      	sxth	r2, r3
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe5c:	0a1b      	lsrs	r3, r3, #8
 800fe5e:	b29b      	uxth	r3, r3
 800fe60:	b21b      	sxth	r3, r3
 800fe62:	4313      	orrs	r3, r2
 800fe64:	b21b      	sxth	r3, r3
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	805a      	strh	r2, [r3, #2]
                        break;
 800fe6c:	e01f      	b.n	800feae <prvAcceptWaitClient+0x13a>
                        if( pxAddress != NULL )
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d01e      	beq.n	800feb2 <prvAcceptWaitClient+0x13e>
                            pxAddress->sin_family = FREERTOS_AF_INET6;
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	220a      	movs	r2, #10
 800fe78:	705a      	strb	r2, [r3, #1]
                            ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxClientSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	f103 0008 	add.w	r0, r3, #8
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	3354      	adds	r3, #84	@ 0x54
 800fe84:	2210      	movs	r2, #16
 800fe86:	4619      	mov	r1, r3
 800fe88:	f012 fe80 	bl	8022b8c <memcpy>
                            pxAddress->sin_port = FreeRTOS_ntohs( pxClientSocket->u.xTCP.usRemotePort );
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe92:	021b      	lsls	r3, r3, #8
 800fe94:	b21a      	sxth	r2, r3
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fe9c:	0a1b      	lsrs	r3, r3, #8
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	b21b      	sxth	r3, r3
 800fea2:	4313      	orrs	r3, r2
 800fea4:	b21b      	sxth	r3, r3
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	68bb      	ldr	r3, [r7, #8]
 800feaa:	805a      	strh	r2, [r3, #2]
                        break;
 800feac:	e001      	b.n	800feb2 <prvAcceptWaitClient+0x13e>
                        break;
 800feae:	bf00      	nop
 800feb0:	e000      	b.n	800feb4 <prvAcceptWaitClient+0x140>
                        break;
 800feb2:	bf00      	nop
            }
        }

        return pxClientSocket;
 800feb4:	697b      	ldr	r3, [r7, #20]
    }
 800feb6:	4618      	mov	r0, r3
 800feb8:	3718      	adds	r7, #24
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	080265f8 	.word	0x080265f8

0800fec4 <FreeRTOS_accept>:
 *         be bound already to the same port number as the listening socket.
 */
    Socket_t FreeRTOS_accept( Socket_t xServerSocket,
                              struct freertos_sockaddr * pxAddress,
                              socklen_t * pxAddressLength )
    {
 800fec4:	b580      	push	{r7, lr}
 800fec6:	b08e      	sub	sp, #56	@ 0x38
 800fec8:	af02      	add	r7, sp, #8
 800feca:	60f8      	str	r0, [r7, #12]
 800fecc:	60b9      	str	r1, [r7, #8]
 800fece:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xServerSocket;
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	627b      	str	r3, [r7, #36]	@ 0x24
        FreeRTOS_Socket_t * pxClientSocket = NULL;
 800fed4:	2300      	movs	r3, #0
 800fed6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fed8:	2300      	movs	r3, #0
 800feda:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        IPStackEvent_t xAskEvent;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800fedc:	2201      	movs	r2, #1
 800fede:	2106      	movs	r1, #6
 800fee0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fee2:	f7fe fa6d 	bl	800e3c0 <prvValidSocket>
 800fee6:	4603      	mov	r3, r0
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d103      	bne.n	800fef4 <FreeRTOS_accept+0x30>
            /* Not a valid socket or wrong type */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800feec:	f04f 33ff 	mov.w	r3, #4294967295
 800fef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800fef2:	e058      	b.n	800ffa6 <FreeRTOS_accept+0xe2>
        }
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800fef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fef6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fefa:	f003 0308 	and.w	r3, r3, #8
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d000      	beq.n	800ff06 <FreeRTOS_accept+0x42>
 800ff04:	e008      	b.n	800ff18 <FreeRTOS_accept+0x54>
                 ( pxSocket->u.xTCP.eTCPState != eTCP_LISTEN ) )
 800ff06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff08:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) &&
 800ff0c:	2b01      	cmp	r3, #1
 800ff0e:	d003      	beq.n	800ff18 <FreeRTOS_accept+0x54>
            /* Parent socket is not in listening mode */

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxClientSocket = FREERTOS_INVALID_SOCKET;
 800ff10:	f04f 33ff 	mov.w	r3, #4294967295
 800ff14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ff16:	e046      	b.n	800ffa6 <FreeRTOS_accept+0xe2>
        else
        {
            /* Loop will stop with breaks. */
            for( ; ; )
            {
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 800ff18:	687a      	ldr	r2, [r7, #4]
 800ff1a:	68b9      	ldr	r1, [r7, #8]
 800ff1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ff1e:	f7ff ff29 	bl	800fd74 <prvAcceptWaitClient>
 800ff22:	62f8      	str	r0, [r7, #44]	@ 0x2c

                if( pxClientSocket != NULL )
 800ff24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d013      	beq.n	800ff52 <FreeRTOS_accept+0x8e>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 800ff2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff2c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ff30:	f003 0308 	and.w	r3, r3, #8
 800ff34:	b2db      	uxtb	r3, r3
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d130      	bne.n	800ff9c <FreeRTOS_accept+0xd8>
                    {
                        /* Ask to set an event in 'xEventGroup' as soon as a new
                         * client gets connected for this listening socket. */
                        xAskEvent.eEventType = eTCPAcceptEvent;
 800ff3a:	2307      	movs	r3, #7
 800ff3c:	743b      	strb	r3, [r7, #16]
                        xAskEvent.pvData = pxSocket;
 800ff3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff40:	617b      	str	r3, [r7, #20]
                        ( void ) xSendEventStructToIPTask( &xAskEvent, portMAX_DELAY );
 800ff42:	f107 0310 	add.w	r3, r7, #16
 800ff46:	f04f 31ff 	mov.w	r1, #4294967295
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7f9 fe78 	bl	8009c40 <xSendEventStructToIPTask>
                    }

                    break;
 800ff50:	e024      	b.n	800ff9c <FreeRTOS_accept+0xd8>
                }

                if( xTimed == pdFALSE )
 800ff52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10c      	bne.n	800ff72 <FreeRTOS_accept+0xae>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800ff58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff5a:	6a1b      	ldr	r3, [r3, #32]
 800ff5c:	623b      	str	r3, [r7, #32]

                    if( xRemainingTime == ( TickType_t ) 0 )
 800ff5e:	6a3b      	ldr	r3, [r7, #32]
 800ff60:	2b00      	cmp	r3, #0
 800ff62:	d01d      	beq.n	800ffa0 <FreeRTOS_accept+0xdc>
                    {
                        break;
                    }

                    /* Don't get here a second time */
                    xTimed = pdTRUE;
 800ff64:	2301      	movs	r3, #1
 800ff66:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800ff68:	f107 0318 	add.w	r3, r7, #24
 800ff6c:	4618      	mov	r0, r3
 800ff6e:	f7f5 fa2b 	bl	80053c8 <vTaskSetTimeOutState>
                }

                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ff72:	f107 0220 	add.w	r2, r7, #32
 800ff76:	f107 0318 	add.w	r3, r7, #24
 800ff7a:	4611      	mov	r1, r2
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	f7f5 fa5b 	bl	8005438 <xTaskCheckForTimeOut>
 800ff82:	4603      	mov	r3, r0
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10d      	bne.n	800ffa4 <FreeRTOS_accept+0xe0>
                {
                    break;
                }

                /* Put the calling task to 'sleep' until a down-stream event is received. */
                ( void ) xEventGroupWaitBits( pxSocket->xEventGroup,
 800ff88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff8a:	6858      	ldr	r0, [r3, #4]
 800ff8c:	6a3b      	ldr	r3, [r7, #32]
 800ff8e:	9300      	str	r3, [sp, #0]
 800ff90:	2300      	movs	r3, #0
 800ff92:	2201      	movs	r2, #1
 800ff94:	2104      	movs	r1, #4
 800ff96:	f7f3 fa2b 	bl	80033f0 <xEventGroupWaitBits>
                pxClientSocket = prvAcceptWaitClient( pxSocket, pxAddress, pxAddressLength );
 800ff9a:	e7bd      	b.n	800ff18 <FreeRTOS_accept+0x54>
                    break;
 800ff9c:	bf00      	nop
 800ff9e:	e002      	b.n	800ffa6 <FreeRTOS_accept+0xe2>
                        break;
 800ffa0:	bf00      	nop
 800ffa2:	e000      	b.n	800ffa6 <FreeRTOS_accept+0xe2>
                    break;
 800ffa4:	bf00      	nop
                                              pdFALSE /*xWaitAllBits*/,
                                              xRemainingTime );
            }
        }

        return pxClientSocket;
 800ffa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3730      	adds	r7, #48	@ 0x30
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bd80      	pop	{r7, pc}

0800ffb0 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b08a      	sub	sp, #40	@ 0x28
 800ffb4:	af02      	add	r7, sp, #8
 800ffb6:	60f8      	str	r0, [r7, #12]
 800ffb8:	60b9      	str	r1, [r7, #8]
 800ffba:	607a      	str	r2, [r7, #4]
 800ffbc:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	f003 0301 	and.w	r3, r3, #1
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d13b      	bne.n	8010040 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	089b      	lsrs	r3, r3, #2
 800ffcc:	f003 0301 	and.w	r3, r3, #1
 800ffd0:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	68ba      	ldr	r2, [r7, #8]
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	f001 fa04 	bl	80113ee <uxStreamBufferGet>
 800ffe6:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800ffe8:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fff0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800fff4:	b2db      	uxtb	r3, r3
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d02b      	beq.n	8010052 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010000:	4618      	mov	r0, r3
 8010002:	f001 f8c5 	bl	8011190 <uxStreamBufferFrontSpace>
 8010006:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801000e:	697a      	ldr	r2, [r7, #20]
 8010010:	429a      	cmp	r2, r3
 8010012:	d31e      	bcc.n	8010052 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 8010014:	68fa      	ldr	r2, [r7, #12]
 8010016:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801001a:	f36f 13c7 	bfc	r3, #7, #1
 801001e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010028:	f043 0301 	orr.w	r3, r3, #1
 801002c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	2201      	movs	r2, #1
 8010034:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010038:	2006      	movs	r0, #6
 801003a:	f7f9 fdeb 	bl	8009c14 <xSendEventToIPTask>
 801003e:	e008      	b.n	8010052 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010046:	68b9      	ldr	r1, [r7, #8]
 8010048:	4618      	mov	r0, r3
 801004a:	f001 f930 	bl	80112ae <uxStreamBufferGetPtr>
 801004e:	4603      	mov	r3, r0
 8010050:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 8010052:	69fb      	ldr	r3, [r7, #28]
    }
 8010054:	4618      	mov	r0, r3
 8010056:	3720      	adds	r7, #32
 8010058:	46bd      	mov	sp, r7
 801005a:	bd80      	pop	{r7, pc}

0801005c <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 801005c:	b580      	push	{r7, lr}
 801005e:	b08e      	sub	sp, #56	@ 0x38
 8010060:	af02      	add	r7, sp, #8
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 8010068:	2300      	movs	r3, #0
 801006a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 801006c:	2300      	movs	r3, #0
 801006e:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 8010070:	2300      	movs	r3, #0
 8010072:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801007a:	2b00      	cmp	r3, #0
 801007c:	d05f      	beq.n	801013e <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010084:	4618      	mov	r0, r3
 8010086:	f001 f894 	bl	80111b2 <uxStreamBufferGetSize>
 801008a:	4603      	mov	r3, r0
 801008c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 801008e:	e056      	b.n	801013e <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 801009a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d007      	beq.n	80100b2 <prvRecvWait+0x56>
 80100a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80100a6:	2b08      	cmp	r3, #8
 80100a8:	d003      	beq.n	80100b2 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 80100aa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80100ae:	2b09      	cmp	r3, #9
 80100b0:	d10e      	bne.n	80100d0 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 80100b2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80100b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80100be:	f003 0308 	and.w	r3, r3, #8
 80100c2:	b2db      	uxtb	r3, r3
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d03e      	beq.n	8010146 <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 80100c8:	f06f 030b 	mvn.w	r3, #11
 80100cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 80100ce:	e03a      	b.n	8010146 <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 80100d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d111      	bne.n	80100fa <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 80100d6:	68fb      	ldr	r3, [r7, #12]
 80100d8:	6a1b      	ldr	r3, [r3, #32]
 80100da:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d033      	beq.n	801014a <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	f003 0310 	and.w	r3, r3, #16
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d130      	bne.n	801014e <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 80100ec:	2301      	movs	r3, #1
 80100ee:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 80100f0:	f107 0314 	add.w	r3, r7, #20
 80100f4:	4618      	mov	r0, r3
 80100f6:	f7f5 f967 	bl	80053c8 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 80100fa:	f107 021c 	add.w	r2, r7, #28
 80100fe:	f107 0314 	add.w	r3, r7, #20
 8010102:	4611      	mov	r1, r2
 8010104:	4618      	mov	r0, r3
 8010106:	f7f5 f997 	bl	8005438 <xTaskCheckForTimeOut>
 801010a:	4603      	mov	r3, r0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d120      	bne.n	8010152 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	6858      	ldr	r0, [r3, #4]
 8010114:	69fb      	ldr	r3, [r7, #28]
 8010116:	9300      	str	r3, [sp, #0]
 8010118:	2300      	movs	r3, #0
 801011a:	2201      	movs	r2, #1
 801011c:	2161      	movs	r1, #97	@ 0x61
 801011e:	f7f3 f967 	bl	80033f0 <xEventGroupWaitBits>
 8010122:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801012a:	2b00      	cmp	r3, #0
 801012c:	d007      	beq.n	801013e <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010134:	4618      	mov	r0, r3
 8010136:	f001 f83c 	bl	80111b2 <uxStreamBufferGetSize>
 801013a:	4603      	mov	r3, r0
 801013c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 801013e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010140:	2b00      	cmp	r3, #0
 8010142:	d0a5      	beq.n	8010090 <prvRecvWait+0x34>
 8010144:	e006      	b.n	8010154 <prvRecvWait+0xf8>
                break;
 8010146:	bf00      	nop
 8010148:	e004      	b.n	8010154 <prvRecvWait+0xf8>
                    break;
 801014a:	bf00      	nop
 801014c:	e002      	b.n	8010154 <prvRecvWait+0xf8>
                    break;
 801014e:	bf00      	nop
 8010150:	e000      	b.n	8010154 <prvRecvWait+0xf8>
                break;
 8010152:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010158:	601a      	str	r2, [r3, #0]

        return xByteCount;
 801015a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 801015c:	4618      	mov	r0, r3
 801015e:	3730      	adds	r7, #48	@ 0x30
 8010160:	46bd      	mov	sp, r7
 8010162:	bd80      	pop	{r7, pc}

08010164 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 8010164:	b580      	push	{r7, lr}
 8010166:	b088      	sub	sp, #32
 8010168:	af00      	add	r7, sp, #0
 801016a:	60f8      	str	r0, [r7, #12]
 801016c:	60b9      	str	r1, [r7, #8]
 801016e:	607a      	str	r2, [r7, #4]
 8010170:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 8010172:	2300      	movs	r3, #0
 8010174:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 801017a:	2300      	movs	r3, #0
 801017c:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 801017e:	2201      	movs	r2, #1
 8010180:	2106      	movs	r1, #6
 8010182:	69b8      	ldr	r0, [r7, #24]
 8010184:	f7fe f91c 	bl	800e3c0 <prvValidSocket>
 8010188:	4603      	mov	r3, r0
 801018a:	2b00      	cmp	r3, #0
 801018c:	d103      	bne.n	8010196 <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 801018e:	f06f 0315 	mvn.w	r3, #21
 8010192:	61fb      	str	r3, [r7, #28]
 8010194:	e01d      	b.n	80101d2 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	f003 0301 	and.w	r3, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	d006      	beq.n	80101ae <FreeRTOS_recv+0x4a>
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d103      	bne.n	80101ae <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 80101a6:	f06f 0315 	mvn.w	r3, #21
 80101aa:	61fb      	str	r3, [r7, #28]
 80101ac:	e011      	b.n	80101d2 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 80101ae:	f107 0314 	add.w	r3, r7, #20
 80101b2:	683a      	ldr	r2, [r7, #0]
 80101b4:	4619      	mov	r1, r3
 80101b6:	69b8      	ldr	r0, [r7, #24]
 80101b8:	f7ff ff50 	bl	801005c <prvRecvWait>
 80101bc:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 80101be:	69fb      	ldr	r3, [r7, #28]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	dd06      	ble.n	80101d2 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	687a      	ldr	r2, [r7, #4]
 80101c8:	68b9      	ldr	r1, [r7, #8]
 80101ca:	69b8      	ldr	r0, [r7, #24]
 80101cc:	f7ff fef0 	bl	800ffb0 <prvRecvData>
 80101d0:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 80101d2:	69fb      	ldr	r3, [r7, #28]
    }
 80101d4:	4618      	mov	r0, r3
 80101d6:	3720      	adds	r7, #32
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}

080101dc <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 80101e6:	2301      	movs	r3, #1
 80101e8:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 80101ea:	2201      	movs	r2, #1
 80101ec:	2106      	movs	r1, #6
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7fe f8e6 	bl	800e3c0 <prvValidSocket>
 80101f4:	4603      	mov	r3, r0
 80101f6:	2b00      	cmp	r3, #0
 80101f8:	d103      	bne.n	8010202 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 80101fa:	f06f 0315 	mvn.w	r3, #21
 80101fe:	60fb      	str	r3, [r7, #12]
 8010200:	e040      	b.n	8010284 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8010208:	f003 0308 	and.w	r3, r3, #8
 801020c:	b2db      	uxtb	r3, r3
 801020e:	2b00      	cmp	r3, #0
 8010210:	d003      	beq.n	801021a <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 8010212:	f06f 030b 	mvn.w	r3, #11
 8010216:	60fb      	str	r3, [r7, #12]
 8010218:	e034      	b.n	8010284 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010220:	2b00      	cmp	r3, #0
 8010222:	d009      	beq.n	8010238 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 801022a:	2b08      	cmp	r3, #8
 801022c:	d004      	beq.n	8010238 <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 8010234:	2b09      	cmp	r3, #9
 8010236:	d103      	bne.n	8010240 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010238:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801023c:	60fb      	str	r3, [r7, #12]
 801023e:	e021      	b.n	8010284 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801024a:	b2db      	uxtb	r3, r3
 801024c:	2b00      	cmp	r3, #0
 801024e:	d002      	beq.n	8010256 <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 8010250:	2300      	movs	r3, #0
 8010252:	60fb      	str	r3, [r7, #12]
 8010254:	e016      	b.n	8010284 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d102      	bne.n	8010262 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 801025c:	2300      	movs	r3, #0
 801025e:	60fb      	str	r3, [r7, #12]
 8010260:	e010      	b.n	8010284 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010268:	2b00      	cmp	r3, #0
 801026a:	d10b      	bne.n	8010284 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 801026c:	2100      	movs	r1, #0
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 fac6 	bl	8010800 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801027a:	2b00      	cmp	r3, #0
 801027c:	d102      	bne.n	8010284 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 801027e:	f06f 030b 	mvn.w	r3, #11
 8010282:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 8010284:	68fb      	ldr	r3, [r7, #12]
    }
 8010286:	4618      	mov	r0, r3
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}

0801028e <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 801028e:	b580      	push	{r7, lr}
 8010290:	b088      	sub	sp, #32
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
 8010296:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 8010298:	2300      	movs	r3, #0
 801029a:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 80102a0:	2300      	movs	r3, #0
 80102a2:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	2200      	movs	r2, #0
 80102a8:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 80102aa:	2200      	movs	r2, #0
 80102ac:	2106      	movs	r1, #6
 80102ae:	6978      	ldr	r0, [r7, #20]
 80102b0:	f7fe f886 	bl	800e3c0 <prvValidSocket>
 80102b4:	4603      	mov	r3, r0
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d135      	bne.n	8010326 <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 80102ba:	697b      	ldr	r3, [r7, #20]
 80102bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102c0:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 80102c2:	69bb      	ldr	r3, [r7, #24]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d10f      	bne.n	80102e8 <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 80102c8:	697b      	ldr	r3, [r7, #20]
 80102ca:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80102ce:	f003 0308 	and.w	r3, r3, #8
 80102d2:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d107      	bne.n	80102e8 <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 80102d8:	2100      	movs	r1, #0
 80102da:	6978      	ldr	r0, [r7, #20]
 80102dc:	f000 fa90 	bl	8010800 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 80102e0:	697b      	ldr	r3, [r7, #20]
 80102e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102e6:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 80102e8:	69bb      	ldr	r3, [r7, #24]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d01b      	beq.n	8010326 <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80102ee:	69b8      	ldr	r0, [r7, #24]
 80102f0:	f000 ff3d 	bl	801116e <uxStreamBufferGetSpace>
 80102f4:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	691a      	ldr	r2, [r3, #16]
 80102fa:	69bb      	ldr	r3, [r7, #24]
 80102fc:	689b      	ldr	r3, [r3, #8]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 8010302:	68fa      	ldr	r2, [r7, #12]
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	429a      	cmp	r2, r3
 8010308:	d803      	bhi.n	8010312 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 801030a:	68fa      	ldr	r2, [r7, #12]
 801030c:	683b      	ldr	r3, [r7, #0]
 801030e:	601a      	str	r2, [r3, #0]
 8010310:	e002      	b.n	8010318 <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 8010312:	693a      	ldr	r2, [r7, #16]
 8010314:	683b      	ldr	r3, [r7, #0]
 8010316:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	689b      	ldr	r3, [r3, #8]
 801031c:	3310      	adds	r3, #16
 801031e:	69ba      	ldr	r2, [r7, #24]
 8010320:	4413      	add	r3, r2
 8010322:	3304      	adds	r3, #4
 8010324:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 8010326:	69fb      	ldr	r3, [r7, #28]
    }
 8010328:	4618      	mov	r0, r3
 801032a:	3720      	adds	r7, #32
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 8010330:	b580      	push	{r7, lr}
 8010332:	b090      	sub	sp, #64	@ 0x40
 8010334:	af02      	add	r7, sp, #8
 8010336:	60f8      	str	r0, [r7, #12]
 8010338:	60b9      	str	r1, [r7, #8]
 801033a:	607a      	str	r2, [r7, #4]
 801033c:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 801033e:	2300      	movs	r3, #0
 8010340:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801034c:	4618      	mov	r0, r3
 801034e:	f000 ff0e 	bl	801116e <uxStreamBufferGetSpace>
 8010352:	4603      	mov	r3, r0
 8010354:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 8010356:	2300      	movs	r3, #0
 8010358:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 801035a:	68bb      	ldr	r3, [r7, #8]
 801035c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 801035e:	e08f      	b.n	8010480 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 8010360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010362:	2b00      	cmp	r3, #0
 8010364:	dd4b      	ble.n	80103fe <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 8010366:	2300      	movs	r3, #0
 8010368:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 801036a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801036c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801036e:	429a      	cmp	r2, r3
 8010370:	dd01      	ble.n	8010376 <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 8010372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010374:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 8010376:	68fb      	ldr	r3, [r7, #12]
 8010378:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801037c:	f003 0310 	and.w	r3, r3, #16
 8010380:	b2db      	uxtb	r3, r3
 8010382:	2b00      	cmp	r3, #0
 8010384:	d00e      	beq.n	80103a4 <prvTCPSendLoop+0x74>
 8010386:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801038a:	429a      	cmp	r2, r3
 801038c:	d10a      	bne.n	80103a4 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 801038e:	2301      	movs	r3, #1
 8010390:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 8010392:	f7f4 fb5d 	bl	8004a50 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 8010396:	68fa      	ldr	r2, [r7, #12]
 8010398:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801039c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80103a0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80103aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103ae:	2100      	movs	r1, #0
 80103b0:	f000 ff9d 	bl	80112ee <uxStreamBufferAdd>
 80103b4:	4603      	mov	r3, r0
 80103b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 80103b8:	6a3b      	ldr	r3, [r7, #32]
 80103ba:	2b01      	cmp	r3, #1
 80103bc:	d101      	bne.n	80103c2 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 80103be:	f7f4 fb55 	bl	8004a6c <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2201      	movs	r2, #1
 80103c6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 80103ca:	f7fa fb7b 	bl	800aac4 <xIsCallingFromIPTask>
 80103ce:	4603      	mov	r3, r0
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d102      	bne.n	80103da <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 80103d4:	2006      	movs	r0, #6
 80103d6:	f7f9 fc1d 	bl	8009c14 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 80103da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80103dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103de:	1ad3      	subs	r3, r2, r3
 80103e0:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 80103e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80103e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103e6:	4413      	add	r3, r2
 80103e8:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 80103ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d053      	beq.n	8010498 <prvTCPSendLoop+0x168>
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d050      	beq.n	8010498 <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 80103f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80103f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80103fa:	4413      	add	r3, r2
 80103fc:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 80103fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010400:	2b00      	cmp	r3, #0
 8010402:	d119      	bne.n	8010438 <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010408:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 801040a:	f7fa fb5b 	bl	800aac4 <xIsCallingFromIPTask>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 8010414:	2300      	movs	r3, #0
 8010416:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 8010418:	69fb      	ldr	r3, [r7, #28]
 801041a:	2b00      	cmp	r3, #0
 801041c:	d035      	beq.n	801048a <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 801041e:	683b      	ldr	r3, [r7, #0]
 8010420:	f003 0310 	and.w	r3, r3, #16
 8010424:	2b00      	cmp	r3, #0
 8010426:	d132      	bne.n	801048e <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 8010428:	2301      	movs	r3, #1
 801042a:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 801042c:	f107 0314 	add.w	r3, r7, #20
 8010430:	4618      	mov	r0, r3
 8010432:	f7f4 ffc9 	bl	80053c8 <vTaskSetTimeOutState>
 8010436:	e00a      	b.n	801044e <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 8010438:	f107 021c 	add.w	r2, r7, #28
 801043c:	f107 0314 	add.w	r3, r7, #20
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f7f4 fff8 	bl	8005438 <xTaskCheckForTimeOut>
 8010448:	4603      	mov	r3, r0
 801044a:	2b00      	cmp	r3, #0
 801044c:	d121      	bne.n	8010492 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	6858      	ldr	r0, [r3, #4]
 8010452:	69fb      	ldr	r3, [r7, #28]
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	2300      	movs	r3, #0
 8010458:	2201      	movs	r2, #1
 801045a:	2122      	movs	r1, #34	@ 0x22
 801045c:	f7f2 ffc8 	bl	80033f0 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 8010460:	6879      	ldr	r1, [r7, #4]
 8010462:	68f8      	ldr	r0, [r7, #12]
 8010464:	f7ff feba 	bl	80101dc <prvTCPSendCheck>
 8010468:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 801046a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801046c:	2b00      	cmp	r3, #0
 801046e:	db12      	blt.n	8010496 <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010476:	4618      	mov	r0, r3
 8010478:	f000 fe79 	bl	801116e <uxStreamBufferGetSpace>
 801047c:	4603      	mov	r3, r0
 801047e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 8010480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010482:	2b00      	cmp	r3, #0
 8010484:	f73f af6c 	bgt.w	8010360 <prvTCPSendLoop+0x30>
 8010488:	e006      	b.n	8010498 <prvTCPSendLoop+0x168>
                    break;
 801048a:	bf00      	nop
 801048c:	e004      	b.n	8010498 <prvTCPSendLoop+0x168>
                    break;
 801048e:	bf00      	nop
 8010490:	e002      	b.n	8010498 <prvTCPSendLoop+0x168>
                    break;
 8010492:	bf00      	nop
 8010494:	e000      	b.n	8010498 <prvTCPSendLoop+0x168>
                break;
 8010496:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 8010498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801049a:	4618      	mov	r0, r3
 801049c:	3738      	adds	r7, #56	@ 0x38
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
	...

080104a4 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 80104a4:	b580      	push	{r7, lr}
 80104a6:	b086      	sub	sp, #24
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	60f8      	str	r0, [r7, #12]
 80104ac:	60b9      	str	r1, [r7, #8]
 80104ae:	607a      	str	r2, [r7, #4]
 80104b0:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 80104b6:	6879      	ldr	r1, [r7, #4]
 80104b8:	6938      	ldr	r0, [r7, #16]
 80104ba:	f7ff fe8f 	bl	80101dc <prvTCPSendCheck>
 80104be:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 80104c0:	697b      	ldr	r3, [r7, #20]
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	dd24      	ble.n	8010510 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 80104c6:	683b      	ldr	r3, [r7, #0]
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	68b9      	ldr	r1, [r7, #8]
 80104cc:	6938      	ldr	r0, [r7, #16]
 80104ce:	f7ff ff2f 	bl	8010330 <prvTCPSendLoop>
 80104d2:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 80104d4:	697b      	ldr	r3, [r7, #20]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d11a      	bne.n	8010510 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 80104da:	693b      	ldr	r3, [r7, #16]
 80104dc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80104e0:	2b05      	cmp	r3, #5
 80104e2:	d903      	bls.n	80104ec <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 80104e4:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80104e8:	617b      	str	r3, [r7, #20]
 80104ea:	e011      	b.n	8010510 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80104f0:	2b17      	cmp	r3, #23
 80104f2:	d00a      	beq.n	801050a <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80104f8:	4619      	mov	r1, r3
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010504:	4805      	ldr	r0, [pc, #20]	@ (801051c <FreeRTOS_send+0x78>)
 8010506:	f012 f925 	bl	8022754 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 801050a:	f06f 031b 	mvn.w	r3, #27
 801050e:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 8010510:	697b      	ldr	r3, [r7, #20]
    }
 8010512:	4618      	mov	r0, r3
 8010514:	3718      	adds	r7, #24
 8010516:	46bd      	mov	sp, r7
 8010518:	bd80      	pop	{r7, pc}
 801051a:	bf00      	nop
 801051c:	08026624 	.word	0x08026624

08010520 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
 8010528:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 801052a:	2300      	movs	r3, #0
 801052c:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010532:	2201      	movs	r2, #1
 8010534:	2106      	movs	r1, #6
 8010536:	68b8      	ldr	r0, [r7, #8]
 8010538:	f7fd ff42 	bl	800e3c0 <prvValidSocket>
 801053c:	4603      	mov	r3, r0
 801053e:	2b00      	cmp	r3, #0
 8010540:	d103      	bne.n	801054a <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010542:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010546:	60fb      	str	r3, [r7, #12]
 8010548:	e056      	b.n	80105f8 <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010550:	2b00      	cmp	r3, #0
 8010552:	d008      	beq.n	8010566 <FreeRTOS_listen+0x46>
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801055a:	2b08      	cmp	r3, #8
 801055c:	d003      	beq.n	8010566 <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 801055e:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010562:	60fb      	str	r3, [r7, #12]
 8010564:	e048      	b.n	80105f8 <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 8010566:	6839      	ldr	r1, [r7, #0]
 8010568:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801056c:	f7fa fc5a 	bl	800ae24 <FreeRTOS_min_int32>
 8010570:	4603      	mov	r3, r0
 8010572:	b29a      	uxth	r2, r3
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010580:	f003 0308 	and.w	r3, r3, #8
 8010584:	b2db      	uxtb	r3, r3
 8010586:	2b00      	cmp	r3, #0
 8010588:	d032      	beq.n	80105f0 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 801058a:	68bb      	ldr	r3, [r7, #8]
 801058c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010590:	2b00      	cmp	r3, #0
 8010592:	d005      	beq.n	80105a0 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 8010594:	68bb      	ldr	r3, [r7, #8]
 8010596:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801059a:	4618      	mov	r0, r3
 801059c:	f000 fe2b 	bl	80111f6 <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d005      	beq.n	80105b6 <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80105b0:	4618      	mov	r0, r3
 80105b2:	f000 fe20 	bl	80111f6 <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	33aa      	adds	r3, #170	@ 0xaa
 80105ba:	225a      	movs	r2, #90	@ 0x5a
 80105bc:	2100      	movs	r1, #0
 80105be:	4618      	mov	r0, r3
 80105c0:	f012 fbf1 	bl	8022da6 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80105ca:	22c0      	movs	r2, #192	@ 0xc0
 80105cc:	2100      	movs	r1, #0
 80105ce:	4618      	mov	r0, r3
 80105d0:	f012 fbe9 	bl	8022da6 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 80105d4:	68bb      	ldr	r3, [r7, #8]
 80105d6:	3368      	adds	r3, #104	@ 0x68
 80105d8:	2204      	movs	r2, #4
 80105da:	2100      	movs	r1, #0
 80105dc:	4618      	mov	r0, r3
 80105de:	f012 fbe2 	bl	8022da6 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 80105e2:	68ba      	ldr	r2, [r7, #8]
 80105e4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80105e8:	f043 0308 	orr.w	r3, r3, #8
 80105ec:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 80105f0:	2101      	movs	r1, #1
 80105f2:	68b8      	ldr	r0, [r7, #8]
 80105f4:	f001 f8a2 	bl	801173c <vTCPStateChange>
        }

        return xResult;
 80105f8:	68fb      	ldr	r3, [r7, #12]
    }
 80105fa:	4618      	mov	r0, r3
 80105fc:	3710      	adds	r7, #16
 80105fe:	46bd      	mov	sp, r7
 8010600:	bd80      	pop	{r7, pc}

08010602 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 8010602:	b580      	push	{r7, lr}
 8010604:	b084      	sub	sp, #16
 8010606:	af00      	add	r7, sp, #0
 8010608:	6078      	str	r0, [r7, #4]
 801060a:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 8010610:	2201      	movs	r2, #1
 8010612:	2106      	movs	r1, #6
 8010614:	68b8      	ldr	r0, [r7, #8]
 8010616:	f7fd fed3 	bl	800e3c0 <prvValidSocket>
 801061a:	4603      	mov	r3, r0
 801061c:	2b00      	cmp	r3, #0
 801061e:	d103      	bne.n	8010628 <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 8010620:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 8010624:	60fb      	str	r3, [r7, #12]
 8010626:	e018      	b.n	801065a <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 8010628:	68bb      	ldr	r3, [r7, #8]
 801062a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801062e:	2b05      	cmp	r3, #5
 8010630:	d003      	beq.n	801063a <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 8010632:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8010636:	60fb      	str	r3, [r7, #12]
 8010638:	e00f      	b.n	801065a <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 801063a:	68ba      	ldr	r2, [r7, #8]
 801063c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010640:	f043 0320 	orr.w	r3, r3, #32
 8010644:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 8010648:	68bb      	ldr	r3, [r7, #8]
 801064a:	2201      	movs	r2, #1
 801064c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010650:	2006      	movs	r0, #6
 8010652:	f7f9 fadf 	bl	8009c14 <xSendEventToIPTask>
            xResult = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 801065a:	68fb      	ldr	r3, [r7, #12]
    }
 801065c:	4618      	mov	r0, r3
 801065e:	3710      	adds	r7, #16
 8010660:	46bd      	mov	sp, r7
 8010662:	bd80      	pop	{r7, pc}

08010664 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 8010664:	b580      	push	{r7, lr}
 8010666:	b08a      	sub	sp, #40	@ 0x28
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 801066c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8010670:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 8010672:	f7f4 faff 	bl	8004c74 <xTaskGetTickCount>
 8010676:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 8010678:	4b32      	ldr	r3, [pc, #200]	@ (8010744 <xTCPTimerCheck+0xe0>)
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	69ba      	ldr	r2, [r7, #24]
 801067e:	1ad3      	subs	r3, r2, r3
 8010680:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010682:	4b31      	ldr	r3, [pc, #196]	@ (8010748 <xTCPTimerCheck+0xe4>)
 8010684:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010686:	4b31      	ldr	r3, [pc, #196]	@ (801074c <xTCPTimerCheck+0xe8>)
 8010688:	68db      	ldr	r3, [r3, #12]
 801068a:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 801068c:	4a2d      	ldr	r2, [pc, #180]	@ (8010744 <xTCPTimerCheck+0xe0>)
 801068e:	69bb      	ldr	r3, [r7, #24]
 8010690:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 8010692:	6a3b      	ldr	r3, [r7, #32]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d14b      	bne.n	8010730 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 8010698:	2301      	movs	r3, #1
 801069a:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 801069c:	e048      	b.n	8010730 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	68db      	ldr	r3, [r3, #12]
 80106a2:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80106a4:	69fb      	ldr	r3, [r7, #28]
 80106a6:	685b      	ldr	r3, [r3, #4]
 80106a8:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 80106aa:	693b      	ldr	r3, [r7, #16]
 80106ac:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d03a      	beq.n	801072a <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80106ba:	461a      	mov	r2, r3
 80106bc:	6a3b      	ldr	r3, [r7, #32]
 80106be:	4293      	cmp	r3, r2
 80106c0:	d20a      	bcs.n	80106d8 <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 80106c8:	6a3b      	ldr	r3, [r7, #32]
 80106ca:	b29b      	uxth	r3, r3
 80106cc:	1ad3      	subs	r3, r2, r3
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	693b      	ldr	r3, [r7, #16]
 80106d2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80106d6:	e00a      	b.n	80106ee <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 80106d8:	693b      	ldr	r3, [r7, #16]
 80106da:	2200      	movs	r2, #0
 80106dc:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 80106e0:	6938      	ldr	r0, [r7, #16]
 80106e2:	f000 ff33 	bl	801154c <xTCPSocketCheck>
 80106e6:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	db1f      	blt.n	801072e <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d008      	beq.n	8010708 <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 80106fc:	6938      	ldr	r0, [r7, #16]
 80106fe:	f7ff f970 	bl	800f9e2 <vSocketWakeUpUser>
 8010702:	e001      	b.n	8010708 <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 8010704:	2300      	movs	r3, #0
 8010706:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 801070e:	2b00      	cmp	r3, #0
 8010710:	d00e      	beq.n	8010730 <xTCPTimerCheck+0xcc>
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010718:	461a      	mov	r2, r3
 801071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801071c:	4293      	cmp	r3, r2
 801071e:	d907      	bls.n	8010730 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010726:	627b      	str	r3, [r7, #36]	@ 0x24
 8010728:	e002      	b.n	8010730 <xTCPTimerCheck+0xcc>
                continue;
 801072a:	bf00      	nop
 801072c:	e000      	b.n	8010730 <xTCPTimerCheck+0xcc>
                    continue;
 801072e:	bf00      	nop
        while( pxIterator != pxEnd )
 8010730:	69fa      	ldr	r2, [r7, #28]
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	429a      	cmp	r2, r3
 8010736:	d1b2      	bne.n	801069e <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 8010738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801073a:	4618      	mov	r0, r3
 801073c:	3728      	adds	r7, #40	@ 0x28
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}
 8010742:	bf00      	nop
 8010744:	2000161c 	.word	0x2000161c
 8010748:	20001610 	.word	0x20001610
 801074c:	20001608 	.word	0x20001608

08010750 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 8010750:	b082      	sub	sp, #8
 8010752:	b580      	push	{r7, lr}
 8010754:	b088      	sub	sp, #32
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	6039      	str	r1, [r7, #0]
 801075c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8010760:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 8010764:	2300      	movs	r3, #0
 8010766:	61bb      	str	r3, [r7, #24]
 8010768:	2300      	movs	r3, #0
 801076a:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801076c:	4b23      	ldr	r3, [pc, #140]	@ (80107fc <pxTCPSocketLookup+0xac>)
 801076e:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 8010770:	693b      	ldr	r3, [r7, #16]
 8010772:	685b      	ldr	r3, [r3, #4]
 8010774:	61fb      	str	r3, [r7, #28]
 8010776:	e02e      	b.n	80107d6 <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010782:	683b      	ldr	r3, [r7, #0]
 8010784:	b29b      	uxth	r3, r3
 8010786:	429a      	cmp	r2, r3
 8010788:	d122      	bne.n	80107d0 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010790:	2b01      	cmp	r3, #1
 8010792:	d102      	bne.n	801079a <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	617b      	str	r3, [r7, #20]
 8010798:	e01a      	b.n	80107d0 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80107a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80107a2:	b29b      	uxth	r3, r3
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d113      	bne.n	80107d0 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 80107a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d006      	beq.n	80107bc <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 80107ae:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80107b2:	68f8      	ldr	r0, [r7, #12]
 80107b4:	f7fb f8b6 	bl	800b924 <pxTCPSocketLookup_IPv6>
 80107b8:	61b8      	str	r0, [r7, #24]
 80107ba:	e006      	b.n	80107ca <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80107c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d101      	bne.n	80107ca <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 80107ca:	69bb      	ldr	r3, [r7, #24]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d107      	bne.n	80107e0 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 80107d0:	69fb      	ldr	r3, [r7, #28]
 80107d2:	685b      	ldr	r3, [r3, #4]
 80107d4:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 80107d6:	69fa      	ldr	r2, [r7, #28]
 80107d8:	693b      	ldr	r3, [r7, #16]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d1cc      	bne.n	8010778 <pxTCPSocketLookup+0x28>
 80107de:	e000      	b.n	80107e2 <pxTCPSocketLookup+0x92>
                    {
                        break;
 80107e0:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 80107e2:	69bb      	ldr	r3, [r7, #24]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d101      	bne.n	80107ec <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 80107ec:	69bb      	ldr	r3, [r7, #24]
    }
 80107ee:	4618      	mov	r0, r3
 80107f0:	3720      	adds	r7, #32
 80107f2:	46bd      	mov	sp, r7
 80107f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80107f8:	b002      	add	sp, #8
 80107fa:	4770      	bx	lr
 80107fc:	20001610 	.word	0x20001610

08010800 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 8010800:	b580      	push	{r7, lr}
 8010802:	b088      	sub	sp, #32
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 801080a:	683b      	ldr	r3, [r7, #0]
 801080c:	2b00      	cmp	r3, #0
 801080e:	d048      	beq.n	80108a2 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 8010810:	2314      	movs	r3, #20
 8010812:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 8010814:	2350      	movs	r3, #80	@ 0x50
 8010816:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8010824:	fbb3 f3f2 	udiv	r3, r3, r2
 8010828:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 801082a:	693b      	ldr	r3, [r7, #16]
 801082c:	2b00      	cmp	r3, #0
 801082e:	d00f      	beq.n	8010850 <prvTCPCreateStream+0x50>
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	2b04      	cmp	r3, #4
 8010834:	d80c      	bhi.n	8010850 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	3b01      	subs	r3, #1
 801083a:	4a40      	ldr	r2, [pc, #256]	@ (801093c <prvTCPCreateStream+0x13c>)
 801083c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010840:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 8010842:	693b      	ldr	r3, [r7, #16]
 8010844:	3b01      	subs	r3, #1
 8010846:	4a3d      	ldr	r2, [pc, #244]	@ (801093c <prvTCPCreateStream+0x13c>)
 8010848:	00db      	lsls	r3, r3, #3
 801084a:	4413      	add	r3, r2
 801084c:	685b      	ldr	r3, [r3, #4]
 801084e:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010856:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801085e:	2b00      	cmp	r3, #0
 8010860:	d10c      	bne.n	801087c <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010868:	69ba      	ldr	r2, [r7, #24]
 801086a:	fb02 f303 	mul.w	r3, r2, r3
 801086e:	4a34      	ldr	r2, [pc, #208]	@ (8010940 <prvTCPCreateStream+0x140>)
 8010870:	fba2 2303 	umull	r2, r3, r2, r3
 8010874:	095a      	lsrs	r2, r3, #5
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010882:	2b00      	cmp	r3, #0
 8010884:	d111      	bne.n	80108aa <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801088c:	697a      	ldr	r2, [r7, #20]
 801088e:	fb02 f303 	mul.w	r3, r2, r3
 8010892:	4a2b      	ldr	r2, [pc, #172]	@ (8010940 <prvTCPCreateStream+0x140>)
 8010894:	fba2 2303 	umull	r2, r3, r2, r3
 8010898:	095a      	lsrs	r2, r3, #5
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80108a0:	e003      	b.n	80108aa <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80108a8:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 80108aa:	69fb      	ldr	r3, [r7, #28]
 80108ac:	3304      	adds	r3, #4
 80108ae:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 80108b0:	69fb      	ldr	r3, [r7, #28]
 80108b2:	f023 0303 	bic.w	r3, r3, #3
 80108b6:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 80108b8:	69fb      	ldr	r3, [r7, #28]
 80108ba:	3314      	adds	r3, #20
 80108bc:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 80108be:	68f8      	ldr	r0, [r7, #12]
 80108c0:	f7f6 f848 	bl	8006954 <pvPortMalloc>
 80108c4:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 80108c6:	68bb      	ldr	r3, [r7, #8]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d10e      	bne.n	80108ea <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 80108cc:	481d      	ldr	r0, [pc, #116]	@ (8010944 <prvTCPCreateStream+0x144>)
 80108ce:	f011 ff41 	bl	8022754 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 80108d2:	687a      	ldr	r2, [r7, #4]
 80108d4:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80108d8:	f043 0308 	orr.w	r3, r3, #8
 80108dc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80108e0:	2108      	movs	r1, #8
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 ff2a 	bl	801173c <vTCPStateChange>
 80108e8:	e022      	b.n	8010930 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 80108ea:	2214      	movs	r2, #20
 80108ec:	2100      	movs	r1, #0
 80108ee:	68b8      	ldr	r0, [r7, #8]
 80108f0:	f012 fa59 	bl	8022da6 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	69fa      	ldr	r2, [r7, #28]
 80108f8:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 80108fa:	4b13      	ldr	r3, [pc, #76]	@ (8010948 <prvTCPCreateStream+0x148>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d00a      	beq.n	8010918 <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 8010902:	683b      	ldr	r3, [r7, #0]
 8010904:	2b00      	cmp	r3, #0
 8010906:	d001      	beq.n	801090c <prvTCPCreateStream+0x10c>
 8010908:	2152      	movs	r1, #82	@ 0x52
 801090a:	e000      	b.n	801090e <prvTCPCreateStream+0x10e>
 801090c:	2154      	movs	r1, #84	@ 0x54
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	69fa      	ldr	r2, [r7, #28]
 8010912:	480e      	ldr	r0, [pc, #56]	@ (801094c <prvTCPCreateStream+0x14c>)
 8010914:	f011 ff1e 	bl	8022754 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	2b00      	cmp	r3, #0
 801091c:	d004      	beq.n	8010928 <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	68ba      	ldr	r2, [r7, #8]
 8010922:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8010926:	e003      	b.n	8010930 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	68ba      	ldr	r2, [r7, #8]
 801092c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 8010930:	68bb      	ldr	r3, [r7, #8]
    }
 8010932:	4618      	mov	r0, r3
 8010934:	3720      	adds	r7, #32
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
 801093a:	bf00      	nop
 801093c:	08027f5c 	.word	0x08027f5c
 8010940:	51eb851f 	.word	0x51eb851f
 8010944:	0802664c 	.word	0x0802664c
 8010948:	2000164c 	.word	0x2000164c
 801094c:	08026670 	.word	0x08026670

08010950 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 8010950:	b580      	push	{r7, lr}
 8010952:	b08a      	sub	sp, #40	@ 0x28
 8010954:	af02      	add	r7, sp, #8
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 801095c:	68bb      	ldr	r3, [r7, #8]
 801095e:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 8010960:	2300      	movs	r3, #0
 8010962:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 8010964:	69fb      	ldr	r3, [r7, #28]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d006      	beq.n	8010978 <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 801096a:	69fb      	ldr	r3, [r7, #28]
 801096c:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 8010972:	2300      	movs	r3, #0
 8010974:	61fb      	str	r3, [r7, #28]
 8010976:	e009      	b.n	801098c <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801097e:	f107 0214 	add.w	r2, r7, #20
 8010982:	4611      	mov	r1, r2
 8010984:	4618      	mov	r0, r3
 8010986:	f000 fc92 	bl	80112ae <uxStreamBufferGetPtr>
 801098a:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 801098c:	69bb      	ldr	r3, [r7, #24]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d011      	beq.n	80109b6 <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010998:	6979      	ldr	r1, [r7, #20]
 801099a:	69ba      	ldr	r2, [r7, #24]
 801099c:	68f8      	ldr	r0, [r7, #12]
 801099e:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 80109a6:	2300      	movs	r3, #0
 80109a8:	9300      	str	r3, [sp, #0]
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	2200      	movs	r2, #0
 80109ae:	2100      	movs	r1, #0
 80109b0:	f000 fd1d 	bl	80113ee <uxStreamBufferGet>
        {
 80109b4:	e7d4      	b.n	8010960 <vTCPAddRxdata_Callback+0x10>
        }
    }
 80109b6:	bf00      	nop
 80109b8:	3720      	adds	r7, #32
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}

080109be <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 80109be:	b580      	push	{r7, lr}
 80109c0:	b084      	sub	sp, #16
 80109c2:	af00      	add	r7, sp, #0
 80109c4:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80109cc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80109d0:	b2db      	uxtb	r3, r3
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d121      	bne.n	8010a1a <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80109dc:	4618      	mov	r0, r3
 80109de:	f000 fbd7 	bl	8011190 <uxStreamBufferFrontSpace>
 80109e2:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80109ea:	68fa      	ldr	r2, [r7, #12]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d814      	bhi.n	8010a1a <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 80109f0:	687a      	ldr	r2, [r7, #4]
 80109f2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80109f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80109fa:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010a04:	f043 0301 	orr.w	r3, r3, #1
 8010a08:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	2201      	movs	r2, #1
 8010a10:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 8010a14:	2006      	movs	r0, #6
 8010a16:	f7f9 f8fd 	bl	8009c14 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	f043 0201 	orr.w	r2, r3, #1
 8010a22:	687b      	ldr	r3, [r7, #4]
 8010a24:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010a2a:	f003 0301 	and.w	r3, r3, #1
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d005      	beq.n	8010a3e <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 8010a3e:	bf00      	nop
 8010a40:	3710      	adds	r7, #16
 8010a42:	46bd      	mov	sp, r7
 8010a44:	bd80      	pop	{r7, pc}
	...

08010a48 <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 8010a48:	b5b0      	push	{r4, r5, r7, lr}
 8010a4a:	b08c      	sub	sp, #48	@ 0x30
 8010a4c:	af04      	add	r7, sp, #16
 8010a4e:	60f8      	str	r0, [r7, #12]
 8010a50:	60b9      	str	r1, [r7, #8]
 8010a52:	607a      	str	r2, [r7, #4]
 8010a54:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010a5c:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d001      	beq.n	8010a70 <lTCPAddRxdata+0x28>
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	e000      	b.n	8010a72 <lTCPAddRxdata+0x2a>
 8010a70:	2300      	movs	r3, #0
 8010a72:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 8010a78:	69fb      	ldr	r3, [r7, #28]
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d10a      	bne.n	8010a94 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8010a7e:	2101      	movs	r1, #1
 8010a80:	68f8      	ldr	r0, [r7, #12]
 8010a82:	f7ff febd 	bl	8010800 <prvTCPCreateStream>
 8010a86:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d102      	bne.n	8010a94 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 8010a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a92:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8010a94:	69bb      	ldr	r3, [r7, #24]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	db41      	blt.n	8010b1e <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d00f      	beq.n	8010ac0 <lTCPAddRxdata+0x78>
 8010aa0:	69f8      	ldr	r0, [r7, #28]
 8010aa2:	f000 fb86 	bl	80111b2 <uxStreamBufferGetSize>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d109      	bne.n	8010ac0 <lTCPAddRxdata+0x78>
 8010aac:	68bb      	ldr	r3, [r7, #8]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d106      	bne.n	8010ac0 <lTCPAddRxdata+0x78>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d003      	beq.n	8010ac0 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 8010abc:	2300      	movs	r3, #0
 8010abe:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8010ac0:	683b      	ldr	r3, [r7, #0]
 8010ac2:	687a      	ldr	r2, [r7, #4]
 8010ac4:	68b9      	ldr	r1, [r7, #8]
 8010ac6:	69f8      	ldr	r0, [r7, #28]
 8010ac8:	f000 fc11 	bl	80112ee <uxStreamBufferAdd>
 8010acc:	4603      	mov	r3, r0
 8010ace:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	69ba      	ldr	r2, [r7, #24]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d013      	beq.n	8010b00 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 8010ad8:	69fb      	ldr	r3, [r7, #28]
 8010ada:	681c      	ldr	r4, [r3, #0]
 8010adc:	69fb      	ldr	r3, [r7, #28]
 8010ade:	689d      	ldr	r5, [r3, #8]
 8010ae0:	69f8      	ldr	r0, [r7, #28]
 8010ae2:	f000 fb55 	bl	8011190 <uxStreamBufferFrontSpace>
 8010ae6:	4602      	mov	r2, r0
 8010ae8:	69fb      	ldr	r3, [r7, #28]
 8010aea:	68db      	ldr	r3, [r3, #12]
 8010aec:	9303      	str	r3, [sp, #12]
 8010aee:	9202      	str	r2, [sp, #8]
 8010af0:	9501      	str	r5, [sp, #4]
 8010af2:	9400      	str	r4, [sp, #0]
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	69ba      	ldr	r2, [r7, #24]
 8010af8:	68b9      	ldr	r1, [r7, #8]
 8010afa:	480b      	ldr	r0, [pc, #44]	@ (8010b28 <lTCPAddRxdata+0xe0>)
 8010afc:	f011 fe2a 	bl	8022754 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d10b      	bne.n	8010b1e <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 8010b06:	693b      	ldr	r3, [r7, #16]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d005      	beq.n	8010b18 <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 8010b0c:	683a      	ldr	r2, [r7, #0]
 8010b0e:	6979      	ldr	r1, [r7, #20]
 8010b10:	68f8      	ldr	r0, [r7, #12]
 8010b12:	f7ff ff1d 	bl	8010950 <vTCPAddRxdata_Callback>
 8010b16:	e002      	b.n	8010b1e <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 8010b18:	68f8      	ldr	r0, [r7, #12]
 8010b1a:	f7ff ff50 	bl	80109be <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 8010b1e:	69bb      	ldr	r3, [r7, #24]
    }
 8010b20:	4618      	mov	r0, r3
 8010b22:	3720      	adds	r7, #32
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bdb0      	pop	{r4, r5, r7, pc}
 8010b28:	080266ac 	.word	0x080266ac

08010b2c <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 8010b2c:	b580      	push	{r7, lr}
 8010b2e:	b084      	sub	sp, #16
 8010b30:	af00      	add	r7, sp, #0
 8010b32:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010b3e:	2b06      	cmp	r3, #6
 8010b40:	d003      	beq.n	8010b4a <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010b42:	f06f 0315 	mvn.w	r3, #21
 8010b46:	60fb      	str	r3, [r7, #12]
 8010b48:	e011      	b.n	8010b6e <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010b4a:	68bb      	ldr	r3, [r7, #8]
 8010b4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d008      	beq.n	8010b66 <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 8010b54:	68bb      	ldr	r3, [r7, #8]
 8010b56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	f000 fb07 	bl	801116e <uxStreamBufferGetSpace>
 8010b60:	4603      	mov	r3, r0
 8010b62:	60fb      	str	r3, [r7, #12]
 8010b64:	e003      	b.n	8010b6e <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010b6c:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
    }
 8010b70:	4618      	mov	r0, r3
 8010b72:	3710      	adds	r7, #16
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}

08010b78 <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b084      	sub	sp, #16
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010b8a:	2b06      	cmp	r3, #6
 8010b8c:	d003      	beq.n	8010b96 <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010b8e:	f06f 0315 	mvn.w	r3, #21
 8010b92:	60fb      	str	r3, [r7, #12]
 8010b94:	e00f      	b.n	8010bb6 <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d008      	beq.n	8010bb2 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f000 fb03 	bl	80111b2 <uxStreamBufferGetSize>
 8010bac:	4603      	mov	r3, r0
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	e001      	b.n	8010bb6 <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
    }
 8010bb8:	4618      	mov	r0, r3
 8010bba:	3710      	adds	r7, #16
 8010bbc:	46bd      	mov	sp, r7
 8010bbe:	bd80      	pop	{r7, pc}

08010bc0 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 8010bc0:	b480      	push	{r7}
 8010bc2:	b085      	sub	sp, #20
 8010bc4:	af00      	add	r7, sp, #0
 8010bc6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010bd6:	2b06      	cmp	r3, #6
 8010bd8:	d003      	beq.n	8010be2 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010bda:	f06f 0315 	mvn.w	r3, #21
 8010bde:	60fb      	str	r3, [r7, #12]
 8010be0:	e00b      	b.n	8010bfa <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010be8:	2b04      	cmp	r3, #4
 8010bea:	d906      	bls.n	8010bfa <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 8010bec:	68bb      	ldr	r3, [r7, #8]
 8010bee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010bf2:	2b07      	cmp	r3, #7
 8010bf4:	d801      	bhi.n	8010bfa <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
    }
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3714      	adds	r7, #20
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b084      	sub	sp, #16
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c1a:	2b06      	cmp	r3, #6
 8010c1c:	d003      	beq.n	8010c26 <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010c1e:	f06f 0315 	mvn.w	r3, #21
 8010c22:	60fb      	str	r3, [r7, #12]
 8010c24:	e00f      	b.n	8010c46 <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d008      	beq.n	8010c42 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010c36:	4618      	mov	r0, r3
 8010c38:	f000 fabb 	bl	80111b2 <uxStreamBufferGetSize>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	60fb      	str	r3, [r7, #12]
 8010c40:	e001      	b.n	8010c46 <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 8010c42:	2300      	movs	r3, #0
 8010c44:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 8010c46:	68fb      	ldr	r3, [r7, #12]
    }
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3710      	adds	r7, #16
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}

08010c50 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 8010c50:	b480      	push	{r7}
 8010c52:	b085      	sub	sp, #20
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c62:	d004      	beq.n	8010c6e <xSocketValid+0x1e>
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d001      	beq.n	8010c6e <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 8010c6a:	2301      	movs	r3, #1
 8010c6c:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010c6e:	68fb      	ldr	r3, [r7, #12]
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	3714      	adds	r7, #20
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c80:	b09c      	sub	sp, #112	@ 0x70
 8010c82:	af08      	add	r7, sp, #32
 8010c84:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 8010c86:	2320      	movs	r3, #32
 8010c88:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8010c8a:	f7f3 fff3 	bl	8004c74 <xTaskGetTickCount>
 8010c8e:	4602      	mov	r2, r0
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010c96:	1ad3      	subs	r3, r2, r3
 8010c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 8010c9a:	2300      	movs	r3, #0
 8010c9c:	60fb      	str	r3, [r7, #12]
 8010c9e:	f107 0310 	add.w	r3, r7, #16
 8010ca2:	2200      	movs	r2, #0
 8010ca4:	601a      	str	r2, [r3, #0]
 8010ca6:	605a      	str	r2, [r3, #4]
 8010ca8:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010cb0:	2b01      	cmp	r3, #1
 8010cb2:	d11f      	bne.n	8010cf4 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010cba:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010cc2:	f107 000c 	add.w	r0, r7, #12
 8010cc6:	9300      	str	r3, [sp, #0]
 8010cc8:	4613      	mov	r3, r2
 8010cca:	4a3b      	ldr	r2, [pc, #236]	@ (8010db8 <vTCPNetStat_TCPSocket+0x13c>)
 8010ccc:	2110      	movs	r1, #16
 8010cce:	f012 fd6d 	bl	80237ac <snprintf>
 8010cd2:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	da04      	bge.n	8010ce4 <vTCPNetStat_TCPSocket+0x68>
 8010cda:	f241 61df 	movw	r1, #5855	@ 0x16df
 8010cde:	4837      	ldr	r0, [pc, #220]	@ (8010dbc <vTCPNetStat_TCPSocket+0x140>)
 8010ce0:	f7f0 fe5a 	bl	8001998 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010ce4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010ce6:	2b0f      	cmp	r3, #15
 8010ce8:	dd04      	ble.n	8010cf4 <vTCPNetStat_TCPSocket+0x78>
 8010cea:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 8010cee:	4833      	ldr	r0, [pc, #204]	@ (8010dbc <vTCPNetStat_TCPSocket+0x140>)
 8010cf0:	f7f0 fe52 	bl	8001998 <vAssertCalled>
        }

        if( age > 999999U )
 8010cf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010cf6:	4a32      	ldr	r2, [pc, #200]	@ (8010dc0 <vTCPNetStat_TCPSocket+0x144>)
 8010cf8:	4293      	cmp	r3, r2
 8010cfa:	d901      	bls.n	8010d00 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 8010cfc:	4b30      	ldr	r3, [pc, #192]	@ (8010dc0 <vTCPNetStat_TCPSocket+0x144>)
 8010cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	7a1b      	ldrb	r3, [r3, #8]
 8010d04:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010d08:	b2db      	uxtb	r3, r3
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d002      	beq.n	8010d14 <vTCPNetStat_TCPSocket+0x98>
 8010d0e:	2b01      	cmp	r3, #1
 8010d10:	d009      	beq.n	8010d26 <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 8010d12:	e011      	b.n	8010d38 <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010d18:	f107 001c 	add.w	r0, r7, #28
 8010d1c:	4a29      	ldr	r2, [pc, #164]	@ (8010dc4 <vTCPNetStat_TCPSocket+0x148>)
 8010d1e:	2128      	movs	r1, #40	@ 0x28
 8010d20:	f012 fd44 	bl	80237ac <snprintf>
                    break;
 8010d24:	e008      	b.n	8010d38 <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 8010d2a:	f107 001c 	add.w	r0, r7, #28
 8010d2e:	4a26      	ldr	r2, [pc, #152]	@ (8010dc8 <vTCPNetStat_TCPSocket+0x14c>)
 8010d30:	2128      	movs	r1, #40	@ 0x28
 8010d32:	f012 fd3b 	bl	80237ac <snprintf>
                    break;
 8010d36:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010d3c:	4698      	mov	r8, r3
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d44:	461c      	mov	r4, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	bf14      	ite	ne
 8010d50:	2301      	movne	r3, #1
 8010d52:	2300      	moveq	r3, #0
 8010d54:	b2db      	uxtb	r3, r3
 8010d56:	461d      	mov	r5, r3
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	bf14      	ite	ne
 8010d62:	2301      	movne	r3, #1
 8010d64:	2300      	moveq	r3, #0
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	461e      	mov	r6, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010d70:	4618      	mov	r0, r3
 8010d72:	f002 fbf5 	bl	8013560 <FreeRTOS_GetTCPStateName>
 8010d76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d78:	4a11      	ldr	r2, [pc, #68]	@ (8010dc0 <vTCPNetStat_TCPSocket+0x144>)
 8010d7a:	4293      	cmp	r3, r2
 8010d7c:	bf28      	it	cs
 8010d7e:	4613      	movcs	r3, r2
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 8010d86:	603a      	str	r2, [r7, #0]
 8010d88:	f107 011c 	add.w	r1, r7, #28
 8010d8c:	f107 020c 	add.w	r2, r7, #12
 8010d90:	9206      	str	r2, [sp, #24]
 8010d92:	683a      	ldr	r2, [r7, #0]
 8010d94:	9205      	str	r2, [sp, #20]
 8010d96:	9304      	str	r3, [sp, #16]
 8010d98:	9003      	str	r0, [sp, #12]
 8010d9a:	9602      	str	r6, [sp, #8]
 8010d9c:	9501      	str	r5, [sp, #4]
 8010d9e:	9400      	str	r4, [sp, #0]
 8010da0:	460b      	mov	r3, r1
 8010da2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010da4:	4641      	mov	r1, r8
 8010da6:	4809      	ldr	r0, [pc, #36]	@ (8010dcc <vTCPNetStat_TCPSocket+0x150>)
 8010da8:	f011 fcd4 	bl	8022754 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 8010dac:	bf00      	nop
 8010dae:	3750      	adds	r7, #80	@ 0x50
 8010db0:	46bd      	mov	sp, r7
 8010db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010db6:	bf00      	nop
 8010db8:	080266f4 	.word	0x080266f4
 8010dbc:	08026214 	.word	0x08026214
 8010dc0:	000f423f 	.word	0x000f423f
 8010dc4:	080266fc 	.word	0x080266fc
 8010dc8:	08026704 	.word	0x08026704
 8010dcc:	0802670c 	.word	0x0802670c

08010dd0 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08a      	sub	sp, #40	@ 0x28
 8010dd4:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 8010dda:	f006 fe59 	bl	8017a90 <uxGetMinimumFreeNetworkBuffers>
 8010dde:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010de0:	f006 fe62 	bl	8017aa8 <uxGetNumberOfFreeNetworkBuffers>
 8010de4:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 8010de6:	4b26      	ldr	r3, [pc, #152]	@ (8010e80 <vTCPNetStat+0xb0>)
 8010de8:	689b      	ldr	r3, [r3, #8]
 8010dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dee:	d003      	beq.n	8010df8 <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010df0:	4824      	ldr	r0, [pc, #144]	@ (8010e84 <vTCPNetStat+0xb4>)
 8010df2:	f011 fcaf 	bl	8022754 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 8010df6:	e03f      	b.n	8010e78 <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 8010df8:	4b23      	ldr	r3, [pc, #140]	@ (8010e88 <vTCPNetStat+0xb8>)
 8010dfa:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 8010dfc:	4b23      	ldr	r3, [pc, #140]	@ (8010e8c <vTCPNetStat+0xbc>)
 8010dfe:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 8010e00:	4823      	ldr	r0, [pc, #140]	@ (8010e90 <vTCPNetStat+0xc0>)
 8010e02:	f011 fca7 	bl	8022754 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010e06:	4b1e      	ldr	r3, [pc, #120]	@ (8010e80 <vTCPNetStat+0xb0>)
 8010e08:	68db      	ldr	r3, [r3, #12]
 8010e0a:	61fb      	str	r3, [r7, #28]
 8010e0c:	e00b      	b.n	8010e26 <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	68db      	ldr	r3, [r3, #12]
 8010e12:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 8010e14:	6878      	ldr	r0, [r7, #4]
 8010e16:	f7ff ff31 	bl	8010c7c <vTCPNetStat_TCPSocket>
                count++;
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	3301      	adds	r3, #1
 8010e1e:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 8010e26:	69fa      	ldr	r2, [r7, #28]
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	429a      	cmp	r2, r3
 8010e2c:	d1ef      	bne.n	8010e0e <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 8010e2e:	4b19      	ldr	r3, [pc, #100]	@ (8010e94 <vTCPNetStat+0xc4>)
 8010e30:	68db      	ldr	r3, [r3, #12]
 8010e32:	61fb      	str	r3, [r7, #28]
 8010e34:	e014      	b.n	8010e60 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	b29b      	uxth	r3, r3
 8010e3c:	021b      	lsls	r3, r3, #8
 8010e3e:	b29a      	uxth	r2, r3
 8010e40:	69fb      	ldr	r3, [r7, #28]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	0a1b      	lsrs	r3, r3, #8
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4313      	orrs	r3, r2
 8010e4a:	b29b      	uxth	r3, r3
 8010e4c:	4619      	mov	r1, r3
 8010e4e:	4812      	ldr	r0, [pc, #72]	@ (8010e98 <vTCPNetStat+0xc8>)
 8010e50:	f011 fc80 	bl	8022754 <lUDPLoggingPrintf>
                count++;
 8010e54:	69bb      	ldr	r3, [r7, #24]
 8010e56:	3301      	adds	r3, #1
 8010e58:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 8010e5a:	69fb      	ldr	r3, [r7, #28]
 8010e5c:	685b      	ldr	r3, [r3, #4]
 8010e5e:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 8010e60:	69fa      	ldr	r2, [r7, #28]
 8010e62:	68bb      	ldr	r3, [r7, #8]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d1e6      	bne.n	8010e36 <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 8010e68:	2340      	movs	r3, #64	@ 0x40
 8010e6a:	9300      	str	r3, [sp, #0]
 8010e6c:	693b      	ldr	r3, [r7, #16]
 8010e6e:	697a      	ldr	r2, [r7, #20]
 8010e70:	69b9      	ldr	r1, [r7, #24]
 8010e72:	480a      	ldr	r0, [pc, #40]	@ (8010e9c <vTCPNetStat+0xcc>)
 8010e74:	f011 fc6e 	bl	8022754 <lUDPLoggingPrintf>
    }
 8010e78:	bf00      	nop
 8010e7a:	3720      	adds	r7, #32
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	20001608 	.word	0x20001608
 8010e84:	08026738 	.word	0x08026738
 8010e88:	20001610 	.word	0x20001610
 8010e8c:	200015fc 	.word	0x200015fc
 8010e90:	08026754 	.word	0x08026754
 8010e94:	200015f4 	.word	0x200015f4
 8010e98:	0802679c 	.word	0x0802679c
 8010e9c:	080267ac 	.word	0x080267ac

08010ea0 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 8010eac:	2300      	movs	r3, #0
 8010eae:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010eb6:	f003 0304 	and.w	r3, r3, #4
 8010eba:	b2db      	uxtb	r3, r3
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d109      	bne.n	8010ed4 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010ec6:	f003 0302 	and.w	r3, r3, #2
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d101      	bne.n	8010ed4 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010ed0:	2301      	movs	r3, #1
 8010ed2:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010ed8:	f003 0301 	and.w	r3, r3, #1
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d038      	beq.n	8010f52 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010ee6:	2b01      	cmp	r3, #1
 8010ee8:	d111      	bne.n	8010f0e <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d02f      	beq.n	8010f52 <vSocketSelectTCP+0xb2>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010ef6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010efa:	f003 0302 	and.w	r3, r3, #2
 8010efe:	b2db      	uxtb	r3, r3
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d026      	beq.n	8010f52 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f04:	693b      	ldr	r3, [r7, #16]
 8010f06:	f043 0301 	orr.w	r3, r3, #1
 8010f0a:	613b      	str	r3, [r7, #16]
 8010f0c:	e021      	b.n	8010f52 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f14:	f003 0308 	and.w	r3, r3, #8
 8010f18:	b2db      	uxtb	r3, r3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00c      	beq.n	8010f38 <vSocketSelectTCP+0x98>
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f24:	f003 0302 	and.w	r3, r3, #2
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d004      	beq.n	8010f38 <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f2e:	693b      	ldr	r3, [r7, #16]
 8010f30:	f043 0301 	orr.w	r3, r3, #1
 8010f34:	613b      	str	r3, [r7, #16]
 8010f36:	e00c      	b.n	8010f52 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 8010f38:	697b      	ldr	r3, [r7, #20]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d009      	beq.n	8010f52 <vSocketSelectTCP+0xb2>
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7ff fe62 	bl	8010c08 <FreeRTOS_rx_size>
 8010f44:	4603      	mov	r3, r0
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	dd03      	ble.n	8010f52 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	f043 0301 	orr.w	r3, r3, #1
 8010f50:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f56:	f003 0304 	and.w	r3, r3, #4
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d00d      	beq.n	8010f7a <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f64:	2b08      	cmp	r3, #8
 8010f66:	d004      	beq.n	8010f72 <vSocketSelectTCP+0xd2>
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d103      	bne.n	8010f7a <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8010f72:	693b      	ldr	r3, [r7, #16]
 8010f74:	f043 0304 	orr.w	r3, r3, #4
 8010f78:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010f7e:	f003 0302 	and.w	r3, r3, #2
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d034      	beq.n	8010ff0 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 8010f86:	2300      	movs	r3, #0
 8010f88:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 8010f8a:	697b      	ldr	r3, [r7, #20]
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d007      	beq.n	8010fa0 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7ff fdcb 	bl	8010b2c <FreeRTOS_tx_space>
 8010f96:	4603      	mov	r3, r0
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	dd01      	ble.n	8010fa0 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 8010f9c:	2301      	movs	r3, #1
 8010f9e:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d11d      	bne.n	8010fe2 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010fac:	f003 0308 	and.w	r3, r3, #8
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d015      	beq.n	8010fe2 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010fbc:	2b04      	cmp	r3, #4
 8010fbe:	d910      	bls.n	8010fe2 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010fc6:	f003 0310 	and.w	r3, r3, #16
 8010fca:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	d108      	bne.n	8010fe2 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8010fd0:	687a      	ldr	r2, [r7, #4]
 8010fd2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010fd6:	f043 0310 	orr.w	r3, r3, #16
 8010fda:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 8010fde:	2301      	movs	r3, #1
 8010fe0:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d003      	beq.n	8010ff0 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 8010fe8:	693b      	ldr	r3, [r7, #16]
 8010fea:	f043 0302 	orr.w	r3, r3, #2
 8010fee:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8010ff0:	693b      	ldr	r3, [r7, #16]
        }
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	3718      	adds	r7, #24
 8010ff6:	46bd      	mov	sp, r7
 8010ff8:	bd80      	pop	{r7, pc}
	...

08010ffc <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b08a      	sub	sp, #40	@ 0x28
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 8011004:	2301      	movs	r3, #1
 8011006:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 8011008:	2300      	movs	r3, #0
 801100a:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 801100c:	2300      	movs	r3, #0
 801100e:	627b      	str	r3, [r7, #36]	@ 0x24
 8011010:	e043      	b.n	801109a <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 8011012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011014:	2b00      	cmp	r3, #0
 8011016:	d102      	bne.n	801101e <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 8011018:	4b34      	ldr	r3, [pc, #208]	@ (80110ec <vSocketSelect+0xf0>)
 801101a:	617b      	str	r3, [r7, #20]
 801101c:	e001      	b.n	8011022 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801101e:	4b34      	ldr	r3, [pc, #208]	@ (80110f0 <vSocketSelect+0xf4>)
 8011020:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 8011022:	697b      	ldr	r3, [r7, #20]
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	61bb      	str	r3, [r7, #24]
 8011028:	e030      	b.n	801108c <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	68db      	ldr	r3, [r3, #12]
 801102e:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 8011030:	68bb      	ldr	r3, [r7, #8]
 8011032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011034:	687a      	ldr	r2, [r7, #4]
 8011036:	429a      	cmp	r2, r3
 8011038:	d124      	bne.n	8011084 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 801103a:	2300      	movs	r3, #0
 801103c:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011044:	2b06      	cmp	r3, #6
 8011046:	d107      	bne.n	8011058 <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 8011048:	68b8      	ldr	r0, [r7, #8]
 801104a:	f7ff ff29 	bl	8010ea0 <vSocketSelectTCP>
 801104e:	4602      	mov	r2, r0
 8011050:	6a3b      	ldr	r3, [r7, #32]
 8011052:	4313      	orrs	r3, r2
 8011054:	623b      	str	r3, [r7, #32]
 8011056:	e00d      	b.n	8011074 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801105c:	f003 0301 	and.w	r3, r3, #1
 8011060:	2b00      	cmp	r3, #0
 8011062:	d007      	beq.n	8011074 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 8011068:	2b00      	cmp	r3, #0
 801106a:	d003      	beq.n	8011074 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 801106c:	6a3b      	ldr	r3, [r7, #32]
 801106e:	f043 0301 	orr.w	r3, r3, #1
 8011072:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	6a3a      	ldr	r2, [r7, #32]
 8011078:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 801107a:	69fa      	ldr	r2, [r7, #28]
 801107c:	6a3b      	ldr	r3, [r7, #32]
 801107e:	4313      	orrs	r3, r2
 8011080:	61fb      	str	r3, [r7, #28]
 8011082:	e000      	b.n	8011086 <vSocketSelect+0x8a>
                    continue;
 8011084:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 801108c:	69ba      	ldr	r2, [r7, #24]
 801108e:	697b      	ldr	r3, [r7, #20]
 8011090:	429a      	cmp	r2, r3
 8011092:	d1ca      	bne.n	801102a <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8011094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011096:	3301      	adds	r3, #1
 8011098:	627b      	str	r3, [r7, #36]	@ 0x24
 801109a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	429a      	cmp	r2, r3
 80110a0:	ddb7      	ble.n	8011012 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	2100      	movs	r1, #0
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7f2 fa59 	bl	8003560 <xEventGroupClearBits>
 80110ae:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 80110b0:	69fb      	ldr	r3, [r7, #28]
 80110b2:	43da      	mvns	r2, r3
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	4013      	ands	r3, r2
 80110b8:	f003 030f 	and.w	r3, r3, #15
 80110bc:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	2b00      	cmp	r3, #0
 80110c2:	d005      	beq.n	80110d0 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	68f9      	ldr	r1, [r7, #12]
 80110ca:	4618      	mov	r0, r3
 80110cc:	f7f2 fa48 	bl	8003560 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	69fb      	ldr	r3, [r7, #28]
 80110d6:	f043 0310 	orr.w	r3, r3, #16
 80110da:	4619      	mov	r1, r3
 80110dc:	4610      	mov	r0, r2
 80110de:	f7f2 fa6d 	bl	80035bc <xEventGroupSetBits>
    }
 80110e2:	bf00      	nop
 80110e4:	3728      	adds	r7, #40	@ 0x28
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}
 80110ea:	bf00      	nop
 80110ec:	200015fc 	.word	0x200015fc
 80110f0:	20001610 	.word	0x20001610

080110f4 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 80110f4:	b480      	push	{r7}
 80110f6:	b087      	sub	sp, #28
 80110f8:	af00      	add	r7, sp, #0
 80110fa:	60f8      	str	r0, [r7, #12]
 80110fc:	60b9      	str	r1, [r7, #8]
 80110fe:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	691b      	ldr	r3, [r3, #16]
 8011104:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 8011106:	693a      	ldr	r2, [r7, #16]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	441a      	add	r2, r3
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	3b01      	subs	r3, #1
 8011112:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011114:	697a      	ldr	r2, [r7, #20]
 8011116:	693b      	ldr	r3, [r7, #16]
 8011118:	429a      	cmp	r2, r3
 801111a:	d303      	bcc.n	8011124 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	693b      	ldr	r3, [r7, #16]
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011124:	697b      	ldr	r3, [r7, #20]
}
 8011126:	4618      	mov	r0, r3
 8011128:	371c      	adds	r7, #28
 801112a:	46bd      	mov	sp, r7
 801112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011130:	4770      	bx	lr

08011132 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 8011132:	b480      	push	{r7}
 8011134:	b087      	sub	sp, #28
 8011136:	af00      	add	r7, sp, #0
 8011138:	60f8      	str	r0, [r7, #12]
 801113a:	60b9      	str	r1, [r7, #8]
 801113c:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	691b      	ldr	r3, [r3, #16]
 8011142:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 8011144:	693a      	ldr	r2, [r7, #16]
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	441a      	add	r2, r3
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 8011150:	697a      	ldr	r2, [r7, #20]
 8011152:	693b      	ldr	r3, [r7, #16]
 8011154:	429a      	cmp	r2, r3
 8011156:	d303      	bcc.n	8011160 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 8011158:	697a      	ldr	r2, [r7, #20]
 801115a:	693b      	ldr	r3, [r7, #16]
 801115c:	1ad3      	subs	r3, r2, r3
 801115e:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8011160:	697b      	ldr	r3, [r7, #20]
}
 8011162:	4618      	mov	r0, r3
 8011164:	371c      	adds	r7, #28
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr

0801116e <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 801116e:	b580      	push	{r7, lr}
 8011170:	b082      	sub	sp, #8
 8011172:	af00      	add	r7, sp, #0
 8011174:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	6899      	ldr	r1, [r3, #8]
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	461a      	mov	r2, r3
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7ff ffb7 	bl	80110f4 <uxStreamBufferSpace>
 8011186:	4603      	mov	r3, r0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3708      	adds	r7, #8
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b082      	sub	sp, #8
 8011194:	af00      	add	r7, sp, #0
 8011196:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	68d9      	ldr	r1, [r3, #12]
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	461a      	mov	r2, r3
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f7ff ffa6 	bl	80110f4 <uxStreamBufferSpace>
 80111a8:	4603      	mov	r3, r0
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b082      	sub	sp, #8
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	6819      	ldr	r1, [r3, #0]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	689b      	ldr	r3, [r3, #8]
 80111c2:	461a      	mov	r2, r3
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f7ff ffb4 	bl	8011132 <uxStreamBufferDistance>
 80111ca:	4603      	mov	r3, r0
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3708      	adds	r7, #8
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b082      	sub	sp, #8
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6859      	ldr	r1, [r3, #4]
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	689b      	ldr	r3, [r3, #8]
 80111e4:	461a      	mov	r2, r3
 80111e6:	6878      	ldr	r0, [r7, #4]
 80111e8:	f7ff ffa3 	bl	8011132 <uxStreamBufferDistance>
 80111ec:	4603      	mov	r3, r0
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3708      	adds	r7, #8
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}

080111f6 <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 80111f6:	b480      	push	{r7}
 80111f8:	b083      	sub	sp, #12
 80111fa:	af00      	add	r7, sp, #0
 80111fc:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	2200      	movs	r2, #0
 8011202:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	2200      	movs	r2, #0
 8011208:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2200      	movs	r2, #0
 801120e:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	605a      	str	r2, [r3, #4]
}
 8011216:	bf00      	nop
 8011218:	370c      	adds	r7, #12
 801121a:	46bd      	mov	sp, r7
 801121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011220:	4770      	bx	lr

08011222 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 8011222:	b580      	push	{r7, lr}
 8011224:	b086      	sub	sp, #24
 8011226:	af00      	add	r7, sp, #0
 8011228:	6078      	str	r0, [r7, #4]
 801122a:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	691b      	ldr	r3, [r3, #16]
 8011230:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 8011232:	6878      	ldr	r0, [r7, #4]
 8011234:	f7ff ffce 	bl	80111d4 <uxStreamBufferMidSpace>
 8011238:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	685b      	ldr	r3, [r3, #4]
 801123e:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8011240:	683b      	ldr	r3, [r7, #0]
 8011242:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8011244:	693a      	ldr	r2, [r7, #16]
 8011246:	68bb      	ldr	r3, [r7, #8]
 8011248:	429a      	cmp	r2, r3
 801124a:	d901      	bls.n	8011250 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 801124c:	68bb      	ldr	r3, [r7, #8]
 801124e:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 8011250:	697a      	ldr	r2, [r7, #20]
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	4413      	add	r3, r2
 8011256:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 8011258:	697a      	ldr	r2, [r7, #20]
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	429a      	cmp	r2, r3
 801125e:	d303      	bcc.n	8011268 <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 8011260:	697a      	ldr	r2, [r7, #20]
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	1ad3      	subs	r3, r2, r3
 8011266:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	697a      	ldr	r2, [r7, #20]
 801126c:	605a      	str	r2, [r3, #4]
}
 801126e:	bf00      	nop
 8011270:	3718      	adds	r7, #24
 8011272:	46bd      	mov	sp, r7
 8011274:	bd80      	pop	{r7, pc}

08011276 <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 8011276:	b480      	push	{r7}
 8011278:	b087      	sub	sp, #28
 801127a:	af00      	add	r7, sp, #0
 801127c:	60f8      	str	r0, [r7, #12]
 801127e:	60b9      	str	r1, [r7, #8]
 8011280:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8011282:	2300      	movs	r3, #0
 8011284:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 8011286:	68fb      	ldr	r3, [r7, #12]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 801128c:	68ba      	ldr	r2, [r7, #8]
 801128e:	693b      	ldr	r3, [r7, #16]
 8011290:	1ad2      	subs	r2, r2, r3
 8011292:	6879      	ldr	r1, [r7, #4]
 8011294:	693b      	ldr	r3, [r7, #16]
 8011296:	1acb      	subs	r3, r1, r3
 8011298:	429a      	cmp	r2, r3
 801129a:	d801      	bhi.n	80112a0 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 801129c:	2301      	movs	r3, #1
 801129e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80112a0:	697b      	ldr	r3, [r7, #20]
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	371c      	adds	r7, #28
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 80112ae:	b580      	push	{r7, lr}
 80112b0:	b084      	sub	sp, #16
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]
 80112b6:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7ff ff77 	bl	80111b2 <uxStreamBufferGetSize>
 80112c4:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f103 0214 	add.w	r2, r3, #20
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	441a      	add	r2, r3
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	691a      	ldr	r2, [r3, #16]
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	1ad3      	subs	r3, r2, r3
 80112dc:	4619      	mov	r1, r3
 80112de:	68b8      	ldr	r0, [r7, #8]
 80112e0:	f7f9 fdc0 	bl	800ae64 <FreeRTOS_min_size_t>
 80112e4:	4603      	mov	r3, r0
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b08a      	sub	sp, #40	@ 0x28
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	60f8      	str	r0, [r7, #12]
 80112f6:	60b9      	str	r1, [r7, #8]
 80112f8:	607a      	str	r2, [r7, #4]
 80112fa:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80112fc:	68f8      	ldr	r0, [r7, #12]
 80112fe:	f7ff ff36 	bl	801116e <uxStreamBufferGetSpace>
 8011302:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8011304:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	429a      	cmp	r2, r3
 801130a:	d904      	bls.n	8011316 <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 801130c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	1ad3      	subs	r3, r2, r3
 8011312:	627b      	str	r3, [r7, #36]	@ 0x24
 8011314:	e001      	b.n	801131a <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 8011316:	2300      	movs	r3, #0
 8011318:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 801131a:	6839      	ldr	r1, [r7, #0]
 801131c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801131e:	f7f9 fda1 	bl	800ae64 <FreeRTOS_min_size_t>
 8011322:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d05c      	beq.n	80113e4 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	691b      	ldr	r3, [r3, #16]
 801132e:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	689b      	ldr	r3, [r3, #8]
 8011334:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011336:	68bb      	ldr	r3, [r7, #8]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d00b      	beq.n	8011354 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 801133c:	6a3a      	ldr	r2, [r7, #32]
 801133e:	68bb      	ldr	r3, [r7, #8]
 8011340:	4413      	add	r3, r2
 8011342:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8011344:	6a3a      	ldr	r2, [r7, #32]
 8011346:	69bb      	ldr	r3, [r7, #24]
 8011348:	429a      	cmp	r2, r3
 801134a:	d303      	bcc.n	8011354 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 801134c:	6a3a      	ldr	r2, [r7, #32]
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d021      	beq.n	801139e <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 801135a:	69ba      	ldr	r2, [r7, #24]
 801135c:	6a3b      	ldr	r3, [r7, #32]
 801135e:	1ad3      	subs	r3, r2, r3
 8011360:	69f9      	ldr	r1, [r7, #28]
 8011362:	4618      	mov	r0, r3
 8011364:	f7f9 fd7e 	bl	800ae64 <FreeRTOS_min_size_t>
 8011368:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 801136a:	6a3b      	ldr	r3, [r7, #32]
 801136c:	3310      	adds	r3, #16
 801136e:	68fa      	ldr	r2, [r7, #12]
 8011370:	4413      	add	r3, r2
 8011372:	3304      	adds	r3, #4
 8011374:	697a      	ldr	r2, [r7, #20]
 8011376:	6879      	ldr	r1, [r7, #4]
 8011378:	4618      	mov	r0, r3
 801137a:	f011 fc07 	bl	8022b8c <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 801137e:	69fa      	ldr	r2, [r7, #28]
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	429a      	cmp	r2, r3
 8011384:	d90b      	bls.n	801139e <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f103 0014 	add.w	r0, r3, #20
 801138c:	687a      	ldr	r2, [r7, #4]
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	18d1      	adds	r1, r2, r3
 8011392:	69fa      	ldr	r2, [r7, #28]
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	1ad3      	subs	r3, r2, r3
 8011398:	461a      	mov	r2, r3
 801139a:	f011 fbf7 	bl	8022b8c <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 801139e:	f7f3 fb57 	bl	8004a50 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d10e      	bne.n	80113c6 <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 80113a8:	6a3a      	ldr	r2, [r7, #32]
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	4413      	add	r3, r2
 80113ae:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 80113b0:	6a3a      	ldr	r2, [r7, #32]
 80113b2:	69bb      	ldr	r3, [r7, #24]
 80113b4:	429a      	cmp	r2, r3
 80113b6:	d303      	bcc.n	80113c0 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 80113b8:	6a3a      	ldr	r2, [r7, #32]
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	1ad3      	subs	r3, r2, r3
 80113be:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	6a3a      	ldr	r2, [r7, #32]
 80113c4:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	68db      	ldr	r3, [r3, #12]
 80113ca:	6a3a      	ldr	r2, [r7, #32]
 80113cc:	4619      	mov	r1, r3
 80113ce:	68f8      	ldr	r0, [r7, #12]
 80113d0:	f7ff ff51 	bl	8011276 <xStreamBufferLessThenEqual>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d002      	beq.n	80113e0 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	6a3a      	ldr	r2, [r7, #32]
 80113de:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 80113e0:	f7f3 fb44 	bl	8004a6c <xTaskResumeAll>
    }

    return uxCount;
 80113e4:	69fb      	ldr	r3, [r7, #28]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3728      	adds	r7, #40	@ 0x28
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}

080113ee <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 80113ee:	b580      	push	{r7, lr}
 80113f0:	b08a      	sub	sp, #40	@ 0x28
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	60f8      	str	r0, [r7, #12]
 80113f6:	60b9      	str	r1, [r7, #8]
 80113f8:	607a      	str	r2, [r7, #4]
 80113fa:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 80113fc:	68f8      	ldr	r0, [r7, #12]
 80113fe:	f7ff fed8 	bl	80111b2 <uxStreamBufferGetSize>
 8011402:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8011404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011406:	68bb      	ldr	r3, [r7, #8]
 8011408:	429a      	cmp	r2, r3
 801140a:	d904      	bls.n	8011416 <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 801140c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	1ad3      	subs	r3, r2, r3
 8011412:	627b      	str	r3, [r7, #36]	@ 0x24
 8011414:	e001      	b.n	801141a <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 8011416:	2300      	movs	r3, #0
 8011418:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 801141a:	6839      	ldr	r1, [r7, #0]
 801141c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801141e:	f7f9 fd21 	bl	800ae64 <FreeRTOS_min_size_t>
 8011422:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	2b00      	cmp	r3, #0
 8011428:	d04e      	beq.n	80114c8 <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	691b      	ldr	r3, [r3, #16]
 801142e:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d00b      	beq.n	8011454 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 801143c:	6a3a      	ldr	r2, [r7, #32]
 801143e:	68bb      	ldr	r3, [r7, #8]
 8011440:	4413      	add	r3, r2
 8011442:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8011444:	6a3a      	ldr	r2, [r7, #32]
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	429a      	cmp	r2, r3
 801144a:	d303      	bcc.n	8011454 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 801144c:	6a3a      	ldr	r2, [r7, #32]
 801144e:	69bb      	ldr	r3, [r7, #24]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d021      	beq.n	801149e <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 801145a:	69ba      	ldr	r2, [r7, #24]
 801145c:	6a3b      	ldr	r3, [r7, #32]
 801145e:	1ad3      	subs	r3, r2, r3
 8011460:	69f9      	ldr	r1, [r7, #28]
 8011462:	4618      	mov	r0, r3
 8011464:	f7f9 fcfe 	bl	800ae64 <FreeRTOS_min_size_t>
 8011468:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 801146a:	6a3b      	ldr	r3, [r7, #32]
 801146c:	3310      	adds	r3, #16
 801146e:	68fa      	ldr	r2, [r7, #12]
 8011470:	4413      	add	r3, r2
 8011472:	3304      	adds	r3, #4
 8011474:	697a      	ldr	r2, [r7, #20]
 8011476:	4619      	mov	r1, r3
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f011 fb87 	bl	8022b8c <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 801147e:	69fa      	ldr	r2, [r7, #28]
 8011480:	697b      	ldr	r3, [r7, #20]
 8011482:	429a      	cmp	r2, r3
 8011484:	d90b      	bls.n	801149e <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8011486:	687a      	ldr	r2, [r7, #4]
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	18d0      	adds	r0, r2, r3
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	f103 0114 	add.w	r1, r3, #20
 8011492:	69fa      	ldr	r2, [r7, #28]
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	1ad3      	subs	r3, r2, r3
 8011498:	461a      	mov	r2, r3
 801149a:	f011 fb77 	bl	8022b8c <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 801149e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d111      	bne.n	80114c8 <uxStreamBufferGet+0xda>
 80114a4:	68bb      	ldr	r3, [r7, #8]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d10e      	bne.n	80114c8 <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 80114aa:	6a3a      	ldr	r2, [r7, #32]
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	4413      	add	r3, r2
 80114b0:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 80114b2:	6a3a      	ldr	r2, [r7, #32]
 80114b4:	69bb      	ldr	r3, [r7, #24]
 80114b6:	429a      	cmp	r2, r3
 80114b8:	d303      	bcc.n	80114c2 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 80114ba:	6a3a      	ldr	r2, [r7, #32]
 80114bc:	69bb      	ldr	r3, [r7, #24]
 80114be:	1ad3      	subs	r3, r2, r3
 80114c0:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6a3a      	ldr	r2, [r7, #32]
 80114c6:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 80114c8:	69fb      	ldr	r3, [r7, #28]
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3728      	adds	r7, #40	@ 0x28
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
	...

080114d4 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 80114dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011508 <vSocketCloseNextTime+0x34>)
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d009      	beq.n	80114f8 <vSocketCloseNextTime+0x24>
 80114e4:	4b08      	ldr	r3, [pc, #32]	@ (8011508 <vSocketCloseNextTime+0x34>)
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	687a      	ldr	r2, [r7, #4]
 80114ea:	429a      	cmp	r2, r3
 80114ec:	d004      	beq.n	80114f8 <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 80114ee:	4b06      	ldr	r3, [pc, #24]	@ (8011508 <vSocketCloseNextTime+0x34>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	4618      	mov	r0, r3
 80114f4:	f7fd fc7a 	bl	800edec <vSocketClose>
        }

        xSocketToClose = pxSocket;
 80114f8:	4a03      	ldr	r2, [pc, #12]	@ (8011508 <vSocketCloseNextTime+0x34>)
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	6013      	str	r3, [r2, #0]
    }
 80114fe:	bf00      	nop
 8011500:	3708      	adds	r7, #8
 8011502:	46bd      	mov	sp, r7
 8011504:	bd80      	pop	{r7, pc}
 8011506:	bf00      	nop
 8011508:	20001620 	.word	0x20001620

0801150c <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8011514:	4b0c      	ldr	r3, [pc, #48]	@ (8011548 <vSocketListenNextTime+0x3c>)
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d00e      	beq.n	801153a <vSocketListenNextTime+0x2e>
 801151c:	4b0a      	ldr	r3, [pc, #40]	@ (8011548 <vSocketListenNextTime+0x3c>)
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	687a      	ldr	r2, [r7, #4]
 8011522:	429a      	cmp	r2, r3
 8011524:	d009      	beq.n	801153a <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 8011526:	4b08      	ldr	r3, [pc, #32]	@ (8011548 <vSocketListenNextTime+0x3c>)
 8011528:	681a      	ldr	r2, [r3, #0]
 801152a:	4b07      	ldr	r3, [pc, #28]	@ (8011548 <vSocketListenNextTime+0x3c>)
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011532:	4619      	mov	r1, r3
 8011534:	4610      	mov	r0, r2
 8011536:	f7fe fff3 	bl	8010520 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 801153a:	4a03      	ldr	r2, [pc, #12]	@ (8011548 <vSocketListenNextTime+0x3c>)
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6013      	str	r3, [r2, #0]
    }
 8011540:	bf00      	nop
 8011542:	3708      	adds	r7, #8
 8011544:	46bd      	mov	sp, r7
 8011546:	bd80      	pop	{r7, pc}
 8011548:	20001624 	.word	0x20001624

0801154c <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 801154c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011550:	b086      	sub	sp, #24
 8011552:	af02      	add	r7, sp, #8
 8011554:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 8011556:	2300      	movs	r3, #0
 8011558:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 801155a:	2300      	movs	r3, #0
 801155c:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011564:	2b04      	cmp	r3, #4
 8011566:	d907      	bls.n	8011578 <xTCPSocketCheck+0x2c>
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801156e:	2b00      	cmp	r3, #0
 8011570:	d002      	beq.n	8011578 <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 8011572:	6878      	ldr	r0, [r7, #4]
 8011574:	f003 f834 	bl	80145e0 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801157e:	2b00      	cmp	r3, #0
 8011580:	d05f      	beq.n	8011642 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011588:	f003 0320 	and.w	r3, r3, #32
 801158c:	b2db      	uxtb	r3, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	d148      	bne.n	8011624 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011598:	2b00      	cmp	r3, #0
 801159a:	d03b      	beq.n	8011614 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 801159c:	4b37      	ldr	r3, [pc, #220]	@ (801167c <xTCPSocketCheck+0x130>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	dd25      	ble.n	80115f0 <xTCPSocketCheck+0xa4>
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80115a8:	2b17      	cmp	r3, #23
 80115aa:	d021      	beq.n	80115f0 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80115b0:	461e      	mov	r6, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80115b8:	4698      	mov	r8, r3
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80115c6:	1ad5      	subs	r5, r2, r3
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80115d4:	1ad4      	subs	r4, r2, r3
 80115d6:	6878      	ldr	r0, [r7, #4]
 80115d8:	f7f8 ff00 	bl	800a3dc <uxIPHeaderSizeSocket>
 80115dc:	4603      	mov	r3, r0
 80115de:	3314      	adds	r3, #20
 80115e0:	9301      	str	r3, [sp, #4]
 80115e2:	9400      	str	r4, [sp, #0]
 80115e4:	462b      	mov	r3, r5
 80115e6:	4642      	mov	r2, r8
 80115e8:	4631      	mov	r1, r6
 80115ea:	4825      	ldr	r0, [pc, #148]	@ (8011680 <xTCPSocketCheck+0x134>)
 80115ec:	f011 f8b2 	bl	8022754 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80115f6:	6878      	ldr	r0, [r7, #4]
 80115f8:	f7f8 fef0 	bl	800a3dc <uxIPHeaderSizeSocket>
 80115fc:	4603      	mov	r3, r0
 80115fe:	f103 0214 	add.w	r2, r3, #20
 8011602:	2301      	movs	r3, #1
 8011604:	4621      	mov	r1, r4
 8011606:	6878      	ldr	r0, [r7, #4]
 8011608:	f002 fac8 	bl	8013b9c <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	2200      	movs	r2, #0
 8011610:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f000 faa1 	bl	8011b5c <prvTCPNextTimeout>
 801161a:	4603      	mov	r3, r0
 801161c:	2b01      	cmp	r3, #1
 801161e:	d901      	bls.n	8011624 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8011620:	2301      	movs	r3, #1
 8011622:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801162a:	2b00      	cmp	r3, #0
 801162c:	d009      	beq.n	8011642 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8011634:	4618      	mov	r0, r3
 8011636:	f006 f9e5 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8011642:	68bb      	ldr	r3, [r7, #8]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d113      	bne.n	8011670 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801164e:	2b04      	cmp	r3, #4
 8011650:	d804      	bhi.n	801165c <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8011658:	2b02      	cmp	r3, #2
 801165a:	d102      	bne.n	8011662 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 801165c:	6878      	ldr	r0, [r7, #4]
 801165e:	f002 f9ff 	bl	8013a60 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f000 fa7a 	bl	8011b5c <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 8011668:	6878      	ldr	r0, [r7, #4]
 801166a:	f001 f973 	bl	8012954 <prvTCPStatusAgeCheck>
 801166e:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8011670:	68fb      	ldr	r3, [r7, #12]
    }
 8011672:	4618      	mov	r0, r3
 8011674:	3710      	adds	r7, #16
 8011676:	46bd      	mov	sp, r7
 8011678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801167c:	2000164c 	.word	0x2000164c
 8011680:	080267e4 	.word	0x080267e4

08011684 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8011684:	b580      	push	{r7, lr}
 8011686:	b082      	sub	sp, #8
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 801168c:	f7f3 faf2 	bl	8004c74 <xTaskGetTickCount>
 8011690:	4602      	mov	r2, r0
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801169e:	f36f 0382 	bfc	r3, #2, #1
 80116a2:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80116a6:	687a      	ldr	r2, [r7, #4]
 80116a8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80116ac:	f36f 0341 	bfc	r3, #1, #1
 80116b0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2200      	movs	r2, #0
 80116b8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80116bc:	f7f3 fada 	bl	8004c74 <xTaskGetTickCount>
 80116c0:	4602      	mov	r2, r0
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 80116c8:	bf00      	nop
 80116ca:	3708      	adds	r7, #8
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 80116d0:	b480      	push	{r7}
 80116d2:	b087      	sub	sp, #28
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80116d8:	2300      	movs	r3, #0
 80116da:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80116dc:	4b15      	ldr	r3, [pc, #84]	@ (8011734 <vTCPRemoveTCPChild+0x64>)
 80116de:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80116e0:	4b15      	ldr	r3, [pc, #84]	@ (8011738 <vTCPRemoveTCPChild+0x68>)
 80116e2:	68db      	ldr	r3, [r3, #12]
 80116e4:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 80116e6:	e01a      	b.n	801171e <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	68db      	ldr	r3, [r3, #12]
 80116ec:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80116ee:	693b      	ldr	r3, [r7, #16]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 80116f4:	68ba      	ldr	r2, [r7, #8]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d010      	beq.n	801171e <vTCPRemoveTCPChild+0x4e>
 80116fc:	68bb      	ldr	r3, [r7, #8]
 80116fe:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011704:	429a      	cmp	r2, r3
 8011706:	d10a      	bne.n	801171e <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801170c:	687a      	ldr	r2, [r7, #4]
 801170e:	429a      	cmp	r2, r3
 8011710:	d105      	bne.n	801171e <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	2200      	movs	r2, #0
 8011716:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 8011718:	2301      	movs	r3, #1
 801171a:	617b      	str	r3, [r7, #20]
                    break;
 801171c:	e003      	b.n	8011726 <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	429a      	cmp	r2, r3
 8011724:	d1e0      	bne.n	80116e8 <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 8011726:	697b      	ldr	r3, [r7, #20]
    }
 8011728:	4618      	mov	r0, r3
 801172a:	371c      	adds	r7, #28
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr
 8011734:	20001610 	.word	0x20001610
 8011738:	20001608 	.word	0x20001608

0801173c <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 801173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801173e:	b097      	sub	sp, #92	@ 0x5c
 8011740:	af02      	add	r7, sp, #8
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	460b      	mov	r3, r1
 8011746:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011752:	2b04      	cmp	r3, #4
 8011754:	d906      	bls.n	8011764 <vTCPStateChange+0x28>
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801175c:	2b08      	cmp	r3, #8
 801175e:	d001      	beq.n	8011764 <vTCPStateChange+0x28>
 8011760:	2301      	movs	r3, #1
 8011762:	e000      	b.n	8011766 <vTCPStateChange+0x2a>
 8011764:	2300      	movs	r3, #0
 8011766:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 8011768:	78fb      	ldrb	r3, [r7, #3]
 801176a:	2b04      	cmp	r3, #4
 801176c:	d904      	bls.n	8011778 <vTCPStateChange+0x3c>
 801176e:	78fb      	ldrb	r3, [r7, #3]
 8011770:	2b08      	cmp	r3, #8
 8011772:	d001      	beq.n	8011778 <vTCPStateChange+0x3c>
 8011774:	2301      	movs	r3, #1
 8011776:	e000      	b.n	801177a <vTCPStateChange+0x3e>
 8011778:	2300      	movs	r3, #0
 801177a:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011782:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 8011786:	2300      	movs	r3, #0
 8011788:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 801178a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801178e:	2b02      	cmp	r3, #2
 8011790:	d007      	beq.n	80117a2 <vTCPStateChange+0x66>
 8011792:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011796:	2b03      	cmp	r3, #3
 8011798:	d003      	beq.n	80117a2 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 801179a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801179e:	2b04      	cmp	r3, #4
 80117a0:	d114      	bne.n	80117cc <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 80117a2:	78fb      	ldrb	r3, [r7, #3]
 80117a4:	2b08      	cmp	r3, #8
 80117a6:	d111      	bne.n	80117cc <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 80117a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80117ac:	4618      	mov	r0, r3
 80117ae:	f001 fed7 	bl	8013560 <FreeRTOS_GetTCPStateName>
 80117b2:	4604      	mov	r4, r0
 80117b4:	78fb      	ldrb	r3, [r7, #3]
 80117b6:	4618      	mov	r0, r3
 80117b8:	f001 fed2 	bl	8013560 <FreeRTOS_GetTCPStateName>
 80117bc:	4603      	mov	r3, r0
 80117be:	461a      	mov	r2, r3
 80117c0:	4621      	mov	r1, r4
 80117c2:	4875      	ldr	r0, [pc, #468]	@ (8011998 <vTCPStateChange+0x25c>)
 80117c4:	f010 ffc6 	bl	8022754 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 80117c8:	2301      	movs	r3, #1
 80117ca:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 80117cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80117ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80117d0:	429a      	cmp	r2, r3
 80117d2:	f000 809f 	beq.w	8011914 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80117dc:	f003 0304 	and.w	r3, r3, #4
 80117e0:	b2db      	uxtb	r3, r3
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d012      	beq.n	801180c <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80117ec:	f003 0308 	and.w	r3, r3, #8
 80117f0:	b2db      	uxtb	r3, r3
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d10a      	bne.n	801180c <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80117fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 80117fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d104      	bne.n	801180c <vTCPStateChange+0xd0>
 8011802:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8011806:	4865      	ldr	r0, [pc, #404]	@ (801199c <vTCPStateChange+0x260>)
 8011808:	f7f0 f8c6 	bl	8001998 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 801180c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801180e:	2b00      	cmp	r3, #0
 8011810:	d057      	beq.n	80118c2 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011818:	f003 0304 	and.w	r3, r3, #4
 801181c:	b2db      	uxtb	r3, r3
 801181e:	2b00      	cmp	r3, #0
 8011820:	d03c      	beq.n	801189c <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8011822:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011824:	2b00      	cmp	r3, #0
 8011826:	d027      	beq.n	8011878 <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8011828:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801182a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801182c:	2b00      	cmp	r3, #0
 801182e:	d102      	bne.n	8011836 <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8011830:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011832:	687a      	ldr	r2, [r7, #4]
 8011834:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8011836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011838:	681b      	ldr	r3, [r3, #0]
 801183a:	f043 0204 	orr.w	r2, r3, #4
 801183e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011840:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8011842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011846:	f003 0301 	and.w	r3, r3, #1
 801184a:	2b00      	cmp	r3, #0
 801184c:	d005      	beq.n	801185a <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 801184e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8011856:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011858:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 801185a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801185c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011860:	2b00      	cmp	r3, #0
 8011862:	d009      	beq.n	8011878 <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8011864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011866:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801186a:	f003 0308 	and.w	r3, r3, #8
 801186e:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8011870:	2b00      	cmp	r3, #0
 8011872:	d101      	bne.n	8011878 <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8011874:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011876:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2200      	movs	r2, #0
 801187c:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 801187e:	687a      	ldr	r2, [r7, #4]
 8011880:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011884:	f36f 0382 	bfc	r3, #2, #1
 8011888:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 801188c:	687a      	ldr	r2, [r7, #4]
 801188e:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011892:	f043 0302 	orr.w	r3, r3, #2
 8011896:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 801189a:	e024      	b.n	80118e6 <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f043 0208 	orr.w	r2, r3, #8
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118ac:	f003 0302 	and.w	r3, r3, #2
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d018      	beq.n	80118e6 <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	601a      	str	r2, [r3, #0]
 80118c0:	e011      	b.n	80118e6 <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 80118c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	f043 0220 	orr.w	r2, r3, #32
 80118ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118cc:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80118ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80118d2:	f003 0304 	and.w	r3, r3, #4
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d005      	beq.n	80118e6 <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 80118da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80118e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80118e4:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d004      	beq.n	80118fa <vTCPStateChange+0x1be>
 80118f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d101      	bne.n	80118fa <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 80118fa:	687b      	ldr	r3, [r7, #4]
 80118fc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011900:	4618      	mov	r0, r3
 8011902:	f000 ffff 	bl	8012904 <prvTCPSocketIsActive>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d103      	bne.n	8011914 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2200      	movs	r2, #0
 8011910:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	78fa      	ldrb	r2, [r7, #3]
 8011918:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 801191c:	78fb      	ldrb	r3, [r7, #3]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d003      	beq.n	801192a <vTCPStateChange+0x1ee>
 8011922:	78fb      	ldrb	r3, [r7, #3]
 8011924:	2b08      	cmp	r3, #8
 8011926:	f040 8084 	bne.w	8011a32 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 801192a:	2300      	movs	r3, #0
 801192c:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 801192e:	2300      	movs	r3, #0
 8011930:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 8011932:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	429a      	cmp	r2, r3
 8011938:	d106      	bne.n	8011948 <vTCPStateChange+0x20c>
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801193e:	2b00      	cmp	r3, #0
 8011940:	d002      	beq.n	8011948 <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011946:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011948:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801194a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801194c:	2b00      	cmp	r3, #0
 801194e:	d006      	beq.n	801195e <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8011950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8011954:	687a      	ldr	r2, [r7, #4]
 8011956:	429a      	cmp	r2, r3
 8011958:	d101      	bne.n	801195e <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 801195a:	2301      	movs	r3, #1
 801195c:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011964:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8011968:	b2db      	uxtb	r3, r3
 801196a:	4619      	mov	r1, r3
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011972:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8011976:	b2db      	uxtb	r3, r3
 8011978:	461a      	mov	r2, r3
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011980:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011984:	b2db      	uxtb	r3, r3
 8011986:	4806      	ldr	r0, [pc, #24]	@ (80119a0 <vTCPStateChange+0x264>)
 8011988:	f010 fee4 	bl	8022754 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 801198c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801198e:	2b00      	cmp	r3, #0
 8011990:	d008      	beq.n	80119a4 <vTCPStateChange+0x268>
 8011992:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011994:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011996:	e006      	b.n	80119a6 <vTCPStateChange+0x26a>
 8011998:	08026810 	.word	0x08026810
 801199c:	08026824 	.word	0x08026824
 80119a0:	08026854 	.word	0x08026854
 80119a4:	2300      	movs	r3, #0
 80119a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80119a8:	9200      	str	r2, [sp, #0]
 80119aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80119ac:	6879      	ldr	r1, [r7, #4]
 80119ae:	4865      	ldr	r0, [pc, #404]	@ (8011b44 <vTCPStateChange+0x408>)
 80119b0:	f010 fed0 	bl	8022754 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 80119b4:	f7f3 f84c 	bl	8004a50 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119be:	f003 0304 	and.w	r3, r3, #4
 80119c2:	b2db      	uxtb	r3, r3
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d107      	bne.n	80119d8 <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119ce:	f003 0302 	and.w	r3, r3, #2
 80119d2:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d026      	beq.n	8011a26 <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80119de:	f003 0308 	and.w	r3, r3, #8
 80119e2:	b2db      	uxtb	r3, r3
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d11e      	bne.n	8011a26 <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 80119e8:	6878      	ldr	r0, [r7, #4]
 80119ea:	f7ff fe71 	bl	80116d0 <vTCPRemoveTCPChild>
 80119ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80119f0:	687a      	ldr	r2, [r7, #4]
 80119f2:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80119f6:	f36f 0382 	bfc	r3, #2, #1
 80119fa:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 80119fe:	687a      	ldr	r2, [r7, #4]
 8011a00:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011a04:	f36f 0341 	bfc	r3, #1, #1
 8011a08:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 8011a0c:	f7f9 f85a 	bl	800aac4 <xIsCallingFromIPTask>
 8011a10:	4603      	mov	r3, r0
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d104      	bne.n	8011a20 <vTCPStateChange+0x2e4>
 8011a16:	f44f 7101 	mov.w	r1, #516	@ 0x204
 8011a1a:	484b      	ldr	r0, [pc, #300]	@ (8011b48 <vTCPStateChange+0x40c>)
 8011a1c:	f7ef ffbc 	bl	8001998 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 8011a20:	6878      	ldr	r0, [r7, #4]
 8011a22:	f7ff fd57 	bl	80114d4 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 8011a26:	f7f3 f821 	bl	8004a6c <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 8011a2a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a2c:	4847      	ldr	r0, [pc, #284]	@ (8011b4c <vTCPStateChange+0x410>)
 8011a2e:	f010 fe91 	bl	8022754 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 8011a32:	78fb      	ldrb	r3, [r7, #3]
 8011a34:	2b08      	cmp	r3, #8
 8011a36:	d11b      	bne.n	8011a70 <vTCPStateChange+0x334>
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a3e:	f003 0308 	and.w	r3, r3, #8
 8011a42:	b2db      	uxtb	r3, r3
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d013      	beq.n	8011a70 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 8011a48:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011a4c:	3b03      	subs	r3, #3
 8011a4e:	2b01      	cmp	r3, #1
 8011a50:	d80d      	bhi.n	8011a6e <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011a56:	4619      	mov	r1, r3
 8011a58:	483d      	ldr	r0, [pc, #244]	@ (8011b50 <vTCPStateChange+0x414>)
 8011a5a:	f010 fe7b 	bl	8022754 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	2200      	movs	r2, #0
 8011a62:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	f7ff fd50 	bl	801150c <vSocketListenNextTime>
                    break;
 8011a6c:	e000      	b.n	8011a70 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8011a6e:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8011a70:	6878      	ldr	r0, [r7, #4]
 8011a72:	f7ff fe07 	bl	8011684 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8011a76:	4b37      	ldr	r3, [pc, #220]	@ (8011b54 <vTCPStateChange+0x418>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	db4f      	blt.n	8011b1e <vTCPStateChange+0x3e2>
 8011a7e:	687b      	ldr	r3, [r7, #4]
 8011a80:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011a82:	2b17      	cmp	r3, #23
 8011a84:	d04b      	beq.n	8011b1e <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	7a1b      	ldrb	r3, [r3, #8]
 8011a8a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011a8e:	b2db      	uxtb	r3, r3
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d002      	beq.n	8011a9a <vTCPStateChange+0x35e>
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d01d      	beq.n	8011ad4 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 8011a98:	e026      	b.n	8011ae8 <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011a9e:	061a      	lsls	r2, r3, #24
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011aa4:	021b      	lsls	r3, r3, #8
 8011aa6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011aaa:	431a      	orrs	r2, r3
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011ab0:	0a1b      	lsrs	r3, r3, #8
 8011ab2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011ab6:	431a      	orrs	r2, r3
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011abc:	0e1b      	lsrs	r3, r3, #24
 8011abe:	4313      	orrs	r3, r2
 8011ac0:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8011ac2:	f107 0208 	add.w	r2, r7, #8
 8011ac6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8011aca:	2328      	movs	r3, #40	@ 0x28
 8011acc:	2002      	movs	r0, #2
 8011ace:	f7fd ff09 	bl	800f8e4 <FreeRTOS_inet_ntop>
                           break;
 8011ad2:	e009      	b.n	8011ae8 <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 8011ada:	f107 0208 	add.w	r2, r7, #8
 8011ade:	2328      	movs	r3, #40	@ 0x28
 8011ae0:	200a      	movs	r0, #10
 8011ae2:	f7fd feff 	bl	800f8e4 <FreeRTOS_inet_ntop>
                            break;
 8011ae6:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011aec:	461d      	mov	r5, r3
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011af4:	461e      	mov	r6, r3
 8011af6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8011afa:	4618      	mov	r0, r3
 8011afc:	f001 fd30 	bl	8013560 <FreeRTOS_GetTCPStateName>
 8011b00:	4604      	mov	r4, r0
 8011b02:	78fb      	ldrb	r3, [r7, #3]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f001 fd2b 	bl	8013560 <FreeRTOS_GetTCPStateName>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	f107 0208 	add.w	r2, r7, #8
 8011b10:	9301      	str	r3, [sp, #4]
 8011b12:	9400      	str	r4, [sp, #0]
 8011b14:	4633      	mov	r3, r6
 8011b16:	4629      	mov	r1, r5
 8011b18:	480f      	ldr	r0, [pc, #60]	@ (8011b58 <vTCPStateChange+0x41c>)
 8011b1a:	f010 fe1b 	bl	8022754 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 8011b1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d005      	beq.n	8011b30 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 8011b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b26:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011b2a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8011b2c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8011b2e:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 8011b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d002      	beq.n	8011b3c <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 8011b36:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8011b38:	f7fd ff53 	bl	800f9e2 <vSocketWakeUpUser>
        }
    }
 8011b3c:	bf00      	nop
 8011b3e:	3754      	adds	r7, #84	@ 0x54
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011b44:	08026890 	.word	0x08026890
 8011b48:	08026824 	.word	0x08026824
 8011b4c:	080268c4 	.word	0x080268c4
 8011b50:	080268e8 	.word	0x080268e8
 8011b54:	2000164c 	.word	0x2000164c
 8011b58:	0802690c 	.word	0x0802690c

08011b5c <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8011b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011b60:	b098      	sub	sp, #96	@ 0x60
 8011b62:	af02      	add	r7, sp, #8
 8011b64:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011b66:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011b6a:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b6e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b72:	2b02      	cmp	r3, #2
 8011b74:	f040 80cc 	bne.w	8011d10 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 8011b78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b7a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011b7e:	f003 0308 	and.w	r3, r3, #8
 8011b82:	b2db      	uxtb	r3, r3
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d01a      	beq.n	8011bbe <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 8011b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b8a:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011b8e:	2b02      	cmp	r3, #2
 8011b90:	d811      	bhi.n	8011bb6 <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011b92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b94:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d102      	bne.n	8011ba2 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011ba0:	e010      	b.n	8011bc4 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ba4:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011ba8:	3b01      	subs	r3, #1
 8011baa:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011bae:	fa02 f303 	lsl.w	r3, r2, r3
 8011bb2:	653b      	str	r3, [r7, #80]	@ 0x50
 8011bb4:	e006      	b.n	8011bc4 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 8011bb6:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 8011bba:	653b      	str	r3, [r7, #80]	@ 0x50
 8011bbc:	e002      	b.n	8011bc4 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8011bbe:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011bc2:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8011bc4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bc6:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8011bc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011bce:	4618      	mov	r0, r3
 8011bd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011bd2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bda:	9300      	str	r3, [sp, #0]
 8011bdc:	4613      	mov	r3, r2
 8011bde:	4602      	mov	r2, r0
 8011be0:	48a4      	ldr	r0, [pc, #656]	@ (8011e74 <prvTCPNextTimeout+0x318>)
 8011be2:	f010 fdb7 	bl	8022754 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 8011be6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011be8:	2200      	movs	r2, #0
 8011bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8011bec:	647a      	str	r2, [r7, #68]	@ 0x44
 8011bee:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011bf2:	4622      	mov	r2, r4
 8011bf4:	462b      	mov	r3, r5
 8011bf6:	f04f 0000 	mov.w	r0, #0
 8011bfa:	f04f 0100 	mov.w	r1, #0
 8011bfe:	0159      	lsls	r1, r3, #5
 8011c00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011c04:	0150      	lsls	r0, r2, #5
 8011c06:	4602      	mov	r2, r0
 8011c08:	460b      	mov	r3, r1
 8011c0a:	4621      	mov	r1, r4
 8011c0c:	1a51      	subs	r1, r2, r1
 8011c0e:	6239      	str	r1, [r7, #32]
 8011c10:	4629      	mov	r1, r5
 8011c12:	eb63 0301 	sbc.w	r3, r3, r1
 8011c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8011c18:	f04f 0200 	mov.w	r2, #0
 8011c1c:	f04f 0300 	mov.w	r3, #0
 8011c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8011c24:	4649      	mov	r1, r9
 8011c26:	008b      	lsls	r3, r1, #2
 8011c28:	4641      	mov	r1, r8
 8011c2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8011c2e:	4641      	mov	r1, r8
 8011c30:	008a      	lsls	r2, r1, #2
 8011c32:	4610      	mov	r0, r2
 8011c34:	4619      	mov	r1, r3
 8011c36:	4603      	mov	r3, r0
 8011c38:	4622      	mov	r2, r4
 8011c3a:	189b      	adds	r3, r3, r2
 8011c3c:	61bb      	str	r3, [r7, #24]
 8011c3e:	462b      	mov	r3, r5
 8011c40:	460a      	mov	r2, r1
 8011c42:	eb42 0303 	adc.w	r3, r2, r3
 8011c46:	61fb      	str	r3, [r7, #28]
 8011c48:	f04f 0200 	mov.w	r2, #0
 8011c4c:	f04f 0300 	mov.w	r3, #0
 8011c50:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8011c54:	4629      	mov	r1, r5
 8011c56:	00cb      	lsls	r3, r1, #3
 8011c58:	4621      	mov	r1, r4
 8011c5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011c5e:	4621      	mov	r1, r4
 8011c60:	00ca      	lsls	r2, r1, #3
 8011c62:	4610      	mov	r0, r2
 8011c64:	4619      	mov	r1, r3
 8011c66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011c6a:	f04f 0300 	mov.w	r3, #0
 8011c6e:	f7ee fb9f 	bl	80003b0 <__aeabi_uldivmod>
 8011c72:	4602      	mov	r2, r0
 8011c74:	460b      	mov	r3, r1
 8011c76:	4613      	mov	r3, r2
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d044      	beq.n	8011d06 <prvTCPNextTimeout+0x1aa>
 8011c7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c7e:	2200      	movs	r2, #0
 8011c80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011c82:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011c84:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8011c88:	4622      	mov	r2, r4
 8011c8a:	462b      	mov	r3, r5
 8011c8c:	f04f 0000 	mov.w	r0, #0
 8011c90:	f04f 0100 	mov.w	r1, #0
 8011c94:	0159      	lsls	r1, r3, #5
 8011c96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011c9a:	0150      	lsls	r0, r2, #5
 8011c9c:	4602      	mov	r2, r0
 8011c9e:	460b      	mov	r3, r1
 8011ca0:	4621      	mov	r1, r4
 8011ca2:	ebb2 0a01 	subs.w	sl, r2, r1
 8011ca6:	4629      	mov	r1, r5
 8011ca8:	eb63 0b01 	sbc.w	fp, r3, r1
 8011cac:	f04f 0200 	mov.w	r2, #0
 8011cb0:	f04f 0300 	mov.w	r3, #0
 8011cb4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8011cb8:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011cbc:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8011cc0:	4692      	mov	sl, r2
 8011cc2:	469b      	mov	fp, r3
 8011cc4:	4623      	mov	r3, r4
 8011cc6:	eb1a 0303 	adds.w	r3, sl, r3
 8011cca:	613b      	str	r3, [r7, #16]
 8011ccc:	462b      	mov	r3, r5
 8011cce:	eb4b 0303 	adc.w	r3, fp, r3
 8011cd2:	617b      	str	r3, [r7, #20]
 8011cd4:	f04f 0200 	mov.w	r2, #0
 8011cd8:	f04f 0300 	mov.w	r3, #0
 8011cdc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	00cb      	lsls	r3, r1, #3
 8011ce4:	4621      	mov	r1, r4
 8011ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011cea:	4621      	mov	r1, r4
 8011cec:	00ca      	lsls	r2, r1, #3
 8011cee:	4610      	mov	r0, r2
 8011cf0:	4619      	mov	r1, r3
 8011cf2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011cf6:	f04f 0300 	mov.w	r3, #0
 8011cfa:	f7ee fb59 	bl	80003b0 <__aeabi_uldivmod>
 8011cfe:	4602      	mov	r2, r0
 8011d00:	460b      	mov	r3, r1
 8011d02:	b292      	uxth	r2, r2
 8011d04:	e000      	b.n	8011d08 <prvTCPNextTimeout+0x1ac>
 8011d06:	2201      	movs	r2, #1
 8011d08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d0a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8011d0e:	e0a8      	b.n	8011e62 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8011d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d12:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	f040 80a3 	bne.w	8011e62 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8011d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d1e:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011d22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d24:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8011d28:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	f004 fcbd 	bl	80166ac <xTCPWindowTxHasData>
 8011d32:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8011d34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d108      	bne.n	8011d4c <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8011d3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d002      	beq.n	8011d46 <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8011d40:	2301      	movs	r3, #1
 8011d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d44:	e002      	b.n	8011d4c <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8011d46:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8011d4a:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8011d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d4e:	2200      	movs	r2, #0
 8011d50:	633b      	str	r3, [r7, #48]	@ 0x30
 8011d52:	637a      	str	r2, [r7, #52]	@ 0x34
 8011d54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8011d58:	4652      	mov	r2, sl
 8011d5a:	465b      	mov	r3, fp
 8011d5c:	f04f 0000 	mov.w	r0, #0
 8011d60:	f04f 0100 	mov.w	r1, #0
 8011d64:	0159      	lsls	r1, r3, #5
 8011d66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011d6a:	0150      	lsls	r0, r2, #5
 8011d6c:	4602      	mov	r2, r0
 8011d6e:	460b      	mov	r3, r1
 8011d70:	4651      	mov	r1, sl
 8011d72:	ebb2 0801 	subs.w	r8, r2, r1
 8011d76:	4659      	mov	r1, fp
 8011d78:	eb63 0901 	sbc.w	r9, r3, r1
 8011d7c:	f04f 0200 	mov.w	r2, #0
 8011d80:	f04f 0300 	mov.w	r3, #0
 8011d84:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8011d88:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011d8c:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011d90:	4690      	mov	r8, r2
 8011d92:	4699      	mov	r9, r3
 8011d94:	4653      	mov	r3, sl
 8011d96:	eb18 0303 	adds.w	r3, r8, r3
 8011d9a:	60bb      	str	r3, [r7, #8]
 8011d9c:	465b      	mov	r3, fp
 8011d9e:	eb49 0303 	adc.w	r3, r9, r3
 8011da2:	60fb      	str	r3, [r7, #12]
 8011da4:	f04f 0200 	mov.w	r2, #0
 8011da8:	f04f 0300 	mov.w	r3, #0
 8011dac:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011db0:	4649      	mov	r1, r9
 8011db2:	00cb      	lsls	r3, r1, #3
 8011db4:	4641      	mov	r1, r8
 8011db6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011dba:	4641      	mov	r1, r8
 8011dbc:	00ca      	lsls	r2, r1, #3
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011dc6:	f04f 0300 	mov.w	r3, #0
 8011dca:	f7ee faf1 	bl	80003b0 <__aeabi_uldivmod>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	460b      	mov	r3, r1
 8011dd2:	4613      	mov	r3, r2
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d040      	beq.n	8011e5a <prvTCPNextTimeout+0x2fe>
 8011dd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dda:	2200      	movs	r2, #0
 8011ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011dde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011de0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011de4:	4642      	mov	r2, r8
 8011de6:	464b      	mov	r3, r9
 8011de8:	f04f 0000 	mov.w	r0, #0
 8011dec:	f04f 0100 	mov.w	r1, #0
 8011df0:	0159      	lsls	r1, r3, #5
 8011df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8011df6:	0150      	lsls	r0, r2, #5
 8011df8:	4602      	mov	r2, r0
 8011dfa:	460b      	mov	r3, r1
 8011dfc:	4641      	mov	r1, r8
 8011dfe:	1a54      	subs	r4, r2, r1
 8011e00:	4649      	mov	r1, r9
 8011e02:	eb63 0501 	sbc.w	r5, r3, r1
 8011e06:	f04f 0200 	mov.w	r2, #0
 8011e0a:	f04f 0300 	mov.w	r3, #0
 8011e0e:	00ab      	lsls	r3, r5, #2
 8011e10:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8011e14:	00a2      	lsls	r2, r4, #2
 8011e16:	4614      	mov	r4, r2
 8011e18:	461d      	mov	r5, r3
 8011e1a:	4643      	mov	r3, r8
 8011e1c:	18e3      	adds	r3, r4, r3
 8011e1e:	603b      	str	r3, [r7, #0]
 8011e20:	464b      	mov	r3, r9
 8011e22:	eb45 0303 	adc.w	r3, r5, r3
 8011e26:	607b      	str	r3, [r7, #4]
 8011e28:	f04f 0200 	mov.w	r2, #0
 8011e2c:	f04f 0300 	mov.w	r3, #0
 8011e30:	e9d7 4500 	ldrd	r4, r5, [r7]
 8011e34:	4629      	mov	r1, r5
 8011e36:	00cb      	lsls	r3, r1, #3
 8011e38:	4621      	mov	r1, r4
 8011e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011e3e:	4621      	mov	r1, r4
 8011e40:	00ca      	lsls	r2, r1, #3
 8011e42:	4610      	mov	r0, r2
 8011e44:	4619      	mov	r1, r3
 8011e46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8011e4a:	f04f 0300 	mov.w	r3, #0
 8011e4e:	f7ee faaf 	bl	80003b0 <__aeabi_uldivmod>
 8011e52:	4602      	mov	r2, r0
 8011e54:	460b      	mov	r3, r1
 8011e56:	b292      	uxth	r2, r2
 8011e58:	e000      	b.n	8011e5c <prvTCPNextTimeout+0x300>
 8011e5a:	2201      	movs	r2, #1
 8011e5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e5e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8011e62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011e64:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8011e68:	4618      	mov	r0, r3
 8011e6a:	3758      	adds	r7, #88	@ 0x58
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e72:	bf00      	nop
 8011e74:	08026930 	.word	0x08026930

08011e78 <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8011e78:	b4b0      	push	{r4, r5, r7}
 8011e7a:	b08b      	sub	sp, #44	@ 0x2c
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
 8011e80:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8011e82:	683b      	ldr	r3, [r7, #0]
 8011e84:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8011e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e88:	899b      	ldrh	r3, [r3, #12]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011e90:	4293      	cmp	r3, r2
 8011e92:	d10e      	bne.n	8011eb2 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	330e      	adds	r3, #14
 8011e98:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011e9e:	69fb      	ldr	r3, [r7, #28]
 8011ea0:	3308      	adds	r3, #8
 8011ea2:	f107 0408 	add.w	r4, r7, #8
 8011ea6:	6818      	ldr	r0, [r3, #0]
 8011ea8:	6859      	ldr	r1, [r3, #4]
 8011eaa:	689a      	ldr	r2, [r3, #8]
 8011eac:	68db      	ldr	r3, [r3, #12]
 8011eae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011eb0:	e018      	b.n	8011ee4 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	330e      	adds	r3, #14
 8011eb6:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011ebc:	6a3b      	ldr	r3, [r7, #32]
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	061a      	lsls	r2, r3, #24
 8011ec2:	6a3b      	ldr	r3, [r7, #32]
 8011ec4:	68db      	ldr	r3, [r3, #12]
 8011ec6:	021b      	lsls	r3, r3, #8
 8011ec8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011ecc:	431a      	orrs	r2, r3
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	68db      	ldr	r3, [r3, #12]
 8011ed2:	0a1b      	lsrs	r3, r3, #8
 8011ed4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011ed8:	431a      	orrs	r2, r3
 8011eda:	6a3b      	ldr	r3, [r7, #32]
 8011edc:	68db      	ldr	r3, [r3, #12]
 8011ede:	0e1b      	lsrs	r3, r3, #24
 8011ee0:	4313      	orrs	r3, r2
 8011ee2:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	461d      	mov	r5, r3
 8011ee8:	f107 0408 	add.w	r4, r7, #8
 8011eec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011eee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011ef0:	6823      	ldr	r3, [r4, #0]
 8011ef2:	602b      	str	r3, [r5, #0]
    }
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	372c      	adds	r7, #44	@ 0x2c
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bcb0      	pop	{r4, r5, r7}
 8011efc:	4770      	bx	lr
	...

08011f00 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8011f00:	b5b0      	push	{r4, r5, r7, lr}
 8011f02:	b096      	sub	sp, #88	@ 0x58
 8011f04:	af04      	add	r7, sp, #16
 8011f06:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 8011f08:	2301      	movs	r3, #1
 8011f0a:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d104      	bne.n	8011f1c <xProcessReceivedTCPPacket+0x1c>
 8011f12:	f240 21f7 	movw	r1, #759	@ 0x2f7
 8011f16:	4898      	ldr	r0, [pc, #608]	@ (8012178 <xProcessReceivedTCPPacket+0x278>)
 8011f18:	f7ef fd3e 	bl	8001998 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d104      	bne.n	8011f2e <xProcessReceivedTCPPacket+0x2e>
 8011f24:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8011f28:	4893      	ldr	r0, [pc, #588]	@ (8012178 <xProcessReceivedTCPPacket+0x278>)
 8011f2a:	f7ef fd35 	bl	8001998 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011f32:	69fb      	ldr	r3, [r7, #28]
 8011f34:	4618      	mov	r0, r3
 8011f36:	f7f8 fa37 	bl	800a3a8 <uxIPHeaderSizePacket>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	330e      	adds	r3, #14
 8011f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8011f40:	69fb      	ldr	r3, [r7, #28]
 8011f42:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011f44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f46:	3314      	adds	r3, #20
 8011f48:	429a      	cmp	r2, r3
 8011f4a:	d202      	bcs.n	8011f52 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8011f50:	e191      	b.n	8012276 <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8011f52:	69fb      	ldr	r3, [r7, #28]
 8011f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 8011f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011f58:	4413      	add	r3, r2
 8011f5a:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f5e:	7b5b      	ldrb	r3, [r3, #13]
 8011f60:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8011f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f64:	885b      	ldrh	r3, [r3, #2]
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	021b      	lsls	r3, r3, #8
 8011f6a:	b21a      	sxth	r2, r3
 8011f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f6e:	885b      	ldrh	r3, [r3, #2]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	0a1b      	lsrs	r3, r3, #8
 8011f74:	b29b      	uxth	r3, r3
 8011f76:	b21b      	sxth	r3, r3
 8011f78:	4313      	orrs	r3, r2
 8011f7a:	b21b      	sxth	r3, r3
 8011f7c:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8011f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f80:	881b      	ldrh	r3, [r3, #0]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	021b      	lsls	r3, r3, #8
 8011f86:	b21a      	sxth	r2, r3
 8011f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f8a:	881b      	ldrh	r3, [r3, #0]
 8011f8c:	b29b      	uxth	r3, r3
 8011f8e:	0a1b      	lsrs	r3, r3, #8
 8011f90:	b29b      	uxth	r3, r3
 8011f92:	b21b      	sxth	r3, r3
 8011f94:	4313      	orrs	r3, r2
 8011f96:	b21b      	sxth	r3, r3
 8011f98:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8011f9a:	69fb      	ldr	r3, [r7, #28]
 8011f9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f9e:	f107 0308 	add.w	r3, r7, #8
 8011fa2:	4611      	mov	r1, r2
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7ff ff67 	bl	8011e78 <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 8011faa:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8011fac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011fae:	9303      	str	r3, [sp, #12]
 8011fb0:	466c      	mov	r4, sp
 8011fb2:	f107 0310 	add.w	r3, r7, #16
 8011fb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011fbe:	f107 0308 	add.w	r3, r7, #8
 8011fc2:	cb0c      	ldmia	r3, {r2, r3}
 8011fc4:	4629      	mov	r1, r5
 8011fc6:	2000      	movs	r0, #0
 8011fc8:	f7fe fbc2 	bl	8010750 <pxTCPSocketLookup>
 8011fcc:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8011fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d008      	beq.n	8011fe6 <xProcessReceivedTCPPacket+0xe6>
 8011fd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011fd6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011fda:	4618      	mov	r0, r3
 8011fdc:	f000 fc92 	bl	8012904 <prvTCPSocketIsActive>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d116      	bne.n	8012014 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 8011fe6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8011fe8:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8011fea:	4619      	mov	r1, r3
 8011fec:	4863      	ldr	r0, [pc, #396]	@ (801217c <xProcessReceivedTCPPacket+0x27c>)
 8011fee:	f010 fbb1 	bl	8022754 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011ff2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011ff4:	f003 031f 	and.w	r3, r3, #31
 8011ff8:	2b10      	cmp	r3, #16
 8011ffa:	d008      	beq.n	801200e <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8011ffc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011ffe:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8012002:	2b00      	cmp	r3, #0
 8012004:	d103      	bne.n	801200e <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012006:	69fb      	ldr	r3, [r7, #28]
 8012008:	4618      	mov	r0, r3
 801200a:	f002 fd0b 	bl	8014a24 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 801200e:	2300      	movs	r3, #0
 8012010:	647b      	str	r3, [r7, #68]	@ 0x44
 8012012:	e0d6      	b.n	80121c2 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8012014:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012016:	2200      	movs	r2, #0
 8012018:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 801201c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801201e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012022:	2b01      	cmp	r3, #1
 8012024:	d127      	bne.n	8012076 <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8012026:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012028:	f003 031f 	and.w	r3, r3, #31
 801202c:	2b02      	cmp	r3, #2
 801202e:	d015      	beq.n	801205c <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8012030:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012032:	4618      	mov	r0, r3
 8012034:	f003 fbbe 	bl	80157b4 <prvTCPFlagMeaning>
 8012038:	4601      	mov	r1, r0
 801203a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801203c:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801203e:	4850      	ldr	r0, [pc, #320]	@ (8012180 <xProcessReceivedTCPPacket+0x280>)
 8012040:	f010 fb88 	bl	8022754 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8012044:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012046:	f003 0304 	and.w	r3, r3, #4
 801204a:	2b00      	cmp	r3, #0
 801204c:	d103      	bne.n	8012056 <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 801204e:	69fb      	ldr	r3, [r7, #28]
 8012050:	4618      	mov	r0, r3
 8012052:	f002 fce7 	bl	8014a24 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 8012056:	2300      	movs	r3, #0
 8012058:	647b      	str	r3, [r7, #68]	@ 0x44
 801205a:	e0b2      	b.n	80121c2 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 801205c:	69fb      	ldr	r3, [r7, #28]
 801205e:	4619      	mov	r1, r3
 8012060:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012062:	f001 f999 	bl	8013398 <prvHandleListen>
 8012066:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 8012068:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801206a:	2b00      	cmp	r3, #0
 801206c:	f040 80a9 	bne.w	80121c2 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8012070:	2300      	movs	r3, #0
 8012072:	647b      	str	r3, [r7, #68]	@ 0x44
 8012074:	e0a5      	b.n	80121c2 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8012076:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012078:	f003 0304 	and.w	r3, r3, #4
 801207c:	2b00      	cmp	r3, #0
 801207e:	d068      	beq.n	8012152 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8012080:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012082:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8012084:	4619      	mov	r1, r3
 8012086:	483f      	ldr	r0, [pc, #252]	@ (8012184 <xProcessReceivedTCPPacket+0x284>)
 8012088:	f010 fb64 	bl	8022754 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 801208c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801208e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012092:	2b02      	cmp	r3, #2
 8012094:	d11f      	bne.n	80120d6 <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012098:	689b      	ldr	r3, [r3, #8]
 801209a:	061a      	lsls	r2, r3, #24
 801209c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	021b      	lsls	r3, r3, #8
 80120a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80120a6:	431a      	orrs	r2, r3
 80120a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120aa:	689b      	ldr	r3, [r3, #8]
 80120ac:	0a1b      	lsrs	r3, r3, #8
 80120ae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80120b2:	431a      	orrs	r2, r3
 80120b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	0e1b      	lsrs	r3, r3, #24
 80120ba:	4313      	orrs	r3, r2
 80120bc:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 80120be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80120c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 80120c4:	3301      	adds	r3, #1
 80120c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d13f      	bne.n	801214c <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 80120cc:	2100      	movs	r1, #0
 80120ce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80120d0:	f7ff fb34 	bl	801173c <vTCPStateChange>
 80120d4:	e03a      	b.n	801214c <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80120d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120d8:	685b      	ldr	r3, [r3, #4]
 80120da:	061a      	lsls	r2, r3, #24
 80120dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	021b      	lsls	r3, r3, #8
 80120e2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80120e6:	431a      	orrs	r2, r3
 80120e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120ea:	685b      	ldr	r3, [r3, #4]
 80120ec:	0a1b      	lsrs	r3, r3, #8
 80120ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80120f2:	431a      	orrs	r2, r3
 80120f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80120f6:	685b      	ldr	r3, [r3, #4]
 80120f8:	0e1b      	lsrs	r3, r3, #24
 80120fa:	4313      	orrs	r3, r2
 80120fc:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 80120fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012100:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8012104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012106:	429a      	cmp	r2, r3
 8012108:	d104      	bne.n	8012114 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 801210a:	2100      	movs	r1, #0
 801210c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801210e:	f7ff fb15 	bl	801173c <vTCPStateChange>
 8012112:	e01b      	b.n	801214c <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012114:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012116:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 801211a:	4619      	mov	r1, r3
 801211c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801211e:	f003 fc82 	bl	8015a26 <xSequenceGreaterThan>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d011      	beq.n	801214c <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012128:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801212a:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 801212e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012130:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8012134:	4413      	add	r3, r2
 8012136:	4619      	mov	r1, r3
 8012138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801213a:	f003 fc5e 	bl	80159fa <xSequenceLessThan>
 801213e:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8012140:	2b00      	cmp	r3, #0
 8012142:	d003      	beq.n	801214c <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	4618      	mov	r0, r3
 8012148:	f002 fc5f 	bl	8014a0a <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 801214c:	2300      	movs	r3, #0
 801214e:	647b      	str	r3, [r7, #68]	@ 0x44
 8012150:	e037      	b.n	80121c2 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8012152:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012154:	f003 031f 	and.w	r3, r3, #31
 8012158:	2b02      	cmp	r3, #2
 801215a:	d117      	bne.n	801218c <xProcessReceivedTCPPacket+0x28c>
 801215c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801215e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012162:	2b04      	cmp	r3, #4
 8012164:	d912      	bls.n	801218c <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 8012166:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8012168:	4619      	mov	r1, r3
 801216a:	4807      	ldr	r0, [pc, #28]	@ (8012188 <xProcessReceivedTCPPacket+0x288>)
 801216c:	f010 faf2 	bl	8022754 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8012170:	2300      	movs	r3, #0
 8012172:	647b      	str	r3, [r7, #68]	@ 0x44
 8012174:	e025      	b.n	80121c2 <xProcessReceivedTCPPacket+0x2c2>
 8012176:	bf00      	nop
 8012178:	08026824 	.word	0x08026824
 801217c:	0802695c 	.word	0x0802695c
 8012180:	08026984 	.word	0x08026984
 8012184:	080269bc 	.word	0x080269bc
 8012188:	080269e0 	.word	0x080269e0
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 801218c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801218e:	f7f8 f925 	bl	800a3dc <uxIPHeaderSizeSocket>
 8012192:	4603      	mov	r3, r0
 8012194:	330e      	adds	r3, #14
 8012196:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8012198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801219a:	33a0      	adds	r3, #160	@ 0xa0
 801219c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801219e:	4413      	add	r3, r2
 80121a0:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 80121a4:	69fb      	ldr	r3, [r7, #28]
 80121a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121aa:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 80121ac:	2214      	movs	r2, #20
 80121ae:	4619      	mov	r1, r3
 80121b0:	f010 fcec 	bl	8022b8c <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 80121b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121b6:	330d      	adds	r3, #13
 80121b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80121ba:	4413      	add	r3, r2
 80121bc:	2210      	movs	r2, #16
 80121be:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 80121c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d056      	beq.n	8012276 <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 80121c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d104      	bne.n	80121d8 <xProcessReceivedTCPPacket+0x2d8>
 80121ce:	f240 319e 	movw	r1, #926	@ 0x39e
 80121d2:	482b      	ldr	r0, [pc, #172]	@ (8012280 <xProcessReceivedTCPPacket+0x380>)
 80121d4:	f7ef fbe0 	bl	8001998 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 80121d8:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80121da:	f7ff fa53 	bl	8011684 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 80121de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121e0:	7b1b      	ldrb	r3, [r3, #12]
 80121e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80121e6:	2b50      	cmp	r3, #80	@ 0x50
 80121e8:	d905      	bls.n	80121f6 <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 80121ea:	69fb      	ldr	r3, [r7, #28]
 80121ec:	4619      	mov	r1, r3
 80121ee:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80121f0:	f000 f894 	bl	801231c <prvCheckOptions>
 80121f4:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 80121f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d03c      	beq.n	8012276 <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 80121fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80121fe:	89db      	ldrh	r3, [r3, #14]
 8012200:	b29b      	uxth	r3, r3
 8012202:	021b      	lsls	r3, r3, #8
 8012204:	b21a      	sxth	r2, r3
 8012206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012208:	89db      	ldrh	r3, [r3, #14]
 801220a:	b29b      	uxth	r3, r3
 801220c:	0a1b      	lsrs	r3, r3, #8
 801220e:	b29b      	uxth	r3, r3
 8012210:	b21b      	sxth	r3, r3
 8012212:	4313      	orrs	r3, r2
 8012214:	b21b      	sxth	r3, r3
 8012216:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012218:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801221a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801221c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8012220:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012222:	f003 0302 	and.w	r3, r3, #2
 8012226:	2b00      	cmp	r3, #0
 8012228:	d10a      	bne.n	8012240 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 801222a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801222c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012230:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8012232:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012236:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 801223a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801223c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8012240:	f107 031c 	add.w	r3, r7, #28
 8012244:	4619      	mov	r1, r3
 8012246:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012248:	f000 ff78 	bl	801313c <prvTCPHandleState>
 801224c:	4603      	mov	r3, r0
 801224e:	2b00      	cmp	r3, #0
 8012250:	dd05      	ble.n	801225e <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012252:	f107 031c 	add.w	r3, r7, #28
 8012256:	4619      	mov	r1, r3
 8012258:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801225a:	f001 fc6f 	bl	8013b3c <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 801225e:	69fb      	ldr	r3, [r7, #28]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d005      	beq.n	8012270 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012264:	69fb      	ldr	r3, [r7, #28]
 8012266:	4618      	mov	r0, r3
 8012268:	f005 fbcc 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 801226c:	2300      	movs	r3, #0
 801226e:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8012270:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8012272:	f7ff fc73 	bl	8011b5c <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8012276:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8012278:	4618      	mov	r0, r3
 801227a:	3748      	adds	r7, #72	@ 0x48
 801227c:	46bd      	mov	sp, r7
 801227e:	bdb0      	pop	{r4, r5, r7, pc}
 8012280:	08026824 	.word	0x08026824

08012284 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8012284:	b580      	push	{r7, lr}
 8012286:	b088      	sub	sp, #32
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012290:	021b      	lsls	r3, r3, #8
 8012292:	b21a      	sxth	r2, r3
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012298:	0a1b      	lsrs	r3, r3, #8
 801229a:	b29b      	uxth	r3, r3
 801229c:	b21b      	sxth	r3, r3
 801229e:	4313      	orrs	r3, r2
 80122a0:	b21b      	sxth	r3, r3
 80122a2:	b29b      	uxth	r3, r3
 80122a4:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 80122a6:	2300      	movs	r3, #0
 80122a8:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80122aa:	4b19      	ldr	r3, [pc, #100]	@ (8012310 <xTCPCheckNewClient+0x8c>)
 80122ac:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80122ae:	4b19      	ldr	r3, [pc, #100]	@ (8012314 <xTCPCheckNewClient+0x90>)
 80122b0:	68db      	ldr	r3, [r3, #12]
 80122b2:	61fb      	str	r3, [r7, #28]
 80122b4:	e023      	b.n	80122fe <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 80122b6:	69fb      	ldr	r3, [r7, #28]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	697a      	ldr	r2, [r7, #20]
 80122bc:	429a      	cmp	r2, r3
 80122be:	d11b      	bne.n	80122f8 <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80122c0:	69fb      	ldr	r3, [r7, #28]
 80122c2:	68db      	ldr	r3, [r3, #12]
 80122c4:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80122cc:	2b06      	cmp	r3, #6
 80122ce:	d113      	bne.n	80122f8 <xTCPCheckNewClient+0x74>
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80122d6:	f003 0302 	and.w	r3, r3, #2
 80122da:	b2db      	uxtb	r3, r3
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00b      	beq.n	80122f8 <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80122ea:	4619      	mov	r1, r3
 80122ec:	480a      	ldr	r0, [pc, #40]	@ (8012318 <xTCPCheckNewClient+0x94>)
 80122ee:	f010 fa31 	bl	8022754 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 80122f2:	2301      	movs	r3, #1
 80122f4:	61bb      	str	r3, [r7, #24]
                    break;
 80122f6:	e006      	b.n	8012306 <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	685b      	ldr	r3, [r3, #4]
 80122fc:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 80122fe:	69fa      	ldr	r2, [r7, #28]
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	429a      	cmp	r2, r3
 8012304:	d1d7      	bne.n	80122b6 <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8012306:	69bb      	ldr	r3, [r7, #24]
    }
 8012308:	4618      	mov	r0, r3
 801230a:	3720      	adds	r7, #32
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}
 8012310:	20001610 	.word	0x20001610
 8012314:	20001608 	.word	0x20001608
 8012318:	08026a00 	.word	0x08026a00

0801231c <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801231c:	b580      	push	{r7, lr}
 801231e:	b08c      	sub	sp, #48	@ 0x30
 8012320:	af00      	add	r7, sp, #0
 8012322:	6078      	str	r0, [r7, #4]
 8012324:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8012326:	6838      	ldr	r0, [r7, #0]
 8012328:	f7f8 f83e 	bl	800a3a8 <uxIPHeaderSizePacket>
 801232c:	4603      	mov	r3, r0
 801232e:	330e      	adds	r3, #14
 8012330:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8012332:	683b      	ldr	r3, [r7, #0]
 8012334:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012336:	69fb      	ldr	r3, [r7, #28]
 8012338:	4413      	add	r3, r2
 801233a:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 801233c:	2301      	movs	r3, #1
 801233e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	3314      	adds	r3, #20
 8012344:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 801234a:	693b      	ldr	r3, [r7, #16]
 801234c:	3314      	adds	r3, #20
 801234e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8012350:	693b      	ldr	r3, [r7, #16]
 8012352:	7b1b      	ldrb	r3, [r3, #12]
 8012354:	2b50      	cmp	r3, #80	@ 0x50
 8012356:	d93f      	bls.n	80123d8 <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	7b1b      	ldrb	r3, [r3, #12]
 801235c:	091b      	lsrs	r3, r3, #4
 801235e:	b2db      	uxtb	r3, r3
 8012360:	3b05      	subs	r3, #5
 8012362:	b2db      	uxtb	r3, r3
 8012364:	009b      	lsls	r3, r3, #2
 8012366:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 8012368:	7bfb      	ldrb	r3, [r7, #15]
 801236a:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012370:	697a      	ldr	r2, [r7, #20]
 8012372:	429a      	cmp	r2, r3
 8012374:	d230      	bcs.n	80123d8 <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 8012376:	683b      	ldr	r3, [r7, #0]
 8012378:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801237a:	697b      	ldr	r3, [r7, #20]
 801237c:	1ad3      	subs	r3, r2, r3
 801237e:	6a3a      	ldr	r2, [r7, #32]
 8012380:	429a      	cmp	r2, r3
 8012382:	d829      	bhi.n	80123d8 <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8012384:	693b      	ldr	r3, [r7, #16]
 8012386:	7b5b      	ldrb	r3, [r3, #13]
 8012388:	f003 0302 	and.w	r3, r3, #2
 801238c:	2b00      	cmp	r3, #0
 801238e:	d002      	beq.n	8012396 <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8012390:	2301      	movs	r3, #1
 8012392:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012394:	e001      	b.n	801239a <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8012396:	2300      	movs	r3, #0
 8012398:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 801239a:	6a3b      	ldr	r3, [r7, #32]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d018      	beq.n	80123d2 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 80123a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123a2:	687a      	ldr	r2, [r7, #4]
 80123a4:	6a39      	ldr	r1, [r7, #32]
 80123a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80123a8:	f000 f81c 	bl	80123e4 <prvSingleStepTCPHeaderOptions>
 80123ac:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 80123ae:	68bb      	ldr	r3, [r7, #8]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	da02      	bge.n	80123ba <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 80123b4:	2300      	movs	r3, #0
 80123b6:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 80123b8:	e00e      	b.n	80123d8 <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d00a      	beq.n	80123d6 <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	6a3a      	ldr	r2, [r7, #32]
 80123c4:	1ad3      	subs	r3, r2, r3
 80123c6:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80123cc:	4413      	add	r3, r2
 80123ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 80123d0:	e7e3      	b.n	801239a <prvCheckOptions+0x7e>
                            break;
 80123d2:	bf00      	nop
 80123d4:	e000      	b.n	80123d8 <prvCheckOptions+0xbc>
                            break;
 80123d6:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 80123d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80123da:	4618      	mov	r0, r3
 80123dc:	3730      	adds	r7, #48	@ 0x30
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
	...

080123e4 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 80123e4:	b580      	push	{r7, lr}
 80123e6:	b08a      	sub	sp, #40	@ 0x28
 80123e8:	af00      	add	r7, sp, #0
 80123ea:	60f8      	str	r0, [r7, #12]
 80123ec:	60b9      	str	r1, [r7, #8]
 80123ee:	607a      	str	r2, [r7, #4]
 80123f0:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 80123f6:	2300      	movs	r3, #0
 80123f8:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012400:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8012402:	2300      	movs	r3, #0
 8012404:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	781b      	ldrb	r3, [r3, #0]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d102      	bne.n	8012414 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 801240e:	2300      	movs	r3, #0
 8012410:	61fb      	str	r3, [r7, #28]
 8012412:	e0da      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	781b      	ldrb	r3, [r3, #0]
 8012418:	2b01      	cmp	r3, #1
 801241a:	d102      	bne.n	8012422 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 801241c:	2301      	movs	r3, #1
 801241e:	61fb      	str	r3, [r7, #28]
 8012420:	e0d3      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	2b01      	cmp	r3, #1
 8012426:	d803      	bhi.n	8012430 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8012428:	f04f 33ff 	mov.w	r3, #4294967295
 801242c:	61fb      	str	r3, [r7, #28]
 801242e:	e0cc      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	781b      	ldrb	r3, [r3, #0]
 8012434:	2b03      	cmp	r3, #3
 8012436:	d11e      	bne.n	8012476 <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8012438:	697b      	ldr	r3, [r7, #20]
 801243a:	2b02      	cmp	r3, #2
 801243c:	d904      	bls.n	8012448 <prvSingleStepTCPHeaderOptions+0x64>
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	3301      	adds	r3, #1
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	2b03      	cmp	r3, #3
 8012446:	d003      	beq.n	8012450 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8012448:	f04f 33ff 	mov.w	r3, #4294967295
 801244c:	61fb      	str	r3, [r7, #28]
 801244e:	e0bc      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8012450:	683b      	ldr	r3, [r7, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d00c      	beq.n	8012470 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	3302      	adds	r3, #2
 801245a:	781a      	ldrb	r2, [r3, #0]
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8012462:	687a      	ldr	r2, [r7, #4]
 8012464:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012468:	f043 0310 	orr.w	r3, r3, #16
 801246c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8012470:	2303      	movs	r3, #3
 8012472:	61fb      	str	r3, [r7, #28]
 8012474:	e0a9      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	781b      	ldrb	r3, [r3, #0]
 801247a:	2b02      	cmp	r3, #2
 801247c:	d16d      	bne.n	801255a <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	2b03      	cmp	r3, #3
 8012482:	d904      	bls.n	801248e <prvSingleStepTCPHeaderOptions+0xaa>
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	3301      	adds	r3, #1
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	2b04      	cmp	r3, #4
 801248c:	d003      	beq.n	8012496 <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 801248e:	f04f 33ff 	mov.w	r3, #4294967295
 8012492:	61fb      	str	r3, [r7, #28]
 8012494:	e099      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	3302      	adds	r3, #2
 801249a:	4618      	mov	r0, r3
 801249c:	f7f8 fd31 	bl	800af02 <usChar2u16>
 80124a0:	4603      	mov	r3, r0
 80124a2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80124aa:	461a      	mov	r2, r3
 80124ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124ae:	4293      	cmp	r3, r2
 80124b0:	d010      	beq.n	80124d4 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 80124b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d105      	bne.n	80124c4 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 80124b8:	f04f 33ff 	mov.w	r3, #4294967295
 80124bc:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 80124be:	2301      	movs	r3, #1
 80124c0:	61bb      	str	r3, [r7, #24]
 80124c2:	e007      	b.n	80124d4 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80124ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80124cc:	4619      	mov	r1, r3
 80124ce:	4841      	ldr	r0, [pc, #260]	@ (80125d4 <prvSingleStepTCPHeaderOptions+0x1f0>)
 80124d0:	f010 f940 	bl	8022754 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 80124d4:	69bb      	ldr	r3, [r7, #24]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d177      	bne.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 80124da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124dc:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80124e0:	d202      	bcs.n	80124e8 <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 80124e2:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80124e6:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80124ee:	461a      	mov	r2, r3
 80124f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80124f2:	4293      	cmp	r3, r2
 80124f4:	d22e      	bcs.n	8012554 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80124fc:	f043 0301 	orr.w	r3, r3, #1
 8012500:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801250a:	461a      	mov	r2, r3
 801250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801250e:	4293      	cmp	r3, r2
 8012510:	d207      	bcs.n	8012522 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012518:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801251a:	4619      	mov	r1, r3
 801251c:	482e      	ldr	r0, [pc, #184]	@ (80125d8 <prvSingleStepTCPHeaderOptions+0x1f4>)
 801251e:	f010 f919 	bl	8022754 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8012522:	693b      	ldr	r3, [r7, #16]
 8012524:	685a      	ldr	r2, [r3, #4]
 8012526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012528:	fbb2 f3f3 	udiv	r3, r2, r3
 801252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801252e:	fb03 f202 	mul.w	r2, r3, r2
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8012536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012538:	b29a      	uxth	r2, r3
 801253a:	693b      	ldr	r3, [r7, #16]
 801253c:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8012540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012542:	b29a      	uxth	r2, r3
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 801254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801254c:	b29a      	uxth	r2, r3
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8012554:	2304      	movs	r3, #4
 8012556:	61fb      	str	r3, [r7, #28]
 8012558:	e037      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	3301      	adds	r3, #1
 801255e:	781b      	ldrb	r3, [r3, #0]
 8012560:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8012564:	2300      	movs	r3, #0
 8012566:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8012568:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801256c:	2b01      	cmp	r3, #1
 801256e:	d904      	bls.n	801257a <prvSingleStepTCPHeaderOptions+0x196>
 8012570:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012574:	697a      	ldr	r2, [r7, #20]
 8012576:	429a      	cmp	r2, r3
 8012578:	d203      	bcs.n	8012582 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 801257a:	f04f 33ff 	mov.w	r3, #4294967295
 801257e:	61fb      	str	r3, [r7, #28]
 8012580:	e023      	b.n	80125ca <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	781b      	ldrb	r3, [r3, #0]
 8012586:	2b05      	cmp	r3, #5
 8012588:	d11a      	bne.n	80125c0 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 801258a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801258e:	3b02      	subs	r3, #2
 8012590:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8012594:	69fb      	ldr	r3, [r7, #28]
 8012596:	3302      	adds	r3, #2
 8012598:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 801259a:	e00d      	b.n	80125b8 <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 801259c:	69fb      	ldr	r3, [r7, #28]
 801259e:	687a      	ldr	r2, [r7, #4]
 80125a0:	4619      	mov	r1, r3
 80125a2:	68f8      	ldr	r0, [r7, #12]
 80125a4:	f000 f81a 	bl	80125dc <prvReadSackOption>
                            lIndex += 8;
 80125a8:	69fb      	ldr	r3, [r7, #28]
 80125aa:	3308      	adds	r3, #8
 80125ac:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 80125ae:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125b2:	3b08      	subs	r3, #8
 80125b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 80125b8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125bc:	2b07      	cmp	r3, #7
 80125be:	d8ed      	bhi.n	801259c <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 80125c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80125c4:	69fa      	ldr	r2, [r7, #28]
 80125c6:	4413      	add	r3, r2
 80125c8:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 80125ca:	69fb      	ldr	r3, [r7, #28]
    }
 80125cc:	4618      	mov	r0, r3
 80125ce:	3728      	adds	r7, #40	@ 0x28
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	08026a2c 	.word	0x08026a2c
 80125d8:	08026a44 	.word	0x08026a44

080125dc <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 80125dc:	b580      	push	{r7, lr}
 80125de:	b08a      	sub	sp, #40	@ 0x28
 80125e0:	af02      	add	r7, sp, #8
 80125e2:	60f8      	str	r0, [r7, #12]
 80125e4:	60b9      	str	r1, [r7, #8]
 80125e6:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 80125e8:	68fa      	ldr	r2, [r7, #12]
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	4413      	add	r3, r2
 80125ee:	4618      	mov	r0, r3
 80125f0:	f7f8 fc6c 	bl	800aecc <ulChar2u32>
 80125f4:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	3304      	adds	r3, #4
 80125fa:	68fa      	ldr	r2, [r7, #12]
 80125fc:	4413      	add	r3, r2
 80125fe:	4618      	mov	r0, r3
 8012600:	f7f8 fc64 	bl	800aecc <ulChar2u32>
 8012604:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801260c:	69ba      	ldr	r2, [r7, #24]
 801260e:	69f9      	ldr	r1, [r7, #28]
 8012610:	4618      	mov	r0, r3
 8012612:	f004 fba3 	bl	8016d5c <ulTCPWindowTxSack>
 8012616:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d029      	beq.n	8012676 <prvReadSackOption+0x9a>
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d026      	beq.n	8012676 <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801262e:	2300      	movs	r3, #0
 8012630:	9300      	str	r3, [sp, #0]
 8012632:	697b      	ldr	r3, [r7, #20]
 8012634:	2200      	movs	r2, #0
 8012636:	2100      	movs	r1, #0
 8012638:	f7fe fed9 	bl	80113ee <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	f043 0202 	orr.w	r2, r3, #2
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801264c:	f003 0302 	and.w	r3, r3, #2
 8012650:	2b00      	cmp	r3, #0
 8012652:	d005      	beq.n	8012660 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012666:	2b00      	cmp	r3, #0
 8012668:	d005      	beq.n	8012676 <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012670:	6979      	ldr	r1, [r7, #20]
 8012672:	6878      	ldr	r0, [r7, #4]
 8012674:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 8012676:	bf00      	nop
 8012678:	3720      	adds	r7, #32
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}

0801267e <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 801267e:	b590      	push	{r4, r7, lr}
 8012680:	b08f      	sub	sp, #60	@ 0x3c
 8012682:	af00      	add	r7, sp, #0
 8012684:	6078      	str	r0, [r7, #4]
 8012686:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f7f7 fe8b 	bl	800a3a8 <uxIPHeaderSizePacket>
 8012692:	4603      	mov	r3, r0
 8012694:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012696:	4423      	add	r3, r4
 8012698:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801269a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801269c:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f7f7 fe82 	bl	800a3a8 <uxIPHeaderSizePacket>
 80126a4:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 80126a6:	2300      	movs	r3, #0
 80126a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 80126ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126ae:	7b1b      	ldrb	r3, [r3, #12]
 80126b0:	089b      	lsrs	r3, r3, #2
 80126b2:	b2db      	uxtb	r3, r3
 80126b4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80126b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 80126bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80126c0:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126c6:	69f9      	ldr	r1, [r7, #28]
 80126c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126ca:	440b      	add	r3, r1
 80126cc:	330e      	adds	r3, #14
 80126ce:	441a      	add	r2, r3
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80126d8:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 80126da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80126dc:	3b0e      	subs	r3, #14
 80126de:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126e4:	899b      	ldrh	r3, [r3, #12]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	2b08      	cmp	r3, #8
 80126ea:	d004      	beq.n	80126f6 <prvCheckRxData+0x78>
 80126ec:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80126f0:	4293      	cmp	r3, r2
 80126f2:	d015      	beq.n	8012720 <prvCheckRxData+0xa2>
 80126f4:	e02c      	b.n	8012750 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80126fa:	330e      	adds	r3, #14
 80126fc:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80126fe:	693b      	ldr	r3, [r7, #16]
 8012700:	885b      	ldrh	r3, [r3, #2]
 8012702:	b29b      	uxth	r3, r3
 8012704:	021b      	lsls	r3, r3, #8
 8012706:	b21a      	sxth	r2, r3
 8012708:	693b      	ldr	r3, [r7, #16]
 801270a:	885b      	ldrh	r3, [r3, #2]
 801270c:	b29b      	uxth	r3, r3
 801270e:	0a1b      	lsrs	r3, r3, #8
 8012710:	b29b      	uxth	r3, r3
 8012712:	b21b      	sxth	r3, r3
 8012714:	4313      	orrs	r3, r2
 8012716:	b21b      	sxth	r3, r3
 8012718:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 801271a:	8afb      	ldrh	r3, [r7, #22]
 801271c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801271e:	e01a      	b.n	8012756 <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012724:	330e      	adds	r3, #14
 8012726:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 8012728:	69bb      	ldr	r3, [r7, #24]
 801272a:	889b      	ldrh	r3, [r3, #4]
 801272c:	b29b      	uxth	r3, r3
 801272e:	021b      	lsls	r3, r3, #8
 8012730:	b21a      	sxth	r2, r3
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	889b      	ldrh	r3, [r3, #4]
 8012736:	b29b      	uxth	r3, r3
 8012738:	0a1b      	lsrs	r3, r3, #8
 801273a:	b29b      	uxth	r3, r3
 801273c:	b21b      	sxth	r3, r3
 801273e:	4313      	orrs	r3, r2
 8012740:	b21b      	sxth	r3, r3
 8012742:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8012744:	8afb      	ldrh	r3, [r7, #22]
 8012746:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 8012748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801274a:	3328      	adds	r3, #40	@ 0x28
 801274c:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 801274e:	e002      	b.n	8012756 <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8012750:	2300      	movs	r3, #0
 8012752:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8012754:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 8012756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801275a:	429a      	cmp	r2, r3
 801275c:	dd01      	ble.n	8012762 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 801275e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012760:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8012762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012764:	69fb      	ldr	r3, [r7, #28]
 8012766:	4413      	add	r3, r2
 8012768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801276a:	429a      	cmp	r2, r3
 801276c:	dd06      	ble.n	801277c <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 801276e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012770:	69fb      	ldr	r3, [r7, #28]
 8012772:	4413      	add	r3, r2
 8012774:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012776:	1ad3      	subs	r3, r2, r3
 8012778:	633b      	str	r3, [r7, #48]	@ 0x30
 801277a:	e001      	b.n	8012780 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 801277c:	2300      	movs	r3, #0
 801277e:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8012780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012782:	7b5b      	ldrb	r3, [r3, #13]
 8012784:	f003 0320 	and.w	r3, r3, #32
 8012788:	2b00      	cmp	r3, #0
 801278a:	d01c      	beq.n	80127c6 <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 801278c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801278e:	8a5b      	ldrh	r3, [r3, #18]
 8012790:	b29b      	uxth	r3, r3
 8012792:	021b      	lsls	r3, r3, #8
 8012794:	b21a      	sxth	r2, r3
 8012796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012798:	8a5b      	ldrh	r3, [r3, #18]
 801279a:	b29b      	uxth	r3, r3
 801279c:	0a1b      	lsrs	r3, r3, #8
 801279e:	b29b      	uxth	r3, r3
 80127a0:	b21b      	sxth	r3, r3
 80127a2:	4313      	orrs	r3, r2
 80127a4:	b21b      	sxth	r3, r3
 80127a6:	b29b      	uxth	r3, r3
 80127a8:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 80127aa:	683b      	ldr	r3, [r7, #0]
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	441a      	add	r2, r3
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 80127b6:	68f9      	ldr	r1, [r7, #12]
 80127b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80127ba:	f7f8 fb33 	bl	800ae24 <FreeRTOS_min_int32>
 80127be:	4602      	mov	r2, r0
 80127c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127c2:	1a9b      	subs	r3, r3, r2
 80127c4:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 80127c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 80127c8:	4618      	mov	r0, r3
 80127ca:	373c      	adds	r7, #60	@ 0x3c
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd90      	pop	{r4, r7, pc}

080127d0 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 80127d0:	b580      	push	{r7, lr}
 80127d2:	b092      	sub	sp, #72	@ 0x48
 80127d4:	af02      	add	r7, sp, #8
 80127d6:	60f8      	str	r0, [r7, #12]
 80127d8:	60b9      	str	r1, [r7, #8]
 80127da:	607a      	str	r2, [r7, #4]
 80127dc:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7f7 fde2 	bl	800a3a8 <uxIPHeaderSizePacket>
 80127e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ec:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80127ee:	4413      	add	r3, r2
 80127f0:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80127f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127f4:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80127fc:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 80127fe:	2300      	movs	r3, #0
 8012800:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 8012806:	68bb      	ldr	r3, [r7, #8]
 8012808:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801280a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801280c:	685b      	ldr	r3, [r3, #4]
 801280e:	061a      	lsls	r2, r3, #24
 8012810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012812:	685b      	ldr	r3, [r3, #4]
 8012814:	021b      	lsls	r3, r3, #8
 8012816:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801281a:	431a      	orrs	r2, r3
 801281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	0a1b      	lsrs	r3, r3, #8
 8012822:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012826:	431a      	orrs	r2, r3
 8012828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	0e1b      	lsrs	r3, r3, #24
 801282e:	4313      	orrs	r3, r2
 8012830:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8012832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012834:	2b00      	cmp	r3, #0
 8012836:	d057      	beq.n	80128e8 <prvStoreRxData+0x118>
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801283e:	2b03      	cmp	r3, #3
 8012840:	d952      	bls.n	80128e8 <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8012842:	2300      	movs	r3, #0
 8012844:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801284c:	2b00      	cmp	r3, #0
 801284e:	d007      	beq.n	8012860 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012856:	4618      	mov	r0, r3
 8012858:	f7fe fc89 	bl	801116e <uxStreamBufferGetSpace>
 801285c:	63f8      	str	r0, [r7, #60]	@ 0x3c
 801285e:	e003      	b.n	8012868 <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012866:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 8012868:	f107 0310 	add.w	r3, r7, #16
 801286c:	9300      	str	r3, [sp, #0]
 801286e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012870:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012872:	69f9      	ldr	r1, [r7, #28]
 8012874:	6a38      	ldr	r0, [r7, #32]
 8012876:	f003 fd45 	bl	8016304 <lTCPWindowRxCheck>
 801287a:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 801287c:	69bb      	ldr	r3, [r7, #24]
 801287e:	2b00      	cmp	r3, #0
 8012880:	db20      	blt.n	80128c4 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8012882:	693b      	ldr	r3, [r7, #16]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d007      	beq.n	8012898 <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 8012888:	693b      	ldr	r3, [r7, #16]
 801288a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801288c:	1ad3      	subs	r3, r2, r3
 801288e:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	68ba      	ldr	r2, [r7, #8]
 8012894:	4413      	add	r3, r2
 8012896:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 8012898:	69b9      	ldr	r1, [r7, #24]
 801289a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801289c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801289e:	68f8      	ldr	r0, [r7, #12]
 80128a0:	f7fe f8d2 	bl	8010a48 <lTCPAddRxdata>
 80128a4:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 80128a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80128a8:	697a      	ldr	r2, [r7, #20]
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d00a      	beq.n	80128c4 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 80128ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80128b0:	6979      	ldr	r1, [r7, #20]
 80128b2:	4813      	ldr	r0, [pc, #76]	@ (8012900 <prvStoreRxData+0x130>)
 80128b4:	f00f ff4e 	bl	8022754 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f002 f8b3 	bl	8014a24 <prvTCPSendReset>
                    xResult = -1;
 80128be:	f04f 33ff 	mov.w	r3, #4294967295
 80128c2:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 80128c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d113      	bne.n	80128f2 <prvStoreRxData+0x122>
 80128ca:	6a3b      	ldr	r3, [r7, #32]
 80128cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00f      	beq.n	80128f2 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 80128d2:	6a3b      	ldr	r3, [r7, #32]
 80128d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80128d6:	2200      	movs	r2, #0
 80128d8:	2100      	movs	r1, #0
 80128da:	68f8      	ldr	r0, [r7, #12]
 80128dc:	f7fe f8b4 	bl	8010a48 <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 80128e0:	6a3b      	ldr	r3, [r7, #32]
 80128e2:	2200      	movs	r2, #0
 80128e4:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 80128e6:	e004      	b.n	80128f2 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 80128e8:	6a3b      	ldr	r3, [r7, #32]
 80128ea:	2200      	movs	r2, #0
 80128ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80128f0:	e000      	b.n	80128f4 <prvStoreRxData+0x124>
        {
 80128f2:	bf00      	nop
        }

        return xResult;
 80128f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 80128f6:	4618      	mov	r0, r3
 80128f8:	3740      	adds	r7, #64	@ 0x40
 80128fa:	46bd      	mov	sp, r7
 80128fc:	bd80      	pop	{r7, pc}
 80128fe:	bf00      	nop
 8012900:	08026a5c 	.word	0x08026a5c

08012904 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 8012904:	b480      	push	{r7}
 8012906:	b085      	sub	sp, #20
 8012908:	af00      	add	r7, sp, #0
 801290a:	4603      	mov	r3, r0
 801290c:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 801290e:	79fb      	ldrb	r3, [r7, #7]
 8012910:	2b0b      	cmp	r3, #11
 8012912:	bf8c      	ite	hi
 8012914:	2201      	movhi	r2, #1
 8012916:	2200      	movls	r2, #0
 8012918:	b2d2      	uxtb	r2, r2
 801291a:	2a00      	cmp	r2, #0
 801291c:	d10f      	bne.n	801293e <prvTCPSocketIsActive+0x3a>
 801291e:	f640 3281 	movw	r2, #2945	@ 0xb81
 8012922:	fa22 f303 	lsr.w	r3, r2, r3
 8012926:	f003 0301 	and.w	r3, r3, #1
 801292a:	2b00      	cmp	r3, #0
 801292c:	bf14      	ite	ne
 801292e:	2301      	movne	r3, #1
 8012930:	2300      	moveq	r3, #0
 8012932:	b2db      	uxtb	r3, r3
 8012934:	2b00      	cmp	r3, #0
 8012936:	d002      	beq.n	801293e <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 8012938:	2300      	movs	r3, #0
 801293a:	60fb      	str	r3, [r7, #12]
                break;
 801293c:	e002      	b.n	8012944 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 801293e:	2301      	movs	r3, #1
 8012940:	60fb      	str	r3, [r7, #12]
                break;
 8012942:	bf00      	nop
        }

        return xResult;
 8012944:	68fb      	ldr	r3, [r7, #12]
    }
 8012946:	4618      	mov	r0, r3
 8012948:	3714      	adds	r7, #20
 801294a:	46bd      	mov	sp, r7
 801294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012950:	4770      	bx	lr
	...

08012954 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8012954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012956:	b089      	sub	sp, #36	@ 0x24
 8012958:	af02      	add	r7, sp, #8
 801295a:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012962:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8012964:	7cfb      	ldrb	r3, [r7, #19]
 8012966:	2b08      	cmp	r3, #8
 8012968:	d00b      	beq.n	8012982 <prvTCPStatusAgeCheck+0x2e>
 801296a:	2b08      	cmp	r3, #8
 801296c:	dc0c      	bgt.n	8012988 <prvTCPStatusAgeCheck+0x34>
 801296e:	2b01      	cmp	r3, #1
 8012970:	dc02      	bgt.n	8012978 <prvTCPStatusAgeCheck+0x24>
 8012972:	2b00      	cmp	r3, #0
 8012974:	da05      	bge.n	8012982 <prvTCPStatusAgeCheck+0x2e>
 8012976:	e007      	b.n	8012988 <prvTCPStatusAgeCheck+0x34>
 8012978:	2b05      	cmp	r3, #5
 801297a:	d105      	bne.n	8012988 <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 801297c:	2300      	movs	r3, #0
 801297e:	617b      	str	r3, [r7, #20]
                    break;
 8012980:	e005      	b.n	801298e <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8012982:	2300      	movs	r3, #0
 8012984:	617b      	str	r3, [r7, #20]
                    break;
 8012986:	e002      	b.n	801298e <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 8012988:	2301      	movs	r3, #1
 801298a:	617b      	str	r3, [r7, #20]
                    break;
 801298c:	bf00      	nop
            }

            if( xResult != pdFALSE )
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d032      	beq.n	80129fa <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8012994:	f7f2 f96e 	bl	8004c74 <xTaskGetTickCount>
 8012998:	4602      	mov	r2, r0
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80129a0:	1ad3      	subs	r3, r2, r3
 80129a2:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f247 5230 	movw	r2, #30000	@ 0x7530
 80129aa:	4293      	cmp	r3, r2
 80129ac:	d925      	bls.n	80129fa <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80129b2:	461d      	mov	r5, r3
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80129be:	461e      	mov	r6, r3
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80129c6:	4618      	mov	r0, r3
 80129c8:	f000 fdca 	bl	8013560 <FreeRTOS_GetTCPStateName>
 80129cc:	4603      	mov	r3, r0
 80129ce:	9300      	str	r3, [sp, #0]
 80129d0:	4633      	mov	r3, r6
 80129d2:	4622      	mov	r2, r4
 80129d4:	4629      	mov	r1, r5
 80129d6:	480b      	ldr	r0, [pc, #44]	@ (8012a04 <prvTCPStatusAgeCheck+0xb0>)
 80129d8:	f00f febc 	bl	8022754 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80129dc:	2108      	movs	r1, #8
 80129de:	6878      	ldr	r0, [r7, #4]
 80129e0:	f7fe feac 	bl	801173c <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80129ea:	f003 0304 	and.w	r3, r3, #4
 80129ee:	b2db      	uxtb	r3, r3
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d002      	beq.n	80129fa <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 80129f4:	f04f 33ff 	mov.w	r3, #4294967295
 80129f8:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 80129fa:	697b      	ldr	r3, [r7, #20]
        }
 80129fc:	4618      	mov	r0, r3
 80129fe:	371c      	adds	r7, #28
 8012a00:	46bd      	mov	sp, r7
 8012a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a04:	08026a84 	.word	0x08026a84

08012a08 <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012a08:	b5b0      	push	{r4, r5, r7, lr}
 8012a0a:	b08a      	sub	sp, #40	@ 0x28
 8012a0c:	af02      	add	r7, sp, #8
 8012a0e:	6078      	str	r0, [r7, #4]
 8012a10:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012a16:	6838      	ldr	r0, [r7, #0]
 8012a18:	f7f7 fcc6 	bl	800a3a8 <uxIPHeaderSizePacket>
 8012a1c:	4603      	mov	r3, r0
 8012a1e:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012a20:	4423      	add	r3, r4
 8012a22:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012a24:	69bb      	ldr	r3, [r7, #24]
 8012a26:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	74fb      	strb	r3, [r7, #19]
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	7b5b      	ldrb	r3, [r3, #13]
 8012a30:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012a38:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8012a3e:	697b      	ldr	r3, [r7, #20]
 8012a40:	689b      	ldr	r3, [r3, #8]
 8012a42:	061a      	lsls	r2, r3, #24
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	689b      	ldr	r3, [r3, #8]
 8012a48:	021b      	lsls	r3, r3, #8
 8012a4a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012a4e:	431a      	orrs	r2, r3
 8012a50:	697b      	ldr	r3, [r7, #20]
 8012a52:	689b      	ldr	r3, [r3, #8]
 8012a54:	0a1b      	lsrs	r3, r3, #8
 8012a56:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012a5a:	431a      	orrs	r2, r3
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	689b      	ldr	r3, [r3, #8]
 8012a60:	0e1b      	lsrs	r3, r3, #24
 8012a62:	4313      	orrs	r3, r2
 8012a64:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 8012a66:	7cbb      	ldrb	r3, [r7, #18]
 8012a68:	f003 0301 	and.w	r3, r3, #1
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d004      	beq.n	8012a7a <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	695b      	ldr	r3, [r3, #20]
 8012a74:	1c5a      	adds	r2, r3, #1
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a84:	b2db      	uxtb	r3, r3
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d10b      	bne.n	8012aa2 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	6a1a      	ldr	r2, [r3, #32]
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012a92:	687a      	ldr	r2, [r7, #4]
 8012a94:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012a9c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012aa0:	e00c      	b.n	8012abc <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012aa6:	3301      	adds	r3, #1
 8012aa8:	68ba      	ldr	r2, [r7, #8]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d106      	bne.n	8012abc <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012ab4:	f043 0301 	orr.w	r3, r3, #1
 8012ab8:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012ac2:	f003 0301 	and.w	r3, r3, #1
 8012ac6:	b2db      	uxtb	r3, r3
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d10b      	bne.n	8012ae4 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8012ad4:	697b      	ldr	r3, [r7, #20]
 8012ad6:	2211      	movs	r2, #17
 8012ad8:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 8012ada:	210a      	movs	r1, #10
 8012adc:	6878      	ldr	r0, [r7, #4]
 8012ade:	f7fe fe2d 	bl	801173c <vTCPStateChange>
 8012ae2:	e023      	b.n	8012b2c <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ae8:	1c5a      	adds	r2, r3, #1
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012af4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012af8:	b2db      	uxtb	r3, r3
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d103      	bne.n	8012b06 <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	2200      	movs	r2, #0
 8012b02:	735a      	strb	r2, [r3, #13]
 8012b04:	e012      	b.n	8012b2c <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012b0c:	f003 0302 	and.w	r3, r3, #2
 8012b10:	b2db      	uxtb	r3, r3
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d103      	bne.n	8012b1e <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012b16:	697b      	ldr	r3, [r7, #20]
 8012b18:	2210      	movs	r2, #16
 8012b1a:	735a      	strb	r2, [r3, #13]
 8012b1c:	e002      	b.n	8012b24 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 8012b1e:	697b      	ldr	r3, [r7, #20]
 8012b20:	2200      	movs	r2, #0
 8012b22:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012b24:	2108      	movs	r1, #8
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f7fe fe08 	bl	801173c <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	6a1a      	ldr	r2, [r3, #32]
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	7b5b      	ldrb	r3, [r3, #13]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d00d      	beq.n	8012b58 <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8012b3c:	6878      	ldr	r0, [r7, #4]
 8012b3e:	f7f7 fc4d 	bl	800a3dc <uxIPHeaderSizeSocket>
 8012b42:	4603      	mov	r3, r0
 8012b44:	b2da      	uxtb	r2, r3
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012b4c:	4413      	add	r3, r2
 8012b4e:	b2db      	uxtb	r3, r3
 8012b50:	3314      	adds	r3, #20
 8012b52:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8012b54:	7cfb      	ldrb	r3, [r7, #19]
 8012b56:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012b5e:	3314      	adds	r3, #20
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	009b      	lsls	r3, r3, #2
 8012b64:	b2da      	uxtb	r2, r3
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 8012b6a:	4b14      	ldr	r3, [pc, #80]	@ (8012bbc <prvTCPHandleFin+0x1b4>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d01f      	beq.n	8012bb2 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	69db      	ldr	r3, [r3, #28]
 8012b76:	68ba      	ldr	r2, [r7, #8]
 8012b78:	1ad0      	subs	r0, r2, r3
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	6a1a      	ldr	r2, [r3, #32]
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	69db      	ldr	r3, [r3, #28]
 8012b82:	1ad4      	subs	r4, r2, r3
 8012b84:	68fb      	ldr	r3, [r7, #12]
 8012b86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	69db      	ldr	r3, [r3, #28]
 8012b8c:	1ad5      	subs	r5, r2, r3
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	69db      	ldr	r3, [r3, #28]
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	6911      	ldr	r1, [r2, #16]
 8012b9c:	68fa      	ldr	r2, [r7, #12]
 8012b9e:	68d2      	ldr	r2, [r2, #12]
 8012ba0:	1a8a      	subs	r2, r1, r2
 8012ba2:	9201      	str	r2, [sp, #4]
 8012ba4:	9300      	str	r3, [sp, #0]
 8012ba6:	462b      	mov	r3, r5
 8012ba8:	4622      	mov	r2, r4
 8012baa:	4601      	mov	r1, r0
 8012bac:	4804      	ldr	r0, [pc, #16]	@ (8012bc0 <prvTCPHandleFin+0x1b8>)
 8012bae:	f00f fdd1 	bl	8022754 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8012bb2:	69fb      	ldr	r3, [r7, #28]
    }
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	3720      	adds	r7, #32
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	bdb0      	pop	{r4, r5, r7, pc}
 8012bbc:	2000164c 	.word	0x2000164c
 8012bc0:	08026abc 	.word	0x08026abc

08012bc4 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012bc4:	b590      	push	{r4, r7, lr}
 8012bc6:	b09b      	sub	sp, #108	@ 0x6c
 8012bc8:	af02      	add	r7, sp, #8
 8012bca:	60f8      	str	r0, [r7, #12]
 8012bcc:	60b9      	str	r1, [r7, #8]
 8012bce:	607a      	str	r2, [r7, #4]
 8012bd0:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012bd2:	68bb      	ldr	r3, [r7, #8]
 8012bd4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012bd6:	68f8      	ldr	r0, [r7, #12]
 8012bd8:	f7f7 fc00 	bl	800a3dc <uxIPHeaderSizeSocket>
 8012bdc:	4603      	mov	r3, r0
 8012bde:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012be0:	4423      	add	r3, r4
 8012be2:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012be4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012be6:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bf2:	7b5b      	ldrb	r3, [r3, #13]
 8012bf4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8012bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012bfa:	685b      	ldr	r3, [r3, #4]
 8012bfc:	061a      	lsls	r2, r3, #24
 8012bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	021b      	lsls	r3, r3, #8
 8012c04:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012c08:	431a      	orrs	r2, r3
 8012c0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c0c:	685b      	ldr	r3, [r3, #4]
 8012c0e:	0a1b      	lsrs	r3, r3, #8
 8012c10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012c14:	431a      	orrs	r2, r3
 8012c16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	0e1b      	lsrs	r3, r3, #24
 8012c1c:	4313      	orrs	r3, r2
 8012c1e:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 8012c20:	2300      	movs	r3, #0
 8012c22:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 8012c24:	2300      	movs	r3, #0
 8012c26:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 8012c28:	2310      	movs	r3, #16
 8012c2a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 8012c2e:	2317      	movs	r3, #23
 8012c30:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012c3a:	2b02      	cmp	r3, #2
 8012c3c:	d105      	bne.n	8012c4a <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8012c3e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8012c42:	f043 0302 	orr.w	r3, r3, #2
 8012c46:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8012c4a:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8012c4e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8012c52:	4013      	ands	r3, r2
 8012c54:	b2db      	uxtb	r3, r3
 8012c56:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d044      	beq.n	8012ce8 <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012c64:	2b04      	cmp	r3, #4
 8012c66:	d101      	bne.n	8012c6c <prvHandleSynReceived+0xa8>
 8012c68:	4977      	ldr	r1, [pc, #476]	@ (8012e48 <prvHandleSynReceived+0x284>)
 8012c6a:	e000      	b.n	8012c6e <prvHandleSynReceived+0xaa>
 8012c6c:	4977      	ldr	r1, [pc, #476]	@ (8012e4c <prvHandleSynReceived+0x288>)
 8012c6e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012c72:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8012c76:	4876      	ldr	r0, [pc, #472]	@ (8012e50 <prvHandleSynReceived+0x28c>)
 8012c78:	f00f fd6c 	bl	8022754 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012c7c:	2108      	movs	r1, #8
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f7fe fd5c 	bl	801173c <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c86:	689b      	ldr	r3, [r3, #8]
 8012c88:	061a      	lsls	r2, r3, #24
 8012c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	021b      	lsls	r3, r3, #8
 8012c90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012c94:	431a      	orrs	r2, r3
 8012c96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012c98:	689b      	ldr	r3, [r3, #8]
 8012c9a:	0a1b      	lsrs	r3, r3, #8
 8012c9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012ca0:	431a      	orrs	r2, r3
 8012ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ca4:	689b      	ldr	r3, [r3, #8]
 8012ca6:	0e1b      	lsrs	r3, r3, #24
 8012ca8:	431a      	orrs	r2, r3
 8012caa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cac:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012cae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012cb2:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8012cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cb6:	7b5b      	ldrb	r3, [r3, #13]
 8012cb8:	f043 0304 	orr.w	r3, r3, #4
 8012cbc:	b2da      	uxtb	r2, r3
 8012cbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012cc0:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012cc2:	68f8      	ldr	r0, [r7, #12]
 8012cc4:	f7f7 fb8a 	bl	800a3dc <uxIPHeaderSizeSocket>
 8012cc8:	4602      	mov	r2, r0
 8012cca:	683b      	ldr	r3, [r7, #0]
 8012ccc:	4413      	add	r3, r2
 8012cce:	3314      	adds	r3, #20
 8012cd0:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012cd4:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	b2db      	uxtb	r3, r3
 8012cda:	3314      	adds	r3, #20
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	009b      	lsls	r3, r3, #2
 8012ce0:	b2da      	uxtb	r2, r3
 8012ce2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012ce4:	731a      	strb	r2, [r3, #12]
 8012ce6:	e0aa      	b.n	8012e3e <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cf0:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8012cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cfa:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012d04:	2b02      	cmp	r3, #2
 8012d06:	d12e      	bne.n	8012d66 <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012d08:	68f8      	ldr	r0, [r7, #12]
 8012d0a:	f7f7 fb67 	bl	800a3dc <uxIPHeaderSizeSocket>
 8012d0e:	4603      	mov	r3, r0
 8012d10:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8012d12:	33a0      	adds	r3, #160	@ 0xa0
 8012d14:	68fa      	ldr	r2, [r7, #12]
 8012d16:	4413      	add	r3, r2
 8012d18:	330a      	adds	r3, #10
 8012d1a:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d1e:	2210      	movs	r2, #16
 8012d20:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8012d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8012d24:	2210      	movs	r2, #16
 8012d26:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8012d3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8012d3c:	f003 f8ec 	bl	8015f18 <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d42:	1c5a      	adds	r2, r3, #1
 8012d44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d46:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d4a:	1c5a      	adds	r2, r3, #1
 8012d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d4e:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8012d50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d52:	6a1b      	ldr	r3, [r3, #32]
 8012d54:	1c5a      	adds	r2, r3, #1
 8012d56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d58:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8012d5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012d5e:	1c5a      	adds	r2, r3, #1
 8012d60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d62:	635a      	str	r2, [r3, #52]	@ 0x34
 8012d64:	e005      	b.n	8012d72 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d102      	bne.n	8012d72 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012d70:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d74:	69db      	ldr	r3, [r3, #28]
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d7a:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	7a1b      	ldrb	r3, [r3, #8]
 8012d80:	f003 0301 	and.w	r3, r3, #1
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d001      	beq.n	8012d8e <prvHandleSynReceived+0x1ca>
 8012d8a:	200a      	movs	r0, #10
 8012d8c:	e000      	b.n	8012d90 <prvHandleSynReceived+0x1cc>
 8012d8e:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012d96:	f107 0210 	add.w	r2, r7, #16
 8012d9a:	2328      	movs	r3, #40	@ 0x28
 8012d9c:	f7fc fda2 	bl	800f8e4 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012da0:	68fb      	ldr	r3, [r7, #12]
 8012da2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012da6:	2b02      	cmp	r3, #2
 8012da8:	d101      	bne.n	8012dae <prvHandleSynReceived+0x1ea>
 8012daa:	492a      	ldr	r1, [pc, #168]	@ (8012e54 <prvHandleSynReceived+0x290>)
 8012dac:	e000      	b.n	8012db0 <prvHandleSynReceived+0x1ec>
 8012dae:	492a      	ldr	r1, [pc, #168]	@ (8012e58 <prvHandleSynReceived+0x294>)
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012db4:	461c      	mov	r4, r3
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012dc4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f107 0310 	add.w	r3, r7, #16
 8012dd0:	9001      	str	r0, [sp, #4]
 8012dd2:	9200      	str	r2, [sp, #0]
 8012dd4:	4622      	mov	r2, r4
 8012dd6:	4821      	ldr	r0, [pc, #132]	@ (8012e5c <prvHandleSynReceived+0x298>)
 8012dd8:	f00f fcbc 	bl	8022754 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012de2:	2b02      	cmp	r3, #2
 8012de4:	d002      	beq.n	8012dec <prvHandleSynReceived+0x228>
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d014      	beq.n	8012e16 <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012dec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012dee:	2210      	movs	r2, #16
 8012df0:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012df2:	68f8      	ldr	r0, [r7, #12]
 8012df4:	f7f7 faf2 	bl	800a3dc <uxIPHeaderSizeSocket>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	683b      	ldr	r3, [r7, #0]
 8012dfc:	4413      	add	r3, r2
 8012dfe:	3314      	adds	r3, #20
 8012e00:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012e02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e04:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	b2db      	uxtb	r3, r3
 8012e0a:	3314      	adds	r3, #20
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	b2da      	uxtb	r2, r3
 8012e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012e14:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012e1c:	f003 0310 	and.w	r3, r3, #16
 8012e20:	b2db      	uxtb	r3, r3
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d107      	bne.n	8012e36 <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	2200      	movs	r2, #0
 8012e2a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	2200      	movs	r2, #0
 8012e32:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8012e36:	2105      	movs	r1, #5
 8012e38:	68f8      	ldr	r0, [r7, #12]
 8012e3a:	f7fe fc7f 	bl	801173c <vTCPStateChange>
        }

        return xSendLength;
 8012e3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8012e40:	4618      	mov	r0, r3
 8012e42:	3764      	adds	r7, #100	@ 0x64
 8012e44:	46bd      	mov	sp, r7
 8012e46:	bd90      	pop	{r4, r7, pc}
 8012e48:	08026afc 	.word	0x08026afc
 8012e4c:	08026b0c 	.word	0x08026b0c
 8012e50:	08026b1c 	.word	0x08026b1c
 8012e54:	08026b40 	.word	0x08026b40
 8012e58:	08026b48 	.word	0x08026b48
 8012e5c:	08026b50 	.word	0x08026b50

08012e60 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012e60:	b590      	push	{r4, r7, lr}
 8012e62:	b097      	sub	sp, #92	@ 0x5c
 8012e64:	af02      	add	r7, sp, #8
 8012e66:	60f8      	str	r0, [r7, #12]
 8012e68:	60b9      	str	r1, [r7, #8]
 8012e6a:	607a      	str	r2, [r7, #4]
 8012e6c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012e6e:	68bb      	ldr	r3, [r7, #8]
 8012e70:	681b      	ldr	r3, [r3, #0]
 8012e72:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012e74:	68f8      	ldr	r0, [r7, #12]
 8012e76:	f7f7 fab1 	bl	800a3dc <uxIPHeaderSizeSocket>
 8012e7a:	4603      	mov	r3, r0
 8012e7c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012e7e:	4423      	add	r3, r4
 8012e80:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012e84:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e90:	7b5b      	ldrb	r3, [r3, #13]
 8012e92:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8012e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	061a      	lsls	r2, r3, #24
 8012e9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	021b      	lsls	r3, r3, #8
 8012ea2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ea6:	431a      	orrs	r2, r3
 8012ea8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	0a1b      	lsrs	r3, r3, #8
 8012eae:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012eb2:	431a      	orrs	r2, r3
 8012eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012eb6:	685b      	ldr	r3, [r3, #4]
 8012eb8:	0e1b      	lsrs	r3, r3, #24
 8012eba:	4313      	orrs	r3, r2
 8012ebc:	637b      	str	r3, [r7, #52]	@ 0x34
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8012ec6:	2300      	movs	r3, #0
 8012ec8:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 8012eca:	2300      	movs	r3, #0
 8012ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012ece:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012ed0:	89db      	ldrh	r3, [r3, #14]
 8012ed2:	b29b      	uxth	r3, r3
 8012ed4:	021b      	lsls	r3, r3, #8
 8012ed6:	b21a      	sxth	r2, r3
 8012ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012eda:	89db      	ldrh	r3, [r3, #14]
 8012edc:	b29b      	uxth	r3, r3
 8012ede:	0a1b      	lsrs	r3, r3, #8
 8012ee0:	b29b      	uxth	r3, r3
 8012ee2:	b21b      	sxth	r3, r3
 8012ee4:	4313      	orrs	r3, r2
 8012ee6:	b21b      	sxth	r3, r3
 8012ee8:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8012eea:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012ef2:	68fb      	ldr	r3, [r7, #12]
 8012ef4:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012ef8:	68fa      	ldr	r2, [r7, #12]
 8012efa:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8012efe:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 8012f08:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012f0c:	f003 0310 	and.w	r3, r3, #16
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	f000 8106 	beq.w	8013122 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 8012f16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f18:	689b      	ldr	r3, [r3, #8]
 8012f1a:	061a      	lsls	r2, r3, #24
 8012f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	021b      	lsls	r3, r3, #8
 8012f22:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f26:	431a      	orrs	r2, r3
 8012f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f2a:	689b      	ldr	r3, [r3, #8]
 8012f2c:	0a1b      	lsrs	r3, r3, #8
 8012f2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f32:	431a      	orrs	r2, r3
 8012f34:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012f36:	689b      	ldr	r3, [r3, #8]
 8012f38:	0e1b      	lsrs	r3, r3, #24
 8012f3a:	4313      	orrs	r3, r2
 8012f3c:	4619      	mov	r1, r3
 8012f3e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012f40:	f003 feee 	bl	8016d20 <ulTCPWindowTxAck>
 8012f44:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d02c      	beq.n	8012faa <prvHandleEstablished+0x14a>
 8012f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	d029      	beq.n	8012faa <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 8012f56:	68fb      	ldr	r3, [r7, #12]
 8012f58:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012f5c:	2300      	movs	r3, #0
 8012f5e:	9300      	str	r3, [sp, #0]
 8012f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f62:	2200      	movs	r2, #0
 8012f64:	2100      	movs	r1, #0
 8012f66:	f7fe fa42 	bl	80113ee <uxStreamBufferGet>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d01c      	beq.n	8012faa <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	f043 0202 	orr.w	r2, r3, #2
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012f80:	f003 0302 	and.w	r3, r3, #2
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d005      	beq.n	8012f94 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d005      	beq.n	8012faa <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012fa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012fa6:	68f8      	ldr	r0, [r7, #12]
 8012fa8:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d002      	beq.n	8012fba <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8012fb4:	68f8      	ldr	r0, [r7, #12]
 8012fb6:	f001 fb13 	bl	80145e0 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012fba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012fbc:	6a1a      	ldr	r2, [r3, #32]
 8012fbe:	68fb      	ldr	r3, [r7, #12]
 8012fc0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012fca:	f003 0320 	and.w	r3, r3, #32
 8012fce:	b2db      	uxtb	r3, r3
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d105      	bne.n	8012fe0 <prvHandleEstablished+0x180>
 8012fd4:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8012fd8:	f003 0301 	and.w	r3, r3, #1
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d06b      	beq.n	80130b8 <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8012fe0:	2301      	movs	r3, #1
 8012fe2:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012fea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d13a      	bne.n	801306a <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8012ff4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012ff6:	f002 fe87 	bl	8015d08 <xTCPWindowRxEmpty>
 8012ffa:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8012ffc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8012ffe:	f003 fafd 	bl	80165fc <xTCPWindowTxDone>
 8013002:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8013004:	6a3b      	ldr	r3, [r7, #32]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d002      	beq.n	8013010 <prvHandleEstablished+0x1b0>
 801300a:	69fb      	ldr	r3, [r7, #28]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d10f      	bne.n	8013030 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013014:	4619      	mov	r1, r3
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801301c:	461a      	mov	r2, r3
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	9300      	str	r3, [sp, #0]
 8013022:	6a3b      	ldr	r3, [r7, #32]
 8013024:	4841      	ldr	r0, [pc, #260]	@ (801312c <prvHandleEstablished+0x2cc>)
 8013026:	f00f fb95 	bl	8022754 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 801302a:	2300      	movs	r3, #0
 801302c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801302e:	e01c      	b.n	801306a <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8013030:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	441a      	add	r2, r3
 8013036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013038:	691b      	ldr	r3, [r3, #16]
 801303a:	1ad3      	subs	r3, r2, r3
 801303c:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 801303e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013040:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8013042:	69bb      	ldr	r3, [r7, #24]
 8013044:	2b01      	cmp	r3, #1
 8013046:	dd10      	ble.n	801306a <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 8013048:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801304a:	691a      	ldr	r2, [r3, #16]
 801304c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801304e:	68db      	ldr	r3, [r3, #12]
 8013050:	1ad1      	subs	r1, r2, r3
 8013052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013054:	699a      	ldr	r2, [r3, #24]
 8013056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013058:	68db      	ldr	r3, [r3, #12]
 801305a:	1ad3      	subs	r3, r2, r3
 801305c:	460a      	mov	r2, r1
 801305e:	69b9      	ldr	r1, [r7, #24]
 8013060:	4833      	ldr	r0, [pc, #204]	@ (8013130 <prvHandleEstablished+0x2d0>)
 8013062:	f00f fb77 	bl	8022754 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 8013066:	2300      	movs	r3, #0
 8013068:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 801306a:	4b32      	ldr	r3, [pc, #200]	@ (8013134 <prvHandleEstablished+0x2d4>)
 801306c:	681b      	ldr	r3, [r3, #0]
 801306e:	2b00      	cmp	r3, #0
 8013070:	dd11      	ble.n	8013096 <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013078:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801307a:	1ad1      	subs	r1, r2, r3
 801307c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801307e:	6a1a      	ldr	r2, [r3, #32]
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8013086:	1ad3      	subs	r3, r2, r3
 8013088:	9300      	str	r3, [sp, #0]
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	460a      	mov	r2, r1
 801308e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8013090:	4829      	ldr	r0, [pc, #164]	@ (8013138 <prvHandleEstablished+0x2d8>)
 8013092:	f00f fb5f 	bl	8022754 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 8013096:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8013098:	2b00      	cmp	r3, #0
 801309a:	d00d      	beq.n	80130b8 <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 801309c:	68fa      	ldr	r2, [r7, #12]
 801309e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80130a2:	f043 0320 	orr.w	r3, r3, #32
 80130a6:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	4619      	mov	r1, r3
 80130b0:	68f8      	ldr	r0, [r7, #12]
 80130b2:	f7ff fca9 	bl	8012a08 <prvTCPHandleFin>
 80130b6:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 80130b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d131      	bne.n	8013122 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80130be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130c0:	2210      	movs	r2, #16
 80130c2:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d01d      	beq.n	8013106 <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80130ca:	68f8      	ldr	r0, [r7, #12]
 80130cc:	f7f7 f986 	bl	800a3dc <uxIPHeaderSizeSocket>
 80130d0:	4602      	mov	r2, r0
 80130d2:	683b      	ldr	r3, [r7, #0]
 80130d4:	4413      	add	r3, r2
 80130d6:	3314      	adds	r3, #20
 80130d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 80130da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	b2db      	uxtb	r3, r3
 80130e2:	3314      	adds	r3, #20
 80130e4:	b2db      	uxtb	r3, r3
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	b2da      	uxtb	r2, r3
 80130ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80130ec:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80130f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80130f8:	b2db      	uxtb	r3, r3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d003      	beq.n	8013106 <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 80130fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013100:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013104:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8013106:	683b      	ldr	r3, [r7, #0]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d10a      	bne.n	8013122 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 801310c:	683a      	ldr	r2, [r7, #0]
 801310e:	68b9      	ldr	r1, [r7, #8]
 8013110:	68f8      	ldr	r0, [r7, #12]
 8013112:	f001 f8a1 	bl	8014258 <prvTCPPrepareSend>
 8013116:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8013118:	697b      	ldr	r3, [r7, #20]
 801311a:	2b00      	cmp	r3, #0
 801311c:	dd01      	ble.n	8013122 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8013122:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013124:	4618      	mov	r0, r3
 8013126:	3754      	adds	r7, #84	@ 0x54
 8013128:	46bd      	mov	sp, r7
 801312a:	bd90      	pop	{r4, r7, pc}
 801312c:	08026b84 	.word	0x08026b84
 8013130:	08026bb0 	.word	0x08026bb0
 8013134:	2000164c 	.word	0x2000164c
 8013138:	08026be4 	.word	0x08026be4

0801313c <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 801313c:	b590      	push	{r4, r7, lr}
 801313e:	b08f      	sub	sp, #60	@ 0x3c
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801314c:	683b      	ldr	r3, [r7, #0]
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	4618      	mov	r0, r3
 8013152:	f7f7 f929 	bl	800a3a8 <uxIPHeaderSizePacket>
 8013156:	4603      	mov	r3, r0
 8013158:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801315a:	4423      	add	r3, r4
 801315c:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801315e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013160:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8013162:	2300      	movs	r3, #0
 8013164:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8013166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013168:	685b      	ldr	r3, [r3, #4]
 801316a:	061a      	lsls	r2, r3, #24
 801316c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801316e:	685b      	ldr	r3, [r3, #4]
 8013170:	021b      	lsls	r3, r3, #8
 8013172:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013176:	431a      	orrs	r2, r3
 8013178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801317a:	685b      	ldr	r3, [r3, #4]
 801317c:	0a1b      	lsrs	r3, r3, #8
 801317e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013182:	431a      	orrs	r2, r3
 8013184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013186:	685b      	ldr	r3, [r3, #4]
 8013188:	0e1b      	lsrs	r3, r3, #24
 801318a:	4313      	orrs	r3, r2
 801318c:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 801318e:	2300      	movs	r3, #0
 8013190:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8013192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013194:	7b5b      	ldrb	r3, [r3, #13]
 8013196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80131a0:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 80131a2:	2300      	movs	r3, #0
 80131a4:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 80131a6:	683b      	ldr	r3, [r7, #0]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	f107 0208 	add.w	r2, r7, #8
 80131ae:	4611      	mov	r1, r2
 80131b0:	4618      	mov	r0, r3
 80131b2:	f7ff fa64 	bl	801267e <prvCheckRxData>
 80131b6:	4603      	mov	r3, r0
 80131b8:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80131c0:	2b04      	cmp	r3, #4
 80131c2:	d90c      	bls.n	80131de <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 80131c4:	69fb      	ldr	r3, [r7, #28]
 80131c6:	691a      	ldr	r2, [r3, #16]
 80131c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ca:	3301      	adds	r3, #1
 80131cc:	429a      	cmp	r2, r3
 80131ce:	d106      	bne.n	80131de <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80131d0:	687a      	ldr	r2, [r7, #4]
 80131d2:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80131d6:	f043 0301 	orr.w	r3, r3, #1
 80131da:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 80131de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	441a      	add	r2, r3
 80131e4:	69fb      	ldr	r3, [r7, #28]
 80131e6:	699b      	ldr	r3, [r3, #24]
 80131e8:	1ad3      	subs	r3, r2, r3
 80131ea:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	dd04      	ble.n	80131fc <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 80131f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	441a      	add	r2, r3
 80131f8:	69fb      	ldr	r3, [r7, #28]
 80131fa:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 80131fc:	68b9      	ldr	r1, [r7, #8]
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f7ff fae3 	bl	80127d0 <prvStoreRxData>
 801320a:	4603      	mov	r3, r0
 801320c:	2b00      	cmp	r3, #0
 801320e:	da03      	bge.n	8013218 <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8013210:	f04f 33ff 	mov.w	r3, #4294967295
 8013214:	637b      	str	r3, [r7, #52]	@ 0x34
 8013216:	e0ae      	b.n	8013376 <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	4619      	mov	r1, r3
 801321e:	6878      	ldr	r0, [r7, #4]
 8013220:	f001 fa0c 	bl	801463c <prvSetOptions>
 8013224:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801322c:	2b04      	cmp	r3, #4
 801322e:	d10c      	bne.n	801324a <prvTCPHandleState+0x10e>
 8013230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013234:	f003 031f 	and.w	r3, r3, #31
 8013238:	2b02      	cmp	r3, #2
 801323a:	d106      	bne.n	801324a <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 801323c:	4855      	ldr	r0, [pc, #340]	@ (8013394 <prvTCPHandleState+0x258>)
 801323e:	f00f fa89 	bl	8022754 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8013242:	2103      	movs	r1, #3
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f7fe fa79 	bl	801173c <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801324a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801324e:	f003 0301 	and.w	r3, r3, #1
 8013252:	2b00      	cmp	r3, #0
 8013254:	d022      	beq.n	801329c <prvTCPHandleState+0x160>
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801325c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013260:	b2db      	uxtb	r3, r3
 8013262:	2b00      	cmp	r3, #0
 8013264:	d11a      	bne.n	801329c <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8013266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013268:	697b      	ldr	r3, [r7, #20]
 801326a:	441a      	add	r2, r3
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013276:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801327a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013288:	b2db      	uxtb	r3, r3
 801328a:	2b00      	cmp	r3, #0
 801328c:	d106      	bne.n	801329c <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 801328e:	687a      	ldr	r2, [r7, #4]
 8013290:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8013294:	f043 0302 	orr.w	r3, r3, #2
 8013298:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80132a2:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 80132a4:	7bfb      	ldrb	r3, [r7, #15]
 80132a6:	2b0b      	cmp	r3, #11
 80132a8:	d864      	bhi.n	8013374 <prvTCPHandleState+0x238>
 80132aa:	a201      	add	r2, pc, #4	@ (adr r2, 80132b0 <prvTCPHandleState+0x174>)
 80132ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80132b0:	08013375 	.word	0x08013375
 80132b4:	08013375 	.word	0x08013375
 80132b8:	08013343 	.word	0x08013343
 80132bc:	080132e1 	.word	0x080132e1
 80132c0:	08013343 	.word	0x08013343
 80132c4:	08013355 	.word	0x08013355
 80132c8:	08013365 	.word	0x08013365
 80132cc:	08013365 	.word	0x08013365
 80132d0:	08013375 	.word	0x08013375
 80132d4:	08013375 	.word	0x08013375
 80132d8:	08013365 	.word	0x08013365
 80132dc:	08013375 	.word	0x08013375
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 80132e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80132e2:	6878      	ldr	r0, [r7, #4]
 80132e4:	f000 fe4e 	bl	8013f84 <prvSetSynAckOptions>
 80132e8:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 80132ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132ec:	2212      	movs	r2, #18
 80132ee:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7f7 f873 	bl	800a3dc <uxIPHeaderSizeSocket>
 80132f6:	4602      	mov	r2, r0
 80132f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80132fa:	4413      	add	r3, r2
 80132fc:	3314      	adds	r3, #20
 80132fe:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8013300:	69bb      	ldr	r3, [r7, #24]
 8013302:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013306:	b2db      	uxtb	r3, r3
 8013308:	3314      	adds	r3, #20
 801330a:	b2db      	uxtb	r3, r3
 801330c:	009b      	lsls	r3, r3, #2
 801330e:	b2da      	uxtb	r2, r3
 8013310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013312:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8013314:	2104      	movs	r1, #4
 8013316:	6878      	ldr	r0, [r7, #4]
 8013318:	f7fe fa10 	bl	801173c <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 801331c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801331e:	1c5a      	adds	r2, r3, #1
 8013320:	69fb      	ldr	r3, [r7, #28]
 8013322:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8013324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013326:	1c5a      	adds	r2, r3, #1
 8013328:	69fb      	ldr	r3, [r7, #28]
 801332a:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	69db      	ldr	r3, [r3, #28]
 8013330:	1c5a      	adds	r2, r3, #1
 8013332:	69fb      	ldr	r3, [r7, #28]
 8013334:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8013336:	69fb      	ldr	r3, [r7, #28]
 8013338:	69db      	ldr	r3, [r3, #28]
 801333a:	1c5a      	adds	r2, r3, #1
 801333c:	69fb      	ldr	r3, [r7, #28]
 801333e:	621a      	str	r2, [r3, #32]
                    break;
 8013340:	e019      	b.n	8013376 <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	6819      	ldr	r1, [r3, #0]
 8013346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013348:	697a      	ldr	r2, [r7, #20]
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f7ff fc3a 	bl	8012bc4 <prvHandleSynReceived>
 8013350:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013352:	e010      	b.n	8013376 <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8013354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013356:	697a      	ldr	r2, [r7, #20]
 8013358:	6839      	ldr	r1, [r7, #0]
 801335a:	6878      	ldr	r0, [r7, #4]
 801335c:	f7ff fd80 	bl	8012e60 <prvHandleEstablished>
 8013360:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013362:	e008      	b.n	8013376 <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	681b      	ldr	r3, [r3, #0]
 8013368:	4619      	mov	r1, r3
 801336a:	6878      	ldr	r0, [r7, #4]
 801336c:	f7ff fb4c 	bl	8012a08 <prvTCPHandleFin>
 8013370:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8013372:	e000      	b.n	8013376 <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8013374:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 8013376:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013378:	2b00      	cmp	r3, #0
 801337a:	dd06      	ble.n	801338a <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 801337c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801337e:	697a      	ldr	r2, [r7, #20]
 8013380:	6839      	ldr	r1, [r7, #0]
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f001 fa1a 	bl	80147bc <prvSendData>
 8013388:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 801338a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801338c:	4618      	mov	r0, r3
 801338e:	373c      	adds	r7, #60	@ 0x3c
 8013390:	46bd      	mov	sp, r7
 8013392:	bd90      	pop	{r4, r7, pc}
 8013394:	08026c1c 	.word	0x08026c1c

08013398 <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013398:	b580      	push	{r7, lr}
 801339a:	b084      	sub	sp, #16
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 80133a2:	2300      	movs	r3, #0
 80133a4:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80133a6:	6838      	ldr	r0, [r7, #0]
 80133a8:	f7f6 fffe 	bl	800a3a8 <uxIPHeaderSizePacket>
 80133ac:	4603      	mov	r3, r0
 80133ae:	2b14      	cmp	r3, #20
 80133b0:	d002      	beq.n	80133b8 <prvHandleListen+0x20>
 80133b2:	2b28      	cmp	r3, #40	@ 0x28
 80133b4:	d006      	beq.n	80133c4 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 80133b6:	e00b      	b.n	80133d0 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 80133b8:	6839      	ldr	r1, [r7, #0]
 80133ba:	6878      	ldr	r0, [r7, #4]
 80133bc:	f000 f8ee 	bl	801359c <prvHandleListen_IPV4>
 80133c0:	60f8      	str	r0, [r7, #12]
                    break;
 80133c2:	e005      	b.n	80133d0 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f000 fa10 	bl	80137ec <prvHandleListen_IPV6>
 80133cc:	60f8      	str	r0, [r7, #12]
                    break;
 80133ce:	bf00      	nop
        }

        return pxNewSocket;
 80133d0:	68fb      	ldr	r3, [r7, #12]
    }
 80133d2:	4618      	mov	r0, r3
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 80133dc:	b590      	push	{r4, r7, lr}
 80133de:	b08f      	sub	sp, #60	@ 0x3c
 80133e0:	af04      	add	r7, sp, #16
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	6a1a      	ldr	r2, [r3, #32]
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 801344a:	683b      	ldr	r3, [r7, #0]
 801344c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 801346a:	683b      	ldr	r3, [r7, #0]
 801346c:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801347a:	2b00      	cmp	r3, #0
 801347c:	d009      	beq.n	8013492 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801348a:	f043 0205 	orr.w	r2, r3, #5
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8013492:	f107 030c 	add.w	r3, r7, #12
 8013496:	4619      	mov	r1, r3
 8013498:	6838      	ldr	r0, [r7, #0]
 801349a:	f7fc fa47 	bl	800f92c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80134a4:	f043 0304 	orr.w	r3, r3, #4
 80134a8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	683a      	ldr	r2, [r7, #0]
 80134b0:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80134b8:	3301      	adds	r3, #1
 80134ba:	b29a      	uxth	r2, r3
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d102      	bne.n	80134d0 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	687a      	ldr	r2, [r7, #4]
 80134ce:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80134d4:	4619      	mov	r1, r3
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80134dc:	4618      	mov	r0, r3
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80134e4:	461c      	mov	r4, r3
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80134ec:	2b01      	cmp	r3, #1
 80134ee:	d101      	bne.n	80134f4 <prvTCPSocketCopy+0x118>
 80134f0:	4a17      	ldr	r2, [pc, #92]	@ (8013550 <prvTCPSocketCopy+0x174>)
 80134f2:	e000      	b.n	80134f6 <prvTCPSocketCopy+0x11a>
 80134f4:	4a17      	ldr	r2, [pc, #92]	@ (8013554 <prvTCPSocketCopy+0x178>)
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d002      	beq.n	8013502 <prvTCPSocketCopy+0x126>
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013500:	e000      	b.n	8013504 <prvTCPSocketCopy+0x128>
 8013502:	2300      	movs	r3, #0
 8013504:	9303      	str	r3, [sp, #12]
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	9302      	str	r3, [sp, #8]
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	9301      	str	r3, [sp, #4]
 801350e:	9200      	str	r2, [sp, #0]
 8013510:	4623      	mov	r3, r4
 8013512:	4602      	mov	r2, r0
 8013514:	4810      	ldr	r0, [pc, #64]	@ (8013558 <prvTCPSocketCopy+0x17c>)
 8013516:	f00f f91d 	bl	8022754 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 801351a:	f107 010c 	add.w	r1, r7, #12
 801351e:	2301      	movs	r3, #1
 8013520:	2218      	movs	r2, #24
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f7fb fbae 	bl	800ec84 <vSocketBind>
 8013528:	4603      	mov	r3, r0
 801352a:	2b00      	cmp	r3, #0
 801352c:	d008      	beq.n	8013540 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 801352e:	480b      	ldr	r0, [pc, #44]	@ (801355c <prvTCPSocketCopy+0x180>)
 8013530:	f00f f910 	bl	8022754 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7fb fc59 	bl	800edec <vSocketClose>
            xResult = pdFALSE;
 801353a:	2300      	movs	r3, #0
 801353c:	627b      	str	r3, [r7, #36]	@ 0x24
 801353e:	e001      	b.n	8013544 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8013540:	2301      	movs	r3, #1
 8013542:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8013544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8013546:	4618      	mov	r0, r3
 8013548:	372c      	adds	r7, #44	@ 0x2c
 801354a:	46bd      	mov	sp, r7
 801354c:	bd90      	pop	{r4, r7, pc}
 801354e:	bf00      	nop
 8013550:	08026c5c 	.word	0x08026c5c
 8013554:	08026c60 	.word	0x08026c60
 8013558:	08026c64 	.word	0x08026c64
 801355c:	08026ca8 	.word	0x08026ca8

08013560 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8013560:	b480      	push	{r7}
 8013562:	b085      	sub	sp, #20
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	2b00      	cmp	r3, #0
 8013570:	db02      	blt.n	8013578 <FreeRTOS_GetTCPStateName+0x18>
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	2b0c      	cmp	r3, #12
 8013576:	dd04      	ble.n	8013582 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8013578:	230d      	movs	r3, #13
 801357a:	60fb      	str	r3, [r7, #12]
                xIndex--;
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	3b01      	subs	r3, #1
 8013580:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8013582:	4a05      	ldr	r2, [pc, #20]	@ (8013598 <FreeRTOS_GetTCPStateName+0x38>)
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 801358a:	4618      	mov	r0, r3
 801358c:	3714      	adds	r7, #20
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr
 8013596:	bf00      	nop
 8013598:	08027f7c 	.word	0x08027f7c

0801359c <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 801359c:	b590      	push	{r4, r7, lr}
 801359e:	b08f      	sub	sp, #60	@ 0x3c
 80135a0:	af02      	add	r7, sp, #8
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 80135a6:	2300      	movs	r3, #0
 80135a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80135aa:	2300      	movs	r3, #0
 80135ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 80135ae:	2300      	movs	r3, #0
 80135b0:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 80135b2:	2300      	movs	r3, #0
 80135b4:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 80135b6:	2300      	movs	r3, #0
 80135b8:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d008      	beq.n	80135d2 <prvHandleListen_IPV4+0x36>
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d005      	beq.n	80135d2 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80135ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 80135cc:	683b      	ldr	r3, [r7, #0]
 80135ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80135d0:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 80135d2:	6a3b      	ldr	r3, [r7, #32]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d015      	beq.n	8013604 <prvHandleListen_IPV4+0x68>
 80135d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135da:	f8d3 201e 	ldr.w	r2, [r3, #30]
 80135de:	6a3b      	ldr	r3, [r7, #32]
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d10e      	bne.n	8013604 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80135e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135e8:	f8d3 001e 	ldr.w	r0, [r3, #30]
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 80135f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f2:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 80135f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80135f8:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80135fa:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80135fc:	f7ee f9ec 	bl	80019d8 <ulApplicationGetNextSequenceNumber>
 8013600:	6278      	str	r0, [r7, #36]	@ 0x24
 8013602:	e001      	b.n	8013608 <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8013604:	2300      	movs	r3, #0
 8013606:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8013608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801360a:	2b00      	cmp	r3, #0
 801360c:	d059      	beq.n	80136c2 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013614:	f003 0308 	and.w	r3, r3, #8
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b00      	cmp	r3, #0
 801361c:	d00c      	beq.n	8013638 <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013622:	687a      	ldr	r2, [r7, #4]
 8013624:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013628:	f043 0304 	orr.w	r3, r3, #4
 801362c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	687a      	ldr	r2, [r7, #4]
 8013634:	67da      	str	r2, [r3, #124]	@ 0x7c
 8013636:	e044      	b.n	80136c2 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8013638:	2300      	movs	r3, #0
 801363a:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013648:	429a      	cmp	r2, r3
 801364a:	d31b      	bcc.n	8013684 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013650:	4619      	mov	r1, r3
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013658:	461a      	mov	r2, r3
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013660:	4618      	mov	r0, r3
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8013668:	2b01      	cmp	r3, #1
 801366a:	d101      	bne.n	8013670 <prvHandleListen_IPV4+0xd4>
 801366c:	4b5b      	ldr	r3, [pc, #364]	@ (80137dc <prvHandleListen_IPV4+0x240>)
 801366e:	e000      	b.n	8013672 <prvHandleListen_IPV4+0xd6>
 8013670:	4b5b      	ldr	r3, [pc, #364]	@ (80137e0 <prvHandleListen_IPV4+0x244>)
 8013672:	9300      	str	r3, [sp, #0]
 8013674:	4603      	mov	r3, r0
 8013676:	485b      	ldr	r0, [pc, #364]	@ (80137e4 <prvHandleListen_IPV4+0x248>)
 8013678:	f00f f86c 	bl	8022754 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 801367c:	6838      	ldr	r0, [r7, #0]
 801367e:	f001 f9d1 	bl	8014a24 <prvTCPSendReset>
 8013682:	e01e      	b.n	80136c2 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8013684:	2206      	movs	r2, #6
 8013686:	2101      	movs	r1, #1
 8013688:	2002      	movs	r0, #2
 801368a:	f7fa ffa1 	bl	800e5d0 <FreeRTOS_socket>
 801368e:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d003      	beq.n	801369e <prvHandleListen_IPV4+0x102>
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	f1b3 3fff 	cmp.w	r3, #4294967295
 801369c:	d106      	bne.n	80136ac <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 801369e:	4852      	ldr	r0, [pc, #328]	@ (80137e8 <prvHandleListen_IPV4+0x24c>)
 80136a0:	f00f f858 	bl	8022754 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80136a4:	6838      	ldr	r0, [r7, #0]
 80136a6:	f001 f9bd 	bl	8014a24 <prvTCPSendReset>
 80136aa:	e00a      	b.n	80136c2 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80136ac:	6879      	ldr	r1, [r7, #4]
 80136ae:	6978      	ldr	r0, [r7, #20]
 80136b0:	f7ff fe94 	bl	80133dc <prvTCPSocketCopy>
 80136b4:	4603      	mov	r3, r0
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d003      	beq.n	80136c2 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80136ba:	697b      	ldr	r3, [r7, #20]
 80136bc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 80136be:	2301      	movs	r3, #1
 80136c0:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 80136c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	f000 8083 	beq.w	80137d0 <prvHandleListen_IPV4+0x234>
 80136ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d07f      	beq.n	80137d0 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80136d4:	6838      	ldr	r0, [r7, #0]
 80136d6:	f7f6 fe67 	bl	800a3a8 <uxIPHeaderSizePacket>
 80136da:	4603      	mov	r3, r0
 80136dc:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80136de:	4423      	add	r3, r4
 80136e0:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80136e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136e8:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 80136ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80136ec:	7a13      	ldrb	r3, [r2, #8]
 80136ee:	f36f 0300 	bfc	r3, #0, #1
 80136f2:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 80136f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136f6:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	021b      	lsls	r3, r3, #8
 80136fc:	b21a      	sxth	r2, r3
 80136fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013700:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8013702:	b29b      	uxth	r3, r3
 8013704:	0a1b      	lsrs	r3, r3, #8
 8013706:	b29b      	uxth	r3, r3
 8013708:	b21b      	sxth	r3, r3
 801370a:	4313      	orrs	r3, r2
 801370c:	b21b      	sxth	r3, r3
 801370e:	b29a      	uxth	r2, r3
 8013710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013712:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8013716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013718:	f8d3 301a 	ldr.w	r3, [r3, #26]
 801371c:	061a      	lsls	r2, r3, #24
 801371e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013720:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013724:	021b      	lsls	r3, r3, #8
 8013726:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801372a:	431a      	orrs	r2, r3
 801372c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801372e:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013732:	0a1b      	lsrs	r3, r3, #8
 8013734:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013738:	431a      	orrs	r2, r3
 801373a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8013740:	0e1b      	lsrs	r3, r3, #24
 8013742:	431a      	orrs	r2, r3
 8013744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013746:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801374a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801374c:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013750:	693b      	ldr	r3, [r7, #16]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	061a      	lsls	r2, r3, #24
 8013756:	693b      	ldr	r3, [r7, #16]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	021b      	lsls	r3, r3, #8
 801375c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013760:	431a      	orrs	r2, r3
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	0a1b      	lsrs	r3, r3, #8
 8013768:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801376c:	431a      	orrs	r2, r3
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	685b      	ldr	r3, [r3, #4]
 8013772:	0e1b      	lsrs	r3, r3, #24
 8013774:	431a      	orrs	r2, r3
 8013776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013778:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 801377c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801377e:	f002 f877 	bl	8015870 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8013782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013784:	f000 fb66 	bl	8013e54 <prvTCPCreateWindow>
 8013788:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2b01      	cmp	r3, #1
 801378e:	d008      	beq.n	80137a2 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	2b01      	cmp	r3, #1
 8013794:	d102      	bne.n	801379c <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 8013796:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013798:	f7fb fb28 	bl	800edec <vSocketClose>
                }

                pxReturn = NULL;
 801379c:	2300      	movs	r3, #0
 801379e:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80137a0:	e016      	b.n	80137d0 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80137a2:	2103      	movs	r1, #3
 80137a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80137a6:	f7fd ffc9 	bl	801173c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137ae:	2b5a      	cmp	r3, #90	@ 0x5a
 80137b0:	d902      	bls.n	80137b8 <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80137b2:	235a      	movs	r3, #90	@ 0x5a
 80137b4:	61bb      	str	r3, [r7, #24]
 80137b6:	e002      	b.n	80137be <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80137bc:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80137be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80137c0:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80137c8:	69ba      	ldr	r2, [r7, #24]
 80137ca:	4619      	mov	r1, r3
 80137cc:	f00f f9de 	bl	8022b8c <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80137d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80137d2:	4618      	mov	r0, r3
 80137d4:	3734      	adds	r7, #52	@ 0x34
 80137d6:	46bd      	mov	sp, r7
 80137d8:	bd90      	pop	{r4, r7, pc}
 80137da:	bf00      	nop
 80137dc:	08026d50 	.word	0x08026d50
 80137e0:	08026d54 	.word	0x08026d54
 80137e4:	08026d58 	.word	0x08026d58
 80137e8:	08026d88 	.word	0x08026d88

080137ec <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80137ec:	b590      	push	{r4, r7, lr}
 80137ee:	b08f      	sub	sp, #60	@ 0x3c
 80137f0:	af02      	add	r7, sp, #8
 80137f2:	6078      	str	r0, [r7, #4]
 80137f4:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80137f6:	2300      	movs	r3, #0
 80137f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80137fa:	2300      	movs	r3, #0
 80137fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 80137fe:	2300      	movs	r3, #0
 8013800:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8013802:	2300      	movs	r3, #0
 8013804:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 8013806:	2300      	movs	r3, #0
 8013808:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d024      	beq.n	801385a <prvHandleListen_IPV6+0x6e>
 8013810:	683b      	ldr	r3, [r7, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d021      	beq.n	801385a <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013816:	683b      	ldr	r3, [r7, #0]
 8013818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801381a:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013820:	2b00      	cmp	r3, #0
 8013822:	d103      	bne.n	801382c <prvHandleListen_IPV6+0x40>
 8013824:	215d      	movs	r1, #93	@ 0x5d
 8013826:	487b      	ldr	r0, [pc, #492]	@ (8013a14 <prvHandleListen_IPV6+0x228>)
 8013828:	f7ee f8b6 	bl	8001998 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 801382c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801382e:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013836:	3338      	adds	r3, #56	@ 0x38
 8013838:	2210      	movs	r2, #16
 801383a:	4619      	mov	r1, r3
 801383c:	f010 f93b 	bl	8023ab6 <memcmp>
 8013840:	4603      	mov	r3, r0
 8013842:	2b00      	cmp	r3, #0
 8013844:	d109      	bne.n	801385a <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 8013846:	f107 0308 	add.w	r3, r7, #8
 801384a:	4618      	mov	r0, r3
 801384c:	f7ee f96e 	bl	8001b2c <xApplicationGetRandomNumber>
 8013850:	4603      	mov	r3, r0
 8013852:	2b01      	cmp	r3, #1
 8013854:	d101      	bne.n	801385a <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 8013856:	2301      	movs	r3, #1
 8013858:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 801385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801385c:	2b00      	cmp	r3, #0
 801385e:	d059      	beq.n	8013914 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013866:	f003 0308 	and.w	r3, r3, #8
 801386a:	b2db      	uxtb	r3, r3
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00c      	beq.n	801388a <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013874:	687a      	ldr	r2, [r7, #4]
 8013876:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801387a:	f043 0304 	orr.w	r3, r3, #4
 801387e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	687a      	ldr	r2, [r7, #4]
 8013886:	67da      	str	r2, [r3, #124]	@ 0x7c
 8013888:	e044      	b.n	8013914 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801388a:	2300      	movs	r3, #0
 801388c:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801389a:	429a      	cmp	r2, r3
 801389c:	d31b      	bcc.n	80138d6 <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80138a2:	4619      	mov	r1, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80138aa:	461a      	mov	r2, r3
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80138b2:	4618      	mov	r0, r3
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d101      	bne.n	80138c2 <prvHandleListen_IPV6+0xd6>
 80138be:	4b56      	ldr	r3, [pc, #344]	@ (8013a18 <prvHandleListen_IPV6+0x22c>)
 80138c0:	e000      	b.n	80138c4 <prvHandleListen_IPV6+0xd8>
 80138c2:	4b56      	ldr	r3, [pc, #344]	@ (8013a1c <prvHandleListen_IPV6+0x230>)
 80138c4:	9300      	str	r3, [sp, #0]
 80138c6:	4603      	mov	r3, r0
 80138c8:	4855      	ldr	r0, [pc, #340]	@ (8013a20 <prvHandleListen_IPV6+0x234>)
 80138ca:	f00e ff43 	bl	8022754 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 80138ce:	6838      	ldr	r0, [r7, #0]
 80138d0:	f001 f8a8 	bl	8014a24 <prvTCPSendReset>
 80138d4:	e01e      	b.n	8013914 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 80138d6:	2206      	movs	r2, #6
 80138d8:	2101      	movs	r1, #1
 80138da:	200a      	movs	r0, #10
 80138dc:	f7fa fe78 	bl	800e5d0 <FreeRTOS_socket>
 80138e0:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d003      	beq.n	80138f0 <prvHandleListen_IPV6+0x104>
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138ee:	d106      	bne.n	80138fe <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80138f0:	484c      	ldr	r0, [pc, #304]	@ (8013a24 <prvHandleListen_IPV6+0x238>)
 80138f2:	f00e ff2f 	bl	8022754 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80138f6:	6838      	ldr	r0, [r7, #0]
 80138f8:	f001 f894 	bl	8014a24 <prvTCPSendReset>
 80138fc:	e00a      	b.n	8013914 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80138fe:	6879      	ldr	r1, [r7, #4]
 8013900:	69b8      	ldr	r0, [r7, #24]
 8013902:	f7ff fd6b 	bl	80133dc <prvTCPSocketCopy>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	d003      	beq.n	8013914 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801390c:	69bb      	ldr	r3, [r7, #24]
 801390e:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8013910:	2301      	movs	r3, #1
 8013912:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 8013914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013916:	2b00      	cmp	r3, #0
 8013918:	d076      	beq.n	8013a08 <prvHandleListen_IPV6+0x21c>
 801391a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801391c:	2b00      	cmp	r3, #0
 801391e:	d073      	beq.n	8013a08 <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013924:	6838      	ldr	r0, [r7, #0]
 8013926:	f7f6 fd3f 	bl	800a3a8 <uxIPHeaderSizePacket>
 801392a:	4603      	mov	r3, r0
 801392c:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 801392e:	4423      	add	r3, r4
 8013930:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013938:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 801393a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801393c:	7a13      	ldrb	r3, [r2, #8]
 801393e:	f043 0301 	orr.w	r3, r3, #1
 8013942:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013944:	683b      	ldr	r3, [r7, #0]
 8013946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013948:	330e      	adds	r3, #14
 801394a:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 801394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801394e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8013950:	b29b      	uxth	r3, r3
 8013952:	021b      	lsls	r3, r3, #8
 8013954:	b21a      	sxth	r2, r3
 8013956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013958:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801395a:	b29b      	uxth	r3, r3
 801395c:	0a1b      	lsrs	r3, r3, #8
 801395e:	b29b      	uxth	r3, r3
 8013960:	b21b      	sxth	r3, r3
 8013962:	4313      	orrs	r3, r2
 8013964:	b21b      	sxth	r3, r3
 8013966:	b29a      	uxth	r2, r3
 8013968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801396a:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801396e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013970:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	3308      	adds	r3, #8
 8013978:	2210      	movs	r2, #16
 801397a:	4619      	mov	r1, r3
 801397c:	f00f f906 	bl	8022b8c <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013980:	68ba      	ldr	r2, [r7, #8]
 8013982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013984:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013988:	697b      	ldr	r3, [r7, #20]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	061a      	lsls	r2, r3, #24
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	685b      	ldr	r3, [r3, #4]
 8013992:	021b      	lsls	r3, r3, #8
 8013994:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013998:	431a      	orrs	r2, r3
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	0a1b      	lsrs	r3, r3, #8
 80139a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80139a4:	431a      	orrs	r2, r3
 80139a6:	697b      	ldr	r3, [r7, #20]
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	0e1b      	lsrs	r3, r3, #24
 80139ac:	431a      	orrs	r2, r3
 80139ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139b0:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 80139b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139b6:	f001 ff5b 	bl	8015870 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 80139ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139bc:	f000 fa4a 	bl	8013e54 <prvTCPCreateWindow>
 80139c0:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	2b01      	cmp	r3, #1
 80139c6:	d008      	beq.n	80139da <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 80139c8:	6a3b      	ldr	r3, [r7, #32]
 80139ca:	2b01      	cmp	r3, #1
 80139cc:	d102      	bne.n	80139d4 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 80139ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139d0:	f7fb fa0c 	bl	800edec <vSocketClose>
                }

                pxReturn = NULL;
 80139d4:	2300      	movs	r3, #0
 80139d6:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 80139d8:	e016      	b.n	8013a08 <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 80139da:	2103      	movs	r1, #3
 80139dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80139de:	f7fd fead 	bl	801173c <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139e6:	2b5a      	cmp	r3, #90	@ 0x5a
 80139e8:	d902      	bls.n	80139f0 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80139ea:	235a      	movs	r3, #90	@ 0x5a
 80139ec:	61fb      	str	r3, [r7, #28]
 80139ee:	e002      	b.n	80139f6 <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80139f0:	683b      	ldr	r3, [r7, #0]
 80139f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80139f4:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80139f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80139f8:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8013a00:	69fa      	ldr	r2, [r7, #28]
 8013a02:	4619      	mov	r1, r3
 8013a04:	f00f f8c2 	bl	8022b8c <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8013a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3734      	adds	r7, #52	@ 0x34
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd90      	pop	{r4, r7, pc}
 8013a12:	bf00      	nop
 8013a14:	08026da8 	.word	0x08026da8
 8013a18:	08026de8 	.word	0x08026de8
 8013a1c:	08026dec 	.word	0x08026dec
 8013a20:	08026df0 	.word	0x08026df0
 8013a24:	08026e20 	.word	0x08026e20

08013a28 <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b084      	sub	sp, #16
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013a30:	2301      	movs	r3, #1
 8013a32:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013a3a:	f003 0308 	and.w	r3, r3, #8
 8013a3e:	b2db      	uxtb	r3, r3
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	d107      	bne.n	8013a54 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8013a44:	6878      	ldr	r0, [r7, #4]
 8013a46:	f000 fa51 	bl	8013eec <prvTCPPrepareConnect>
 8013a4a:	4603      	mov	r3, r0
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d001      	beq.n	8013a54 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8013a50:	2300      	movs	r3, #0
 8013a52:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8013a54:	68fb      	ldr	r3, [r7, #12]
    }
 8013a56:	4618      	mov	r0, r3
 8013a58:	3710      	adds	r7, #16
 8013a5a:	46bd      	mov	sp, r7
 8013a5c:	bd80      	pop	{r7, pc}
	...

08013a60 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b088      	sub	sp, #32
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 8013a68:	2300      	movs	r3, #0
 8013a6a:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013a76:	2b02      	cmp	r3, #2
 8013a78:	d010      	beq.n	8013a9c <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8013a7e:	f107 030c 	add.w	r3, r7, #12
 8013a82:	4619      	mov	r1, r3
 8013a84:	6878      	ldr	r0, [r7, #4]
 8013a86:	f000 f859 	bl	8013b3c <prvTCPSendRepeated>
 8013a8a:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d04d      	beq.n	8013b2e <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	4618      	mov	r0, r3
 8013a96:	f003 ffb5 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
 8013a9a:	e048      	b.n	8013b2e <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013aa2:	2b02      	cmp	r3, #2
 8013aa4:	d90d      	bls.n	8013ac2 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	4821      	ldr	r0, [pc, #132]	@ (8013b38 <prvTCPSendPacket+0xd8>)
 8013ab4:	f00e fe4e 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013ab8:	2108      	movs	r1, #8
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f7fd fe3e 	bl	801173c <vTCPStateChange>
 8013ac0:	e035      	b.n	8013b2e <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8013ac2:	6878      	ldr	r0, [r7, #4]
 8013ac4:	f7ff ffb0 	bl	8013a28 <prvTCPMakeSurePrepared>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	2b01      	cmp	r3, #1
 8013acc:	d12f      	bne.n	8013b2e <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f7f6 fc84 	bl	800a3dc <uxIPHeaderSizeSocket>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	330e      	adds	r3, #14
 8013ad8:	33a0      	adds	r3, #160	@ 0xa0
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	4413      	add	r3, r2
 8013ade:	330a      	adds	r3, #10
 8013ae0:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	4619      	mov	r1, r3
 8013ae6:	6878      	ldr	r0, [r7, #4]
 8013ae8:	f000 fa4c 	bl	8013f84 <prvSetSynAckOptions>
 8013aec:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f7f6 fc74 	bl	800a3dc <uxIPHeaderSizeSocket>
 8013af4:	4602      	mov	r2, r0
 8013af6:	693b      	ldr	r3, [r7, #16]
 8013af8:	4413      	add	r3, r2
 8013afa:	3314      	adds	r3, #20
 8013afc:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 8013afe:	69bb      	ldr	r3, [r7, #24]
 8013b00:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013b02:	693b      	ldr	r3, [r7, #16]
 8013b04:	b2db      	uxtb	r3, r3
 8013b06:	3314      	adds	r3, #20
 8013b08:	b2db      	uxtb	r3, r3
 8013b0a:	009b      	lsls	r3, r3, #2
 8013b0c:	b2da      	uxtb	r2, r3
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013b18:	3301      	adds	r3, #1
 8013b1a:	b2da      	uxtb	r2, r3
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 8013b22:	69fa      	ldr	r2, [r7, #28]
 8013b24:	2300      	movs	r3, #0
 8013b26:	2100      	movs	r1, #0
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f000 f837 	bl	8013b9c <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013b2e:	69fb      	ldr	r3, [r7, #28]
    }
 8013b30:	4618      	mov	r0, r3
 8013b32:	3720      	adds	r7, #32
 8013b34:	46bd      	mov	sp, r7
 8013b36:	bd80      	pop	{r7, pc}
 8013b38:	08026e40 	.word	0x08026e40

08013b3c <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8013b3c:	b580      	push	{r7, lr}
 8013b3e:	b086      	sub	sp, #24
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 8013b46:	2300      	movs	r3, #0
 8013b48:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 8013b4a:	2300      	movs	r3, #0
 8013b4c:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013b4e:	2300      	movs	r3, #0
 8013b50:	617b      	str	r3, [r7, #20]
 8013b52:	e019      	b.n	8013b88 <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8013b54:	68fa      	ldr	r2, [r7, #12]
 8013b56:	6839      	ldr	r1, [r7, #0]
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 fb7d 	bl	8014258 <prvTCPPrepareSend>
 8013b5e:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8013b60:	68bb      	ldr	r3, [r7, #8]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	dd14      	ble.n	8013b90 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013b66:	683b      	ldr	r3, [r7, #0]
 8013b68:	6819      	ldr	r1, [r3, #0]
 8013b6a:	68ba      	ldr	r2, [r7, #8]
 8013b6c:	2301      	movs	r3, #1
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f814 	bl	8013b9c <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	2200      	movs	r2, #0
 8013b78:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 8013b7a:	693a      	ldr	r2, [r7, #16]
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	4413      	add	r3, r2
 8013b80:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	3301      	adds	r3, #1
 8013b86:	617b      	str	r3, [r7, #20]
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	2b07      	cmp	r3, #7
 8013b8c:	d9e2      	bls.n	8013b54 <prvTCPSendRepeated+0x18>
 8013b8e:	e000      	b.n	8013b92 <prvTCPSendRepeated+0x56>
                break;
 8013b90:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013b92:	693b      	ldr	r3, [r7, #16]
    }
 8013b94:	4618      	mov	r0, r3
 8013b96:	3718      	adds	r7, #24
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b086      	sub	sp, #24
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	60f8      	str	r0, [r7, #12]
 8013ba4:	60b9      	str	r1, [r7, #8]
 8013ba6:	607a      	str	r2, [r7, #4]
 8013ba8:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013baa:	68bb      	ldr	r3, [r7, #8]
 8013bac:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d008      	beq.n	8013bca <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 8013bb8:	6938      	ldr	r0, [r7, #16]
 8013bba:	f7f6 fbf5 	bl	800a3a8 <uxIPHeaderSizePacket>
 8013bbe:	4603      	mov	r3, r0
 8013bc0:	2b28      	cmp	r3, #40	@ 0x28
 8013bc2:	d113      	bne.n	8013bec <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013bc4:	2301      	movs	r3, #1
 8013bc6:	617b      	str	r3, [r7, #20]
 8013bc8:	e010      	b.n	8013bec <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d008      	beq.n	8013be2 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8013bd0:	68f8      	ldr	r0, [r7, #12]
 8013bd2:	f7f6 fc03 	bl	800a3dc <uxIPHeaderSizeSocket>
 8013bd6:	4603      	mov	r3, r0
 8013bd8:	2b28      	cmp	r3, #40	@ 0x28
 8013bda:	d107      	bne.n	8013bec <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013bdc:	2301      	movs	r3, #1
 8013bde:	617b      	str	r3, [r7, #20]
 8013be0:	e004      	b.n	8013bec <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8013be2:	f240 1119 	movw	r1, #281	@ 0x119
 8013be6:	480c      	ldr	r0, [pc, #48]	@ (8013c18 <prvTCPReturnPacket+0x7c>)
 8013be8:	f7ed fed6 	bl	8001998 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	2b01      	cmp	r3, #1
 8013bf0:	d105      	bne.n	8013bfe <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013bf2:	683b      	ldr	r3, [r7, #0]
 8013bf4:	687a      	ldr	r2, [r7, #4]
 8013bf6:	68b9      	ldr	r1, [r7, #8]
 8013bf8:	68f8      	ldr	r0, [r7, #12]
 8013bfa:	f001 fa61 	bl	80150c0 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 8013bfe:	697b      	ldr	r3, [r7, #20]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d105      	bne.n	8013c10 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013c04:	683b      	ldr	r3, [r7, #0]
 8013c06:	687a      	ldr	r2, [r7, #4]
 8013c08:	68b9      	ldr	r1, [r7, #8]
 8013c0a:	68f8      	ldr	r0, [r7, #12]
 8013c0c:	f000 ff18 	bl	8014a40 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 8013c10:	bf00      	nop
 8013c12:	3718      	adds	r7, #24
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}
 8013c18:	08026e5c 	.word	0x08026e5c

08013c1c <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 8013c1c:	b580      	push	{r7, lr}
 8013c1e:	b08a      	sub	sp, #40	@ 0x28
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	60f8      	str	r0, [r7, #12]
 8013c24:	60b9      	str	r1, [r7, #8]
 8013c26:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013c2e:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013c30:	68bb      	ldr	r3, [r7, #8]
 8013c32:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013c38:	4413      	add	r3, r2
 8013c3a:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d007      	beq.n	8013c56 <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fd fa9f 	bl	8011190 <uxStreamBufferFrontSpace>
 8013c52:	6278      	str	r0, [r7, #36]	@ 0x24
 8013c54:	e003      	b.n	8013c5e <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013c5c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8013c5e:	69bb      	ldr	r3, [r7, #24]
 8013c60:	685b      	ldr	r3, [r3, #4]
 8013c62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013c64:	4618      	mov	r0, r3
 8013c66:	f7f7 f8ed 	bl	800ae44 <FreeRTOS_min_uint32>
 8013c6a:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013c72:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013c76:	b2db      	uxtb	r3, r3
 8013c78:	2b00      	cmp	r3, #0
 8013c7a:	d107      	bne.n	8013c8c <prvTCPReturn_CheckTCPWindow+0x70>
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013c82:	f003 0304 	and.w	r3, r3, #4
 8013c86:	b2db      	uxtb	r3, r3
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d001      	beq.n	8013c90 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013c96:	461a      	mov	r2, r3
 8013c98:	6a3b      	ldr	r3, [r7, #32]
 8013c9a:	4293      	cmp	r3, r2
 8013c9c:	d20a      	bcs.n	8013cb4 <prvTCPReturn_CheckTCPWindow+0x98>
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013ca4:	461a      	mov	r2, r3
 8013ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ca8:	4293      	cmp	r3, r2
 8013caa:	d303      	bcc.n	8013cb4 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013cb2:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8013cba:	461a      	mov	r2, r3
 8013cbc:	6a3b      	ldr	r3, [r7, #32]
 8013cbe:	40d3      	lsrs	r3, r2
 8013cc0:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8013cc2:	69fb      	ldr	r3, [r7, #28]
 8013cc4:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8013cc8:	4293      	cmp	r3, r2
 8013cca:	d902      	bls.n	8013cd2 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8013ccc:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8013cd0:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	b29b      	uxth	r3, r3
 8013cd6:	021b      	lsls	r3, r3, #8
 8013cd8:	b21a      	sxth	r2, r3
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	b29b      	uxth	r3, r3
 8013cde:	0a1b      	lsrs	r3, r3, #8
 8013ce0:	b29b      	uxth	r3, r3
 8013ce2:	b21b      	sxth	r3, r3
 8013ce4:	4313      	orrs	r3, r2
 8013ce6:	b21b      	sxth	r3, r3
 8013ce8:	b29a      	uxth	r2, r3
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8013cee:	68fa      	ldr	r2, [r7, #12]
 8013cf0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013cf4:	f36f 0300 	bfc	r3, #0, #1
 8013cf8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8013cfc:	69bb      	ldr	r3, [r7, #24]
 8013cfe:	691a      	ldr	r2, [r3, #16]
 8013d00:	6a3b      	ldr	r3, [r7, #32]
 8013d02:	441a      	add	r2, r3
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8013d08:	bf00      	nop
 8013d0a:	3728      	adds	r7, #40	@ 0x28
 8013d0c:	46bd      	mov	sp, r7
 8013d0e:	bd80      	pop	{r7, pc}

08013d10 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b088      	sub	sp, #32
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
 8013d1c:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013d24:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8013d26:	68bb      	ldr	r3, [r7, #8]
 8013d28:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013d2e:	4413      	add	r3, r2
 8013d30:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013d38:	f003 0302 	and.w	r3, r3, #2
 8013d3c:	b2db      	uxtb	r3, r3
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d029      	beq.n	8013d96 <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8013d42:	68fa      	ldr	r2, [r7, #12]
 8013d44:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013d48:	f36f 0341 	bfc	r3, #1, #1
 8013d4c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8013d50:	68fa      	ldr	r2, [r7, #12]
 8013d52:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013d56:	f043 0304 	orr.w	r3, r3, #4
 8013d5a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013d64:	1e5a      	subs	r2, r3, #1
 8013d66:	69bb      	ldr	r3, [r7, #24]
 8013d68:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8013d6a:	69bb      	ldr	r3, [r7, #24]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	061a      	lsls	r2, r3, #24
 8013d70:	69bb      	ldr	r3, [r7, #24]
 8013d72:	685b      	ldr	r3, [r3, #4]
 8013d74:	021b      	lsls	r3, r3, #8
 8013d76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013d7a:	431a      	orrs	r2, r3
 8013d7c:	69bb      	ldr	r3, [r7, #24]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	0a1b      	lsrs	r3, r3, #8
 8013d82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013d86:	431a      	orrs	r2, r3
 8013d88:	69bb      	ldr	r3, [r7, #24]
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	0e1b      	lsrs	r3, r3, #24
 8013d8e:	431a      	orrs	r2, r3
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	605a      	str	r2, [r3, #4]
 8013d94:	e043      	b.n	8013e1e <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013d9c:	061a      	lsls	r2, r3, #24
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013da4:	021b      	lsls	r3, r3, #8
 8013da6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013daa:	431a      	orrs	r2, r3
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013db2:	0a1b      	lsrs	r3, r3, #8
 8013db4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013db8:	431a      	orrs	r2, r3
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013dc0:	0e1b      	lsrs	r3, r3, #24
 8013dc2:	431a      	orrs	r2, r3
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8013dc8:	69bb      	ldr	r3, [r7, #24]
 8013dca:	7b5b      	ldrb	r3, [r3, #13]
 8013dcc:	f003 0301 	and.w	r3, r3, #1
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d024      	beq.n	8013e1e <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013dd4:	68f8      	ldr	r0, [r7, #12]
 8013dd6:	f7f6 fb01 	bl	800a3dc <uxIPHeaderSizeSocket>
 8013dda:	4602      	mov	r2, r0
 8013ddc:	683b      	ldr	r3, [r7, #0]
 8013dde:	1a9b      	subs	r3, r3, r2
 8013de0:	3b14      	subs	r3, #20
 8013de2:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013de8:	697b      	ldr	r3, [r7, #20]
 8013dea:	441a      	add	r2, r3
 8013dec:	69fb      	ldr	r3, [r7, #28]
 8013dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d014      	beq.n	8013e1e <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	7b5b      	ldrb	r3, [r3, #13]
 8013df8:	f023 0301 	bic.w	r3, r3, #1
 8013dfc:	b2da      	uxtb	r2, r3
 8013dfe:	69bb      	ldr	r3, [r7, #24]
 8013e00:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8013e02:	69fb      	ldr	r3, [r7, #28]
 8013e04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013e06:	69fb      	ldr	r3, [r7, #28]
 8013e08:	69db      	ldr	r3, [r3, #28]
 8013e0a:	1ad1      	subs	r1, r2, r3
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e10:	69fb      	ldr	r3, [r7, #28]
 8013e12:	69db      	ldr	r3, [r3, #28]
 8013e14:	1ad3      	subs	r3, r2, r3
 8013e16:	697a      	ldr	r2, [r7, #20]
 8013e18:	480d      	ldr	r0, [pc, #52]	@ (8013e50 <prvTCPReturn_SetSequenceNumber+0x140>)
 8013e1a:	f00e fc9b 	bl	8022754 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8013e1e:	69fb      	ldr	r3, [r7, #28]
 8013e20:	691b      	ldr	r3, [r3, #16]
 8013e22:	061a      	lsls	r2, r3, #24
 8013e24:	69fb      	ldr	r3, [r7, #28]
 8013e26:	691b      	ldr	r3, [r3, #16]
 8013e28:	021b      	lsls	r3, r3, #8
 8013e2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e2e:	431a      	orrs	r2, r3
 8013e30:	69fb      	ldr	r3, [r7, #28]
 8013e32:	691b      	ldr	r3, [r3, #16]
 8013e34:	0a1b      	lsrs	r3, r3, #8
 8013e36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e3a:	431a      	orrs	r2, r3
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	691b      	ldr	r3, [r3, #16]
 8013e40:	0e1b      	lsrs	r3, r3, #24
 8013e42:	431a      	orrs	r2, r3
 8013e44:	69bb      	ldr	r3, [r7, #24]
 8013e46:	609a      	str	r2, [r3, #8]
    }
 8013e48:	bf00      	nop
 8013e4a:	3720      	adds	r7, #32
 8013e4c:	46bd      	mov	sp, r7
 8013e4e:	bd80      	pop	{r7, pc}
 8013e50:	08026e98 	.word	0x08026e98

08013e54 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8013e54:	b5b0      	push	{r4, r5, r7, lr}
 8013e56:	b088      	sub	sp, #32
 8013e58:	af02      	add	r7, sp, #8
 8013e5a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013e62:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8013e6a:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8013e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8013ee4 <prvTCPCreateWindow+0x90>)
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d014      	beq.n	8013e9e <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013e7a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013e7e:	fb02 f103 	mul.w	r1, r2, r3
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013e94:	9300      	str	r3, [sp, #0]
 8013e96:	4603      	mov	r3, r0
 8013e98:	4813      	ldr	r0, [pc, #76]	@ (8013ee8 <prvTCPCreateWindow+0x94>)
 8013e9a:	f00e fc5b 	bl	8022754 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013ea4:	697b      	ldr	r3, [r7, #20]
 8013ea6:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013eaa:	fb02 f103 	mul.w	r1, r2, r3
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013eb4:	fb02 f403 	mul.w	r4, r2, r3
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 8013eca:	9201      	str	r2, [sp, #4]
 8013ecc:	9300      	str	r3, [sp, #0]
 8013ece:	462b      	mov	r3, r5
 8013ed0:	4622      	mov	r2, r4
 8013ed2:	f001 ffd7 	bl	8015e84 <xTCPWindowCreate>
 8013ed6:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8013ed8:	68fb      	ldr	r3, [r7, #12]
    }
 8013eda:	4618      	mov	r0, r3
 8013edc:	3718      	adds	r7, #24
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bdb0      	pop	{r4, r5, r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	2000164c 	.word	0x2000164c
 8013ee8:	08026eb8 	.word	0x08026eb8

08013eec <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013eec:	b580      	push	{r7, lr}
 8013eee:	b084      	sub	sp, #16
 8013ef0:	af00      	add	r7, sp, #0
 8013ef2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013ef4:	2301      	movs	r3, #1
 8013ef6:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	7a1b      	ldrb	r3, [r3, #8]
 8013efc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d002      	beq.n	8013f0c <prvTCPPrepareConnect+0x20>
 8013f06:	2b01      	cmp	r3, #1
 8013f08:	d005      	beq.n	8013f16 <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8013f0a:	e009      	b.n	8013f20 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f000 ff69 	bl	8014de4 <prvTCPPrepareConnect_IPV4>
 8013f12:	60f8      	str	r0, [r7, #12]
                    break;
 8013f14:	e004      	b.n	8013f20 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 8013f16:	6878      	ldr	r0, [r7, #4]
 8013f18:	f001 fab4 	bl	8015484 <prvTCPPrepareConnect_IPV6>
 8013f1c:	60f8      	str	r0, [r7, #12]
                    break;
 8013f1e:	bf00      	nop
        }

        return xReturn;
 8013f20:	68fb      	ldr	r3, [r7, #12]
    }
 8013f22:	4618      	mov	r0, r3
 8013f24:	3710      	adds	r7, #16
 8013f26:	46bd      	mov	sp, r7
 8013f28:	bd80      	pop	{r7, pc}
	...

08013f2c <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b084      	sub	sp, #16
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013f3a:	687a      	ldr	r2, [r7, #4]
 8013f3c:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8013f40:	fb02 f303 	mul.w	r3, r2, r3
 8013f44:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 8013f46:	2300      	movs	r3, #0
 8013f48:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 8013f4a:	e005      	b.n	8013f58 <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	085b      	lsrs	r3, r3, #1
 8013f50:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8013f52:	7afb      	ldrb	r3, [r7, #11]
 8013f54:	3301      	adds	r3, #1
 8013f56:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013f5e:	d2f5      	bcs.n	8013f4c <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013f6c:	461a      	mov	r2, r3
 8013f6e:	7afb      	ldrb	r3, [r7, #11]
 8013f70:	4803      	ldr	r0, [pc, #12]	@ (8013f80 <prvWinScaleFactor+0x54>)
 8013f72:	f00e fbef 	bl	8022754 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 8013f76:	7afb      	ldrb	r3, [r7, #11]
        }
 8013f78:	4618      	mov	r0, r3
 8013f7a:	3710      	adds	r7, #16
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	08026ef0 	.word	0x08026ef0

08013f84 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8013f84:	b580      	push	{r7, lr}
 8013f86:	b084      	sub	sp, #16
 8013f88:	af00      	add	r7, sp, #0
 8013f8a:	6078      	str	r0, [r7, #4]
 8013f8c:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013f94:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	2202      	movs	r2, #2
 8013f9a:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8013f9c:	683b      	ldr	r3, [r7, #0]
 8013f9e:	2204      	movs	r2, #4
 8013fa0:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013fa2:	89fb      	ldrh	r3, [r7, #14]
 8013fa4:	0a1b      	lsrs	r3, r3, #8
 8013fa6:	b29b      	uxth	r3, r3
 8013fa8:	b2da      	uxtb	r2, r3
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8013fae:	89fb      	ldrh	r3, [r7, #14]
 8013fb0:	b2da      	uxtb	r2, r3
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f7ff ffb8 	bl	8013f2c <prvWinScaleFactor>
 8013fbc:	4603      	mov	r3, r0
 8013fbe:	461a      	mov	r2, r3
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8013fc6:	683b      	ldr	r3, [r7, #0]
 8013fc8:	2201      	movs	r2, #1
 8013fca:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8013fcc:	683b      	ldr	r3, [r7, #0]
 8013fce:	2203      	movs	r2, #3
 8013fd0:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8013fd2:	683b      	ldr	r3, [r7, #0]
 8013fd4:	2203      	movs	r2, #3
 8013fd6:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8013fe2:	2308      	movs	r3, #8
 8013fe4:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8013fe6:	683a      	ldr	r2, [r7, #0]
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	4413      	add	r3, r2
 8013fec:	3314      	adds	r3, #20
 8013fee:	2201      	movs	r2, #1
 8013ff0:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8013ff2:	68bb      	ldr	r3, [r7, #8]
 8013ff4:	3301      	adds	r3, #1
 8013ff6:	683a      	ldr	r2, [r7, #0]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	2201      	movs	r2, #1
 8013ffc:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	3302      	adds	r3, #2
 8014002:	683a      	ldr	r2, [r7, #0]
 8014004:	4413      	add	r3, r2
 8014006:	2204      	movs	r2, #4
 8014008:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	3303      	adds	r3, #3
 801400e:	683a      	ldr	r2, [r7, #0]
 8014010:	4413      	add	r3, r2
 8014012:	2202      	movs	r2, #2
 8014014:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8014016:	68bb      	ldr	r3, [r7, #8]
 8014018:	3304      	adds	r3, #4
 801401a:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 801401c:	68bb      	ldr	r3, [r7, #8]
    }
 801401e:	4618      	mov	r0, r3
 8014020:	3710      	adds	r7, #16
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
	...

08014028 <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8014028:	b580      	push	{r7, lr}
 801402a:	b088      	sub	sp, #32
 801402c:	af00      	add	r7, sp, #0
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	60b9      	str	r1, [r7, #8]
 8014032:	607a      	str	r2, [r7, #4]
 8014034:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 8014036:	4b38      	ldr	r3, [pc, #224]	@ (8014118 <prvTCPBufferResize+0xf0>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d00b      	beq.n	8014056 <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 801403e:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8014042:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8014044:	68bb      	ldr	r3, [r7, #8]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d102      	bne.n	8014050 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 801404a:	2301      	movs	r3, #1
 801404c:	617b      	str	r3, [r7, #20]
 801404e:	e020      	b.n	8014092 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8014050:	2300      	movs	r3, #0
 8014052:	617b      	str	r3, [r7, #20]
 8014054:	e01d      	b.n	8014092 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8014056:	68f8      	ldr	r0, [r7, #12]
 8014058:	f7f6 f9c0 	bl	800a3dc <uxIPHeaderSizeSocket>
 801405c:	4602      	mov	r2, r0
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	4413      	add	r3, r2
 8014062:	3322      	adds	r3, #34	@ 0x22
 8014064:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	69ba      	ldr	r2, [r7, #24]
 801406a:	4413      	add	r3, r2
 801406c:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 801406e:	69bb      	ldr	r3, [r7, #24]
 8014070:	2b59      	cmp	r3, #89	@ 0x59
 8014072:	d801      	bhi.n	8014078 <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014074:	235a      	movs	r3, #90	@ 0x5a
 8014076:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8014078:	68bb      	ldr	r3, [r7, #8]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d004      	beq.n	8014088 <prvTCPBufferResize+0x60>
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014082:	69ba      	ldr	r2, [r7, #24]
 8014084:	429a      	cmp	r2, r3
 8014086:	d902      	bls.n	801408e <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 8014088:	2301      	movs	r3, #1
 801408a:	617b      	str	r3, [r7, #20]
 801408c:	e001      	b.n	8014092 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 801408e:	2300      	movs	r3, #0
 8014090:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d023      	beq.n	80140e0 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8014098:	2100      	movs	r1, #0
 801409a:	69b8      	ldr	r0, [r7, #24]
 801409c:	f003 fc4a 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 80140a0:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 80140a2:	69fb      	ldr	r3, [r7, #28]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d031      	beq.n	801410c <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 80140a8:	69fb      	ldr	r3, [r7, #28]
 80140aa:	69ba      	ldr	r2, [r7, #24]
 80140ac:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d00c      	beq.n	80140ce <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 80140b4:	69fb      	ldr	r3, [r7, #28]
 80140b6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80140bc:	68bb      	ldr	r3, [r7, #8]
 80140be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140c0:	461a      	mov	r2, r3
 80140c2:	f00e fd63 	bl	8022b8c <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80140c6:	68b8      	ldr	r0, [r7, #8]
 80140c8:	f003 fc9c 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
 80140cc:	e01e      	b.n	801410c <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80140ce:	69fb      	ldr	r3, [r7, #28]
 80140d0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	33aa      	adds	r3, #170	@ 0xaa
 80140d6:	225a      	movs	r2, #90	@ 0x5a
 80140d8:	4619      	mov	r1, r3
 80140da:	f00e fd57 	bl	8022b8c <memcpy>
 80140de:	e015      	b.n	801410c <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 80140e0:	68bb      	ldr	r3, [r7, #8]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d104      	bne.n	80140f0 <prvTCPBufferResize+0xc8>
 80140e6:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80140ea:	480c      	ldr	r0, [pc, #48]	@ (801411c <prvTCPBufferResize+0xf4>)
 80140ec:	f7ed fc54 	bl	8001998 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 80140f4:	68f8      	ldr	r0, [r7, #12]
 80140f6:	f7f6 f971 	bl	800a3dc <uxIPHeaderSizeSocket>
 80140fa:	4602      	mov	r2, r0
 80140fc:	683b      	ldr	r3, [r7, #0]
 80140fe:	441a      	add	r2, r3
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	4413      	add	r3, r2
 8014104:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 801410c:	69fb      	ldr	r3, [r7, #28]
    }
 801410e:	4618      	mov	r0, r3
 8014110:	3720      	adds	r7, #32
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}
 8014116:	bf00      	nop
 8014118:	08027fc8 	.word	0x08027fc8
 801411c:	08026e5c 	.word	0x08026e5c

08014120 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8014120:	b580      	push	{r7, lr}
 8014122:	b086      	sub	sp, #24
 8014124:	af00      	add	r7, sp, #0
 8014126:	60f8      	str	r0, [r7, #12]
 8014128:	60b9      	str	r1, [r7, #8]
 801412a:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 801412c:	2300      	movs	r3, #0
 801412e:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8014130:	2300      	movs	r3, #0
 8014132:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8014134:	68fb      	ldr	r3, [r7, #12]
 8014136:	2b00      	cmp	r3, #0
 8014138:	d008      	beq.n	801414c <prvTCPReturn_SetEndPoint+0x2c>
 801413a:	68fb      	ldr	r3, [r7, #12]
 801413c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801413e:	2b00      	cmp	r3, #0
 8014140:	d004      	beq.n	801414c <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8014142:	68fb      	ldr	r3, [r7, #12]
 8014144:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 801414a:	e078      	b.n	801423e <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 801414c:	483e      	ldr	r0, [pc, #248]	@ (8014248 <prvTCPReturn_SetEndPoint+0x128>)
 801414e:	f00e fb01 	bl	8022754 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8014152:	687b      	ldr	r3, [r7, #4]
 8014154:	2b14      	cmp	r3, #20
 8014156:	d003      	beq.n	8014160 <prvTCPReturn_SetEndPoint+0x40>
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2b28      	cmp	r3, #40	@ 0x28
 801415c:	d03d      	beq.n	80141da <prvTCPReturn_SetEndPoint+0xba>
 801415e:	e056      	b.n	801420e <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014160:	68bb      	ldr	r3, [r7, #8]
 8014162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014164:	330e      	adds	r3, #14
 8014166:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	691b      	ldr	r3, [r3, #16]
 801416c:	2108      	movs	r1, #8
 801416e:	4618      	mov	r0, r3
 8014170:	f7f9 fd8a 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 8014174:	4602      	mov	r2, r0
 8014176:	68bb      	ldr	r3, [r7, #8]
 8014178:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 801417a:	68bb      	ldr	r3, [r7, #8]
 801417c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801417e:	2b00      	cmp	r3, #0
 8014180:	d149      	bne.n	8014216 <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8014182:	697b      	ldr	r3, [r7, #20]
 8014184:	68db      	ldr	r3, [r3, #12]
 8014186:	061a      	lsls	r2, r3, #24
 8014188:	697b      	ldr	r3, [r7, #20]
 801418a:	68db      	ldr	r3, [r3, #12]
 801418c:	021b      	lsls	r3, r3, #8
 801418e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014192:	431a      	orrs	r2, r3
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	0a1b      	lsrs	r3, r3, #8
 801419a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801419e:	431a      	orrs	r2, r3
 80141a0:	697b      	ldr	r3, [r7, #20]
 80141a2:	68db      	ldr	r3, [r3, #12]
 80141a4:	0e1b      	lsrs	r3, r3, #24
 80141a6:	ea42 0103 	orr.w	r1, r2, r3
 80141aa:	697b      	ldr	r3, [r7, #20]
 80141ac:	691b      	ldr	r3, [r3, #16]
 80141ae:	061a      	lsls	r2, r3, #24
 80141b0:	697b      	ldr	r3, [r7, #20]
 80141b2:	691b      	ldr	r3, [r3, #16]
 80141b4:	021b      	lsls	r3, r3, #8
 80141b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80141ba:	431a      	orrs	r2, r3
 80141bc:	697b      	ldr	r3, [r7, #20]
 80141be:	691b      	ldr	r3, [r3, #16]
 80141c0:	0a1b      	lsrs	r3, r3, #8
 80141c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80141c6:	431a      	orrs	r2, r3
 80141c8:	697b      	ldr	r3, [r7, #20]
 80141ca:	691b      	ldr	r3, [r3, #16]
 80141cc:	0e1b      	lsrs	r3, r3, #24
 80141ce:	4313      	orrs	r3, r2
 80141d0:	461a      	mov	r2, r3
 80141d2:	481e      	ldr	r0, [pc, #120]	@ (801424c <prvTCPReturn_SetEndPoint+0x12c>)
 80141d4:	f00e fabe 	bl	8022754 <lUDPLoggingPrintf>
                        break;
 80141d8:	e01d      	b.n	8014216 <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80141da:	68bb      	ldr	r3, [r7, #8]
 80141dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141de:	330e      	adds	r3, #14
 80141e0:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	3318      	adds	r3, #24
 80141e6:	4618      	mov	r0, r3
 80141e8:	f7f9 fd08 	bl	800dbfc <FreeRTOS_FindEndPointOnIP_IPv6>
 80141ec:	4602      	mov	r2, r0
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 80141f2:	68bb      	ldr	r3, [r7, #8]
 80141f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d10f      	bne.n	801421a <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 80141fa:	693b      	ldr	r3, [r7, #16]
 80141fc:	f103 0108 	add.w	r1, r3, #8
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	3318      	adds	r3, #24
 8014204:	461a      	mov	r2, r3
 8014206:	4812      	ldr	r0, [pc, #72]	@ (8014250 <prvTCPReturn_SetEndPoint+0x130>)
 8014208:	f00e faa4 	bl	8022754 <lUDPLoggingPrintf>
                        break;
 801420c:	e005      	b.n	801421a <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	2200      	movs	r2, #0
 8014212:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8014214:	e002      	b.n	801421c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8014216:	bf00      	nop
 8014218:	e000      	b.n	801421c <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 801421a:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 801421c:	68bb      	ldr	r3, [r7, #8]
 801421e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014220:	2b00      	cmp	r3, #0
 8014222:	d00c      	beq.n	801423e <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8014224:	68bb      	ldr	r3, [r7, #8]
 8014226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014228:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 801422c:	4619      	mov	r1, r3
 801422e:	68bb      	ldr	r3, [r7, #8]
 8014230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014232:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8014236:	461a      	mov	r2, r3
 8014238:	4806      	ldr	r0, [pc, #24]	@ (8014254 <prvTCPReturn_SetEndPoint+0x134>)
 801423a:	f00e fa8b 	bl	8022754 <lUDPLoggingPrintf>
    }
 801423e:	bf00      	nop
 8014240:	3718      	adds	r7, #24
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	08026f24 	.word	0x08026f24
 801424c:	08026f4c 	.word	0x08026f4c
 8014250:	08026f80 	.word	0x08026f80
 8014254:	08026fb4 	.word	0x08026fb4

08014258 <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 8014258:	b580      	push	{r7, lr}
 801425a:	b096      	sub	sp, #88	@ 0x58
 801425c:	af02      	add	r7, sp, #8
 801425e:	60f8      	str	r0, [r7, #12]
 8014260:	60b9      	str	r1, [r7, #8]
 8014262:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8014264:	2300      	movs	r3, #0
 8014266:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d004      	beq.n	801427a <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014278:	e002      	b.n	8014280 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	33aa      	adds	r3, #170	@ 0xaa
 801427e:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014280:	68f8      	ldr	r0, [r7, #12]
 8014282:	f7f6 f8ab 	bl	800a3dc <uxIPHeaderSizeSocket>
 8014286:	4603      	mov	r3, r0
 8014288:	330e      	adds	r3, #14
 801428a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801428c:	4413      	add	r3, r2
 801428e:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8014290:	68fb      	ldr	r3, [r7, #12]
 8014292:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014296:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8014298:	2300      	movs	r3, #0
 801429a:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 80142a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142a2:	7b5b      	ldrb	r3, [r3, #13]
 80142a4:	f043 0310 	orr.w	r3, r3, #16
 80142a8:	b2da      	uxtb	r2, r3
 80142aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80142ac:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	f000 80a5 	beq.w	8014404 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	d90a      	bls.n	80142da <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 80142c4:	68fb      	ldr	r3, [r7, #12]
 80142c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80142ca:	f107 0210 	add.w	r2, r7, #16
 80142ce:	4619      	mov	r1, r3
 80142d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80142d2:	f002 fb13 	bl	80168fc <ulTCPWindowTxGet>
 80142d6:	4603      	mov	r3, r0
 80142d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 80142da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80142dc:	2b00      	cmp	r3, #0
 80142de:	f340 8091 	ble.w	8014404 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 80142e2:	68bb      	ldr	r3, [r7, #8]
 80142e4:	6819      	ldr	r1, [r3, #0]
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80142ea:	68f8      	ldr	r0, [r7, #12]
 80142ec:	f7ff fe9c 	bl	8014028 <prvTCPBufferResize>
 80142f0:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 80142f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	f000 8082 	beq.w	80143fe <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 80142fa:	68bb      	ldr	r3, [r7, #8]
 80142fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80142fe:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8014300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014304:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014306:	68f8      	ldr	r0, [r7, #12]
 8014308:	f7f6 f868 	bl	800a3dc <uxIPHeaderSizeSocket>
 801430c:	4603      	mov	r3, r0
 801430e:	330e      	adds	r3, #14
 8014310:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014312:	4413      	add	r3, r2
 8014314:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8014316:	68f8      	ldr	r0, [r7, #12]
 8014318:	f7f6 f860 	bl	800a3dc <uxIPHeaderSizeSocket>
 801431c:	4602      	mov	r2, r0
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	4413      	add	r3, r2
 8014322:	3322      	adds	r3, #34	@ 0x22
 8014324:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8014326:	4413      	add	r3, r2
 8014328:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	693a      	ldr	r2, [r7, #16]
 801433a:	4619      	mov	r1, r3
 801433c:	f7fc fef9 	bl	8011132 <uxStreamBufferDistance>
 8014340:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801434a:	2201      	movs	r2, #1
 801434c:	9200      	str	r2, [sp, #0]
 801434e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014350:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8014352:	f7fd f84c 	bl	80113ee <uxStreamBufferGet>
 8014356:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 8014358:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801435a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801435c:	429a      	cmp	r2, r3
 801435e:	d007      	beq.n	8014370 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8014360:	6939      	ldr	r1, [r7, #16]
 8014362:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014364:	9300      	str	r3, [sp, #0]
 8014366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014368:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801436a:	4898      	ldr	r0, [pc, #608]	@ (80145cc <prvTCPPrepareSend+0x374>)
 801436c:	f00e f9f2 	bl	8022754 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8014376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801437a:	b2db      	uxtb	r3, r3
 801437c:	2b00      	cmp	r3, #0
 801437e:	d041      	beq.n	8014404 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	4619      	mov	r1, r3
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014390:	689b      	ldr	r3, [r3, #8]
 8014392:	461a      	mov	r2, r3
 8014394:	f7fc fecd 	bl	8011132 <uxStreamBufferDistance>
 8014398:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 801439a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801439c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801439e:	429a      	cmp	r2, r3
 80143a0:	d130      	bne.n	8014404 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80143a8:	689b      	ldr	r3, [r3, #8]
 80143aa:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 80143ac:	68fb      	ldr	r3, [r7, #12]
 80143ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80143b2:	685b      	ldr	r3, [r3, #4]
 80143b4:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80143bc:	681b      	ldr	r3, [r3, #0]
 80143be:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 80143c0:	6a3b      	ldr	r3, [r7, #32]
 80143c2:	9301      	str	r3, [sp, #4]
 80143c4:	69fb      	ldr	r3, [r7, #28]
 80143c6:	9300      	str	r3, [sp, #0]
 80143c8:	69bb      	ldr	r3, [r7, #24]
 80143ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80143cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80143ce:	4880      	ldr	r0, [pc, #512]	@ (80145d0 <prvTCPPrepareSend+0x378>)
 80143d0:	f00e f9c0 	bl	8022754 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 80143d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80143d6:	7b5b      	ldrb	r3, [r3, #13]
 80143d8:	f043 0301 	orr.w	r3, r3, #1
 80143dc:	b2da      	uxtb	r2, r3
 80143de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80143e0:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 80143e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80143e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80143e8:	441a      	add	r2, r3
 80143ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ec:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80143ee:	68fa      	ldr	r2, [r7, #12]
 80143f0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80143f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80143f8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80143fc:	e002      	b.n	8014404 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 80143fe:	f04f 33ff 	mov.w	r3, #4294967295
 8014402:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8014404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014406:	2b00      	cmp	r3, #0
 8014408:	f2c0 8099 	blt.w	801453e <prvTCPPrepareSend+0x2e6>
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014412:	2b05      	cmp	r3, #5
 8014414:	f040 8093 	bne.w	801453e <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801441e:	f003 0320 	and.w	r3, r3, #32
 8014422:	b2db      	uxtb	r3, r3
 8014424:	2b00      	cmp	r3, #0
 8014426:	d029      	beq.n	801447c <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8014428:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801442a:	f002 f8e7 	bl	80165fc <xTCPWindowTxDone>
 801442e:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8014430:	2b00      	cmp	r3, #0
 8014432:	d023      	beq.n	801447c <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8014434:	68fa      	ldr	r2, [r7, #12]
 8014436:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801443a:	f36f 1345 	bfc	r3, #5, #1
 801443e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8014442:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014444:	7b5b      	ldrb	r3, [r3, #13]
 8014446:	f043 0301 	orr.w	r3, r3, #1
 801444a:	b2da      	uxtb	r2, r3
 801444c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801444e:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8014450:	68fa      	ldr	r2, [r7, #12]
 8014452:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801445a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 801445e:	68fa      	ldr	r2, [r7, #12]
 8014460:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014464:	f043 0301 	orr.w	r3, r3, #1
 8014468:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801446c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801446e:	6a1a      	ldr	r2, [r3, #32]
 8014470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014472:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8014474:	2106      	movs	r1, #6
 8014476:	68f8      	ldr	r0, [r7, #12]
 8014478:	f7fd f960 	bl	801173c <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014482:	2b03      	cmp	r3, #3
 8014484:	d90f      	bls.n	80144a6 <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801448a:	68fb      	ldr	r3, [r7, #12]
 801448c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014490:	461a      	mov	r2, r3
 8014492:	4850      	ldr	r0, [pc, #320]	@ (80145d4 <prvTCPPrepareSend+0x37c>)
 8014494:	f00e f95e 	bl	8022754 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8014498:	2108      	movs	r1, #8
 801449a:	68f8      	ldr	r0, [r7, #12]
 801449c:	f7fd f94e 	bl	801173c <vTCPStateChange>
                    lDataLen = -1;
 80144a0:	f04f 33ff 	mov.w	r3, #4294967295
 80144a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 80144a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d148      	bne.n	801453e <prvTCPPrepareSend+0x2e6>
 80144ac:	68fb      	ldr	r3, [r7, #12]
 80144ae:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80144b2:	f003 0301 	and.w	r3, r3, #1
 80144b6:	b2db      	uxtb	r3, r3
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d140      	bne.n	801453e <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 80144bc:	f7f0 fbda 	bl	8004c74 <xTaskGetTickCount>
 80144c0:	4602      	mov	r2, r0
 80144c2:	68fb      	ldr	r3, [r7, #12]
 80144c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80144c8:	1ad3      	subs	r3, r2, r3
 80144ca:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 80144cc:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80144d0:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d002      	beq.n	80144e2 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 80144dc:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80144e0:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 80144e2:	697a      	ldr	r2, [r7, #20]
 80144e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144e6:	429a      	cmp	r2, r3
 80144e8:	d929      	bls.n	801453e <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80144ea:	f7f0 fbc3 	bl	8004c74 <xTaskGetTickCount>
 80144ee:	4602      	mov	r2, r0
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 80144f6:	4b38      	ldr	r3, [pc, #224]	@ (80145d8 <prvTCPPrepareSend+0x380>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d00b      	beq.n	8014516 <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014508:	461a      	mov	r2, r3
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014510:	4832      	ldr	r0, [pc, #200]	@ (80145dc <prvTCPPrepareSend+0x384>)
 8014512:	f00e f91f 	bl	8022754 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8014516:	68fa      	ldr	r2, [r7, #12]
 8014518:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801451c:	f043 0302 	orr.w	r3, r3, #2
 8014520:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8014524:	68fb      	ldr	r3, [r7, #12]
 8014526:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 801452a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 801452e:	68fb      	ldr	r3, [r7, #12]
 8014530:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8014534:	3301      	adds	r3, #1
 8014536:	b2da      	uxtb	r2, r3
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 801453e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014540:	2b00      	cmp	r3, #0
 8014542:	db3e      	blt.n	80145c2 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8014544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014546:	2b00      	cmp	r3, #0
 8014548:	dc0f      	bgt.n	801456a <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014550:	f003 0301 	and.w	r3, r3, #1
 8014554:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8014556:	2b00      	cmp	r3, #0
 8014558:	d107      	bne.n	801456a <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014560:	f003 0302 	and.w	r3, r3, #2
 8014564:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8014566:	2b00      	cmp	r3, #0
 8014568:	d02b      	beq.n	80145c2 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 801456a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801456c:	7b5b      	ldrb	r3, [r3, #13]
 801456e:	f023 0308 	bic.w	r3, r3, #8
 8014572:	b2da      	uxtb	r2, r3
 8014574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014576:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	b2db      	uxtb	r3, r3
 801457c:	3314      	adds	r3, #20
 801457e:	b2db      	uxtb	r3, r3
 8014580:	009b      	lsls	r3, r3, #2
 8014582:	b2da      	uxtb	r2, r3
 8014584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014586:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8014588:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801458a:	7b5b      	ldrb	r3, [r3, #13]
 801458c:	f043 0310 	orr.w	r3, r3, #16
 8014590:	b2da      	uxtb	r2, r3
 8014592:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014594:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8014596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014598:	2b00      	cmp	r3, #0
 801459a:	d006      	beq.n	80145aa <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 801459c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801459e:	7b5b      	ldrb	r3, [r3, #13]
 80145a0:	f043 0308 	orr.w	r3, r3, #8
 80145a4:	b2da      	uxtb	r2, r3
 80145a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80145a8:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80145aa:	68f8      	ldr	r0, [r7, #12]
 80145ac:	f7f5 ff16 	bl	800a3dc <uxIPHeaderSizeSocket>
 80145b0:	4602      	mov	r2, r0
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	4413      	add	r3, r2
 80145b6:	3314      	adds	r3, #20
 80145b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 80145ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80145bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80145be:	4413      	add	r3, r2
 80145c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 80145c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 80145c4:	4618      	mov	r0, r3
 80145c6:	3750      	adds	r7, #80	@ 0x50
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}
 80145cc:	08026fe8 	.word	0x08026fe8
 80145d0:	0802701c 	.word	0x0802701c
 80145d4:	08027044 	.word	0x08027044
 80145d8:	2000164c 	.word	0x2000164c
 80145dc:	08027064 	.word	0x08027064

080145e0 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 80145e0:	b580      	push	{r7, lr}
 80145e2:	b084      	sub	sp, #16
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80145ee:	4618      	mov	r0, r3
 80145f0:	f7fc fdf0 	bl	80111d4 <uxStreamBufferMidSpace>
 80145f4:	4603      	mov	r3, r0
 80145f6:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 80145f8:	68fb      	ldr	r3, [r7, #12]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	dd1a      	ble.n	8014634 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8014604:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801460c:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 801460e:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8014616:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8014618:	f001 ff5c 	bl	80164d4 <lTCPWindowTxAdd>
 801461c:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	2b00      	cmp	r3, #0
 8014622:	dd07      	ble.n	8014634 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801462a:	68ba      	ldr	r2, [r7, #8]
 801462c:	4611      	mov	r1, r2
 801462e:	4618      	mov	r0, r3
 8014630:	f7fc fdf7 	bl	8011222 <vStreamBufferMoveMid>
            }
        }
    }
 8014634:	bf00      	nop
 8014636:	3710      	adds	r7, #16
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}

0801463c <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801463c:	b590      	push	{r4, r7, lr}
 801463e:	b08b      	sub	sp, #44	@ 0x2c
 8014640:	af02      	add	r7, sp, #8
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8014646:	683b      	ldr	r3, [r7, #0]
 8014648:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801464a:	6838      	ldr	r0, [r7, #0]
 801464c:	f7f5 feac 	bl	800a3a8 <uxIPHeaderSizePacket>
 8014650:	4603      	mov	r3, r0
 8014652:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014654:	4423      	add	r3, r4
 8014656:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8014658:	69bb      	ldr	r3, [r7, #24]
 801465a:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8014662:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8014664:	693b      	ldr	r3, [r7, #16]
 8014666:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801466a:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 801466c:	69fb      	ldr	r3, [r7, #28]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d05c      	beq.n	801472c <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8014672:	4b4f      	ldr	r3, [pc, #316]	@ (80147b0 <prvSetOptions+0x174>)
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	2b00      	cmp	r3, #0
 8014678:	db44      	blt.n	8014704 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801467e:	4618      	mov	r0, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014686:	461c      	mov	r4, r3
 8014688:	693b      	ldr	r3, [r7, #16]
 801468a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801468e:	061a      	lsls	r2, r3, #24
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014696:	021b      	lsls	r3, r3, #8
 8014698:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801469c:	431a      	orrs	r2, r3
 801469e:	693b      	ldr	r3, [r7, #16]
 80146a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146a4:	0a1b      	lsrs	r3, r3, #8
 80146a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146aa:	431a      	orrs	r2, r3
 80146ac:	693b      	ldr	r3, [r7, #16]
 80146ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80146b2:	0e1b      	lsrs	r3, r3, #24
 80146b4:	431a      	orrs	r2, r3
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80146bc:	1ad3      	subs	r3, r2, r3
 80146be:	693a      	ldr	r2, [r7, #16]
 80146c0:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80146c4:	0611      	lsls	r1, r2, #24
 80146c6:	693a      	ldr	r2, [r7, #16]
 80146c8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80146cc:	0212      	lsls	r2, r2, #8
 80146ce:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 80146d2:	4311      	orrs	r1, r2
 80146d4:	693a      	ldr	r2, [r7, #16]
 80146d6:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80146da:	0a12      	lsrs	r2, r2, #8
 80146dc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80146e0:	4311      	orrs	r1, r2
 80146e2:	693a      	ldr	r2, [r7, #16]
 80146e4:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80146e8:	0e12      	lsrs	r2, r2, #24
 80146ea:	4311      	orrs	r1, r2
 80146ec:	687a      	ldr	r2, [r7, #4]
 80146ee:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80146f2:	1a8a      	subs	r2, r1, r2
 80146f4:	9201      	str	r2, [sp, #4]
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	4622      	mov	r2, r4
 80146fc:	4601      	mov	r1, r0
 80146fe:	482d      	ldr	r0, [pc, #180]	@ (80147b4 <prvSetOptions+0x178>)
 8014700:	f00e f828 	bl	8022754 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8014704:	693b      	ldr	r3, [r7, #16]
 8014706:	3380      	adds	r3, #128	@ 0x80
 8014708:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 801470a:	697b      	ldr	r3, [r7, #20]
 801470c:	3314      	adds	r3, #20
 801470e:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8014710:	69fa      	ldr	r2, [r7, #28]
 8014712:	68f9      	ldr	r1, [r7, #12]
 8014714:	68b8      	ldr	r0, [r7, #8]
 8014716:	f00e fa39 	bl	8022b8c <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801471a:	69fb      	ldr	r3, [r7, #28]
 801471c:	b2db      	uxtb	r3, r3
 801471e:	3314      	adds	r3, #20
 8014720:	b2db      	uxtb	r3, r3
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	b2da      	uxtb	r2, r3
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	731a      	strb	r2, [r3, #12]
 801472a:	e03c      	b.n	80147a6 <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8014732:	2b04      	cmp	r3, #4
 8014734:	d937      	bls.n	80147a6 <prvSetOptions+0x16a>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801473c:	f003 0301 	and.w	r3, r3, #1
 8014740:	b2db      	uxtb	r3, r3
 8014742:	2b00      	cmp	r3, #0
 8014744:	d02f      	beq.n	80147a6 <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801474c:	f36f 0300 	bfc	r3, #0, #1
 8014750:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8014754:	4b16      	ldr	r3, [pc, #88]	@ (80147b0 <prvSetOptions+0x174>)
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	2b00      	cmp	r3, #0
 801475a:	db06      	blt.n	801476a <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014762:	4619      	mov	r1, r3
 8014764:	4814      	ldr	r0, [pc, #80]	@ (80147b8 <prvSetOptions+0x17c>)
 8014766:	f00d fff5 	bl	8022754 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 801476a:	697b      	ldr	r3, [r7, #20]
 801476c:	2202      	movs	r2, #2
 801476e:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8014770:	697b      	ldr	r3, [r7, #20]
 8014772:	2204      	movs	r2, #4
 8014774:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801477c:	0a1b      	lsrs	r3, r3, #8
 801477e:	b29b      	uxth	r3, r3
 8014780:	b2da      	uxtb	r2, r3
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 8014786:	687b      	ldr	r3, [r7, #4]
 8014788:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801478c:	b2da      	uxtb	r2, r3
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8014792:	2304      	movs	r3, #4
 8014794:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8014796:	69fb      	ldr	r3, [r7, #28]
 8014798:	b2db      	uxtb	r3, r3
 801479a:	3314      	adds	r3, #20
 801479c:	b2db      	uxtb	r3, r3
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	b2da      	uxtb	r2, r3
 80147a2:	697b      	ldr	r3, [r7, #20]
 80147a4:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 80147a6:	69fb      	ldr	r3, [r7, #28]
    }
 80147a8:	4618      	mov	r0, r3
 80147aa:	3724      	adds	r7, #36	@ 0x24
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd90      	pop	{r4, r7, pc}
 80147b0:	2000164c 	.word	0x2000164c
 80147b4:	08027084 	.word	0x08027084
 80147b8:	080270ac 	.word	0x080270ac

080147bc <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 80147bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80147be:	b093      	sub	sp, #76	@ 0x4c
 80147c0:	af04      	add	r7, sp, #16
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
 80147c8:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80147ca:	68bb      	ldr	r3, [r7, #8]
 80147cc:	681b      	ldr	r3, [r3, #0]
 80147ce:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80147d0:	68bb      	ldr	r3, [r7, #8]
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	4618      	mov	r0, r3
 80147d6:	f7f5 fde7 	bl	800a3a8 <uxIPHeaderSizePacket>
 80147da:	4603      	mov	r3, r0
 80147dc:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80147de:	4423      	add	r3, r4
 80147e0:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80147e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80147ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 80147f2:	68bb      	ldr	r3, [r7, #8]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4618      	mov	r0, r3
 80147f8:	f7f5 fdd6 	bl	800a3a8 <uxIPHeaderSizePacket>
 80147fc:	4603      	mov	r3, r0
 80147fe:	3314      	adds	r3, #20
 8014800:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8014802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014804:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8014806:	68fb      	ldr	r3, [r7, #12]
 8014808:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801480a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801480c:	691b      	ldr	r3, [r3, #16]
 801480e:	1ad3      	subs	r3, r2, r3
 8014810:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8014812:	69fb      	ldr	r3, [r7, #28]
 8014814:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801481c:	005b      	lsls	r3, r3, #1
 801481e:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	2b00      	cmp	r3, #0
 8014824:	d079      	beq.n	801491a <prvSendData+0x15e>
 8014826:	69ba      	ldr	r2, [r7, #24]
 8014828:	697b      	ldr	r3, [r7, #20]
 801482a:	429a      	cmp	r2, r3
 801482c:	db75      	blt.n	801491a <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 801482e:	68fb      	ldr	r3, [r7, #12]
 8014830:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8014834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014838:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 801483a:	2b00      	cmp	r3, #0
 801483c:	d16d      	bne.n	801491a <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 801483e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014840:	6a3b      	ldr	r3, [r7, #32]
 8014842:	429a      	cmp	r2, r3
 8014844:	d169      	bne.n	801491a <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 801484c:	2b05      	cmp	r3, #5
 801484e:	d164      	bne.n	801491a <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8014850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014852:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8014854:	2b10      	cmp	r3, #16
 8014856:	d160      	bne.n	801491a <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801485e:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	681b      	ldr	r3, [r3, #0]
 801486a:	429a      	cmp	r2, r3
 801486c:	d00f      	beq.n	801488e <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014874:	2b00      	cmp	r3, #0
 8014876:	d005      	beq.n	8014884 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801487e:	4618      	mov	r0, r3
 8014880:	f003 f8c0 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	681a      	ldr	r2, [r3, #0]
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 801488e:	687a      	ldr	r2, [r7, #4]
 8014890:	693b      	ldr	r3, [r7, #16]
 8014892:	429a      	cmp	r2, r3
 8014894:	d204      	bcs.n	80148a0 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	2202      	movs	r2, #2
 801489a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 801489e:	e00c      	b.n	80148ba <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2214      	movs	r2, #20
 80148a4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d103      	bne.n	80148ba <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	2201      	movs	r2, #1
 80148b6:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80148ba:	4b3d      	ldr	r3, [pc, #244]	@ (80149b0 <prvSendData+0x1f4>)
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	2b01      	cmp	r3, #1
 80148c0:	dd25      	ble.n	801490e <prvSendData+0x152>
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80148c6:	2b17      	cmp	r3, #23
 80148c8:	d021      	beq.n	801490e <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80148ce:	461d      	mov	r5, r3
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80148d6:	461e      	mov	r6, r3
 80148d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148da:	691a      	ldr	r2, [r3, #16]
 80148dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148de:	68db      	ldr	r3, [r3, #12]
 80148e0:	1ad0      	subs	r0, r2, r3
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80148e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ea:	69db      	ldr	r3, [r3, #28]
 80148ec:	1ad3      	subs	r3, r2, r3
 80148ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80148f0:	68f9      	ldr	r1, [r7, #12]
 80148f2:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 80148f6:	460c      	mov	r4, r1
 80148f8:	69b9      	ldr	r1, [r7, #24]
 80148fa:	9103      	str	r1, [sp, #12]
 80148fc:	9402      	str	r4, [sp, #8]
 80148fe:	9201      	str	r2, [sp, #4]
 8014900:	9300      	str	r3, [sp, #0]
 8014902:	4603      	mov	r3, r0
 8014904:	4632      	mov	r2, r6
 8014906:	4629      	mov	r1, r5
 8014908:	482a      	ldr	r0, [pc, #168]	@ (80149b4 <prvSendData+0x1f8>)
 801490a:	f00d ff23 	bl	8022754 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	2200      	movs	r2, #0
 8014912:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 8014914:	2300      	movs	r3, #0
 8014916:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 8014918:	e015      	b.n	8014946 <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014920:	2b00      	cmp	r3, #0
 8014922:	d010      	beq.n	8014946 <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801492a:	68bb      	ldr	r3, [r7, #8]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	429a      	cmp	r2, r3
 8014930:	d005      	beq.n	801493e <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014938:	4618      	mov	r0, r3
 801493a:	f003 f863 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	2200      	movs	r2, #0
 8014942:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 8014946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014948:	2b00      	cmp	r3, #0
 801494a:	d02b      	beq.n	80149a4 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801494c:	4b18      	ldr	r3, [pc, #96]	@ (80149b0 <prvSendData+0x1f4>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	2b01      	cmp	r3, #1
 8014952:	dd1d      	ble.n	8014990 <prvSendData+0x1d4>
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014958:	2b17      	cmp	r3, #23
 801495a:	d019      	beq.n	8014990 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 801495c:	68fb      	ldr	r3, [r7, #12]
 801495e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014960:	4618      	mov	r0, r3
 8014962:	68fb      	ldr	r3, [r7, #12]
 8014964:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014968:	461c      	mov	r4, r3
 801496a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801496c:	691a      	ldr	r2, [r3, #16]
 801496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014970:	68db      	ldr	r3, [r3, #12]
 8014972:	1ad1      	subs	r1, r2, r3
 8014974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801497a:	69db      	ldr	r3, [r3, #28]
 801497c:	1ad3      	subs	r3, r2, r3
 801497e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014980:	9201      	str	r2, [sp, #4]
 8014982:	9300      	str	r3, [sp, #0]
 8014984:	460b      	mov	r3, r1
 8014986:	4622      	mov	r2, r4
 8014988:	4601      	mov	r1, r0
 801498a:	480b      	ldr	r0, [pc, #44]	@ (80149b8 <prvSendData+0x1fc>)
 801498c:	f00d fee2 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	6819      	ldr	r1, [r3, #0]
 8014994:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014996:	2301      	movs	r3, #1
 8014998:	68f8      	ldr	r0, [r7, #12]
 801499a:	f7ff f8ff 	bl	8013b9c <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	2200      	movs	r2, #0
 80149a2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 80149a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80149a6:	4618      	mov	r0, r3
 80149a8:	373c      	adds	r7, #60	@ 0x3c
 80149aa:	46bd      	mov	sp, r7
 80149ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80149ae:	bf00      	nop
 80149b0:	2000164c 	.word	0x2000164c
 80149b4:	080270c0 	.word	0x080270c0
 80149b8:	080270f8 	.word	0x080270f8

080149bc <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	460b      	mov	r3, r1
 80149c6:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 80149c8:	2301      	movs	r3, #1
 80149ca:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f7f5 fceb 	bl	800a3a8 <uxIPHeaderSizePacket>
 80149d2:	4603      	mov	r3, r0
 80149d4:	2b14      	cmp	r3, #20
 80149d6:	d002      	beq.n	80149de <prvTCPSendSpecialPacketHelper+0x22>
 80149d8:	2b28      	cmp	r3, #40	@ 0x28
 80149da:	d007      	beq.n	80149ec <prvTCPSendSpecialPacketHelper+0x30>
 80149dc:	e00d      	b.n	80149fa <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 80149de:	78fb      	ldrb	r3, [r7, #3]
 80149e0:	4619      	mov	r1, r3
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f000 fb18 	bl	8015018 <prvTCPSendSpecialPktHelper_IPV4>
 80149e8:	60f8      	str	r0, [r7, #12]
                        break;
 80149ea:	e009      	b.n	8014a00 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 80149ec:	78fb      	ldrb	r3, [r7, #3]
 80149ee:	4619      	mov	r1, r3
 80149f0:	6878      	ldr	r0, [r7, #4]
 80149f2:	f000 fe8b 	bl	801570c <prvTCPSendSpecialPktHelper_IPV6>
 80149f6:	60f8      	str	r0, [r7, #12]
                        break;
 80149f8:	e002      	b.n	8014a00 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 80149fa:	2300      	movs	r3, #0
 80149fc:	60fb      	str	r3, [r7, #12]
                    break;
 80149fe:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 8014a00:	68fb      	ldr	r3, [r7, #12]
    }
 8014a02:	4618      	mov	r0, r3
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}

08014a0a <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014a0a:	b580      	push	{r7, lr}
 8014a0c:	b082      	sub	sp, #8
 8014a0e:	af00      	add	r7, sp, #0
 8014a10:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 8014a12:	2110      	movs	r1, #16
 8014a14:	6878      	ldr	r0, [r7, #4]
 8014a16:	f7ff ffd1 	bl	80149bc <prvTCPSendSpecialPacketHelper>
 8014a1a:	4603      	mov	r3, r0
    }
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	3708      	adds	r7, #8
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bd80      	pop	{r7, pc}

08014a24 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8014a24:	b580      	push	{r7, lr}
 8014a26:	b082      	sub	sp, #8
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 8014a2c:	2114      	movs	r1, #20
 8014a2e:	6878      	ldr	r0, [r7, #4]
 8014a30:	f7ff ffc4 	bl	80149bc <prvTCPSendSpecialPacketHelper>
 8014a34:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 8014a36:	4618      	mov	r0, r3
 8014a38:	3708      	adds	r7, #8
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
	...

08014a40 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b0a6      	sub	sp, #152	@ 0x98
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	607a      	str	r2, [r7, #4]
 8014a4c:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8014a4e:	2300      	movs	r3, #0
 8014a50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014a54:	2300      	movs	r3, #0
 8014a56:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014a5e:	683b      	ldr	r3, [r7, #0]
 8014a60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014a64:	2300      	movs	r3, #0
 8014a66:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014a6e:	2300      	movs	r3, #0
 8014a70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8014a74:	2300      	movs	r3, #0
 8014a76:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 8014a78:	2314      	movs	r3, #20
 8014a7a:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d117      	bne.n	8014ab8 <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 8014a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014a8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014a94:	2238      	movs	r2, #56	@ 0x38
 8014a96:	2100      	movs	r1, #0
 8014a98:	4618      	mov	r0, r3
 8014a9a:	f00e f984 	bl	8022da6 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014aa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014aa8:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014aaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014aae:	225a      	movs	r2, #90	@ 0x5a
 8014ab0:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8014ab8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014abc:	2b00      	cmp	r3, #0
 8014abe:	d114      	bne.n	8014aea <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014ac0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ac6:	4619      	mov	r1, r3
 8014ac8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014acc:	f7f5 ff1e 	bl	800a90c <pxDuplicateNetworkBufferWithDescriptor>
 8014ad0:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8014ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d003      	beq.n	8014ae4 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8014adc:	2301      	movs	r3, #1
 8014ade:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014ae2:	e002      	b.n	8014aea <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8014ae4:	48bc      	ldr	r0, [pc, #752]	@ (8014dd8 <prvTCPReturnPacket_IPV4+0x398>)
 8014ae6:	f00d fe35 	bl	8022754 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8014aea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014aee:	2b00      	cmp	r3, #0
 8014af0:	f000 8166 	beq.w	8014dc0 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014afa:	330e      	adds	r3, #14
 8014afc:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8014afe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014b08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014b0c:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8014b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b14:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014b16:	330e      	adds	r3, #14
 8014b18:	4413      	add	r3, r2
 8014b1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014b1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d10b      	bne.n	8014b40 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014b28:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014b2e:	68f8      	ldr	r0, [r7, #12]
 8014b30:	f7ff faf6 	bl	8014120 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014b34:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	f000 813d 	beq.w	8014dba <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d028      	beq.n	8014b98 <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014b46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014b48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014b4c:	68f8      	ldr	r0, [r7, #12]
 8014b4e:	f7ff f865 	bl	8013c1c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8014b56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014b5a:	68f8      	ldr	r0, [r7, #12]
 8014b5c:	f7ff f8d8 	bl	8013d10 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b64:	061a      	lsls	r2, r3, #24
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b6a:	021b      	lsls	r3, r3, #8
 8014b6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014b70:	431a      	orrs	r2, r3
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b76:	0a1b      	lsrs	r3, r3, #8
 8014b78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014b7c:	431a      	orrs	r2, r3
 8014b7e:	68fb      	ldr	r3, [r7, #12]
 8014b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014b82:	0e1b      	lsrs	r3, r3, #24
 8014b84:	431a      	orrs	r2, r3
 8014b86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b88:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8014b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b90:	681a      	ldr	r2, [r3, #0]
 8014b92:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014b94:	60da      	str	r2, [r3, #12]
 8014b96:	e017      	b.n	8014bc8 <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8014b98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014b9c:	685b      	ldr	r3, [r3, #4]
 8014b9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014ba0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014ba4:	689a      	ldr	r2, [r3, #8]
 8014ba6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014baa:	605a      	str	r2, [r3, #4]
 8014bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014bb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014bb2:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8014bb4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bb6:	691b      	ldr	r3, [r3, #16]
 8014bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8014bba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bbc:	68da      	ldr	r2, [r3, #12]
 8014bbe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bc0:	611a      	str	r2, [r3, #16]
 8014bc2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bc4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8014bc6:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014bc8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bca:	2280      	movs	r2, #128	@ 0x80
 8014bcc:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	b29b      	uxth	r3, r3
 8014bd2:	021b      	lsls	r3, r3, #8
 8014bd4:	b29a      	uxth	r2, r3
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	0a1b      	lsrs	r3, r3, #8
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	4313      	orrs	r3, r2
 8014bde:	b29a      	uxth	r2, r3
 8014be0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014be2:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8014be4:	4b7d      	ldr	r3, [pc, #500]	@ (8014ddc <prvTCPReturnPacket_IPV4+0x39c>)
 8014be6:	881b      	ldrh	r3, [r3, #0]
 8014be8:	021b      	lsls	r3, r3, #8
 8014bea:	b21a      	sxth	r2, r3
 8014bec:	4b7b      	ldr	r3, [pc, #492]	@ (8014ddc <prvTCPReturnPacket_IPV4+0x39c>)
 8014bee:	881b      	ldrh	r3, [r3, #0]
 8014bf0:	0a1b      	lsrs	r3, r3, #8
 8014bf2:	b29b      	uxth	r3, r3
 8014bf4:	b21b      	sxth	r3, r3
 8014bf6:	4313      	orrs	r3, r2
 8014bf8:	b21b      	sxth	r3, r3
 8014bfa:	b29a      	uxth	r2, r3
 8014bfc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014bfe:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 8014c00:	4b76      	ldr	r3, [pc, #472]	@ (8014ddc <prvTCPReturnPacket_IPV4+0x39c>)
 8014c02:	881b      	ldrh	r3, [r3, #0]
 8014c04:	3301      	adds	r3, #1
 8014c06:	b29a      	uxth	r2, r3
 8014c08:	4b74      	ldr	r3, [pc, #464]	@ (8014ddc <prvTCPReturnPacket_IPV4+0x39c>)
 8014c0a:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8014c0c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c0e:	2200      	movs	r2, #0
 8014c10:	719a      	strb	r2, [r3, #6]
 8014c12:	2200      	movs	r2, #0
 8014c14:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014c16:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c1a:	781a      	ldrb	r2, [r3, #0]
 8014c1c:	785b      	ldrb	r3, [r3, #1]
 8014c1e:	021b      	lsls	r3, r3, #8
 8014c20:	4313      	orrs	r3, r2
 8014c22:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8014c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c2a:	885b      	ldrh	r3, [r3, #2]
 8014c2c:	b29a      	uxth	r2, r3
 8014c2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c32:	801a      	strh	r2, [r3, #0]
 8014c34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014c38:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8014c3c:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014c3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014c46:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014c4c:	f103 020e 	add.w	r2, r3, #14
 8014c50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c54:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014c56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014c58:	3306      	adds	r3, #6
 8014c5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014c5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014c60:	691b      	ldr	r3, [r3, #16]
 8014c62:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8014c64:	f107 0214 	add.w	r2, r7, #20
 8014c68:	f107 011c 	add.w	r1, r7, #28
 8014c6c:	f107 0318 	add.w	r3, r7, #24
 8014c70:	4618      	mov	r0, r3
 8014c72:	f7f2 fd7f 	bl	8007774 <eARPGetCacheEntry>
 8014c76:	4603      	mov	r3, r0
 8014c78:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014c7c:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014c80:	2b01      	cmp	r3, #1
 8014c82:	d108      	bne.n	8014c96 <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014c84:	f107 031c 	add.w	r3, r7, #28
 8014c88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014c8c:	697a      	ldr	r2, [r7, #20]
 8014c8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014c92:	631a      	str	r2, [r3, #48]	@ 0x30
 8014c94:	e003      	b.n	8014c9e <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014c96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014c98:	3306      	adds	r3, #6
 8014c9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	f000 808a 	beq.w	8014dbe <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014caa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014cac:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014cae:	2206      	movs	r2, #6
 8014cb0:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014cb4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014cb6:	f00d ff69 	bl	8022b8c <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014cba:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014cc0:	33e8      	adds	r3, #232	@ 0xe8
 8014cc2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014cc6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014cc8:	3306      	adds	r3, #6
 8014cca:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014ccc:	2206      	movs	r2, #6
 8014cce:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014cd2:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014cd4:	f00d ff5a 	bl	8022b8c <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8014cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014cde:	2b3b      	cmp	r3, #59	@ 0x3b
 8014ce0:	d81a      	bhi.n	8014d18 <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014ce2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ce8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014cec:	e00c      	b.n	8014d08 <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014cee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014cf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014cf4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014cf8:	4413      	add	r3, r2
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014cfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d02:	3301      	adds	r3, #1
 8014d04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014d08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014d0c:	2b3b      	cmp	r3, #59	@ 0x3b
 8014d0e:	ddee      	ble.n	8014cee <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014d10:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d14:	223c      	movs	r2, #60	@ 0x3c
 8014d16:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8014d18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d1e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d104      	bne.n	8014d30 <prvTCPReturnPacket_IPV4+0x2f0>
 8014d26:	f240 111d 	movw	r1, #285	@ 0x11d
 8014d2a:	482d      	ldr	r0, [pc, #180]	@ (8014de0 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014d2c:	f7ec fe34 	bl	8001998 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014d30:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d36:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014d3a:	68db      	ldr	r3, [r3, #12]
 8014d3c:	2b00      	cmp	r3, #0
 8014d3e:	d104      	bne.n	8014d4a <prvTCPReturnPacket_IPV4+0x30a>
 8014d40:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8014d44:	4826      	ldr	r0, [pc, #152]	@ (8014de0 <prvTCPReturnPacket_IPV4+0x3a0>)
 8014d46:	f7ec fe27 	bl	8001998 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8014d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014d50:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014d54:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014d58:	68db      	ldr	r3, [r3, #12]
 8014d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014d5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014d62:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014d64:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	d121      	bne.n	8014db2 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014d6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014d72:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8014d76:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8014d7a:	021b      	lsls	r3, r3, #8
 8014d7c:	4313      	orrs	r3, r2
 8014d7e:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014d82:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014d86:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8014d88:	b29a      	uxth	r2, r3
 8014d8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014d8e:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014d90:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014d94:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8014d98:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014d9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014d9c:	691a      	ldr	r2, [r3, #16]
 8014d9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014da0:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014da4:	3306      	adds	r3, #6
 8014da6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8014da8:	2206      	movs	r2, #6
 8014daa:	4618      	mov	r0, r3
 8014dac:	f00d feee 	bl	8022b8c <memcpy>
 8014db0:	e006      	b.n	8014dc0 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8014db2:	2300      	movs	r3, #0
 8014db4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014db8:	e002      	b.n	8014dc0 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8014dba:	bf00      	nop
 8014dbc:	e000      	b.n	8014dc0 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014dbe:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014dc0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014dc4:	2b01      	cmp	r3, #1
 8014dc6:	d103      	bne.n	8014dd0 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014dc8:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014dcc:	f002 fe1a 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014dd0:	bf00      	nop
 8014dd2:	3798      	adds	r7, #152	@ 0x98
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}
 8014dd8:	08027124 	.word	0x08027124
 8014ddc:	200011a4 	.word	0x200011a4
 8014de0:	0802714c 	.word	0x0802714c

08014de4 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014de6:	b093      	sub	sp, #76	@ 0x4c
 8014de8:	af06      	add	r7, sp, #24
 8014dea:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014dec:	2301      	movs	r3, #1
 8014dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014df0:	2300      	movs	r3, #0
 8014df2:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014df4:	f107 030c 	add.w	r3, r7, #12
 8014df8:	2206      	movs	r2, #6
 8014dfa:	2100      	movs	r1, #0
 8014dfc:	4618      	mov	r0, r3
 8014dfe:	f00d ffd2 	bl	8022da6 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e06:	061a      	lsls	r2, r3, #24
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e0c:	021b      	lsls	r3, r3, #8
 8014e0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014e12:	431a      	orrs	r2, r3
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e18:	0a1b      	lsrs	r3, r3, #8
 8014e1a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014e1e:	431a      	orrs	r2, r3
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014e24:	0e1b      	lsrs	r3, r3, #24
 8014e26:	4313      	orrs	r3, r2
 8014e28:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8014e30:	f107 010c 	add.w	r1, r7, #12
 8014e34:	f107 0314 	add.w	r3, r7, #20
 8014e38:	4618      	mov	r0, r3
 8014e3a:	f7f2 fc9b 	bl	8007774 <eARPGetCacheEntry>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8014e44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8014e48:	2b01      	cmp	r3, #1
 8014e4a:	d037      	beq.n	8014ebc <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014e52:	3301      	adds	r3, #1
 8014e54:	b2da      	uxtb	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014e60:	697b      	ldr	r3, [r7, #20]
 8014e62:	061a      	lsls	r2, r3, #24
 8014e64:	697b      	ldr	r3, [r7, #20]
 8014e66:	021b      	lsls	r3, r3, #8
 8014e68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014e6c:	431a      	orrs	r2, r3
 8014e6e:	697b      	ldr	r3, [r7, #20]
 8014e70:	0a1b      	lsrs	r3, r3, #8
 8014e72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014e76:	431a      	orrs	r2, r3
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	0e1b      	lsrs	r3, r3, #24
 8014e7c:	431a      	orrs	r2, r3
 8014e7e:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8014e82:	7b38      	ldrb	r0, [r7, #12]
 8014e84:	7b7c      	ldrb	r4, [r7, #13]
 8014e86:	7bbd      	ldrb	r5, [r7, #14]
 8014e88:	7bfe      	ldrb	r6, [r7, #15]
 8014e8a:	f897 c010 	ldrb.w	ip, [r7, #16]
 8014e8e:	f8c7 c000 	str.w	ip, [r7]
 8014e92:	f897 c011 	ldrb.w	ip, [r7, #17]
 8014e96:	4663      	mov	r3, ip
 8014e98:	9305      	str	r3, [sp, #20]
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	9304      	str	r3, [sp, #16]
 8014e9e:	9603      	str	r6, [sp, #12]
 8014ea0:	9502      	str	r5, [sp, #8]
 8014ea2:	9401      	str	r4, [sp, #4]
 8014ea4:	9000      	str	r0, [sp, #0]
 8014ea6:	4673      	mov	r3, lr
 8014ea8:	485a      	ldr	r0, [pc, #360]	@ (8015014 <prvTCPPrepareConnect_IPV4+0x230>)
 8014eaa:	f00d fc53 	bl	8022754 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8014eae:	697b      	ldr	r3, [r7, #20]
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	f7f2 feb3 	bl	8007c1c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 8014eb6:	2300      	movs	r3, #0
 8014eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8014eba:	e000      	b.n	8014ebe <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014ebc:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d010      	beq.n	8014ee6 <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014ed6:	f7ec fd7f 	bl	80019d8 <ulApplicationGetNextSequenceNumber>
 8014eda:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d101      	bne.n	8014ee6 <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 8014ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	f000 808d 	beq.w	8015008 <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	33aa      	adds	r3, #170	@ 0xaa
 8014ef2:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014ef4:	6a3b      	ldr	r3, [r7, #32]
 8014ef6:	330e      	adds	r3, #14
 8014ef8:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	2200      	movs	r2, #0
 8014efe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014f02:	687a      	ldr	r2, [r7, #4]
 8014f04:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014f08:	f043 0308 	orr.w	r3, r3, #8
 8014f0c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	33aa      	adds	r3, #170	@ 0xaa
 8014f14:	225a      	movs	r2, #90	@ 0x5a
 8014f16:	2100      	movs	r1, #0
 8014f18:	4618      	mov	r0, r3
 8014f1a:	f00d ff44 	bl	8022da6 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014f1e:	6a3b      	ldr	r3, [r7, #32]
 8014f20:	3306      	adds	r3, #6
 8014f22:	461a      	mov	r2, r3
 8014f24:	f107 030c 	add.w	r3, r7, #12
 8014f28:	6818      	ldr	r0, [r3, #0]
 8014f2a:	6010      	str	r0, [r2, #0]
 8014f2c:	889b      	ldrh	r3, [r3, #4]
 8014f2e:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8014f30:	6a3b      	ldr	r3, [r7, #32]
 8014f32:	2200      	movs	r2, #0
 8014f34:	f042 0208 	orr.w	r2, r2, #8
 8014f38:	731a      	strb	r2, [r3, #12]
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8014f3e:	69fb      	ldr	r3, [r7, #28]
 8014f40:	2245      	movs	r2, #69	@ 0x45
 8014f42:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8014f44:	2338      	movs	r3, #56	@ 0x38
 8014f46:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8014f48:	8b7b      	ldrh	r3, [r7, #26]
 8014f4a:	021b      	lsls	r3, r3, #8
 8014f4c:	b21a      	sxth	r2, r3
 8014f4e:	8b7b      	ldrh	r3, [r7, #26]
 8014f50:	0a1b      	lsrs	r3, r3, #8
 8014f52:	b29b      	uxth	r3, r3
 8014f54:	b21b      	sxth	r3, r3
 8014f56:	4313      	orrs	r3, r2
 8014f58:	b21b      	sxth	r3, r3
 8014f5a:	b29a      	uxth	r2, r3
 8014f5c:	69fb      	ldr	r3, [r7, #28]
 8014f5e:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014f60:	69fb      	ldr	r3, [r7, #28]
 8014f62:	2280      	movs	r2, #128	@ 0x80
 8014f64:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8014f66:	69fb      	ldr	r3, [r7, #28]
 8014f68:	2206      	movs	r2, #6
 8014f6a:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f70:	061a      	lsls	r2, r3, #24
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f76:	021b      	lsls	r3, r3, #8
 8014f78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014f7c:	431a      	orrs	r2, r3
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f82:	0a1b      	lsrs	r3, r3, #8
 8014f84:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014f88:	431a      	orrs	r2, r3
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f8e:	0e1b      	lsrs	r3, r3, #24
 8014f90:	431a      	orrs	r2, r3
 8014f92:	69fb      	ldr	r3, [r7, #28]
 8014f94:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014f9c:	021b      	lsls	r3, r3, #8
 8014f9e:	b21a      	sxth	r2, r3
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014fa6:	0a1b      	lsrs	r3, r3, #8
 8014fa8:	b29b      	uxth	r3, r3
 8014faa:	b21b      	sxth	r3, r3
 8014fac:	4313      	orrs	r3, r2
 8014fae:	b21b      	sxth	r3, r3
 8014fb0:	b29a      	uxth	r2, r3
 8014fb2:	6a3b      	ldr	r3, [r7, #32]
 8014fb4:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014fba:	021b      	lsls	r3, r3, #8
 8014fbc:	b21a      	sxth	r2, r3
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014fc2:	0a1b      	lsrs	r3, r3, #8
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	b21b      	sxth	r3, r3
 8014fc8:	4313      	orrs	r3, r2
 8014fca:	b21b      	sxth	r3, r3
 8014fcc:	b29a      	uxth	r2, r3
 8014fce:	6a3b      	ldr	r3, [r7, #32]
 8014fd0:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	2200      	movs	r2, #0
 8014fd6:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014fde:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8014fe2:	6a3b      	ldr	r3, [r7, #32]
 8014fe4:	2250      	movs	r2, #80	@ 0x50
 8014fe6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014fea:	6a3b      	ldr	r3, [r7, #32]
 8014fec:	2202      	movs	r2, #2
 8014fee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014ff2:	6878      	ldr	r0, [r7, #4]
 8014ff4:	f000 fc3c 	bl	8015870 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014ff8:	6878      	ldr	r0, [r7, #4]
 8014ffa:	f7fe ff2b 	bl	8013e54 <prvTCPCreateWindow>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b01      	cmp	r3, #1
 8015002:	d001      	beq.n	8015008 <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8015004:	2300      	movs	r3, #0
 8015006:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 8015008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801500a:	4618      	mov	r0, r3
 801500c:	3734      	adds	r7, #52	@ 0x34
 801500e:	46bd      	mov	sp, r7
 8015010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015012:	bf00      	nop
 8015014:	0802718c 	.word	0x0802718c

08015018 <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b086      	sub	sp, #24
 801501c:	af00      	add	r7, sp, #0
 801501e:	6078      	str	r0, [r7, #4]
 8015020:	460b      	mov	r3, r1
 8015022:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015028:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801502a:	2328      	movs	r3, #40	@ 0x28
 801502c:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 801502e:	697b      	ldr	r3, [r7, #20]
 8015030:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8015034:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	78fa      	ldrb	r2, [r7, #3]
 801503a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 801503e:	697b      	ldr	r3, [r7, #20]
 8015040:	2250      	movs	r2, #80	@ 0x50
 8015042:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8015046:	7bfb      	ldrb	r3, [r7, #15]
 8015048:	f003 0302 	and.w	r3, r3, #2
 801504c:	2b00      	cmp	r3, #0
 801504e:	d02c      	beq.n	80150aa <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8015050:	697b      	ldr	r3, [r7, #20]
 8015052:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8015056:	061a      	lsls	r2, r3, #24
 8015058:	697b      	ldr	r3, [r7, #20]
 801505a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801505e:	021b      	lsls	r3, r3, #8
 8015060:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015064:	431a      	orrs	r2, r3
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801506c:	0a1b      	lsrs	r3, r3, #8
 801506e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015072:	431a      	orrs	r2, r3
 8015074:	697b      	ldr	r3, [r7, #20]
 8015076:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801507a:	0e1b      	lsrs	r3, r3, #24
 801507c:	4313      	orrs	r3, r2
 801507e:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	3301      	adds	r3, #1
 8015084:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8015086:	68bb      	ldr	r3, [r7, #8]
 8015088:	061a      	lsls	r2, r3, #24
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	021b      	lsls	r3, r3, #8
 801508e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015092:	431a      	orrs	r2, r3
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	0a1b      	lsrs	r3, r3, #8
 8015098:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801509c:	431a      	orrs	r2, r3
 801509e:	68bb      	ldr	r3, [r7, #8]
 80150a0:	0e1b      	lsrs	r3, r3, #24
 80150a2:	431a      	orrs	r2, r3
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 80150aa:	2300      	movs	r3, #0
 80150ac:	693a      	ldr	r2, [r7, #16]
 80150ae:	6879      	ldr	r1, [r7, #4]
 80150b0:	2000      	movs	r0, #0
 80150b2:	f7fe fd73 	bl	8013b9c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80150b6:	2300      	movs	r3, #0
}
 80150b8:	4618      	mov	r0, r3
 80150ba:	3718      	adds	r7, #24
 80150bc:	46bd      	mov	sp, r7
 80150be:	bd80      	pop	{r7, pc}

080150c0 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 80150c0:	b5b0      	push	{r4, r5, r7, lr}
 80150c2:	b0aa      	sub	sp, #168	@ 0xa8
 80150c4:	af00      	add	r7, sp, #0
 80150c6:	60f8      	str	r0, [r7, #12]
 80150c8:	60b9      	str	r1, [r7, #8]
 80150ca:	607a      	str	r2, [r7, #4]
 80150cc:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80150ce:	2300      	movs	r3, #0
 80150d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 80150d4:	2300      	movs	r3, #0
 80150d6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 80150da:	2300      	movs	r3, #0
 80150dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 80150e6:	2300      	movs	r3, #0
 80150e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 80150f2:	2300      	movs	r3, #0
 80150f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 80150f8:	2300      	movs	r3, #0
 80150fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 80150fe:	2328      	movs	r3, #40	@ 0x28
 8015100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8015104:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015108:	2b00      	cmp	r3, #0
 801510a:	d103      	bne.n	8015114 <prvTCPReturnPacket_IPV6+0x54>
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	f000 81ae 	beq.w	8015470 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8015114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015118:	2b00      	cmp	r3, #0
 801511a:	d117      	bne.n	801514c <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 801511c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015120:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8015124:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8015128:	2238      	movs	r2, #56	@ 0x38
 801512a:	2100      	movs	r1, #0
 801512c:	4618      	mov	r0, r3
 801512e:	f00d fe3a 	bl	8022da6 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8015132:	68fb      	ldr	r3, [r7, #12]
 8015134:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8015138:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801513c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801513e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015142:	225a      	movs	r2, #90	@ 0x5a
 8015144:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8015146:	2300      	movs	r3, #0
 8015148:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801514c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015150:	2b00      	cmp	r3, #0
 8015152:	d114      	bne.n	801517e <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8015154:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801515a:	4619      	mov	r1, r3
 801515c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8015160:	f7f5 fbd4 	bl	800a90c <pxDuplicateNetworkBufferWithDescriptor>
 8015164:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 8015168:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801516c:	2b00      	cmp	r3, #0
 801516e:	d003      	beq.n	8015178 <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8015170:	2301      	movs	r3, #1
 8015172:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8015176:	e002      	b.n	801517e <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8015178:	48c0      	ldr	r0, [pc, #768]	@ (801547c <prvTCPReturnPacket_IPV6+0x3bc>)
 801517a:	f00d faeb 	bl	8022754 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 801517e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015182:	2b00      	cmp	r3, #0
 8015184:	f000 8175 	beq.w	8015472 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015188:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801518c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801518e:	2b00      	cmp	r3, #0
 8015190:	d103      	bne.n	801519a <prvTCPReturnPacket_IPV6+0xda>
 8015192:	219d      	movs	r1, #157	@ 0x9d
 8015194:	48ba      	ldr	r0, [pc, #744]	@ (8015480 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015196:	f7ec fbff 	bl	8001998 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801519a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151a0:	330e      	adds	r3, #14
 80151a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80151a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80151b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80151b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80151b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80151be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80151c2:	330e      	adds	r3, #14
 80151c4:	4413      	add	r3, r2
 80151c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80151ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	d117      	bne.n	8015204 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80151d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80151d8:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80151dc:	68f8      	ldr	r0, [r7, #12]
 80151de:	f7fe ff9f 	bl	8014120 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 80151e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80151e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d10b      	bne.n	8015204 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 80151ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d003      	beq.n	80151fc <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80151f4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 80151f8:	f002 fc04 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 80151fc:	2300      	movs	r3, #0
 80151fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8015202:	e136      	b.n	8015472 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2b00      	cmp	r3, #0
 8015208:	d025      	beq.n	8015256 <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801520a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801520e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015212:	68f8      	ldr	r0, [r7, #12]
 8015214:	f7fe fd02 	bl	8013c1c <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801521e:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015222:	68f8      	ldr	r0, [r7, #12]
 8015224:	f7fe fd74 	bl	8013d10 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015228:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801522c:	f103 0018 	add.w	r0, r3, #24
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	3354      	adds	r3, #84	@ 0x54
 8015234:	2210      	movs	r2, #16
 8015236:	4619      	mov	r1, r3
 8015238:	f00d fca8 	bl	8022b8c <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801523c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015240:	f103 0008 	add.w	r0, r3, #8
 8015244:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801524a:	3338      	adds	r3, #56	@ 0x38
 801524c:	2210      	movs	r2, #16
 801524e:	4619      	mov	r1, r3
 8015250:	f00d fc9c 	bl	8022b8c <memcpy>
 8015254:	e02d      	b.n	80152b2 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8015256:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801525e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015262:	689a      	ldr	r2, [r3, #8]
 8015264:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015268:	605a      	str	r2, [r3, #4]
 801526a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801526e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8015270:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015272:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015276:	3318      	adds	r3, #24
 8015278:	f107 0410 	add.w	r4, r7, #16
 801527c:	6818      	ldr	r0, [r3, #0]
 801527e:	6859      	ldr	r1, [r3, #4]
 8015280:	689a      	ldr	r2, [r3, #8]
 8015282:	68db      	ldr	r3, [r3, #12]
 8015284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015286:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801528a:	f103 0018 	add.w	r0, r3, #24
 801528e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015292:	3308      	adds	r3, #8
 8015294:	2210      	movs	r2, #16
 8015296:	4619      	mov	r1, r3
 8015298:	f00d fc78 	bl	8022b8c <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801529c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152a0:	3308      	adds	r3, #8
 80152a2:	461d      	mov	r5, r3
 80152a4:	f107 0410 	add.w	r4, r7, #16
 80152a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80152aa:	6028      	str	r0, [r5, #0]
 80152ac:	6069      	str	r1, [r5, #4]
 80152ae:	60aa      	str	r2, [r5, #8]
 80152b0:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	b29b      	uxth	r3, r3
 80152b6:	3b28      	subs	r3, #40	@ 0x28
 80152b8:	b29b      	uxth	r3, r3
 80152ba:	021b      	lsls	r3, r3, #8
 80152bc:	b29a      	uxth	r2, r3
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	3b28      	subs	r3, #40	@ 0x28
 80152c2:	0a1b      	lsrs	r3, r3, #8
 80152c4:	b29b      	uxth	r3, r3
 80152c6:	4313      	orrs	r3, r2
 80152c8:	b29a      	uxth	r2, r3
 80152ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80152ce:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80152d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152d4:	781a      	ldrb	r2, [r3, #0]
 80152d6:	785b      	ldrb	r3, [r3, #1]
 80152d8:	021b      	lsls	r3, r3, #8
 80152da:	4313      	orrs	r3, r2
 80152dc:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80152e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152e4:	885b      	ldrh	r3, [r3, #2]
 80152e6:	b29a      	uxth	r2, r3
 80152e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152ec:	801a      	strh	r2, [r3, #0]
 80152ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80152f2:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80152f6:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 80152f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80152fc:	687a      	ldr	r2, [r7, #4]
 80152fe:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8015300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015306:	f103 020e 	add.w	r2, r3, #14
 801530a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801530e:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015310:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015314:	3318      	adds	r3, #24
 8015316:	f107 0420 	add.w	r4, r7, #32
 801531a:	6818      	ldr	r0, [r3, #0]
 801531c:	6859      	ldr	r1, [r3, #4]
 801531e:	689a      	ldr	r2, [r3, #8]
 8015320:	68db      	ldr	r3, [r3, #12]
 8015322:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8015324:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015328:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801532c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015330:	f107 0320 	add.w	r3, r7, #32
 8015334:	4618      	mov	r0, r3
 8015336:	f7f6 fe89 	bl	800c04c <eNDGetCacheEntry>
 801533a:	4603      	mov	r3, r0
 801533c:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8015340:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8015344:	2b01      	cmp	r3, #1
 8015346:	d104      	bne.n	8015352 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8015348:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801534c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8015350:	e004      	b.n	801535c <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8015352:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015356:	3306      	adds	r3, #6
 8015358:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801535c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8015364:	2206      	movs	r2, #6
 8015366:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801536a:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 801536e:	f00d fc0d 	bl	8022b8c <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8015372:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8015376:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015378:	33e8      	adds	r3, #232	@ 0xe8
 801537a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801537e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015382:	3306      	adds	r3, #6
 8015384:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8015388:	2206      	movs	r2, #6
 801538a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801538e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8015392:	f00d fbfb 	bl	8022b8c <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015396:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801539a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801539c:	2b3b      	cmp	r3, #59	@ 0x3b
 801539e:	d81a      	bhi.n	80153d6 <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80153a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80153a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80153aa:	e00c      	b.n	80153c6 <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80153ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80153b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80153b6:	4413      	add	r3, r2
 80153b8:	2200      	movs	r2, #0
 80153ba:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80153bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80153c0:	3301      	adds	r3, #1
 80153c2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80153c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80153ca:	2b3b      	cmp	r3, #59	@ 0x3b
 80153cc:	ddee      	ble.n	80153ac <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80153ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153d2:	223c      	movs	r2, #60	@ 0x3c
 80153d4:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 80153d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153dc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80153e0:	2b00      	cmp	r3, #0
 80153e2:	d104      	bne.n	80153ee <prvTCPReturnPacket_IPV6+0x32e>
 80153e4:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80153e8:	4825      	ldr	r0, [pc, #148]	@ (8015480 <prvTCPReturnPacket_IPV6+0x3c0>)
 80153ea:	f7ec fad5 	bl	8001998 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80153ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80153f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80153f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d104      	bne.n	8015408 <prvTCPReturnPacket_IPV6+0x348>
 80153fe:	f240 1119 	movw	r1, #281	@ 0x119
 8015402:	481f      	ldr	r0, [pc, #124]	@ (8015480 <prvTCPReturnPacket_IPV6+0x3c0>)
 8015404:	f7ec fac8 	bl	8001998 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015408:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801540c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801540e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015412:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8015414:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8015416:	68db      	ldr	r3, [r3, #12]
 8015418:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 801541c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8015420:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8015422:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8015424:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8015428:	2b00      	cmp	r3, #0
 801542a:	d122      	bne.n	8015472 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 801542c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015430:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8015434:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8015438:	021b      	lsls	r3, r3, #8
 801543a:	4313      	orrs	r3, r2
 801543c:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8015440:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015444:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015446:	b29a      	uxth	r2, r3
 8015448:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801544c:	86da      	strh	r2, [r3, #54]	@ 0x36
 801544e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015452:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8015456:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8015458:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801545c:	f103 0008 	add.w	r0, r3, #8
 8015460:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8015464:	3318      	adds	r3, #24
 8015466:	2210      	movs	r2, #16
 8015468:	4619      	mov	r1, r3
 801546a:	f00d fb8f 	bl	8022b8c <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 801546e:	e000      	b.n	8015472 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8015470:	bf00      	nop
}
 8015472:	bf00      	nop
 8015474:	37a8      	adds	r7, #168	@ 0xa8
 8015476:	46bd      	mov	sp, r7
 8015478:	bdb0      	pop	{r4, r5, r7, pc}
 801547a:	bf00      	nop
 801547c:	080271cc 	.word	0x080271cc
 8015480:	080271f4 	.word	0x080271f4

08015484 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015484:	b590      	push	{r4, r7, lr}
 8015486:	b093      	sub	sp, #76	@ 0x4c
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 801548c:	2300      	movs	r3, #0
 801548e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8015490:	2300      	movs	r3, #0
 8015492:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8015494:	2301      	movs	r3, #1
 8015496:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8015498:	2300      	movs	r3, #0
 801549a:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 801549c:	2300      	movs	r3, #0
 801549e:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 80154a0:	2300      	movs	r3, #0
 80154a2:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 80154a4:	f107 0310 	add.w	r3, r7, #16
 80154a8:	2206      	movs	r2, #6
 80154aa:	2100      	movs	r1, #0
 80154ac:	4618      	mov	r0, r3
 80154ae:	f00d fc7a 	bl	8022da6 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 80154b2:	f107 0318 	add.w	r3, r7, #24
 80154b6:	2210      	movs	r2, #16
 80154b8:	2100      	movs	r1, #0
 80154ba:	4618      	mov	r0, r3
 80154bc:	f00d fc73 	bl	8022da6 <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	3354      	adds	r3, #84	@ 0x54
 80154c4:	f107 0418 	add.w	r4, r7, #24
 80154c8:	6818      	ldr	r0, [r3, #0]
 80154ca:	6859      	ldr	r1, [r3, #4]
 80154cc:	689a      	ldr	r2, [r3, #8]
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 80154d2:	f107 020c 	add.w	r2, r7, #12
 80154d6:	f107 0110 	add.w	r1, r7, #16
 80154da:	f107 0318 	add.w	r3, r7, #24
 80154de:	4618      	mov	r0, r3
 80154e0:	f7f6 fdb4 	bl	800c04c <eNDGetCacheEntry>
 80154e4:	4603      	mov	r3, r0
 80154e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 80154ea:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80154ee:	68fa      	ldr	r2, [r7, #12]
 80154f0:	4619      	mov	r1, r3
 80154f2:	4881      	ldr	r0, [pc, #516]	@ (80156f8 <prvTCPPrepareConnect_IPV6+0x274>)
 80154f4:	f00d f92e 	bl	8022754 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 80154f8:	68fb      	ldr	r3, [r7, #12]
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d002      	beq.n	8015504 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80154fe:	68fa      	ldr	r2, [r7, #12]
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8015504:	6878      	ldr	r0, [r7, #4]
 8015506:	f7f4 ff69 	bl	800a3dc <uxIPHeaderSizeSocket>
 801550a:	4603      	mov	r3, r0
 801550c:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801550e:	33a0      	adds	r3, #160	@ 0xa0
 8015510:	687a      	ldr	r2, [r7, #4]
 8015512:	4413      	add	r3, r2
 8015514:	330a      	adds	r3, #10
 8015516:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8015518:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801551c:	2b01      	cmp	r3, #1
 801551e:	d02c      	beq.n	801557a <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8015526:	3301      	adds	r3, #1
 8015528:	b2da      	uxtb	r2, r3
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d001      	beq.n	801553a <prvTCPPrepareConnect_IPV6+0xb6>
 8015536:	4a71      	ldr	r2, [pc, #452]	@ (80156fc <prvTCPPrepareConnect_IPV6+0x278>)
 8015538:	e000      	b.n	801553c <prvTCPPrepareConnect_IPV6+0xb8>
 801553a:	4a71      	ldr	r2, [pc, #452]	@ (8015700 <prvTCPPrepareConnect_IPV6+0x27c>)
 801553c:	f107 0318 	add.w	r3, r7, #24
 8015540:	4619      	mov	r1, r3
 8015542:	4870      	ldr	r0, [pc, #448]	@ (8015704 <prvTCPPrepareConnect_IPV6+0x280>)
 8015544:	f00d f906 	bl	8022754 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d012      	beq.n	8015574 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 801554e:	2356      	movs	r3, #86	@ 0x56
 8015550:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8015552:	2100      	movs	r1, #0
 8015554:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015556:	f002 f9ed 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 801555a:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 801555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801555e:	2b00      	cmp	r3, #0
 8015560:	d008      	beq.n	8015574 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015562:	68fa      	ldr	r2, [r7, #12]
 8015564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015566:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 8015568:	f107 0318 	add.w	r3, r7, #24
 801556c:	4619      	mov	r1, r3
 801556e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015570:	f7f6 ffd8 	bl	800c524 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8015574:	2300      	movs	r3, #0
 8015576:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8015578:	e000      	b.n	801557c <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 801557a:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 801557c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801557e:	2b00      	cmp	r3, #0
 8015580:	d010      	beq.n	80155a4 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015594:	f7ec fa20 	bl	80019d8 <ulApplicationGetNextSequenceNumber>
 8015598:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 801559a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801559c:	2b00      	cmp	r3, #0
 801559e:	d101      	bne.n	80155a4 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 80155a0:	2300      	movs	r3, #0
 80155a2:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 80155a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d05d      	beq.n	8015666 <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	33aa      	adds	r3, #170	@ 0xaa
 80155ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 80155b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155b2:	330e      	adds	r3, #14
 80155b4:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	2200      	movs	r2, #0
 80155ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 80155be:	687a      	ldr	r2, [r7, #4]
 80155c0:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80155c4:	f043 0308 	orr.w	r3, r3, #8
 80155c8:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	33aa      	adds	r3, #170	@ 0xaa
 80155d0:	225a      	movs	r2, #90	@ 0x5a
 80155d2:	2100      	movs	r1, #0
 80155d4:	4618      	mov	r0, r3
 80155d6:	f00d fbe6 	bl	8022da6 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 80155da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155dc:	3306      	adds	r3, #6
 80155de:	461a      	mov	r2, r3
 80155e0:	f107 0310 	add.w	r3, r7, #16
 80155e4:	6818      	ldr	r0, [r3, #0]
 80155e6:	6010      	str	r0, [r2, #0]
 80155e8:	889b      	ldrh	r3, [r3, #4]
 80155ea:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	7a1b      	ldrb	r3, [r3, #8]
 80155f0:	f003 0301 	and.w	r3, r3, #1
 80155f4:	b2db      	uxtb	r3, r3
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d035      	beq.n	8015666 <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 80155fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80155fc:	2200      	movs	r2, #0
 80155fe:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8015602:	731a      	strb	r2, [r3, #12]
 8015604:	2200      	movs	r2, #0
 8015606:	f062 0222 	orn	r2, r2, #34	@ 0x22
 801560a:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 801560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801560e:	2260      	movs	r2, #96	@ 0x60
 8015610:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8015612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015614:	2200      	movs	r2, #0
 8015616:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8015618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801561a:	2200      	movs	r2, #0
 801561c:	709a      	strb	r2, [r3, #2]
 801561e:	2200      	movs	r2, #0
 8015620:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8015622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015624:	2200      	movs	r2, #0
 8015626:	711a      	strb	r2, [r3, #4]
 8015628:	2200      	movs	r2, #0
 801562a:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 801562e:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8015630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015632:	2206      	movs	r2, #6
 8015634:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8015636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015638:	2280      	movs	r2, #128	@ 0x80
 801563a:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 801563c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801563e:	f103 0008 	add.w	r0, r3, #8
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	3354      	adds	r3, #84	@ 0x54
 8015646:	2210      	movs	r2, #16
 8015648:	4619      	mov	r1, r3
 801564a:	f00d fa9f 	bl	8022b8c <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 801564e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015650:	f103 0018 	add.w	r0, r3, #24
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	3328      	adds	r3, #40	@ 0x28
 8015658:	2210      	movs	r2, #16
 801565a:	4619      	mov	r1, r3
 801565c:	f00d fa96 	bl	8022b8c <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015664:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d03a      	beq.n	80156e2 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 801566c:	68fa      	ldr	r2, [r7, #12]
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015678:	021b      	lsls	r3, r3, #8
 801567a:	b21a      	sxth	r2, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015682:	0a1b      	lsrs	r3, r3, #8
 8015684:	b29b      	uxth	r3, r3
 8015686:	b21b      	sxth	r3, r3
 8015688:	4313      	orrs	r3, r2
 801568a:	b21b      	sxth	r3, r3
 801568c:	b29a      	uxth	r2, r3
 801568e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015690:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8015696:	021b      	lsls	r3, r3, #8
 8015698:	b21a      	sxth	r2, r3
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801569e:	0a1b      	lsrs	r3, r3, #8
 80156a0:	b29b      	uxth	r3, r3
 80156a2:	b21b      	sxth	r3, r3
 80156a4:	4313      	orrs	r3, r2
 80156a6:	b21b      	sxth	r3, r3
 80156a8:	b29a      	uxth	r2, r3
 80156aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156ac:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	2200      	movs	r2, #0
 80156b2:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80156ba:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 80156be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156c0:	2250      	movs	r2, #80	@ 0x50
 80156c2:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 80156c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80156c6:	2202      	movs	r2, #2
 80156c8:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	f000 f8d0 	bl	8015870 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80156d0:	6878      	ldr	r0, [r7, #4]
 80156d2:	f7fe fbbf 	bl	8013e54 <prvTCPCreateWindow>
 80156d6:	4603      	mov	r3, r0
 80156d8:	2b01      	cmp	r3, #1
 80156da:	d007      	beq.n	80156ec <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 80156dc:	2300      	movs	r3, #0
 80156de:	647b      	str	r3, [r7, #68]	@ 0x44
 80156e0:	e004      	b.n	80156ec <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 80156e2:	4809      	ldr	r0, [pc, #36]	@ (8015708 <prvTCPPrepareConnect_IPV6+0x284>)
 80156e4:	f00d f836 	bl	8022754 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 80156e8:	2300      	movs	r3, #0
 80156ea:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 80156ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	374c      	adds	r7, #76	@ 0x4c
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd90      	pop	{r4, r7, pc}
 80156f6:	bf00      	nop
 80156f8:	08027234 	.word	0x08027234
 80156fc:	0802725c 	.word	0x0802725c
 8015700:	08027260 	.word	0x08027260
 8015704:	08027264 	.word	0x08027264
 8015708:	08027288 	.word	0x08027288

0801570c <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 801570c:	b580      	push	{r7, lr}
 801570e:	b086      	sub	sp, #24
 8015710:	af00      	add	r7, sp, #0
 8015712:	6078      	str	r0, [r7, #4]
 8015714:	460b      	mov	r3, r1
 8015716:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801571c:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 801571e:	233c      	movs	r3, #60	@ 0x3c
 8015720:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8015722:	697b      	ldr	r3, [r7, #20]
 8015724:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015728:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 801572a:	697b      	ldr	r3, [r7, #20]
 801572c:	78fa      	ldrb	r2, [r7, #3]
 801572e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8015732:	697b      	ldr	r3, [r7, #20]
 8015734:	2250      	movs	r2, #80	@ 0x50
 8015736:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 801573a:	7bfb      	ldrb	r3, [r7, #15]
 801573c:	f003 0302 	and.w	r3, r3, #2
 8015740:	2b00      	cmp	r3, #0
 8015742:	d02c      	beq.n	801579e <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801574a:	061a      	lsls	r2, r3, #24
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015752:	021b      	lsls	r3, r3, #8
 8015754:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015758:	431a      	orrs	r2, r3
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8015760:	0a1b      	lsrs	r3, r3, #8
 8015762:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015766:	431a      	orrs	r2, r3
 8015768:	697b      	ldr	r3, [r7, #20]
 801576a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801576e:	0e1b      	lsrs	r3, r3, #24
 8015770:	4313      	orrs	r3, r2
 8015772:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	3301      	adds	r3, #1
 8015778:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801577a:	68bb      	ldr	r3, [r7, #8]
 801577c:	061a      	lsls	r2, r3, #24
 801577e:	68bb      	ldr	r3, [r7, #8]
 8015780:	021b      	lsls	r3, r3, #8
 8015782:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015786:	431a      	orrs	r2, r3
 8015788:	68bb      	ldr	r3, [r7, #8]
 801578a:	0a1b      	lsrs	r3, r3, #8
 801578c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015790:	431a      	orrs	r2, r3
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	0e1b      	lsrs	r3, r3, #24
 8015796:	431a      	orrs	r2, r3
 8015798:	697b      	ldr	r3, [r7, #20]
 801579a:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801579e:	2300      	movs	r3, #0
 80157a0:	693a      	ldr	r2, [r7, #16]
 80157a2:	6879      	ldr	r1, [r7, #4]
 80157a4:	2000      	movs	r0, #0
 80157a6:	f7fe f9f9 	bl	8013b9c <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 80157aa:	2300      	movs	r3, #0
}
 80157ac:	4618      	mov	r0, r3
 80157ae:	3718      	adds	r7, #24
 80157b0:	46bd      	mov	sp, r7
 80157b2:	bd80      	pop	{r7, pc}

080157b4 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 80157b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157b6:	b08d      	sub	sp, #52	@ 0x34
 80157b8:	af08      	add	r7, sp, #32
 80157ba:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 80157c0:	68fb      	ldr	r3, [r7, #12]
 80157c2:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d002      	beq.n	80157d0 <prvTCPFlagMeaning+0x1c>
 80157ca:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 80157ce:	e001      	b.n	80157d4 <prvTCPFlagMeaning+0x20>
 80157d0:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d001      	beq.n	80157e2 <prvTCPFlagMeaning+0x2e>
 80157de:	2353      	movs	r3, #83	@ 0x53
 80157e0:	e000      	b.n	80157e4 <prvTCPFlagMeaning+0x30>
 80157e2:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 80157e4:	68fa      	ldr	r2, [r7, #12]
 80157e6:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 80157ea:	2a00      	cmp	r2, #0
 80157ec:	d001      	beq.n	80157f2 <prvTCPFlagMeaning+0x3e>
 80157ee:	2252      	movs	r2, #82	@ 0x52
 80157f0:	e000      	b.n	80157f4 <prvTCPFlagMeaning+0x40>
 80157f2:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 80157f4:	68f9      	ldr	r1, [r7, #12]
 80157f6:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 80157fa:	2900      	cmp	r1, #0
 80157fc:	d001      	beq.n	8015802 <prvTCPFlagMeaning+0x4e>
 80157fe:	2150      	movs	r1, #80	@ 0x50
 8015800:	e000      	b.n	8015804 <prvTCPFlagMeaning+0x50>
 8015802:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8015804:	68f8      	ldr	r0, [r7, #12]
 8015806:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 801580a:	2800      	cmp	r0, #0
 801580c:	d001      	beq.n	8015812 <prvTCPFlagMeaning+0x5e>
 801580e:	2041      	movs	r0, #65	@ 0x41
 8015810:	e000      	b.n	8015814 <prvTCPFlagMeaning+0x60>
 8015812:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8015814:	68fc      	ldr	r4, [r7, #12]
 8015816:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 801581a:	2c00      	cmp	r4, #0
 801581c:	d001      	beq.n	8015822 <prvTCPFlagMeaning+0x6e>
 801581e:	2455      	movs	r4, #85	@ 0x55
 8015820:	e000      	b.n	8015824 <prvTCPFlagMeaning+0x70>
 8015822:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8015824:	68fd      	ldr	r5, [r7, #12]
 8015826:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 801582a:	2d00      	cmp	r5, #0
 801582c:	d001      	beq.n	8015832 <prvTCPFlagMeaning+0x7e>
 801582e:	2545      	movs	r5, #69	@ 0x45
 8015830:	e000      	b.n	8015834 <prvTCPFlagMeaning+0x80>
 8015832:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8015834:	68fe      	ldr	r6, [r7, #12]
 8015836:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 801583a:	2e00      	cmp	r6, #0
 801583c:	d001      	beq.n	8015842 <prvTCPFlagMeaning+0x8e>
 801583e:	2643      	movs	r6, #67	@ 0x43
 8015840:	e000      	b.n	8015844 <prvTCPFlagMeaning+0x90>
 8015842:	262e      	movs	r6, #46	@ 0x2e
 8015844:	9606      	str	r6, [sp, #24]
 8015846:	9505      	str	r5, [sp, #20]
 8015848:	9404      	str	r4, [sp, #16]
 801584a:	9003      	str	r0, [sp, #12]
 801584c:	9102      	str	r1, [sp, #8]
 801584e:	9201      	str	r2, [sp, #4]
 8015850:	9300      	str	r3, [sp, #0]
 8015852:	4663      	mov	r3, ip
 8015854:	4a04      	ldr	r2, [pc, #16]	@ (8015868 <prvTCPFlagMeaning+0xb4>)
 8015856:	210a      	movs	r1, #10
 8015858:	4804      	ldr	r0, [pc, #16]	@ (801586c <prvTCPFlagMeaning+0xb8>)
 801585a:	f00d ffa7 	bl	80237ac <snprintf>
            return retString;
 801585e:	4b03      	ldr	r3, [pc, #12]	@ (801586c <prvTCPFlagMeaning+0xb8>)
        }
 8015860:	4618      	mov	r0, r3
 8015862:	3714      	adds	r7, #20
 8015864:	46bd      	mov	sp, r7
 8015866:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015868:	080272b4 	.word	0x080272b4
 801586c:	20001628 	.word	0x20001628

08015870 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8015870:	b580      	push	{r7, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	7a1b      	ldrb	r3, [r3, #8]
 801587c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015880:	b2db      	uxtb	r3, r3
 8015882:	2b00      	cmp	r3, #0
 8015884:	d002      	beq.n	801588c <prvSocketSetMSS+0x1c>
 8015886:	2b01      	cmp	r3, #1
 8015888:	d004      	beq.n	8015894 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801588a:	e007      	b.n	801589c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 801588c:	6878      	ldr	r0, [r7, #4]
 801588e:	f000 f809 	bl	80158a4 <prvSocketSetMSS_IPV4>
                    break;
 8015892:	e003      	b.n	801589c <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f000 f84b 	bl	8015930 <prvSocketSetMSS_IPV6>
                    break;
 801589a:	bf00      	nop
        }
    }
 801589c:	bf00      	nop
 801589e:	3708      	adds	r7, #8
 80158a0:	46bd      	mov	sp, r7
 80158a2:	bd80      	pop	{r7, pc}

080158a4 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 80158a4:	b580      	push	{r7, lr}
 80158a6:	b084      	sub	sp, #16
 80158a8:	af00      	add	r7, sp, #0
 80158aa:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80158ac:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80158b0:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80158b6:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d023      	beq.n	8015906 <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 80158be:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80158c2:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158c8:	061a      	lsls	r2, r3, #24
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158ce:	021b      	lsls	r3, r3, #8
 80158d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80158d4:	431a      	orrs	r2, r3
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158da:	0a1b      	lsrs	r3, r3, #8
 80158dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80158e0:	431a      	orrs	r2, r3
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80158e6:	0e1b      	lsrs	r3, r3, #24
 80158e8:	431a      	orrs	r2, r3
 80158ea:	68bb      	ldr	r3, [r7, #8]
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	405a      	eors	r2, r3
 80158f0:	68bb      	ldr	r3, [r7, #8]
 80158f2:	685b      	ldr	r3, [r3, #4]
 80158f4:	4013      	ands	r3, r2
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d005      	beq.n	8015906 <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80158fa:	68f9      	ldr	r1, [r7, #12]
 80158fc:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8015900:	f7f5 faa0 	bl	800ae44 <FreeRTOS_min_uint32>
 8015904:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015910:	68f9      	ldr	r1, [r7, #12]
 8015912:	4806      	ldr	r0, [pc, #24]	@ (801592c <prvSocketSetMSS_IPV4+0x88>)
 8015914:	f00c ff1e 	bl	8022754 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015918:	68fb      	ldr	r3, [r7, #12]
 801591a:	b29a      	uxth	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8015922:	bf00      	nop
 8015924:	3710      	adds	r7, #16
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	080272c8 	.word	0x080272c8

08015930 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8015930:	b580      	push	{r7, lr}
 8015932:	b090      	sub	sp, #64	@ 0x40
 8015934:	af00      	add	r7, sp, #0
 8015936:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8015938:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801593c:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 801593e:	2300      	movs	r3, #0
 8015940:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d103      	bne.n	8015950 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 8015948:	481f      	ldr	r0, [pc, #124]	@ (80159c8 <prvSocketSetMSS_IPV6+0x98>)
 801594a:	f00c ff03 	bl	8022754 <lUDPLoggingPrintf>

            break;
 801594e:	e036      	b.n	80159be <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015954:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 8015956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015958:	2b00      	cmp	r3, #0
 801595a:	d018      	beq.n	801598e <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 801595c:	2314      	movs	r3, #20
 801595e:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8015960:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015962:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015966:	1a9b      	subs	r3, r3, r2
 8015968:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	3354      	adds	r3, #84	@ 0x54
 801596e:	4618      	mov	r0, r3
 8015970:	f7f8 fc96 	bl	800e2a0 <xIPv6_GetIPType>
 8015974:	4603      	mov	r3, r0
 8015976:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 801597a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801597e:	2b00      	cmp	r3, #0
 8015980:	d105      	bne.n	801598e <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8015982:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015984:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 8015988:	f7f5 fa5c 	bl	800ae44 <FreeRTOS_min_uint32>
 801598c:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 801598e:	687b      	ldr	r3, [r7, #4]
 8015990:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8015994:	f107 0208 	add.w	r2, r7, #8
 8015998:	2328      	movs	r3, #40	@ 0x28
 801599a:	200a      	movs	r0, #10
 801599c:	f7f9 ffa2 	bl	800f8e4 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 80159a0:	687b      	ldr	r3, [r7, #4]
 80159a2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80159a6:	f107 0208 	add.w	r2, r7, #8
 80159aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80159ac:	4807      	ldr	r0, [pc, #28]	@ (80159cc <prvSocketSetMSS_IPV6+0x9c>)
 80159ae:	f00c fed1 	bl	8022754 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 80159b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80159b4:	b29a      	uxth	r2, r3
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 80159bc:	bf00      	nop
 80159be:	bf00      	nop
 80159c0:	3740      	adds	r7, #64	@ 0x40
 80159c2:	46bd      	mov	sp, r7
 80159c4:	bd80      	pop	{r7, pc}
 80159c6:	bf00      	nop
 80159c8:	080272f4 	.word	0x080272f4
 80159cc:	08027320 	.word	0x08027320

080159d0 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 80159d0:	b480      	push	{r7}
 80159d2:	b085      	sub	sp, #20
 80159d4:	af00      	add	r7, sp, #0
 80159d6:	6078      	str	r0, [r7, #4]
 80159d8:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 80159da:	2300      	movs	r3, #0
 80159dc:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 80159de:	683a      	ldr	r2, [r7, #0]
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	1ad3      	subs	r3, r2, r3
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	db01      	blt.n	80159ec <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 80159e8:	2301      	movs	r3, #1
 80159ea:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 80159ec:	68fb      	ldr	r3, [r7, #12]
        }
 80159ee:	4618      	mov	r0, r3
 80159f0:	3714      	adds	r7, #20
 80159f2:	46bd      	mov	sp, r7
 80159f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f8:	4770      	bx	lr

080159fa <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 80159fa:	b480      	push	{r7}
 80159fc:	b085      	sub	sp, #20
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	6078      	str	r0, [r7, #4]
 8015a02:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015a04:	2300      	movs	r3, #0
 8015a06:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 8015a08:	683a      	ldr	r2, [r7, #0]
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	1ad3      	subs	r3, r2, r3
 8015a0e:	3b01      	subs	r3, #1
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	db01      	blt.n	8015a18 <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 8015a14:	2301      	movs	r3, #1
 8015a16:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015a18:	68fb      	ldr	r3, [r7, #12]
    }
 8015a1a:	4618      	mov	r0, r3
 8015a1c:	3714      	adds	r7, #20
 8015a1e:	46bd      	mov	sp, r7
 8015a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a24:	4770      	bx	lr

08015a26 <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 8015a26:	b480      	push	{r7}
 8015a28:	b085      	sub	sp, #20
 8015a2a:	af00      	add	r7, sp, #0
 8015a2c:	6078      	str	r0, [r7, #4]
 8015a2e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015a30:	2300      	movs	r3, #0
 8015a32:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 8015a34:	687a      	ldr	r2, [r7, #4]
 8015a36:	683b      	ldr	r3, [r7, #0]
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	3b01      	subs	r3, #1
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	db01      	blt.n	8015a44 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8015a40:	2301      	movs	r3, #1
 8015a42:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015a44:	68fb      	ldr	r3, [r7, #12]
    }
 8015a46:	4618      	mov	r0, r3
 8015a48:	3714      	adds	r7, #20
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a50:	4770      	bx	lr

08015a52 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8015a52:	b480      	push	{r7}
 8015a54:	b085      	sub	sp, #20
 8015a56:	af00      	add	r7, sp, #0
 8015a58:	6078      	str	r0, [r7, #4]
 8015a5a:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015a5c:	2300      	movs	r3, #0
 8015a5e:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8015a60:	687a      	ldr	r2, [r7, #4]
 8015a62:	683b      	ldr	r3, [r7, #0]
 8015a64:	1ad3      	subs	r3, r2, r3
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	db01      	blt.n	8015a6e <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015a6e:	68fb      	ldr	r3, [r7, #12]
    }
 8015a70:	4618      	mov	r0, r3
 8015a72:	3714      	adds	r7, #20
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr

08015a7c <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
 8015a84:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	3308      	adds	r3, #8
 8015a8a:	461a      	mov	r2, r3
 8015a8c:	6839      	ldr	r1, [r7, #0]
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f000 f822 	bl	8015ad8 <vListInsertGeneric>
        }
 8015a94:	bf00      	nop
 8015a96:	3708      	adds	r7, #8
 8015a98:	46bd      	mov	sp, r7
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8015aa4:	f7ef f8e6 	bl	8004c74 <xTaskGetTickCount>
 8015aa8:	4602      	mov	r2, r0
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	601a      	str	r2, [r3, #0]
    }
 8015aae:	bf00      	nop
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}

08015ab6 <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 8015ab6:	b580      	push	{r7, lr}
 8015ab8:	b084      	sub	sp, #16
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8015abe:	f7ef f8d9 	bl	8004c74 <xTaskGetTickCount>
 8015ac2:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	68fa      	ldr	r2, [r7, #12]
 8015aca:	1ad3      	subs	r3, r2, r3
 8015acc:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8015ace:	68bb      	ldr	r3, [r7, #8]
    }
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 8015ad8:	b480      	push	{r7}
 8015ada:	b085      	sub	sp, #20
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	689a      	ldr	r2, [r3, #8]
 8015aee:	68bb      	ldr	r3, [r7, #8]
 8015af0:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	689b      	ldr	r3, [r3, #8]
 8015af6:	68ba      	ldr	r2, [r7, #8]
 8015af8:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	68ba      	ldr	r2, [r7, #8]
 8015afe:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 8015b00:	68bb      	ldr	r3, [r7, #8]
 8015b02:	68fa      	ldr	r2, [r7, #12]
 8015b04:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	1c5a      	adds	r2, r3, #1
 8015b0c:	68fb      	ldr	r3, [r7, #12]
 8015b0e:	601a      	str	r2, [r3, #0]
        }
 8015b10:	bf00      	nop
 8015b12:	3714      	adds	r7, #20
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr

08015b1c <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 8015b22:	4827      	ldr	r0, [pc, #156]	@ (8015bc0 <prvCreateSectors+0xa4>)
 8015b24:	f7ed fe22 	bl	800376c <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 8015b28:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8015b2c:	f7f0 ff12 	bl	8006954 <pvPortMalloc>
 8015b30:	4603      	mov	r3, r0
 8015b32:	4a24      	ldr	r2, [pc, #144]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b34:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 8015b36:	4b23      	ldr	r3, [pc, #140]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d107      	bne.n	8015b4e <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8015b3e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8015b42:	4821      	ldr	r0, [pc, #132]	@ (8015bc8 <prvCreateSectors+0xac>)
 8015b44:	f00c fe06 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 8015b48:	2300      	movs	r3, #0
 8015b4a:	603b      	str	r3, [r7, #0]
 8015b4c:	e032      	b.n	8015bb4 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8015b4e:	4b1d      	ldr	r3, [pc, #116]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8015b56:	2100      	movs	r1, #0
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f00d f924 	bl	8022da6 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015b5e:	2300      	movs	r3, #0
 8015b60:	607b      	str	r3, [r7, #4]
 8015b62:	e022      	b.n	8015baa <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015b64:	4b17      	ldr	r3, [pc, #92]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b66:	6819      	ldr	r1, [r3, #0]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	019a      	lsls	r2, r3, #6
 8015b6c:	4b15      	ldr	r3, [pc, #84]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b6e:	6818      	ldr	r0, [r3, #0]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	019b      	lsls	r3, r3, #6
 8015b74:	4403      	add	r3, r0
 8015b76:	440a      	add	r2, r1
 8015b78:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015b7a:	4b12      	ldr	r3, [pc, #72]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b7c:	6819      	ldr	r1, [r3, #0]
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	019a      	lsls	r2, r3, #6
 8015b82:	4b10      	ldr	r3, [pc, #64]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b84:	6818      	ldr	r0, [r3, #0]
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	019b      	lsls	r3, r3, #6
 8015b8a:	4403      	add	r3, r0
 8015b8c:	440a      	add	r2, r1
 8015b8e:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015b90:	4b0c      	ldr	r3, [pc, #48]	@ (8015bc4 <prvCreateSectors+0xa8>)
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	019b      	lsls	r3, r3, #6
 8015b98:	4413      	add	r3, r2
 8015b9a:	332c      	adds	r3, #44	@ 0x2c
 8015b9c:	4619      	mov	r1, r3
 8015b9e:	4808      	ldr	r0, [pc, #32]	@ (8015bc0 <prvCreateSectors+0xa4>)
 8015ba0:	f7ff ff6c 	bl	8015a7c <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	3301      	adds	r3, #1
 8015ba8:	607b      	str	r3, [r7, #4]
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	2b3f      	cmp	r3, #63	@ 0x3f
 8015bae:	ddd9      	ble.n	8015b64 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8015bb0:	2301      	movs	r3, #1
 8015bb2:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8015bb4:	683b      	ldr	r3, [r7, #0]
        }
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	3708      	adds	r7, #8
 8015bba:	46bd      	mov	sp, r7
 8015bbc:	bd80      	pop	{r7, pc}
 8015bbe:	bf00      	nop
 8015bc0:	20001638 	.word	0x20001638
 8015bc4:	20001634 	.word	0x20001634
 8015bc8:	08027350 	.word	0x08027350

08015bcc <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8015bcc:	b480      	push	{r7}
 8015bce:	b087      	sub	sp, #28
 8015bd0:	af00      	add	r7, sp, #0
 8015bd2:	6078      	str	r0, [r7, #4]
 8015bd4:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	33ac      	adds	r3, #172	@ 0xac
 8015bde:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8015be0:	68fb      	ldr	r3, [r7, #12]
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	617b      	str	r3, [r7, #20]
 8015be6:	e00d      	b.n	8015c04 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	683a      	ldr	r2, [r7, #0]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d102      	bne.n	8015bfe <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 8015bf8:	68bb      	ldr	r3, [r7, #8]
 8015bfa:	613b      	str	r3, [r7, #16]
                    break;
 8015bfc:	e006      	b.n	8015c0c <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 8015bfe:	697b      	ldr	r3, [r7, #20]
 8015c00:	685b      	ldr	r3, [r3, #4]
 8015c02:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 8015c04:	697a      	ldr	r2, [r7, #20]
 8015c06:	68fb      	ldr	r3, [r7, #12]
 8015c08:	429a      	cmp	r2, r3
 8015c0a:	d1ed      	bne.n	8015be8 <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 8015c0c:	693b      	ldr	r3, [r7, #16]
        }
 8015c0e:	4618      	mov	r0, r3
 8015c10:	371c      	adds	r7, #28
 8015c12:	46bd      	mov	sp, r7
 8015c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c18:	4770      	bx	lr
	...

08015c1c <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 8015c1c:	b580      	push	{r7, lr}
 8015c1e:	b088      	sub	sp, #32
 8015c20:	af00      	add	r7, sp, #0
 8015c22:	60f8      	str	r0, [r7, #12]
 8015c24:	60b9      	str	r1, [r7, #8]
 8015c26:	607a      	str	r2, [r7, #4]
 8015c28:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 8015c2a:	4b33      	ldr	r3, [pc, #204]	@ (8015cf8 <xTCPWindowNew+0xdc>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d10c      	bne.n	8015c4c <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d001      	beq.n	8015c3c <xTCPWindowNew+0x20>
 8015c38:	2352      	movs	r3, #82	@ 0x52
 8015c3a:	e000      	b.n	8015c3e <xTCPWindowNew+0x22>
 8015c3c:	2354      	movs	r3, #84	@ 0x54
 8015c3e:	4619      	mov	r1, r3
 8015c40:	482e      	ldr	r0, [pc, #184]	@ (8015cfc <xTCPWindowNew+0xe0>)
 8015c42:	f00c fd87 	bl	8022754 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8015c46:	2300      	movs	r3, #0
 8015c48:	61fb      	str	r3, [r7, #28]
 8015c4a:	e04f      	b.n	8015cec <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8015c4c:	4b2a      	ldr	r3, [pc, #168]	@ (8015cf8 <xTCPWindowNew+0xdc>)
 8015c4e:	68db      	ldr	r3, [r3, #12]
 8015c50:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015c52:	69bb      	ldr	r3, [r7, #24]
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8015c58:	69bb      	ldr	r3, [r7, #24]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d104      	bne.n	8015c68 <xTCPWindowNew+0x4c>
 8015c5e:	f240 2125 	movw	r1, #549	@ 0x225
 8015c62:	4827      	ldr	r0, [pc, #156]	@ (8015d00 <xTCPWindowNew+0xe4>)
 8015c64:	f7eb fe98 	bl	8001998 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8015c68:	69fb      	ldr	r3, [r7, #28]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d104      	bne.n	8015c78 <xTCPWindowNew+0x5c>
 8015c6e:	f240 2126 	movw	r1, #550	@ 0x226
 8015c72:	4823      	ldr	r0, [pc, #140]	@ (8015d00 <xTCPWindowNew+0xe4>)
 8015c74:	f7eb fe90 	bl	8001998 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8015c78:	69b8      	ldr	r0, [r7, #24]
 8015c7a:	f7ed fe01 	bl	8003880 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015c7e:	683b      	ldr	r3, [r7, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d006      	beq.n	8015c92 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	33a4      	adds	r3, #164	@ 0xa4
 8015c88:	69b9      	ldr	r1, [r7, #24]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7ff fef6 	bl	8015a7c <vListInsertFifo>
 8015c90:	e005      	b.n	8015c9e <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	3390      	adds	r3, #144	@ 0x90
 8015c96:	69b9      	ldr	r1, [r7, #24]
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7ff feef 	bl	8015a7c <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015c9e:	69fb      	ldr	r3, [r7, #28]
 8015ca0:	3310      	adds	r3, #16
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7ff fefa 	bl	8015a9c <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8015ca8:	69fb      	ldr	r3, [r7, #28]
 8015caa:	2200      	movs	r2, #0
 8015cac:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d001      	beq.n	8015cb8 <xTCPWindowNew+0x9c>
 8015cb4:	2101      	movs	r1, #1
 8015cb6:	e000      	b.n	8015cba <xTCPWindowNew+0x9e>
 8015cb8:	2100      	movs	r1, #0
 8015cba:	69fa      	ldr	r2, [r7, #28]
 8015cbc:	7d93      	ldrb	r3, [r2, #22]
 8015cbe:	f361 0382 	bfi	r3, r1, #2, #1
 8015cc2:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8015cc4:	69fb      	ldr	r3, [r7, #28]
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8015cca:	69fb      	ldr	r3, [r7, #28]
 8015ccc:	687a      	ldr	r2, [r7, #4]
 8015cce:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015cd0:	69fb      	ldr	r3, [r7, #28]
 8015cd2:	68ba      	ldr	r2, [r7, #8]
 8015cd4:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8015cd6:	4b08      	ldr	r3, [pc, #32]	@ (8015cf8 <xTCPWindowNew+0xdc>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8015cdc:	4b09      	ldr	r3, [pc, #36]	@ (8015d04 <xTCPWindowNew+0xe8>)
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	697a      	ldr	r2, [r7, #20]
 8015ce2:	429a      	cmp	r2, r3
 8015ce4:	d202      	bcs.n	8015cec <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8015ce6:	4a07      	ldr	r2, [pc, #28]	@ (8015d04 <xTCPWindowNew+0xe8>)
 8015ce8:	697b      	ldr	r3, [r7, #20]
 8015cea:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8015cec:	69fb      	ldr	r3, [r7, #28]
        }
 8015cee:	4618      	mov	r0, r3
 8015cf0:	3720      	adds	r7, #32
 8015cf2:	46bd      	mov	sp, r7
 8015cf4:	bd80      	pop	{r7, pc}
 8015cf6:	bf00      	nop
 8015cf8:	20001638 	.word	0x20001638
 8015cfc:	08027374 	.word	0x08027374
 8015d00:	080273a4 	.word	0x080273a4
 8015d04:	2000001c 	.word	0x2000001c

08015d08 <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8015d08:	b580      	push	{r7, lr}
 8015d0a:	b084      	sub	sp, #16
 8015d0c:	af00      	add	r7, sp, #0
 8015d0e:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d002      	beq.n	8015d20 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	60fb      	str	r3, [r7, #12]
 8015d1e:	e01e      	b.n	8015d5e <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	691b      	ldr	r3, [r3, #16]
 8015d24:	1c5a      	adds	r2, r3, #1
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	699b      	ldr	r3, [r3, #24]
 8015d2a:	4619      	mov	r1, r3
 8015d2c:	4610      	mov	r0, r2
 8015d2e:	f7ff fe90 	bl	8015a52 <xSequenceGreaterThanOrEqual>
 8015d32:	4603      	mov	r3, r0
 8015d34:	2b00      	cmp	r3, #0
 8015d36:	d002      	beq.n	8015d3e <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8015d38:	2301      	movs	r3, #1
 8015d3a:	60fb      	str	r3, [r7, #12]
 8015d3c:	e00f      	b.n	8015d5e <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8015d3e:	687b      	ldr	r3, [r7, #4]
 8015d40:	691a      	ldr	r2, [r3, #16]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	68db      	ldr	r3, [r3, #12]
 8015d46:	1ad1      	subs	r1, r2, r3
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	699a      	ldr	r2, [r3, #24]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	68db      	ldr	r3, [r3, #12]
 8015d50:	1ad3      	subs	r3, r2, r3
 8015d52:	461a      	mov	r2, r3
 8015d54:	4804      	ldr	r0, [pc, #16]	@ (8015d68 <xTCPWindowRxEmpty+0x60>)
 8015d56:	f00c fcfd 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
        }
 8015d60:	4618      	mov	r0, r3
 8015d62:	3710      	adds	r7, #16
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	080273d4 	.word	0x080273d4

08015d6c <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b084      	sub	sp, #16
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d102      	bne.n	8015d82 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015d7c:	2300      	movs	r3, #0
 8015d7e:	60fb      	str	r3, [r7, #12]
 8015d80:	e008      	b.n	8015d94 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	68db      	ldr	r3, [r3, #12]
 8015d86:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015d88:	68bb      	ldr	r3, [r7, #8]
 8015d8a:	68db      	ldr	r3, [r3, #12]
 8015d8c:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015d8e:	68b8      	ldr	r0, [r7, #8]
 8015d90:	f7ed fd76 	bl	8003880 <uxListRemove>
            }

            return pxSegment;
 8015d94:	68fb      	ldr	r3, [r7, #12]
        }
 8015d96:	4618      	mov	r0, r3
 8015d98:	3710      	adds	r7, #16
 8015d9a:	46bd      	mov	sp, r7
 8015d9c:	bd80      	pop	{r7, pc}

08015d9e <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015d9e:	b480      	push	{r7}
 8015da0:	b085      	sub	sp, #20
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d102      	bne.n	8015db4 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8015dae:	2300      	movs	r3, #0
 8015db0:	60fb      	str	r3, [r7, #12]
 8015db2:	e005      	b.n	8015dc0 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	68db      	ldr	r3, [r3, #12]
 8015db8:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8015dba:	68bb      	ldr	r3, [r7, #8]
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015dc0:	68fb      	ldr	r3, [r7, #12]
        }
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	3714      	adds	r7, #20
 8015dc6:	46bd      	mov	sp, r7
 8015dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dcc:	4770      	bx	lr
	...

08015dd0 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d004      	beq.n	8015dea <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	3318      	adds	r3, #24
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7ed fd4b 	bl	8003880 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2200      	movs	r2, #0
 8015dee:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2200      	movs	r2, #0
 8015dfa:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d004      	beq.n	8015e0e <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	332c      	adds	r3, #44	@ 0x2c
 8015e08:	4618      	mov	r0, r3
 8015e0a:	f7ed fd39 	bl	8003880 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	332c      	adds	r3, #44	@ 0x2c
 8015e12:	4619      	mov	r1, r3
 8015e14:	4803      	ldr	r0, [pc, #12]	@ (8015e24 <vTCPWindowFree+0x54>)
 8015e16:	f7ff fe31 	bl	8015a7c <vListInsertFifo>
        }
 8015e1a:	bf00      	nop
 8015e1c:	3708      	adds	r7, #8
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bd80      	pop	{r7, pc}
 8015e22:	bf00      	nop
 8015e24:	20001638 	.word	0x20001638

08015e28 <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b086      	sub	sp, #24
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8015e30:	2300      	movs	r3, #0
 8015e32:	613b      	str	r3, [r7, #16]
 8015e34:	e01d      	b.n	8015e72 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d003      	beq.n	8015e44 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	33a4      	adds	r3, #164	@ 0xa4
 8015e40:	617b      	str	r3, [r7, #20]
 8015e42:	e002      	b.n	8015e4a <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	3390      	adds	r3, #144	@ 0x90
 8015e48:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	689b      	ldr	r3, [r3, #8]
 8015e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015e52:	d10b      	bne.n	8015e6c <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015e54:	e006      	b.n	8015e64 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8015e56:	697b      	ldr	r3, [r7, #20]
 8015e58:	68db      	ldr	r3, [r3, #12]
 8015e5a:	68db      	ldr	r3, [r3, #12]
 8015e5c:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8015e5e:	68f8      	ldr	r0, [r7, #12]
 8015e60:	f7ff ffb6 	bl	8015dd0 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015e64:	697b      	ldr	r3, [r7, #20]
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	d1f4      	bne.n	8015e56 <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	3301      	adds	r3, #1
 8015e70:	613b      	str	r3, [r7, #16]
 8015e72:	693b      	ldr	r3, [r7, #16]
 8015e74:	2b01      	cmp	r3, #1
 8015e76:	ddde      	ble.n	8015e36 <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8015e78:	bf00      	nop
 8015e7a:	bf00      	nop
 8015e7c:	3718      	adds	r7, #24
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
	...

08015e84 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8015e84:	b580      	push	{r7, lr}
 8015e86:	b086      	sub	sp, #24
 8015e88:	af00      	add	r7, sp, #0
 8015e8a:	60f8      	str	r0, [r7, #12]
 8015e8c:	60b9      	str	r1, [r7, #8]
 8015e8e:	607a      	str	r2, [r7, #4]
 8015e90:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8015e92:	2301      	movs	r3, #1
 8015e94:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8015e96:	4b1d      	ldr	r3, [pc, #116]	@ (8015f0c <xTCPWindowCreate+0x88>)
 8015e98:	681b      	ldr	r3, [r3, #0]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d102      	bne.n	8015ea4 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015e9e:	f7ff fe3d 	bl	8015b1c <prvCreateSectors>
 8015ea2:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015ea4:	68fb      	ldr	r3, [r7, #12]
 8015ea6:	3390      	adds	r3, #144	@ 0x90
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f7ed fc5f 	bl	800376c <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	33a4      	adds	r3, #164	@ 0xa4
 8015eb2:	4618      	mov	r0, r3
 8015eb4:	f7ed fc5a 	bl	800376c <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8015eb8:	68fb      	ldr	r3, [r7, #12]
 8015eba:	3340      	adds	r3, #64	@ 0x40
 8015ebc:	4618      	mov	r0, r3
 8015ebe:	f7ed fc55 	bl	800376c <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	3354      	adds	r3, #84	@ 0x54
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7ed fc50 	bl	800376c <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	3368      	adds	r3, #104	@ 0x68
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7ed fc4b 	bl	800376c <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 8015ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8015f10 <xTCPWindowCreate+0x8c>)
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d004      	beq.n	8015ee8 <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015ede:	687a      	ldr	r2, [r7, #4]
 8015ee0:	68b9      	ldr	r1, [r7, #8]
 8015ee2:	480c      	ldr	r0, [pc, #48]	@ (8015f14 <xTCPWindowCreate+0x90>)
 8015ee4:	f00c fc36 	bl	8022754 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	68ba      	ldr	r2, [r7, #8]
 8015eec:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	687a      	ldr	r2, [r7, #4]
 8015ef2:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ef6:	6a3a      	ldr	r2, [r7, #32]
 8015ef8:	6839      	ldr	r1, [r7, #0]
 8015efa:	68f8      	ldr	r0, [r7, #12]
 8015efc:	f000 f80c 	bl	8015f18 <vTCPWindowInit>

        return xReturn;
 8015f00:	697b      	ldr	r3, [r7, #20]
    }
 8015f02:	4618      	mov	r0, r3
 8015f04:	3718      	adds	r7, #24
 8015f06:	46bd      	mov	sp, r7
 8015f08:	bd80      	pop	{r7, pc}
 8015f0a:	bf00      	nop
 8015f0c:	20001634 	.word	0x20001634
 8015f10:	2000164c 	.word	0x2000164c
 8015f14:	08027404 	.word	0x08027404

08015f18 <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 8015f18:	b480      	push	{r7}
 8015f1a:	b087      	sub	sp, #28
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	60f8      	str	r0, [r7, #12]
 8015f20:	60b9      	str	r1, [r7, #8]
 8015f22:	607a      	str	r2, [r7, #4]
 8015f24:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 8015f26:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8015f2a:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	2200      	movs	r2, #0
 8015f30:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8015f32:	68fa      	ldr	r2, [r7, #12]
 8015f34:	7813      	ldrb	r3, [r2, #0]
 8015f36:	f043 0301 	orr.w	r3, r3, #1
 8015f3a:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8015f3c:	683b      	ldr	r3, [r7, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d024      	beq.n	8015f8c <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d004      	beq.n	8015f56 <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015f5c:	461a      	mov	r2, r3
 8015f5e:	683b      	ldr	r3, [r7, #0]
 8015f60:	4293      	cmp	r3, r2
 8015f62:	d304      	bcc.n	8015f6e <vTCPWindowInit+0x56>
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d10e      	bne.n	8015f8c <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	685a      	ldr	r2, [r3, #4]
 8015f72:	683b      	ldr	r3, [r7, #0]
 8015f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8015f78:	683a      	ldr	r2, [r7, #0]
 8015f7a:	fb03 f202 	mul.w	r2, r3, r2
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8015f82:	683b      	ldr	r3, [r7, #0]
 8015f84:	b29a      	uxth	r2, r3
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	697a      	ldr	r2, [r7, #20]
 8015f90:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	68ba      	ldr	r2, [r7, #8]
 8015f96:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	68ba      	ldr	r2, [r7, #8]
 8015f9c:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	68ba      	ldr	r2, [r7, #8]
 8015fa2:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8015fa4:	68fb      	ldr	r3, [r7, #12]
 8015fa6:	687a      	ldr	r2, [r7, #4]
 8015fa8:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	687a      	ldr	r2, [r7, #4]
 8015fb4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	687a      	ldr	r2, [r7, #4]
 8015fba:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	687a      	ldr	r2, [r7, #4]
 8015fc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8015fc2:	bf00      	nop
 8015fc4:	371c      	adds	r7, #28
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fcc:	4770      	bx	lr
	...

08015fd0 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8015fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015fd2:	b08f      	sub	sp, #60	@ 0x3c
 8015fd4:	af04      	add	r7, sp, #16
 8015fd6:	60f8      	str	r0, [r7, #12]
 8015fd8:	60b9      	str	r1, [r7, #8]
 8015fda:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8015fdc:	2300      	movs	r3, #0
 8015fde:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015fe0:	68ba      	ldr	r2, [r7, #8]
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	4413      	add	r3, r2
 8015fe6:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8015fe8:	68fb      	ldr	r3, [r7, #12]
 8015fea:	33ac      	adds	r3, #172	@ 0xac
 8015fec:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8015fee:	69bb      	ldr	r3, [r7, #24]
 8015ff0:	685b      	ldr	r3, [r3, #4]
 8015ff2:	623b      	str	r3, [r7, #32]
 8015ff4:	e027      	b.n	8016046 <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015ff6:	6a3b      	ldr	r3, [r7, #32]
 8015ff8:	68db      	ldr	r3, [r3, #12]
 8015ffa:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8015ffc:	697b      	ldr	r3, [r7, #20]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	68b9      	ldr	r1, [r7, #8]
 8016002:	4618      	mov	r0, r3
 8016004:	f7ff fd25 	bl	8015a52 <xSequenceGreaterThanOrEqual>
 8016008:	4603      	mov	r3, r0
 801600a:	2b00      	cmp	r3, #0
 801600c:	d018      	beq.n	8016040 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 801600e:	697b      	ldr	r3, [r7, #20]
 8016010:	681b      	ldr	r3, [r3, #0]
 8016012:	69f9      	ldr	r1, [r7, #28]
 8016014:	4618      	mov	r0, r3
 8016016:	f7ff fcf0 	bl	80159fa <xSequenceLessThan>
 801601a:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 801601c:	2b00      	cmp	r3, #0
 801601e:	d00f      	beq.n	8016040 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8016020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016022:	2b00      	cmp	r3, #0
 8016024:	d00a      	beq.n	801603c <xTCPWindowRxConfirm+0x6c>
 8016026:	697b      	ldr	r3, [r7, #20]
 8016028:	681a      	ldr	r2, [r3, #0]
 801602a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	4619      	mov	r1, r3
 8016030:	4610      	mov	r0, r2
 8016032:	f7ff fce2 	bl	80159fa <xSequenceLessThan>
 8016036:	4603      	mov	r3, r0
 8016038:	2b00      	cmp	r3, #0
 801603a:	d001      	beq.n	8016040 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 801603c:	697b      	ldr	r3, [r7, #20]
 801603e:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8016040:	6a3b      	ldr	r3, [r7, #32]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 8016046:	6a3a      	ldr	r2, [r7, #32]
 8016048:	69bb      	ldr	r3, [r7, #24]
 801604a:	429a      	cmp	r2, r3
 801604c:	d1d3      	bne.n	8015ff6 <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 801604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016050:	2b00      	cmp	r3, #0
 8016052:	d030      	beq.n	80160b6 <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8016054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016056:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8016058:	68ba      	ldr	r2, [r7, #8]
 801605a:	429a      	cmp	r2, r3
 801605c:	d104      	bne.n	8016068 <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 801605e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016060:	689a      	ldr	r2, [r3, #8]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	429a      	cmp	r2, r3
 8016066:	d026      	beq.n	80160b6 <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801606e:	461e      	mov	r6, r3
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	68db      	ldr	r3, [r3, #12]
 8016074:	68ba      	ldr	r2, [r7, #8]
 8016076:	1ad5      	subs	r5, r2, r3
 8016078:	68ba      	ldr	r2, [r7, #8]
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	441a      	add	r2, r3
 801607e:	68fb      	ldr	r3, [r7, #12]
 8016080:	68db      	ldr	r3, [r3, #12]
 8016082:	1ad3      	subs	r3, r2, r3
 8016084:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016086:	6811      	ldr	r1, [r2, #0]
 8016088:	68fa      	ldr	r2, [r7, #12]
 801608a:	68d2      	ldr	r2, [r2, #12]
 801608c:	1a8a      	subs	r2, r1, r2
 801608e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016090:	6889      	ldr	r1, [r1, #8]
 8016092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016094:	6800      	ldr	r0, [r0, #0]
 8016096:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8016098:	68a4      	ldr	r4, [r4, #8]
 801609a:	4404      	add	r4, r0
 801609c:	68f8      	ldr	r0, [r7, #12]
 801609e:	68c0      	ldr	r0, [r0, #12]
 80160a0:	1a20      	subs	r0, r4, r0
 80160a2:	9003      	str	r0, [sp, #12]
 80160a4:	9102      	str	r1, [sp, #8]
 80160a6:	9201      	str	r2, [sp, #4]
 80160a8:	9300      	str	r3, [sp, #0]
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	462a      	mov	r2, r5
 80160ae:	4631      	mov	r1, r6
 80160b0:	4803      	ldr	r0, [pc, #12]	@ (80160c0 <xTCPWindowRxConfirm+0xf0>)
 80160b2:	f00c fb4f 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 80160b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80160b8:	4618      	mov	r0, r3
 80160ba:	372c      	adds	r7, #44	@ 0x2c
 80160bc:	46bd      	mov	sp, r7
 80160be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80160c0:	08027434 	.word	0x08027434

080160c4 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 80160c4:	b5b0      	push	{r4, r5, r7, lr}
 80160c6:	b08a      	sub	sp, #40	@ 0x28
 80160c8:	af04      	add	r7, sp, #16
 80160ca:	6078      	str	r0, [r7, #4]
 80160cc:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	691b      	ldr	r3, [r3, #16]
 80160d2:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 80160d4:	693a      	ldr	r2, [r7, #16]
 80160d6:	683b      	ldr	r3, [r7, #0]
 80160d8:	4413      	add	r3, r2
 80160da:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d04e      	beq.n	8016184 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 80160e6:	697b      	ldr	r3, [r7, #20]
 80160e8:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 80160ea:	683a      	ldr	r2, [r7, #0]
 80160ec:	6939      	ldr	r1, [r7, #16]
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7ff ff6e 	bl	8015fd0 <xTCPWindowRxConfirm>
 80160f4:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 80160fc:	68b8      	ldr	r0, [r7, #8]
 80160fe:	f7ff fe67 	bl	8015dd0 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d1f0      	bne.n	80160ea <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8016108:	6979      	ldr	r1, [r7, #20]
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f7ff fd5e 	bl	8015bcc <xTCPWindowRxFind>
 8016110:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8016112:	68bb      	ldr	r3, [r7, #8]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d009      	beq.n	801612c <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	689b      	ldr	r3, [r3, #8]
 801611c:	461a      	mov	r2, r3
 801611e:	697b      	ldr	r3, [r7, #20]
 8016120:	4413      	add	r3, r2
 8016122:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8016124:	68b8      	ldr	r0, [r7, #8]
 8016126:	f7ff fe53 	bl	8015dd0 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 801612a:	e7ed      	b.n	8016108 <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 801612c:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 801612e:	68fa      	ldr	r2, [r7, #12]
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	429a      	cmp	r2, r3
 8016134:	d026      	beq.n	8016184 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8016136:	697a      	ldr	r2, [r7, #20]
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	1ad2      	subs	r2, r2, r3
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8016140:	4b14      	ldr	r3, [pc, #80]	@ (8016194 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8016142:	681b      	ldr	r3, [r3, #0]
 8016144:	2b00      	cmp	r3, #0
 8016146:	dd1d      	ble.n	8016184 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801614e:	461c      	mov	r4, r3
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016156:	461d      	mov	r5, r3
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	68db      	ldr	r3, [r3, #12]
 801615c:	693a      	ldr	r2, [r7, #16]
 801615e:	1ad0      	subs	r0, r2, r3
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016164:	687a      	ldr	r2, [r7, #4]
 8016166:	68d2      	ldr	r2, [r2, #12]
 8016168:	68f9      	ldr	r1, [r7, #12]
 801616a:	1a8a      	subs	r2, r1, r2
 801616c:	6879      	ldr	r1, [r7, #4]
 801616e:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8016172:	9102      	str	r1, [sp, #8]
 8016174:	9201      	str	r2, [sp, #4]
 8016176:	9300      	str	r3, [sp, #0]
 8016178:	4603      	mov	r3, r0
 801617a:	462a      	mov	r2, r5
 801617c:	4621      	mov	r1, r4
 801617e:	4806      	ldr	r0, [pc, #24]	@ (8016198 <prvTCPWindowRx_ExpectedRX+0xd4>)
 8016180:	f00c fae8 	bl	8022754 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	697a      	ldr	r2, [r7, #20]
 8016188:	611a      	str	r2, [r3, #16]
        }
 801618a:	bf00      	nop
 801618c:	3718      	adds	r7, #24
 801618e:	46bd      	mov	sp, r7
 8016190:	bdb0      	pop	{r4, r5, r7, pc}
 8016192:	bf00      	nop
 8016194:	2000164c 	.word	0x2000164c
 8016198:	08027474 	.word	0x08027474

0801619c <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 801619c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801619e:	b08f      	sub	sp, #60	@ 0x3c
 80161a0:	af04      	add	r7, sp, #16
 80161a2:	60f8      	str	r0, [r7, #12]
 80161a4:	60b9      	str	r1, [r7, #8]
 80161a6:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 80161a8:	f04f 33ff 	mov.w	r3, #4294967295
 80161ac:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 80161ae:	68ba      	ldr	r2, [r7, #8]
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	4413      	add	r3, r2
 80161b4:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	691b      	ldr	r3, [r3, #16]
 80161ba:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80161bc:	6a39      	ldr	r1, [r7, #32]
 80161be:	68f8      	ldr	r0, [r7, #12]
 80161c0:	f7ff fd04 	bl	8015bcc <xTCPWindowRxFind>
 80161c4:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 80161c6:	69bb      	ldr	r3, [r7, #24]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d006      	beq.n	80161da <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 80161cc:	69bb      	ldr	r3, [r7, #24]
 80161ce:	689b      	ldr	r3, [r3, #8]
 80161d0:	461a      	mov	r2, r3
 80161d2:	6a3b      	ldr	r3, [r7, #32]
 80161d4:	4413      	add	r3, r2
 80161d6:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 80161d8:	e7f0      	b.n	80161bc <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 80161da:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 80161dc:	4b45      	ldr	r3, [pc, #276]	@ (80162f4 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	dd20      	ble.n	8016226 <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80161ea:	461d      	mov	r5, r3
 80161ec:	68fb      	ldr	r3, [r7, #12]
 80161ee:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80161f2:	461e      	mov	r6, r3
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	68db      	ldr	r3, [r3, #12]
 80161f8:	68ba      	ldr	r2, [r7, #8]
 80161fa:	1ad0      	subs	r0, r2, r3
 80161fc:	68fb      	ldr	r3, [r7, #12]
 80161fe:	68db      	ldr	r3, [r3, #12]
 8016200:	69fa      	ldr	r2, [r7, #28]
 8016202:	1ad3      	subs	r3, r2, r3
 8016204:	68b9      	ldr	r1, [r7, #8]
 8016206:	69fa      	ldr	r2, [r7, #28]
 8016208:	1a8a      	subs	r2, r1, r2
 801620a:	4614      	mov	r4, r2
 801620c:	68fa      	ldr	r2, [r7, #12]
 801620e:	68d2      	ldr	r2, [r2, #12]
 8016210:	6a39      	ldr	r1, [r7, #32]
 8016212:	1a8a      	subs	r2, r1, r2
 8016214:	9202      	str	r2, [sp, #8]
 8016216:	9401      	str	r4, [sp, #4]
 8016218:	9300      	str	r3, [sp, #0]
 801621a:	4603      	mov	r3, r0
 801621c:	4632      	mov	r2, r6
 801621e:	4629      	mov	r1, r5
 8016220:	4835      	ldr	r0, [pc, #212]	@ (80162f8 <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8016222:	f00c fa97 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	4a34      	ldr	r2, [pc, #208]	@ (80162fc <prvTCPWindowRx_UnexpectedRX+0x160>)
 801622a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 801622e:	68bb      	ldr	r3, [r7, #8]
 8016230:	061a      	lsls	r2, r3, #24
 8016232:	68bb      	ldr	r3, [r7, #8]
 8016234:	021b      	lsls	r3, r3, #8
 8016236:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801623a:	431a      	orrs	r2, r3
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	0a1b      	lsrs	r3, r3, #8
 8016240:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016244:	431a      	orrs	r2, r3
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	0e1b      	lsrs	r3, r3, #24
 801624a:	431a      	orrs	r2, r3
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8016252:	6a3b      	ldr	r3, [r7, #32]
 8016254:	061a      	lsls	r2, r3, #24
 8016256:	6a3b      	ldr	r3, [r7, #32]
 8016258:	021b      	lsls	r3, r3, #8
 801625a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801625e:	431a      	orrs	r2, r3
 8016260:	6a3b      	ldr	r3, [r7, #32]
 8016262:	0a1b      	lsrs	r3, r3, #8
 8016264:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016268:	431a      	orrs	r2, r3
 801626a:	6a3b      	ldr	r3, [r7, #32]
 801626c:	0e1b      	lsrs	r3, r3, #24
 801626e:	431a      	orrs	r2, r3
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	220c      	movs	r2, #12
 801627a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 801627e:	68b9      	ldr	r1, [r7, #8]
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f7ff fca3 	bl	8015bcc <xTCPWindowRxFind>
 8016286:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8016288:	69bb      	ldr	r3, [r7, #24]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d12d      	bne.n	80162ea <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 801628e:	687a      	ldr	r2, [r7, #4]
 8016290:	2301      	movs	r3, #1
 8016292:	68b9      	ldr	r1, [r7, #8]
 8016294:	68f8      	ldr	r0, [r7, #12]
 8016296:	f7ff fcc1 	bl	8015c1c <xTCPWindowNew>
 801629a:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801629c:	69bb      	ldr	r3, [r7, #24]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d104      	bne.n	80162ac <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	2200      	movs	r2, #0
 80162a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80162aa:	e01e      	b.n	80162ea <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 80162ac:	4b11      	ldr	r3, [pc, #68]	@ (80162f4 <prvTCPWindowRx_UnexpectedRX+0x158>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d014      	beq.n	80162de <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 80162b4:	68fb      	ldr	r3, [r7, #12]
 80162b6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80162ba:	4619      	mov	r1, r3
 80162bc:	68fb      	ldr	r3, [r7, #12]
 80162be:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80162c2:	4618      	mov	r0, r3
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	68db      	ldr	r3, [r3, #12]
 80162c8:	68ba      	ldr	r2, [r7, #8]
 80162ca:	1ad2      	subs	r2, r2, r3
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80162d2:	9300      	str	r3, [sp, #0]
 80162d4:	4613      	mov	r3, r2
 80162d6:	4602      	mov	r2, r0
 80162d8:	4809      	ldr	r0, [pc, #36]	@ (8016300 <prvTCPWindowRx_UnexpectedRX+0x164>)
 80162da:	f00c fa3b 	bl	8022754 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 80162de:	68ba      	ldr	r2, [r7, #8]
 80162e0:	69fb      	ldr	r3, [r7, #28]
 80162e2:	1ad3      	subs	r3, r2, r3
 80162e4:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 80162e6:	697b      	ldr	r3, [r7, #20]
 80162e8:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 80162ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80162ec:	4618      	mov	r0, r3
 80162ee:	372c      	adds	r7, #44	@ 0x2c
 80162f0:	46bd      	mov	sp, r7
 80162f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162f4:	2000164c 	.word	0x2000164c
 80162f8:	080274b8 	.word	0x080274b8
 80162fc:	0a050101 	.word	0x0a050101
 8016300:	080274f8 	.word	0x080274f8

08016304 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8016304:	b580      	push	{r7, lr}
 8016306:	b08c      	sub	sp, #48	@ 0x30
 8016308:	af00      	add	r7, sp, #0
 801630a:	60f8      	str	r0, [r7, #12]
 801630c:	60b9      	str	r1, [r7, #8]
 801630e:	607a      	str	r2, [r7, #4]
 8016310:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8016312:	f04f 33ff 	mov.w	r3, #4294967295
 8016316:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8016318:	68bb      	ldr	r3, [r7, #8]
 801631a:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8016320:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016322:	2200      	movs	r2, #0
 8016324:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8016326:	68fb      	ldr	r3, [r7, #12]
 8016328:	691b      	ldr	r3, [r3, #16]
 801632a:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 801632c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016330:	4413      	add	r3, r2
 8016332:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8016334:	69fa      	ldr	r2, [r7, #28]
 8016336:	6a3b      	ldr	r3, [r7, #32]
 8016338:	1ad3      	subs	r3, r2, r3
 801633a:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 801633c:	69bb      	ldr	r3, [r7, #24]
 801633e:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8016340:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016342:	6a3b      	ldr	r3, [r7, #32]
 8016344:	1ad3      	subs	r3, r2, r3
 8016346:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8016348:	69bb      	ldr	r3, [r7, #24]
 801634a:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 801634c:	693b      	ldr	r3, [r7, #16]
 801634e:	2b00      	cmp	r3, #0
 8016350:	da18      	bge.n	8016384 <lTCPWindowRxCheck+0x80>
 8016352:	697b      	ldr	r3, [r7, #20]
 8016354:	2b00      	cmp	r3, #0
 8016356:	dd15      	ble.n	8016384 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	68db      	ldr	r3, [r3, #12]
 801635c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801635e:	1ad2      	subs	r2, r2, r3
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016364:	4824      	ldr	r0, [pc, #144]	@ (80163f8 <lTCPWindowRxCheck+0xf4>)
 8016366:	f00c f9f5 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 801636a:	693b      	ldr	r3, [r7, #16]
 801636c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801636e:	1ad3      	subs	r3, r2, r3
 8016370:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8016372:	693b      	ldr	r3, [r7, #16]
 8016374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016376:	4413      	add	r3, r2
 8016378:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	425b      	negs	r3, r3
 801637e:	461a      	mov	r2, r3
 8016380:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016382:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8016384:	68fb      	ldr	r3, [r7, #12]
 8016386:	2200      	movs	r2, #0
 8016388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 801638c:	68fb      	ldr	r3, [r7, #12]
 801638e:	2200      	movs	r2, #0
 8016390:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8016392:	6a3a      	ldr	r2, [r7, #32]
 8016394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016396:	429a      	cmp	r2, r3
 8016398:	d110      	bne.n	80163bc <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 801639a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	429a      	cmp	r2, r3
 80163a0:	d905      	bls.n	80163ae <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 80163a2:	683a      	ldr	r2, [r7, #0]
 80163a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80163a6:	4815      	ldr	r0, [pc, #84]	@ (80163fc <lTCPWindowRxCheck+0xf8>)
 80163a8:	f00c f9d4 	bl	8022754 <lUDPLoggingPrintf>
 80163ac:	e01f      	b.n	80163ee <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 80163ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80163b0:	68f8      	ldr	r0, [r7, #12]
 80163b2:	f7ff fe87 	bl	80160c4 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80163ba:	e018      	b.n	80163ee <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 80163bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80163be:	3301      	adds	r3, #1
 80163c0:	6a3a      	ldr	r2, [r7, #32]
 80163c2:	429a      	cmp	r2, r3
 80163c4:	d013      	beq.n	80163ee <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	dd10      	ble.n	80163ee <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	697a      	ldr	r2, [r7, #20]
 80163d0:	429a      	cmp	r2, r3
 80163d2:	dd06      	ble.n	80163e2 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 80163d4:	683b      	ldr	r3, [r7, #0]
 80163d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163d8:	6979      	ldr	r1, [r7, #20]
 80163da:	4809      	ldr	r0, [pc, #36]	@ (8016400 <lTCPWindowRxCheck+0xfc>)
 80163dc:	f00c f9ba 	bl	8022754 <lUDPLoggingPrintf>
 80163e0:	e005      	b.n	80163ee <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 80163e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80163e6:	68f8      	ldr	r0, [r7, #12]
 80163e8:	f7ff fed8 	bl	801619c <prvTCPWindowRx_UnexpectedRX>
 80163ec:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 80163ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80163f0:	4618      	mov	r0, r3
 80163f2:	3730      	adds	r7, #48	@ 0x30
 80163f4:	46bd      	mov	sp, r7
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	08027528 	.word	0x08027528
 80163fc:	08027568 	.word	0x08027568
 8016400:	080275a8 	.word	0x080275a8

08016404 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8016404:	b480      	push	{r7}
 8016406:	b087      	sub	sp, #28
 8016408:	af00      	add	r7, sp, #0
 801640a:	60f8      	str	r0, [r7, #12]
 801640c:	60b9      	str	r1, [r7, #8]
 801640e:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8016410:	68fa      	ldr	r2, [r7, #12]
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	4413      	add	r3, r2
 8016416:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8016418:	697a      	ldr	r2, [r7, #20]
 801641a:	68bb      	ldr	r3, [r7, #8]
 801641c:	429a      	cmp	r2, r3
 801641e:	db03      	blt.n	8016428 <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8016420:	697a      	ldr	r2, [r7, #20]
 8016422:	68bb      	ldr	r3, [r7, #8]
 8016424:	1ad3      	subs	r3, r2, r3
 8016426:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8016428:	697b      	ldr	r3, [r7, #20]
        }
 801642a:	4618      	mov	r0, r3
 801642c:	371c      	adds	r7, #28
 801642e:	46bd      	mov	sp, r7
 8016430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016434:	4770      	bx	lr
	...

08016438 <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8016438:	b580      	push	{r7, lr}
 801643a:	b088      	sub	sp, #32
 801643c:	af02      	add	r7, sp, #8
 801643e:	60f8      	str	r0, [r7, #12]
 8016440:	60b9      	str	r1, [r7, #8]
 8016442:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	685a      	ldr	r2, [r3, #4]
 8016448:	68bb      	ldr	r3, [r7, #8]
 801644a:	689b      	ldr	r3, [r3, #8]
 801644c:	1ad3      	subs	r3, r2, r3
 801644e:	4619      	mov	r1, r3
 8016450:	6878      	ldr	r0, [r7, #4]
 8016452:	f7f4 fce7 	bl	800ae24 <FreeRTOS_min_int32>
 8016456:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8016458:	68bb      	ldr	r3, [r7, #8]
 801645a:	689a      	ldr	r2, [r3, #8]
 801645c:	697b      	ldr	r3, [r7, #20]
 801645e:	441a      	add	r2, r3
 8016460:	68bb      	ldr	r3, [r7, #8]
 8016462:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	689a      	ldr	r2, [r3, #8]
 8016468:	68bb      	ldr	r3, [r7, #8]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	429a      	cmp	r2, r3
 801646e:	db02      	blt.n	8016476 <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	2200      	movs	r2, #0
 8016474:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8016476:	68fb      	ldr	r3, [r7, #12]
 8016478:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801647a:	697b      	ldr	r3, [r7, #20]
 801647c:	441a      	add	r2, r3
 801647e:	68fb      	ldr	r3, [r7, #12]
 8016480:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8016482:	4b12      	ldr	r3, [pc, #72]	@ (80164cc <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	2b01      	cmp	r3, #1
 8016488:	dd1a      	ble.n	80164c0 <prvTCPWindowTxAdd_FrontSegment+0x88>
 801648a:	68fb      	ldr	r3, [r7, #12]
 801648c:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016490:	2b17      	cmp	r3, #23
 8016492:	d015      	beq.n	80164c0 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8016494:	68bb      	ldr	r3, [r7, #8]
 8016496:	681a      	ldr	r2, [r3, #0]
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	69db      	ldr	r3, [r3, #28]
 801649c:	1ad1      	subs	r1, r2, r3
 801649e:	68bb      	ldr	r3, [r7, #8]
 80164a0:	6898      	ldr	r0, [r3, #8]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	69db      	ldr	r3, [r3, #28]
 80164aa:	1ad3      	subs	r3, r2, r3
 80164ac:	68ba      	ldr	r2, [r7, #8]
 80164ae:	68d2      	ldr	r2, [r2, #12]
 80164b0:	9201      	str	r2, [sp, #4]
 80164b2:	9300      	str	r3, [sp, #0]
 80164b4:	4603      	mov	r3, r0
 80164b6:	460a      	mov	r2, r1
 80164b8:	6879      	ldr	r1, [r7, #4]
 80164ba:	4805      	ldr	r0, [pc, #20]	@ (80164d0 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 80164bc:	f00c f94a 	bl	8022754 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 80164c0:	697b      	ldr	r3, [r7, #20]
        }
 80164c2:	4618      	mov	r0, r3
 80164c4:	3718      	adds	r7, #24
 80164c6:	46bd      	mov	sp, r7
 80164c8:	bd80      	pop	{r7, pc}
 80164ca:	bf00      	nop
 80164cc:	2000164c 	.word	0x2000164c
 80164d0:	080275ec 	.word	0x080275ec

080164d4 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b08a      	sub	sp, #40	@ 0x28
 80164d8:	af00      	add	r7, sp, #0
 80164da:	60f8      	str	r0, [r7, #12]
 80164dc:	60b9      	str	r1, [r7, #8]
 80164de:	607a      	str	r2, [r7, #4]
 80164e0:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 80164e2:	68bb      	ldr	r3, [r7, #8]
 80164e4:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 80164e6:	2300      	movs	r3, #0
 80164e8:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80164f2:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 80164f4:	69bb      	ldr	r3, [r7, #24]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d073      	beq.n	80165e2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80164fa:	69bb      	ldr	r3, [r7, #24]
 80164fc:	689a      	ldr	r2, [r3, #8]
 80164fe:	69bb      	ldr	r3, [r7, #24]
 8016500:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8016502:	429a      	cmp	r2, r3
 8016504:	da6d      	bge.n	80165e2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016506:	69bb      	ldr	r3, [r7, #24]
 8016508:	7d9b      	ldrb	r3, [r3, #22]
 801650a:	f003 0301 	and.w	r3, r3, #1
 801650e:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8016510:	2b00      	cmp	r3, #0
 8016512:	d166      	bne.n	80165e2 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8016514:	69bb      	ldr	r3, [r7, #24]
 8016516:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8016518:	2b00      	cmp	r3, #0
 801651a:	d062      	beq.n	80165e2 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 801651c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801651e:	69b9      	ldr	r1, [r7, #24]
 8016520:	68f8      	ldr	r0, [r7, #12]
 8016522:	f7ff ff89 	bl	8016438 <prvTCPWindowTxAdd_FrontSegment>
 8016526:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8016528:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801652a:	697b      	ldr	r3, [r7, #20]
 801652c:	1ad3      	subs	r3, r2, r3
 801652e:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8016530:	6a3a      	ldr	r2, [r7, #32]
 8016532:	697b      	ldr	r3, [r7, #20]
 8016534:	4413      	add	r3, r2
 8016536:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8016538:	697a      	ldr	r2, [r7, #20]
 801653a:	6839      	ldr	r1, [r7, #0]
 801653c:	69f8      	ldr	r0, [r7, #28]
 801653e:	f7ff ff61 	bl	8016404 <lTCPIncrementTxPosition>
 8016542:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8016544:	e04d      	b.n	80165e2 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8016550:	461a      	mov	r2, r3
 8016552:	2300      	movs	r3, #0
 8016554:	68f8      	ldr	r0, [r7, #12]
 8016556:	f7ff fb61 	bl	8015c1c <xTCPWindowNew>
 801655a:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 801655c:	69bb      	ldr	r3, [r7, #24]
 801655e:	2b00      	cmp	r3, #0
 8016560:	d037      	beq.n	80165d2 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8016562:	69bb      	ldr	r3, [r7, #24]
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	4619      	mov	r1, r3
 8016568:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801656a:	f7f4 fc5b 	bl	800ae24 <FreeRTOS_min_int32>
 801656e:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8016570:	69bb      	ldr	r3, [r7, #24]
 8016572:	697a      	ldr	r2, [r7, #20]
 8016574:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8016576:	69bb      	ldr	r3, [r7, #24]
 8016578:	69fa      	ldr	r2, [r7, #28]
 801657a:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 801657c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801657e:	697b      	ldr	r3, [r7, #20]
 8016580:	1ad3      	subs	r3, r2, r3
 8016582:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8016584:	697a      	ldr	r2, [r7, #20]
 8016586:	6839      	ldr	r1, [r7, #0]
 8016588:	69f8      	ldr	r0, [r7, #28]
 801658a:	f7ff ff3b 	bl	8016404 <lTCPIncrementTxPosition>
 801658e:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016594:	697b      	ldr	r3, [r7, #20]
 8016596:	441a      	add	r2, r3
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 801659c:	6a3a      	ldr	r2, [r7, #32]
 801659e:	697b      	ldr	r3, [r7, #20]
 80165a0:	4413      	add	r3, r2
 80165a2:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 80165aa:	69bb      	ldr	r3, [r7, #24]
 80165ac:	3318      	adds	r3, #24
 80165ae:	4619      	mov	r1, r3
 80165b0:	4610      	mov	r0, r2
 80165b2:	f7ff fa63 	bl	8015a7c <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 80165b6:	69bb      	ldr	r3, [r7, #24]
 80165b8:	689a      	ldr	r2, [r3, #8]
 80165ba:	69bb      	ldr	r3, [r7, #24]
 80165bc:	685b      	ldr	r3, [r3, #4]
 80165be:	429a      	cmp	r2, r3
 80165c0:	da03      	bge.n	80165ca <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 80165c2:	68fb      	ldr	r3, [r7, #12]
 80165c4:	69ba      	ldr	r2, [r7, #24]
 80165c6:	67da      	str	r2, [r3, #124]	@ 0x7c
 80165c8:	e00b      	b.n	80165e2 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 80165ca:	68fb      	ldr	r3, [r7, #12]
 80165cc:	2200      	movs	r2, #0
 80165ce:	67da      	str	r2, [r3, #124]	@ 0x7c
 80165d0:	e007      	b.n	80165e2 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 80165d2:	6a3b      	ldr	r3, [r7, #32]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d008      	beq.n	80165ea <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 80165d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80165da:	4807      	ldr	r0, [pc, #28]	@ (80165f8 <lTCPWindowTxAdd+0x124>)
 80165dc:	f00c f8ba 	bl	8022754 <lUDPLoggingPrintf>
                    }

                    break;
 80165e0:	e003      	b.n	80165ea <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 80165e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	dcae      	bgt.n	8016546 <lTCPWindowTxAdd+0x72>
 80165e8:	e000      	b.n	80165ec <lTCPWindowTxAdd+0x118>
                    break;
 80165ea:	bf00      	nop
                }
            }

            return lDone;
 80165ec:	6a3b      	ldr	r3, [r7, #32]
        }
 80165ee:	4618      	mov	r0, r3
 80165f0:	3728      	adds	r7, #40	@ 0x28
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	08027634 	.word	0x08027634

080165fc <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 80165fc:	b480      	push	{r7}
 80165fe:	b083      	sub	sp, #12
 8016600:	af00      	add	r7, sp, #0
 8016602:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8016604:	687b      	ldr	r3, [r7, #4]
 8016606:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801660a:	2b00      	cmp	r3, #0
 801660c:	d101      	bne.n	8016612 <xTCPWindowTxDone+0x16>
 801660e:	2301      	movs	r3, #1
 8016610:	e000      	b.n	8016614 <xTCPWindowTxDone+0x18>
 8016612:	2300      	movs	r3, #0
        }
 8016614:	4618      	mov	r0, r3
 8016616:	370c      	adds	r7, #12
 8016618:	46bd      	mov	sp, r7
 801661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801661e:	4770      	bx	lr

08016620 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8016620:	b580      	push	{r7, lr}
 8016622:	b086      	sub	sp, #24
 8016624:	af00      	add	r7, sp, #0
 8016626:	6078      	str	r0, [r7, #4]
 8016628:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	3354      	adds	r3, #84	@ 0x54
 801662e:	4618      	mov	r0, r3
 8016630:	f7ff fbb5 	bl	8015d9e <xTCPWindowPeekHead>
 8016634:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d102      	bne.n	8016642 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 801663c:	2300      	movs	r3, #0
 801663e:	613b      	str	r3, [r7, #16]
 8016640:	e02f      	b.n	80166a2 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8016642:	687b      	ldr	r3, [r7, #4]
 8016644:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	6a1b      	ldr	r3, [r3, #32]
 801664a:	429a      	cmp	r2, r3
 801664c:	d306      	bcc.n	801665c <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	6a1b      	ldr	r3, [r3, #32]
 8016656:	1ad3      	subs	r3, r2, r3
 8016658:	617b      	str	r3, [r7, #20]
 801665a:	e001      	b.n	8016660 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 801665c:	2300      	movs	r3, #0
 801665e:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8016660:	6979      	ldr	r1, [r7, #20]
 8016662:	6838      	ldr	r0, [r7, #0]
 8016664:	f7f4 fbee 	bl	800ae44 <FreeRTOS_min_uint32>
 8016668:	4602      	mov	r2, r0
 801666a:	683b      	ldr	r3, [r7, #0]
 801666c:	1a9b      	subs	r3, r3, r2
 801666e:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8016670:	68fb      	ldr	r3, [r7, #12]
 8016672:	689b      	ldr	r3, [r3, #8]
 8016674:	461a      	mov	r2, r3
 8016676:	68bb      	ldr	r3, [r7, #8]
 8016678:	4293      	cmp	r3, r2
 801667a:	d302      	bcc.n	8016682 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 801667c:	2301      	movs	r3, #1
 801667e:	613b      	str	r3, [r7, #16]
 8016680:	e001      	b.n	8016686 <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8016682:	2300      	movs	r3, #0
 8016684:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8016686:	697b      	ldr	r3, [r7, #20]
 8016688:	2b00      	cmp	r3, #0
 801668a:	d00a      	beq.n	80166a2 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	689b      	ldr	r3, [r3, #8]
 8016694:	4619      	mov	r1, r3
 8016696:	697b      	ldr	r3, [r7, #20]
 8016698:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 801669a:	429a      	cmp	r2, r3
 801669c:	d201      	bcs.n	80166a2 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 801669e:	2300      	movs	r3, #0
 80166a0:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 80166a2:	693b      	ldr	r3, [r7, #16]
        }
 80166a4:	4618      	mov	r0, r3
 80166a6:	3718      	adds	r7, #24
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}

080166ac <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b08a      	sub	sp, #40	@ 0x28
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	60f8      	str	r0, [r7, #12]
 80166b4:	60b9      	str	r1, [r7, #8]
 80166b6:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	2200      	movs	r2, #0
 80166bc:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 80166be:	68fb      	ldr	r3, [r7, #12]
 80166c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d002      	beq.n	80166cc <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 80166c6:	2301      	movs	r3, #1
 80166c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80166ca:	e050      	b.n	801676e <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	3368      	adds	r3, #104	@ 0x68
 80166d0:	4618      	mov	r0, r3
 80166d2:	f7ff fb64 	bl	8015d9e <xTCPWindowPeekHead>
 80166d6:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 80166d8:	6a3b      	ldr	r3, [r7, #32]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d01f      	beq.n	801671e <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80166e2:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 80166e4:	6a3b      	ldr	r3, [r7, #32]
 80166e6:	3310      	adds	r3, #16
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7ff f9e4 	bl	8015ab6 <ulTimerGetAge>
 80166ee:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 80166f0:	6a3b      	ldr	r3, [r7, #32]
 80166f2:	7d1b      	ldrb	r3, [r3, #20]
 80166f4:	461a      	mov	r2, r3
 80166f6:	2301      	movs	r3, #1
 80166f8:	4093      	lsls	r3, r2
 80166fa:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	69fa      	ldr	r2, [r7, #28]
 8016700:	fb02 f303 	mul.w	r3, r2, r3
 8016704:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 8016706:	697a      	ldr	r2, [r7, #20]
 8016708:	69bb      	ldr	r3, [r7, #24]
 801670a:	429a      	cmp	r2, r3
 801670c:	d904      	bls.n	8016718 <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 801670e:	697a      	ldr	r2, [r7, #20]
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	1ad2      	subs	r2, r2, r3
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8016718:	2301      	movs	r3, #1
 801671a:	627b      	str	r3, [r7, #36]	@ 0x24
 801671c:	e027      	b.n	801676e <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 801671e:	68fb      	ldr	r3, [r7, #12]
 8016720:	3354      	adds	r3, #84	@ 0x54
 8016722:	4618      	mov	r0, r3
 8016724:	f7ff fb3b 	bl	8015d9e <xTCPWindowPeekHead>
 8016728:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 801672a:	6a3b      	ldr	r3, [r7, #32]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d102      	bne.n	8016736 <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8016730:	2300      	movs	r3, #0
 8016732:	627b      	str	r3, [r7, #36]	@ 0x24
 8016734:	e01b      	b.n	801676e <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8016736:	68b9      	ldr	r1, [r7, #8]
 8016738:	68f8      	ldr	r0, [r7, #12]
 801673a:	f7ff ff71 	bl	8016620 <prvTCPWindowTxHasSpace>
 801673e:	4603      	mov	r3, r0
 8016740:	2b00      	cmp	r3, #0
 8016742:	d102      	bne.n	801674a <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8016744:	2300      	movs	r3, #0
 8016746:	627b      	str	r3, [r7, #36]	@ 0x24
 8016748:	e011      	b.n	801676e <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801674a:	68fb      	ldr	r3, [r7, #12]
 801674c:	781b      	ldrb	r3, [r3, #0]
 801674e:	f003 0302 	and.w	r3, r3, #2
 8016752:	b2db      	uxtb	r3, r3
 8016754:	2b00      	cmp	r3, #0
 8016756:	d008      	beq.n	801676a <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8016758:	6a3b      	ldr	r3, [r7, #32]
 801675a:	689a      	ldr	r2, [r3, #8]
 801675c:	6a3b      	ldr	r3, [r7, #32]
 801675e:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016760:	429a      	cmp	r2, r3
 8016762:	da02      	bge.n	801676a <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8016764:	2300      	movs	r3, #0
 8016766:	627b      	str	r3, [r7, #36]	@ 0x24
 8016768:	e001      	b.n	801676e <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 801676a:	2301      	movs	r3, #1
 801676c:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 801676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8016770:	4618      	mov	r0, r3
 8016772:	3728      	adds	r7, #40	@ 0x28
 8016774:	46bd      	mov	sp, r7
 8016776:	bd80      	pop	{r7, pc}

08016778 <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 8016778:	b590      	push	{r4, r7, lr}
 801677a:	b087      	sub	sp, #28
 801677c:	af02      	add	r7, sp, #8
 801677e:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	3368      	adds	r3, #104	@ 0x68
 8016784:	4618      	mov	r0, r3
 8016786:	f7ff fb0a 	bl	8015d9e <xTCPWindowPeekHead>
 801678a:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d043      	beq.n	801681a <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8016792:	68fb      	ldr	r3, [r7, #12]
 8016794:	7d1b      	ldrb	r3, [r3, #20]
 8016796:	461a      	mov	r2, r3
 8016798:	2301      	movs	r3, #1
 801679a:	4093      	lsls	r3, r2
 801679c:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 801679e:	687b      	ldr	r3, [r7, #4]
 80167a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80167a2:	461a      	mov	r2, r3
 80167a4:	68bb      	ldr	r3, [r7, #8]
 80167a6:	fb02 f303 	mul.w	r3, r2, r3
 80167aa:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 80167ac:	68fb      	ldr	r3, [r7, #12]
 80167ae:	3310      	adds	r3, #16
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7ff f980 	bl	8015ab6 <ulTimerGetAge>
 80167b6:	4602      	mov	r2, r0
 80167b8:	68bb      	ldr	r3, [r7, #8]
 80167ba:	4293      	cmp	r3, r2
 80167bc:	d22b      	bcs.n	8016816 <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	3368      	adds	r3, #104	@ 0x68
 80167c2:	4618      	mov	r0, r3
 80167c4:	f7ff fad2 	bl	8015d6c <xTCPWindowGetHead>
 80167c8:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 80167ca:	68fb      	ldr	r3, [r7, #12]
 80167cc:	2200      	movs	r2, #0
 80167ce:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80167d0:	4b14      	ldr	r3, [pc, #80]	@ (8016824 <pxTCPWindowTx_GetWaitQueue+0xac>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d020      	beq.n	801681a <pxTCPWindowTx_GetWaitQueue+0xa2>
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80167de:	2b17      	cmp	r3, #23
 80167e0:	d01b      	beq.n	801681a <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80167e8:	4618      	mov	r0, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80167f0:	461c      	mov	r4, r3
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	6899      	ldr	r1, [r3, #8]
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	681a      	ldr	r2, [r3, #0]
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	69db      	ldr	r3, [r3, #28]
 80167fe:	1ad3      	subs	r3, r2, r3
 8016800:	68fa      	ldr	r2, [r7, #12]
 8016802:	6812      	ldr	r2, [r2, #0]
 8016804:	9201      	str	r2, [sp, #4]
 8016806:	9300      	str	r3, [sp, #0]
 8016808:	460b      	mov	r3, r1
 801680a:	4622      	mov	r2, r4
 801680c:	4601      	mov	r1, r0
 801680e:	4806      	ldr	r0, [pc, #24]	@ (8016828 <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8016810:	f00b ffa0 	bl	8022754 <lUDPLoggingPrintf>
 8016814:	e001      	b.n	801681a <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8016816:	2300      	movs	r3, #0
 8016818:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 801681a:	68fb      	ldr	r3, [r7, #12]
        }
 801681c:	4618      	mov	r0, r3
 801681e:	3714      	adds	r7, #20
 8016820:	46bd      	mov	sp, r7
 8016822:	bd90      	pop	{r4, r7, pc}
 8016824:	2000164c 	.word	0x2000164c
 8016828:	08027670 	.word	0x08027670

0801682c <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 801682c:	b590      	push	{r4, r7, lr}
 801682e:	b087      	sub	sp, #28
 8016830:	af02      	add	r7, sp, #8
 8016832:	6078      	str	r0, [r7, #4]
 8016834:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	3354      	adds	r3, #84	@ 0x54
 801683a:	4618      	mov	r0, r3
 801683c:	f7ff faaf 	bl	8015d9e <xTCPWindowPeekHead>
 8016840:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d04f      	beq.n	80168e8 <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016848:	687b      	ldr	r3, [r7, #4]
 801684a:	781b      	ldrb	r3, [r3, #0]
 801684c:	f003 0302 	and.w	r3, r3, #2
 8016850:	b2db      	uxtb	r3, r3
 8016852:	2b00      	cmp	r3, #0
 8016854:	d008      	beq.n	8016868 <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8016856:	68fb      	ldr	r3, [r7, #12]
 8016858:	689a      	ldr	r2, [r3, #8]
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801685e:	429a      	cmp	r2, r3
 8016860:	da02      	bge.n	8016868 <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8016862:	2300      	movs	r3, #0
 8016864:	60fb      	str	r3, [r7, #12]
 8016866:	e03f      	b.n	80168e8 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8016868:	6839      	ldr	r1, [r7, #0]
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f7ff fed8 	bl	8016620 <prvTCPWindowTxHasSpace>
 8016870:	4603      	mov	r3, r0
 8016872:	2b00      	cmp	r3, #0
 8016874:	d102      	bne.n	801687c <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 8016876:	2300      	movs	r3, #0
 8016878:	60fb      	str	r3, [r7, #12]
 801687a:	e035      	b.n	80168e8 <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	3354      	adds	r3, #84	@ 0x54
 8016880:	4618      	mov	r0, r3
 8016882:	f7ff fa73 	bl	8015d6c <xTCPWindowGetHead>
 8016886:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801688c:	68fa      	ldr	r2, [r7, #12]
 801688e:	429a      	cmp	r2, r3
 8016890:	d102      	bne.n	8016898 <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	2200      	movs	r2, #0
 8016896:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	68fa      	ldr	r2, [r7, #12]
 801689e:	6892      	ldr	r2, [r2, #8]
 80168a0:	441a      	add	r2, r3
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 80168a6:	4b13      	ldr	r3, [pc, #76]	@ (80168f4 <pxTCPWindowTx_GetTXQueue+0xc8>)
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	2b01      	cmp	r3, #1
 80168ac:	dd1c      	ble.n	80168e8 <pxTCPWindowTx_GetTXQueue+0xbc>
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80168b4:	2b17      	cmp	r3, #23
 80168b6:	d017      	beq.n	80168e8 <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80168be:	4618      	mov	r0, r3
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80168c6:	461c      	mov	r4, r3
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	6899      	ldr	r1, [r3, #8]
 80168cc:	68fb      	ldr	r3, [r7, #12]
 80168ce:	681a      	ldr	r2, [r3, #0]
 80168d0:	687b      	ldr	r3, [r7, #4]
 80168d2:	69db      	ldr	r3, [r3, #28]
 80168d4:	1ad3      	subs	r3, r2, r3
 80168d6:	683a      	ldr	r2, [r7, #0]
 80168d8:	9201      	str	r2, [sp, #4]
 80168da:	9300      	str	r3, [sp, #0]
 80168dc:	460b      	mov	r3, r1
 80168de:	4622      	mov	r2, r4
 80168e0:	4601      	mov	r1, r0
 80168e2:	4805      	ldr	r0, [pc, #20]	@ (80168f8 <pxTCPWindowTx_GetTXQueue+0xcc>)
 80168e4:	f00b ff36 	bl	8022754 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 80168e8:	68fb      	ldr	r3, [r7, #12]
        }
 80168ea:	4618      	mov	r0, r3
 80168ec:	3714      	adds	r7, #20
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd90      	pop	{r4, r7, pc}
 80168f2:	bf00      	nop
 80168f4:	2000164c 	.word	0x2000164c
 80168f8:	080276bc 	.word	0x080276bc

080168fc <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 80168fc:	b590      	push	{r4, r7, lr}
 80168fe:	b08b      	sub	sp, #44	@ 0x2c
 8016900:	af02      	add	r7, sp, #8
 8016902:	60f8      	str	r0, [r7, #12]
 8016904:	60b9      	str	r1, [r7, #8]
 8016906:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 8016908:	2300      	movs	r3, #0
 801690a:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 801690c:	68fb      	ldr	r3, [r7, #12]
 801690e:	3340      	adds	r3, #64	@ 0x40
 8016910:	4618      	mov	r0, r3
 8016912:	f7ff fa2b 	bl	8015d6c <xTCPWindowGetHead>
 8016916:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 8016918:	68fb      	ldr	r3, [r7, #12]
 801691a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 8016920:	69fb      	ldr	r3, [r7, #28]
 8016922:	2b00      	cmp	r3, #0
 8016924:	d01c      	beq.n	8016960 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 8016926:	4b41      	ldr	r3, [pc, #260]	@ (8016a2c <ulTCPWindowTxGet+0x130>)
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d024      	beq.n	8016978 <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016934:	4618      	mov	r0, r3
 8016936:	68fb      	ldr	r3, [r7, #12]
 8016938:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801693c:	461c      	mov	r4, r3
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	6899      	ldr	r1, [r3, #8]
 8016942:	69fb      	ldr	r3, [r7, #28]
 8016944:	681a      	ldr	r2, [r3, #0]
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	69db      	ldr	r3, [r3, #28]
 801694a:	1ad3      	subs	r3, r2, r3
 801694c:	68ba      	ldr	r2, [r7, #8]
 801694e:	9201      	str	r2, [sp, #4]
 8016950:	9300      	str	r3, [sp, #0]
 8016952:	460b      	mov	r3, r1
 8016954:	4622      	mov	r2, r4
 8016956:	4601      	mov	r1, r0
 8016958:	4835      	ldr	r0, [pc, #212]	@ (8016a30 <ulTCPWindowTxGet+0x134>)
 801695a:	f00b fefb 	bl	8022754 <lUDPLoggingPrintf>
 801695e:	e00b      	b.n	8016978 <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8016960:	68f8      	ldr	r0, [r7, #12]
 8016962:	f7ff ff09 	bl	8016778 <pxTCPWindowTx_GetWaitQueue>
 8016966:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	2b00      	cmp	r3, #0
 801696c:	d104      	bne.n	8016978 <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 801696e:	68b9      	ldr	r1, [r7, #8]
 8016970:	68f8      	ldr	r0, [r7, #12]
 8016972:	f7ff ff5b 	bl	801682c <pxTCPWindowTx_GetTXQueue>
 8016976:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 8016978:	69fb      	ldr	r3, [r7, #28]
 801697a:	2b00      	cmp	r3, #0
 801697c:	d051      	beq.n	8016a22 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 801697e:	69fb      	ldr	r3, [r7, #28]
 8016980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016982:	2b00      	cmp	r3, #0
 8016984:	d004      	beq.n	8016990 <ulTCPWindowTxGet+0x94>
 8016986:	f240 7136 	movw	r1, #1846	@ 0x736
 801698a:	482a      	ldr	r0, [pc, #168]	@ (8016a34 <ulTCPWindowTxGet+0x138>)
 801698c:	f7eb f804 	bl	8001998 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016996:	69fb      	ldr	r3, [r7, #28]
 8016998:	3318      	adds	r3, #24
 801699a:	4619      	mov	r1, r3
 801699c:	4610      	mov	r0, r2
 801699e:	f7ff f86d 	bl	8015a7c <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 80169a2:	69fa      	ldr	r2, [r7, #28]
 80169a4:	7d93      	ldrb	r3, [r2, #22]
 80169a6:	f043 0301 	orr.w	r3, r3, #1
 80169aa:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 80169ac:	69fb      	ldr	r3, [r7, #28]
 80169ae:	7d1b      	ldrb	r3, [r3, #20]
 80169b0:	3301      	adds	r3, #1
 80169b2:	b2da      	uxtb	r2, r3
 80169b4:	69fb      	ldr	r3, [r7, #28]
 80169b6:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	7d1b      	ldrb	r3, [r3, #20]
 80169bc:	2b04      	cmp	r3, #4
 80169be:	d120      	bne.n	8016a02 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	689a      	ldr	r2, [r3, #8]
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80169ca:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 80169cc:	429a      	cmp	r2, r3
 80169ce:	d918      	bls.n	8016a02 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 80169d0:	68fb      	ldr	r3, [r7, #12]
 80169d2:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 80169d6:	005b      	lsls	r3, r3, #1
 80169d8:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80169e0:	4619      	mov	r1, r3
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80169e8:	4618      	mov	r0, r3
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	689a      	ldr	r2, [r3, #8]
 80169ee:	8afb      	ldrh	r3, [r7, #22]
 80169f0:	9300      	str	r3, [sp, #0]
 80169f2:	4613      	mov	r3, r2
 80169f4:	4602      	mov	r2, r0
 80169f6:	4810      	ldr	r0, [pc, #64]	@ (8016a38 <ulTCPWindowTxGet+0x13c>)
 80169f8:	f00b feac 	bl	8022754 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 80169fc:	8afa      	ldrh	r2, [r7, #22]
 80169fe:	68fb      	ldr	r3, [r7, #12]
 8016a00:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	3310      	adds	r3, #16
 8016a06:	4618      	mov	r0, r3
 8016a08:	f7ff f848 	bl	8015a9c <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 8016a0c:	69fb      	ldr	r3, [r7, #28]
 8016a0e:	681a      	ldr	r2, [r3, #0]
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 8016a14:	69fb      	ldr	r3, [r7, #28]
 8016a16:	68da      	ldr	r2, [r3, #12]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 8016a1c:	69fb      	ldr	r3, [r7, #28]
 8016a1e:	689b      	ldr	r3, [r3, #8]
 8016a20:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 8016a22:	69bb      	ldr	r3, [r7, #24]
        }
 8016a24:	4618      	mov	r0, r3
 8016a26:	3724      	adds	r7, #36	@ 0x24
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd90      	pop	{r4, r7, pc}
 8016a2c:	2000164c 	.word	0x2000164c
 8016a30:	08027708 	.word	0x08027708
 8016a34:	080273a4 	.word	0x080273a4
 8016a38:	08027754 	.word	0x08027754

08016a3c <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8016a3c:	b580      	push	{r7, lr}
 8016a3e:	b084      	sub	sp, #16
 8016a40:	af00      	add	r7, sp, #0
 8016a42:	6078      	str	r0, [r7, #4]
 8016a44:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 8016a46:	683b      	ldr	r3, [r7, #0]
 8016a48:	3310      	adds	r3, #16
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7ff f833 	bl	8015ab6 <ulTimerGetAge>
 8016a50:	4603      	mov	r3, r0
 8016a52:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a58:	68fa      	ldr	r2, [r7, #12]
 8016a5a:	429a      	cmp	r2, r3
 8016a5c:	dc0e      	bgt.n	8016a7c <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016a62:	4613      	mov	r3, r2
 8016a64:	00db      	lsls	r3, r3, #3
 8016a66:	1a9a      	subs	r2, r3, r2
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	4413      	add	r3, r2
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	da00      	bge.n	8016a72 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8016a70:	3307      	adds	r3, #7
 8016a72:	10db      	asrs	r3, r3, #3
 8016a74:	461a      	mov	r2, r3
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	639a      	str	r2, [r3, #56]	@ 0x38
 8016a7a:	e00d      	b.n	8016a98 <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016a80:	4613      	mov	r3, r2
 8016a82:	005b      	lsls	r3, r3, #1
 8016a84:	441a      	add	r2, r3
 8016a86:	68fb      	ldr	r3, [r7, #12]
 8016a88:	4413      	add	r3, r2
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	da00      	bge.n	8016a90 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8016a8e:	3303      	adds	r3, #3
 8016a90:	109b      	asrs	r3, r3, #2
 8016a92:	461a      	mov	r2, r3
 8016a94:	687b      	ldr	r3, [r7, #4]
 8016a96:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016a9c:	2b31      	cmp	r3, #49	@ 0x31
 8016a9e:	dc02      	bgt.n	8016aa6 <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2232      	movs	r2, #50	@ 0x32
 8016aa4:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 8016aa6:	bf00      	nop
 8016aa8:	3710      	adds	r7, #16
 8016aaa:	46bd      	mov	sp, r7
 8016aac:	bd80      	pop	{r7, pc}
	...

08016ab0 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8016ab0:	b5b0      	push	{r4, r5, r7, lr}
 8016ab2:	b090      	sub	sp, #64	@ 0x40
 8016ab4:	af04      	add	r7, sp, #16
 8016ab6:	60f8      	str	r0, [r7, #12]
 8016ab8:	60b9      	str	r1, [r7, #8]
 8016aba:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8016abc:	2300      	movs	r3, #0
 8016abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8016ac0:	68bb      	ldr	r3, [r7, #8]
 8016ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	3398      	adds	r3, #152	@ 0x98
 8016ac8:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 8016aca:	69fb      	ldr	r3, [r7, #28]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016ad0:	e0a6      	b.n	8016c20 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8016ad2:	2300      	movs	r3, #0
 8016ad4:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad8:	68db      	ldr	r3, [r3, #12]
 8016ada:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8016adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ade:	685b      	ldr	r3, [r3, #4]
 8016ae0:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8016ae2:	69bb      	ldr	r3, [r7, #24]
 8016ae4:	681b      	ldr	r3, [r3, #0]
 8016ae6:	4619      	mov	r1, r3
 8016ae8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016aea:	f7fe ff9c 	bl	8015a26 <xSequenceGreaterThan>
 8016aee:	4603      	mov	r3, r0
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	f040 8094 	bne.w	8016c1e <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 8016af6:	69bb      	ldr	r3, [r7, #24]
 8016af8:	681b      	ldr	r3, [r3, #0]
 8016afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016afc:	429a      	cmp	r2, r3
 8016afe:	f040 809c 	bne.w	8016c3a <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 8016b02:	69bb      	ldr	r3, [r7, #24]
 8016b04:	689b      	ldr	r3, [r3, #8]
 8016b06:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016b08:	69bb      	ldr	r3, [r7, #24]
 8016b0a:	7d9b      	ldrb	r3, [r3, #22]
 8016b0c:	f003 0302 	and.w	r3, r3, #2
 8016b10:	b2db      	uxtb	r3, r3
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d144      	bne.n	8016ba0 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 8016b16:	69bb      	ldr	r3, [r7, #24]
 8016b18:	681a      	ldr	r2, [r3, #0]
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	6879      	ldr	r1, [r7, #4]
 8016b20:	4618      	mov	r0, r3
 8016b22:	f7fe ff80 	bl	8015a26 <xSequenceGreaterThan>
 8016b26:	4603      	mov	r3, r0
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	d023      	beq.n	8016b74 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 8016b2c:	69bb      	ldr	r3, [r7, #24]
 8016b2e:	681a      	ldr	r2, [r3, #0]
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	69db      	ldr	r3, [r3, #28]
 8016b34:	1ad3      	subs	r3, r2, r3
 8016b36:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 8016b38:	68fb      	ldr	r3, [r7, #12]
 8016b3a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016b3e:	461c      	mov	r4, r3
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016b46:	461d      	mov	r5, r3
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	69db      	ldr	r3, [r3, #28]
 8016b4c:	693a      	ldr	r2, [r7, #16]
 8016b4e:	1ad0      	subs	r0, r2, r3
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	69db      	ldr	r3, [r3, #28]
 8016b54:	687a      	ldr	r2, [r7, #4]
 8016b56:	1ad3      	subs	r3, r2, r3
 8016b58:	6939      	ldr	r1, [r7, #16]
 8016b5a:	697a      	ldr	r2, [r7, #20]
 8016b5c:	440a      	add	r2, r1
 8016b5e:	9202      	str	r2, [sp, #8]
 8016b60:	693a      	ldr	r2, [r7, #16]
 8016b62:	9201      	str	r2, [sp, #4]
 8016b64:	9300      	str	r3, [sp, #0]
 8016b66:	4603      	mov	r3, r0
 8016b68:	462a      	mov	r2, r5
 8016b6a:	4621      	mov	r1, r4
 8016b6c:	4836      	ldr	r0, [pc, #216]	@ (8016c48 <prvTCPWindowTxCheckAck+0x198>)
 8016b6e:	f00b fdf1 	bl	8022754 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016b72:	e063      	b.n	8016c3c <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016b74:	69ba      	ldr	r2, [r7, #24]
 8016b76:	7d93      	ldrb	r3, [r2, #22]
 8016b78:	f043 0302 	orr.w	r3, r3, #2
 8016b7c:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016b7e:	69bb      	ldr	r3, [r7, #24]
 8016b80:	7d1b      	ldrb	r3, [r3, #20]
 8016b82:	2b01      	cmp	r3, #1
 8016b84:	d10a      	bne.n	8016b9c <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 8016b86:	69bb      	ldr	r3, [r7, #24]
 8016b88:	681a      	ldr	r2, [r3, #0]
 8016b8a:	697b      	ldr	r3, [r7, #20]
 8016b8c:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016b8e:	687a      	ldr	r2, [r7, #4]
 8016b90:	429a      	cmp	r2, r3
 8016b92:	d103      	bne.n	8016b9c <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016b94:	69b9      	ldr	r1, [r7, #24]
 8016b96:	68f8      	ldr	r0, [r7, #12]
 8016b98:	f7ff ff50 	bl	8016a3c <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016b9c:	2301      	movs	r3, #1
 8016b9e:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016ba0:	68fb      	ldr	r3, [r7, #12]
 8016ba2:	6a1b      	ldr	r3, [r3, #32]
 8016ba4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d128      	bne.n	8016bfc <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016baa:	4b28      	ldr	r3, [pc, #160]	@ (8016c4c <prvTCPWindowTxCheckAck+0x19c>)
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	2b01      	cmp	r3, #1
 8016bb0:	dd15      	ble.n	8016bde <prvTCPWindowTxCheckAck+0x12e>
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016bb8:	2b17      	cmp	r3, #23
 8016bba:	d010      	beq.n	8016bde <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	69db      	ldr	r3, [r3, #28]
 8016bc0:	68ba      	ldr	r2, [r7, #8]
 8016bc2:	1ad1      	subs	r1, r2, r3
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	69db      	ldr	r3, [r3, #28]
 8016bc8:	687a      	ldr	r2, [r7, #4]
 8016bca:	1ad0      	subs	r0, r2, r3
 8016bcc:	69bb      	ldr	r3, [r7, #24]
 8016bce:	681a      	ldr	r2, [r3, #0]
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	69db      	ldr	r3, [r3, #28]
 8016bd4:	1ad3      	subs	r3, r2, r3
 8016bd6:	4602      	mov	r2, r0
 8016bd8:	481d      	ldr	r0, [pc, #116]	@ (8016c50 <prvTCPWindowTxCheckAck+0x1a0>)
 8016bda:	f00b fdbb 	bl	8022754 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	6a1a      	ldr	r2, [r3, #32]
 8016be2:	697b      	ldr	r3, [r7, #20]
 8016be4:	441a      	add	r2, r3
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 8016bea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	4413      	add	r3, r2
 8016bf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8016bf2:	69b8      	ldr	r0, [r7, #24]
 8016bf4:	f7ff f8ec 	bl	8015dd0 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 8016bfc:	6a3b      	ldr	r3, [r7, #32]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d008      	beq.n	8016c14 <prvTCPWindowTxCheckAck+0x164>
 8016c02:	69bb      	ldr	r3, [r7, #24]
 8016c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d004      	beq.n	8016c14 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016c0a:	69bb      	ldr	r3, [r7, #24]
 8016c0c:	3318      	adds	r3, #24
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f7ec fe36 	bl	8003880 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 8016c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016c16:	697b      	ldr	r3, [r7, #20]
 8016c18:	4413      	add	r3, r2
 8016c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016c1c:	e000      	b.n	8016c20 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 8016c1e:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c22:	69fb      	ldr	r3, [r7, #28]
 8016c24:	429a      	cmp	r2, r3
 8016c26:	d009      	beq.n	8016c3c <prvTCPWindowTxCheckAck+0x18c>
 8016c28:	6879      	ldr	r1, [r7, #4]
 8016c2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016c2c:	f7fe fee5 	bl	80159fa <xSequenceLessThan>
 8016c30:	4603      	mov	r3, r0
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	f47f af4d 	bne.w	8016ad2 <prvTCPWindowTxCheckAck+0x22>
 8016c38:	e000      	b.n	8016c3c <prvTCPWindowTxCheckAck+0x18c>
                    break;
 8016c3a:	bf00      	nop
            }

            return ulBytesConfirmed;
 8016c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8016c3e:	4618      	mov	r0, r3
 8016c40:	3730      	adds	r7, #48	@ 0x30
 8016c42:	46bd      	mov	sp, r7
 8016c44:	bdb0      	pop	{r4, r5, r7, pc}
 8016c46:	bf00      	nop
 8016c48:	0802778c 	.word	0x0802778c
 8016c4c:	2000164c 	.word	0x2000164c
 8016c50:	080277d4 	.word	0x080277d4

08016c54 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b086      	sub	sp, #24
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
 8016c5c:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8016c5e:	2300      	movs	r3, #0
 8016c60:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	3370      	adds	r3, #112	@ 0x70
 8016c66:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	685b      	ldr	r3, [r3, #4]
 8016c6c:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016c6e:	e049      	b.n	8016d04 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	68db      	ldr	r3, [r3, #12]
 8016c74:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8016c76:	697b      	ldr	r3, [r7, #20]
 8016c78:	685b      	ldr	r3, [r3, #4]
 8016c7a:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016c7c:	68bb      	ldr	r3, [r7, #8]
 8016c7e:	7d9b      	ldrb	r3, [r3, #22]
 8016c80:	f003 0302 	and.w	r3, r3, #2
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d13c      	bne.n	8016d04 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8016c8a:	68bb      	ldr	r3, [r7, #8]
 8016c8c:	681b      	ldr	r3, [r3, #0]
 8016c8e:	6839      	ldr	r1, [r7, #0]
 8016c90:	4618      	mov	r0, r3
 8016c92:	f7fe feb2 	bl	80159fa <xSequenceLessThan>
 8016c96:	4603      	mov	r3, r0
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d033      	beq.n	8016d04 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016c9c:	68bb      	ldr	r3, [r7, #8]
 8016c9e:	7d5b      	ldrb	r3, [r3, #21]
 8016ca0:	3301      	adds	r3, #1
 8016ca2:	b2da      	uxtb	r2, r3
 8016ca4:	68bb      	ldr	r3, [r7, #8]
 8016ca6:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8016ca8:	68bb      	ldr	r3, [r7, #8]
 8016caa:	7d5b      	ldrb	r3, [r3, #21]
 8016cac:	2b03      	cmp	r3, #3
 8016cae:	d129      	bne.n	8016d04 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	2200      	movs	r2, #0
 8016cb4:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8016cb6:	4b18      	ldr	r3, [pc, #96]	@ (8016d18 <prvTCPWindowFastRetransmit+0xc4>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	db11      	blt.n	8016ce2 <prvTCPWindowFastRetransmit+0x8e>
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016cc4:	2b17      	cmp	r3, #23
 8016cc6:	d00c      	beq.n	8016ce2 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8016cc8:	68bb      	ldr	r3, [r7, #8]
 8016cca:	681a      	ldr	r2, [r3, #0]
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	69db      	ldr	r3, [r3, #28]
 8016cd0:	1ad1      	subs	r1, r2, r3
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	69db      	ldr	r3, [r3, #28]
 8016cd6:	683a      	ldr	r2, [r7, #0]
 8016cd8:	1ad3      	subs	r3, r2, r3
 8016cda:	461a      	mov	r2, r3
 8016cdc:	480f      	ldr	r0, [pc, #60]	@ (8016d1c <prvTCPWindowFastRetransmit+0xc8>)
 8016cde:	f00b fd39 	bl	8022754 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016ce2:	68bb      	ldr	r3, [r7, #8]
 8016ce4:	3318      	adds	r3, #24
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7ec fdca 	bl	8003880 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	3318      	adds	r3, #24
 8016cf6:	4619      	mov	r1, r3
 8016cf8:	4610      	mov	r0, r2
 8016cfa:	f7fe febf 	bl	8015a7c <vListInsertFifo>
                            ulCount++;
 8016cfe:	693b      	ldr	r3, [r7, #16]
 8016d00:	3301      	adds	r3, #1
 8016d02:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8016d04:	697a      	ldr	r2, [r7, #20]
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d1b1      	bne.n	8016c70 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8016d0c:	693b      	ldr	r3, [r7, #16]
        }
 8016d0e:	4618      	mov	r0, r3
 8016d10:	3718      	adds	r7, #24
 8016d12:	46bd      	mov	sp, r7
 8016d14:	bd80      	pop	{r7, pc}
 8016d16:	bf00      	nop
 8016d18:	2000164c 	.word	0x2000164c
 8016d1c:	08027810 	.word	0x08027810

08016d20 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b084      	sub	sp, #16
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
 8016d28:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6a1b      	ldr	r3, [r3, #32]
 8016d2e:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8016d30:	68b9      	ldr	r1, [r7, #8]
 8016d32:	6838      	ldr	r0, [r7, #0]
 8016d34:	f7fe fe4c 	bl	80159d0 <xSequenceLessThanOrEqual>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d002      	beq.n	8016d44 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8016d3e:	2300      	movs	r3, #0
 8016d40:	60fb      	str	r3, [r7, #12]
 8016d42:	e005      	b.n	8016d50 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8016d44:	683a      	ldr	r2, [r7, #0]
 8016d46:	68b9      	ldr	r1, [r7, #8]
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7ff feb1 	bl	8016ab0 <prvTCPWindowTxCheckAck>
 8016d4e:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8016d50:	68fb      	ldr	r3, [r7, #12]
        }
 8016d52:	4618      	mov	r0, r3
 8016d54:	3710      	adds	r7, #16
 8016d56:	46bd      	mov	sp, r7
 8016d58:	bd80      	pop	{r7, pc}
	...

08016d5c <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8016d5c:	b5b0      	push	{r4, r5, r7, lr}
 8016d5e:	b088      	sub	sp, #32
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	6a1b      	ldr	r3, [r3, #32]
 8016d6c:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016d6e:	687a      	ldr	r2, [r7, #4]
 8016d70:	68b9      	ldr	r1, [r7, #8]
 8016d72:	68f8      	ldr	r0, [r7, #12]
 8016d74:	f7ff fe9c 	bl	8016ab0 <prvTCPWindowTxCheckAck>
 8016d78:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8016d7a:	68b9      	ldr	r1, [r7, #8]
 8016d7c:	68f8      	ldr	r0, [r7, #12]
 8016d7e:	f7ff ff69 	bl	8016c54 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016d82:	4b16      	ldr	r3, [pc, #88]	@ (8016ddc <ulTCPWindowTxSack+0x80>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	dd23      	ble.n	8016dd2 <ulTCPWindowTxSack+0x76>
 8016d8a:	6979      	ldr	r1, [r7, #20]
 8016d8c:	68b8      	ldr	r0, [r7, #8]
 8016d8e:	f7fe fe4a 	bl	8015a26 <xSequenceGreaterThan>
 8016d92:	4603      	mov	r3, r0
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d01c      	beq.n	8016dd2 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016d9e:	461c      	mov	r4, r3
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016da6:	461d      	mov	r5, r3
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	69db      	ldr	r3, [r3, #28]
 8016dac:	68ba      	ldr	r2, [r7, #8]
 8016dae:	1ad0      	subs	r0, r2, r3
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	69db      	ldr	r3, [r3, #28]
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	1ad3      	subs	r3, r2, r3
 8016db8:	68fa      	ldr	r2, [r7, #12]
 8016dba:	6a11      	ldr	r1, [r2, #32]
 8016dbc:	68fa      	ldr	r2, [r7, #12]
 8016dbe:	69d2      	ldr	r2, [r2, #28]
 8016dc0:	1a8a      	subs	r2, r1, r2
 8016dc2:	9201      	str	r2, [sp, #4]
 8016dc4:	9300      	str	r3, [sp, #0]
 8016dc6:	4603      	mov	r3, r0
 8016dc8:	462a      	mov	r2, r5
 8016dca:	4621      	mov	r1, r4
 8016dcc:	4804      	ldr	r0, [pc, #16]	@ (8016de0 <ulTCPWindowTxSack+0x84>)
 8016dce:	f00b fcc1 	bl	8022754 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016dd2:	693b      	ldr	r3, [r7, #16]
        }
 8016dd4:	4618      	mov	r0, r3
 8016dd6:	3718      	adds	r7, #24
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bdb0      	pop	{r4, r5, r7, pc}
 8016ddc:	2000164c 	.word	0x2000164c
 8016de0:	08027850 	.word	0x08027850

08016de4 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016de4:	b580      	push	{r7, lr}
 8016de6:	b084      	sub	sp, #16
 8016de8:	af00      	add	r7, sp, #0
 8016dea:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d014      	beq.n	8016e1c <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016df6:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016df8:	68fb      	ldr	r3, [r7, #12]
 8016dfa:	899b      	ldrh	r3, [r3, #12]
 8016dfc:	b29b      	uxth	r3, r3
 8016dfe:	2b08      	cmp	r3, #8
 8016e00:	d004      	beq.n	8016e0c <vProcessGeneratedUDPPacket+0x28>
 8016e02:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016e06:	4293      	cmp	r3, r2
 8016e08:	d004      	beq.n	8016e14 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8016e0a:	e007      	b.n	8016e1c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8016e0c:	6878      	ldr	r0, [r7, #4]
 8016e0e:	f000 f845 	bl	8016e9c <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8016e12:	e003      	b.n	8016e1c <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8016e14:	6878      	ldr	r0, [r7, #4]
 8016e16:	f000 fae3 	bl	80173e0 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 8016e1a:	bf00      	nop
        }
    }
}
 8016e1c:	bf00      	nop
 8016e1e:	3710      	adds	r7, #16
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}

08016e24 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b086      	sub	sp, #24
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	607a      	str	r2, [r7, #4]
 8016e30:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8016e32:	2300      	movs	r3, #0
 8016e34:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d103      	bne.n	8016e44 <xProcessReceivedUDPPacket+0x20>
 8016e3c:	2178      	movs	r1, #120	@ 0x78
 8016e3e:	4816      	ldr	r0, [pc, #88]	@ (8016e98 <xProcessReceivedUDPPacket+0x74>)
 8016e40:	f7ea fdaa 	bl	8001998 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d103      	bne.n	8016e54 <xProcessReceivedUDPPacket+0x30>
 8016e4c:	2179      	movs	r1, #121	@ 0x79
 8016e4e:	4812      	ldr	r0, [pc, #72]	@ (8016e98 <xProcessReceivedUDPPacket+0x74>)
 8016e50:	f7ea fda2 	bl	8001998 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016e54:	68fb      	ldr	r3, [r7, #12]
 8016e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e58:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8016e5a:	693b      	ldr	r3, [r7, #16]
 8016e5c:	899b      	ldrh	r3, [r3, #12]
 8016e5e:	b29b      	uxth	r3, r3
 8016e60:	2b08      	cmp	r3, #8
 8016e62:	d004      	beq.n	8016e6e <xProcessReceivedUDPPacket+0x4a>
 8016e64:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8016e68:	4293      	cmp	r3, r2
 8016e6a:	d008      	beq.n	8016e7e <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8016e6c:	e00f      	b.n	8016e8e <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8016e6e:	897b      	ldrh	r3, [r7, #10]
 8016e70:	687a      	ldr	r2, [r7, #4]
 8016e72:	4619      	mov	r1, r3
 8016e74:	68f8      	ldr	r0, [r7, #12]
 8016e76:	f000 f92f 	bl	80170d8 <xProcessReceivedUDPPacket_IPv4>
 8016e7a:	6178      	str	r0, [r7, #20]
                break;
 8016e7c:	e007      	b.n	8016e8e <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8016e7e:	897b      	ldrh	r3, [r7, #10]
 8016e80:	687a      	ldr	r2, [r7, #4]
 8016e82:	4619      	mov	r1, r3
 8016e84:	68f8      	ldr	r0, [r7, #12]
 8016e86:	f000 fbdd 	bl	8017644 <xProcessReceivedUDPPacket_IPv6>
 8016e8a:	6178      	str	r0, [r7, #20]
                break;
 8016e8c:	bf00      	nop
    }

    return xReturn;
 8016e8e:	697b      	ldr	r3, [r7, #20]
}
 8016e90:	4618      	mov	r0, r3
 8016e92:	3718      	adds	r7, #24
 8016e94:	46bd      	mov	sp, r7
 8016e96:	bd80      	pop	{r7, pc}
 8016e98:	08027884 	.word	0x08027884

08016e9c <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016e9c:	b580      	push	{r7, lr}
 8016e9e:	b08e      	sub	sp, #56	@ 0x38
 8016ea0:	af00      	add	r7, sp, #0
 8016ea2:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016ea4:	687b      	ldr	r3, [r7, #4]
 8016ea6:	695b      	ldr	r3, [r3, #20]
 8016ea8:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016eae:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016eb6:	687b      	ldr	r3, [r7, #4]
 8016eb8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d104      	bne.n	8016ec8 <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ec2:	3b2a      	subs	r3, #42	@ 0x2a
 8016ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8016ec6:	e003      	b.n	8016ed0 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ecc:	3b2a      	subs	r3, #42	@ 0x2a
 8016ece:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016ed0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016ed2:	f107 0208 	add.w	r2, r7, #8
 8016ed6:	f107 030c 	add.w	r3, r7, #12
 8016eda:	4618      	mov	r0, r3
 8016edc:	f7f0 fc4a 	bl	8007774 <eARPGetCacheEntry>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d102      	bne.n	8016ef4 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016eee:	68ba      	ldr	r2, [r7, #8]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016ef4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ef8:	2b02      	cmp	r3, #2
 8016efa:	f000 80a0 	beq.w	801703e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8016efe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016f02:	2b01      	cmp	r3, #1
 8016f04:	d176      	bne.n	8016ff4 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8016f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f08:	330e      	adds	r3, #14
 8016f0a:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d025      	beq.n	8016f60 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8016f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f16:	3322      	adds	r3, #34	@ 0x22
 8016f18:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016f1e:	6a3b      	ldr	r3, [r7, #32]
 8016f20:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8016f26:	6a3b      	ldr	r3, [r7, #32]
 8016f28:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8016f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f2c:	b29b      	uxth	r3, r3
 8016f2e:	3308      	adds	r3, #8
 8016f30:	b29a      	uxth	r2, r3
 8016f32:	6a3b      	ldr	r3, [r7, #32]
 8016f34:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8016f36:	6a3b      	ldr	r3, [r7, #32]
 8016f38:	889b      	ldrh	r3, [r3, #4]
 8016f3a:	b29b      	uxth	r3, r3
 8016f3c:	021b      	lsls	r3, r3, #8
 8016f3e:	b21a      	sxth	r2, r3
 8016f40:	6a3b      	ldr	r3, [r7, #32]
 8016f42:	889b      	ldrh	r3, [r3, #4]
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	0a1b      	lsrs	r3, r3, #8
 8016f48:	b29b      	uxth	r3, r3
 8016f4a:	b21b      	sxth	r3, r3
 8016f4c:	4313      	orrs	r3, r2
 8016f4e:	b21b      	sxth	r3, r3
 8016f50:	b29a      	uxth	r2, r3
 8016f52:	6a3b      	ldr	r3, [r7, #32]
 8016f54:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8016f56:	6a3b      	ldr	r3, [r7, #32]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	719a      	strb	r2, [r3, #6]
 8016f5c:	2200      	movs	r2, #0
 8016f5e:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8016f60:	4b5b      	ldr	r3, [pc, #364]	@ (80170d0 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8016f62:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f68:	3306      	adds	r3, #6
 8016f6a:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8016f6c:	2218      	movs	r2, #24
 8016f6e:	69f9      	ldr	r1, [r7, #28]
 8016f70:	69b8      	ldr	r0, [r7, #24]
 8016f72:	f00b fe0b 	bl	8022b8c <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d109      	bne.n	8016f92 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8016f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f80:	2201      	movs	r2, #1
 8016f82:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8016f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	331c      	adds	r3, #28
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f8e:	805a      	strh	r2, [r3, #2]
 8016f90:	e005      	b.n	8016f9e <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8016f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f94:	b29b      	uxth	r3, r3
 8016f96:	331c      	adds	r3, #28
 8016f98:	b29a      	uxth	r2, r3
 8016f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f9c:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8016f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fa0:	885b      	ldrh	r3, [r3, #2]
 8016fa2:	b29b      	uxth	r3, r3
 8016fa4:	021b      	lsls	r3, r3, #8
 8016fa6:	b21a      	sxth	r2, r3
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016faa:	885b      	ldrh	r3, [r3, #2]
 8016fac:	b29b      	uxth	r3, r3
 8016fae:	0a1b      	lsrs	r3, r3, #8
 8016fb0:	b29b      	uxth	r3, r3
 8016fb2:	b21b      	sxth	r3, r3
 8016fb4:	4313      	orrs	r3, r2
 8016fb6:	b21b      	sxth	r3, r3
 8016fb8:	b29a      	uxth	r2, r3
 8016fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fbc:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	695a      	ldr	r2, [r3, #20]
 8016fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fc4:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d004      	beq.n	8016fd8 <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016fd2:	681a      	ldr	r2, [r3, #0]
 8016fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fd6:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8016fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fda:	2200      	movs	r2, #0
 8016fdc:	719a      	strb	r2, [r3, #6]
 8016fde:	2200      	movs	r2, #0
 8016fe0:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	695b      	ldr	r3, [r3, #20]
 8016fe6:	4a3b      	ldr	r2, [pc, #236]	@ (80170d4 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d128      	bne.n	801703e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8016fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fee:	2201      	movs	r2, #1
 8016ff0:	721a      	strb	r2, [r3, #8]
 8016ff2:	e024      	b.n	801703e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d11d      	bne.n	8017038 <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	2200      	movs	r2, #0
 8017000:	4619      	mov	r1, r3
 8017002:	2000      	movs	r0, #0
 8017004:	f7f0 faa2 	bl	800754c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	695b      	ldr	r3, [r3, #20]
 801700c:	210b      	movs	r1, #11
 801700e:	4618      	mov	r0, r3
 8017010:	f7f6 fe3a 	bl	800dc88 <FreeRTOS_FindEndPointOnNetMask>
 8017014:	4602      	mov	r2, r0
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801701a:	687b      	ldr	r3, [r7, #4]
 801701c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801701e:	2b00      	cmp	r3, #0
 8017020:	d103      	bne.n	801702a <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8017022:	2302      	movs	r3, #2
 8017024:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017028:	e009      	b.n	801703e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 801702a:	68fa      	ldr	r2, [r7, #12]
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8017030:	6878      	ldr	r0, [r7, #4]
 8017032:	f7f0 fe07 	bl	8007c44 <vARPGenerateRequestPacket>
 8017036:	e002      	b.n	801703e <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8017038:	2302      	movs	r3, #2
 801703a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 801703e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8017042:	2b02      	cmp	r3, #2
 8017044:	d03d      	beq.n	80170c2 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801704a:	2b00      	cmp	r3, #0
 801704c:	d035      	beq.n	80170ba <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017052:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8017056:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801705c:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 801705e:	693b      	ldr	r3, [r7, #16]
 8017060:	1d98      	adds	r0, r3, #6
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017066:	33e8      	adds	r3, #232	@ 0xe8
 8017068:	2206      	movs	r2, #6
 801706a:	4619      	mov	r1, r3
 801706c:	f00b fd8e 	bl	8022b8c <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017074:	2b3b      	cmp	r3, #59	@ 0x3b
 8017076:	d812      	bhi.n	801709e <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801707c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801707e:	e008      	b.n	8017092 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017086:	4413      	add	r3, r2
 8017088:	2200      	movs	r2, #0
 801708a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801708c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801708e:	3301      	adds	r3, #1
 8017090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017094:	2b3b      	cmp	r3, #59	@ 0x3b
 8017096:	ddf3      	ble.n	8017080 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	223c      	movs	r2, #60	@ 0x3c
 801709c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 801709e:	697b      	ldr	r3, [r7, #20]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d011      	beq.n	80170c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
 80170a4:	697b      	ldr	r3, [r7, #20]
 80170a6:	68db      	ldr	r3, [r3, #12]
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d00d      	beq.n	80170c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 80170ac:	697b      	ldr	r3, [r7, #20]
 80170ae:	68db      	ldr	r3, [r3, #12]
 80170b0:	2201      	movs	r2, #1
 80170b2:	6879      	ldr	r1, [r7, #4]
 80170b4:	6978      	ldr	r0, [r7, #20]
 80170b6:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 80170b8:	e006      	b.n	80170c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80170ba:	6878      	ldr	r0, [r7, #4]
 80170bc:	f000 fca2 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
}
 80170c0:	e002      	b.n	80170c8 <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f000 fc9e 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
}
 80170c8:	bf00      	nop
 80170ca:	3738      	adds	r7, #56	@ 0x38
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}
 80170d0:	08027fb0 	.word	0x08027fb0
 80170d4:	fc0000e0 	.word	0xfc0000e0

080170d8 <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 80170d8:	b590      	push	{r4, r7, lr}
 80170da:	b099      	sub	sp, #100	@ 0x64
 80170dc:	af02      	add	r7, sp, #8
 80170de:	60f8      	str	r0, [r7, #12]
 80170e0:	460b      	mov	r3, r1
 80170e2:	607a      	str	r2, [r7, #4]
 80170e4:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 80170e6:	2301      	movs	r3, #1
 80170e8:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d104      	bne.n	80170fa <xProcessReceivedUDPPacket_IPv4+0x22>
 80170f0:	f240 116f 	movw	r1, #367	@ 0x16f
 80170f4:	4872      	ldr	r0, [pc, #456]	@ (80172c0 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 80170f6:	f7ea fc4f 	bl	8001998 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d104      	bne.n	801710c <xProcessReceivedUDPPacket_IPv4+0x34>
 8017102:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8017106:	486e      	ldr	r0, [pc, #440]	@ (80172c0 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8017108:	f7ea fc46 	bl	8001998 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017110:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017116:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8017118:	897b      	ldrh	r3, [r7, #10]
 801711a:	4618      	mov	r0, r3
 801711c:	f7f8 fb42 	bl	800f7a4 <pxUDPSocketLookup>
 8017120:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	2200      	movs	r2, #0
 8017126:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8017128:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801712a:	2b00      	cmp	r3, #0
 801712c:	f000 8085 	beq.w	801723a <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8017130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017132:	2b00      	cmp	r3, #0
 8017134:	d018      	beq.n	8017168 <xProcessReceivedUDPPacket_IPv4+0x90>
 8017136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d014      	beq.n	8017168 <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 801713e:	68f8      	ldr	r0, [r7, #12]
 8017140:	f7f0 f8ee 	bl	8007320 <xCheckRequiresARPResolution>
 8017144:	4603      	mov	r3, r0
 8017146:	2b01      	cmp	r3, #1
 8017148:	d105      	bne.n	8017156 <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2201      	movs	r2, #1
 801714e:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8017150:	2300      	movs	r3, #0
 8017152:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8017154:	e0ae      	b.n	80172b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8017156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017158:	1d9a      	adds	r2, r3, #6
 801715a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801715c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8017160:	4619      	mov	r1, r3
 8017162:	4610      	mov	r0, r2
 8017164:	f7f0 f9bc 	bl	80074e0 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8017168:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801716a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801716c:	2b00      	cmp	r3, #0
 801716e:	d02f      	beq.n	80171d0 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017174:	332a      	adds	r3, #42	@ 0x2a
 8017176:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8017178:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801717a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801717c:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017182:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	695b      	ldr	r3, [r3, #20]
 8017188:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801718a:	2302      	movs	r3, #2
 801718c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8017190:	2318      	movs	r3, #24
 8017192:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8017196:	897b      	ldrh	r3, [r7, #10]
 8017198:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 801719a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801719c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80171a0:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 80171a2:	2302      	movs	r3, #2
 80171a4:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80171a6:	2318      	movs	r3, #24
 80171a8:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171ae:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 80171b2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80171b6:	f107 0310 	add.w	r3, r7, #16
 80171ba:	9300      	str	r3, [sp, #0]
 80171bc:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 80171be:	460b      	mov	r3, r1
 80171c0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80171c2:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 80171c4:	47a0      	blx	r4
 80171c6:	4603      	mov	r3, r0
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d001      	beq.n	80171d0 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 80171cc:	2300      	movs	r3, #0
 80171ce:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 80171d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80171d2:	2b01      	cmp	r3, #1
 80171d4:	d16e      	bne.n	80172b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 80171d6:	f7ed fc3b 	bl	8004a50 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 80171da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171dc:	3354      	adds	r3, #84	@ 0x54
 80171de:	68fa      	ldr	r2, [r7, #12]
 80171e0:	4611      	mov	r1, r2
 80171e2:	4618      	mov	r0, r3
 80171e4:	f7ec faef 	bl	80037c6 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 80171e8:	f7ed fc40 	bl	8004a6c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 80171ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171ee:	685b      	ldr	r3, [r3, #4]
 80171f0:	2b00      	cmp	r3, #0
 80171f2:	d005      	beq.n	8017200 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 80171f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80171f6:	685b      	ldr	r3, [r3, #4]
 80171f8:	2101      	movs	r1, #1
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7ec f9de 	bl	80035bc <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8017200:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017204:	2b00      	cmp	r3, #0
 8017206:	d00c      	beq.n	8017222 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8017208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801720a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801720c:	f003 0301 	and.w	r3, r3, #1
 8017210:	2b00      	cmp	r3, #0
 8017212:	d006      	beq.n	8017222 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8017214:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	2101      	movs	r1, #1
 801721c:	4618      	mov	r0, r3
 801721e:	f7ec f9cd 	bl	80035bc <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8017222:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017224:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017226:	2b00      	cmp	r3, #0
 8017228:	d044      	beq.n	80172b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801722a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801722c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801722e:	2300      	movs	r3, #0
 8017230:	2200      	movs	r2, #0
 8017232:	2100      	movs	r1, #0
 8017234:	f7ec fc9e 	bl	8003b74 <xQueueGenericSend>
 8017238:	e03c      	b.n	80172b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801723a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801723c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801723e:	b29b      	uxth	r3, r3
 8017240:	021b      	lsls	r3, r3, #8
 8017242:	b21a      	sxth	r2, r3
 8017244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017246:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017248:	b29b      	uxth	r3, r3
 801724a:	0a1b      	lsrs	r3, r3, #8
 801724c:	b29b      	uxth	r3, r3
 801724e:	b21b      	sxth	r3, r3
 8017250:	4313      	orrs	r3, r2
 8017252:	b21b      	sxth	r3, r3
 8017254:	2b35      	cmp	r3, #53	@ 0x35
 8017256:	d10f      	bne.n	8017278 <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8017258:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801725a:	1d98      	adds	r0, r3, #6
 801725c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801725e:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017266:	461a      	mov	r2, r3
 8017268:	f7f0 f970 	bl	800754c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 801726c:	68f8      	ldr	r0, [r7, #12]
 801726e:	f7f0 fe02 	bl	8007e76 <ulDNSHandlePacket>
 8017272:	4603      	mov	r3, r0
 8017274:	657b      	str	r3, [r7, #84]	@ 0x54
 8017276:	e01d      	b.n	80172b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8017278:	897b      	ldrh	r3, [r7, #10]
 801727a:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801727e:	4293      	cmp	r3, r2
 8017280:	d006      	beq.n	8017290 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8017282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017284:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8017286:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8017288:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 801728c:	4293      	cmp	r3, r2
 801728e:	d10f      	bne.n	80172b0 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8017290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017292:	1d98      	adds	r0, r3, #6
 8017294:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017296:	f8d3 101a 	ldr.w	r1, [r3, #26]
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801729e:	461a      	mov	r2, r3
 80172a0:	f7f0 f954 	bl	800754c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80172a4:	68f8      	ldr	r0, [r7, #12]
 80172a6:	f7f0 fde6 	bl	8007e76 <ulDNSHandlePacket>
 80172aa:	4603      	mov	r3, r0
 80172ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80172ae:	e001      	b.n	80172b4 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80172b0:	2300      	movs	r3, #0
 80172b2:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80172b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	375c      	adds	r7, #92	@ 0x5c
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd90      	pop	{r4, r7, pc}
 80172be:	bf00      	nop
 80172c0:	080278b4 	.word	0x080278b4

080172c4 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b086      	sub	sp, #24
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	6078      	str	r0, [r7, #4]
 80172cc:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80172ce:	2000      	movs	r0, #0
 80172d0:	f7f6 fc02 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 80172d4:	6178      	str	r0, [r7, #20]
 80172d6:	e021      	b.n	801731c <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	2b60      	cmp	r3, #96	@ 0x60
 80172dc:	d119      	bne.n	8017312 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 80172de:	697b      	ldr	r3, [r7, #20]
 80172e0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80172e4:	f003 0304 	and.w	r3, r3, #4
 80172e8:	b2db      	uxtb	r3, r3
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d011      	beq.n	8017312 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	3338      	adds	r3, #56	@ 0x38
 80172f2:	4618      	mov	r0, r3
 80172f4:	f7f6 ffd4 	bl	800e2a0 <xIPv6_GetIPType>
 80172f8:	4603      	mov	r3, r0
 80172fa:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80172fc:	7cfb      	ldrb	r3, [r7, #19]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d101      	bne.n	8017306 <pxGetEndpoint+0x42>
 8017302:	2301      	movs	r3, #1
 8017304:	e000      	b.n	8017308 <pxGetEndpoint+0x44>
 8017306:	2300      	movs	r3, #0
 8017308:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 801730a:	68fa      	ldr	r2, [r7, #12]
 801730c:	683b      	ldr	r3, [r7, #0]
 801730e:	429a      	cmp	r2, r3
 8017310:	d008      	beq.n	8017324 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8017312:	6979      	ldr	r1, [r7, #20]
 8017314:	2000      	movs	r0, #0
 8017316:	f7f6 fc01 	bl	800db1c <FreeRTOS_NextEndPoint>
 801731a:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	2b00      	cmp	r3, #0
 8017320:	d1da      	bne.n	80172d8 <pxGetEndpoint+0x14>
 8017322:	e000      	b.n	8017326 <pxGetEndpoint+0x62>
                {
                    break;
 8017324:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8017326:	697b      	ldr	r3, [r7, #20]
}
 8017328:	4618      	mov	r0, r3
 801732a:	3718      	adds	r7, #24
 801732c:	46bd      	mov	sp, r7
 801732e:	bd80      	pop	{r7, pc}

08017330 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b084      	sub	sp, #16
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
 8017338:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 801733a:	2300      	movs	r3, #0
 801733c:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	f103 0114 	add.w	r1, r3, #20
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017348:	2b00      	cmp	r3, #0
 801734a:	d001      	beq.n	8017350 <prvStartLookup+0x20>
 801734c:	4b1e      	ldr	r3, [pc, #120]	@ (80173c8 <prvStartLookup+0x98>)
 801734e:	e000      	b.n	8017352 <prvStartLookup+0x22>
 8017350:	4b1e      	ldr	r3, [pc, #120]	@ (80173cc <prvStartLookup+0x9c>)
 8017352:	461a      	mov	r2, r3
 8017354:	481e      	ldr	r0, [pc, #120]	@ (80173d0 <prvStartLookup+0xa0>)
 8017356:	f00b f9fd 	bl	8022754 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801735e:	2b00      	cmp	r3, #0
 8017360:	d11f      	bne.n	80173a2 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	3314      	adds	r3, #20
 8017366:	4618      	mov	r0, r3
 8017368:	f7f6 ff9a 	bl	800e2a0 <xIPv6_GetIPType>
 801736c:	4603      	mov	r3, r0
 801736e:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8017370:	7bbb      	ldrb	r3, [r7, #14]
 8017372:	2b00      	cmp	r3, #0
 8017374:	d101      	bne.n	801737a <prvStartLookup+0x4a>
 8017376:	2301      	movs	r3, #1
 8017378:	e000      	b.n	801737c <prvStartLookup+0x4c>
 801737a:	2300      	movs	r3, #0
 801737c:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 801737e:	68b9      	ldr	r1, [r7, #8]
 8017380:	2060      	movs	r0, #96	@ 0x60
 8017382:	f7ff ff9f 	bl	80172c4 <pxGetEndpoint>
 8017386:	4602      	mov	r2, r0
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017390:	2b00      	cmp	r3, #0
 8017392:	d001      	beq.n	8017398 <prvStartLookup+0x68>
 8017394:	4b0f      	ldr	r3, [pc, #60]	@ (80173d4 <prvStartLookup+0xa4>)
 8017396:	e000      	b.n	801739a <prvStartLookup+0x6a>
 8017398:	4b0f      	ldr	r3, [pc, #60]	@ (80173d8 <prvStartLookup+0xa8>)
 801739a:	4619      	mov	r1, r3
 801739c:	480f      	ldr	r0, [pc, #60]	@ (80173dc <prvStartLookup+0xac>)
 801739e:	f00b f9d9 	bl	8022754 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80173a6:	2b00      	cmp	r3, #0
 80173a8:	d008      	beq.n	80173bc <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	3314      	adds	r3, #20
 80173ae:	4619      	mov	r1, r3
 80173b0:	6878      	ldr	r0, [r7, #4]
 80173b2:	f7f5 f8b7 	bl	800c524 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 80173b6:	683b      	ldr	r3, [r7, #0]
 80173b8:	2201      	movs	r2, #1
 80173ba:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 80173bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80173be:	4618      	mov	r0, r3
 80173c0:	3710      	adds	r7, #16
 80173c2:	46bd      	mov	sp, r7
 80173c4:	bd80      	pop	{r7, pc}
 80173c6:	bf00      	nop
 80173c8:	080278e8 	.word	0x080278e8
 80173cc:	080278ec 	.word	0x080278ec
 80173d0:	080278f0 	.word	0x080278f0
 80173d4:	08027914 	.word	0x08027914
 80173d8:	08027918 	.word	0x08027918
 80173dc:	0802791c 	.word	0x0802791c

080173e0 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80173e0:	b590      	push	{r4, r7, lr}
 80173e2:	b093      	sub	sp, #76	@ 0x4c
 80173e4:	af00      	add	r7, sp, #0
 80173e6:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 80173e8:	2300      	movs	r3, #0
 80173ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 80173ec:	2300      	movs	r3, #0
 80173ee:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 80173f0:	2300      	movs	r3, #0
 80173f2:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 80173f4:	2300      	movs	r3, #0
 80173f6:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80173fc:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 80173fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017400:	330e      	adds	r3, #14
 8017402:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	3314      	adds	r3, #20
 8017408:	f107 040c 	add.w	r4, r7, #12
 801740c:	6818      	ldr	r0, [r3, #0]
 801740e:	6859      	ldr	r1, [r3, #4]
 8017410:	689a      	ldr	r2, [r3, #8]
 8017412:	68db      	ldr	r3, [r3, #12]
 8017414:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801741a:	2b00      	cmp	r3, #0
 801741c:	d107      	bne.n	801742e <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 801741e:	233e      	movs	r3, #62	@ 0x3e
 8017420:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017428:	1ad3      	subs	r3, r2, r3
 801742a:	643b      	str	r3, [r7, #64]	@ 0x40
 801742c:	e003      	b.n	8017436 <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017432:	3b3e      	subs	r3, #62	@ 0x3e
 8017434:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	3314      	adds	r3, #20
 801743a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801743c:	f107 021c 	add.w	r2, r7, #28
 8017440:	4618      	mov	r0, r3
 8017442:	f7f4 fe03 	bl	800c04c <eNDGetCacheEntry>
 8017446:	4603      	mov	r3, r0
 8017448:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 801744c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8017450:	2b02      	cmp	r3, #2
 8017452:	f000 80b1 	beq.w	80175b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 8017456:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801745a:	2b01      	cmp	r3, #1
 801745c:	f040 8095 	bne.w	801758a <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8017460:	69fa      	ldr	r2, [r7, #28]
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801746a:	2b00      	cmp	r3, #0
 801746c:	d109      	bne.n	8017482 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 801746e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017470:	2260      	movs	r2, #96	@ 0x60
 8017472:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8017474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017476:	223a      	movs	r2, #58	@ 0x3a
 8017478:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 801747a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801747c:	2280      	movs	r2, #128	@ 0x80
 801747e:	71da      	strb	r2, [r3, #7]
 8017480:	e05e      	b.n	8017540 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8017482:	2300      	movs	r3, #0
 8017484:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 8017486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017488:	3336      	adds	r3, #54	@ 0x36
 801748a:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 801748c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801748e:	2260      	movs	r2, #96	@ 0x60
 8017490:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8017492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017494:	2200      	movs	r2, #0
 8017496:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8017498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801749a:	2200      	movs	r2, #0
 801749c:	709a      	strb	r2, [r3, #2]
 801749e:	2200      	movs	r2, #0
 80174a0:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 80174a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174a4:	22ff      	movs	r2, #255	@ 0xff
 80174a6:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174ac:	b29b      	uxth	r3, r3
 80174ae:	3b36      	subs	r3, #54	@ 0x36
 80174b0:	b29a      	uxth	r2, r3
 80174b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b4:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 80174b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174b8:	2211      	movs	r2, #17
 80174ba:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174c0:	b29b      	uxth	r3, r3
 80174c2:	3b36      	subs	r3, #54	@ 0x36
 80174c4:	b29a      	uxth	r2, r3
 80174c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174c8:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 80174ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174cc:	889b      	ldrh	r3, [r3, #4]
 80174ce:	b29b      	uxth	r3, r3
 80174d0:	021b      	lsls	r3, r3, #8
 80174d2:	b21a      	sxth	r2, r3
 80174d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174d6:	889b      	ldrh	r3, [r3, #4]
 80174d8:	b29b      	uxth	r3, r3
 80174da:	0a1b      	lsrs	r3, r3, #8
 80174dc:	b29b      	uxth	r3, r3
 80174de:	b21b      	sxth	r3, r3
 80174e0:	4313      	orrs	r3, r2
 80174e2:	b21b      	sxth	r3, r3
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174e8:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80174ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174f0:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80174f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174f8:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80174fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174fc:	889b      	ldrh	r3, [r3, #4]
 80174fe:	b29b      	uxth	r3, r3
 8017500:	021b      	lsls	r3, r3, #8
 8017502:	b21a      	sxth	r2, r3
 8017504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017506:	889b      	ldrh	r3, [r3, #4]
 8017508:	b29b      	uxth	r3, r3
 801750a:	0a1b      	lsrs	r3, r3, #8
 801750c:	b29b      	uxth	r3, r3
 801750e:	b21b      	sxth	r3, r3
 8017510:	4313      	orrs	r3, r2
 8017512:	b21b      	sxth	r3, r3
 8017514:	b29a      	uxth	r2, r3
 8017516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017518:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801751c:	2200      	movs	r2, #0
 801751e:	719a      	strb	r2, [r3, #6]
 8017520:	2200      	movs	r2, #0
 8017522:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017528:	2b00      	cmp	r3, #0
 801752a:	d009      	beq.n	8017540 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 801752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801752e:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017536:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8017538:	2210      	movs	r2, #16
 801753a:	4619      	mov	r1, r3
 801753c:	f00b fb26 	bl	8022b8c <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017544:	2b00      	cmp	r3, #0
 8017546:	d10e      	bne.n	8017566 <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8017548:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801754a:	b29b      	uxth	r3, r3
 801754c:	3308      	adds	r3, #8
 801754e:	b29b      	uxth	r3, r3
 8017550:	021b      	lsls	r3, r3, #8
 8017552:	b29a      	uxth	r2, r3
 8017554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017556:	3308      	adds	r3, #8
 8017558:	0a1b      	lsrs	r3, r3, #8
 801755a:	b29b      	uxth	r3, r3
 801755c:	4313      	orrs	r3, r2
 801755e:	b29a      	uxth	r2, r3
 8017560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017562:	809a      	strh	r2, [r3, #4]
 8017564:	e028      	b.n	80175b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8017566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017568:	2211      	movs	r2, #17
 801756a:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 801756c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801756e:	b29b      	uxth	r3, r3
 8017570:	3308      	adds	r3, #8
 8017572:	b29b      	uxth	r3, r3
 8017574:	021b      	lsls	r3, r3, #8
 8017576:	b29a      	uxth	r2, r3
 8017578:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801757a:	3308      	adds	r3, #8
 801757c:	0a1b      	lsrs	r3, r3, #8
 801757e:	b29b      	uxth	r3, r3
 8017580:	4313      	orrs	r3, r2
 8017582:	b29a      	uxth	r2, r3
 8017584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017586:	809a      	strh	r2, [r3, #4]
 8017588:	e016      	b.n	80175b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 801758a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801758e:	2b00      	cmp	r3, #0
 8017590:	d10f      	bne.n	80175b2 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8017592:	69fb      	ldr	r3, [r7, #28]
 8017594:	2b00      	cmp	r3, #0
 8017596:	d002      	beq.n	801759e <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8017598:	69fa      	ldr	r2, [r7, #28]
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 801759e:	f107 0320 	add.w	r3, r7, #32
 80175a2:	4619      	mov	r1, r3
 80175a4:	6878      	ldr	r0, [r7, #4]
 80175a6:	f7ff fec3 	bl	8017330 <prvStartLookup>
 80175aa:	4603      	mov	r3, r0
 80175ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80175b0:	e002      	b.n	80175b8 <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80175b2:	2302      	movs	r3, #2
 80175b4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 80175b8:	6a3b      	ldr	r3, [r7, #32]
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d03d      	beq.n	801763a <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 80175be:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80175c2:	2b02      	cmp	r3, #2
 80175c4:	d036      	beq.n	8017634 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d02e      	beq.n	801762c <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80175d6:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80175dc:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80175de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80175e0:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175e6:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80175e8:	2206      	movs	r2, #6
 80175ea:	4619      	mov	r1, r3
 80175ec:	f00b face 	bl	8022b8c <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175f4:	2b3b      	cmp	r3, #59	@ 0x3b
 80175f6:	d812      	bhi.n	801761e <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80175fe:	e008      	b.n	8017612 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017604:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017606:	4413      	add	r3, r2
 8017608:	2200      	movs	r2, #0
 801760a:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801760c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801760e:	3301      	adds	r3, #1
 8017610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017614:	2b3b      	cmp	r3, #59	@ 0x3b
 8017616:	ddf3      	ble.n	8017600 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	223c      	movs	r2, #60	@ 0x3c
 801761c:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 801761e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017620:	68db      	ldr	r3, [r3, #12]
 8017622:	2201      	movs	r2, #1
 8017624:	6879      	ldr	r1, [r7, #4]
 8017626:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017628:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801762a:	e006      	b.n	801763a <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f000 f9e9 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
}
 8017632:	e002      	b.n	801763a <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8017634:	6878      	ldr	r0, [r7, #4]
 8017636:	f000 f9e5 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
}
 801763a:	bf00      	nop
 801763c:	374c      	adds	r7, #76	@ 0x4c
 801763e:	46bd      	mov	sp, r7
 8017640:	bd90      	pop	{r4, r7, pc}
	...

08017644 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8017644:	b590      	push	{r4, r7, lr}
 8017646:	b09b      	sub	sp, #108	@ 0x6c
 8017648:	af02      	add	r7, sp, #8
 801764a:	60f8      	str	r0, [r7, #12]
 801764c:	460b      	mov	r3, r1
 801764e:	607a      	str	r2, [r7, #4]
 8017650:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8017652:	2301      	movs	r3, #1
 8017654:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	2b00      	cmp	r3, #0
 801765a:	d104      	bne.n	8017666 <xProcessReceivedUDPPacket_IPv6+0x22>
 801765c:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8017660:	4874      	ldr	r0, [pc, #464]	@ (8017834 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017662:	f7ea f999 	bl	8001998 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8017666:	68fb      	ldr	r3, [r7, #12]
 8017668:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801766a:	2b00      	cmp	r3, #0
 801766c:	d104      	bne.n	8017678 <xProcessReceivedUDPPacket_IPv6+0x34>
 801766e:	f240 1187 	movw	r1, #391	@ 0x187
 8017672:	4870      	ldr	r0, [pc, #448]	@ (8017834 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8017674:	f7ea f990 	bl	8001998 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801767c:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 801767e:	897b      	ldrh	r3, [r7, #10]
 8017680:	4618      	mov	r0, r3
 8017682:	f7f8 f88f 	bl	800f7a4 <pxUDPSocketLookup>
 8017686:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	2200      	movs	r2, #0
 801768c:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 801768e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017690:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8017692:	b29b      	uxth	r3, r3
 8017694:	2b00      	cmp	r3, #0
 8017696:	d109      	bne.n	80176ac <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 8017698:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801769a:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 801769c:	b29b      	uxth	r3, r3
 801769e:	4619      	mov	r1, r3
 80176a0:	4865      	ldr	r0, [pc, #404]	@ (8017838 <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 80176a2:	f00b f857 	bl	8022754 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 80176a6:	2300      	movs	r3, #0
 80176a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 80176aa:	e0bd      	b.n	8017828 <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 80176ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	f000 8091 	beq.w	80177d6 <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80176b4:	68f8      	ldr	r0, [r7, #12]
 80176b6:	f7ef fe33 	bl	8007320 <xCheckRequiresARPResolution>
 80176ba:	4603      	mov	r3, r0
 80176bc:	2b01      	cmp	r3, #1
 80176be:	d105      	bne.n	80176cc <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 80176c0:	687b      	ldr	r3, [r7, #4]
 80176c2:	2201      	movs	r2, #1
 80176c4:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 80176c6:	2300      	movs	r3, #0
 80176c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 80176ca:	e0ad      	b.n	8017828 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80176cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176ce:	1d98      	adds	r0, r3, #6
 80176d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80176d2:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 80176da:	461a      	mov	r2, r3
 80176dc:	f7f4 fd64 	bl	800c1a8 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80176e0:	68f8      	ldr	r0, [r7, #12]
 80176e2:	f7f2 fe61 	bl	800a3a8 <uxIPHeaderSizePacket>
 80176e6:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80176e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d03d      	beq.n	801776c <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80176f6:	3316      	adds	r3, #22
 80176f8:	4413      	add	r3, r2
 80176fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80176fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80176fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8017700:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8017702:	68fb      	ldr	r3, [r7, #12]
 8017704:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8017706:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 8017708:	897b      	ldrh	r3, [r7, #10]
 801770a:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801770c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801770e:	3316      	adds	r3, #22
 8017710:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8017714:	6818      	ldr	r0, [r3, #0]
 8017716:	6859      	ldr	r1, [r3, #4]
 8017718:	689a      	ldr	r2, [r3, #8]
 801771a:	68db      	ldr	r3, [r3, #12]
 801771c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801771e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8017720:	3326      	adds	r3, #38	@ 0x26
 8017722:	f107 041c 	add.w	r4, r7, #28
 8017726:	6818      	ldr	r0, [r3, #0]
 8017728:	6859      	ldr	r1, [r3, #4]
 801772a:	689a      	ldr	r2, [r3, #8]
 801772c:	68db      	ldr	r3, [r3, #12]
 801772e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017730:	230a      	movs	r3, #10
 8017732:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8017736:	230a      	movs	r3, #10
 8017738:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 801773a:	2318      	movs	r3, #24
 801773c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8017740:	2318      	movs	r3, #24
 8017742:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8017744:	68fb      	ldr	r3, [r7, #12]
 8017746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017748:	3b3e      	subs	r3, #62	@ 0x3e
 801774a:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 801774c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8017750:	f107 0314 	add.w	r3, r7, #20
 8017754:	9300      	str	r3, [sp, #0]
 8017756:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8017758:	4613      	mov	r3, r2
 801775a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801775c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 801775e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8017760:	47a0      	blx	r4
 8017762:	4603      	mov	r3, r0
 8017764:	2b00      	cmp	r3, #0
 8017766:	d001      	beq.n	801776c <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8017768:	2300      	movs	r3, #0
 801776a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 801776c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801776e:	2b01      	cmp	r3, #1
 8017770:	d15a      	bne.n	8017828 <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8017772:	f7ed f96d 	bl	8004a50 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8017776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017778:	3354      	adds	r3, #84	@ 0x54
 801777a:	68fa      	ldr	r2, [r7, #12]
 801777c:	4611      	mov	r1, r2
 801777e:	4618      	mov	r0, r3
 8017780:	f7ec f821 	bl	80037c6 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8017784:	f7ed f972 	bl	8004a6c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8017788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	2b00      	cmp	r3, #0
 801778e:	d005      	beq.n	801779c <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8017790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	2101      	movs	r1, #1
 8017796:	4618      	mov	r0, r3
 8017798:	f7eb ff10 	bl	80035bc <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 801779c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801779e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d00c      	beq.n	80177be <xProcessReceivedUDPPacket_IPv6+0x17a>
 80177a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80177a8:	f003 0301 	and.w	r3, r3, #1
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d006      	beq.n	80177be <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80177b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	2101      	movs	r1, #1
 80177b8:	4618      	mov	r0, r3
 80177ba:	f7eb feff 	bl	80035bc <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80177be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d030      	beq.n	8017828 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80177c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80177c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80177ca:	2300      	movs	r3, #0
 80177cc:	2200      	movs	r2, #0
 80177ce:	2100      	movs	r1, #0
 80177d0:	f7ec f9d0 	bl	8003b74 <xQueueGenericSend>
 80177d4:	e028      	b.n	8017828 <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80177d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80177d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80177da:	b29b      	uxth	r3, r3
 80177dc:	021b      	lsls	r3, r3, #8
 80177de:	b21a      	sxth	r2, r3
 80177e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80177e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80177e4:	b29b      	uxth	r3, r3
 80177e6:	0a1b      	lsrs	r3, r3, #8
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	b21b      	sxth	r3, r3
 80177ec:	4313      	orrs	r3, r2
 80177ee:	b21b      	sxth	r3, r3
 80177f0:	2b35      	cmp	r3, #53	@ 0x35
 80177f2:	d105      	bne.n	8017800 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80177f4:	68f8      	ldr	r0, [r7, #12]
 80177f6:	f7f0 fb3e 	bl	8007e76 <ulDNSHandlePacket>
 80177fa:	4603      	mov	r3, r0
 80177fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80177fe:	e013      	b.n	8017828 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017800:	897b      	ldrh	r3, [r7, #10]
 8017802:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017806:	4293      	cmp	r3, r2
 8017808:	d006      	beq.n	8017818 <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 801780a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801780c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801780e:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8017810:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8017814:	4293      	cmp	r3, r2
 8017816:	d105      	bne.n	8017824 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8017818:	68f8      	ldr	r0, [r7, #12]
 801781a:	f7f0 fb2c 	bl	8007e76 <ulDNSHandlePacket>
 801781e:	4603      	mov	r3, r0
 8017820:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017822:	e001      	b.n	8017828 <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8017824:	2300      	movs	r3, #0
 8017826:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8017828:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 801782a:	4618      	mov	r0, r3
 801782c:	3764      	adds	r7, #100	@ 0x64
 801782e:	46bd      	mov	sp, r7
 8017830:	bd90      	pop	{r4, r7, pc}
 8017832:	bf00      	nop
 8017834:	08027944 	.word	0x08027944
 8017838:	08027978 	.word	0x08027978

0801783c <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 801783c:	b480      	push	{r7}
 801783e:	b083      	sub	sp, #12
 8017840:	af00      	add	r7, sp, #0
 8017842:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8017844:	2301      	movs	r3, #1
    }
 8017846:	4618      	mov	r0, r3
 8017848:	370c      	adds	r7, #12
 801784a:	46bd      	mov	sp, r7
 801784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017850:	4770      	bx	lr

08017852 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8017852:	b480      	push	{r7}
 8017854:	af00      	add	r7, sp, #0
    }
 8017856:	bf00      	nop
 8017858:	46bd      	mov	sp, r7
 801785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785e:	4770      	bx	lr

08017860 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8017860:	b580      	push	{r7, lr}
 8017862:	b082      	sub	sp, #8
 8017864:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 8017866:	4b2e      	ldr	r3, [pc, #184]	@ (8017920 <xNetworkBuffersInitialise+0xc0>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	2b00      	cmp	r3, #0
 801786c:	d149      	bne.n	8017902 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 801786e:	2140      	movs	r1, #64	@ 0x40
 8017870:	2040      	movs	r0, #64	@ 0x40
 8017872:	f7ec f955 	bl	8003b20 <xQueueCreateCountingSemaphore>
 8017876:	4603      	mov	r3, r0
 8017878:	4a29      	ldr	r2, [pc, #164]	@ (8017920 <xNetworkBuffersInitialise+0xc0>)
 801787a:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 801787c:	4b28      	ldr	r3, [pc, #160]	@ (8017920 <xNetworkBuffersInitialise+0xc0>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d103      	bne.n	801788c <xNetworkBuffersInitialise+0x2c>
 8017884:	21c3      	movs	r1, #195	@ 0xc3
 8017886:	4827      	ldr	r0, [pc, #156]	@ (8017924 <xNetworkBuffersInitialise+0xc4>)
 8017888:	f7ea f886 	bl	8001998 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 801788c:	4b24      	ldr	r3, [pc, #144]	@ (8017920 <xNetworkBuffersInitialise+0xc0>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d036      	beq.n	8017902 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8017894:	4824      	ldr	r0, [pc, #144]	@ (8017928 <xNetworkBuffersInitialise+0xc8>)
 8017896:	f7eb ff69 	bl	800376c <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 801789a:	4824      	ldr	r0, [pc, #144]	@ (801792c <xNetworkBuffersInitialise+0xcc>)
 801789c:	f001 fa24 	bl	8018ce8 <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80178a0:	2300      	movs	r3, #0
 80178a2:	603b      	str	r3, [r7, #0]
 80178a4:	e027      	b.n	80178f6 <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 80178a6:	683a      	ldr	r2, [r7, #0]
 80178a8:	4613      	mov	r3, r2
 80178aa:	00db      	lsls	r3, r3, #3
 80178ac:	1a9b      	subs	r3, r3, r2
 80178ae:	00db      	lsls	r3, r3, #3
 80178b0:	4a1e      	ldr	r2, [pc, #120]	@ (801792c <xNetworkBuffersInitialise+0xcc>)
 80178b2:	4413      	add	r3, r2
 80178b4:	4618      	mov	r0, r3
 80178b6:	f7eb ff79 	bl	80037ac <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 80178ba:	683a      	ldr	r2, [r7, #0]
 80178bc:	4613      	mov	r3, r2
 80178be:	00db      	lsls	r3, r3, #3
 80178c0:	1a9b      	subs	r3, r3, r2
 80178c2:	00db      	lsls	r3, r3, #3
 80178c4:	4a19      	ldr	r2, [pc, #100]	@ (801792c <xNetworkBuffersInitialise+0xcc>)
 80178c6:	1899      	adds	r1, r3, r2
 80178c8:	4818      	ldr	r0, [pc, #96]	@ (801792c <xNetworkBuffersInitialise+0xcc>)
 80178ca:	683a      	ldr	r2, [r7, #0]
 80178cc:	4613      	mov	r3, r2
 80178ce:	00db      	lsls	r3, r3, #3
 80178d0:	1a9b      	subs	r3, r3, r2
 80178d2:	00db      	lsls	r3, r3, #3
 80178d4:	4403      	add	r3, r0
 80178d6:	330c      	adds	r3, #12
 80178d8:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 80178da:	683a      	ldr	r2, [r7, #0]
 80178dc:	4613      	mov	r3, r2
 80178de:	00db      	lsls	r3, r3, #3
 80178e0:	1a9b      	subs	r3, r3, r2
 80178e2:	00db      	lsls	r3, r3, #3
 80178e4:	4a11      	ldr	r2, [pc, #68]	@ (801792c <xNetworkBuffersInitialise+0xcc>)
 80178e6:	4413      	add	r3, r2
 80178e8:	4619      	mov	r1, r3
 80178ea:	480f      	ldr	r0, [pc, #60]	@ (8017928 <xNetworkBuffersInitialise+0xc8>)
 80178ec:	f7eb ff8f 	bl	800380e <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80178f0:	683b      	ldr	r3, [r7, #0]
 80178f2:	3301      	adds	r3, #1
 80178f4:	603b      	str	r3, [r7, #0]
 80178f6:	683b      	ldr	r3, [r7, #0]
 80178f8:	2b3f      	cmp	r3, #63	@ 0x3f
 80178fa:	d9d4      	bls.n	80178a6 <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80178fc:	4b0c      	ldr	r3, [pc, #48]	@ (8017930 <xNetworkBuffersInitialise+0xd0>)
 80178fe:	2240      	movs	r2, #64	@ 0x40
 8017900:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 8017902:	4b07      	ldr	r3, [pc, #28]	@ (8017920 <xNetworkBuffersInitialise+0xc0>)
 8017904:	681b      	ldr	r3, [r3, #0]
 8017906:	2b00      	cmp	r3, #0
 8017908:	d102      	bne.n	8017910 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 801790a:	2300      	movs	r3, #0
 801790c:	607b      	str	r3, [r7, #4]
 801790e:	e001      	b.n	8017914 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 8017910:	2301      	movs	r3, #1
 8017912:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 8017914:	687b      	ldr	r3, [r7, #4]
}
 8017916:	4618      	mov	r0, r3
 8017918:	3708      	adds	r7, #8
 801791a:	46bd      	mov	sp, r7
 801791c:	bd80      	pop	{r7, pc}
 801791e:	bf00      	nop
 8017920:	20002468 	.word	0x20002468
 8017924:	080279b8 	.word	0x080279b8
 8017928:	20001650 	.word	0x20001650
 801792c:	20001668 	.word	0x20001668
 8017930:	20001664 	.word	0x20001664

08017934 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b086      	sub	sp, #24
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
 801793c:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 801793e:	2300      	movs	r3, #0
 8017940:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8017942:	2300      	movs	r3, #0
 8017944:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 8017946:	4b2a      	ldr	r3, [pc, #168]	@ (80179f0 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	2b00      	cmp	r3, #0
 801794c:	d04b      	beq.n	80179e6 <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 801794e:	4b28      	ldr	r3, [pc, #160]	@ (80179f0 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	6839      	ldr	r1, [r7, #0]
 8017954:	4618      	mov	r0, r3
 8017956:	f7ec fac5 	bl	8003ee4 <xQueueSemaphoreTake>
 801795a:	4603      	mov	r3, r0
 801795c:	2b01      	cmp	r3, #1
 801795e:	d13d      	bne.n	80179dc <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8017960:	f7ee fef6 	bl	8006750 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8017964:	4b23      	ldr	r3, [pc, #140]	@ (80179f4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017966:	68db      	ldr	r3, [r3, #12]
 8017968:	68db      	ldr	r3, [r3, #12]
 801796a:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 801796c:	6978      	ldr	r0, [r7, #20]
 801796e:	f7ff ff65 	bl	801783c <bIsValidNetworkDescriptor>
 8017972:	4603      	mov	r3, r0
 8017974:	2b00      	cmp	r3, #0
 8017976:	d009      	beq.n	801798c <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 8017978:	697b      	ldr	r3, [r7, #20]
 801797a:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 801797c:	4a1d      	ldr	r2, [pc, #116]	@ (80179f4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 801797e:	4293      	cmp	r3, r2
 8017980:	d104      	bne.n	801798c <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8017982:	697b      	ldr	r3, [r7, #20]
 8017984:	4618      	mov	r0, r3
 8017986:	f7eb ff7b 	bl	8003880 <uxListRemove>
 801798a:	e001      	b.n	8017990 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 801798c:	2301      	movs	r3, #1
 801798e:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8017990:	f7ee ff0a 	bl	80067a8 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8017994:	693b      	ldr	r3, [r7, #16]
 8017996:	2b01      	cmp	r3, #1
 8017998:	d10b      	bne.n	80179b2 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 801799a:	6978      	ldr	r0, [r7, #20]
 801799c:	f7ff ff4e 	bl	801783c <bIsValidNetworkDescriptor>
 80179a0:	4603      	mov	r3, r0
 80179a2:	461a      	mov	r2, r3
 80179a4:	6979      	ldr	r1, [r7, #20]
 80179a6:	4814      	ldr	r0, [pc, #80]	@ (80179f8 <pxGetNetworkBufferWithDescriptor+0xc4>)
 80179a8:	f00a fed4 	bl	8022754 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 80179ac:	2300      	movs	r3, #0
 80179ae:	617b      	str	r3, [r7, #20]
 80179b0:	e019      	b.n	80179e6 <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 80179b2:	4b10      	ldr	r3, [pc, #64]	@ (80179f4 <pxGetNetworkBufferWithDescriptor+0xc0>)
 80179b4:	681b      	ldr	r3, [r3, #0]
 80179b6:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 80179b8:	4b10      	ldr	r3, [pc, #64]	@ (80179fc <pxGetNetworkBufferWithDescriptor+0xc8>)
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	68fa      	ldr	r2, [r7, #12]
 80179be:	429a      	cmp	r2, r3
 80179c0:	d202      	bcs.n	80179c8 <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 80179c2:	4a0e      	ldr	r2, [pc, #56]	@ (80179fc <pxGetNetworkBufferWithDescriptor+0xc8>)
 80179c4:	68fb      	ldr	r3, [r7, #12]
 80179c6:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	687a      	ldr	r2, [r7, #4]
 80179cc:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 80179ce:	697b      	ldr	r3, [r7, #20]
 80179d0:	2200      	movs	r2, #0
 80179d2:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	2200      	movs	r2, #0
 80179d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80179da:	e004      	b.n	80179e6 <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 80179dc:	f240 113b 	movw	r1, #315	@ 0x13b
 80179e0:	4807      	ldr	r0, [pc, #28]	@ (8017a00 <pxGetNetworkBufferWithDescriptor+0xcc>)
 80179e2:	f7e9 ffd9 	bl	8001998 <vAssertCalled>
        }
    }

    return pxReturn;
 80179e6:	697b      	ldr	r3, [r7, #20]
}
 80179e8:	4618      	mov	r0, r3
 80179ea:	3718      	adds	r7, #24
 80179ec:	46bd      	mov	sp, r7
 80179ee:	bd80      	pop	{r7, pc}
 80179f0:	20002468 	.word	0x20002468
 80179f4:	20001650 	.word	0x20001650
 80179f8:	08027a04 	.word	0x08027a04
 80179fc:	20001664 	.word	0x20001664
 8017a00:	080279b8 	.word	0x080279b8

08017a04 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8017a04:	b580      	push	{r7, lr}
 8017a06:	b084      	sub	sp, #16
 8017a08:	af00      	add	r7, sp, #0
 8017a0a:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 8017a0c:	6878      	ldr	r0, [r7, #4]
 8017a0e:	f7ff ff15 	bl	801783c <bIsValidNetworkDescriptor>
 8017a12:	4603      	mov	r3, r0
 8017a14:	2b00      	cmp	r3, #0
 8017a16:	d104      	bne.n	8017a22 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 8017a18:	6879      	ldr	r1, [r7, #4]
 8017a1a:	4819      	ldr	r0, [pc, #100]	@ (8017a80 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 8017a1c:	f00a fe9a 	bl	8022754 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 8017a20:	e029      	b.n	8017a76 <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 8017a22:	f7ee fe95 	bl	8006750 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	691b      	ldr	r3, [r3, #16]
 8017a2a:	4a16      	ldr	r2, [pc, #88]	@ (8017a84 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017a2c:	4293      	cmp	r3, r2
 8017a2e:	d101      	bne.n	8017a34 <vReleaseNetworkBufferAndDescriptor+0x30>
 8017a30:	2301      	movs	r3, #1
 8017a32:	e000      	b.n	8017a36 <vReleaseNetworkBufferAndDescriptor+0x32>
 8017a34:	2300      	movs	r3, #0
 8017a36:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	d104      	bne.n	8017a48 <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	4619      	mov	r1, r3
 8017a42:	4810      	ldr	r0, [pc, #64]	@ (8017a84 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8017a44:	f7eb febf 	bl	80037c6 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 8017a48:	f7ee feae 	bl	80067a8 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8017a4c:	68fb      	ldr	r3, [r7, #12]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d008      	beq.n	8017a64 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8017a52:	f000 f829 	bl	8017aa8 <uxGetNumberOfFreeNetworkBuffers>
 8017a56:	4603      	mov	r3, r0
 8017a58:	461a      	mov	r2, r3
 8017a5a:	6879      	ldr	r1, [r7, #4]
 8017a5c:	480a      	ldr	r0, [pc, #40]	@ (8017a88 <vReleaseNetworkBufferAndDescriptor+0x84>)
 8017a5e:	f00a fe79 	bl	8022754 <lUDPLoggingPrintf>
}
 8017a62:	e008      	b.n	8017a76 <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8017a64:	4b09      	ldr	r3, [pc, #36]	@ (8017a8c <vReleaseNetworkBufferAndDescriptor+0x88>)
 8017a66:	6818      	ldr	r0, [r3, #0]
 8017a68:	2300      	movs	r3, #0
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	2100      	movs	r1, #0
 8017a6e:	f7ec f881 	bl	8003b74 <xQueueGenericSend>
            prvShowWarnings();
 8017a72:	f7ff feee 	bl	8017852 <prvShowWarnings>
}
 8017a76:	bf00      	nop
 8017a78:	3710      	adds	r7, #16
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}
 8017a7e:	bf00      	nop
 8017a80:	08027a48 	.word	0x08027a48
 8017a84:	20001650 	.word	0x20001650
 8017a88:	08027a80 	.word	0x08027a80
 8017a8c:	20002468 	.word	0x20002468

08017a90 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8017a90:	b480      	push	{r7}
 8017a92:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8017a94:	4b03      	ldr	r3, [pc, #12]	@ (8017aa4 <uxGetMinimumFreeNetworkBuffers+0x14>)
 8017a96:	681b      	ldr	r3, [r3, #0]
}
 8017a98:	4618      	mov	r0, r3
 8017a9a:	46bd      	mov	sp, r7
 8017a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa0:	4770      	bx	lr
 8017aa2:	bf00      	nop
 8017aa4:	20001664 	.word	0x20001664

08017aa8 <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 8017aa8:	b480      	push	{r7}
 8017aaa:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017aac:	4b03      	ldr	r3, [pc, #12]	@ (8017abc <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8017aae:	681b      	ldr	r3, [r3, #0]
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab8:	4770      	bx	lr
 8017aba:	bf00      	nop
 8017abc:	20001650 	.word	0x20001650

08017ac0 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8017ac0:	b480      	push	{r7}
 8017ac2:	b085      	sub	sp, #20
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017ac8:	2300      	movs	r3, #0
 8017aca:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	4a11      	ldr	r2, [pc, #68]	@ (8017b14 <xHas_1F_PHYSPCS+0x54>)
 8017ad0:	4293      	cmp	r3, r2
 8017ad2:	d016      	beq.n	8017b02 <xHas_1F_PHYSPCS+0x42>
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	4a0f      	ldr	r2, [pc, #60]	@ (8017b14 <xHas_1F_PHYSPCS+0x54>)
 8017ad8:	4293      	cmp	r3, r2
 8017ada:	d80f      	bhi.n	8017afc <xHas_1F_PHYSPCS+0x3c>
 8017adc:	687b      	ldr	r3, [r7, #4]
 8017ade:	4a0e      	ldr	r2, [pc, #56]	@ (8017b18 <xHas_1F_PHYSPCS+0x58>)
 8017ae0:	4293      	cmp	r3, r2
 8017ae2:	d00e      	beq.n	8017b02 <xHas_1F_PHYSPCS+0x42>
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8017b18 <xHas_1F_PHYSPCS+0x58>)
 8017ae8:	4293      	cmp	r3, r2
 8017aea:	d807      	bhi.n	8017afc <xHas_1F_PHYSPCS+0x3c>
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	4a0b      	ldr	r2, [pc, #44]	@ (8017b1c <xHas_1F_PHYSPCS+0x5c>)
 8017af0:	4293      	cmp	r3, r2
 8017af2:	d006      	beq.n	8017b02 <xHas_1F_PHYSPCS+0x42>
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	4a0a      	ldr	r2, [pc, #40]	@ (8017b20 <xHas_1F_PHYSPCS+0x60>)
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d002      	beq.n	8017b02 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 8017afc:	2301      	movs	r3, #1
 8017afe:	60fb      	str	r3, [r7, #12]
            break;
 8017b00:	e000      	b.n	8017b04 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 8017b02:	bf00      	nop
    }

    return xResult;
 8017b04:	68fb      	ldr	r3, [r7, #12]
}
 8017b06:	4618      	mov	r0, r3
 8017b08:	3714      	adds	r7, #20
 8017b0a:	46bd      	mov	sp, r7
 8017b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b10:	4770      	bx	lr
 8017b12:	bf00      	nop
 8017b14:	ff000710 	.word	0xff000710
 8017b18:	2000a250 	.word	0x2000a250
 8017b1c:	20005c90 	.word	0x20005c90
 8017b20:	2000a221 	.word	0x2000a221

08017b24 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 8017b24:	b480      	push	{r7}
 8017b26:	b085      	sub	sp, #20
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	4a0d      	ldr	r2, [pc, #52]	@ (8017b68 <xHas_19_PHYCR+0x44>)
 8017b34:	4293      	cmp	r3, r2
 8017b36:	d00b      	beq.n	8017b50 <xHas_19_PHYCR+0x2c>
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	4a0b      	ldr	r2, [pc, #44]	@ (8017b68 <xHas_19_PHYCR+0x44>)
 8017b3c:	4293      	cmp	r3, r2
 8017b3e:	d80a      	bhi.n	8017b56 <xHas_19_PHYCR+0x32>
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	4a0a      	ldr	r2, [pc, #40]	@ (8017b6c <xHas_19_PHYCR+0x48>)
 8017b44:	4293      	cmp	r3, r2
 8017b46:	d003      	beq.n	8017b50 <xHas_19_PHYCR+0x2c>
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	4a09      	ldr	r2, [pc, #36]	@ (8017b70 <xHas_19_PHYCR+0x4c>)
 8017b4c:	4293      	cmp	r3, r2
 8017b4e:	d102      	bne.n	8017b56 <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8017b50:	2301      	movs	r3, #1
 8017b52:	60fb      	str	r3, [r7, #12]
            break;
 8017b54:	e000      	b.n	8017b58 <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 8017b56:	bf00      	nop
    }

    return xResult;
 8017b58:	68fb      	ldr	r3, [r7, #12]
}
 8017b5a:	4618      	mov	r0, r3
 8017b5c:	3714      	adds	r7, #20
 8017b5e:	46bd      	mov	sp, r7
 8017b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b64:	4770      	bx	lr
 8017b66:	bf00      	nop
 8017b68:	2000a221 	.word	0x2000a221
 8017b6c:	0007c130 	.word	0x0007c130
 8017b70:	20005c90 	.word	0x20005c90

08017b74 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017b74:	b580      	push	{r7, lr}
 8017b76:	b084      	sub	sp, #16
 8017b78:	af00      	add	r7, sp, #0
 8017b7a:	60f8      	str	r0, [r7, #12]
 8017b7c:	60b9      	str	r1, [r7, #8]
 8017b7e:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017b80:	2240      	movs	r2, #64	@ 0x40
 8017b82:	2100      	movs	r1, #0
 8017b84:	68f8      	ldr	r0, [r7, #12]
 8017b86:	f00b f90e 	bl	8022da6 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 8017b8a:	68fb      	ldr	r3, [r7, #12]
 8017b8c:	68ba      	ldr	r2, [r7, #8]
 8017b8e:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	687a      	ldr	r2, [r7, #4]
 8017b94:	605a      	str	r2, [r3, #4]
}
 8017b96:	bf00      	nop
 8017b98:	3710      	adds	r7, #16
 8017b9a:	46bd      	mov	sp, r7
 8017b9c:	bd80      	pop	{r7, pc}
	...

08017ba0 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017ba0:	b580      	push	{r7, lr}
 8017ba2:	b086      	sub	sp, #24
 8017ba4:	af00      	add	r7, sp, #0
 8017ba6:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2200      	movs	r2, #0
 8017bac:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017bae:	2300      	movs	r3, #0
 8017bb0:	617b      	str	r3, [r7, #20]
 8017bb2:	e03a      	b.n	8017c2a <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 8017bb8:	687b      	ldr	r3, [r7, #4]
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	f107 020c 	add.w	r2, r7, #12
 8017bc0:	2103      	movs	r1, #3
 8017bc2:	6978      	ldr	r0, [r7, #20]
 8017bc4:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 8017bc6:	68fb      	ldr	r3, [r7, #12]
 8017bc8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017bcc:	4293      	cmp	r3, r2
 8017bce:	d029      	beq.n	8017c24 <xPhyDiscover+0x84>
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d026      	beq.n	8017c24 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	681b      	ldr	r3, [r3, #0]
 8017bda:	f107 0208 	add.w	r2, r7, #8
 8017bde:	2102      	movs	r1, #2
 8017be0:	6978      	ldr	r0, [r7, #20]
 8017be2:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8017be4:	68bb      	ldr	r3, [r7, #8]
 8017be6:	041a      	lsls	r2, r3, #16
 8017be8:	68f9      	ldr	r1, [r7, #12]
 8017bea:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8017bee:	400b      	ands	r3, r1
 8017bf0:	4313      	orrs	r3, r2
 8017bf2:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017bf8:	697a      	ldr	r2, [r7, #20]
 8017bfa:	b2d1      	uxtb	r1, r2
 8017bfc:	687a      	ldr	r2, [r7, #4]
 8017bfe:	4413      	add	r3, r2
 8017c00:	460a      	mov	r2, r1
 8017c02:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	3202      	adds	r2, #2
 8017c0c:	6939      	ldr	r1, [r7, #16]
 8017c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c16:	1c5a      	adds	r2, r3, #1
 8017c18:	687b      	ldr	r3, [r7, #4]
 8017c1a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c20:	2b04      	cmp	r3, #4
 8017c22:	d005      	beq.n	8017c30 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	3301      	adds	r3, #1
 8017c28:	617b      	str	r3, [r7, #20]
 8017c2a:	697b      	ldr	r3, [r7, #20]
 8017c2c:	2b1f      	cmp	r3, #31
 8017c2e:	ddc1      	ble.n	8017bb4 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	dd05      	ble.n	8017c44 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	689b      	ldr	r3, [r3, #8]
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	4804      	ldr	r0, [pc, #16]	@ (8017c50 <xPhyDiscover+0xb0>)
 8017c40:	f00a fd88 	bl	8022754 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8017c44:	687b      	ldr	r3, [r7, #4]
 8017c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8017c48:	4618      	mov	r0, r3
 8017c4a:	3718      	adds	r7, #24
 8017c4c:	46bd      	mov	sp, r7
 8017c4e:	bd80      	pop	{r7, pc}
 8017c50:	08027ac4 	.word	0x08027ac4

08017c54 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	b08c      	sub	sp, #48	@ 0x30
 8017c58:	af00      	add	r7, sp, #0
 8017c5a:	6078      	str	r0, [r7, #4]
 8017c5c:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8017c5e:	2300      	movs	r3, #0
 8017c60:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017c62:	2300      	movs	r3, #0
 8017c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c66:	e017      	b.n	8017c98 <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c6c:	4413      	add	r3, r2
 8017c6e:	3318      	adds	r3, #24
 8017c70:	781b      	ldrb	r3, [r3, #0]
 8017c72:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	f107 0218 	add.w	r2, r7, #24
 8017c7c:	2100      	movs	r1, #0
 8017c7e:	69f8      	ldr	r0, [r7, #28]
 8017c80:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	685b      	ldr	r3, [r3, #4]
 8017c86:	69ba      	ldr	r2, [r7, #24]
 8017c88:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017c8c:	2100      	movs	r1, #0
 8017c8e:	69f8      	ldr	r0, [r7, #28]
 8017c90:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017c94:	3301      	adds	r3, #1
 8017c96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017c9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017c9e:	429a      	cmp	r2, r3
 8017ca0:	dbe2      	blt.n	8017c68 <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8017ca6:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8017ca8:	f107 030c 	add.w	r3, r7, #12
 8017cac:	4618      	mov	r0, r3
 8017cae:	f7ed fb8b 	bl	80053c8 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017cb2:	2300      	movs	r3, #0
 8017cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017cb6:	e01f      	b.n	8017cf8 <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017cb8:	687a      	ldr	r2, [r7, #4]
 8017cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cbc:	4413      	add	r3, r2
 8017cbe:	3318      	adds	r3, #24
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	f107 0218 	add.w	r2, r7, #24
 8017ccc:	2100      	movs	r1, #0
 8017cce:	6a38      	ldr	r0, [r7, #32]
 8017cd0:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8017cd2:	69bb      	ldr	r3, [r7, #24]
 8017cd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d10a      	bne.n	8017cf2 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8017cdc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017cde:	482d      	ldr	r0, [pc, #180]	@ (8017d94 <xPhyReset+0x140>)
 8017ce0:	f00a fd38 	bl	8022754 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8017ce4:	2201      	movs	r2, #1
 8017ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8017cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017cee:	4313      	orrs	r3, r2
 8017cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cf4:	3301      	adds	r3, #1
 8017cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cfc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	dbda      	blt.n	8017cb8 <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8017d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017d04:	683b      	ldr	r3, [r7, #0]
 8017d06:	429a      	cmp	r2, r3
 8017d08:	d013      	beq.n	8017d32 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017d0a:	f107 0214 	add.w	r2, r7, #20
 8017d0e:	f107 030c 	add.w	r3, r7, #12
 8017d12:	4611      	mov	r1, r2
 8017d14:	4618      	mov	r0, r3
 8017d16:	f7ed fb8f 	bl	8005438 <xTaskCheckForTimeOut>
 8017d1a:	4603      	mov	r3, r0
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d004      	beq.n	8017d2a <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017d20:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017d22:	481d      	ldr	r0, [pc, #116]	@ (8017d98 <xPhyReset+0x144>)
 8017d24:	f00a fd16 	bl	8022754 <lUDPLoggingPrintf>
            break;
 8017d28:	e004      	b.n	8017d34 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017d2a:	2032      	movs	r0, #50	@ 0x32
 8017d2c:	f7ec fdd8 	bl	80048e0 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d30:	e7bf      	b.n	8017cb2 <xPhyReset+0x5e>
            break;
 8017d32:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d34:	2300      	movs	r3, #0
 8017d36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d38:	e01e      	b.n	8017d78 <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8017d3a:	2201      	movs	r2, #1
 8017d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d3e:	409a      	lsls	r2, r3
 8017d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017d42:	4013      	ands	r3, r2
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d114      	bne.n	8017d72 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017d48:	687a      	ldr	r2, [r7, #4]
 8017d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d4c:	4413      	add	r3, r2
 8017d4e:	3318      	adds	r3, #24
 8017d50:	781b      	ldrb	r3, [r3, #0]
 8017d52:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	f107 0218 	add.w	r2, r7, #24
 8017d5c:	2100      	movs	r1, #0
 8017d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017d60:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	685b      	ldr	r3, [r3, #4]
 8017d66:	69ba      	ldr	r2, [r7, #24]
 8017d68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017d6c:	2100      	movs	r1, #0
 8017d6e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017d70:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d74:	3301      	adds	r3, #1
 8017d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017d7e:	429a      	cmp	r2, r3
 8017d80:	dbdb      	blt.n	8017d3a <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017d82:	2032      	movs	r0, #50	@ 0x32
 8017d84:	f7ec fdac 	bl	80048e0 <vTaskDelay>

    return ulDoneMask;
 8017d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017d8a:	4618      	mov	r0, r3
 8017d8c:	3730      	adds	r7, #48	@ 0x30
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	08027ad0 	.word	0x08027ad0
 8017d98:	08027af4 	.word	0x08027af4

08017d9c <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b088      	sub	sp, #32
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
 8017da4:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	dc05      	bgt.n	8017dba <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8017dae:	487c      	ldr	r0, [pc, #496]	@ (8017fa0 <xPhyConfigure+0x204>)
 8017db0:	f00a fcd0 	bl	8022754 <lUDPLoggingPrintf>
        return -1;
 8017db4:	f04f 33ff 	mov.w	r3, #4294967295
 8017db8:	e0ed      	b.n	8017f96 <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	781b      	ldrb	r3, [r3, #0]
 8017dbe:	2b03      	cmp	r3, #3
 8017dc0:	d107      	bne.n	8017dd2 <xPhyConfigure+0x36>
 8017dc2:	683b      	ldr	r3, [r7, #0]
 8017dc4:	789b      	ldrb	r3, [r3, #2]
 8017dc6:	2b03      	cmp	r3, #3
 8017dc8:	d103      	bne.n	8017dd2 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8017dca:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017dce:	61fb      	str	r3, [r7, #28]
 8017dd0:	e044      	b.n	8017e5c <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017dd2:	2301      	movs	r3, #1
 8017dd4:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8017dd6:	683b      	ldr	r3, [r7, #0]
 8017dd8:	781b      	ldrb	r3, [r3, #0]
 8017dda:	2b03      	cmp	r3, #3
 8017ddc:	d10d      	bne.n	8017dfa <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017dde:	683b      	ldr	r3, [r7, #0]
 8017de0:	789b      	ldrb	r3, [r3, #2]
 8017de2:	2b02      	cmp	r3, #2
 8017de4:	d104      	bne.n	8017df0 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8017de6:	69fb      	ldr	r3, [r7, #28]
 8017de8:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017dec:	61fb      	str	r3, [r7, #28]
 8017dee:	e035      	b.n	8017e5c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017df0:	69fb      	ldr	r3, [r7, #28]
 8017df2:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8017df6:	61fb      	str	r3, [r7, #28]
 8017df8:	e030      	b.n	8017e5c <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8017dfa:	683b      	ldr	r3, [r7, #0]
 8017dfc:	789b      	ldrb	r3, [r3, #2]
 8017dfe:	2b03      	cmp	r3, #3
 8017e00:	d10d      	bne.n	8017e1e <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017e02:	683b      	ldr	r3, [r7, #0]
 8017e04:	781b      	ldrb	r3, [r3, #0]
 8017e06:	2b01      	cmp	r3, #1
 8017e08:	d104      	bne.n	8017e14 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8017e0a:	69fb      	ldr	r3, [r7, #28]
 8017e0c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8017e10:	61fb      	str	r3, [r7, #28]
 8017e12:	e023      	b.n	8017e5c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8017e14:	69fb      	ldr	r3, [r7, #28]
 8017e16:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8017e1a:	61fb      	str	r3, [r7, #28]
 8017e1c:	e01e      	b.n	8017e5c <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8017e1e:	683b      	ldr	r3, [r7, #0]
 8017e20:	781b      	ldrb	r3, [r3, #0]
 8017e22:	2b02      	cmp	r3, #2
 8017e24:	d10d      	bne.n	8017e42 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017e26:	683b      	ldr	r3, [r7, #0]
 8017e28:	789b      	ldrb	r3, [r3, #2]
 8017e2a:	2b02      	cmp	r3, #2
 8017e2c:	d104      	bne.n	8017e38 <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8017e2e:	69fb      	ldr	r3, [r7, #28]
 8017e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017e34:	61fb      	str	r3, [r7, #28]
 8017e36:	e011      	b.n	8017e5c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8017e38:	69fb      	ldr	r3, [r7, #28]
 8017e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e3e:	61fb      	str	r3, [r7, #28]
 8017e40:	e00c      	b.n	8017e5c <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017e42:	683b      	ldr	r3, [r7, #0]
 8017e44:	789b      	ldrb	r3, [r3, #2]
 8017e46:	2b02      	cmp	r3, #2
 8017e48:	d104      	bne.n	8017e54 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8017e4a:	69fb      	ldr	r3, [r7, #28]
 8017e4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017e50:	61fb      	str	r3, [r7, #28]
 8017e52:	e003      	b.n	8017e5c <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8017e54:	69fb      	ldr	r3, [r7, #28]
 8017e56:	f043 0320 	orr.w	r3, r3, #32
 8017e5a:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017e60:	2201      	movs	r2, #1
 8017e62:	fa02 f303 	lsl.w	r3, r2, r3
 8017e66:	3b01      	subs	r3, #1
 8017e68:	4619      	mov	r1, r3
 8017e6a:	6878      	ldr	r0, [r7, #4]
 8017e6c:	f7ff fef2 	bl	8017c54 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017e70:	2300      	movs	r3, #0
 8017e72:	61bb      	str	r3, [r7, #24]
 8017e74:	e080      	b.n	8017f78 <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017e76:	687a      	ldr	r2, [r7, #4]
 8017e78:	69bb      	ldr	r3, [r7, #24]
 8017e7a:	4413      	add	r3, r2
 8017e7c:	3318      	adds	r3, #24
 8017e7e:	781b      	ldrb	r3, [r3, #0]
 8017e80:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	69ba      	ldr	r2, [r7, #24]
 8017e86:	3202      	adds	r2, #2
 8017e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e8c:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	685b      	ldr	r3, [r3, #4]
 8017e92:	69fa      	ldr	r2, [r7, #28]
 8017e94:	2104      	movs	r1, #4
 8017e96:	6978      	ldr	r0, [r7, #20]
 8017e98:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	f107 020c 	add.w	r2, r7, #12
 8017ea2:	2100      	movs	r1, #0
 8017ea4:	6978      	ldr	r0, [r7, #20]
 8017ea6:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8017eae:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8017eb6:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8017eb8:	683b      	ldr	r3, [r7, #0]
 8017eba:	781b      	ldrb	r3, [r3, #0]
 8017ebc:	2b02      	cmp	r3, #2
 8017ebe:	d003      	beq.n	8017ec8 <xPhyConfigure+0x12c>
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	2b03      	cmp	r3, #3
 8017ec6:	d104      	bne.n	8017ed2 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017ece:	60fb      	str	r3, [r7, #12]
 8017ed0:	e007      	b.n	8017ee2 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017ed2:	683b      	ldr	r3, [r7, #0]
 8017ed4:	781b      	ldrb	r3, [r3, #0]
 8017ed6:	2b01      	cmp	r3, #1
 8017ed8:	d103      	bne.n	8017ee2 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017ee0:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017ee2:	683b      	ldr	r3, [r7, #0]
 8017ee4:	789b      	ldrb	r3, [r3, #2]
 8017ee6:	2b02      	cmp	r3, #2
 8017ee8:	d003      	beq.n	8017ef2 <xPhyConfigure+0x156>
 8017eea:	683b      	ldr	r3, [r7, #0]
 8017eec:	789b      	ldrb	r3, [r3, #2]
 8017eee:	2b03      	cmp	r3, #3
 8017ef0:	d104      	bne.n	8017efc <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017ef8:	60fb      	str	r3, [r7, #12]
 8017efa:	e007      	b.n	8017f0c <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8017efc:	683b      	ldr	r3, [r7, #0]
 8017efe:	789b      	ldrb	r3, [r3, #2]
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d103      	bne.n	8017f0c <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8017f04:	68fb      	ldr	r3, [r7, #12]
 8017f06:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017f0a:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8017f0c:	6938      	ldr	r0, [r7, #16]
 8017f0e:	f7ff fe09 	bl	8017b24 <xHas_19_PHYCR>
 8017f12:	4603      	mov	r3, r0
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d026      	beq.n	8017f66 <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8017f18:	687b      	ldr	r3, [r7, #4]
 8017f1a:	681b      	ldr	r3, [r3, #0]
 8017f1c:	f107 0208 	add.w	r2, r7, #8
 8017f20:	2119      	movs	r1, #25
 8017f22:	6978      	ldr	r0, [r7, #20]
 8017f24:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8017f26:	68bb      	ldr	r3, [r7, #8]
 8017f28:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8017f2c:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8017f2e:	683b      	ldr	r3, [r7, #0]
 8017f30:	785b      	ldrb	r3, [r3, #1]
 8017f32:	2b03      	cmp	r3, #3
 8017f34:	d104      	bne.n	8017f40 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8017f36:	68bb      	ldr	r3, [r7, #8]
 8017f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8017f3c:	60bb      	str	r3, [r7, #8]
 8017f3e:	e00c      	b.n	8017f5a <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8017f40:	683b      	ldr	r3, [r7, #0]
 8017f42:	785b      	ldrb	r3, [r3, #1]
 8017f44:	2b02      	cmp	r3, #2
 8017f46:	d104      	bne.n	8017f52 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8017f48:	68bb      	ldr	r3, [r7, #8]
 8017f4a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8017f4e:	60bb      	str	r3, [r7, #8]
 8017f50:	e003      	b.n	8017f5a <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8017f52:	68bb      	ldr	r3, [r7, #8]
 8017f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8017f58:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	685b      	ldr	r3, [r3, #4]
 8017f5e:	68ba      	ldr	r2, [r7, #8]
 8017f60:	2119      	movs	r1, #25
 8017f62:	6978      	ldr	r0, [r7, #20]
 8017f64:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	461a      	mov	r2, r3
 8017f6a:	69f9      	ldr	r1, [r7, #28]
 8017f6c:	480d      	ldr	r0, [pc, #52]	@ (8017fa4 <xPhyConfigure+0x208>)
 8017f6e:	f00a fbf1 	bl	8022754 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017f72:	69bb      	ldr	r3, [r7, #24]
 8017f74:	3301      	adds	r3, #1
 8017f76:	61bb      	str	r3, [r7, #24]
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017f7c:	69ba      	ldr	r2, [r7, #24]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	f6ff af79 	blt.w	8017e76 <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	69fa      	ldr	r2, [r7, #28]
 8017f92:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8017f94:	2300      	movs	r3, #0
}
 8017f96:	4618      	mov	r0, r3
 8017f98:	3720      	adds	r7, #32
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}
 8017f9e:	bf00      	nop
 8017fa0:	08027b28 	.word	0x08027b28
 8017fa4:	08027b4c 	.word	0x08027b4c

08017fa8 <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8017fa8:	b590      	push	{r4, r7, lr}
 8017faa:	b095      	sub	sp, #84	@ 0x54
 8017fac:	af02      	add	r7, sp, #8
 8017fae:	6078      	str	r0, [r7, #4]
 8017fb0:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8017fb2:	683b      	ldr	r3, [r7, #0]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d101      	bne.n	8017fbc <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	e18d      	b.n	80182d8 <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8017fc0:	e020      	b.n	8018004 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8017fc2:	683a      	ldr	r2, [r7, #0]
 8017fc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8017fca:	f003 0301 	and.w	r3, r3, #1
 8017fce:	2b00      	cmp	r3, #0
 8017fd0:	d015      	beq.n	8017ffe <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017fd2:	687a      	ldr	r2, [r7, #4]
 8017fd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017fd6:	4413      	add	r3, r2
 8017fd8:	3318      	adds	r3, #24
 8017fda:	781b      	ldrb	r3, [r3, #0]
 8017fdc:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	685b      	ldr	r3, [r3, #4]
 8017fe2:	687a      	ldr	r2, [r7, #4]
 8017fe4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8017fe6:	2104      	movs	r1, #4
 8017fe8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017fea:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8017fec:	687b      	ldr	r3, [r7, #4]
 8017fee:	685b      	ldr	r3, [r3, #4]
 8017ff0:	687a      	ldr	r2, [r7, #4]
 8017ff2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017ff4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8017ff8:	2100      	movs	r1, #0
 8017ffa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8017ffc:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017ffe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018000:	3301      	adds	r3, #1
 8018002:	647b      	str	r3, [r7, #68]	@ 0x44
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018008:	461a      	mov	r2, r3
 801800a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801800c:	4293      	cmp	r3, r2
 801800e:	d3d8      	bcc.n	8017fc2 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8018010:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8018014:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8018016:	f107 0318 	add.w	r3, r7, #24
 801801a:	4618      	mov	r0, r3
 801801c:	f7ed f9d4 	bl	80053c8 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8018020:	2300      	movs	r3, #0
 8018022:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8018024:	2301      	movs	r3, #1
 8018026:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018028:	2300      	movs	r3, #0
 801802a:	647b      	str	r3, [r7, #68]	@ 0x44
 801802c:	e025      	b.n	801807a <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 801802e:	683a      	ldr	r2, [r7, #0]
 8018030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018032:	4013      	ands	r3, r2
 8018034:	2b00      	cmp	r3, #0
 8018036:	d01a      	beq.n	801806e <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8018038:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801803a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801803c:	4013      	ands	r3, r2
 801803e:	2b00      	cmp	r3, #0
 8018040:	d115      	bne.n	801806e <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8018042:	687a      	ldr	r2, [r7, #4]
 8018044:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018046:	4413      	add	r3, r2
 8018048:	3318      	adds	r3, #24
 801804a:	781b      	ldrb	r3, [r3, #0]
 801804c:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018056:	2101      	movs	r1, #1
 8018058:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801805a:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 801805c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801805e:	f003 0320 	and.w	r3, r3, #32
 8018062:	2b00      	cmp	r3, #0
 8018064:	d003      	beq.n	801806e <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8018066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8018068:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801806a:	4313      	orrs	r3, r2
 801806c:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801806e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018070:	3301      	adds	r3, #1
 8018072:	647b      	str	r3, [r7, #68]	@ 0x44
 8018074:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018076:	005b      	lsls	r3, r3, #1
 8018078:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801807e:	461a      	mov	r2, r3
 8018080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8018082:	4293      	cmp	r3, r2
 8018084:	d3d3      	bcc.n	801802e <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8018086:	683a      	ldr	r2, [r7, #0]
 8018088:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801808a:	429a      	cmp	r2, r3
 801808c:	d013      	beq.n	80180b6 <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 801808e:	f107 0220 	add.w	r2, r7, #32
 8018092:	f107 0318 	add.w	r3, r7, #24
 8018096:	4611      	mov	r1, r2
 8018098:	4618      	mov	r0, r3
 801809a:	f7ed f9cd 	bl	8005438 <xTaskCheckForTimeOut>
 801809e:	4603      	mov	r3, r0
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d004      	beq.n	80180ae <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80180a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80180a6:	488e      	ldr	r0, [pc, #568]	@ (80182e0 <xPhyStartAutoNegotiation+0x338>)
 80180a8:	f00a fb54 	bl	8022754 <lUDPLoggingPrintf>
            break;
 80180ac:	e004      	b.n	80180b8 <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80180ae:	2032      	movs	r0, #50	@ 0x32
 80180b0:	f7ec fc16 	bl	80048e0 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 80180b4:	e7b6      	b.n	8018024 <xPhyStartAutoNegotiation+0x7c>
            break;
 80180b6:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 80180b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	f000 810b 	beq.w	80182d6 <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 80180c0:	2301      	movs	r3, #1
 80180c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80180c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80180ca:	43db      	mvns	r3, r3
 80180cc:	401a      	ands	r2, r3
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80180d2:	2300      	movs	r3, #0
 80180d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80180d6:	e0f7      	b.n	80182c8 <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80180d8:	687a      	ldr	r2, [r7, #4]
 80180da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80180dc:	4413      	add	r3, r2
 80180de:	3318      	adds	r3, #24
 80180e0:	781b      	ldrb	r3, [r3, #0]
 80180e2:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 80180e4:	687b      	ldr	r3, [r7, #4]
 80180e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80180e8:	3202      	adds	r2, #2
 80180ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180ee:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 80180f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80180f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80180f4:	4013      	ands	r3, r2
 80180f6:	2b00      	cmp	r3, #0
 80180f8:	f000 80df 	beq.w	80182ba <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	685b      	ldr	r3, [r3, #4]
 8018100:	687a      	ldr	r2, [r7, #4]
 8018102:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8018104:	2100      	movs	r1, #0
 8018106:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018108:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8018112:	2101      	movs	r1, #1
 8018114:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018116:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8018118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801811a:	f003 0304 	and.w	r3, r3, #4
 801811e:	2b00      	cmp	r3, #0
 8018120:	d005      	beq.n	801812e <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018128:	431a      	orrs	r2, r3
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 801812e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8018130:	4a6c      	ldr	r2, [pc, #432]	@ (80182e4 <xPhyStartAutoNegotiation+0x33c>)
 8018132:	4293      	cmp	r3, r2
 8018134:	d130      	bne.n	8018198 <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	f107 0214 	add.w	r2, r7, #20
 801813e:	211e      	movs	r1, #30
 8018140:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018142:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	f003 0307 	and.w	r3, r3, #7
 801814a:	3b01      	subs	r3, #1
 801814c:	2b05      	cmp	r3, #5
 801814e:	d814      	bhi.n	801817a <xPhyStartAutoNegotiation+0x1d2>
 8018150:	a201      	add	r2, pc, #4	@ (adr r2, 8018158 <xPhyStartAutoNegotiation+0x1b0>)
 8018152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018156:	bf00      	nop
 8018158:	08018171 	.word	0x08018171
 801815c:	0801817b 	.word	0x0801817b
 8018160:	0801817b 	.word	0x0801817b
 8018164:	0801817b 	.word	0x0801817b
 8018168:	08018171 	.word	0x08018171
 801816c:	0801817b 	.word	0x0801817b
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018172:	f043 0302 	orr.w	r3, r3, #2
 8018176:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8018178:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	f003 0307 	and.w	r3, r3, #7
 8018180:	2b02      	cmp	r3, #2
 8018182:	d801      	bhi.n	8018188 <xPhyStartAutoNegotiation+0x1e0>
 8018184:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8018186:	e05b      	b.n	8018240 <xPhyStartAutoNegotiation+0x298>
 8018188:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 801818a:	2b01      	cmp	r3, #1
 801818c:	d858      	bhi.n	8018240 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 801818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018190:	f043 0304 	orr.w	r3, r3, #4
 8018194:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8018196:	e053      	b.n	8018240 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8018198:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801819a:	4a53      	ldr	r2, [pc, #332]	@ (80182e8 <xPhyStartAutoNegotiation+0x340>)
 801819c:	4293      	cmp	r3, r2
 801819e:	d126      	bne.n	80181ee <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 80181a0:	2300      	movs	r3, #0
 80181a2:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 80181a4:	2300      	movs	r3, #0
 80181a6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	681b      	ldr	r3, [r3, #0]
 80181ac:	f107 0210 	add.w	r2, r7, #16
 80181b0:	211f      	movs	r1, #31
 80181b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80181b4:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 80181b6:	693b      	ldr	r3, [r7, #16]
 80181b8:	0a1b      	lsrs	r3, r3, #8
 80181ba:	f003 0307 	and.w	r3, r3, #7
 80181be:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 80181c0:	2300      	movs	r3, #0
 80181c2:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 80181c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181c6:	2b02      	cmp	r3, #2
 80181c8:	d002      	beq.n	80181d0 <xPhyStartAutoNegotiation+0x228>
 80181ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181cc:	2b05      	cmp	r3, #5
 80181ce:	d103      	bne.n	80181d8 <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80181d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181d2:	f043 0302 	orr.w	r3, r3, #2
 80181d6:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 80181d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181da:	2b05      	cmp	r3, #5
 80181dc:	d002      	beq.n	80181e4 <xPhyStartAutoNegotiation+0x23c>
 80181de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80181e0:	2b06      	cmp	r3, #6
 80181e2:	d12d      	bne.n	8018240 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80181e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80181e6:	f043 0304 	orr.w	r3, r3, #4
 80181ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80181ec:	e028      	b.n	8018240 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 80181ee:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80181f0:	f7ff fc66 	bl	8017ac0 <xHas_1F_PHYSPCS>
 80181f4:	4603      	mov	r3, r0
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d01b      	beq.n	8018232 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 80181fa:	687b      	ldr	r3, [r7, #4]
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	f107 020c 	add.w	r2, r7, #12
 8018202:	211f      	movs	r1, #31
 8018204:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8018206:	4798      	blx	r3
                ulRegValue = 0;
 8018208:	2300      	movs	r3, #0
 801820a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 801820c:	68fb      	ldr	r3, [r7, #12]
 801820e:	f003 0310 	and.w	r3, r3, #16
 8018212:	2b00      	cmp	r3, #0
 8018214:	d003      	beq.n	801821e <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8018216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018218:	f043 0304 	orr.w	r3, r3, #4
 801821c:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	f003 030c 	and.w	r3, r3, #12
 8018224:	2b04      	cmp	r3, #4
 8018226:	d10b      	bne.n	8018240 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8018228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801822a:	f043 0302 	orr.w	r3, r3, #2
 801822e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018230:	e006      	b.n	8018240 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	681b      	ldr	r3, [r3, #0]
 8018236:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801823a:	2110      	movs	r1, #16
 801823c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 801823e:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8018240:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018244:	f003 0304 	and.w	r3, r3, #4
 8018248:	2b00      	cmp	r3, #0
 801824a:	d001      	beq.n	8018250 <xPhyStartAutoNegotiation+0x2a8>
 801824c:	4827      	ldr	r0, [pc, #156]	@ (80182ec <xPhyStartAutoNegotiation+0x344>)
 801824e:	e000      	b.n	8018252 <xPhyStartAutoNegotiation+0x2aa>
 8018250:	4827      	ldr	r0, [pc, #156]	@ (80182f0 <xPhyStartAutoNegotiation+0x348>)
 8018252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018254:	f003 0302 	and.w	r3, r3, #2
 8018258:	2b00      	cmp	r3, #0
 801825a:	d001      	beq.n	8018260 <xPhyStartAutoNegotiation+0x2b8>
 801825c:	240a      	movs	r4, #10
 801825e:	e000      	b.n	8018262 <xPhyStartAutoNegotiation+0x2ba>
 8018260:	2464      	movs	r4, #100	@ 0x64
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018268:	4013      	ands	r3, r2
 801826a:	2b00      	cmp	r3, #0
 801826c:	d001      	beq.n	8018272 <xPhyStartAutoNegotiation+0x2ca>
 801826e:	4b21      	ldr	r3, [pc, #132]	@ (80182f4 <xPhyStartAutoNegotiation+0x34c>)
 8018270:	e000      	b.n	8018274 <xPhyStartAutoNegotiation+0x2cc>
 8018272:	4b21      	ldr	r3, [pc, #132]	@ (80182f8 <xPhyStartAutoNegotiation+0x350>)
 8018274:	9300      	str	r3, [sp, #0]
 8018276:	4623      	mov	r3, r4
 8018278:	4602      	mov	r2, r0
 801827a:	4820      	ldr	r0, [pc, #128]	@ (80182fc <xPhyStartAutoNegotiation+0x354>)
 801827c:	f00a fa6a 	bl	8022754 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8018280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018282:	f003 0304 	and.w	r3, r3, #4
 8018286:	2b00      	cmp	r3, #0
 8018288:	d004      	beq.n	8018294 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2202      	movs	r2, #2
 801828e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8018292:	e003      	b.n	801829c <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8018294:	687b      	ldr	r3, [r7, #4]
 8018296:	2201      	movs	r2, #1
 8018298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 801829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801829e:	f003 0302 	and.w	r3, r3, #2
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d004      	beq.n	80182b0 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	2201      	movs	r2, #1
 80182aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80182ae:	e005      	b.n	80182bc <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	2202      	movs	r2, #2
 80182b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80182b8:	e000      	b.n	80182bc <xPhyStartAutoNegotiation+0x314>
                continue;
 80182ba:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80182bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80182be:	3301      	adds	r3, #1
 80182c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80182c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80182c4:	005b      	lsls	r3, r3, #1
 80182c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182cc:	461a      	mov	r2, r3
 80182ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80182d0:	4293      	cmp	r3, r2
 80182d2:	f4ff af01 	bcc.w	80180d8 <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 80182d6:	2300      	movs	r3, #0
}
 80182d8:	4618      	mov	r0, r3
 80182da:	374c      	adds	r7, #76	@ 0x4c
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd90      	pop	{r4, r7, pc}
 80182e0:	08027b70 	.word	0x08027b70
 80182e4:	00221560 	.word	0x00221560
 80182e8:	00221550 	.word	0x00221550
 80182ec:	08027bbc 	.word	0x08027bbc
 80182f0:	08027bc4 	.word	0x08027bc4
 80182f4:	08027bcc 	.word	0x08027bcc
 80182f8:	08027bd4 	.word	0x08027bd4
 80182fc:	08027bd8 	.word	0x08027bd8

08018300 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b088      	sub	sp, #32
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
 8018308:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 801830a:	2301      	movs	r3, #1
 801830c:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 801830e:	2300      	movs	r3, #0
 8018310:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8018312:	683b      	ldr	r3, [r7, #0]
 8018314:	2b00      	cmp	r3, #0
 8018316:	dd2b      	ble.n	8018370 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	331c      	adds	r3, #28
 801831c:	4618      	mov	r0, r3
 801831e:	f7ed f853 	bl	80053c8 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8018322:	687b      	ldr	r3, [r7, #4]
 8018324:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018328:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801832a:	2300      	movs	r3, #0
 801832c:	61bb      	str	r3, [r7, #24]
 801832e:	e019      	b.n	8018364 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018334:	69fb      	ldr	r3, [r7, #28]
 8018336:	4013      	ands	r3, r2
 8018338:	2b00      	cmp	r3, #0
 801833a:	d10d      	bne.n	8018358 <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018340:	69fb      	ldr	r3, [r7, #28]
 8018342:	431a      	orrs	r2, r3
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801834c:	4619      	mov	r1, r3
 801834e:	4842      	ldr	r0, [pc, #264]	@ (8018458 <xPhyCheckLinkStatus+0x158>)
 8018350:	f00a fa00 	bl	8022754 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8018354:	2301      	movs	r3, #1
 8018356:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018358:	69bb      	ldr	r3, [r7, #24]
 801835a:	3301      	adds	r3, #1
 801835c:	61bb      	str	r3, [r7, #24]
 801835e:	69fb      	ldr	r3, [r7, #28]
 8018360:	005b      	lsls	r3, r3, #1
 8018362:	61fb      	str	r3, [r7, #28]
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018368:	69ba      	ldr	r2, [r7, #24]
 801836a:	429a      	cmp	r2, r3
 801836c:	dbe0      	blt.n	8018330 <xPhyCheckLinkStatus+0x30>
 801836e:	e06e      	b.n	801844e <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8018370:	687b      	ldr	r3, [r7, #4]
 8018372:	f103 021c 	add.w	r2, r3, #28
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	3324      	adds	r3, #36	@ 0x24
 801837a:	4619      	mov	r1, r3
 801837c:	4610      	mov	r0, r2
 801837e:	f7ed f85b 	bl	8005438 <xTaskCheckForTimeOut>
 8018382:	4603      	mov	r3, r0
 8018384:	2b00      	cmp	r3, #0
 8018386:	d062      	beq.n	801844e <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8018388:	2300      	movs	r3, #0
 801838a:	61bb      	str	r3, [r7, #24]
 801838c:	e045      	b.n	801841a <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801838e:	687a      	ldr	r2, [r7, #4]
 8018390:	69bb      	ldr	r3, [r7, #24]
 8018392:	4413      	add	r3, r2
 8018394:	3318      	adds	r3, #24
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	681b      	ldr	r3, [r3, #0]
 801839e:	f107 020c 	add.w	r2, r7, #12
 80183a2:	2101      	movs	r1, #1
 80183a4:	6938      	ldr	r0, [r7, #16]
 80183a6:	4798      	blx	r3
 80183a8:	4603      	mov	r3, r0
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d12f      	bne.n	801840e <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 80183ae:	687b      	ldr	r3, [r7, #4]
 80183b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80183b2:	69fb      	ldr	r3, [r7, #28]
 80183b4:	4013      	ands	r3, r2
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	bf14      	ite	ne
 80183ba:	2301      	movne	r3, #1
 80183bc:	2300      	moveq	r3, #0
 80183be:	b2da      	uxtb	r2, r3
 80183c0:	68fb      	ldr	r3, [r7, #12]
 80183c2:	f003 0304 	and.w	r3, r3, #4
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	bf14      	ite	ne
 80183ca:	2301      	movne	r3, #1
 80183cc:	2300      	moveq	r3, #0
 80183ce:	b2db      	uxtb	r3, r3
 80183d0:	4053      	eors	r3, r2
 80183d2:	b2db      	uxtb	r3, r3
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d01a      	beq.n	801840e <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 80183d8:	68fb      	ldr	r3, [r7, #12]
 80183da:	f003 0304 	and.w	r3, r3, #4
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d006      	beq.n	80183f0 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80183e6:	69fb      	ldr	r3, [r7, #28]
 80183e8:	431a      	orrs	r2, r3
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80183ee:	e006      	b.n	80183fe <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80183f4:	69fb      	ldr	r3, [r7, #28]
 80183f6:	43db      	mvns	r3, r3
 80183f8:	401a      	ands	r2, r3
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018402:	4619      	mov	r1, r3
 8018404:	4814      	ldr	r0, [pc, #80]	@ (8018458 <xPhyCheckLinkStatus+0x158>)
 8018406:	f00a f9a5 	bl	8022754 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 801840a:	2301      	movs	r3, #1
 801840c:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801840e:	69bb      	ldr	r3, [r7, #24]
 8018410:	3301      	adds	r3, #1
 8018412:	61bb      	str	r3, [r7, #24]
 8018414:	69fb      	ldr	r3, [r7, #28]
 8018416:	005b      	lsls	r3, r3, #1
 8018418:	61fb      	str	r3, [r7, #28]
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801841e:	69ba      	ldr	r2, [r7, #24]
 8018420:	429a      	cmp	r2, r3
 8018422:	dbb4      	blt.n	801838e <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	331c      	adds	r3, #28
 8018428:	4618      	mov	r0, r3
 801842a:	f7ec ffcd 	bl	80053c8 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 801842e:	687b      	ldr	r3, [r7, #4]
 8018430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018432:	69fb      	ldr	r3, [r7, #28]
 8018434:	085b      	lsrs	r3, r3, #1
 8018436:	4013      	ands	r3, r2
 8018438:	2b00      	cmp	r3, #0
 801843a:	d004      	beq.n	8018446 <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8018442:	625a      	str	r2, [r3, #36]	@ 0x24
 8018444:	e003      	b.n	801844e <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801844c:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 801844e:	697b      	ldr	r3, [r7, #20]
}
 8018450:	4618      	mov	r0, r3
 8018452:	3720      	adds	r7, #32
 8018454:	46bd      	mov	sp, r7
 8018456:	bd80      	pop	{r7, pc}
 8018458:	08027c0c 	.word	0x08027c0c

0801845c <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 801845c:	b480      	push	{r7}
 801845e:	b085      	sub	sp, #20
 8018460:	af00      	add	r7, sp, #0
 8018462:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8018464:	2300      	movs	r3, #0
 8018466:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 8018468:	2300      	movs	r3, #0
 801846a:	60bb      	str	r3, [r7, #8]
 801846c:	e013      	b.n	8018496 <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 801846e:	2201      	movs	r2, #1
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	fa02 f303 	lsl.w	r3, r2, r3
 8018476:	461a      	mov	r2, r3
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	4013      	ands	r3, r2
 801847c:	2b00      	cmp	r3, #0
 801847e:	d007      	beq.n	8018490 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8018480:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8018484:	68bb      	ldr	r3, [r7, #8]
 8018486:	fa22 f303 	lsr.w	r3, r2, r3
 801848a:	68fa      	ldr	r2, [r7, #12]
 801848c:	4313      	orrs	r3, r2
 801848e:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8018490:	68bb      	ldr	r3, [r7, #8]
 8018492:	3301      	adds	r3, #1
 8018494:	60bb      	str	r3, [r7, #8]
 8018496:	68bb      	ldr	r3, [r7, #8]
 8018498:	2b1f      	cmp	r3, #31
 801849a:	dde8      	ble.n	801846e <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 801849c:	68fb      	ldr	r3, [r7, #12]
}
 801849e:	4618      	mov	r0, r3
 80184a0:	3714      	adds	r7, #20
 80184a2:	46bd      	mov	sp, r7
 80184a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184a8:	4770      	bx	lr
	...

080184ac <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 80184ac:	b590      	push	{r4, r7, lr}
 80184ae:	b087      	sub	sp, #28
 80184b0:	af00      	add	r7, sp, #0
 80184b2:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 80184b4:	f04f 33ff 	mov.w	r3, #4294967295
 80184b8:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 80184ba:	2300      	movs	r3, #0
 80184bc:	613b      	str	r3, [r7, #16]
 80184be:	e024      	b.n	801850a <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 80184c0:	693b      	ldr	r3, [r7, #16]
 80184c2:	687a      	ldr	r2, [r7, #4]
 80184c4:	4413      	add	r3, r2
 80184c6:	781b      	ldrb	r3, [r3, #0]
 80184c8:	461a      	mov	r2, r3
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	4053      	eors	r3, r2
 80184ce:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 80184d0:	2300      	movs	r3, #0
 80184d2:	617b      	str	r3, [r7, #20]
 80184d4:	e013      	b.n	80184fe <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	f003 0301 	and.w	r3, r3, #1
 80184dc:	2b00      	cmp	r3, #0
 80184de:	d008      	beq.n	80184f2 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 80184e0:	68fb      	ldr	r3, [r7, #12]
 80184e2:	085c      	lsrs	r4, r3, #1
 80184e4:	480e      	ldr	r0, [pc, #56]	@ (8018520 <prvComputeCRC32_MAC+0x74>)
 80184e6:	f7ff ffb9 	bl	801845c <prvRevBits32>
 80184ea:	4603      	mov	r3, r0
 80184ec:	4063      	eors	r3, r4
 80184ee:	60fb      	str	r3, [r7, #12]
 80184f0:	e002      	b.n	80184f8 <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	085b      	lsrs	r3, r3, #1
 80184f6:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 80184f8:	697b      	ldr	r3, [r7, #20]
 80184fa:	3301      	adds	r3, #1
 80184fc:	617b      	str	r3, [r7, #20]
 80184fe:	697b      	ldr	r3, [r7, #20]
 8018500:	2b07      	cmp	r3, #7
 8018502:	dde8      	ble.n	80184d6 <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8018504:	693b      	ldr	r3, [r7, #16]
 8018506:	3301      	adds	r3, #1
 8018508:	613b      	str	r3, [r7, #16]
 801850a:	693b      	ldr	r3, [r7, #16]
 801850c:	2b05      	cmp	r3, #5
 801850e:	ddd7      	ble.n	80184c0 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	43db      	mvns	r3, r3
 8018514:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8018516:	68fb      	ldr	r3, [r7, #12]
}
 8018518:	4618      	mov	r0, r3
 801851a:	371c      	adds	r7, #28
 801851c:	46bd      	mov	sp, r7
 801851e:	bd90      	pop	{r4, r7, pc}
 8018520:	04c11db7 	.word	0x04c11db7

08018524 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b084      	sub	sp, #16
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 801852c:	6878      	ldr	r0, [r7, #4]
 801852e:	f7ff ffbd 	bl	80184ac <prvComputeCRC32_MAC>
 8018532:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8018534:	68f8      	ldr	r0, [r7, #12]
 8018536:	f7ff ff91 	bl	801845c <prvRevBits32>
 801853a:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 801853c:	68bb      	ldr	r3, [r7, #8]
 801853e:	0e9b      	lsrs	r3, r3, #26
}
 8018540:	4618      	mov	r0, r3
 8018542:	3710      	adds	r7, #16
 8018544:	46bd      	mov	sp, r7
 8018546:	bd80      	pop	{r7, pc}

08018548 <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8018548:	b580      	push	{r7, lr}
 801854a:	b084      	sub	sp, #16
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
 8018550:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8018552:	6838      	ldr	r0, [r7, #0]
 8018554:	f7ff ffe6 	bl	8018524 <prvComputeEthernet_MACHash>
 8018558:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 801855a:	68fb      	ldr	r3, [r7, #12]
 801855c:	2b1f      	cmp	r3, #31
 801855e:	d80c      	bhi.n	801857a <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	691a      	ldr	r2, [r3, #16]
 8018566:	2101      	movs	r1, #1
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	fa01 f303 	lsl.w	r3, r1, r3
 801856e:	4619      	mov	r1, r3
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	430a      	orrs	r2, r1
 8018576:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8018578:	e00d      	b.n	8018596 <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 801857a:	687b      	ldr	r3, [r7, #4]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	695a      	ldr	r2, [r3, #20]
 8018580:	68fb      	ldr	r3, [r7, #12]
 8018582:	f003 031f 	and.w	r3, r3, #31
 8018586:	2101      	movs	r1, #1
 8018588:	fa01 f303 	lsl.w	r3, r1, r3
 801858c:	4619      	mov	r1, r3
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	430a      	orrs	r2, r1
 8018594:	615a      	str	r2, [r3, #20]
}
 8018596:	bf00      	nop
 8018598:	3710      	adds	r7, #16
 801859a:	46bd      	mov	sp, r7
 801859c:	bd80      	pop	{r7, pc}

0801859e <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 801859e:	b580      	push	{r7, lr}
 80185a0:	b086      	sub	sp, #24
 80185a2:	af00      	add	r7, sp, #0
 80185a4:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 80185a6:	230a      	movs	r3, #10
 80185a8:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 80185aa:	2300      	movs	r3, #0
 80185ac:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 80185ae:	6939      	ldr	r1, [r7, #16]
 80185b0:	6878      	ldr	r0, [r7, #4]
 80185b2:	f7ff f9bf 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 80185b6:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 80185b8:	68fb      	ldr	r3, [r7, #12]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d002      	beq.n	80185c4 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185c2:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 80185c4:	697b      	ldr	r3, [r7, #20]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3718      	adds	r7, #24
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}
	...

080185d0 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 80185d0:	b580      	push	{r7, lr}
 80185d2:	b08e      	sub	sp, #56	@ 0x38
 80185d4:	af02      	add	r7, sp, #8
 80185d6:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80185d8:	2300      	movs	r3, #0
 80185da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 80185dc:	2300      	movs	r3, #0
 80185de:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 80185e0:	4b8d      	ldr	r3, [pc, #564]	@ (8018818 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80185e2:	781b      	ldrb	r3, [r3, #0]
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	f040 8104 	bne.w	80187f2 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 80185ea:	4a8c      	ldr	r2, [pc, #560]	@ (801881c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 80185f0:	6878      	ldr	r0, [r7, #4]
 80185f2:	f7f5 fa71 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 80185f6:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 80185f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185fa:	2b00      	cmp	r3, #0
 80185fc:	d104      	bne.n	8018608 <xSTM32H_NetworkInterfaceInitialise+0x38>
 80185fe:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8018602:	4887      	ldr	r0, [pc, #540]	@ (8018820 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8018604:	f7e9 f9c8 	bl	8001998 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8018608:	4b86      	ldr	r3, [pc, #536]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801860a:	4a87      	ldr	r2, [pc, #540]	@ (8018828 <xSTM32H_NetworkInterfaceInitialise+0x258>)
 801860c:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 801860e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018610:	33e8      	adds	r3, #232	@ 0xe8
 8018612:	4a84      	ldr	r2, [pc, #528]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018614:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8018616:	4b83      	ldr	r3, [pc, #524]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018618:	2201      	movs	r2, #1
 801861a:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 801861c:	4b81      	ldr	r3, [pc, #516]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801861e:	4a83      	ldr	r2, [pc, #524]	@ (801882c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018620:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8018622:	4b80      	ldr	r3, [pc, #512]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018624:	4a82      	ldr	r2, [pc, #520]	@ (8018830 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018626:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8018628:	4b7e      	ldr	r3, [pc, #504]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801862a:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 801862e:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018630:	2260      	movs	r2, #96	@ 0x60
 8018632:	2100      	movs	r1, #0
 8018634:	487d      	ldr	r0, [pc, #500]	@ (801882c <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8018636:	f00a fbb6 	bl	8022da6 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 801863a:	2260      	movs	r2, #96	@ 0x60
 801863c:	2100      	movs	r1, #0
 801863e:	487c      	ldr	r0, [pc, #496]	@ (8018830 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8018640:	f00a fbb1 	bl	8022da6 <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8018644:	4877      	ldr	r0, [pc, #476]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018646:	f000 fc71 	bl	8018f2c <HAL_ETH_Init>
 801864a:	4603      	mov	r3, r0
 801864c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8018650:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8018654:	2b00      	cmp	r3, #0
 8018656:	f040 80c9 	bne.w	80187ec <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801865a:	4b72      	ldr	r3, [pc, #456]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	6899      	ldr	r1, [r3, #8]
 8018660:	4b70      	ldr	r3, [pc, #448]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018662:	681a      	ldr	r2, [r3, #0]
 8018664:	f240 4316 	movw	r3, #1046	@ 0x416
 8018668:	430b      	orrs	r3, r1
 801866a:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 801866c:	2234      	movs	r2, #52	@ 0x34
 801866e:	2100      	movs	r1, #0
 8018670:	4870      	ldr	r0, [pc, #448]	@ (8018834 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018672:	f00a fb98 	bl	8022da6 <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 8018676:	4b6f      	ldr	r3, [pc, #444]	@ (8018834 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018678:	2220      	movs	r2, #32
 801867a:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 801867c:	4b6d      	ldr	r3, [pc, #436]	@ (8018834 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	f043 0301 	orr.w	r3, r3, #1
 8018684:	4a6b      	ldr	r2, [pc, #428]	@ (8018834 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018686:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8018688:	4b6a      	ldr	r3, [pc, #424]	@ (8018834 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801868a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 801868e:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8018690:	4b68      	ldr	r3, [pc, #416]	@ (8018834 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8018692:	2200      	movs	r2, #0
 8018694:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 8018696:	2104      	movs	r1, #4
 8018698:	2004      	movs	r0, #4
 801869a:	f7eb fa41 	bl	8003b20 <xQueueCreateCountingSemaphore>
 801869e:	4603      	mov	r3, r0
 80186a0:	4a65      	ldr	r2, [pc, #404]	@ (8018838 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80186a2:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 80186a4:	4b64      	ldr	r3, [pc, #400]	@ (8018838 <xSTM32H_NetworkInterfaceInitialise+0x268>)
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d104      	bne.n	80186b6 <xSTM32H_NetworkInterfaceInitialise+0xe6>
 80186ac:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80186b0:	485b      	ldr	r0, [pc, #364]	@ (8018820 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80186b2:	f7e9 f971 	bl	8001998 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 80186b6:	2001      	movs	r0, #1
 80186b8:	f7eb fa19 	bl	8003aee <xQueueCreateMutex>
 80186bc:	4603      	mov	r3, r0
 80186be:	4a5f      	ldr	r2, [pc, #380]	@ (801883c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80186c0:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 80186c2:	4b5e      	ldr	r3, [pc, #376]	@ (801883c <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	2b00      	cmp	r3, #0
 80186c8:	d104      	bne.n	80186d4 <xSTM32H_NetworkInterfaceInitialise+0x104>
 80186ca:	f240 117f 	movw	r1, #383	@ 0x17f
 80186ce:	4854      	ldr	r0, [pc, #336]	@ (8018820 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80186d0:	f7e9 f962 	bl	8001998 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80186d4:	2300      	movs	r3, #0
 80186d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80186d8:	e015      	b.n	8018706 <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 80186da:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80186de:	f7ff ff5e 	bl	801859e <pucGetRXBuffer>
 80186e2:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 80186e4:	69fb      	ldr	r3, [r7, #28]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d104      	bne.n	80186f4 <xSTM32H_NetworkInterfaceInitialise+0x124>
 80186ea:	f240 1189 	movw	r1, #393	@ 0x189
 80186ee:	484c      	ldr	r0, [pc, #304]	@ (8018820 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80186f0:	f7e9 f952 	bl	8001998 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80186f4:	2300      	movs	r3, #0
 80186f6:	69fa      	ldr	r2, [r7, #28]
 80186f8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80186fa:	484a      	ldr	r0, [pc, #296]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80186fc:	f000 fd02 	bl	8019104 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8018700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018702:	3301      	adds	r3, #1
 8018704:	627b      	str	r3, [r7, #36]	@ 0x24
 8018706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018708:	2b03      	cmp	r3, #3
 801870a:	d9e6      	bls.n	80186da <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 801870c:	494c      	ldr	r1, [pc, #304]	@ (8018840 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 801870e:	4845      	ldr	r0, [pc, #276]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018710:	f7ff ff1a 	bl	8018548 <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8018714:	494b      	ldr	r1, [pc, #300]	@ (8018844 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 8018716:	4843      	ldr	r0, [pc, #268]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018718:	f7ff ff16 	bl	8018548 <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 801871c:	e03a      	b.n	8018794 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 801871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018720:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8018724:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018728:	b2db      	uxtb	r3, r3
 801872a:	2b00      	cmp	r3, #0
 801872c:	d002      	beq.n	8018734 <xSTM32H_NetworkInterfaceInitialise+0x164>
 801872e:	2b01      	cmp	r3, #1
 8018730:	d00d      	beq.n	801874e <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8018732:	e028      	b.n	8018786 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8018734:	4b3b      	ldr	r3, [pc, #236]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018736:	685a      	ldr	r2, [r3, #4]
 8018738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801873a:	33e8      	adds	r3, #232	@ 0xe8
 801873c:	429a      	cmp	r2, r3
 801873e:	d021      	beq.n	8018784 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8018740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018742:	33e8      	adds	r3, #232	@ 0xe8
 8018744:	4619      	mov	r1, r3
 8018746:	4837      	ldr	r0, [pc, #220]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8018748:	f7ff fefe 	bl	8018548 <prvSetMAC_HashFilter>
                                break;
 801874c:	e01a      	b.n	8018784 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 801874e:	4a3e      	ldr	r2, [pc, #248]	@ (8018848 <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8018750:	f107 0314 	add.w	r3, r7, #20
 8018754:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018758:	6018      	str	r0, [r3, #0]
 801875a:	3304      	adds	r3, #4
 801875c:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 801875e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018760:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8018764:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 8018766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018768:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 801876c:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 801876e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018770:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8018774:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 8018776:	f107 0314 	add.w	r3, r7, #20
 801877a:	4619      	mov	r1, r3
 801877c:	4829      	ldr	r0, [pc, #164]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801877e:	f7ff fee3 	bl	8018548 <prvSetMAC_HashFilter>
                               break;
 8018782:	e000      	b.n	8018786 <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8018784:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 8018786:	4b25      	ldr	r3, [pc, #148]	@ (801881c <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801878c:	4618      	mov	r0, r3
 801878e:	f7f5 f9c5 	bl	800db1c <FreeRTOS_NextEndPoint>
 8018792:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8018794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018796:	2b00      	cmp	r3, #0
 8018798:	d1c1      	bne.n	801871e <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 801879a:	4a2c      	ldr	r2, [pc, #176]	@ (801884c <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 801879c:	f107 030c 	add.w	r3, r7, #12
 80187a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80187a4:	6018      	str	r0, [r3, #0]
 80187a6:	3304      	adds	r3, #4
 80187a8:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 80187aa:	f107 030c 	add.w	r3, r7, #12
 80187ae:	4619      	mov	r1, r3
 80187b0:	481c      	ldr	r0, [pc, #112]	@ (8018824 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80187b2:	f7ff fec9 	bl	8018548 <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 80187b6:	f000 f911 	bl	80189dc <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 80187ba:	2001      	movs	r0, #1
 80187bc:	f000 f926 	bl	8018a0c <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 80187c0:	4b23      	ldr	r3, [pc, #140]	@ (8018850 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 80187c2:	9301      	str	r3, [sp, #4]
 80187c4:	2305      	movs	r3, #5
 80187c6:	9300      	str	r3, [sp, #0]
 80187c8:	2300      	movs	r3, #0
 80187ca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80187ce:	4921      	ldr	r1, [pc, #132]	@ (8018854 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 80187d0:	4821      	ldr	r0, [pc, #132]	@ (8018858 <xSTM32H_NetworkInterfaceInitialise+0x288>)
 80187d2:	f7eb fea7 	bl	8004524 <xTaskCreate>
 80187d6:	4603      	mov	r3, r0
 80187d8:	2b01      	cmp	r3, #1
 80187da:	d103      	bne.n	80187e4 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 80187dc:	4b0e      	ldr	r3, [pc, #56]	@ (8018818 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80187de:	2201      	movs	r2, #1
 80187e0:	701a      	strb	r2, [r3, #0]
 80187e2:	e006      	b.n	80187f2 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80187e4:	4b0c      	ldr	r3, [pc, #48]	@ (8018818 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80187e6:	2202      	movs	r2, #2
 80187e8:	701a      	strb	r2, [r3, #0]
 80187ea:	e002      	b.n	80187f2 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 80187ec:	4b0a      	ldr	r3, [pc, #40]	@ (8018818 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80187ee:	2202      	movs	r2, #2
 80187f0:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 80187f2:	4b09      	ldr	r3, [pc, #36]	@ (8018818 <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80187f4:	781b      	ldrb	r3, [r3, #0]
 80187f6:	2b01      	cmp	r3, #1
 80187f8:	d108      	bne.n	801880c <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 80187fa:	4b18      	ldr	r3, [pc, #96]	@ (801885c <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 80187fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d004      	beq.n	801880c <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8018802:	2301      	movs	r3, #1
 8018804:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8018806:	4816      	ldr	r0, [pc, #88]	@ (8018860 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 8018808:	f009 ffa4 	bl	8022754 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 801880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801880e:	4618      	mov	r0, r3
 8018810:	3730      	adds	r7, #48	@ 0x30
 8018812:	46bd      	mov	sp, r7
 8018814:	bd80      	pop	{r7, pc}
 8018816:	bf00      	nop
 8018818:	20002470 	.word	0x20002470
 801881c:	20002524 	.word	0x20002524
 8018820:	08027c34 	.word	0x08027c34
 8018824:	2000247c 	.word	0x2000247c
 8018828:	40028000 	.word	0x40028000
 801882c:	24040060 	.word	0x24040060
 8018830:	24040000 	.word	0x24040000
 8018834:	200024f0 	.word	0x200024f0
 8018838:	20002474 	.word	0x20002474
 801883c:	20002478 	.word	0x20002478
 8018840:	08027ecc 	.word	0x08027ecc
 8018844:	08027ed4 	.word	0x08027ed4
 8018848:	08027cac 	.word	0x08027cac
 801884c:	08027cb4 	.word	0x08027cb4
 8018850:	20002528 	.word	0x20002528
 8018854:	08027c88 	.word	0x08027c88
 8018858:	08018dc1 	.word	0x08018dc1
 801885c:	2000252c 	.word	0x2000252c
 8018860:	08027c94 	.word	0x08027c94

08018864 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8018864:	b480      	push	{r7}
 8018866:	b085      	sub	sp, #20
 8018868:	af00      	add	r7, sp, #0
 801886a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 801886c:	4b07      	ldr	r3, [pc, #28]	@ (801888c <xSTM32H_GetPhyLinkStatus+0x28>)
 801886e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018870:	2b00      	cmp	r3, #0
 8018872:	d002      	beq.n	801887a <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8018874:	2301      	movs	r3, #1
 8018876:	60fb      	str	r3, [r7, #12]
 8018878:	e001      	b.n	801887e <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 801887a:	2300      	movs	r3, #0
 801887c:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 801887e:	68fb      	ldr	r3, [r7, #12]
}
 8018880:	4618      	mov	r0, r3
 8018882:	3714      	adds	r7, #20
 8018884:	46bd      	mov	sp, r7
 8018886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801888a:	4770      	bx	lr
 801888c:	2000252c 	.word	0x2000252c

08018890 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8018890:	b580      	push	{r7, lr}
 8018892:	b082      	sub	sp, #8
 8018894:	af00      	add	r7, sp, #0
 8018896:	6078      	str	r0, [r7, #4]
 8018898:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	4a10      	ldr	r2, [pc, #64]	@ (80188e0 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 801889e:	2111      	movs	r1, #17
 80188a0:	4810      	ldr	r0, [pc, #64]	@ (80188e4 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80188a2:	f00a ff83 	bl	80237ac <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 80188a6:	2228      	movs	r2, #40	@ 0x28
 80188a8:	2100      	movs	r1, #0
 80188aa:	6838      	ldr	r0, [r7, #0]
 80188ac:	f00a fa7b 	bl	8022da6 <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 80188b0:	683b      	ldr	r3, [r7, #0]
 80188b2:	4a0c      	ldr	r2, [pc, #48]	@ (80188e4 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 80188b4:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 80188b6:	687a      	ldr	r2, [r7, #4]
 80188b8:	683b      	ldr	r3, [r7, #0]
 80188ba:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	4a0a      	ldr	r2, [pc, #40]	@ (80188e8 <pxSTM32H_FillInterfaceDescriptor+0x58>)
 80188c0:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	4a09      	ldr	r2, [pc, #36]	@ (80188ec <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 80188c6:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	4a09      	ldr	r2, [pc, #36]	@ (80188f0 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 80188cc:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 80188ce:	6838      	ldr	r0, [r7, #0]
 80188d0:	f7f5 f82e 	bl	800d930 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 80188d4:	683b      	ldr	r3, [r7, #0]
}
 80188d6:	4618      	mov	r0, r3
 80188d8:	3708      	adds	r7, #8
 80188da:	46bd      	mov	sp, r7
 80188dc:	bd80      	pop	{r7, pc}
 80188de:	bf00      	nop
 80188e0:	08027cbc 	.word	0x08027cbc
 80188e4:	2000256c 	.word	0x2000256c
 80188e8:	080185d1 	.word	0x080185d1
 80188ec:	080188f5 	.word	0x080188f5
 80188f0:	08018865 	.word	0x08018865

080188f4 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b08a      	sub	sp, #40	@ 0x28
 80188f8:	af00      	add	r7, sp, #0
 80188fa:	60f8      	str	r0, [r7, #12]
 80188fc:	60b9      	str	r1, [r7, #8]
 80188fe:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8018900:	2300      	movs	r3, #0
 8018902:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 8018904:	2364      	movs	r3, #100	@ 0x64
 8018906:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 8018908:	68f8      	ldr	r0, [r7, #12]
 801890a:	f7ff ffab 	bl	8018864 <xSTM32H_GetPhyLinkStatus>
 801890e:	4603      	mov	r3, r0
 8018910:	2b01      	cmp	r3, #1
 8018912:	d14c      	bne.n	80189ae <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 8018914:	68bb      	ldr	r3, [r7, #8]
 8018916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018918:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	2b00      	cmp	r3, #0
 801891e:	d104      	bne.n	801892a <xSTM32H_NetworkInterfaceOutput+0x36>
 8018920:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8018924:	4827      	ldr	r0, [pc, #156]	@ (80189c4 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 8018926:	f7e9 f837 	bl	8001998 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 801892a:	69fb      	ldr	r3, [r7, #28]
 801892c:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 8018932:	617b      	str	r3, [r7, #20]
 8018934:	2300      	movs	r3, #0
 8018936:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 8018938:	68bb      	ldr	r3, [r7, #8]
 801893a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801893c:	4a22      	ldr	r2, [pc, #136]	@ (80189c8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 801893e:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8018940:	4a21      	ldr	r2, [pc, #132]	@ (80189c8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018942:	f107 0310 	add.w	r3, r7, #16
 8018946:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 8018948:	4b20      	ldr	r3, [pc, #128]	@ (80189cc <xSTM32H_NetworkInterfaceOutput+0xd8>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	6a39      	ldr	r1, [r7, #32]
 801894e:	4618      	mov	r0, r3
 8018950:	f7eb fac8 	bl	8003ee4 <xQueueSemaphoreTake>
 8018954:	4603      	mov	r3, r0
 8018956:	2b01      	cmp	r3, #1
 8018958:	d003      	beq.n	8018962 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 801895a:	481d      	ldr	r0, [pc, #116]	@ (80189d0 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 801895c:	f009 fefa 	bl	8022754 <lUDPLoggingPrintf>
 8018960:	e025      	b.n	80189ae <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8018962:	f3bf 8f4f 	dsb	sy
}
 8018966:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 8018968:	4b1a      	ldr	r3, [pc, #104]	@ (80189d4 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	6a39      	ldr	r1, [r7, #32]
 801896e:	4618      	mov	r0, r3
 8018970:	f7eb fab8 	bl	8003ee4 <xQueueSemaphoreTake>
 8018974:	4603      	mov	r3, r0
 8018976:	2b00      	cmp	r3, #0
 8018978:	d019      	beq.n	80189ae <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 801897a:	2300      	movs	r3, #0
 801897c:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 801897e:	4912      	ldr	r1, [pc, #72]	@ (80189c8 <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018980:	4815      	ldr	r0, [pc, #84]	@ (80189d8 <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8018982:	f000 fcef 	bl	8019364 <HAL_ETH_Transmit_IT>
 8018986:	4603      	mov	r3, r0
 8018988:	2b00      	cmp	r3, #0
 801898a:	d102      	bne.n	8018992 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 801898c:	2301      	movs	r3, #1
 801898e:	627b      	str	r3, [r7, #36]	@ 0x24
 8018990:	e006      	b.n	80189a0 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8018992:	4b0e      	ldr	r3, [pc, #56]	@ (80189cc <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8018994:	6818      	ldr	r0, [r3, #0]
 8018996:	2300      	movs	r3, #0
 8018998:	2200      	movs	r2, #0
 801899a:	2100      	movs	r1, #0
 801899c:	f7eb f8ea 	bl	8003b74 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 80189a0:	4b0c      	ldr	r3, [pc, #48]	@ (80189d4 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 80189a2:	6818      	ldr	r0, [r3, #0]
 80189a4:	2300      	movs	r3, #0
 80189a6:	2200      	movs	r2, #0
 80189a8:	2100      	movs	r1, #0
 80189aa:	f7eb f8e3 	bl	8003b74 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d002      	beq.n	80189ba <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 80189b4:	68b8      	ldr	r0, [r7, #8]
 80189b6:	f7ff f825 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 80189ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80189bc:	4618      	mov	r0, r3
 80189be:	3728      	adds	r7, #40	@ 0x28
 80189c0:	46bd      	mov	sp, r7
 80189c2:	bd80      	pop	{r7, pc}
 80189c4:	08027c34 	.word	0x08027c34
 80189c8:	200024f0 	.word	0x200024f0
 80189cc:	20002474 	.word	0x20002474
 80189d0:	08027cc4 	.word	0x08027cc4
 80189d4:	20002478 	.word	0x20002478
 80189d8:	2000247c 	.word	0x2000247c

080189dc <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 80189dc:	b580      	push	{r7, lr}
 80189de:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 80189e0:	4a06      	ldr	r2, [pc, #24]	@ (80189fc <prvMACBProbePhy+0x20>)
 80189e2:	4907      	ldr	r1, [pc, #28]	@ (8018a00 <prvMACBProbePhy+0x24>)
 80189e4:	4807      	ldr	r0, [pc, #28]	@ (8018a04 <prvMACBProbePhy+0x28>)
 80189e6:	f7ff f8c5 	bl	8017b74 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 80189ea:	4806      	ldr	r0, [pc, #24]	@ (8018a04 <prvMACBProbePhy+0x28>)
 80189ec:	f7ff f8d8 	bl	8017ba0 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 80189f0:	4905      	ldr	r1, [pc, #20]	@ (8018a08 <prvMACBProbePhy+0x2c>)
 80189f2:	4804      	ldr	r0, [pc, #16]	@ (8018a04 <prvMACBProbePhy+0x28>)
 80189f4:	f7ff f9d2 	bl	8017d9c <xPhyConfigure>
}
 80189f8:	bf00      	nop
 80189fa:	bd80      	pop	{r7, pc}
 80189fc:	08018bfd 	.word	0x08018bfd
 8018a00:	08018bc5 	.word	0x08018bc5
 8018a04:	2000252c 	.word	0x2000252c
 8018a08:	08027fcc 	.word	0x08027fcc

08018a0c <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 8018a0c:	b580      	push	{r7, lr}
 8018a0e:	b09e      	sub	sp, #120	@ 0x78
 8018a10:	af00      	add	r7, sp, #0
 8018a12:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 8018a14:	2300      	movs	r3, #0
 8018a16:	677b      	str	r3, [r7, #116]	@ 0x74
 8018a18:	2300      	movs	r3, #0
 8018a1a:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 8018a1c:	4b25      	ldr	r3, [pc, #148]	@ (8018ab4 <prvEthernetUpdateConfig+0xa8>)
 8018a1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a20:	687a      	ldr	r2, [r7, #4]
 8018a22:	4619      	mov	r1, r3
 8018a24:	4824      	ldr	r0, [pc, #144]	@ (8018ab8 <prvEthernetUpdateConfig+0xac>)
 8018a26:	f009 fe95 	bl	8022754 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d103      	bne.n	8018a38 <prvEthernetUpdateConfig+0x2c>
 8018a30:	4b20      	ldr	r3, [pc, #128]	@ (8018ab4 <prvEthernetUpdateConfig+0xa8>)
 8018a32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d035      	beq.n	8018aa4 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 8018a38:	4b1e      	ldr	r3, [pc, #120]	@ (8018ab4 <prvEthernetUpdateConfig+0xa8>)
 8018a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a3c:	2201      	movs	r2, #1
 8018a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8018a42:	3b01      	subs	r3, #1
 8018a44:	4619      	mov	r1, r3
 8018a46:	481b      	ldr	r0, [pc, #108]	@ (8018ab4 <prvEthernetUpdateConfig+0xa8>)
 8018a48:	f7ff faae 	bl	8017fa8 <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8018a4c:	4b19      	ldr	r3, [pc, #100]	@ (8018ab4 <prvEthernetUpdateConfig+0xa8>)
 8018a4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8018a52:	2b02      	cmp	r3, #2
 8018a54:	d103      	bne.n	8018a5e <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 8018a56:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018a5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8018a5c:	e001      	b.n	8018a62 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8018a5e:	2300      	movs	r3, #0
 8018a60:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8018a62:	4b14      	ldr	r3, [pc, #80]	@ (8018ab4 <prvEthernetUpdateConfig+0xa8>)
 8018a64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8018a68:	2b01      	cmp	r3, #1
 8018a6a:	d102      	bne.n	8018a72 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8018a6c:	2300      	movs	r3, #0
 8018a6e:	677b      	str	r3, [r7, #116]	@ 0x74
 8018a70:	e002      	b.n	8018a78 <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8018a72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018a76:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018a78:	f107 030c 	add.w	r3, r7, #12
 8018a7c:	4619      	mov	r1, r3
 8018a7e:	480f      	ldr	r0, [pc, #60]	@ (8018abc <prvEthernetUpdateConfig+0xb0>)
 8018a80:	f000 ffcc 	bl	8019a1c <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8018a84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8018a86:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 8018a88:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8018a8a:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018a8c:	f107 030c 	add.w	r3, r7, #12
 8018a90:	4619      	mov	r1, r3
 8018a92:	480a      	ldr	r0, [pc, #40]	@ (8018abc <prvEthernetUpdateConfig+0xb0>)
 8018a94:	f001 f996 	bl	8019dc4 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 8018a98:	2301      	movs	r3, #1
 8018a9a:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8018a9c:	4807      	ldr	r0, [pc, #28]	@ (8018abc <prvEthernetUpdateConfig+0xb0>)
 8018a9e:	f000 fb64 	bl	801916a <HAL_ETH_Start_IT>
 8018aa2:	e003      	b.n	8018aac <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018aa4:	4805      	ldr	r0, [pc, #20]	@ (8018abc <prvEthernetUpdateConfig+0xb0>)
 8018aa6:	f000 fbe5 	bl	8019274 <HAL_ETH_Stop_IT>
    }
}
 8018aaa:	bf00      	nop
 8018aac:	bf00      	nop
 8018aae:	3778      	adds	r7, #120	@ 0x78
 8018ab0:	46bd      	mov	sp, r7
 8018ab2:	bd80      	pop	{r7, pc}
 8018ab4:	2000252c 	.word	0x2000252c
 8018ab8:	08027cfc 	.word	0x08027cfc
 8018abc:	2000247c 	.word	0x2000247c

08018ac0 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b08c      	sub	sp, #48	@ 0x30
 8018ac4:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 8018ac6:	2300      	movs	r3, #0
 8018ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 8018aca:	2300      	movs	r3, #0
 8018acc:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8018ace:	f107 0308 	add.w	r3, r7, #8
 8018ad2:	4619      	mov	r1, r3
 8018ad4:	4838      	ldr	r0, [pc, #224]	@ (8018bb8 <prvNetworkInterfaceInput+0xf8>)
 8018ad6:	f000 fd19 	bl	801950c <HAL_ETH_GetRxData>
 8018ada:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8018adc:	69fb      	ldr	r3, [r7, #28]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d101      	bne.n	8018ae6 <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8018ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ae4:	e064      	b.n	8018bb0 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 8018ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018ae8:	3301      	adds	r3, #1
 8018aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8018aec:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8018af0:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8018af2:	68bb      	ldr	r3, [r7, #8]
 8018af4:	2b00      	cmp	r3, #0
 8018af6:	d004      	beq.n	8018b02 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 8018af8:	68bb      	ldr	r3, [r7, #8]
 8018afa:	4618      	mov	r0, r3
 8018afc:	f7f1 ff8d 	bl	800aa1a <pxPacketBuffer_to_NetworkBuffer>
 8018b00:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 8018b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d102      	bne.n	8018b0e <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 8018b08:	482c      	ldr	r0, [pc, #176]	@ (8018bbc <prvNetworkInterfaceInput+0xfc>)
 8018b0a:	f009 fe23 	bl	8022754 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 8018b0e:	2100      	movs	r1, #0
 8018b10:	69b8      	ldr	r0, [r7, #24]
 8018b12:	f7fe ff0f 	bl	8017934 <pxGetNetworkBufferWithDescriptor>
 8018b16:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 8018b18:	697b      	ldr	r3, [r7, #20]
 8018b1a:	2b00      	cmp	r3, #0
 8018b1c:	d102      	bne.n	8018b24 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 8018b1e:	2300      	movs	r3, #0
 8018b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8018b22:	e005      	b.n	8018b30 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 8018b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b26:	2b00      	cmp	r3, #0
 8018b28:	d002      	beq.n	8018b30 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 8018b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b2c:	69fa      	ldr	r2, [r7, #28]
 8018b2e:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 8018b30:	2300      	movs	r3, #0
 8018b32:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 8018b34:	697b      	ldr	r3, [r7, #20]
 8018b36:	2b00      	cmp	r3, #0
 8018b38:	d002      	beq.n	8018b40 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 8018b3a:	697b      	ldr	r3, [r7, #20]
 8018b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b3e:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8018b40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018b42:	481d      	ldr	r0, [pc, #116]	@ (8018bb8 <prvNetworkInterfaceInput+0xf8>)
 8018b44:	f000 fd2a 	bl	801959c <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 8018b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d0bd      	beq.n	8018aca <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8018b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b56:	4618      	mov	r0, r3
 8018b58:	f7f1 f8c6 	bl	8009ce8 <eConsiderFrameForProcessing>
 8018b5c:	4603      	mov	r3, r0
 8018b5e:	2b01      	cmp	r3, #1
 8018b60:	d002      	beq.n	8018b68 <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8018b62:	2301      	movs	r3, #1
 8018b64:	623b      	str	r3, [r7, #32]
 8018b66:	e01c      	b.n	8018ba2 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 8018b68:	2301      	movs	r3, #1
 8018b6a:	703b      	strb	r3, [r7, #0]
 8018b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b6e:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018b70:	4b13      	ldr	r3, [pc, #76]	@ (8018bc0 <prvNetworkInterfaceInput+0x100>)
 8018b72:	681a      	ldr	r2, [r3, #0]
 8018b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b76:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 8018b78:	4b11      	ldr	r3, [pc, #68]	@ (8018bc0 <prvNetworkInterfaceInput+0x100>)
 8018b7a:	681a      	ldr	r2, [r3, #0]
 8018b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018b80:	4619      	mov	r1, r3
 8018b82:	4610      	mov	r0, r2
 8018b84:	f7f5 fa78 	bl	800e078 <FreeRTOS_MatchingEndpoint>
 8018b88:	4602      	mov	r2, r0
 8018b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018b8c:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018b8e:	463b      	mov	r3, r7
 8018b90:	2100      	movs	r1, #0
 8018b92:	4618      	mov	r0, r3
 8018b94:	f7f1 f854 	bl	8009c40 <xSendEventStructToIPTask>
 8018b98:	4603      	mov	r3, r0
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d101      	bne.n	8018ba2 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018b9e:	2301      	movs	r3, #1
 8018ba0:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018ba2:	6a3b      	ldr	r3, [r7, #32]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d090      	beq.n	8018aca <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 8018ba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8018baa:	f7fe ff2b 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
    {
 8018bae:	e78c      	b.n	8018aca <prvNetworkInterfaceInput+0xa>
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3730      	adds	r7, #48	@ 0x30
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}
 8018bb8:	2000247c 	.word	0x2000247c
 8018bbc:	08027d30 	.word	0x08027d30
 8018bc0:	20002524 	.word	0x20002524

08018bc4 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b086      	sub	sp, #24
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	60f8      	str	r0, [r7, #12]
 8018bcc:	60b9      	str	r1, [r7, #8]
 8018bce:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018bd4:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	68ba      	ldr	r2, [r7, #8]
 8018bda:	68f9      	ldr	r1, [r7, #12]
 8018bdc:	4806      	ldr	r0, [pc, #24]	@ (8018bf8 <ETH_PHY_IO_ReadReg+0x34>)
 8018bde:	f000 fe75 	bl	80198cc <HAL_ETH_ReadPHYRegister>
 8018be2:	4603      	mov	r3, r0
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d101      	bne.n	8018bec <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 8018be8:	2300      	movs	r3, #0
 8018bea:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018bec:	697b      	ldr	r3, [r7, #20]
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3718      	adds	r7, #24
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bd80      	pop	{r7, pc}
 8018bf6:	bf00      	nop
 8018bf8:	2000247c 	.word	0x2000247c

08018bfc <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b086      	sub	sp, #24
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	60f8      	str	r0, [r7, #12]
 8018c04:	60b9      	str	r1, [r7, #8]
 8018c06:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018c08:	f04f 33ff 	mov.w	r3, #4294967295
 8018c0c:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	68ba      	ldr	r2, [r7, #8]
 8018c12:	68f9      	ldr	r1, [r7, #12]
 8018c14:	4806      	ldr	r0, [pc, #24]	@ (8018c30 <ETH_PHY_IO_WriteReg+0x34>)
 8018c16:	f000 fead 	bl	8019974 <HAL_ETH_WritePHYRegister>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d101      	bne.n	8018c24 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 8018c20:	2300      	movs	r3, #0
 8018c22:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018c24:	697b      	ldr	r3, [r7, #20]
}
 8018c26:	4618      	mov	r0, r3
 8018c28:	3718      	adds	r7, #24
 8018c2a:	46bd      	mov	sp, r7
 8018c2c:	bd80      	pop	{r7, pc}
 8018c2e:	bf00      	nop
 8018c30:	2000247c 	.word	0x2000247c

08018c34 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 8018c34:	b580      	push	{r7, lr}
 8018c36:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 8018c38:	4802      	ldr	r0, [pc, #8]	@ (8018c44 <ETH_IRQHandler+0x10>)
 8018c3a:	f000 fd27 	bl	801968c <HAL_ETH_IRQHandler>
}
 8018c3e:	bf00      	nop
 8018c40:	bd80      	pop	{r7, pc}
 8018c42:	bf00      	nop
 8018c44:	2000247c 	.word	0x2000247c

08018c48 <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8018c50:	2300      	movs	r3, #0
 8018c52:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8018c54:	4b10      	ldr	r3, [pc, #64]	@ (8018c98 <prvSetFlagsAndNotify+0x50>)
 8018c56:	681a      	ldr	r2, [r3, #0]
 8018c58:	687b      	ldr	r3, [r7, #4]
 8018c5a:	4313      	orrs	r3, r2
 8018c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8018c98 <prvSetFlagsAndNotify+0x50>)
 8018c5e:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8018c60:	4b0e      	ldr	r3, [pc, #56]	@ (8018c9c <prvSetFlagsAndNotify+0x54>)
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	2b00      	cmp	r3, #0
 8018c66:	d012      	beq.n	8018c8e <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8018c68:	4b0c      	ldr	r3, [pc, #48]	@ (8018c9c <prvSetFlagsAndNotify+0x54>)
 8018c6a:	681b      	ldr	r3, [r3, #0]
 8018c6c:	f107 020c 	add.w	r2, r7, #12
 8018c70:	2100      	movs	r1, #0
 8018c72:	4618      	mov	r0, r3
 8018c74:	f7ed fab4 	bl	80061e0 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d007      	beq.n	8018c8e <prvSetFlagsAndNotify+0x46>
 8018c7e:	4b08      	ldr	r3, [pc, #32]	@ (8018ca0 <prvSetFlagsAndNotify+0x58>)
 8018c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018c84:	601a      	str	r2, [r3, #0]
 8018c86:	f3bf 8f4f 	dsb	sy
 8018c8a:	f3bf 8f6f 	isb	sy
    }
}
 8018c8e:	bf00      	nop
 8018c90:	3710      	adds	r7, #16
 8018c92:	46bd      	mov	sp, r7
 8018c94:	bd80      	pop	{r7, pc}
 8018c96:	bf00      	nop
 8018c98:	2000246c 	.word	0x2000246c
 8018c9c:	20002528 	.word	0x20002528
 8018ca0:	e000ed04 	.word	0xe000ed04

08018ca4 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018ca4:	b580      	push	{r7, lr}
 8018ca6:	b082      	sub	sp, #8
 8018ca8:	af00      	add	r7, sp, #0
 8018caa:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8018cac:	2002      	movs	r0, #2
 8018cae:	f7ff ffcb 	bl	8018c48 <prvSetFlagsAndNotify>
}
 8018cb2:	bf00      	nop
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}

08018cba <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018cba:	b580      	push	{r7, lr}
 8018cbc:	b082      	sub	sp, #8
 8018cbe:	af00      	add	r7, sp, #0
 8018cc0:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8018cc2:	2001      	movs	r0, #1
 8018cc4:	f7ff ffc0 	bl	8018c48 <prvSetFlagsAndNotify>
}
 8018cc8:	bf00      	nop
 8018cca:	3708      	adds	r7, #8
 8018ccc:	46bd      	mov	sp, r7
 8018cce:	bd80      	pop	{r7, pc}

08018cd0 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8018cd8:	2004      	movs	r0, #4
 8018cda:	f7ff ffb5 	bl	8018c48 <prvSetFlagsAndNotify>
}
 8018cde:	bf00      	nop
 8018ce0:	3708      	adds	r7, #8
 8018ce2:	46bd      	mov	sp, r7
 8018ce4:	bd80      	pop	{r7, pc}
	...

08018ce8 <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8018ce8:	b480      	push	{r7}
 8018cea:	b085      	sub	sp, #20
 8018cec:	af00      	add	r7, sp, #0
 8018cee:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8018cf0:	4b15      	ldr	r3, [pc, #84]	@ (8018d48 <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8018cf2:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018cf4:	2300      	movs	r3, #0
 8018cf6:	60bb      	str	r3, [r7, #8]
 8018cf8:	e01c      	b.n	8018d34 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8018cfa:	68ba      	ldr	r2, [r7, #8]
 8018cfc:	4613      	mov	r3, r2
 8018cfe:	00db      	lsls	r3, r3, #3
 8018d00:	1a9b      	subs	r3, r3, r2
 8018d02:	00db      	lsls	r3, r3, #3
 8018d04:	461a      	mov	r2, r3
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	4413      	add	r3, r2
 8018d0a:	68fa      	ldr	r2, [r7, #12]
 8018d0c:	320a      	adds	r2, #10
 8018d0e:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8018d10:	68ba      	ldr	r2, [r7, #8]
 8018d12:	4613      	mov	r3, r2
 8018d14:	00db      	lsls	r3, r3, #3
 8018d16:	1a9b      	subs	r3, r3, r2
 8018d18:	00db      	lsls	r3, r3, #3
 8018d1a:	461a      	mov	r2, r3
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	4413      	add	r3, r2
 8018d20:	461a      	mov	r2, r3
 8018d22:	68fb      	ldr	r3, [r7, #12]
 8018d24:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8018d2c:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018d2e:	68bb      	ldr	r3, [r7, #8]
 8018d30:	3301      	adds	r3, #1
 8018d32:	60bb      	str	r3, [r7, #8]
 8018d34:	68bb      	ldr	r3, [r7, #8]
 8018d36:	2b3f      	cmp	r3, #63	@ 0x3f
 8018d38:	d9df      	bls.n	8018cfa <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8018d3a:	bf00      	nop
 8018d3c:	bf00      	nop
 8018d3e:	3714      	adds	r7, #20
 8018d40:	46bd      	mov	sp, r7
 8018d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d46:	4770      	bx	lr
 8018d48:	240400c0 	.word	0x240400c0

08018d4c <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8018d4c:	b580      	push	{r7, lr}
 8018d4e:	b082      	sub	sp, #8
 8018d50:	af00      	add	r7, sp, #0
 8018d52:	6078      	str	r0, [r7, #4]
 8018d54:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8018d56:	f7ed fcfb 	bl	8006750 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	681a      	ldr	r2, [r3, #0]
 8018d5e:	683b      	ldr	r3, [r7, #0]
 8018d60:	43db      	mvns	r3, r3
 8018d62:	401a      	ands	r2, r3
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8018d68:	f7ed fd1e 	bl	80067a8 <vPortExitCritical>
}
 8018d6c:	bf00      	nop
 8018d6e:	3708      	adds	r7, #8
 8018d70:	46bd      	mov	sp, r7
 8018d72:	bd80      	pop	{r7, pc}

08018d74 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018d74:	b480      	push	{r7}
 8018d76:	b087      	sub	sp, #28
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	3330      	adds	r3, #48	@ 0x30
 8018d84:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018d86:	2300      	movs	r3, #0
 8018d88:	617b      	str	r3, [r7, #20]
 8018d8a:	e00e      	b.n	8018daa <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018d8c:	68fb      	ldr	r3, [r7, #12]
 8018d8e:	697a      	ldr	r2, [r7, #20]
 8018d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018d94:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	68db      	ldr	r3, [r3, #12]
 8018d9a:	2b00      	cmp	r3, #0
 8018d9c:	da02      	bge.n	8018da4 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018d9e:	693b      	ldr	r3, [r7, #16]
 8018da0:	3301      	adds	r3, #1
 8018da2:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	3301      	adds	r3, #1
 8018da8:	617b      	str	r3, [r7, #20]
 8018daa:	697b      	ldr	r3, [r7, #20]
 8018dac:	2b03      	cmp	r3, #3
 8018dae:	d9ed      	bls.n	8018d8c <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8018db0:	693b      	ldr	r3, [r7, #16]
    }
 8018db2:	4618      	mov	r0, r3
 8018db4:	371c      	adds	r7, #28
 8018db6:	46bd      	mov	sp, r7
 8018db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dbc:	4770      	bx	lr
	...

08018dc0 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b088      	sub	sp, #32
 8018dc4:	af00      	add	r7, sp, #0
 8018dc6:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8018dc8:	2364      	movs	r3, #100	@ 0x64
 8018dca:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018dcc:	2300      	movs	r3, #0
 8018dce:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018dd0:	2304      	movs	r3, #4
 8018dd2:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8018dd8:	f7f1 ffb8 	bl	800ad4c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018ddc:	4b43      	ldr	r3, [pc, #268]	@ (8018eec <prvEMACHandlerTask+0x12c>)
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7eb f96d 	bl	80040c0 <uxQueueMessagesWaiting>
 8018de6:	4603      	mov	r3, r0
 8018de8:	f1c3 0304 	rsb	r3, r3, #4
 8018dec:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018dee:	69fa      	ldr	r2, [r7, #28]
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	429a      	cmp	r2, r3
 8018df4:	d206      	bcs.n	8018e04 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8018dfa:	2204      	movs	r2, #4
 8018dfc:	69f9      	ldr	r1, [r7, #28]
 8018dfe:	483c      	ldr	r0, [pc, #240]	@ (8018ef0 <prvEMACHandlerTask+0x130>)
 8018e00:	f009 fca8 	bl	8022754 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8018e04:	483b      	ldr	r0, [pc, #236]	@ (8018ef4 <prvEMACHandlerTask+0x134>)
 8018e06:	f7ff ffb5 	bl	8018d74 <uxGetOwnCount>
 8018e0a:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8018e0c:	69ba      	ldr	r2, [r7, #24]
 8018e0e:	68bb      	ldr	r3, [r7, #8]
 8018e10:	429a      	cmp	r2, r3
 8018e12:	d906      	bls.n	8018e22 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8018e14:	68bb      	ldr	r3, [r7, #8]
 8018e16:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8018e18:	2204      	movs	r2, #4
 8018e1a:	69b9      	ldr	r1, [r7, #24]
 8018e1c:	4836      	ldr	r0, [pc, #216]	@ (8018ef8 <prvEMACHandlerTask+0x138>)
 8018e1e:	f009 fc99 	bl	8022754 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8018e22:	693a      	ldr	r2, [r7, #16]
 8018e24:	2100      	movs	r1, #0
 8018e26:	2000      	movs	r0, #0
 8018e28:	f7ec fe6a 	bl	8005b00 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8018e2c:	4b33      	ldr	r3, [pc, #204]	@ (8018efc <prvEMACHandlerTask+0x13c>)
 8018e2e:	681b      	ldr	r3, [r3, #0]
 8018e30:	f003 0301 	and.w	r3, r3, #1
 8018e34:	2b00      	cmp	r3, #0
 8018e36:	d006      	beq.n	8018e46 <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8018e38:	2101      	movs	r1, #1
 8018e3a:	4830      	ldr	r0, [pc, #192]	@ (8018efc <prvEMACHandlerTask+0x13c>)
 8018e3c:	f7ff ff86 	bl	8018d4c <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8018e40:	f7ff fe3e 	bl	8018ac0 <prvNetworkInterfaceInput>
 8018e44:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8018e46:	4b2d      	ldr	r3, [pc, #180]	@ (8018efc <prvEMACHandlerTask+0x13c>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	f003 0302 	and.w	r3, r3, #2
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d017      	beq.n	8018e82 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8018e52:	2102      	movs	r1, #2
 8018e54:	4829      	ldr	r0, [pc, #164]	@ (8018efc <prvEMACHandlerTask+0x13c>)
 8018e56:	f7ff ff79 	bl	8018d4c <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8018e5a:	4b29      	ldr	r3, [pc, #164]	@ (8018f00 <prvEMACHandlerTask+0x140>)
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8018e62:	4618      	mov	r0, r3
 8018e64:	f7eb f83e 	bl	8003ee4 <xQueueSemaphoreTake>
 8018e68:	4603      	mov	r3, r0
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d009      	beq.n	8018e82 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018e6e:	4821      	ldr	r0, [pc, #132]	@ (8018ef4 <prvEMACHandlerTask+0x134>)
 8018e70:	f001 fb04 	bl	801a47c <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8018e74:	4b22      	ldr	r3, [pc, #136]	@ (8018f00 <prvEMACHandlerTask+0x140>)
 8018e76:	6818      	ldr	r0, [r3, #0]
 8018e78:	2300      	movs	r3, #0
 8018e7a:	2200      	movs	r2, #0
 8018e7c:	2100      	movs	r1, #0
 8018e7e:	f7ea fe79 	bl	8003b74 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8018e82:	4b1e      	ldr	r3, [pc, #120]	@ (8018efc <prvEMACHandlerTask+0x13c>)
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	f003 0304 	and.w	r3, r3, #4
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d00f      	beq.n	8018eae <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8018e8e:	2104      	movs	r1, #4
 8018e90:	481a      	ldr	r0, [pc, #104]	@ (8018efc <prvEMACHandlerTask+0x13c>)
 8018e92:	f7ff ff5b 	bl	8018d4c <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8018e96:	4b17      	ldr	r3, [pc, #92]	@ (8018ef4 <prvEMACHandlerTask+0x134>)
 8018e98:	2210      	movs	r2, #16
 8018e9a:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018e9c:	4815      	ldr	r0, [pc, #84]	@ (8018ef4 <prvEMACHandlerTask+0x134>)
 8018e9e:	f000 f964 	bl	801916a <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018ea2:	f7ff fe0d 	bl	8018ac0 <prvNetworkInterfaceInput>
 8018ea6:	4602      	mov	r2, r0
 8018ea8:	697b      	ldr	r3, [r7, #20]
 8018eaa:	4413      	add	r3, r2
 8018eac:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8018eae:	6979      	ldr	r1, [r7, #20]
 8018eb0:	4814      	ldr	r0, [pc, #80]	@ (8018f04 <prvEMACHandlerTask+0x144>)
 8018eb2:	f7ff fa25 	bl	8018300 <xPhyCheckLinkStatus>
 8018eb6:	4603      	mov	r3, r0
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d08b      	beq.n	8018dd4 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018ebc:	4b12      	ldr	r3, [pc, #72]	@ (8018f08 <prvEMACHandlerTask+0x148>)
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	4618      	mov	r0, r3
 8018ec2:	f7ff fccf 	bl	8018864 <xSTM32H_GetPhyLinkStatus>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d10b      	bne.n	8018ee4 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018ecc:	4809      	ldr	r0, [pc, #36]	@ (8018ef4 <prvEMACHandlerTask+0x134>)
 8018ece:	f000 f9d1 	bl	8019274 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018ed2:	2260      	movs	r2, #96	@ 0x60
 8018ed4:	2100      	movs	r1, #0
 8018ed6:	480d      	ldr	r0, [pc, #52]	@ (8018f0c <prvEMACHandlerTask+0x14c>)
 8018ed8:	f009 ff65 	bl	8022da6 <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018edc:	4805      	ldr	r0, [pc, #20]	@ (8018ef4 <prvEMACHandlerTask+0x134>)
 8018ede:	f001 facd 	bl	801a47c <ETH_Clear_Tx_Descriptors>
 8018ee2:	e777      	b.n	8018dd4 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018ee4:	2000      	movs	r0, #0
 8018ee6:	f7ff fd91 	bl	8018a0c <prvEthernetUpdateConfig>
    {
 8018eea:	e773      	b.n	8018dd4 <prvEMACHandlerTask+0x14>
 8018eec:	20002474 	.word	0x20002474
 8018ef0:	08027d54 	.word	0x08027d54
 8018ef4:	2000247c 	.word	0x2000247c
 8018ef8:	08027d6c 	.word	0x08027d6c
 8018efc:	2000246c 	.word	0x2000246c
 8018f00:	20002478 	.word	0x20002478
 8018f04:	2000252c 	.word	0x2000252c
 8018f08:	20002524 	.word	0x20002524
 8018f0c:	24040060 	.word	0x24040060

08018f10 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8018f10:	b480      	push	{r7}
 8018f12:	b083      	sub	sp, #12
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
 8018f18:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	683a      	ldr	r2, [r7, #0]
 8018f1e:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8018f20:	bf00      	nop
 8018f22:	370c      	adds	r7, #12
 8018f24:	46bd      	mov	sp, r7
 8018f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2a:	4770      	bx	lr

08018f2c <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b084      	sub	sp, #16
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d101      	bne.n	8018f3e <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 8018f3a:	2301      	movs	r3, #1
 8018f3c:	e0d4      	b.n	80190e8 <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d102      	bne.n	8018f4c <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 8018f46:	6878      	ldr	r0, [r7, #4]
 8018f48:	f7e9 fa46 	bl	80023d8 <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	2223      	movs	r2, #35	@ 0x23
 8018f50:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8018f52:	4b67      	ldr	r3, [pc, #412]	@ (80190f0 <HAL_ETH_Init+0x1c4>)
 8018f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018f58:	4a65      	ldr	r2, [pc, #404]	@ (80190f0 <HAL_ETH_Init+0x1c4>)
 8018f5a:	f043 0302 	orr.w	r3, r3, #2
 8018f5e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018f62:	4b63      	ldr	r3, [pc, #396]	@ (80190f0 <HAL_ETH_Init+0x1c4>)
 8018f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8018f68:	f003 0302 	and.w	r3, r3, #2
 8018f6c:	60bb      	str	r3, [r7, #8]
 8018f6e:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	7a1b      	ldrb	r3, [r3, #8]
 8018f74:	2b00      	cmp	r3, #0
 8018f76:	d103      	bne.n	8018f80 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 8018f78:	2000      	movs	r0, #0
 8018f7a:	f001 fc17 	bl	801a7ac <HAL_SYSCFG_ETHInterfaceSelect>
 8018f7e:	e003      	b.n	8018f88 <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8018f80:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018f84:	f001 fc12 	bl	801a7ac <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	681b      	ldr	r3, [r3, #0]
 8018f8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	687a      	ldr	r2, [r7, #4]
 8018f94:	6812      	ldr	r2, [r2, #0]
 8018f96:	f043 0301 	orr.w	r3, r3, #1
 8018f9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018f9e:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8018fa0:	f001 fbc8 	bl	801a734 <HAL_GetTick>
 8018fa4:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8018fa6:	e010      	b.n	8018fca <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 8018fa8:	f001 fbc4 	bl	801a734 <HAL_GetTick>
 8018fac:	4602      	mov	r2, r0
 8018fae:	68fb      	ldr	r3, [r7, #12]
 8018fb0:	1ad3      	subs	r3, r2, r3
 8018fb2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8018fb6:	d908      	bls.n	8018fca <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	2204      	movs	r2, #4
 8018fbc:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018fbe:	21e0      	movs	r1, #224	@ 0xe0
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	f7ff ffa5 	bl	8018f10 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 8018fc6:	2301      	movs	r3, #1
 8018fc8:	e08e      	b.n	80190e8 <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	f003 0301 	and.w	r3, r3, #1
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d1e5      	bne.n	8018fa8 <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8018fdc:	6878      	ldr	r0, [r7, #4]
 8018fde:	f001 f94b 	bl	801a278 <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8018fe2:	f004 ff49 	bl	801de78 <HAL_RCC_GetHCLKFreq>
 8018fe6:	4603      	mov	r3, r0
 8018fe8:	4a42      	ldr	r2, [pc, #264]	@ (80190f4 <HAL_ETH_Init+0x1c8>)
 8018fea:	fba2 2303 	umull	r2, r3, r2, r3
 8018fee:	0c9a      	lsrs	r2, r3, #18
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	681b      	ldr	r3, [r3, #0]
 8018ff4:	3a01      	subs	r2, #1
 8018ff6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 8018ffa:	6878      	ldr	r0, [r7, #4]
 8018ffc:	f001 f89e 	bl	801a13c <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	681b      	ldr	r3, [r3, #0]
 8019004:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019008:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 801900c:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8019010:	687a      	ldr	r2, [r7, #4]
 8019012:	6812      	ldr	r2, [r2, #0]
 8019014:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8019018:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801901c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	695b      	ldr	r3, [r3, #20]
 8019024:	f003 0303 	and.w	r3, r3, #3
 8019028:	2b00      	cmp	r3, #0
 801902a:	d008      	beq.n	801903e <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801902c:	687b      	ldr	r3, [r7, #4]
 801902e:	2201      	movs	r2, #1
 8019030:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019032:	21e0      	movs	r1, #224	@ 0xe0
 8019034:	6878      	ldr	r0, [r7, #4]
 8019036:	f7ff ff6b 	bl	8018f10 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 801903a:	2301      	movs	r3, #1
 801903c:	e054      	b.n	80190e8 <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 801903e:	687b      	ldr	r3, [r7, #4]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019046:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801904a:	4b2b      	ldr	r3, [pc, #172]	@ (80190f8 <HAL_ETH_Init+0x1cc>)
 801904c:	4013      	ands	r3, r2
 801904e:	687a      	ldr	r2, [r7, #4]
 8019050:	6952      	ldr	r2, [r2, #20]
 8019052:	0051      	lsls	r1, r2, #1
 8019054:	687a      	ldr	r2, [r7, #4]
 8019056:	6812      	ldr	r2, [r2, #0]
 8019058:	430b      	orrs	r3, r1
 801905a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801905e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8019062:	6878      	ldr	r0, [r7, #4]
 8019064:	f001 f960 	bl	801a328 <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 8019068:	6878      	ldr	r0, [r7, #4]
 801906a:	f001 f9a9 	bl	801a3c0 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	685b      	ldr	r3, [r3, #4]
 8019072:	3305      	adds	r3, #5
 8019074:	781b      	ldrb	r3, [r3, #0]
 8019076:	021a      	lsls	r2, r3, #8
 8019078:	687b      	ldr	r3, [r7, #4]
 801907a:	685b      	ldr	r3, [r3, #4]
 801907c:	3304      	adds	r3, #4
 801907e:	781b      	ldrb	r3, [r3, #0]
 8019080:	4619      	mov	r1, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	430a      	orrs	r2, r1
 8019088:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	685b      	ldr	r3, [r3, #4]
 8019090:	3303      	adds	r3, #3
 8019092:	781b      	ldrb	r3, [r3, #0]
 8019094:	061a      	lsls	r2, r3, #24
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	685b      	ldr	r3, [r3, #4]
 801909a:	3302      	adds	r3, #2
 801909c:	781b      	ldrb	r3, [r3, #0]
 801909e:	041b      	lsls	r3, r3, #16
 80190a0:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	685b      	ldr	r3, [r3, #4]
 80190a6:	3301      	adds	r3, #1
 80190a8:	781b      	ldrb	r3, [r3, #0]
 80190aa:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80190ac:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	685b      	ldr	r3, [r3, #4]
 80190b2:	781b      	ldrb	r3, [r3, #0]
 80190b4:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80190b6:	687b      	ldr	r3, [r7, #4]
 80190b8:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 80190ba:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 80190bc:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80190c0:	687b      	ldr	r3, [r7, #4]
 80190c2:	2200      	movs	r2, #0
 80190c4:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	2210      	movs	r2, #16
 80190ca:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	2210      	movs	r2, #16
 80190d0:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 80190d2:	687b      	ldr	r3, [r7, #4]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	4a09      	ldr	r2, [pc, #36]	@ (80190fc <HAL_ETH_Init+0x1d0>)
 80190d8:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	4a07      	ldr	r2, [pc, #28]	@ (8019100 <HAL_ETH_Init+0x1d4>)
 80190e2:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 80190e6:	2300      	movs	r3, #0
        }
 80190e8:	4618      	mov	r0, r3
 80190ea:	3710      	adds	r7, #16
 80190ec:	46bd      	mov	sp, r7
 80190ee:	bd80      	pop	{r7, pc}
 80190f0:	58024400 	.word	0x58024400
 80190f4:	431bde83 	.word	0x431bde83
 80190f8:	ffff8001 	.word	0xffff8001
 80190fc:	0c020060 	.word	0x0c020060
 8019100:	0c20c000 	.word	0x0c20c000

08019104 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8019104:	b480      	push	{r7}
 8019106:	b087      	sub	sp, #28
 8019108:	af00      	add	r7, sp, #0
 801910a:	60f8      	str	r0, [r7, #12]
 801910c:	60b9      	str	r1, [r7, #8]
 801910e:	607a      	str	r2, [r7, #4]
 8019110:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	68ba      	ldr	r2, [r7, #8]
 8019116:	320c      	adds	r2, #12
 8019118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801911c:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	2b00      	cmp	r3, #0
 8019122:	d002      	beq.n	801912a <HAL_ETH_DescAssignMemory+0x26>
 8019124:	68bb      	ldr	r3, [r7, #8]
 8019126:	2b03      	cmp	r3, #3
 8019128:	d904      	bls.n	8019134 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	2201      	movs	r2, #1
 801912e:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8019130:	2301      	movs	r3, #1
 8019132:	e014      	b.n	801915e <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8019134:	687a      	ldr	r2, [r7, #4]
 8019136:	697b      	ldr	r3, [r7, #20]
 8019138:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 801913a:	687a      	ldr	r2, [r7, #4]
 801913c:	697b      	ldr	r3, [r7, #20]
 801913e:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	68db      	ldr	r3, [r3, #12]
 8019144:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8019148:	697b      	ldr	r3, [r7, #20]
 801914a:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 801914c:	697b      	ldr	r3, [r7, #20]
 801914e:	68db      	ldr	r3, [r3, #12]
 8019150:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019154:	697b      	ldr	r3, [r7, #20]
 8019156:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8019158:	697b      	ldr	r3, [r7, #20]
 801915a:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 801915c:	2300      	movs	r3, #0
        }
 801915e:	4618      	mov	r0, r3
 8019160:	371c      	adds	r7, #28
 8019162:	46bd      	mov	sp, r7
 8019164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019168:	4770      	bx	lr

0801916a <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 801916a:	b480      	push	{r7}
 801916c:	b085      	sub	sp, #20
 801916e:	af00      	add	r7, sp, #0
 8019170:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019176:	2b10      	cmp	r3, #16
 8019178:	d175      	bne.n	8019266 <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	2223      	movs	r2, #35	@ 0x23
 801917e:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8019180:	2300      	movs	r3, #0
 8019182:	60fb      	str	r3, [r7, #12]
 8019184:	e00e      	b.n	80191a4 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	68fa      	ldr	r2, [r7, #12]
 801918a:	320c      	adds	r2, #12
 801918c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019190:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019192:	68bb      	ldr	r3, [r7, #8]
 8019194:	68db      	ldr	r3, [r3, #12]
 8019196:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801919a:	68bb      	ldr	r3, [r7, #8]
 801919c:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 801919e:	68fb      	ldr	r3, [r7, #12]
 80191a0:	3301      	adds	r3, #1
 80191a2:	60fb      	str	r3, [r7, #12]
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	2b03      	cmp	r3, #3
 80191a8:	d9ed      	bls.n	8019186 <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	2201      	movs	r2, #1
 80191ae:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	681b      	ldr	r3, [r3, #0]
 80191b4:	681a      	ldr	r2, [r3, #0]
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	f042 0202 	orr.w	r2, r2, #2
 80191be:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	681a      	ldr	r2, [r3, #0]
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	f042 0201 	orr.w	r2, r2, #1
 80191ce:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	681b      	ldr	r3, [r3, #0]
 80191dc:	f042 0201 	orr.w	r2, r2, #1
 80191e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80191ec:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80191f0:	687a      	ldr	r2, [r7, #4]
 80191f2:	6812      	ldr	r2, [r2, #0]
 80191f4:	f043 0301 	orr.w	r3, r3, #1
 80191f8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80191fc:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8019200:	687b      	ldr	r3, [r7, #4]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019208:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801920c:	687a      	ldr	r2, [r7, #4]
 801920e:	6812      	ldr	r2, [r2, #0]
 8019210:	f043 0301 	orr.w	r3, r3, #1
 8019214:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019218:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019224:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019228:	687a      	ldr	r2, [r7, #4]
 801922a:	6812      	ldr	r2, [r2, #0]
 801922c:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8019230:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019234:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019240:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	681a      	ldr	r2, [r3, #0]
 8019248:	f24d 0341 	movw	r3, #53313	@ 0xd041
 801924c:	430b      	orrs	r3, r1
 801924e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019252:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	2210      	movs	r2, #16
 801925a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	2222      	movs	r2, #34	@ 0x22
 8019260:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8019262:	2300      	movs	r3, #0
 8019264:	e000      	b.n	8019268 <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 8019266:	2301      	movs	r3, #1
            }
        }
 8019268:	4618      	mov	r0, r3
 801926a:	3714      	adds	r7, #20
 801926c:	46bd      	mov	sp, r7
 801926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019272:	4770      	bx	lr

08019274 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8019274:	b480      	push	{r7}
 8019276:	b085      	sub	sp, #20
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019280:	2b00      	cmp	r3, #0
 8019282:	d066      	beq.n	8019352 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	2223      	movs	r2, #35	@ 0x23
 8019288:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019292:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	681a      	ldr	r2, [r3, #0]
 801929a:	4b31      	ldr	r3, [pc, #196]	@ (8019360 <HAL_ETH_Stop_IT+0xec>)
 801929c:	400b      	ands	r3, r1
 801929e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192a2:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 80192a6:	687b      	ldr	r3, [r7, #4]
 80192a8:	681b      	ldr	r3, [r3, #0]
 80192aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192ae:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 80192b2:	687a      	ldr	r2, [r7, #4]
 80192b4:	6812      	ldr	r2, [r2, #0]
 80192b6:	f023 0301 	bic.w	r3, r3, #1
 80192ba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192be:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80192ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80192ce:	687a      	ldr	r2, [r7, #4]
 80192d0:	6812      	ldr	r2, [r2, #0]
 80192d2:	f023 0301 	bic.w	r3, r3, #1
 80192d6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80192da:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	681b      	ldr	r3, [r3, #0]
 80192e2:	681a      	ldr	r2, [r3, #0]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	f022 0201 	bic.w	r2, r2, #1
 80192ec:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	f042 0201 	orr.w	r2, r2, #1
 80192fe:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	681a      	ldr	r2, [r3, #0]
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	681b      	ldr	r3, [r3, #0]
 801930c:	f022 0202 	bic.w	r2, r2, #2
 8019310:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019312:	2300      	movs	r3, #0
 8019314:	60fb      	str	r3, [r7, #12]
 8019316:	e00e      	b.n	8019336 <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	68fa      	ldr	r2, [r7, #12]
 801931c:	320c      	adds	r2, #12
 801931e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019322:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8019324:	68bb      	ldr	r3, [r7, #8]
 8019326:	68db      	ldr	r3, [r3, #12]
 8019328:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801932c:	68bb      	ldr	r3, [r7, #8]
 801932e:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	3301      	adds	r3, #1
 8019334:	60fb      	str	r3, [r7, #12]
 8019336:	68fb      	ldr	r3, [r7, #12]
 8019338:	2b03      	cmp	r3, #3
 801933a:	d9ed      	bls.n	8019318 <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	2200      	movs	r2, #0
 8019340:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8019342:	687b      	ldr	r3, [r7, #4]
 8019344:	2210      	movs	r2, #16
 8019346:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2210      	movs	r2, #16
 801934c:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 801934e:	2300      	movs	r3, #0
 8019350:	e000      	b.n	8019354 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8019352:	2301      	movs	r3, #1
            }
        }
 8019354:	4618      	mov	r0, r3
 8019356:	3714      	adds	r7, #20
 8019358:	46bd      	mov	sp, r7
 801935a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801935e:	4770      	bx	lr
 8019360:	ffff2fbe 	.word	0xffff2fbe

08019364 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8019364:	b580      	push	{r7, lr}
 8019366:	b082      	sub	sp, #8
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
 801936c:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 801936e:	683b      	ldr	r3, [r7, #0]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d107      	bne.n	8019384 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019378:	f043 0201 	orr.w	r2, r3, #1
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8019380:	2301      	movs	r3, #1
 8019382:	e039      	b.n	80193f8 <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019388:	2b10      	cmp	r3, #16
 801938a:	d134      	bne.n	80193f6 <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 801938c:	2201      	movs	r2, #1
 801938e:	6839      	ldr	r1, [r7, #0]
 8019390:	6878      	ldr	r0, [r7, #4]
 8019392:	f001 f8c1 	bl	801a518 <ETH_Prepare_Tx_Descriptors>
 8019396:	4603      	mov	r3, r0
 8019398:	2b00      	cmp	r3, #0
 801939a:	d007      	beq.n	80193ac <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80193a0:	f043 0202 	orr.w	r2, r3, #2
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 80193a8:	2301      	movs	r3, #1
 80193aa:	e025      	b.n	80193f8 <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193b0:	1c5a      	adds	r2, r3, #1
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193ba:	2b03      	cmp	r3, #3
 80193bc:	d904      	bls.n	80193c8 <HAL_ETH_Transmit_IT+0x64>
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193c2:	1f1a      	subs	r2, r3, #4
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 80193c8:	687b      	ldr	r3, [r7, #4]
 80193ca:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681a      	ldr	r2, [r3, #0]
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	3106      	adds	r1, #6
 80193d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80193d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80193dc:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 80193e0:	f3bf 8f4f 	dsb	sy
}
 80193e4:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	681b      	ldr	r3, [r3, #0]
 80193ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80193ee:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 80193f2:	2300      	movs	r3, #0
 80193f4:	e000      	b.n	80193f8 <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 80193f6:	2301      	movs	r3, #1
            }
        }
 80193f8:	4618      	mov	r0, r3
 80193fa:	3708      	adds	r7, #8
 80193fc:	46bd      	mov	sp, r7
 80193fe:	bd80      	pop	{r7, pc}

08019400 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8019400:	b580      	push	{r7, lr}
 8019402:	b08a      	sub	sp, #40	@ 0x28
 8019404:	af00      	add	r7, sp, #0
 8019406:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	3330      	adds	r3, #48	@ 0x30
 801940c:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 801940e:	69bb      	ldr	r3, [r7, #24]
 8019410:	691b      	ldr	r3, [r3, #16]
 8019412:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019414:	69bb      	ldr	r3, [r7, #24]
 8019416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801941c:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 801941e:	2300      	movs	r3, #0
 8019420:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8019422:	2300      	movs	r3, #0
 8019424:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8019426:	2300      	movs	r3, #0
 8019428:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801942a:	e055      	b.n	80194d8 <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 801942c:	697b      	ldr	r3, [r7, #20]
 801942e:	68db      	ldr	r3, [r3, #12]
 8019430:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8019432:	6a3b      	ldr	r3, [r7, #32]
 8019434:	3301      	adds	r3, #1
 8019436:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801943e:	2b00      	cmp	r3, #0
 8019440:	d006      	beq.n	8019450 <HAL_ETH_IsRxDataAvailable+0x50>
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019448:	2b00      	cmp	r3, #0
 801944a:	d001      	beq.n	8019450 <HAL_ETH_IsRxDataAvailable+0x50>
 801944c:	2301      	movs	r3, #1
 801944e:	e000      	b.n	8019452 <HAL_ETH_IsRxDataAvailable+0x52>
 8019450:	2300      	movs	r3, #0
 8019452:	2b00      	cmp	r3, #0
 8019454:	d104      	bne.n	8019460 <HAL_ETH_IsRxDataAvailable+0x60>
 8019456:	f240 4195 	movw	r1, #1173	@ 0x495
 801945a:	482b      	ldr	r0, [pc, #172]	@ (8019508 <HAL_ETH_IsRxDataAvailable+0x108>)
 801945c:	f7e8 fa9c 	bl	8001998 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8019466:	2b00      	cmp	r3, #0
 8019468:	d036      	beq.n	80194d8 <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 801946a:	693b      	ldr	r3, [r7, #16]
 801946c:	3301      	adds	r3, #1
 801946e:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	2b01      	cmp	r3, #1
 8019474:	d101      	bne.n	801947a <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 8019476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019478:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 801947a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801947c:	3301      	adds	r3, #1
 801947e:	627b      	str	r3, [r7, #36]	@ 0x24
 8019480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019482:	2b03      	cmp	r3, #3
 8019484:	d902      	bls.n	801948c <HAL_ETH_IsRxDataAvailable+0x8c>
 8019486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019488:	3b04      	subs	r3, #4
 801948a:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801948c:	69bb      	ldr	r3, [r7, #24]
 801948e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019494:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8019496:	697b      	ldr	r3, [r7, #20]
 8019498:	68db      	ldr	r3, [r3, #12]
 801949a:	2b00      	cmp	r3, #0
 801949c:	db11      	blt.n	80194c2 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 801949e:	697b      	ldr	r3, [r7, #20]
 80194a0:	68db      	ldr	r3, [r3, #12]
 80194a2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d00b      	beq.n	80194c2 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 80194aa:	69bb      	ldr	r3, [r7, #24]
 80194ac:	2201      	movs	r2, #1
 80194ae:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 80194b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194b2:	3301      	adds	r3, #1
 80194b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80194b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194b8:	2b03      	cmp	r3, #3
 80194ba:	d902      	bls.n	80194c2 <HAL_ETH_IsRxDataAvailable+0xc2>
 80194bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80194be:	3b04      	subs	r3, #4
 80194c0:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80194c6:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 80194c8:	69bb      	ldr	r3, [r7, #24]
 80194ca:	69fa      	ldr	r2, [r7, #28]
 80194cc:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 80194ce:	69bb      	ldr	r3, [r7, #24]
 80194d0:	693a      	ldr	r2, [r7, #16]
 80194d2:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 80194d4:	2301      	movs	r3, #1
 80194d6:	e012      	b.n	80194fe <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 80194d8:	697b      	ldr	r3, [r7, #20]
 80194da:	68db      	ldr	r3, [r3, #12]
 80194dc:	2b00      	cmp	r3, #0
 80194de:	db02      	blt.n	80194e6 <HAL_ETH_IsRxDataAvailable+0xe6>
 80194e0:	6a3b      	ldr	r3, [r7, #32]
 80194e2:	2b03      	cmp	r3, #3
 80194e4:	d9a2      	bls.n	801942c <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d004      	beq.n	80194f6 <HAL_ETH_IsRxDataAvailable+0xf6>
 80194ec:	f240 41db 	movw	r1, #1243	@ 0x4db
 80194f0:	4805      	ldr	r0, [pc, #20]	@ (8019508 <HAL_ETH_IsRxDataAvailable+0x108>)
 80194f2:	f7e8 fa51 	bl	8001998 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 80194f6:	69bb      	ldr	r3, [r7, #24]
 80194f8:	2200      	movs	r2, #0
 80194fa:	619a      	str	r2, [r3, #24]

            return 0;
 80194fc:	2300      	movs	r3, #0
        }
 80194fe:	4618      	mov	r0, r3
 8019500:	3728      	adds	r7, #40	@ 0x28
 8019502:	46bd      	mov	sp, r7
 8019504:	bd80      	pop	{r7, pc}
 8019506:	bf00      	nop
 8019508:	08027d84 	.word	0x08027d84

0801950c <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 801950c:	b580      	push	{r7, lr}
 801950e:	b086      	sub	sp, #24
 8019510:	af00      	add	r7, sp, #0
 8019512:	6078      	str	r0, [r7, #4]
 8019514:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8019516:	687b      	ldr	r3, [r7, #4]
 8019518:	3330      	adds	r3, #48	@ 0x30
 801951a:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 801951c:	683b      	ldr	r3, [r7, #0]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d104      	bne.n	801952c <HAL_ETH_GetRxData+0x20>
 8019522:	f240 511f 	movw	r1, #1311	@ 0x51f
 8019526:	481c      	ldr	r0, [pc, #112]	@ (8019598 <HAL_ETH_GetRxData+0x8c>)
 8019528:	f7e8 fa36 	bl	8001998 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 801952c:	6878      	ldr	r0, [r7, #4]
 801952e:	f7ff ff67 	bl	8019400 <HAL_ETH_IsRxDataAvailable>
 8019532:	4603      	mov	r3, r0
 8019534:	2b00      	cmp	r3, #0
 8019536:	d101      	bne.n	801953c <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8019538:	2300      	movs	r3, #0
 801953a:	e028      	b.n	801958e <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 801953c:	697b      	ldr	r3, [r7, #20]
 801953e:	695b      	ldr	r3, [r3, #20]
 8019540:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8019542:	697b      	ldr	r3, [r7, #20]
 8019544:	693a      	ldr	r2, [r7, #16]
 8019546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801954a:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 801954c:	697b      	ldr	r3, [r7, #20]
 801954e:	699b      	ldr	r3, [r3, #24]
 8019550:	2b01      	cmp	r3, #1
 8019552:	d004      	beq.n	801955e <HAL_ETH_GetRxData+0x52>
 8019554:	f240 512a 	movw	r1, #1322	@ 0x52a
 8019558:	480f      	ldr	r0, [pc, #60]	@ (8019598 <HAL_ETH_GetRxData+0x8c>)
 801955a:	f7e8 fa1d 	bl	8001998 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 801955e:	68fb      	ldr	r3, [r7, #12]
 8019560:	68db      	ldr	r3, [r3, #12]
 8019562:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8019566:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8019568:	68fb      	ldr	r3, [r7, #12]
 801956a:	691b      	ldr	r3, [r3, #16]
 801956c:	461a      	mov	r2, r3
 801956e:	683b      	ldr	r3, [r7, #0]
 8019570:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	68ba      	ldr	r2, [r7, #8]
 8019576:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	695b      	ldr	r3, [r3, #20]
 801957c:	68ba      	ldr	r2, [r7, #8]
 801957e:	429a      	cmp	r2, r3
 8019580:	d904      	bls.n	801958c <HAL_ETH_GetRxData+0x80>
 8019582:	f240 5133 	movw	r1, #1331	@ 0x533
 8019586:	4804      	ldr	r0, [pc, #16]	@ (8019598 <HAL_ETH_GetRxData+0x8c>)
 8019588:	f7e8 fa06 	bl	8001998 <vAssertCalled>

            return packet_length;
 801958c:	68bb      	ldr	r3, [r7, #8]
        }
 801958e:	4618      	mov	r0, r3
 8019590:	3718      	adds	r7, #24
 8019592:	46bd      	mov	sp, r7
 8019594:	bd80      	pop	{r7, pc}
 8019596:	bf00      	nop
 8019598:	08027d84 	.word	0x08027d84

0801959c <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 801959c:	b480      	push	{r7}
 801959e:	b08b      	sub	sp, #44	@ 0x2c
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	3330      	adds	r3, #48	@ 0x30
 80195aa:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	695b      	ldr	r3, [r3, #20]
 80195b0:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80195b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80195ba:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	699b      	ldr	r3, [r3, #24]
 80195c0:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 80195c2:	68fb      	ldr	r3, [r7, #12]
 80195c4:	699b      	ldr	r3, [r3, #24]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d101      	bne.n	80195ce <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 80195ca:	2301      	movs	r3, #1
 80195cc:	e057      	b.n	801967e <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	69db      	ldr	r3, [r3, #28]
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d002      	beq.n	80195dc <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 80195d6:	69fb      	ldr	r3, [r7, #28]
 80195d8:	3301      	adds	r3, #1
 80195da:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80195dc:	2300      	movs	r3, #0
 80195de:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 80195e0:	683b      	ldr	r3, [r7, #0]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d005      	beq.n	80195f2 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 80195e6:	683b      	ldr	r3, [r7, #0]
 80195e8:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 80195ea:	683a      	ldr	r2, [r7, #0]
 80195ec:	6a3b      	ldr	r3, [r7, #32]
 80195ee:	611a      	str	r2, [r3, #16]
 80195f0:	e002      	b.n	80195f8 <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 80195f2:	6a3b      	ldr	r3, [r7, #32]
 80195f4:	691b      	ldr	r3, [r3, #16]
 80195f6:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 80195f8:	693a      	ldr	r2, [r7, #16]
 80195fa:	6a3b      	ldr	r3, [r7, #32]
 80195fc:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 80195fe:	6a3b      	ldr	r3, [r7, #32]
 8019600:	68db      	ldr	r3, [r3, #12]
 8019602:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8019604:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8019608:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 801960a:	68fb      	ldr	r3, [r7, #12]
 801960c:	6a1b      	ldr	r3, [r3, #32]
 801960e:	2b00      	cmp	r3, #0
 8019610:	d003      	beq.n	801961a <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8019618:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019620:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8019622:	6a3b      	ldr	r3, [r7, #32]
 8019624:	697a      	ldr	r2, [r7, #20]
 8019626:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019628:	f3bf 8f4f 	dsb	sy
}
 801962c:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 801962e:	6a3b      	ldr	r3, [r7, #32]
 8019630:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8019632:	69fb      	ldr	r3, [r7, #28]
 8019634:	3b01      	subs	r3, #1
 8019636:	69ba      	ldr	r2, [r7, #24]
 8019638:	429a      	cmp	r2, r3
 801963a:	d211      	bcs.n	8019660 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 801963c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801963e:	3301      	adds	r3, #1
 8019640:	627b      	str	r3, [r7, #36]	@ 0x24
 8019642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019644:	2b03      	cmp	r3, #3
 8019646:	d902      	bls.n	801964e <HAL_ETH_BuildRxDescriptors+0xb2>
 8019648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801964a:	3b04      	subs	r3, #4
 801964c:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019656:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8019658:	69bb      	ldr	r3, [r7, #24]
 801965a:	3301      	adds	r3, #1
 801965c:	61bb      	str	r3, [r7, #24]
            {
 801965e:	e7bf      	b.n	80195e0 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8019660:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	681a      	ldr	r2, [r3, #0]
 8019666:	6a3b      	ldr	r3, [r7, #32]
 8019668:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801966c:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	2200      	movs	r2, #0
 8019674:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	2200      	movs	r2, #0
 801967a:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 801967c:	2300      	movs	r3, #0
        }
 801967e:	4618      	mov	r0, r3
 8019680:	372c      	adds	r7, #44	@ 0x2c
 8019682:	46bd      	mov	sp, r7
 8019684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019688:	4770      	bx	lr
	...

0801968c <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 801968c:	b580      	push	{r7, lr}
 801968e:	b082      	sub	sp, #8
 8019690:	af00      	add	r7, sp, #0
 8019692:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	681b      	ldr	r3, [r3, #0]
 8019698:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801969c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80196a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80196a4:	2b40      	cmp	r3, #64	@ 0x40
 80196a6:	d115      	bne.n	80196d4 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	681b      	ldr	r3, [r3, #0]
 80196ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80196b0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80196b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80196b8:	2b40      	cmp	r3, #64	@ 0x40
 80196ba:	d10b      	bne.n	80196d4 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 80196bc:	6878      	ldr	r0, [r7, #4]
 80196be:	f7ff fafc 	bl	8018cba <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	681b      	ldr	r3, [r3, #0]
 80196c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80196ca:	461a      	mov	r2, r3
 80196cc:	f248 0340 	movw	r3, #32832	@ 0x8040
 80196d0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	681b      	ldr	r3, [r3, #0]
 80196d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80196dc:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80196e0:	f003 0301 	and.w	r3, r3, #1
 80196e4:	2b01      	cmp	r3, #1
 80196e6:	d115      	bne.n	8019714 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	681b      	ldr	r3, [r3, #0]
 80196ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80196f0:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80196f4:	f003 0301 	and.w	r3, r3, #1
 80196f8:	2b01      	cmp	r3, #1
 80196fa:	d10b      	bne.n	8019714 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 80196fc:	6878      	ldr	r0, [r7, #4]
 80196fe:	f7ff fad1 	bl	8018ca4 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801970a:	461a      	mov	r2, r3
 801970c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8019710:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801971c:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019720:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8019724:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8019728:	d14f      	bne.n	80197ca <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019732:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019736:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801973a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801973e:	d144      	bne.n	80197ca <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019744:	f043 0208 	orr.w	r2, r3, #8
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019754:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8019758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801975c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019760:	d11d      	bne.n	801979e <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801976a:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 801976e:	f241 1302 	movw	r3, #4354	@ 0x1102
 8019772:	4013      	ands	r3, r2
 8019774:	687a      	ldr	r2, [r7, #4]
 8019776:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019780:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8019784:	687a      	ldr	r2, [r7, #4]
 8019786:	6812      	ldr	r2, [r2, #0]
 8019788:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 801978c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019790:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8019794:	21e0      	movs	r1, #224	@ 0xe0
 8019796:	6878      	ldr	r0, [r7, #4]
 8019798:	f7ff fbba 	bl	8018f10 <set_error_state>
 801979c:	e012      	b.n	80197c4 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197a6:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80197aa:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197ba:	461a      	mov	r2, r3
 80197bc:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 80197c0:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 80197c4:	6878      	ldr	r0, [r7, #4]
 80197c6:	f7ff fa83 	bl	8018cd0 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80197d2:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 80197d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80197da:	d10f      	bne.n	80197fc <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80197e8:	21e0      	movs	r1, #224	@ 0xe0
 80197ea:	6878      	ldr	r0, [r7, #4]
 80197ec:	f7ff fb90 	bl	8018f10 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 80197f0:	6878      	ldr	r0, [r7, #4]
 80197f2:	f000 f843 	bl	801987c <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	2200      	movs	r2, #0
 80197fa:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019804:	f003 0310 	and.w	r3, r3, #16
 8019808:	2b10      	cmp	r3, #16
 801980a:	d10d      	bne.n	8019828 <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	681b      	ldr	r3, [r3, #0]
 8019810:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019814:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 801981c:	6878      	ldr	r0, [r7, #4]
 801981e:	f000 f837 	bl	8019890 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	2200      	movs	r2, #0
 8019826:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	681b      	ldr	r3, [r3, #0]
 801982c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8019830:	f003 0320 	and.w	r3, r3, #32
 8019834:	2b20      	cmp	r3, #32
 8019836:	d10d      	bne.n	8019854 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8019840:	f003 020f 	and.w	r2, r3, #15
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 8019848:	6878      	ldr	r0, [r7, #4]
 801984a:	f000 f82b 	bl	80198a4 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	2200      	movs	r2, #0
 8019852:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8019854:	4b08      	ldr	r3, [pc, #32]	@ (8019878 <HAL_ETH_IRQHandler+0x1ec>)
 8019856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019858:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801985c:	2b00      	cmp	r3, #0
 801985e:	d006      	beq.n	801986e <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8019860:	4b05      	ldr	r3, [pc, #20]	@ (8019878 <HAL_ETH_IRQHandler+0x1ec>)
 8019862:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8019866:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f000 f825 	bl	80198b8 <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 801986e:	bf00      	nop
 8019870:	3708      	adds	r7, #8
 8019872:	46bd      	mov	sp, r7
 8019874:	bd80      	pop	{r7, pc}
 8019876:	bf00      	nop
 8019878:	58000080 	.word	0x58000080

0801987c <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 801987c:	b480      	push	{r7}
 801987e:	b083      	sub	sp, #12
 8019880:	af00      	add	r7, sp, #0
 8019882:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8019884:	bf00      	nop
 8019886:	370c      	adds	r7, #12
 8019888:	46bd      	mov	sp, r7
 801988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988e:	4770      	bx	lr

08019890 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8019890:	b480      	push	{r7}
 8019892:	b083      	sub	sp, #12
 8019894:	af00      	add	r7, sp, #0
 8019896:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 8019898:	bf00      	nop
 801989a:	370c      	adds	r7, #12
 801989c:	46bd      	mov	sp, r7
 801989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a2:	4770      	bx	lr

080198a4 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 80198a4:	b480      	push	{r7}
 80198a6:	b083      	sub	sp, #12
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 80198ac:	bf00      	nop
 80198ae:	370c      	adds	r7, #12
 80198b0:	46bd      	mov	sp, r7
 80198b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b6:	4770      	bx	lr

080198b8 <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 80198b8:	b480      	push	{r7}
 80198ba:	b083      	sub	sp, #12
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 80198c0:	bf00      	nop
 80198c2:	370c      	adds	r7, #12
 80198c4:	46bd      	mov	sp, r7
 80198c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ca:	4770      	bx	lr

080198cc <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b086      	sub	sp, #24
 80198d0:	af00      	add	r7, sp, #0
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	60b9      	str	r1, [r7, #8]
 80198d6:	607a      	str	r2, [r7, #4]
 80198d8:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80198e2:	f003 0301 	and.w	r3, r3, #1
 80198e6:	2b00      	cmp	r3, #0
 80198e8:	d001      	beq.n	80198ee <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 80198ea:	2301      	movs	r3, #1
 80198ec:	e03e      	b.n	801996c <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80198f6:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80198f8:	697b      	ldr	r3, [r7, #20]
 80198fa:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80198fe:	68bb      	ldr	r3, [r7, #8]
 8019900:	055b      	lsls	r3, r3, #21
 8019902:	4313      	orrs	r3, r2
 8019904:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8019906:	697b      	ldr	r3, [r7, #20]
 8019908:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 801990c:	687b      	ldr	r3, [r7, #4]
 801990e:	041b      	lsls	r3, r3, #16
 8019910:	4313      	orrs	r3, r2
 8019912:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 8019914:	697b      	ldr	r3, [r7, #20]
 8019916:	f043 030c 	orr.w	r3, r3, #12
 801991a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801991c:	697b      	ldr	r3, [r7, #20]
 801991e:	f043 0301 	orr.w	r3, r3, #1
 8019922:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	697a      	ldr	r2, [r7, #20]
 801992a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 801992e:	f000 ff01 	bl	801a734 <HAL_GetTick>
 8019932:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 8019934:	e009      	b.n	801994a <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 8019936:	f000 fefd 	bl	801a734 <HAL_GetTick>
 801993a:	4602      	mov	r2, r0
 801993c:	693b      	ldr	r3, [r7, #16]
 801993e:	1ad3      	subs	r3, r2, r3
 8019940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8019944:	d901      	bls.n	801994a <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 8019946:	2301      	movs	r3, #1
 8019948:	e010      	b.n	801996c <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801994a:	68fb      	ldr	r3, [r7, #12]
 801994c:	681b      	ldr	r3, [r3, #0]
 801994e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019952:	f003 0301 	and.w	r3, r3, #1
 8019956:	2b00      	cmp	r3, #0
 8019958:	d1ed      	bne.n	8019936 <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 801995a:	68fb      	ldr	r3, [r7, #12]
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019962:	b29b      	uxth	r3, r3
 8019964:	461a      	mov	r2, r3
 8019966:	683b      	ldr	r3, [r7, #0]
 8019968:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 801996a:	2300      	movs	r3, #0
        }
 801996c:	4618      	mov	r0, r3
 801996e:	3718      	adds	r7, #24
 8019970:	46bd      	mov	sp, r7
 8019972:	bd80      	pop	{r7, pc}

08019974 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8019974:	b580      	push	{r7, lr}
 8019976:	b086      	sub	sp, #24
 8019978:	af00      	add	r7, sp, #0
 801997a:	60f8      	str	r0, [r7, #12]
 801997c:	60b9      	str	r1, [r7, #8]
 801997e:	607a      	str	r2, [r7, #4]
 8019980:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8019982:	68fb      	ldr	r3, [r7, #12]
 8019984:	681b      	ldr	r3, [r3, #0]
 8019986:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801998a:	f003 0301 	and.w	r3, r3, #1
 801998e:	2b00      	cmp	r3, #0
 8019990:	d001      	beq.n	8019996 <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8019992:	2301      	movs	r3, #1
 8019994:	e03c      	b.n	8019a10 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801999e:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80199a6:	68bb      	ldr	r3, [r7, #8]
 80199a8:	055b      	lsls	r3, r3, #21
 80199aa:	4313      	orrs	r3, r2
 80199ac:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80199ae:	697b      	ldr	r3, [r7, #20]
 80199b0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	041b      	lsls	r3, r3, #16
 80199b8:	4313      	orrs	r3, r2
 80199ba:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 80199bc:	697b      	ldr	r3, [r7, #20]
 80199be:	f023 030c 	bic.w	r3, r3, #12
 80199c2:	f043 0304 	orr.w	r3, r3, #4
 80199c6:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 80199c8:	697b      	ldr	r3, [r7, #20]
 80199ca:	f043 0301 	orr.w	r3, r3, #1
 80199ce:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 80199d0:	683b      	ldr	r3, [r7, #0]
 80199d2:	b29a      	uxth	r2, r3
 80199d4:	4b10      	ldr	r3, [pc, #64]	@ (8019a18 <HAL_ETH_WritePHYRegister+0xa4>)
 80199d6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 80199da:	4a0f      	ldr	r2, [pc, #60]	@ (8019a18 <HAL_ETH_WritePHYRegister+0xa4>)
 80199dc:	697b      	ldr	r3, [r7, #20]
 80199de:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 80199e2:	f000 fea7 	bl	801a734 <HAL_GetTick>
 80199e6:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80199e8:	e009      	b.n	80199fe <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80199ea:	f000 fea3 	bl	801a734 <HAL_GetTick>
 80199ee:	4602      	mov	r2, r0
 80199f0:	693b      	ldr	r3, [r7, #16]
 80199f2:	1ad3      	subs	r3, r2, r3
 80199f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80199f8:	d901      	bls.n	80199fe <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 80199fa:	2301      	movs	r3, #1
 80199fc:	e008      	b.n	8019a10 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019a06:	f003 0301 	and.w	r3, r3, #1
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d1ed      	bne.n	80199ea <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 8019a0e:	2300      	movs	r3, #0
        }
 8019a10:	4618      	mov	r0, r3
 8019a12:	3718      	adds	r7, #24
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}
 8019a18:	40028000 	.word	0x40028000

08019a1c <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019a1c:	b480      	push	{r7}
 8019a1e:	b083      	sub	sp, #12
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
 8019a24:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019a26:	683b      	ldr	r3, [r7, #0]
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d101      	bne.n	8019a30 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019a2c:	2301      	movs	r3, #1
 8019a2e:	e1c3      	b.n	8019db8 <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	f003 020c 	and.w	r2, r3, #12
 8019a3a:	683b      	ldr	r3, [r7, #0]
 8019a3c:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	681b      	ldr	r3, [r3, #0]
 8019a42:	681b      	ldr	r3, [r3, #0]
 8019a44:	f003 0310 	and.w	r3, r3, #16
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	bf14      	ite	ne
 8019a4c:	2301      	movne	r3, #1
 8019a4e:	2300      	moveq	r3, #0
 8019a50:	b2db      	uxtb	r3, r3
 8019a52:	461a      	mov	r2, r3
 8019a54:	683b      	ldr	r3, [r7, #0]
 8019a56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	681b      	ldr	r3, [r3, #0]
 8019a60:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019a64:	683b      	ldr	r3, [r7, #0]
 8019a66:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	bf0c      	ite	eq
 8019a76:	2301      	moveq	r3, #1
 8019a78:	2300      	movne	r3, #0
 8019a7a:	b2db      	uxtb	r3, r3
 8019a7c:	461a      	mov	r2, r3
 8019a7e:	683b      	ldr	r3, [r7, #0]
 8019a80:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	681b      	ldr	r3, [r3, #0]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	bf14      	ite	ne
 8019a92:	2301      	movne	r3, #1
 8019a94:	2300      	moveq	r3, #0
 8019a96:	b2db      	uxtb	r3, r3
 8019a98:	461a      	mov	r2, r3
 8019a9a:	683b      	ldr	r3, [r7, #0]
 8019a9c:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	681b      	ldr	r3, [r3, #0]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	bf0c      	ite	eq
 8019aac:	2301      	moveq	r3, #1
 8019aae:	2300      	movne	r3, #0
 8019ab0:	b2db      	uxtb	r3, r3
 8019ab2:	461a      	mov	r2, r3
 8019ab4:	683b      	ldr	r3, [r7, #0]
 8019ab6:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 8019ab8:	687b      	ldr	r3, [r7, #4]
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019ac2:	2b00      	cmp	r3, #0
 8019ac4:	bf14      	ite	ne
 8019ac6:	2301      	movne	r3, #1
 8019ac8:	2300      	moveq	r3, #0
 8019aca:	b2db      	uxtb	r3, r3
 8019acc:	461a      	mov	r2, r3
 8019ace:	683b      	ldr	r3, [r7, #0]
 8019ad0:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019adc:	2b00      	cmp	r3, #0
 8019ade:	bf14      	ite	ne
 8019ae0:	2301      	movne	r3, #1
 8019ae2:	2300      	moveq	r3, #0
 8019ae4:	b2db      	uxtb	r3, r3
 8019ae6:	461a      	mov	r2, r3
 8019ae8:	683b      	ldr	r3, [r7, #0]
 8019aea:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	681b      	ldr	r3, [r3, #0]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8019af6:	683b      	ldr	r3, [r7, #0]
 8019af8:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	681b      	ldr	r3, [r3, #0]
 8019b00:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8019b04:	683b      	ldr	r3, [r7, #0]
 8019b06:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	681b      	ldr	r3, [r3, #0]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	bf14      	ite	ne
 8019b16:	2301      	movne	r3, #1
 8019b18:	2300      	moveq	r3, #0
 8019b1a:	b2db      	uxtb	r3, r3
 8019b1c:	461a      	mov	r2, r3
 8019b1e:	683b      	ldr	r3, [r7, #0]
 8019b20:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	681b      	ldr	r3, [r3, #0]
 8019b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019b2c:	2b00      	cmp	r3, #0
 8019b2e:	bf0c      	ite	eq
 8019b30:	2301      	moveq	r3, #1
 8019b32:	2300      	movne	r3, #0
 8019b34:	b2db      	uxtb	r3, r3
 8019b36:	461a      	mov	r2, r3
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	bf0c      	ite	eq
 8019b4a:	2301      	moveq	r3, #1
 8019b4c:	2300      	movne	r3, #0
 8019b4e:	b2db      	uxtb	r3, r3
 8019b50:	461a      	mov	r2, r3
 8019b52:	683b      	ldr	r3, [r7, #0]
 8019b54:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	681b      	ldr	r3, [r3, #0]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	bf14      	ite	ne
 8019b64:	2301      	movne	r3, #1
 8019b66:	2300      	moveq	r3, #0
 8019b68:	b2db      	uxtb	r3, r3
 8019b6a:	461a      	mov	r2, r3
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	681b      	ldr	r3, [r3, #0]
 8019b76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	bf14      	ite	ne
 8019b7e:	2301      	movne	r3, #1
 8019b80:	2300      	moveq	r3, #0
 8019b82:	b2db      	uxtb	r3, r3
 8019b84:	461a      	mov	r2, r3
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019b94:	2b00      	cmp	r3, #0
 8019b96:	bf14      	ite	ne
 8019b98:	2301      	movne	r3, #1
 8019b9a:	2300      	moveq	r3, #0
 8019b9c:	b2db      	uxtb	r3, r3
 8019b9e:	461a      	mov	r2, r3
 8019ba0:	683b      	ldr	r3, [r7, #0]
 8019ba2:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	bf14      	ite	ne
 8019bb2:	2301      	movne	r3, #1
 8019bb4:	2300      	moveq	r3, #0
 8019bb6:	b2db      	uxtb	r3, r3
 8019bb8:	461a      	mov	r2, r3
 8019bba:	683b      	ldr	r3, [r7, #0]
 8019bbc:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	681b      	ldr	r3, [r3, #0]
 8019bc4:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8019bc8:	683b      	ldr	r3, [r7, #0]
 8019bca:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	bf14      	ite	ne
 8019bda:	2301      	movne	r3, #1
 8019bdc:	2300      	moveq	r3, #0
 8019bde:	b2db      	uxtb	r3, r3
 8019be0:	461a      	mov	r2, r3
 8019be2:	683b      	ldr	r3, [r7, #0]
 8019be4:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8019bf0:	683b      	ldr	r3, [r7, #0]
 8019bf2:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	681b      	ldr	r3, [r3, #0]
 8019bf8:	685b      	ldr	r3, [r3, #4]
 8019bfa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8019bfe:	683b      	ldr	r3, [r7, #0]
 8019c00:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	685b      	ldr	r3, [r3, #4]
 8019c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	bf0c      	ite	eq
 8019c10:	2301      	moveq	r3, #1
 8019c12:	2300      	movne	r3, #0
 8019c14:	b2db      	uxtb	r3, r3
 8019c16:	461a      	mov	r2, r3
 8019c18:	683b      	ldr	r3, [r7, #0]
 8019c1a:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	685b      	ldr	r3, [r3, #4]
 8019c24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	bf14      	ite	ne
 8019c2c:	2301      	movne	r3, #1
 8019c2e:	2300      	moveq	r3, #0
 8019c30:	b2db      	uxtb	r3, r3
 8019c32:	461a      	mov	r2, r3
 8019c34:	683b      	ldr	r3, [r7, #0]
 8019c36:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	685b      	ldr	r3, [r3, #4]
 8019c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	bf14      	ite	ne
 8019c48:	2301      	movne	r3, #1
 8019c4a:	2300      	moveq	r3, #0
 8019c4c:	b2db      	uxtb	r3, r3
 8019c4e:	461a      	mov	r2, r3
 8019c50:	683b      	ldr	r3, [r7, #0]
 8019c52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	681b      	ldr	r3, [r3, #0]
 8019c5a:	685b      	ldr	r3, [r3, #4]
 8019c5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	bf14      	ite	ne
 8019c64:	2301      	movne	r3, #1
 8019c66:	2300      	moveq	r3, #0
 8019c68:	b2db      	uxtb	r3, r3
 8019c6a:	461a      	mov	r2, r3
 8019c6c:	683b      	ldr	r3, [r7, #0]
 8019c6e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	681b      	ldr	r3, [r3, #0]
 8019c76:	685b      	ldr	r3, [r3, #4]
 8019c78:	0e5b      	lsrs	r3, r3, #25
 8019c7a:	f003 021f 	and.w	r2, r3, #31
 8019c7e:	683b      	ldr	r3, [r7, #0]
 8019c80:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	68db      	ldr	r3, [r3, #12]
 8019c88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	bf14      	ite	ne
 8019c90:	2301      	movne	r3, #1
 8019c92:	2300      	moveq	r3, #0
 8019c94:	b2db      	uxtb	r3, r3
 8019c96:	461a      	mov	r2, r3
 8019c98:	683b      	ldr	r3, [r7, #0]
 8019c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	68db      	ldr	r3, [r3, #12]
 8019ca4:	f003 020f 	and.w	r2, r3, #15
 8019ca8:	683b      	ldr	r3, [r7, #0]
 8019caa:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cb2:	f003 0302 	and.w	r3, r3, #2
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	bf14      	ite	ne
 8019cba:	2301      	movne	r3, #1
 8019cbc:	2300      	moveq	r3, #0
 8019cbe:	b2db      	uxtb	r3, r3
 8019cc0:	461a      	mov	r2, r3
 8019cc2:	683b      	ldr	r3, [r7, #0]
 8019cc4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	681b      	ldr	r3, [r3, #0]
 8019ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019cd2:	2b00      	cmp	r3, #0
 8019cd4:	bf0c      	ite	eq
 8019cd6:	2301      	moveq	r3, #1
 8019cd8:	2300      	movne	r3, #0
 8019cda:	b2db      	uxtb	r3, r3
 8019cdc:	461a      	mov	r2, r3
 8019cde:	683b      	ldr	r3, [r7, #0]
 8019ce0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	681b      	ldr	r3, [r3, #0]
 8019ce8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cea:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019cee:	683b      	ldr	r3, [r7, #0]
 8019cf0:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	681b      	ldr	r3, [r3, #0]
 8019cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019cf8:	0c1b      	lsrs	r3, r3, #16
 8019cfa:	b29a      	uxth	r2, r3
 8019cfc:	683b      	ldr	r3, [r7, #0]
 8019cfe:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	681b      	ldr	r3, [r3, #0]
 8019d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d08:	f003 0301 	and.w	r3, r3, #1
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	bf14      	ite	ne
 8019d10:	2301      	movne	r3, #1
 8019d12:	2300      	moveq	r3, #0
 8019d14:	b2db      	uxtb	r3, r3
 8019d16:	461a      	mov	r2, r3
 8019d18:	683b      	ldr	r3, [r7, #0]
 8019d1a:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019d1e:	687b      	ldr	r3, [r7, #4]
 8019d20:	681b      	ldr	r3, [r3, #0]
 8019d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019d26:	f003 0302 	and.w	r3, r3, #2
 8019d2a:	2b00      	cmp	r3, #0
 8019d2c:	bf14      	ite	ne
 8019d2e:	2301      	movne	r3, #1
 8019d30:	2300      	moveq	r3, #0
 8019d32:	b2db      	uxtb	r3, r3
 8019d34:	461a      	mov	r2, r3
 8019d36:	683b      	ldr	r3, [r7, #0]
 8019d38:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019d44:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019d54:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8019d58:	683b      	ldr	r3, [r7, #0]
 8019d5a:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019d64:	f003 0308 	and.w	r3, r3, #8
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	bf14      	ite	ne
 8019d6c:	2301      	movne	r3, #1
 8019d6e:	2300      	moveq	r3, #0
 8019d70:	b2db      	uxtb	r3, r3
 8019d72:	461a      	mov	r2, r3
 8019d74:	683b      	ldr	r3, [r7, #0]
 8019d76:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019d82:	f003 0310 	and.w	r3, r3, #16
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	bf14      	ite	ne
 8019d8a:	2301      	movne	r3, #1
 8019d8c:	2300      	moveq	r3, #0
 8019d8e:	b2db      	uxtb	r3, r3
 8019d90:	461a      	mov	r2, r3
 8019d92:	683b      	ldr	r3, [r7, #0]
 8019d94:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019da4:	2b00      	cmp	r3, #0
 8019da6:	bf0c      	ite	eq
 8019da8:	2301      	moveq	r3, #1
 8019daa:	2300      	movne	r3, #0
 8019dac:	b2db      	uxtb	r3, r3
 8019dae:	461a      	mov	r2, r3
 8019db0:	683b      	ldr	r3, [r7, #0]
 8019db2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8019db6:	2300      	movs	r3, #0
        }
 8019db8:	4618      	mov	r0, r3
 8019dba:	370c      	adds	r7, #12
 8019dbc:	46bd      	mov	sp, r7
 8019dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc2:	4770      	bx	lr

08019dc4 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	6078      	str	r0, [r7, #4]
 8019dcc:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019dce:	683b      	ldr	r3, [r7, #0]
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d101      	bne.n	8019dd8 <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019dd4:	2301      	movs	r3, #1
 8019dd6:	e00a      	b.n	8019dee <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019ddc:	2b10      	cmp	r3, #16
 8019dde:	d105      	bne.n	8019dec <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019de0:	6839      	ldr	r1, [r7, #0]
 8019de2:	6878      	ldr	r0, [r7, #4]
 8019de4:	f000 f808 	bl	8019df8 <ETH_SetMACConfig>

                return HAL_OK;
 8019de8:	2300      	movs	r3, #0
 8019dea:	e000      	b.n	8019dee <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019dec:	2301      	movs	r3, #1
            }
        }
 8019dee:	4618      	mov	r0, r3
 8019df0:	3708      	adds	r7, #8
 8019df2:	46bd      	mov	sp, r7
 8019df4:	bd80      	pop	{r7, pc}
	...

08019df8 <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8019df8:	b480      	push	{r7}
 8019dfa:	b085      	sub	sp, #20
 8019dfc:	af00      	add	r7, sp, #0
 8019dfe:	6078      	str	r0, [r7, #4]
 8019e00:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8019e02:	683b      	ldr	r3, [r7, #0]
 8019e04:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 8019e06:	683b      	ldr	r3, [r7, #0]
 8019e08:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8019e0a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	791b      	ldrb	r3, [r3, #4]
 8019e10:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8019e12:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019e14:	683b      	ldr	r3, [r7, #0]
 8019e16:	7b1b      	ldrb	r3, [r3, #12]
 8019e18:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8019e1a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019e1c:	683b      	ldr	r3, [r7, #0]
 8019e1e:	7b5b      	ldrb	r3, [r3, #13]
 8019e20:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8019e22:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019e24:	683b      	ldr	r3, [r7, #0]
 8019e26:	7b9b      	ldrb	r3, [r3, #14]
 8019e28:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8019e2a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019e2c:	683b      	ldr	r3, [r7, #0]
 8019e2e:	7bdb      	ldrb	r3, [r3, #15]
 8019e30:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8019e32:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019e34:	683a      	ldr	r2, [r7, #0]
 8019e36:	7c12      	ldrb	r2, [r2, #16]
 8019e38:	2a00      	cmp	r2, #0
 8019e3a:	d102      	bne.n	8019e42 <ETH_SetMACConfig+0x4a>
 8019e3c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8019e40:	e000      	b.n	8019e44 <ETH_SetMACConfig+0x4c>
 8019e42:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8019e44:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019e46:	683a      	ldr	r2, [r7, #0]
 8019e48:	7c52      	ldrb	r2, [r2, #17]
 8019e4a:	2a00      	cmp	r2, #0
 8019e4c:	d102      	bne.n	8019e54 <ETH_SetMACConfig+0x5c>
 8019e4e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8019e52:	e000      	b.n	8019e56 <ETH_SetMACConfig+0x5e>
 8019e54:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8019e56:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019e58:	683b      	ldr	r3, [r7, #0]
 8019e5a:	7c9b      	ldrb	r3, [r3, #18]
 8019e5c:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019e5e:	431a      	orrs	r2, r3
                          macconf->Speed |
 8019e60:	683b      	ldr	r3, [r7, #0]
 8019e62:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019e64:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8019e66:	683b      	ldr	r3, [r7, #0]
 8019e68:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8019e6a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	7f1b      	ldrb	r3, [r3, #28]
 8019e70:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8019e72:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019e74:	683b      	ldr	r3, [r7, #0]
 8019e76:	7f5b      	ldrb	r3, [r3, #29]
 8019e78:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019e7a:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019e7c:	683a      	ldr	r2, [r7, #0]
 8019e7e:	7f92      	ldrb	r2, [r2, #30]
 8019e80:	2a00      	cmp	r2, #0
 8019e82:	d102      	bne.n	8019e8a <ETH_SetMACConfig+0x92>
 8019e84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8019e88:	e000      	b.n	8019e8c <ETH_SetMACConfig+0x94>
 8019e8a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019e8c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	7fdb      	ldrb	r3, [r3, #31]
 8019e92:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019e94:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019e96:	683a      	ldr	r2, [r7, #0]
 8019e98:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019e9c:	2a00      	cmp	r2, #0
 8019e9e:	d102      	bne.n	8019ea6 <ETH_SetMACConfig+0xae>
 8019ea0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019ea4:	e000      	b.n	8019ea8 <ETH_SetMACConfig+0xb0>
 8019ea6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019ea8:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8019eaa:	683b      	ldr	r3, [r7, #0]
 8019eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019eae:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8019eb0:	683b      	ldr	r3, [r7, #0]
 8019eb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8019eb6:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8019eb8:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8019eba:	683b      	ldr	r3, [r7, #0]
 8019ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019ebe:	4313      	orrs	r3, r2
 8019ec0:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	681a      	ldr	r2, [r3, #0]
 8019ec8:	4b56      	ldr	r3, [pc, #344]	@ (801a024 <ETH_SetMACConfig+0x22c>)
 8019eca:	4013      	ands	r3, r2
 8019ecc:	687a      	ldr	r2, [r7, #4]
 8019ece:	6812      	ldr	r2, [r2, #0]
 8019ed0:	68f9      	ldr	r1, [r7, #12]
 8019ed2:	430b      	orrs	r3, r1
 8019ed4:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019ed6:	683b      	ldr	r3, [r7, #0]
 8019ed8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019eda:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019ee2:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019ee4:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019ee6:	683b      	ldr	r3, [r7, #0]
 8019ee8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019eec:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019eee:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019ef0:	683b      	ldr	r3, [r7, #0]
 8019ef2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019ef6:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8019ef8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8019efa:	683a      	ldr	r2, [r7, #0]
 8019efc:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8019f00:	2a00      	cmp	r2, #0
 8019f02:	d102      	bne.n	8019f0a <ETH_SetMACConfig+0x112>
 8019f04:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8019f08:	e000      	b.n	8019f0c <ETH_SetMACConfig+0x114>
 8019f0a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019f0c:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019f12:	4313      	orrs	r3, r2
 8019f14:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	685a      	ldr	r2, [r3, #4]
 8019f1c:	4b42      	ldr	r3, [pc, #264]	@ (801a028 <ETH_SetMACConfig+0x230>)
 8019f1e:	4013      	ands	r3, r2
 8019f20:	687a      	ldr	r2, [r7, #4]
 8019f22:	6812      	ldr	r2, [r2, #0]
 8019f24:	68f9      	ldr	r1, [r7, #12]
 8019f26:	430b      	orrs	r3, r1
 8019f28:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019f2a:	683b      	ldr	r3, [r7, #0]
 8019f2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019f30:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8019f32:	683b      	ldr	r3, [r7, #0]
 8019f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8019f36:	4313      	orrs	r3, r2
 8019f38:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	68da      	ldr	r2, [r3, #12]
 8019f40:	4b3a      	ldr	r3, [pc, #232]	@ (801a02c <ETH_SetMACConfig+0x234>)
 8019f42:	4013      	ands	r3, r2
 8019f44:	687a      	ldr	r2, [r7, #4]
 8019f46:	6812      	ldr	r2, [r2, #0]
 8019f48:	68f9      	ldr	r1, [r7, #12]
 8019f4a:	430b      	orrs	r3, r1
 8019f4c:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019f4e:	683b      	ldr	r3, [r7, #0]
 8019f50:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8019f54:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 8019f56:	683b      	ldr	r3, [r7, #0]
 8019f58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019f5a:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8019f5c:	683a      	ldr	r2, [r7, #0]
 8019f5e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8019f62:	2a00      	cmp	r2, #0
 8019f64:	d101      	bne.n	8019f6a <ETH_SetMACConfig+0x172>
 8019f66:	2280      	movs	r2, #128	@ 0x80
 8019f68:	e000      	b.n	8019f6c <ETH_SetMACConfig+0x174>
 8019f6a:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8019f6c:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8019f6e:	683b      	ldr	r3, [r7, #0]
 8019f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019f72:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019f74:	4313      	orrs	r3, r2
 8019f76:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019f7e:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019f82:	4013      	ands	r3, r2
 8019f84:	687a      	ldr	r2, [r7, #4]
 8019f86:	6812      	ldr	r2, [r2, #0]
 8019f88:	68f9      	ldr	r1, [r7, #12]
 8019f8a:	430b      	orrs	r3, r1
 8019f8c:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019f8e:	683b      	ldr	r3, [r7, #0]
 8019f90:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019f94:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 8019f96:	683b      	ldr	r3, [r7, #0]
 8019f98:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019f9c:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019f9e:	4313      	orrs	r3, r2
 8019fa0:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019faa:	f023 0103 	bic.w	r1, r3, #3
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	68fa      	ldr	r2, [r7, #12]
 8019fb4:	430a      	orrs	r2, r1
 8019fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019fc2:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8019fc6:	683b      	ldr	r3, [r7, #0]
 8019fc8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	430a      	orrs	r2, r1
 8019fd0:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8019fd4:	683b      	ldr	r3, [r7, #0]
 8019fd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019fd8:	683a      	ldr	r2, [r7, #0]
 8019fda:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019fde:	2a00      	cmp	r2, #0
 8019fe0:	d101      	bne.n	8019fe6 <ETH_SetMACConfig+0x1ee>
 8019fe2:	2240      	movs	r2, #64	@ 0x40
 8019fe4:	e000      	b.n	8019fe8 <ETH_SetMACConfig+0x1f0>
 8019fe6:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 8019fe8:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 8019fea:	683b      	ldr	r3, [r7, #0]
 8019fec:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019ff0:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019ff2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8019ff4:	683b      	ldr	r3, [r7, #0]
 8019ff6:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8019ffa:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8019ffc:	4313      	orrs	r3, r2
 8019ffe:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 801a008:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	68fa      	ldr	r2, [r7, #12]
 801a012:	430a      	orrs	r2, r1
 801a014:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 801a018:	bf00      	nop
 801a01a:	3714      	adds	r7, #20
 801a01c:	46bd      	mov	sp, r7
 801a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a022:	4770      	bx	lr
 801a024:	00048083 	.word	0x00048083
 801a028:	c0f88000 	.word	0xc0f88000
 801a02c:	fffffef0 	.word	0xfffffef0

0801a030 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 801a030:	b480      	push	{r7}
 801a032:	b085      	sub	sp, #20
 801a034:	af00      	add	r7, sp, #0
 801a036:	6078      	str	r0, [r7, #4]
 801a038:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 801a03a:	687b      	ldr	r3, [r7, #4]
 801a03c:	681b      	ldr	r3, [r3, #0]
 801a03e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a042:	681a      	ldr	r2, [r3, #0]
 801a044:	4b38      	ldr	r3, [pc, #224]	@ (801a128 <ETH_SetDMAConfig+0xf8>)
 801a046:	4013      	ands	r3, r2
 801a048:	683a      	ldr	r2, [r7, #0]
 801a04a:	6811      	ldr	r1, [r2, #0]
 801a04c:	687a      	ldr	r2, [r7, #4]
 801a04e:	6812      	ldr	r2, [r2, #0]
 801a050:	430b      	orrs	r3, r1
 801a052:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a056:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a058:	683b      	ldr	r3, [r7, #0]
 801a05a:	791b      	ldrb	r3, [r3, #4]
 801a05c:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 801a05e:	683b      	ldr	r3, [r7, #0]
 801a060:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a062:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 801a064:	683b      	ldr	r3, [r7, #0]
 801a066:	7b1b      	ldrb	r3, [r3, #12]
 801a068:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801a06a:	4313      	orrs	r3, r2
 801a06c:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a076:	685a      	ldr	r2, [r3, #4]
 801a078:	4b2c      	ldr	r3, [pc, #176]	@ (801a12c <ETH_SetDMAConfig+0xfc>)
 801a07a:	4013      	ands	r3, r2
 801a07c:	687a      	ldr	r2, [r7, #4]
 801a07e:	6812      	ldr	r2, [r2, #0]
 801a080:	68f9      	ldr	r1, [r7, #12]
 801a082:	430b      	orrs	r3, r1
 801a084:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a088:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a08a:	683b      	ldr	r3, [r7, #0]
 801a08c:	7b5b      	ldrb	r3, [r3, #13]
 801a08e:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 801a090:	683b      	ldr	r3, [r7, #0]
 801a092:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801a094:	4313      	orrs	r3, r2
 801a096:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a0a0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 801a0a4:	4b22      	ldr	r3, [pc, #136]	@ (801a130 <ETH_SetDMAConfig+0x100>)
 801a0a6:	4013      	ands	r3, r2
 801a0a8:	687a      	ldr	r2, [r7, #4]
 801a0aa:	6812      	ldr	r2, [r2, #0]
 801a0ac:	68f9      	ldr	r1, [r7, #12]
 801a0ae:	430b      	orrs	r3, r1
 801a0b0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a0b4:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a0b8:	683b      	ldr	r3, [r7, #0]
 801a0ba:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 801a0bc:	683b      	ldr	r3, [r7, #0]
 801a0be:	7d1b      	ldrb	r3, [r3, #20]
 801a0c0:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a0c2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 801a0c4:	683b      	ldr	r3, [r7, #0]
 801a0c6:	7f5b      	ldrb	r3, [r3, #29]
 801a0c8:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801a0ca:	4313      	orrs	r3, r2
 801a0cc:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a0d6:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801a0da:	4b16      	ldr	r3, [pc, #88]	@ (801a134 <ETH_SetDMAConfig+0x104>)
 801a0dc:	4013      	ands	r3, r2
 801a0de:	687a      	ldr	r2, [r7, #4]
 801a0e0:	6812      	ldr	r2, [r2, #0]
 801a0e2:	68f9      	ldr	r1, [r7, #12]
 801a0e4:	430b      	orrs	r3, r1
 801a0e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a0ea:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a0ee:	683b      	ldr	r3, [r7, #0]
 801a0f0:	7f1b      	ldrb	r3, [r3, #28]
 801a0f2:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 801a0f4:	683b      	ldr	r3, [r7, #0]
 801a0f6:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801a0f8:	4313      	orrs	r3, r2
 801a0fa:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a104:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 801a108:	4b0b      	ldr	r3, [pc, #44]	@ (801a138 <ETH_SetDMAConfig+0x108>)
 801a10a:	4013      	ands	r3, r2
 801a10c:	687a      	ldr	r2, [r7, #4]
 801a10e:	6812      	ldr	r2, [r2, #0]
 801a110:	68f9      	ldr	r1, [r7, #12]
 801a112:	430b      	orrs	r3, r1
 801a114:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801a118:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 801a11c:	bf00      	nop
 801a11e:	3714      	adds	r7, #20
 801a120:	46bd      	mov	sp, r7
 801a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a126:	4770      	bx	lr
 801a128:	ffff87fd 	.word	0xffff87fd
 801a12c:	ffff2ffe 	.word	0xffff2ffe
 801a130:	fffec000 	.word	0xfffec000
 801a134:	ffc0efef 	.word	0xffc0efef
 801a138:	7fc0ffff 	.word	0x7fc0ffff

0801a13c <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b0a4      	sub	sp, #144	@ 0x90
 801a140:	af00      	add	r7, sp, #0
 801a142:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 801a144:	2301      	movs	r3, #1
 801a146:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801a14a:	2300      	movs	r3, #0
 801a14c:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 801a14e:	2300      	movs	r3, #0
 801a150:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801a154:	2300      	movs	r3, #0
 801a156:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 801a15a:	2301      	movs	r3, #1
 801a15c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 801a160:	2301      	movs	r3, #1
 801a162:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 801a166:	2301      	movs	r3, #1
 801a168:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 801a16c:	2300      	movs	r3, #0
 801a16e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 801a172:	2301      	movs	r3, #1
 801a174:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801a178:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801a17c:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 801a17e:	2300      	movs	r3, #0
 801a180:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 801a184:	2300      	movs	r3, #0
 801a186:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801a188:	2300      	movs	r3, #0
 801a18a:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 801a18e:	2300      	movs	r3, #0
 801a190:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 801a194:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801a198:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801a19a:	2300      	movs	r3, #0
 801a19c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 801a1a0:	2300      	movs	r3, #0
 801a1a2:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 801a1a4:	2301      	movs	r3, #1
 801a1a6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801a1b6:	2300      	movs	r3, #0
 801a1b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801a1ba:	2300      	movs	r3, #0
 801a1bc:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 801a1be:	2300      	movs	r3, #0
 801a1c0:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 801a1c2:	2300      	movs	r3, #0
 801a1c4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 801a1ce:	2301      	movs	r3, #1
 801a1d0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 801a1d4:	2320      	movs	r3, #32
 801a1d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801a1da:	2301      	movs	r3, #1
 801a1dc:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801a1e6:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801a1ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 801a1ec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a1f0:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801a1f8:	2302      	movs	r3, #2
 801a1fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 801a1fe:	2300      	movs	r3, #0
 801a200:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801a204:	2300      	movs	r3, #0
 801a206:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 801a20a:	2300      	movs	r3, #0
 801a20c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 801a210:	2301      	movs	r3, #1
 801a212:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 801a216:	2300      	movs	r3, #0
 801a218:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 801a21a:	2301      	movs	r3, #1
 801a21c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 801a220:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801a224:	4619      	mov	r1, r3
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f7ff fde6 	bl	8019df8 <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801a22c:	2301      	movs	r3, #1
 801a22e:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801a230:	2301      	movs	r3, #1
 801a232:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 801a234:	2300      	movs	r3, #0
 801a236:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 801a238:	2300      	movs	r3, #0
 801a23a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 801a23e:	2300      	movs	r3, #0
 801a240:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 801a242:	2300      	movs	r3, #0
 801a244:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801a246:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a24a:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 801a24c:	2300      	movs	r3, #0
 801a24e:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801a250:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801a254:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801a256:	2300      	movs	r3, #0
 801a258:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 801a25c:	f44f 7306 	mov.w	r3, #536	@ 0x218
 801a260:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 801a262:	f107 0308 	add.w	r3, r7, #8
 801a266:	4619      	mov	r1, r3
 801a268:	6878      	ldr	r0, [r7, #4]
 801a26a:	f7ff fee1 	bl	801a030 <ETH_SetDMAConfig>
        }
 801a26e:	bf00      	nop
 801a270:	3790      	adds	r7, #144	@ 0x90
 801a272:	46bd      	mov	sp, r7
 801a274:	bd80      	pop	{r7, pc}
	...

0801a278 <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 801a278:	b580      	push	{r7, lr}
 801a27a:	b084      	sub	sp, #16
 801a27c:	af00      	add	r7, sp, #0
 801a27e:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801a288:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 801a28a:	68fb      	ldr	r3, [r7, #12]
 801a28c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801a290:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 801a292:	f003 fdf1 	bl	801de78 <HAL_RCC_GetHCLKFreq>
 801a296:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 801a298:	68bb      	ldr	r3, [r7, #8]
 801a29a:	4a1e      	ldr	r2, [pc, #120]	@ (801a314 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 801a29c:	4293      	cmp	r3, r2
 801a29e:	d908      	bls.n	801a2b2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 801a2a0:	68bb      	ldr	r3, [r7, #8]
 801a2a2:	4a1d      	ldr	r2, [pc, #116]	@ (801a318 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a2a4:	4293      	cmp	r3, r2
 801a2a6:	d804      	bhi.n	801a2b2 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801a2a8:	68fb      	ldr	r3, [r7, #12]
 801a2aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801a2ae:	60fb      	str	r3, [r7, #12]
 801a2b0:	e027      	b.n	801a302 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 801a2b2:	68bb      	ldr	r3, [r7, #8]
 801a2b4:	4a18      	ldr	r2, [pc, #96]	@ (801a318 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801a2b6:	4293      	cmp	r3, r2
 801a2b8:	d908      	bls.n	801a2cc <ETH_MAC_MDIO_ClkConfig+0x54>
 801a2ba:	68bb      	ldr	r3, [r7, #8]
 801a2bc:	4a17      	ldr	r2, [pc, #92]	@ (801a31c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a2be:	4293      	cmp	r3, r2
 801a2c0:	d204      	bcs.n	801a2cc <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801a2c8:	60fb      	str	r3, [r7, #12]
 801a2ca:	e01a      	b.n	801a302 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 801a2cc:	68bb      	ldr	r3, [r7, #8]
 801a2ce:	4a13      	ldr	r2, [pc, #76]	@ (801a31c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 801a2d0:	4293      	cmp	r3, r2
 801a2d2:	d303      	bcc.n	801a2dc <ETH_MAC_MDIO_ClkConfig+0x64>
 801a2d4:	68bb      	ldr	r3, [r7, #8]
 801a2d6:	4a12      	ldr	r2, [pc, #72]	@ (801a320 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a2d8:	4293      	cmp	r3, r2
 801a2da:	d911      	bls.n	801a300 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 801a2dc:	68bb      	ldr	r3, [r7, #8]
 801a2de:	4a10      	ldr	r2, [pc, #64]	@ (801a320 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801a2e0:	4293      	cmp	r3, r2
 801a2e2:	d908      	bls.n	801a2f6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 801a2e4:	68bb      	ldr	r3, [r7, #8]
 801a2e6:	4a0f      	ldr	r2, [pc, #60]	@ (801a324 <ETH_MAC_MDIO_ClkConfig+0xac>)
 801a2e8:	4293      	cmp	r3, r2
 801a2ea:	d804      	bhi.n	801a2f6 <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a2f2:	60fb      	str	r3, [r7, #12]
 801a2f4:	e005      	b.n	801a302 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 801a2f6:	68fb      	ldr	r3, [r7, #12]
 801a2f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 801a2fc:	60fb      	str	r3, [r7, #12]
 801a2fe:	e000      	b.n	801a302 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 801a300:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	68fa      	ldr	r2, [r7, #12]
 801a308:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 801a30c:	bf00      	nop
 801a30e:	3710      	adds	r7, #16
 801a310:	46bd      	mov	sp, r7
 801a312:	bd80      	pop	{r7, pc}
 801a314:	01312cff 	.word	0x01312cff
 801a318:	02160ebf 	.word	0x02160ebf
 801a31c:	03938700 	.word	0x03938700
 801a320:	05f5e0ff 	.word	0x05f5e0ff
 801a324:	08f0d17f 	.word	0x08f0d17f

0801a328 <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a328:	b480      	push	{r7}
 801a32a:	b085      	sub	sp, #20
 801a32c:	af00      	add	r7, sp, #0
 801a32e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a330:	2300      	movs	r3, #0
 801a332:	60fb      	str	r3, [r7, #12]
 801a334:	e01d      	b.n	801a372 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	68d9      	ldr	r1, [r3, #12]
 801a33a:	68fa      	ldr	r2, [r7, #12]
 801a33c:	4613      	mov	r3, r2
 801a33e:	005b      	lsls	r3, r3, #1
 801a340:	4413      	add	r3, r2
 801a342:	00db      	lsls	r3, r3, #3
 801a344:	440b      	add	r3, r1
 801a346:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801a348:	68bb      	ldr	r3, [r7, #8]
 801a34a:	2200      	movs	r2, #0
 801a34c:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a34e:	68bb      	ldr	r3, [r7, #8]
 801a350:	2200      	movs	r2, #0
 801a352:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 801a354:	68bb      	ldr	r3, [r7, #8]
 801a356:	2200      	movs	r2, #0
 801a358:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801a35a:	68bb      	ldr	r3, [r7, #8]
 801a35c:	2200      	movs	r2, #0
 801a35e:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 801a360:	68b9      	ldr	r1, [r7, #8]
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	68fa      	ldr	r2, [r7, #12]
 801a366:	3206      	adds	r2, #6
 801a368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 801a36c:	68fb      	ldr	r3, [r7, #12]
 801a36e:	3301      	adds	r3, #1
 801a370:	60fb      	str	r3, [r7, #12]
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	2b03      	cmp	r3, #3
 801a376:	d9de      	bls.n	801a336 <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	2200      	movs	r2, #0
 801a37c:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	2200      	movs	r2, #0
 801a382:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a38c:	461a      	mov	r2, r3
 801a38e:	2303      	movs	r3, #3
 801a390:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	68da      	ldr	r2, [r3, #12]
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a3a0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	68da      	ldr	r2, [r3, #12]
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	681b      	ldr	r3, [r3, #0]
 801a3ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a3b0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 801a3b4:	bf00      	nop
 801a3b6:	3714      	adds	r7, #20
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3be:	4770      	bx	lr

0801a3c0 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 801a3c0:	b480      	push	{r7}
 801a3c2:	b085      	sub	sp, #20
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a3c8:	2300      	movs	r3, #0
 801a3ca:	60fb      	str	r3, [r7, #12]
 801a3cc:	e023      	b.n	801a416 <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	6919      	ldr	r1, [r3, #16]
 801a3d2:	68fa      	ldr	r2, [r7, #12]
 801a3d4:	4613      	mov	r3, r2
 801a3d6:	005b      	lsls	r3, r3, #1
 801a3d8:	4413      	add	r3, r2
 801a3da:	00db      	lsls	r3, r3, #3
 801a3dc:	440b      	add	r3, r1
 801a3de:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 801a3e0:	68bb      	ldr	r3, [r7, #8]
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 801a3e6:	68bb      	ldr	r3, [r7, #8]
 801a3e8:	2200      	movs	r2, #0
 801a3ea:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 801a3ec:	68bb      	ldr	r3, [r7, #8]
 801a3ee:	2200      	movs	r2, #0
 801a3f0:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 801a3f2:	68bb      	ldr	r3, [r7, #8]
 801a3f4:	2200      	movs	r2, #0
 801a3f6:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 801a3f8:	68bb      	ldr	r3, [r7, #8]
 801a3fa:	2200      	movs	r2, #0
 801a3fc:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 801a3fe:	68bb      	ldr	r3, [r7, #8]
 801a400:	2200      	movs	r2, #0
 801a402:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 801a404:	68b9      	ldr	r1, [r7, #8]
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	68fa      	ldr	r2, [r7, #12]
 801a40a:	320c      	adds	r2, #12
 801a40c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	3301      	adds	r3, #1
 801a414:	60fb      	str	r3, [r7, #12]
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	2b03      	cmp	r3, #3
 801a41a:	d9d8      	bls.n	801a3ce <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 801a41c:	687b      	ldr	r3, [r7, #4]
 801a41e:	2200      	movs	r2, #0
 801a420:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 801a422:	687b      	ldr	r3, [r7, #4]
 801a424:	2200      	movs	r2, #0
 801a426:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	2200      	movs	r2, #0
 801a42c:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	2200      	movs	r2, #0
 801a432:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	2200      	movs	r2, #0
 801a438:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a442:	461a      	mov	r2, r3
 801a444:	2303      	movs	r3, #3
 801a446:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	691a      	ldr	r2, [r3, #16]
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	681b      	ldr	r3, [r3, #0]
 801a452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a456:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	691b      	ldr	r3, [r3, #16]
 801a45e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 801a462:	687b      	ldr	r3, [r7, #4]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801a46a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 801a46e:	bf00      	nop
 801a470:	3714      	adds	r7, #20
 801a472:	46bd      	mov	sp, r7
 801a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a478:	4770      	bx	lr
	...

0801a47c <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b086      	sub	sp, #24
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a488:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a48a:	e032      	b.n	801a4f2 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	697a      	ldr	r2, [r7, #20]
 801a490:	3206      	adds	r2, #6
 801a492:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a496:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 801a498:	693b      	ldr	r3, [r7, #16]
 801a49a:	68db      	ldr	r3, [r3, #12]
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	db31      	blt.n	801a504 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 801a4a0:	693b      	ldr	r3, [r7, #16]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801a4a6:	68fb      	ldr	r3, [r7, #12]
 801a4a8:	2b00      	cmp	r3, #0
 801a4aa:	d02d      	beq.n	801a508 <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 801a4ac:	68f8      	ldr	r0, [r7, #12]
 801a4ae:	f7f0 fab4 	bl	800aa1a <pxPacketBuffer_to_NetworkBuffer>
 801a4b2:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 801a4b4:	68bb      	ldr	r3, [r7, #8]
 801a4b6:	2b00      	cmp	r3, #0
 801a4b8:	d002      	beq.n	801a4c0 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801a4ba:	68b8      	ldr	r0, [r7, #8]
 801a4bc:	f7fd faa2 	bl	8017a04 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 801a4c0:	693b      	ldr	r3, [r7, #16]
 801a4c2:	2200      	movs	r2, #0
 801a4c4:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801a4c6:	697b      	ldr	r3, [r7, #20]
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	617b      	str	r3, [r7, #20]
 801a4cc:	697b      	ldr	r3, [r7, #20]
 801a4ce:	2b03      	cmp	r3, #3
 801a4d0:	d902      	bls.n	801a4d8 <ETH_Clear_Tx_Descriptors+0x5c>
 801a4d2:	697b      	ldr	r3, [r7, #20]
 801a4d4:	3b04      	subs	r3, #4
 801a4d6:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	697a      	ldr	r2, [r7, #20]
 801a4dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 801a4de:	f3bf 8f4f 	dsb	sy
}
 801a4e2:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 801a4e4:	4b0b      	ldr	r3, [pc, #44]	@ (801a514 <ETH_Clear_Tx_Descriptors+0x98>)
 801a4e6:	6818      	ldr	r0, [r3, #0]
 801a4e8:	2300      	movs	r3, #0
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	2100      	movs	r1, #0
 801a4ee:	f7e9 fb41 	bl	8003b74 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801a4f2:	4b08      	ldr	r3, [pc, #32]	@ (801a514 <ETH_Clear_Tx_Descriptors+0x98>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	4618      	mov	r0, r3
 801a4f8:	f7e9 fde2 	bl	80040c0 <uxQueueMessagesWaiting>
 801a4fc:	4603      	mov	r3, r0
 801a4fe:	2b04      	cmp	r3, #4
 801a500:	d1c4      	bne.n	801a48c <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 801a502:	e002      	b.n	801a50a <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 801a504:	bf00      	nop
 801a506:	e000      	b.n	801a50a <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 801a508:	bf00      	nop
        }
 801a50a:	bf00      	nop
 801a50c:	3718      	adds	r7, #24
 801a50e:	46bd      	mov	sp, r7
 801a510:	bd80      	pop	{r7, pc}
 801a512:	bf00      	nop
 801a514:	20002474 	.word	0x20002474

0801a518 <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 801a518:	b480      	push	{r7}
 801a51a:	b08b      	sub	sp, #44	@ 0x2c
 801a51c:	af00      	add	r7, sp, #0
 801a51e:	60f8      	str	r0, [r7, #12]
 801a520:	60b9      	str	r1, [r7, #8]
 801a522:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	3318      	adds	r3, #24
 801a528:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801a52a:	6a3b      	ldr	r3, [r7, #32]
 801a52c:	691b      	ldr	r3, [r3, #16]
 801a52e:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 801a530:	6a3b      	ldr	r3, [r7, #32]
 801a532:	69fa      	ldr	r2, [r7, #28]
 801a534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a538:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	689b      	ldr	r3, [r3, #8]
 801a53e:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 801a540:	697b      	ldr	r3, [r7, #20]
 801a542:	2200      	movs	r2, #0
 801a544:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801a546:	69bb      	ldr	r3, [r7, #24]
 801a548:	68db      	ldr	r3, [r3, #12]
 801a54a:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 801a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a54e:	2b00      	cmp	r3, #0
 801a550:	da01      	bge.n	801a556 <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 801a552:	2302      	movs	r3, #2
 801a554:	e05c      	b.n	801a610 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801a556:	697b      	ldr	r3, [r7, #20]
 801a558:	681b      	ldr	r3, [r3, #0]
 801a55a:	461a      	mov	r2, r3
 801a55c:	69bb      	ldr	r3, [r7, #24]
 801a55e:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 801a560:	69bb      	ldr	r3, [r7, #24]
 801a562:	689a      	ldr	r2, [r3, #8]
 801a564:	4b2d      	ldr	r3, [pc, #180]	@ (801a61c <ETH_Prepare_Tx_Descriptors+0x104>)
 801a566:	4013      	ands	r3, r2
 801a568:	697a      	ldr	r2, [r7, #20]
 801a56a:	6852      	ldr	r2, [r2, #4]
 801a56c:	431a      	orrs	r2, r3
 801a56e:	69bb      	ldr	r3, [r7, #24]
 801a570:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 801a572:	69bb      	ldr	r3, [r7, #24]
 801a574:	2200      	movs	r2, #0
 801a576:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 801a578:	69bb      	ldr	r3, [r7, #24]
 801a57a:	689a      	ldr	r2, [r3, #8]
 801a57c:	4b28      	ldr	r3, [pc, #160]	@ (801a620 <ETH_Prepare_Tx_Descriptors+0x108>)
 801a57e:	4013      	ands	r3, r2
 801a580:	69ba      	ldr	r2, [r7, #24]
 801a582:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 801a584:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a586:	4b27      	ldr	r3, [pc, #156]	@ (801a624 <ETH_Prepare_Tx_Descriptors+0x10c>)
 801a588:	4013      	ands	r3, r2
 801a58a:	68ba      	ldr	r2, [r7, #8]
 801a58c:	6852      	ldr	r2, [r2, #4]
 801a58e:	4313      	orrs	r3, r2
 801a590:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 801a592:	68bb      	ldr	r3, [r7, #8]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	f003 0301 	and.w	r3, r3, #1
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d006      	beq.n	801a5ac <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 801a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 801a5a4:	68bb      	ldr	r3, [r7, #8]
 801a5a6:	695b      	ldr	r3, [r3, #20]
 801a5a8:	4313      	orrs	r3, r2
 801a5aa:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 801a5ac:	68bb      	ldr	r3, [r7, #8]
 801a5ae:	681b      	ldr	r3, [r3, #0]
 801a5b0:	f003 0320 	and.w	r3, r3, #32
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d006      	beq.n	801a5c6 <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 801a5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 801a5be:	68bb      	ldr	r3, [r7, #8]
 801a5c0:	691b      	ldr	r3, [r3, #16]
 801a5c2:	4313      	orrs	r3, r2
 801a5c4:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5c8:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 801a5cc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 801a5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801a5d4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801a5d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801a5dc:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 801a5de:	687b      	ldr	r3, [r7, #4]
 801a5e0:	2b00      	cmp	r3, #0
 801a5e2:	d006      	beq.n	801a5f2 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a5e4:	69bb      	ldr	r3, [r7, #24]
 801a5e6:	689b      	ldr	r3, [r3, #8]
 801a5e8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801a5ec:	69bb      	ldr	r3, [r7, #24]
 801a5ee:	609a      	str	r2, [r3, #8]
 801a5f0:	e005      	b.n	801a5fe <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 801a5f2:	69bb      	ldr	r3, [r7, #24]
 801a5f4:	689b      	ldr	r3, [r3, #8]
 801a5f6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 801a5fa:	69bb      	ldr	r3, [r7, #24]
 801a5fc:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 801a5fe:	69bb      	ldr	r3, [r7, #24]
 801a600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a602:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 801a604:	69bb      	ldr	r3, [r7, #24]
 801a606:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801a608:	f3bf 8f4f 	dsb	sy
}
 801a60c:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 801a60e:	2300      	movs	r3, #0
        }
 801a610:	4618      	mov	r0, r3
 801a612:	372c      	adds	r7, #44	@ 0x2c
 801a614:	46bd      	mov	sp, r7
 801a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61a:	4770      	bx	lr
 801a61c:	ffffc000 	.word	0xffffc000
 801a620:	c000ffff 	.word	0xc000ffff
 801a624:	ffff8000 	.word	0xffff8000

0801a628 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 801a628:	b580      	push	{r7, lr}
 801a62a:	b082      	sub	sp, #8
 801a62c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801a62e:	2003      	movs	r0, #3
 801a630:	f000 f9a0 	bl	801a974 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801a634:	f003 faa6 	bl	801db84 <HAL_RCC_GetSysClockFreq>
 801a638:	4602      	mov	r2, r0
 801a63a:	4b15      	ldr	r3, [pc, #84]	@ (801a690 <HAL_Init+0x68>)
 801a63c:	699b      	ldr	r3, [r3, #24]
 801a63e:	0a1b      	lsrs	r3, r3, #8
 801a640:	f003 030f 	and.w	r3, r3, #15
 801a644:	4913      	ldr	r1, [pc, #76]	@ (801a694 <HAL_Init+0x6c>)
 801a646:	5ccb      	ldrb	r3, [r1, r3]
 801a648:	f003 031f 	and.w	r3, r3, #31
 801a64c:	fa22 f303 	lsr.w	r3, r2, r3
 801a650:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801a652:	4b0f      	ldr	r3, [pc, #60]	@ (801a690 <HAL_Init+0x68>)
 801a654:	699b      	ldr	r3, [r3, #24]
 801a656:	f003 030f 	and.w	r3, r3, #15
 801a65a:	4a0e      	ldr	r2, [pc, #56]	@ (801a694 <HAL_Init+0x6c>)
 801a65c:	5cd3      	ldrb	r3, [r2, r3]
 801a65e:	f003 031f 	and.w	r3, r3, #31
 801a662:	687a      	ldr	r2, [r7, #4]
 801a664:	fa22 f303 	lsr.w	r3, r2, r3
 801a668:	4a0b      	ldr	r2, [pc, #44]	@ (801a698 <HAL_Init+0x70>)
 801a66a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801a66c:	4a0b      	ldr	r2, [pc, #44]	@ (801a69c <HAL_Init+0x74>)
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 801a672:	200f      	movs	r0, #15
 801a674:	f000 f814 	bl	801a6a0 <HAL_InitTick>
 801a678:	4603      	mov	r3, r0
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d001      	beq.n	801a682 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801a67e:	2301      	movs	r3, #1
 801a680:	e002      	b.n	801a688 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 801a682:	f7e7 fe8f 	bl	80023a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801a686:	2300      	movs	r3, #0
}
 801a688:	4618      	mov	r0, r3
 801a68a:	3708      	adds	r7, #8
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bd80      	pop	{r7, pc}
 801a690:	58024400 	.word	0x58024400
 801a694:	08027e94 	.word	0x08027e94
 801a698:	20000004 	.word	0x20000004
 801a69c:	20000000 	.word	0x20000000

0801a6a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801a6a0:	b580      	push	{r7, lr}
 801a6a2:	b082      	sub	sp, #8
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801a6a8:	4b15      	ldr	r3, [pc, #84]	@ (801a700 <HAL_InitTick+0x60>)
 801a6aa:	781b      	ldrb	r3, [r3, #0]
 801a6ac:	2b00      	cmp	r3, #0
 801a6ae:	d101      	bne.n	801a6b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 801a6b0:	2301      	movs	r3, #1
 801a6b2:	e021      	b.n	801a6f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 801a6b4:	4b13      	ldr	r3, [pc, #76]	@ (801a704 <HAL_InitTick+0x64>)
 801a6b6:	681a      	ldr	r2, [r3, #0]
 801a6b8:	4b11      	ldr	r3, [pc, #68]	@ (801a700 <HAL_InitTick+0x60>)
 801a6ba:	781b      	ldrb	r3, [r3, #0]
 801a6bc:	4619      	mov	r1, r3
 801a6be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801a6c2:	fbb3 f3f1 	udiv	r3, r3, r1
 801a6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a6ca:	4618      	mov	r0, r3
 801a6cc:	f000 f985 	bl	801a9da <HAL_SYSTICK_Config>
 801a6d0:	4603      	mov	r3, r0
 801a6d2:	2b00      	cmp	r3, #0
 801a6d4:	d001      	beq.n	801a6da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801a6d6:	2301      	movs	r3, #1
 801a6d8:	e00e      	b.n	801a6f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	2b0f      	cmp	r3, #15
 801a6de:	d80a      	bhi.n	801a6f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	6879      	ldr	r1, [r7, #4]
 801a6e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a6e8:	f000 f94f 	bl	801a98a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801a6ec:	4a06      	ldr	r2, [pc, #24]	@ (801a708 <HAL_InitTick+0x68>)
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801a6f2:	2300      	movs	r3, #0
 801a6f4:	e000      	b.n	801a6f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801a6f6:	2301      	movs	r3, #1
}
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	3708      	adds	r7, #8
 801a6fc:	46bd      	mov	sp, r7
 801a6fe:	bd80      	pop	{r7, pc}
 801a700:	20000024 	.word	0x20000024
 801a704:	20000000 	.word	0x20000000
 801a708:	20000020 	.word	0x20000020

0801a70c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801a70c:	b480      	push	{r7}
 801a70e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801a710:	4b06      	ldr	r3, [pc, #24]	@ (801a72c <HAL_IncTick+0x20>)
 801a712:	781b      	ldrb	r3, [r3, #0]
 801a714:	461a      	mov	r2, r3
 801a716:	4b06      	ldr	r3, [pc, #24]	@ (801a730 <HAL_IncTick+0x24>)
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	4413      	add	r3, r2
 801a71c:	4a04      	ldr	r2, [pc, #16]	@ (801a730 <HAL_IncTick+0x24>)
 801a71e:	6013      	str	r3, [r2, #0]
}
 801a720:	bf00      	nop
 801a722:	46bd      	mov	sp, r7
 801a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a728:	4770      	bx	lr
 801a72a:	bf00      	nop
 801a72c:	20000024 	.word	0x20000024
 801a730:	20002580 	.word	0x20002580

0801a734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801a734:	b480      	push	{r7}
 801a736:	af00      	add	r7, sp, #0
  return uwTick;
 801a738:	4b03      	ldr	r3, [pc, #12]	@ (801a748 <HAL_GetTick+0x14>)
 801a73a:	681b      	ldr	r3, [r3, #0]
}
 801a73c:	4618      	mov	r0, r3
 801a73e:	46bd      	mov	sp, r7
 801a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a744:	4770      	bx	lr
 801a746:	bf00      	nop
 801a748:	20002580 	.word	0x20002580

0801a74c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b084      	sub	sp, #16
 801a750:	af00      	add	r7, sp, #0
 801a752:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801a754:	f7ff ffee 	bl	801a734 <HAL_GetTick>
 801a758:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a764:	d005      	beq.n	801a772 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801a766:	4b0a      	ldr	r3, [pc, #40]	@ (801a790 <HAL_Delay+0x44>)
 801a768:	781b      	ldrb	r3, [r3, #0]
 801a76a:	461a      	mov	r2, r3
 801a76c:	68fb      	ldr	r3, [r7, #12]
 801a76e:	4413      	add	r3, r2
 801a770:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 801a772:	bf00      	nop
 801a774:	f7ff ffde 	bl	801a734 <HAL_GetTick>
 801a778:	4602      	mov	r2, r0
 801a77a:	68bb      	ldr	r3, [r7, #8]
 801a77c:	1ad3      	subs	r3, r2, r3
 801a77e:	68fa      	ldr	r2, [r7, #12]
 801a780:	429a      	cmp	r2, r3
 801a782:	d8f7      	bhi.n	801a774 <HAL_Delay+0x28>
  {
  }
}
 801a784:	bf00      	nop
 801a786:	bf00      	nop
 801a788:	3710      	adds	r7, #16
 801a78a:	46bd      	mov	sp, r7
 801a78c:	bd80      	pop	{r7, pc}
 801a78e:	bf00      	nop
 801a790:	20000024 	.word	0x20000024

0801a794 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 801a794:	b480      	push	{r7}
 801a796:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801a798:	4b03      	ldr	r3, [pc, #12]	@ (801a7a8 <HAL_GetREVID+0x14>)
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	0c1b      	lsrs	r3, r3, #16
}
 801a79e:	4618      	mov	r0, r3
 801a7a0:	46bd      	mov	sp, r7
 801a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7a6:	4770      	bx	lr
 801a7a8:	5c001000 	.word	0x5c001000

0801a7ac <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 801a7ac:	b480      	push	{r7}
 801a7ae:	b083      	sub	sp, #12
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 801a7b4:	4b06      	ldr	r3, [pc, #24]	@ (801a7d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a7b6:	685b      	ldr	r3, [r3, #4]
 801a7b8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 801a7bc:	4904      	ldr	r1, [pc, #16]	@ (801a7d0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	4313      	orrs	r3, r2
 801a7c2:	604b      	str	r3, [r1, #4]
}
 801a7c4:	bf00      	nop
 801a7c6:	370c      	adds	r7, #12
 801a7c8:	46bd      	mov	sp, r7
 801a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ce:	4770      	bx	lr
 801a7d0:	58000400 	.word	0x58000400

0801a7d4 <__NVIC_SetPriorityGrouping>:
{
 801a7d4:	b480      	push	{r7}
 801a7d6:	b085      	sub	sp, #20
 801a7d8:	af00      	add	r7, sp, #0
 801a7da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	f003 0307 	and.w	r3, r3, #7
 801a7e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 801a7e4:	4b0b      	ldr	r3, [pc, #44]	@ (801a814 <__NVIC_SetPriorityGrouping+0x40>)
 801a7e6:	68db      	ldr	r3, [r3, #12]
 801a7e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801a7ea:	68ba      	ldr	r2, [r7, #8]
 801a7ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801a7f0:	4013      	ands	r3, r2
 801a7f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801a7fc:	4b06      	ldr	r3, [pc, #24]	@ (801a818 <__NVIC_SetPriorityGrouping+0x44>)
 801a7fe:	4313      	orrs	r3, r2
 801a800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801a802:	4a04      	ldr	r2, [pc, #16]	@ (801a814 <__NVIC_SetPriorityGrouping+0x40>)
 801a804:	68bb      	ldr	r3, [r7, #8]
 801a806:	60d3      	str	r3, [r2, #12]
}
 801a808:	bf00      	nop
 801a80a:	3714      	adds	r7, #20
 801a80c:	46bd      	mov	sp, r7
 801a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a812:	4770      	bx	lr
 801a814:	e000ed00 	.word	0xe000ed00
 801a818:	05fa0000 	.word	0x05fa0000

0801a81c <__NVIC_GetPriorityGrouping>:
{
 801a81c:	b480      	push	{r7}
 801a81e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801a820:	4b04      	ldr	r3, [pc, #16]	@ (801a834 <__NVIC_GetPriorityGrouping+0x18>)
 801a822:	68db      	ldr	r3, [r3, #12]
 801a824:	0a1b      	lsrs	r3, r3, #8
 801a826:	f003 0307 	and.w	r3, r3, #7
}
 801a82a:	4618      	mov	r0, r3
 801a82c:	46bd      	mov	sp, r7
 801a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a832:	4770      	bx	lr
 801a834:	e000ed00 	.word	0xe000ed00

0801a838 <__NVIC_EnableIRQ>:
{
 801a838:	b480      	push	{r7}
 801a83a:	b083      	sub	sp, #12
 801a83c:	af00      	add	r7, sp, #0
 801a83e:	4603      	mov	r3, r0
 801a840:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a842:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a846:	2b00      	cmp	r3, #0
 801a848:	db0b      	blt.n	801a862 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801a84a:	88fb      	ldrh	r3, [r7, #6]
 801a84c:	f003 021f 	and.w	r2, r3, #31
 801a850:	4907      	ldr	r1, [pc, #28]	@ (801a870 <__NVIC_EnableIRQ+0x38>)
 801a852:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a856:	095b      	lsrs	r3, r3, #5
 801a858:	2001      	movs	r0, #1
 801a85a:	fa00 f202 	lsl.w	r2, r0, r2
 801a85e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a862:	bf00      	nop
 801a864:	370c      	adds	r7, #12
 801a866:	46bd      	mov	sp, r7
 801a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a86c:	4770      	bx	lr
 801a86e:	bf00      	nop
 801a870:	e000e100 	.word	0xe000e100

0801a874 <__NVIC_SetPriority>:
{
 801a874:	b480      	push	{r7}
 801a876:	b083      	sub	sp, #12
 801a878:	af00      	add	r7, sp, #0
 801a87a:	4603      	mov	r3, r0
 801a87c:	6039      	str	r1, [r7, #0]
 801a87e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a884:	2b00      	cmp	r3, #0
 801a886:	db0a      	blt.n	801a89e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a888:	683b      	ldr	r3, [r7, #0]
 801a88a:	b2da      	uxtb	r2, r3
 801a88c:	490c      	ldr	r1, [pc, #48]	@ (801a8c0 <__NVIC_SetPriority+0x4c>)
 801a88e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a892:	0112      	lsls	r2, r2, #4
 801a894:	b2d2      	uxtb	r2, r2
 801a896:	440b      	add	r3, r1
 801a898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a89c:	e00a      	b.n	801a8b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a89e:	683b      	ldr	r3, [r7, #0]
 801a8a0:	b2da      	uxtb	r2, r3
 801a8a2:	4908      	ldr	r1, [pc, #32]	@ (801a8c4 <__NVIC_SetPriority+0x50>)
 801a8a4:	88fb      	ldrh	r3, [r7, #6]
 801a8a6:	f003 030f 	and.w	r3, r3, #15
 801a8aa:	3b04      	subs	r3, #4
 801a8ac:	0112      	lsls	r2, r2, #4
 801a8ae:	b2d2      	uxtb	r2, r2
 801a8b0:	440b      	add	r3, r1
 801a8b2:	761a      	strb	r2, [r3, #24]
}
 801a8b4:	bf00      	nop
 801a8b6:	370c      	adds	r7, #12
 801a8b8:	46bd      	mov	sp, r7
 801a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8be:	4770      	bx	lr
 801a8c0:	e000e100 	.word	0xe000e100
 801a8c4:	e000ed00 	.word	0xe000ed00

0801a8c8 <NVIC_EncodePriority>:
{
 801a8c8:	b480      	push	{r7}
 801a8ca:	b089      	sub	sp, #36	@ 0x24
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	60f8      	str	r0, [r7, #12]
 801a8d0:	60b9      	str	r1, [r7, #8]
 801a8d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a8d4:	68fb      	ldr	r3, [r7, #12]
 801a8d6:	f003 0307 	and.w	r3, r3, #7
 801a8da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a8dc:	69fb      	ldr	r3, [r7, #28]
 801a8de:	f1c3 0307 	rsb	r3, r3, #7
 801a8e2:	2b04      	cmp	r3, #4
 801a8e4:	bf28      	it	cs
 801a8e6:	2304      	movcs	r3, #4
 801a8e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a8ea:	69fb      	ldr	r3, [r7, #28]
 801a8ec:	3304      	adds	r3, #4
 801a8ee:	2b06      	cmp	r3, #6
 801a8f0:	d902      	bls.n	801a8f8 <NVIC_EncodePriority+0x30>
 801a8f2:	69fb      	ldr	r3, [r7, #28]
 801a8f4:	3b03      	subs	r3, #3
 801a8f6:	e000      	b.n	801a8fa <NVIC_EncodePriority+0x32>
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a8fc:	f04f 32ff 	mov.w	r2, #4294967295
 801a900:	69bb      	ldr	r3, [r7, #24]
 801a902:	fa02 f303 	lsl.w	r3, r2, r3
 801a906:	43da      	mvns	r2, r3
 801a908:	68bb      	ldr	r3, [r7, #8]
 801a90a:	401a      	ands	r2, r3
 801a90c:	697b      	ldr	r3, [r7, #20]
 801a90e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a910:	f04f 31ff 	mov.w	r1, #4294967295
 801a914:	697b      	ldr	r3, [r7, #20]
 801a916:	fa01 f303 	lsl.w	r3, r1, r3
 801a91a:	43d9      	mvns	r1, r3
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a920:	4313      	orrs	r3, r2
}
 801a922:	4618      	mov	r0, r3
 801a924:	3724      	adds	r7, #36	@ 0x24
 801a926:	46bd      	mov	sp, r7
 801a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a92c:	4770      	bx	lr
	...

0801a930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a930:	b580      	push	{r7, lr}
 801a932:	b082      	sub	sp, #8
 801a934:	af00      	add	r7, sp, #0
 801a936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	3b01      	subs	r3, #1
 801a93c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a940:	d301      	bcc.n	801a946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a942:	2301      	movs	r3, #1
 801a944:	e00f      	b.n	801a966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a946:	4a0a      	ldr	r2, [pc, #40]	@ (801a970 <SysTick_Config+0x40>)
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	3b01      	subs	r3, #1
 801a94c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a94e:	210f      	movs	r1, #15
 801a950:	f04f 30ff 	mov.w	r0, #4294967295
 801a954:	f7ff ff8e 	bl	801a874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a958:	4b05      	ldr	r3, [pc, #20]	@ (801a970 <SysTick_Config+0x40>)
 801a95a:	2200      	movs	r2, #0
 801a95c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a95e:	4b04      	ldr	r3, [pc, #16]	@ (801a970 <SysTick_Config+0x40>)
 801a960:	2207      	movs	r2, #7
 801a962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a964:	2300      	movs	r3, #0
}
 801a966:	4618      	mov	r0, r3
 801a968:	3708      	adds	r7, #8
 801a96a:	46bd      	mov	sp, r7
 801a96c:	bd80      	pop	{r7, pc}
 801a96e:	bf00      	nop
 801a970:	e000e010 	.word	0xe000e010

0801a974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a974:	b580      	push	{r7, lr}
 801a976:	b082      	sub	sp, #8
 801a978:	af00      	add	r7, sp, #0
 801a97a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a97c:	6878      	ldr	r0, [r7, #4]
 801a97e:	f7ff ff29 	bl	801a7d4 <__NVIC_SetPriorityGrouping>
}
 801a982:	bf00      	nop
 801a984:	3708      	adds	r7, #8
 801a986:	46bd      	mov	sp, r7
 801a988:	bd80      	pop	{r7, pc}

0801a98a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a98a:	b580      	push	{r7, lr}
 801a98c:	b086      	sub	sp, #24
 801a98e:	af00      	add	r7, sp, #0
 801a990:	4603      	mov	r3, r0
 801a992:	60b9      	str	r1, [r7, #8]
 801a994:	607a      	str	r2, [r7, #4]
 801a996:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a998:	f7ff ff40 	bl	801a81c <__NVIC_GetPriorityGrouping>
 801a99c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a99e:	687a      	ldr	r2, [r7, #4]
 801a9a0:	68b9      	ldr	r1, [r7, #8]
 801a9a2:	6978      	ldr	r0, [r7, #20]
 801a9a4:	f7ff ff90 	bl	801a8c8 <NVIC_EncodePriority>
 801a9a8:	4602      	mov	r2, r0
 801a9aa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a9ae:	4611      	mov	r1, r2
 801a9b0:	4618      	mov	r0, r3
 801a9b2:	f7ff ff5f 	bl	801a874 <__NVIC_SetPriority>
}
 801a9b6:	bf00      	nop
 801a9b8:	3718      	adds	r7, #24
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}

0801a9be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a9be:	b580      	push	{r7, lr}
 801a9c0:	b082      	sub	sp, #8
 801a9c2:	af00      	add	r7, sp, #0
 801a9c4:	4603      	mov	r3, r0
 801a9c6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a9c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a9cc:	4618      	mov	r0, r3
 801a9ce:	f7ff ff33 	bl	801a838 <__NVIC_EnableIRQ>
}
 801a9d2:	bf00      	nop
 801a9d4:	3708      	adds	r7, #8
 801a9d6:	46bd      	mov	sp, r7
 801a9d8:	bd80      	pop	{r7, pc}

0801a9da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a9da:	b580      	push	{r7, lr}
 801a9dc:	b082      	sub	sp, #8
 801a9de:	af00      	add	r7, sp, #0
 801a9e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a9e2:	6878      	ldr	r0, [r7, #4]
 801a9e4:	f7ff ffa4 	bl	801a930 <SysTick_Config>
 801a9e8:	4603      	mov	r3, r0
}
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	3708      	adds	r7, #8
 801a9ee:	46bd      	mov	sp, r7
 801a9f0:	bd80      	pop	{r7, pc}
	...

0801a9f4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801a9f4:	b480      	push	{r7}
 801a9f6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801a9f8:	f3bf 8f5f 	dmb	sy
}
 801a9fc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801a9fe:	4b07      	ldr	r3, [pc, #28]	@ (801aa1c <HAL_MPU_Disable+0x28>)
 801aa00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa02:	4a06      	ldr	r2, [pc, #24]	@ (801aa1c <HAL_MPU_Disable+0x28>)
 801aa04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801aa08:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801aa0a:	4b05      	ldr	r3, [pc, #20]	@ (801aa20 <HAL_MPU_Disable+0x2c>)
 801aa0c:	2200      	movs	r2, #0
 801aa0e:	605a      	str	r2, [r3, #4]
}
 801aa10:	bf00      	nop
 801aa12:	46bd      	mov	sp, r7
 801aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa18:	4770      	bx	lr
 801aa1a:	bf00      	nop
 801aa1c:	e000ed00 	.word	0xe000ed00
 801aa20:	e000ed90 	.word	0xe000ed90

0801aa24 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801aa24:	b480      	push	{r7}
 801aa26:	b083      	sub	sp, #12
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801aa2c:	4a0b      	ldr	r2, [pc, #44]	@ (801aa5c <HAL_MPU_Enable+0x38>)
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	f043 0301 	orr.w	r3, r3, #1
 801aa34:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801aa36:	4b0a      	ldr	r3, [pc, #40]	@ (801aa60 <HAL_MPU_Enable+0x3c>)
 801aa38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801aa3a:	4a09      	ldr	r2, [pc, #36]	@ (801aa60 <HAL_MPU_Enable+0x3c>)
 801aa3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801aa40:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801aa42:	f3bf 8f4f 	dsb	sy
}
 801aa46:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801aa48:	f3bf 8f6f 	isb	sy
}
 801aa4c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801aa4e:	bf00      	nop
 801aa50:	370c      	adds	r7, #12
 801aa52:	46bd      	mov	sp, r7
 801aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa58:	4770      	bx	lr
 801aa5a:	bf00      	nop
 801aa5c:	e000ed90 	.word	0xe000ed90
 801aa60:	e000ed00 	.word	0xe000ed00

0801aa64 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801aa64:	b480      	push	{r7}
 801aa66:	b083      	sub	sp, #12
 801aa68:	af00      	add	r7, sp, #0
 801aa6a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	785a      	ldrb	r2, [r3, #1]
 801aa70:	4b1b      	ldr	r3, [pc, #108]	@ (801aae0 <HAL_MPU_ConfigRegion+0x7c>)
 801aa72:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801aa74:	4b1a      	ldr	r3, [pc, #104]	@ (801aae0 <HAL_MPU_ConfigRegion+0x7c>)
 801aa76:	691b      	ldr	r3, [r3, #16]
 801aa78:	4a19      	ldr	r2, [pc, #100]	@ (801aae0 <HAL_MPU_ConfigRegion+0x7c>)
 801aa7a:	f023 0301 	bic.w	r3, r3, #1
 801aa7e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801aa80:	4a17      	ldr	r2, [pc, #92]	@ (801aae0 <HAL_MPU_ConfigRegion+0x7c>)
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	685b      	ldr	r3, [r3, #4]
 801aa86:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	7b1b      	ldrb	r3, [r3, #12]
 801aa8c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	7adb      	ldrb	r3, [r3, #11]
 801aa92:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aa94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	7a9b      	ldrb	r3, [r3, #10]
 801aa9a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801aa9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	7b5b      	ldrb	r3, [r3, #13]
 801aaa2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801aaa4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	7b9b      	ldrb	r3, [r3, #14]
 801aaaa:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801aaac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	7bdb      	ldrb	r3, [r3, #15]
 801aab2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801aab4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801aab6:	687b      	ldr	r3, [r7, #4]
 801aab8:	7a5b      	ldrb	r3, [r3, #9]
 801aaba:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801aabc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	7a1b      	ldrb	r3, [r3, #8]
 801aac2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801aac4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801aac6:	687a      	ldr	r2, [r7, #4]
 801aac8:	7812      	ldrb	r2, [r2, #0]
 801aaca:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aacc:	4a04      	ldr	r2, [pc, #16]	@ (801aae0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801aace:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801aad0:	6113      	str	r3, [r2, #16]
}
 801aad2:	bf00      	nop
 801aad4:	370c      	adds	r7, #12
 801aad6:	46bd      	mov	sp, r7
 801aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aadc:	4770      	bx	lr
 801aade:	bf00      	nop
 801aae0:	e000ed90 	.word	0xe000ed90

0801aae4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801aae4:	b580      	push	{r7, lr}
 801aae6:	b086      	sub	sp, #24
 801aae8:	af00      	add	r7, sp, #0
 801aaea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801aaec:	f7ff fe22 	bl	801a734 <HAL_GetTick>
 801aaf0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d101      	bne.n	801aafc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801aaf8:	2301      	movs	r3, #1
 801aafa:	e316      	b.n	801b12a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801aafc:	687b      	ldr	r3, [r7, #4]
 801aafe:	681b      	ldr	r3, [r3, #0]
 801ab00:	4a66      	ldr	r2, [pc, #408]	@ (801ac9c <HAL_DMA_Init+0x1b8>)
 801ab02:	4293      	cmp	r3, r2
 801ab04:	d04a      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	681b      	ldr	r3, [r3, #0]
 801ab0a:	4a65      	ldr	r2, [pc, #404]	@ (801aca0 <HAL_DMA_Init+0x1bc>)
 801ab0c:	4293      	cmp	r3, r2
 801ab0e:	d045      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab10:	687b      	ldr	r3, [r7, #4]
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	4a63      	ldr	r2, [pc, #396]	@ (801aca4 <HAL_DMA_Init+0x1c0>)
 801ab16:	4293      	cmp	r3, r2
 801ab18:	d040      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	4a62      	ldr	r2, [pc, #392]	@ (801aca8 <HAL_DMA_Init+0x1c4>)
 801ab20:	4293      	cmp	r3, r2
 801ab22:	d03b      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	4a60      	ldr	r2, [pc, #384]	@ (801acac <HAL_DMA_Init+0x1c8>)
 801ab2a:	4293      	cmp	r3, r2
 801ab2c:	d036      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	4a5f      	ldr	r2, [pc, #380]	@ (801acb0 <HAL_DMA_Init+0x1cc>)
 801ab34:	4293      	cmp	r3, r2
 801ab36:	d031      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	4a5d      	ldr	r2, [pc, #372]	@ (801acb4 <HAL_DMA_Init+0x1d0>)
 801ab3e:	4293      	cmp	r3, r2
 801ab40:	d02c      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	681b      	ldr	r3, [r3, #0]
 801ab46:	4a5c      	ldr	r2, [pc, #368]	@ (801acb8 <HAL_DMA_Init+0x1d4>)
 801ab48:	4293      	cmp	r3, r2
 801ab4a:	d027      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	681b      	ldr	r3, [r3, #0]
 801ab50:	4a5a      	ldr	r2, [pc, #360]	@ (801acbc <HAL_DMA_Init+0x1d8>)
 801ab52:	4293      	cmp	r3, r2
 801ab54:	d022      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	4a59      	ldr	r2, [pc, #356]	@ (801acc0 <HAL_DMA_Init+0x1dc>)
 801ab5c:	4293      	cmp	r3, r2
 801ab5e:	d01d      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	4a57      	ldr	r2, [pc, #348]	@ (801acc4 <HAL_DMA_Init+0x1e0>)
 801ab66:	4293      	cmp	r3, r2
 801ab68:	d018      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	4a56      	ldr	r2, [pc, #344]	@ (801acc8 <HAL_DMA_Init+0x1e4>)
 801ab70:	4293      	cmp	r3, r2
 801ab72:	d013      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	4a54      	ldr	r2, [pc, #336]	@ (801accc <HAL_DMA_Init+0x1e8>)
 801ab7a:	4293      	cmp	r3, r2
 801ab7c:	d00e      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	4a53      	ldr	r2, [pc, #332]	@ (801acd0 <HAL_DMA_Init+0x1ec>)
 801ab84:	4293      	cmp	r3, r2
 801ab86:	d009      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	4a51      	ldr	r2, [pc, #324]	@ (801acd4 <HAL_DMA_Init+0x1f0>)
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	d004      	beq.n	801ab9c <HAL_DMA_Init+0xb8>
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	4a50      	ldr	r2, [pc, #320]	@ (801acd8 <HAL_DMA_Init+0x1f4>)
 801ab98:	4293      	cmp	r3, r2
 801ab9a:	d101      	bne.n	801aba0 <HAL_DMA_Init+0xbc>
 801ab9c:	2301      	movs	r3, #1
 801ab9e:	e000      	b.n	801aba2 <HAL_DMA_Init+0xbe>
 801aba0:	2300      	movs	r3, #0
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	f000 813b 	beq.w	801ae1e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	2202      	movs	r2, #2
 801abac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	2200      	movs	r2, #0
 801abb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	681b      	ldr	r3, [r3, #0]
 801abbc:	4a37      	ldr	r2, [pc, #220]	@ (801ac9c <HAL_DMA_Init+0x1b8>)
 801abbe:	4293      	cmp	r3, r2
 801abc0:	d04a      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	4a36      	ldr	r2, [pc, #216]	@ (801aca0 <HAL_DMA_Init+0x1bc>)
 801abc8:	4293      	cmp	r3, r2
 801abca:	d045      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	4a34      	ldr	r2, [pc, #208]	@ (801aca4 <HAL_DMA_Init+0x1c0>)
 801abd2:	4293      	cmp	r3, r2
 801abd4:	d040      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	4a33      	ldr	r2, [pc, #204]	@ (801aca8 <HAL_DMA_Init+0x1c4>)
 801abdc:	4293      	cmp	r3, r2
 801abde:	d03b      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	681b      	ldr	r3, [r3, #0]
 801abe4:	4a31      	ldr	r2, [pc, #196]	@ (801acac <HAL_DMA_Init+0x1c8>)
 801abe6:	4293      	cmp	r3, r2
 801abe8:	d036      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	4a30      	ldr	r2, [pc, #192]	@ (801acb0 <HAL_DMA_Init+0x1cc>)
 801abf0:	4293      	cmp	r3, r2
 801abf2:	d031      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	4a2e      	ldr	r2, [pc, #184]	@ (801acb4 <HAL_DMA_Init+0x1d0>)
 801abfa:	4293      	cmp	r3, r2
 801abfc:	d02c      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801abfe:	687b      	ldr	r3, [r7, #4]
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	4a2d      	ldr	r2, [pc, #180]	@ (801acb8 <HAL_DMA_Init+0x1d4>)
 801ac04:	4293      	cmp	r3, r2
 801ac06:	d027      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	4a2b      	ldr	r2, [pc, #172]	@ (801acbc <HAL_DMA_Init+0x1d8>)
 801ac0e:	4293      	cmp	r3, r2
 801ac10:	d022      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac12:	687b      	ldr	r3, [r7, #4]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	4a2a      	ldr	r2, [pc, #168]	@ (801acc0 <HAL_DMA_Init+0x1dc>)
 801ac18:	4293      	cmp	r3, r2
 801ac1a:	d01d      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	4a28      	ldr	r2, [pc, #160]	@ (801acc4 <HAL_DMA_Init+0x1e0>)
 801ac22:	4293      	cmp	r3, r2
 801ac24:	d018      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	681b      	ldr	r3, [r3, #0]
 801ac2a:	4a27      	ldr	r2, [pc, #156]	@ (801acc8 <HAL_DMA_Init+0x1e4>)
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	d013      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4a25      	ldr	r2, [pc, #148]	@ (801accc <HAL_DMA_Init+0x1e8>)
 801ac36:	4293      	cmp	r3, r2
 801ac38:	d00e      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	681b      	ldr	r3, [r3, #0]
 801ac3e:	4a24      	ldr	r2, [pc, #144]	@ (801acd0 <HAL_DMA_Init+0x1ec>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d009      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac44:	687b      	ldr	r3, [r7, #4]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	4a22      	ldr	r2, [pc, #136]	@ (801acd4 <HAL_DMA_Init+0x1f0>)
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	d004      	beq.n	801ac58 <HAL_DMA_Init+0x174>
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	4a21      	ldr	r2, [pc, #132]	@ (801acd8 <HAL_DMA_Init+0x1f4>)
 801ac54:	4293      	cmp	r3, r2
 801ac56:	d108      	bne.n	801ac6a <HAL_DMA_Init+0x186>
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	681a      	ldr	r2, [r3, #0]
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	f022 0201 	bic.w	r2, r2, #1
 801ac66:	601a      	str	r2, [r3, #0]
 801ac68:	e007      	b.n	801ac7a <HAL_DMA_Init+0x196>
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	681a      	ldr	r2, [r3, #0]
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	f022 0201 	bic.w	r2, r2, #1
 801ac78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801ac7a:	e02f      	b.n	801acdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801ac7c:	f7ff fd5a 	bl	801a734 <HAL_GetTick>
 801ac80:	4602      	mov	r2, r0
 801ac82:	693b      	ldr	r3, [r7, #16]
 801ac84:	1ad3      	subs	r3, r2, r3
 801ac86:	2b05      	cmp	r3, #5
 801ac88:	d928      	bls.n	801acdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	2220      	movs	r2, #32
 801ac8e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2203      	movs	r2, #3
 801ac94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801ac98:	2301      	movs	r3, #1
 801ac9a:	e246      	b.n	801b12a <HAL_DMA_Init+0x646>
 801ac9c:	40020010 	.word	0x40020010
 801aca0:	40020028 	.word	0x40020028
 801aca4:	40020040 	.word	0x40020040
 801aca8:	40020058 	.word	0x40020058
 801acac:	40020070 	.word	0x40020070
 801acb0:	40020088 	.word	0x40020088
 801acb4:	400200a0 	.word	0x400200a0
 801acb8:	400200b8 	.word	0x400200b8
 801acbc:	40020410 	.word	0x40020410
 801acc0:	40020428 	.word	0x40020428
 801acc4:	40020440 	.word	0x40020440
 801acc8:	40020458 	.word	0x40020458
 801accc:	40020470 	.word	0x40020470
 801acd0:	40020488 	.word	0x40020488
 801acd4:	400204a0 	.word	0x400204a0
 801acd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	681b      	ldr	r3, [r3, #0]
 801ace2:	f003 0301 	and.w	r3, r3, #1
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d1c8      	bne.n	801ac7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	681b      	ldr	r3, [r3, #0]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801acf2:	697a      	ldr	r2, [r7, #20]
 801acf4:	4b83      	ldr	r3, [pc, #524]	@ (801af04 <HAL_DMA_Init+0x420>)
 801acf6:	4013      	ands	r3, r2
 801acf8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801ad02:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	691b      	ldr	r3, [r3, #16]
 801ad08:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801ad0e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	699b      	ldr	r3, [r3, #24]
 801ad14:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801ad1a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	6a1b      	ldr	r3, [r3, #32]
 801ad20:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801ad22:	697a      	ldr	r2, [r7, #20]
 801ad24:	4313      	orrs	r3, r2
 801ad26:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ad2c:	2b04      	cmp	r3, #4
 801ad2e:	d107      	bne.n	801ad40 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ad38:	4313      	orrs	r3, r2
 801ad3a:	697a      	ldr	r2, [r7, #20]
 801ad3c:	4313      	orrs	r3, r2
 801ad3e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801ad40:	4b71      	ldr	r3, [pc, #452]	@ (801af08 <HAL_DMA_Init+0x424>)
 801ad42:	681a      	ldr	r2, [r3, #0]
 801ad44:	4b71      	ldr	r3, [pc, #452]	@ (801af0c <HAL_DMA_Init+0x428>)
 801ad46:	4013      	ands	r3, r2
 801ad48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ad4c:	d328      	bcc.n	801ada0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	685b      	ldr	r3, [r3, #4]
 801ad52:	2b28      	cmp	r3, #40	@ 0x28
 801ad54:	d903      	bls.n	801ad5e <HAL_DMA_Init+0x27a>
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	685b      	ldr	r3, [r3, #4]
 801ad5a:	2b2e      	cmp	r3, #46	@ 0x2e
 801ad5c:	d917      	bls.n	801ad8e <HAL_DMA_Init+0x2aa>
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	685b      	ldr	r3, [r3, #4]
 801ad62:	2b3e      	cmp	r3, #62	@ 0x3e
 801ad64:	d903      	bls.n	801ad6e <HAL_DMA_Init+0x28a>
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	685b      	ldr	r3, [r3, #4]
 801ad6a:	2b42      	cmp	r3, #66	@ 0x42
 801ad6c:	d90f      	bls.n	801ad8e <HAL_DMA_Init+0x2aa>
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	685b      	ldr	r3, [r3, #4]
 801ad72:	2b46      	cmp	r3, #70	@ 0x46
 801ad74:	d903      	bls.n	801ad7e <HAL_DMA_Init+0x29a>
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	685b      	ldr	r3, [r3, #4]
 801ad7a:	2b48      	cmp	r3, #72	@ 0x48
 801ad7c:	d907      	bls.n	801ad8e <HAL_DMA_Init+0x2aa>
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	685b      	ldr	r3, [r3, #4]
 801ad82:	2b4e      	cmp	r3, #78	@ 0x4e
 801ad84:	d905      	bls.n	801ad92 <HAL_DMA_Init+0x2ae>
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	685b      	ldr	r3, [r3, #4]
 801ad8a:	2b52      	cmp	r3, #82	@ 0x52
 801ad8c:	d801      	bhi.n	801ad92 <HAL_DMA_Init+0x2ae>
 801ad8e:	2301      	movs	r3, #1
 801ad90:	e000      	b.n	801ad94 <HAL_DMA_Init+0x2b0>
 801ad92:	2300      	movs	r3, #0
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	d003      	beq.n	801ada0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801ad98:	697b      	ldr	r3, [r7, #20]
 801ad9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801ad9e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	681b      	ldr	r3, [r3, #0]
 801ada4:	697a      	ldr	r2, [r7, #20]
 801ada6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	695b      	ldr	r3, [r3, #20]
 801adae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801adb0:	697b      	ldr	r3, [r7, #20]
 801adb2:	f023 0307 	bic.w	r3, r3, #7
 801adb6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801adbc:	697a      	ldr	r2, [r7, #20]
 801adbe:	4313      	orrs	r3, r2
 801adc0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801adc2:	687b      	ldr	r3, [r7, #4]
 801adc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801adc6:	2b04      	cmp	r3, #4
 801adc8:	d117      	bne.n	801adfa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801adce:	697a      	ldr	r2, [r7, #20]
 801add0:	4313      	orrs	r3, r2
 801add2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801add8:	2b00      	cmp	r3, #0
 801adda:	d00e      	beq.n	801adfa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801addc:	6878      	ldr	r0, [r7, #4]
 801adde:	f001 fbff 	bl	801c5e0 <DMA_CheckFifoParam>
 801ade2:	4603      	mov	r3, r0
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d008      	beq.n	801adfa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2240      	movs	r2, #64	@ 0x40
 801adec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	2201      	movs	r2, #1
 801adf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801adf6:	2301      	movs	r3, #1
 801adf8:	e197      	b.n	801b12a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	697a      	ldr	r2, [r7, #20]
 801ae00:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f001 fb3a 	bl	801c47c <DMA_CalcBaseAndBitshift>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801ae0c:	687b      	ldr	r3, [r7, #4]
 801ae0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ae10:	f003 031f 	and.w	r3, r3, #31
 801ae14:	223f      	movs	r2, #63	@ 0x3f
 801ae16:	409a      	lsls	r2, r3
 801ae18:	68bb      	ldr	r3, [r7, #8]
 801ae1a:	609a      	str	r2, [r3, #8]
 801ae1c:	e0cd      	b.n	801afba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	681b      	ldr	r3, [r3, #0]
 801ae22:	4a3b      	ldr	r2, [pc, #236]	@ (801af10 <HAL_DMA_Init+0x42c>)
 801ae24:	4293      	cmp	r3, r2
 801ae26:	d022      	beq.n	801ae6e <HAL_DMA_Init+0x38a>
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	681b      	ldr	r3, [r3, #0]
 801ae2c:	4a39      	ldr	r2, [pc, #228]	@ (801af14 <HAL_DMA_Init+0x430>)
 801ae2e:	4293      	cmp	r3, r2
 801ae30:	d01d      	beq.n	801ae6e <HAL_DMA_Init+0x38a>
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	681b      	ldr	r3, [r3, #0]
 801ae36:	4a38      	ldr	r2, [pc, #224]	@ (801af18 <HAL_DMA_Init+0x434>)
 801ae38:	4293      	cmp	r3, r2
 801ae3a:	d018      	beq.n	801ae6e <HAL_DMA_Init+0x38a>
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	681b      	ldr	r3, [r3, #0]
 801ae40:	4a36      	ldr	r2, [pc, #216]	@ (801af1c <HAL_DMA_Init+0x438>)
 801ae42:	4293      	cmp	r3, r2
 801ae44:	d013      	beq.n	801ae6e <HAL_DMA_Init+0x38a>
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	4a35      	ldr	r2, [pc, #212]	@ (801af20 <HAL_DMA_Init+0x43c>)
 801ae4c:	4293      	cmp	r3, r2
 801ae4e:	d00e      	beq.n	801ae6e <HAL_DMA_Init+0x38a>
 801ae50:	687b      	ldr	r3, [r7, #4]
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	4a33      	ldr	r2, [pc, #204]	@ (801af24 <HAL_DMA_Init+0x440>)
 801ae56:	4293      	cmp	r3, r2
 801ae58:	d009      	beq.n	801ae6e <HAL_DMA_Init+0x38a>
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	4a32      	ldr	r2, [pc, #200]	@ (801af28 <HAL_DMA_Init+0x444>)
 801ae60:	4293      	cmp	r3, r2
 801ae62:	d004      	beq.n	801ae6e <HAL_DMA_Init+0x38a>
 801ae64:	687b      	ldr	r3, [r7, #4]
 801ae66:	681b      	ldr	r3, [r3, #0]
 801ae68:	4a30      	ldr	r2, [pc, #192]	@ (801af2c <HAL_DMA_Init+0x448>)
 801ae6a:	4293      	cmp	r3, r2
 801ae6c:	d101      	bne.n	801ae72 <HAL_DMA_Init+0x38e>
 801ae6e:	2301      	movs	r3, #1
 801ae70:	e000      	b.n	801ae74 <HAL_DMA_Init+0x390>
 801ae72:	2300      	movs	r3, #0
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	f000 8097 	beq.w	801afa8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	4a24      	ldr	r2, [pc, #144]	@ (801af10 <HAL_DMA_Init+0x42c>)
 801ae80:	4293      	cmp	r3, r2
 801ae82:	d021      	beq.n	801aec8 <HAL_DMA_Init+0x3e4>
 801ae84:	687b      	ldr	r3, [r7, #4]
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	4a22      	ldr	r2, [pc, #136]	@ (801af14 <HAL_DMA_Init+0x430>)
 801ae8a:	4293      	cmp	r3, r2
 801ae8c:	d01c      	beq.n	801aec8 <HAL_DMA_Init+0x3e4>
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	4a21      	ldr	r2, [pc, #132]	@ (801af18 <HAL_DMA_Init+0x434>)
 801ae94:	4293      	cmp	r3, r2
 801ae96:	d017      	beq.n	801aec8 <HAL_DMA_Init+0x3e4>
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	4a1f      	ldr	r2, [pc, #124]	@ (801af1c <HAL_DMA_Init+0x438>)
 801ae9e:	4293      	cmp	r3, r2
 801aea0:	d012      	beq.n	801aec8 <HAL_DMA_Init+0x3e4>
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	4a1e      	ldr	r2, [pc, #120]	@ (801af20 <HAL_DMA_Init+0x43c>)
 801aea8:	4293      	cmp	r3, r2
 801aeaa:	d00d      	beq.n	801aec8 <HAL_DMA_Init+0x3e4>
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	681b      	ldr	r3, [r3, #0]
 801aeb0:	4a1c      	ldr	r2, [pc, #112]	@ (801af24 <HAL_DMA_Init+0x440>)
 801aeb2:	4293      	cmp	r3, r2
 801aeb4:	d008      	beq.n	801aec8 <HAL_DMA_Init+0x3e4>
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	4a1b      	ldr	r2, [pc, #108]	@ (801af28 <HAL_DMA_Init+0x444>)
 801aebc:	4293      	cmp	r3, r2
 801aebe:	d003      	beq.n	801aec8 <HAL_DMA_Init+0x3e4>
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	4a19      	ldr	r2, [pc, #100]	@ (801af2c <HAL_DMA_Init+0x448>)
 801aec6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	2202      	movs	r2, #2
 801aecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	2200      	movs	r2, #0
 801aed4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	681b      	ldr	r3, [r3, #0]
 801aede:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801aee0:	697a      	ldr	r2, [r7, #20]
 801aee2:	4b13      	ldr	r3, [pc, #76]	@ (801af30 <HAL_DMA_Init+0x44c>)
 801aee4:	4013      	ands	r3, r2
 801aee6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	689b      	ldr	r3, [r3, #8]
 801aeec:	2b40      	cmp	r3, #64	@ 0x40
 801aeee:	d021      	beq.n	801af34 <HAL_DMA_Init+0x450>
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	689b      	ldr	r3, [r3, #8]
 801aef4:	2b80      	cmp	r3, #128	@ 0x80
 801aef6:	d102      	bne.n	801aefe <HAL_DMA_Init+0x41a>
 801aef8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801aefc:	e01b      	b.n	801af36 <HAL_DMA_Init+0x452>
 801aefe:	2300      	movs	r3, #0
 801af00:	e019      	b.n	801af36 <HAL_DMA_Init+0x452>
 801af02:	bf00      	nop
 801af04:	fe10803f 	.word	0xfe10803f
 801af08:	5c001000 	.word	0x5c001000
 801af0c:	ffff0000 	.word	0xffff0000
 801af10:	58025408 	.word	0x58025408
 801af14:	5802541c 	.word	0x5802541c
 801af18:	58025430 	.word	0x58025430
 801af1c:	58025444 	.word	0x58025444
 801af20:	58025458 	.word	0x58025458
 801af24:	5802546c 	.word	0x5802546c
 801af28:	58025480 	.word	0x58025480
 801af2c:	58025494 	.word	0x58025494
 801af30:	fffe000f 	.word	0xfffe000f
 801af34:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801af36:	687a      	ldr	r2, [r7, #4]
 801af38:	68d2      	ldr	r2, [r2, #12]
 801af3a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801af3c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	691b      	ldr	r3, [r3, #16]
 801af42:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801af44:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801af46:	687b      	ldr	r3, [r7, #4]
 801af48:	695b      	ldr	r3, [r3, #20]
 801af4a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801af4c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	699b      	ldr	r3, [r3, #24]
 801af52:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801af54:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	69db      	ldr	r3, [r3, #28]
 801af5a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801af5c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801af5e:	687b      	ldr	r3, [r7, #4]
 801af60:	6a1b      	ldr	r3, [r3, #32]
 801af62:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801af64:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801af66:	697a      	ldr	r2, [r7, #20]
 801af68:	4313      	orrs	r3, r2
 801af6a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801af6c:	687b      	ldr	r3, [r7, #4]
 801af6e:	681b      	ldr	r3, [r3, #0]
 801af70:	697a      	ldr	r2, [r7, #20]
 801af72:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	681b      	ldr	r3, [r3, #0]
 801af78:	461a      	mov	r2, r3
 801af7a:	4b6e      	ldr	r3, [pc, #440]	@ (801b134 <HAL_DMA_Init+0x650>)
 801af7c:	4413      	add	r3, r2
 801af7e:	4a6e      	ldr	r2, [pc, #440]	@ (801b138 <HAL_DMA_Init+0x654>)
 801af80:	fba2 2303 	umull	r2, r3, r2, r3
 801af84:	091b      	lsrs	r3, r3, #4
 801af86:	009a      	lsls	r2, r3, #2
 801af88:	687b      	ldr	r3, [r7, #4]
 801af8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801af8c:	6878      	ldr	r0, [r7, #4]
 801af8e:	f001 fa75 	bl	801c47c <DMA_CalcBaseAndBitshift>
 801af92:	4603      	mov	r3, r0
 801af94:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801af9a:	f003 031f 	and.w	r3, r3, #31
 801af9e:	2201      	movs	r2, #1
 801afa0:	409a      	lsls	r2, r3
 801afa2:	68fb      	ldr	r3, [r7, #12]
 801afa4:	605a      	str	r2, [r3, #4]
 801afa6:	e008      	b.n	801afba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801afa8:	687b      	ldr	r3, [r7, #4]
 801afaa:	2240      	movs	r2, #64	@ 0x40
 801afac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	2203      	movs	r2, #3
 801afb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801afb6:	2301      	movs	r3, #1
 801afb8:	e0b7      	b.n	801b12a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	681b      	ldr	r3, [r3, #0]
 801afbe:	4a5f      	ldr	r2, [pc, #380]	@ (801b13c <HAL_DMA_Init+0x658>)
 801afc0:	4293      	cmp	r3, r2
 801afc2:	d072      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	4a5d      	ldr	r2, [pc, #372]	@ (801b140 <HAL_DMA_Init+0x65c>)
 801afca:	4293      	cmp	r3, r2
 801afcc:	d06d      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	681b      	ldr	r3, [r3, #0]
 801afd2:	4a5c      	ldr	r2, [pc, #368]	@ (801b144 <HAL_DMA_Init+0x660>)
 801afd4:	4293      	cmp	r3, r2
 801afd6:	d068      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	4a5a      	ldr	r2, [pc, #360]	@ (801b148 <HAL_DMA_Init+0x664>)
 801afde:	4293      	cmp	r3, r2
 801afe0:	d063      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801afe2:	687b      	ldr	r3, [r7, #4]
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	4a59      	ldr	r2, [pc, #356]	@ (801b14c <HAL_DMA_Init+0x668>)
 801afe8:	4293      	cmp	r3, r2
 801afea:	d05e      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	681b      	ldr	r3, [r3, #0]
 801aff0:	4a57      	ldr	r2, [pc, #348]	@ (801b150 <HAL_DMA_Init+0x66c>)
 801aff2:	4293      	cmp	r3, r2
 801aff4:	d059      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	4a56      	ldr	r2, [pc, #344]	@ (801b154 <HAL_DMA_Init+0x670>)
 801affc:	4293      	cmp	r3, r2
 801affe:	d054      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	4a54      	ldr	r2, [pc, #336]	@ (801b158 <HAL_DMA_Init+0x674>)
 801b006:	4293      	cmp	r3, r2
 801b008:	d04f      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	4a53      	ldr	r2, [pc, #332]	@ (801b15c <HAL_DMA_Init+0x678>)
 801b010:	4293      	cmp	r3, r2
 801b012:	d04a      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b014:	687b      	ldr	r3, [r7, #4]
 801b016:	681b      	ldr	r3, [r3, #0]
 801b018:	4a51      	ldr	r2, [pc, #324]	@ (801b160 <HAL_DMA_Init+0x67c>)
 801b01a:	4293      	cmp	r3, r2
 801b01c:	d045      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	4a50      	ldr	r2, [pc, #320]	@ (801b164 <HAL_DMA_Init+0x680>)
 801b024:	4293      	cmp	r3, r2
 801b026:	d040      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	681b      	ldr	r3, [r3, #0]
 801b02c:	4a4e      	ldr	r2, [pc, #312]	@ (801b168 <HAL_DMA_Init+0x684>)
 801b02e:	4293      	cmp	r3, r2
 801b030:	d03b      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	681b      	ldr	r3, [r3, #0]
 801b036:	4a4d      	ldr	r2, [pc, #308]	@ (801b16c <HAL_DMA_Init+0x688>)
 801b038:	4293      	cmp	r3, r2
 801b03a:	d036      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	681b      	ldr	r3, [r3, #0]
 801b040:	4a4b      	ldr	r2, [pc, #300]	@ (801b170 <HAL_DMA_Init+0x68c>)
 801b042:	4293      	cmp	r3, r2
 801b044:	d031      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	681b      	ldr	r3, [r3, #0]
 801b04a:	4a4a      	ldr	r2, [pc, #296]	@ (801b174 <HAL_DMA_Init+0x690>)
 801b04c:	4293      	cmp	r3, r2
 801b04e:	d02c      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	4a48      	ldr	r2, [pc, #288]	@ (801b178 <HAL_DMA_Init+0x694>)
 801b056:	4293      	cmp	r3, r2
 801b058:	d027      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	681b      	ldr	r3, [r3, #0]
 801b05e:	4a47      	ldr	r2, [pc, #284]	@ (801b17c <HAL_DMA_Init+0x698>)
 801b060:	4293      	cmp	r3, r2
 801b062:	d022      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	4a45      	ldr	r2, [pc, #276]	@ (801b180 <HAL_DMA_Init+0x69c>)
 801b06a:	4293      	cmp	r3, r2
 801b06c:	d01d      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b06e:	687b      	ldr	r3, [r7, #4]
 801b070:	681b      	ldr	r3, [r3, #0]
 801b072:	4a44      	ldr	r2, [pc, #272]	@ (801b184 <HAL_DMA_Init+0x6a0>)
 801b074:	4293      	cmp	r3, r2
 801b076:	d018      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	681b      	ldr	r3, [r3, #0]
 801b07c:	4a42      	ldr	r2, [pc, #264]	@ (801b188 <HAL_DMA_Init+0x6a4>)
 801b07e:	4293      	cmp	r3, r2
 801b080:	d013      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	4a41      	ldr	r2, [pc, #260]	@ (801b18c <HAL_DMA_Init+0x6a8>)
 801b088:	4293      	cmp	r3, r2
 801b08a:	d00e      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b08c:	687b      	ldr	r3, [r7, #4]
 801b08e:	681b      	ldr	r3, [r3, #0]
 801b090:	4a3f      	ldr	r2, [pc, #252]	@ (801b190 <HAL_DMA_Init+0x6ac>)
 801b092:	4293      	cmp	r3, r2
 801b094:	d009      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	4a3e      	ldr	r2, [pc, #248]	@ (801b194 <HAL_DMA_Init+0x6b0>)
 801b09c:	4293      	cmp	r3, r2
 801b09e:	d004      	beq.n	801b0aa <HAL_DMA_Init+0x5c6>
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	4a3c      	ldr	r2, [pc, #240]	@ (801b198 <HAL_DMA_Init+0x6b4>)
 801b0a6:	4293      	cmp	r3, r2
 801b0a8:	d101      	bne.n	801b0ae <HAL_DMA_Init+0x5ca>
 801b0aa:	2301      	movs	r3, #1
 801b0ac:	e000      	b.n	801b0b0 <HAL_DMA_Init+0x5cc>
 801b0ae:	2300      	movs	r3, #0
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d032      	beq.n	801b11a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801b0b4:	6878      	ldr	r0, [r7, #4]
 801b0b6:	f001 fb0f 	bl	801c6d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	689b      	ldr	r3, [r3, #8]
 801b0be:	2b80      	cmp	r3, #128	@ 0x80
 801b0c0:	d102      	bne.n	801b0c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	685a      	ldr	r2, [r3, #4]
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b0d0:	b2d2      	uxtb	r2, r2
 801b0d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b0d8:	687a      	ldr	r2, [r7, #4]
 801b0da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b0dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	685b      	ldr	r3, [r3, #4]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d010      	beq.n	801b108 <HAL_DMA_Init+0x624>
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	685b      	ldr	r3, [r3, #4]
 801b0ea:	2b08      	cmp	r3, #8
 801b0ec:	d80c      	bhi.n	801b108 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801b0ee:	6878      	ldr	r0, [r7, #4]
 801b0f0:	f001 fb8c 	bl	801c80c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b0fc:	687b      	ldr	r3, [r7, #4]
 801b0fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b100:	687a      	ldr	r2, [r7, #4]
 801b102:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b104:	605a      	str	r2, [r3, #4]
 801b106:	e008      	b.n	801b11a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	2200      	movs	r2, #0
 801b10c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	2200      	movs	r2, #0
 801b112:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	2200      	movs	r2, #0
 801b118:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	2200      	movs	r2, #0
 801b11e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801b120:	687b      	ldr	r3, [r7, #4]
 801b122:	2201      	movs	r2, #1
 801b124:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801b128:	2300      	movs	r3, #0
}
 801b12a:	4618      	mov	r0, r3
 801b12c:	3718      	adds	r7, #24
 801b12e:	46bd      	mov	sp, r7
 801b130:	bd80      	pop	{r7, pc}
 801b132:	bf00      	nop
 801b134:	a7fdabf8 	.word	0xa7fdabf8
 801b138:	cccccccd 	.word	0xcccccccd
 801b13c:	40020010 	.word	0x40020010
 801b140:	40020028 	.word	0x40020028
 801b144:	40020040 	.word	0x40020040
 801b148:	40020058 	.word	0x40020058
 801b14c:	40020070 	.word	0x40020070
 801b150:	40020088 	.word	0x40020088
 801b154:	400200a0 	.word	0x400200a0
 801b158:	400200b8 	.word	0x400200b8
 801b15c:	40020410 	.word	0x40020410
 801b160:	40020428 	.word	0x40020428
 801b164:	40020440 	.word	0x40020440
 801b168:	40020458 	.word	0x40020458
 801b16c:	40020470 	.word	0x40020470
 801b170:	40020488 	.word	0x40020488
 801b174:	400204a0 	.word	0x400204a0
 801b178:	400204b8 	.word	0x400204b8
 801b17c:	58025408 	.word	0x58025408
 801b180:	5802541c 	.word	0x5802541c
 801b184:	58025430 	.word	0x58025430
 801b188:	58025444 	.word	0x58025444
 801b18c:	58025458 	.word	0x58025458
 801b190:	5802546c 	.word	0x5802546c
 801b194:	58025480 	.word	0x58025480
 801b198:	58025494 	.word	0x58025494

0801b19c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801b19c:	b580      	push	{r7, lr}
 801b19e:	b084      	sub	sp, #16
 801b1a0:	af00      	add	r7, sp, #0
 801b1a2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d101      	bne.n	801b1ae <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801b1aa:	2301      	movs	r3, #1
 801b1ac:	e237      	b.n	801b61e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b1b4:	b2db      	uxtb	r3, r3
 801b1b6:	2b02      	cmp	r3, #2
 801b1b8:	d004      	beq.n	801b1c4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	2280      	movs	r2, #128	@ 0x80
 801b1be:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801b1c0:	2301      	movs	r3, #1
 801b1c2:	e22c      	b.n	801b61e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	4a5c      	ldr	r2, [pc, #368]	@ (801b33c <HAL_DMA_Abort_IT+0x1a0>)
 801b1ca:	4293      	cmp	r3, r2
 801b1cc:	d04a      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	4a5b      	ldr	r2, [pc, #364]	@ (801b340 <HAL_DMA_Abort_IT+0x1a4>)
 801b1d4:	4293      	cmp	r3, r2
 801b1d6:	d045      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	681b      	ldr	r3, [r3, #0]
 801b1dc:	4a59      	ldr	r2, [pc, #356]	@ (801b344 <HAL_DMA_Abort_IT+0x1a8>)
 801b1de:	4293      	cmp	r3, r2
 801b1e0:	d040      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	4a58      	ldr	r2, [pc, #352]	@ (801b348 <HAL_DMA_Abort_IT+0x1ac>)
 801b1e8:	4293      	cmp	r3, r2
 801b1ea:	d03b      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	4a56      	ldr	r2, [pc, #344]	@ (801b34c <HAL_DMA_Abort_IT+0x1b0>)
 801b1f2:	4293      	cmp	r3, r2
 801b1f4:	d036      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	681b      	ldr	r3, [r3, #0]
 801b1fa:	4a55      	ldr	r2, [pc, #340]	@ (801b350 <HAL_DMA_Abort_IT+0x1b4>)
 801b1fc:	4293      	cmp	r3, r2
 801b1fe:	d031      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b200:	687b      	ldr	r3, [r7, #4]
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	4a53      	ldr	r2, [pc, #332]	@ (801b354 <HAL_DMA_Abort_IT+0x1b8>)
 801b206:	4293      	cmp	r3, r2
 801b208:	d02c      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	4a52      	ldr	r2, [pc, #328]	@ (801b358 <HAL_DMA_Abort_IT+0x1bc>)
 801b210:	4293      	cmp	r3, r2
 801b212:	d027      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	4a50      	ldr	r2, [pc, #320]	@ (801b35c <HAL_DMA_Abort_IT+0x1c0>)
 801b21a:	4293      	cmp	r3, r2
 801b21c:	d022      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	4a4f      	ldr	r2, [pc, #316]	@ (801b360 <HAL_DMA_Abort_IT+0x1c4>)
 801b224:	4293      	cmp	r3, r2
 801b226:	d01d      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	4a4d      	ldr	r2, [pc, #308]	@ (801b364 <HAL_DMA_Abort_IT+0x1c8>)
 801b22e:	4293      	cmp	r3, r2
 801b230:	d018      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	681b      	ldr	r3, [r3, #0]
 801b236:	4a4c      	ldr	r2, [pc, #304]	@ (801b368 <HAL_DMA_Abort_IT+0x1cc>)
 801b238:	4293      	cmp	r3, r2
 801b23a:	d013      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b23c:	687b      	ldr	r3, [r7, #4]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	4a4a      	ldr	r2, [pc, #296]	@ (801b36c <HAL_DMA_Abort_IT+0x1d0>)
 801b242:	4293      	cmp	r3, r2
 801b244:	d00e      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	681b      	ldr	r3, [r3, #0]
 801b24a:	4a49      	ldr	r2, [pc, #292]	@ (801b370 <HAL_DMA_Abort_IT+0x1d4>)
 801b24c:	4293      	cmp	r3, r2
 801b24e:	d009      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b250:	687b      	ldr	r3, [r7, #4]
 801b252:	681b      	ldr	r3, [r3, #0]
 801b254:	4a47      	ldr	r2, [pc, #284]	@ (801b374 <HAL_DMA_Abort_IT+0x1d8>)
 801b256:	4293      	cmp	r3, r2
 801b258:	d004      	beq.n	801b264 <HAL_DMA_Abort_IT+0xc8>
 801b25a:	687b      	ldr	r3, [r7, #4]
 801b25c:	681b      	ldr	r3, [r3, #0]
 801b25e:	4a46      	ldr	r2, [pc, #280]	@ (801b378 <HAL_DMA_Abort_IT+0x1dc>)
 801b260:	4293      	cmp	r3, r2
 801b262:	d101      	bne.n	801b268 <HAL_DMA_Abort_IT+0xcc>
 801b264:	2301      	movs	r3, #1
 801b266:	e000      	b.n	801b26a <HAL_DMA_Abort_IT+0xce>
 801b268:	2300      	movs	r3, #0
 801b26a:	2b00      	cmp	r3, #0
 801b26c:	f000 8086 	beq.w	801b37c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	2204      	movs	r2, #4
 801b274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	4a2f      	ldr	r2, [pc, #188]	@ (801b33c <HAL_DMA_Abort_IT+0x1a0>)
 801b27e:	4293      	cmp	r3, r2
 801b280:	d04a      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b282:	687b      	ldr	r3, [r7, #4]
 801b284:	681b      	ldr	r3, [r3, #0]
 801b286:	4a2e      	ldr	r2, [pc, #184]	@ (801b340 <HAL_DMA_Abort_IT+0x1a4>)
 801b288:	4293      	cmp	r3, r2
 801b28a:	d045      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	4a2c      	ldr	r2, [pc, #176]	@ (801b344 <HAL_DMA_Abort_IT+0x1a8>)
 801b292:	4293      	cmp	r3, r2
 801b294:	d040      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	4a2b      	ldr	r2, [pc, #172]	@ (801b348 <HAL_DMA_Abort_IT+0x1ac>)
 801b29c:	4293      	cmp	r3, r2
 801b29e:	d03b      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	4a29      	ldr	r2, [pc, #164]	@ (801b34c <HAL_DMA_Abort_IT+0x1b0>)
 801b2a6:	4293      	cmp	r3, r2
 801b2a8:	d036      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	4a28      	ldr	r2, [pc, #160]	@ (801b350 <HAL_DMA_Abort_IT+0x1b4>)
 801b2b0:	4293      	cmp	r3, r2
 801b2b2:	d031      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	4a26      	ldr	r2, [pc, #152]	@ (801b354 <HAL_DMA_Abort_IT+0x1b8>)
 801b2ba:	4293      	cmp	r3, r2
 801b2bc:	d02c      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	4a25      	ldr	r2, [pc, #148]	@ (801b358 <HAL_DMA_Abort_IT+0x1bc>)
 801b2c4:	4293      	cmp	r3, r2
 801b2c6:	d027      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2c8:	687b      	ldr	r3, [r7, #4]
 801b2ca:	681b      	ldr	r3, [r3, #0]
 801b2cc:	4a23      	ldr	r2, [pc, #140]	@ (801b35c <HAL_DMA_Abort_IT+0x1c0>)
 801b2ce:	4293      	cmp	r3, r2
 801b2d0:	d022      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	681b      	ldr	r3, [r3, #0]
 801b2d6:	4a22      	ldr	r2, [pc, #136]	@ (801b360 <HAL_DMA_Abort_IT+0x1c4>)
 801b2d8:	4293      	cmp	r3, r2
 801b2da:	d01d      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2dc:	687b      	ldr	r3, [r7, #4]
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	4a20      	ldr	r2, [pc, #128]	@ (801b364 <HAL_DMA_Abort_IT+0x1c8>)
 801b2e2:	4293      	cmp	r3, r2
 801b2e4:	d018      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	681b      	ldr	r3, [r3, #0]
 801b2ea:	4a1f      	ldr	r2, [pc, #124]	@ (801b368 <HAL_DMA_Abort_IT+0x1cc>)
 801b2ec:	4293      	cmp	r3, r2
 801b2ee:	d013      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2f0:	687b      	ldr	r3, [r7, #4]
 801b2f2:	681b      	ldr	r3, [r3, #0]
 801b2f4:	4a1d      	ldr	r2, [pc, #116]	@ (801b36c <HAL_DMA_Abort_IT+0x1d0>)
 801b2f6:	4293      	cmp	r3, r2
 801b2f8:	d00e      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b2fa:	687b      	ldr	r3, [r7, #4]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	4a1c      	ldr	r2, [pc, #112]	@ (801b370 <HAL_DMA_Abort_IT+0x1d4>)
 801b300:	4293      	cmp	r3, r2
 801b302:	d009      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	4a1a      	ldr	r2, [pc, #104]	@ (801b374 <HAL_DMA_Abort_IT+0x1d8>)
 801b30a:	4293      	cmp	r3, r2
 801b30c:	d004      	beq.n	801b318 <HAL_DMA_Abort_IT+0x17c>
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	681b      	ldr	r3, [r3, #0]
 801b312:	4a19      	ldr	r2, [pc, #100]	@ (801b378 <HAL_DMA_Abort_IT+0x1dc>)
 801b314:	4293      	cmp	r3, r2
 801b316:	d108      	bne.n	801b32a <HAL_DMA_Abort_IT+0x18e>
 801b318:	687b      	ldr	r3, [r7, #4]
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	681a      	ldr	r2, [r3, #0]
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	681b      	ldr	r3, [r3, #0]
 801b322:	f022 0201 	bic.w	r2, r2, #1
 801b326:	601a      	str	r2, [r3, #0]
 801b328:	e178      	b.n	801b61c <HAL_DMA_Abort_IT+0x480>
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	681a      	ldr	r2, [r3, #0]
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	f022 0201 	bic.w	r2, r2, #1
 801b338:	601a      	str	r2, [r3, #0]
 801b33a:	e16f      	b.n	801b61c <HAL_DMA_Abort_IT+0x480>
 801b33c:	40020010 	.word	0x40020010
 801b340:	40020028 	.word	0x40020028
 801b344:	40020040 	.word	0x40020040
 801b348:	40020058 	.word	0x40020058
 801b34c:	40020070 	.word	0x40020070
 801b350:	40020088 	.word	0x40020088
 801b354:	400200a0 	.word	0x400200a0
 801b358:	400200b8 	.word	0x400200b8
 801b35c:	40020410 	.word	0x40020410
 801b360:	40020428 	.word	0x40020428
 801b364:	40020440 	.word	0x40020440
 801b368:	40020458 	.word	0x40020458
 801b36c:	40020470 	.word	0x40020470
 801b370:	40020488 	.word	0x40020488
 801b374:	400204a0 	.word	0x400204a0
 801b378:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	681a      	ldr	r2, [r3, #0]
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	681b      	ldr	r3, [r3, #0]
 801b386:	f022 020e 	bic.w	r2, r2, #14
 801b38a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	4a6c      	ldr	r2, [pc, #432]	@ (801b544 <HAL_DMA_Abort_IT+0x3a8>)
 801b392:	4293      	cmp	r3, r2
 801b394:	d04a      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	4a6b      	ldr	r2, [pc, #428]	@ (801b548 <HAL_DMA_Abort_IT+0x3ac>)
 801b39c:	4293      	cmp	r3, r2
 801b39e:	d045      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3a0:	687b      	ldr	r3, [r7, #4]
 801b3a2:	681b      	ldr	r3, [r3, #0]
 801b3a4:	4a69      	ldr	r2, [pc, #420]	@ (801b54c <HAL_DMA_Abort_IT+0x3b0>)
 801b3a6:	4293      	cmp	r3, r2
 801b3a8:	d040      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3aa:	687b      	ldr	r3, [r7, #4]
 801b3ac:	681b      	ldr	r3, [r3, #0]
 801b3ae:	4a68      	ldr	r2, [pc, #416]	@ (801b550 <HAL_DMA_Abort_IT+0x3b4>)
 801b3b0:	4293      	cmp	r3, r2
 801b3b2:	d03b      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3b4:	687b      	ldr	r3, [r7, #4]
 801b3b6:	681b      	ldr	r3, [r3, #0]
 801b3b8:	4a66      	ldr	r2, [pc, #408]	@ (801b554 <HAL_DMA_Abort_IT+0x3b8>)
 801b3ba:	4293      	cmp	r3, r2
 801b3bc:	d036      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	681b      	ldr	r3, [r3, #0]
 801b3c2:	4a65      	ldr	r2, [pc, #404]	@ (801b558 <HAL_DMA_Abort_IT+0x3bc>)
 801b3c4:	4293      	cmp	r3, r2
 801b3c6:	d031      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	681b      	ldr	r3, [r3, #0]
 801b3cc:	4a63      	ldr	r2, [pc, #396]	@ (801b55c <HAL_DMA_Abort_IT+0x3c0>)
 801b3ce:	4293      	cmp	r3, r2
 801b3d0:	d02c      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3d2:	687b      	ldr	r3, [r7, #4]
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	4a62      	ldr	r2, [pc, #392]	@ (801b560 <HAL_DMA_Abort_IT+0x3c4>)
 801b3d8:	4293      	cmp	r3, r2
 801b3da:	d027      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	4a60      	ldr	r2, [pc, #384]	@ (801b564 <HAL_DMA_Abort_IT+0x3c8>)
 801b3e2:	4293      	cmp	r3, r2
 801b3e4:	d022      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	4a5f      	ldr	r2, [pc, #380]	@ (801b568 <HAL_DMA_Abort_IT+0x3cc>)
 801b3ec:	4293      	cmp	r3, r2
 801b3ee:	d01d      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3f0:	687b      	ldr	r3, [r7, #4]
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	4a5d      	ldr	r2, [pc, #372]	@ (801b56c <HAL_DMA_Abort_IT+0x3d0>)
 801b3f6:	4293      	cmp	r3, r2
 801b3f8:	d018      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	681b      	ldr	r3, [r3, #0]
 801b3fe:	4a5c      	ldr	r2, [pc, #368]	@ (801b570 <HAL_DMA_Abort_IT+0x3d4>)
 801b400:	4293      	cmp	r3, r2
 801b402:	d013      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	4a5a      	ldr	r2, [pc, #360]	@ (801b574 <HAL_DMA_Abort_IT+0x3d8>)
 801b40a:	4293      	cmp	r3, r2
 801b40c:	d00e      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b40e:	687b      	ldr	r3, [r7, #4]
 801b410:	681b      	ldr	r3, [r3, #0]
 801b412:	4a59      	ldr	r2, [pc, #356]	@ (801b578 <HAL_DMA_Abort_IT+0x3dc>)
 801b414:	4293      	cmp	r3, r2
 801b416:	d009      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b418:	687b      	ldr	r3, [r7, #4]
 801b41a:	681b      	ldr	r3, [r3, #0]
 801b41c:	4a57      	ldr	r2, [pc, #348]	@ (801b57c <HAL_DMA_Abort_IT+0x3e0>)
 801b41e:	4293      	cmp	r3, r2
 801b420:	d004      	beq.n	801b42c <HAL_DMA_Abort_IT+0x290>
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	4a56      	ldr	r2, [pc, #344]	@ (801b580 <HAL_DMA_Abort_IT+0x3e4>)
 801b428:	4293      	cmp	r3, r2
 801b42a:	d108      	bne.n	801b43e <HAL_DMA_Abort_IT+0x2a2>
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	681b      	ldr	r3, [r3, #0]
 801b430:	681a      	ldr	r2, [r3, #0]
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	f022 0201 	bic.w	r2, r2, #1
 801b43a:	601a      	str	r2, [r3, #0]
 801b43c:	e007      	b.n	801b44e <HAL_DMA_Abort_IT+0x2b2>
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	681b      	ldr	r3, [r3, #0]
 801b442:	681a      	ldr	r2, [r3, #0]
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	f022 0201 	bic.w	r2, r2, #1
 801b44c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	681b      	ldr	r3, [r3, #0]
 801b452:	4a3c      	ldr	r2, [pc, #240]	@ (801b544 <HAL_DMA_Abort_IT+0x3a8>)
 801b454:	4293      	cmp	r3, r2
 801b456:	d072      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b458:	687b      	ldr	r3, [r7, #4]
 801b45a:	681b      	ldr	r3, [r3, #0]
 801b45c:	4a3a      	ldr	r2, [pc, #232]	@ (801b548 <HAL_DMA_Abort_IT+0x3ac>)
 801b45e:	4293      	cmp	r3, r2
 801b460:	d06d      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	4a39      	ldr	r2, [pc, #228]	@ (801b54c <HAL_DMA_Abort_IT+0x3b0>)
 801b468:	4293      	cmp	r3, r2
 801b46a:	d068      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b46c:	687b      	ldr	r3, [r7, #4]
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	4a37      	ldr	r2, [pc, #220]	@ (801b550 <HAL_DMA_Abort_IT+0x3b4>)
 801b472:	4293      	cmp	r3, r2
 801b474:	d063      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	4a36      	ldr	r2, [pc, #216]	@ (801b554 <HAL_DMA_Abort_IT+0x3b8>)
 801b47c:	4293      	cmp	r3, r2
 801b47e:	d05e      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b480:	687b      	ldr	r3, [r7, #4]
 801b482:	681b      	ldr	r3, [r3, #0]
 801b484:	4a34      	ldr	r2, [pc, #208]	@ (801b558 <HAL_DMA_Abort_IT+0x3bc>)
 801b486:	4293      	cmp	r3, r2
 801b488:	d059      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	4a33      	ldr	r2, [pc, #204]	@ (801b55c <HAL_DMA_Abort_IT+0x3c0>)
 801b490:	4293      	cmp	r3, r2
 801b492:	d054      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	4a31      	ldr	r2, [pc, #196]	@ (801b560 <HAL_DMA_Abort_IT+0x3c4>)
 801b49a:	4293      	cmp	r3, r2
 801b49c:	d04f      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	4a30      	ldr	r2, [pc, #192]	@ (801b564 <HAL_DMA_Abort_IT+0x3c8>)
 801b4a4:	4293      	cmp	r3, r2
 801b4a6:	d04a      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	4a2e      	ldr	r2, [pc, #184]	@ (801b568 <HAL_DMA_Abort_IT+0x3cc>)
 801b4ae:	4293      	cmp	r3, r2
 801b4b0:	d045      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	4a2d      	ldr	r2, [pc, #180]	@ (801b56c <HAL_DMA_Abort_IT+0x3d0>)
 801b4b8:	4293      	cmp	r3, r2
 801b4ba:	d040      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4bc:	687b      	ldr	r3, [r7, #4]
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	4a2b      	ldr	r2, [pc, #172]	@ (801b570 <HAL_DMA_Abort_IT+0x3d4>)
 801b4c2:	4293      	cmp	r3, r2
 801b4c4:	d03b      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	4a2a      	ldr	r2, [pc, #168]	@ (801b574 <HAL_DMA_Abort_IT+0x3d8>)
 801b4cc:	4293      	cmp	r3, r2
 801b4ce:	d036      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	4a28      	ldr	r2, [pc, #160]	@ (801b578 <HAL_DMA_Abort_IT+0x3dc>)
 801b4d6:	4293      	cmp	r3, r2
 801b4d8:	d031      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4da:	687b      	ldr	r3, [r7, #4]
 801b4dc:	681b      	ldr	r3, [r3, #0]
 801b4de:	4a27      	ldr	r2, [pc, #156]	@ (801b57c <HAL_DMA_Abort_IT+0x3e0>)
 801b4e0:	4293      	cmp	r3, r2
 801b4e2:	d02c      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	681b      	ldr	r3, [r3, #0]
 801b4e8:	4a25      	ldr	r2, [pc, #148]	@ (801b580 <HAL_DMA_Abort_IT+0x3e4>)
 801b4ea:	4293      	cmp	r3, r2
 801b4ec:	d027      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	4a24      	ldr	r2, [pc, #144]	@ (801b584 <HAL_DMA_Abort_IT+0x3e8>)
 801b4f4:	4293      	cmp	r3, r2
 801b4f6:	d022      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b4f8:	687b      	ldr	r3, [r7, #4]
 801b4fa:	681b      	ldr	r3, [r3, #0]
 801b4fc:	4a22      	ldr	r2, [pc, #136]	@ (801b588 <HAL_DMA_Abort_IT+0x3ec>)
 801b4fe:	4293      	cmp	r3, r2
 801b500:	d01d      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	4a21      	ldr	r2, [pc, #132]	@ (801b58c <HAL_DMA_Abort_IT+0x3f0>)
 801b508:	4293      	cmp	r3, r2
 801b50a:	d018      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	4a1f      	ldr	r2, [pc, #124]	@ (801b590 <HAL_DMA_Abort_IT+0x3f4>)
 801b512:	4293      	cmp	r3, r2
 801b514:	d013      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	4a1e      	ldr	r2, [pc, #120]	@ (801b594 <HAL_DMA_Abort_IT+0x3f8>)
 801b51c:	4293      	cmp	r3, r2
 801b51e:	d00e      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	4a1c      	ldr	r2, [pc, #112]	@ (801b598 <HAL_DMA_Abort_IT+0x3fc>)
 801b526:	4293      	cmp	r3, r2
 801b528:	d009      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	4a1b      	ldr	r2, [pc, #108]	@ (801b59c <HAL_DMA_Abort_IT+0x400>)
 801b530:	4293      	cmp	r3, r2
 801b532:	d004      	beq.n	801b53e <HAL_DMA_Abort_IT+0x3a2>
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	681b      	ldr	r3, [r3, #0]
 801b538:	4a19      	ldr	r2, [pc, #100]	@ (801b5a0 <HAL_DMA_Abort_IT+0x404>)
 801b53a:	4293      	cmp	r3, r2
 801b53c:	d132      	bne.n	801b5a4 <HAL_DMA_Abort_IT+0x408>
 801b53e:	2301      	movs	r3, #1
 801b540:	e031      	b.n	801b5a6 <HAL_DMA_Abort_IT+0x40a>
 801b542:	bf00      	nop
 801b544:	40020010 	.word	0x40020010
 801b548:	40020028 	.word	0x40020028
 801b54c:	40020040 	.word	0x40020040
 801b550:	40020058 	.word	0x40020058
 801b554:	40020070 	.word	0x40020070
 801b558:	40020088 	.word	0x40020088
 801b55c:	400200a0 	.word	0x400200a0
 801b560:	400200b8 	.word	0x400200b8
 801b564:	40020410 	.word	0x40020410
 801b568:	40020428 	.word	0x40020428
 801b56c:	40020440 	.word	0x40020440
 801b570:	40020458 	.word	0x40020458
 801b574:	40020470 	.word	0x40020470
 801b578:	40020488 	.word	0x40020488
 801b57c:	400204a0 	.word	0x400204a0
 801b580:	400204b8 	.word	0x400204b8
 801b584:	58025408 	.word	0x58025408
 801b588:	5802541c 	.word	0x5802541c
 801b58c:	58025430 	.word	0x58025430
 801b590:	58025444 	.word	0x58025444
 801b594:	58025458 	.word	0x58025458
 801b598:	5802546c 	.word	0x5802546c
 801b59c:	58025480 	.word	0x58025480
 801b5a0:	58025494 	.word	0x58025494
 801b5a4:	2300      	movs	r3, #0
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d028      	beq.n	801b5fc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801b5aa:	687b      	ldr	r3, [r7, #4]
 801b5ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b5ae:	681a      	ldr	r2, [r3, #0]
 801b5b0:	687b      	ldr	r3, [r7, #4]
 801b5b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b5b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b5b8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b5ba:	687b      	ldr	r3, [r7, #4]
 801b5bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b5be:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b5c4:	f003 031f 	and.w	r3, r3, #31
 801b5c8:	2201      	movs	r2, #1
 801b5ca:	409a      	lsls	r2, r3
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801b5d0:	687b      	ldr	r3, [r7, #4]
 801b5d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b5d4:	687a      	ldr	r2, [r7, #4]
 801b5d6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801b5d8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801b5da:	687b      	ldr	r3, [r7, #4]
 801b5dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d00c      	beq.n	801b5fc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5e6:	681a      	ldr	r2, [r3, #0]
 801b5e8:	687b      	ldr	r3, [r7, #4]
 801b5ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b5ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801b5f0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801b5f2:	687b      	ldr	r3, [r7, #4]
 801b5f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b5f6:	687a      	ldr	r2, [r7, #4]
 801b5f8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801b5fa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	2201      	movs	r2, #1
 801b600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	2200      	movs	r2, #0
 801b608:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b610:	2b00      	cmp	r3, #0
 801b612:	d003      	beq.n	801b61c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b618:	6878      	ldr	r0, [r7, #4]
 801b61a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801b61c:	2300      	movs	r3, #0
}
 801b61e:	4618      	mov	r0, r3
 801b620:	3710      	adds	r7, #16
 801b622:	46bd      	mov	sp, r7
 801b624:	bd80      	pop	{r7, pc}
 801b626:	bf00      	nop

0801b628 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801b628:	b580      	push	{r7, lr}
 801b62a:	b08a      	sub	sp, #40	@ 0x28
 801b62c:	af00      	add	r7, sp, #0
 801b62e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801b630:	2300      	movs	r3, #0
 801b632:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801b634:	4b67      	ldr	r3, [pc, #412]	@ (801b7d4 <HAL_DMA_IRQHandler+0x1ac>)
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	4a67      	ldr	r2, [pc, #412]	@ (801b7d8 <HAL_DMA_IRQHandler+0x1b0>)
 801b63a:	fba2 2303 	umull	r2, r3, r2, r3
 801b63e:	0a9b      	lsrs	r3, r3, #10
 801b640:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801b642:	687b      	ldr	r3, [r7, #4]
 801b644:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b646:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b64c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801b64e:	6a3b      	ldr	r3, [r7, #32]
 801b650:	681b      	ldr	r3, [r3, #0]
 801b652:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801b654:	69fb      	ldr	r3, [r7, #28]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801b65a:	687b      	ldr	r3, [r7, #4]
 801b65c:	681b      	ldr	r3, [r3, #0]
 801b65e:	4a5f      	ldr	r2, [pc, #380]	@ (801b7dc <HAL_DMA_IRQHandler+0x1b4>)
 801b660:	4293      	cmp	r3, r2
 801b662:	d04a      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	681b      	ldr	r3, [r3, #0]
 801b668:	4a5d      	ldr	r2, [pc, #372]	@ (801b7e0 <HAL_DMA_IRQHandler+0x1b8>)
 801b66a:	4293      	cmp	r3, r2
 801b66c:	d045      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	681b      	ldr	r3, [r3, #0]
 801b672:	4a5c      	ldr	r2, [pc, #368]	@ (801b7e4 <HAL_DMA_IRQHandler+0x1bc>)
 801b674:	4293      	cmp	r3, r2
 801b676:	d040      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	681b      	ldr	r3, [r3, #0]
 801b67c:	4a5a      	ldr	r2, [pc, #360]	@ (801b7e8 <HAL_DMA_IRQHandler+0x1c0>)
 801b67e:	4293      	cmp	r3, r2
 801b680:	d03b      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	4a59      	ldr	r2, [pc, #356]	@ (801b7ec <HAL_DMA_IRQHandler+0x1c4>)
 801b688:	4293      	cmp	r3, r2
 801b68a:	d036      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b68c:	687b      	ldr	r3, [r7, #4]
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	4a57      	ldr	r2, [pc, #348]	@ (801b7f0 <HAL_DMA_IRQHandler+0x1c8>)
 801b692:	4293      	cmp	r3, r2
 801b694:	d031      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	4a56      	ldr	r2, [pc, #344]	@ (801b7f4 <HAL_DMA_IRQHandler+0x1cc>)
 801b69c:	4293      	cmp	r3, r2
 801b69e:	d02c      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6a0:	687b      	ldr	r3, [r7, #4]
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	4a54      	ldr	r2, [pc, #336]	@ (801b7f8 <HAL_DMA_IRQHandler+0x1d0>)
 801b6a6:	4293      	cmp	r3, r2
 801b6a8:	d027      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6aa:	687b      	ldr	r3, [r7, #4]
 801b6ac:	681b      	ldr	r3, [r3, #0]
 801b6ae:	4a53      	ldr	r2, [pc, #332]	@ (801b7fc <HAL_DMA_IRQHandler+0x1d4>)
 801b6b0:	4293      	cmp	r3, r2
 801b6b2:	d022      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	4a51      	ldr	r2, [pc, #324]	@ (801b800 <HAL_DMA_IRQHandler+0x1d8>)
 801b6ba:	4293      	cmp	r3, r2
 801b6bc:	d01d      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	681b      	ldr	r3, [r3, #0]
 801b6c2:	4a50      	ldr	r2, [pc, #320]	@ (801b804 <HAL_DMA_IRQHandler+0x1dc>)
 801b6c4:	4293      	cmp	r3, r2
 801b6c6:	d018      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	4a4e      	ldr	r2, [pc, #312]	@ (801b808 <HAL_DMA_IRQHandler+0x1e0>)
 801b6ce:	4293      	cmp	r3, r2
 801b6d0:	d013      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	681b      	ldr	r3, [r3, #0]
 801b6d6:	4a4d      	ldr	r2, [pc, #308]	@ (801b80c <HAL_DMA_IRQHandler+0x1e4>)
 801b6d8:	4293      	cmp	r3, r2
 801b6da:	d00e      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	681b      	ldr	r3, [r3, #0]
 801b6e0:	4a4b      	ldr	r2, [pc, #300]	@ (801b810 <HAL_DMA_IRQHandler+0x1e8>)
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	d009      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	4a4a      	ldr	r2, [pc, #296]	@ (801b814 <HAL_DMA_IRQHandler+0x1ec>)
 801b6ec:	4293      	cmp	r3, r2
 801b6ee:	d004      	beq.n	801b6fa <HAL_DMA_IRQHandler+0xd2>
 801b6f0:	687b      	ldr	r3, [r7, #4]
 801b6f2:	681b      	ldr	r3, [r3, #0]
 801b6f4:	4a48      	ldr	r2, [pc, #288]	@ (801b818 <HAL_DMA_IRQHandler+0x1f0>)
 801b6f6:	4293      	cmp	r3, r2
 801b6f8:	d101      	bne.n	801b6fe <HAL_DMA_IRQHandler+0xd6>
 801b6fa:	2301      	movs	r3, #1
 801b6fc:	e000      	b.n	801b700 <HAL_DMA_IRQHandler+0xd8>
 801b6fe:	2300      	movs	r3, #0
 801b700:	2b00      	cmp	r3, #0
 801b702:	f000 842b 	beq.w	801bf5c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b70a:	f003 031f 	and.w	r3, r3, #31
 801b70e:	2208      	movs	r2, #8
 801b710:	409a      	lsls	r2, r3
 801b712:	69bb      	ldr	r3, [r7, #24]
 801b714:	4013      	ands	r3, r2
 801b716:	2b00      	cmp	r3, #0
 801b718:	f000 80a2 	beq.w	801b860 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	4a2e      	ldr	r2, [pc, #184]	@ (801b7dc <HAL_DMA_IRQHandler+0x1b4>)
 801b722:	4293      	cmp	r3, r2
 801b724:	d04a      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	4a2d      	ldr	r2, [pc, #180]	@ (801b7e0 <HAL_DMA_IRQHandler+0x1b8>)
 801b72c:	4293      	cmp	r3, r2
 801b72e:	d045      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	4a2b      	ldr	r2, [pc, #172]	@ (801b7e4 <HAL_DMA_IRQHandler+0x1bc>)
 801b736:	4293      	cmp	r3, r2
 801b738:	d040      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	4a2a      	ldr	r2, [pc, #168]	@ (801b7e8 <HAL_DMA_IRQHandler+0x1c0>)
 801b740:	4293      	cmp	r3, r2
 801b742:	d03b      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	4a28      	ldr	r2, [pc, #160]	@ (801b7ec <HAL_DMA_IRQHandler+0x1c4>)
 801b74a:	4293      	cmp	r3, r2
 801b74c:	d036      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	681b      	ldr	r3, [r3, #0]
 801b752:	4a27      	ldr	r2, [pc, #156]	@ (801b7f0 <HAL_DMA_IRQHandler+0x1c8>)
 801b754:	4293      	cmp	r3, r2
 801b756:	d031      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	681b      	ldr	r3, [r3, #0]
 801b75c:	4a25      	ldr	r2, [pc, #148]	@ (801b7f4 <HAL_DMA_IRQHandler+0x1cc>)
 801b75e:	4293      	cmp	r3, r2
 801b760:	d02c      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b762:	687b      	ldr	r3, [r7, #4]
 801b764:	681b      	ldr	r3, [r3, #0]
 801b766:	4a24      	ldr	r2, [pc, #144]	@ (801b7f8 <HAL_DMA_IRQHandler+0x1d0>)
 801b768:	4293      	cmp	r3, r2
 801b76a:	d027      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	681b      	ldr	r3, [r3, #0]
 801b770:	4a22      	ldr	r2, [pc, #136]	@ (801b7fc <HAL_DMA_IRQHandler+0x1d4>)
 801b772:	4293      	cmp	r3, r2
 801b774:	d022      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b776:	687b      	ldr	r3, [r7, #4]
 801b778:	681b      	ldr	r3, [r3, #0]
 801b77a:	4a21      	ldr	r2, [pc, #132]	@ (801b800 <HAL_DMA_IRQHandler+0x1d8>)
 801b77c:	4293      	cmp	r3, r2
 801b77e:	d01d      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	681b      	ldr	r3, [r3, #0]
 801b784:	4a1f      	ldr	r2, [pc, #124]	@ (801b804 <HAL_DMA_IRQHandler+0x1dc>)
 801b786:	4293      	cmp	r3, r2
 801b788:	d018      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	681b      	ldr	r3, [r3, #0]
 801b78e:	4a1e      	ldr	r2, [pc, #120]	@ (801b808 <HAL_DMA_IRQHandler+0x1e0>)
 801b790:	4293      	cmp	r3, r2
 801b792:	d013      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	681b      	ldr	r3, [r3, #0]
 801b798:	4a1c      	ldr	r2, [pc, #112]	@ (801b80c <HAL_DMA_IRQHandler+0x1e4>)
 801b79a:	4293      	cmp	r3, r2
 801b79c:	d00e      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	4a1b      	ldr	r2, [pc, #108]	@ (801b810 <HAL_DMA_IRQHandler+0x1e8>)
 801b7a4:	4293      	cmp	r3, r2
 801b7a6:	d009      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	4a19      	ldr	r2, [pc, #100]	@ (801b814 <HAL_DMA_IRQHandler+0x1ec>)
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d004      	beq.n	801b7bc <HAL_DMA_IRQHandler+0x194>
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	4a18      	ldr	r2, [pc, #96]	@ (801b818 <HAL_DMA_IRQHandler+0x1f0>)
 801b7b8:	4293      	cmp	r3, r2
 801b7ba:	d12f      	bne.n	801b81c <HAL_DMA_IRQHandler+0x1f4>
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	f003 0304 	and.w	r3, r3, #4
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	bf14      	ite	ne
 801b7ca:	2301      	movne	r3, #1
 801b7cc:	2300      	moveq	r3, #0
 801b7ce:	b2db      	uxtb	r3, r3
 801b7d0:	e02e      	b.n	801b830 <HAL_DMA_IRQHandler+0x208>
 801b7d2:	bf00      	nop
 801b7d4:	20000000 	.word	0x20000000
 801b7d8:	1b4e81b5 	.word	0x1b4e81b5
 801b7dc:	40020010 	.word	0x40020010
 801b7e0:	40020028 	.word	0x40020028
 801b7e4:	40020040 	.word	0x40020040
 801b7e8:	40020058 	.word	0x40020058
 801b7ec:	40020070 	.word	0x40020070
 801b7f0:	40020088 	.word	0x40020088
 801b7f4:	400200a0 	.word	0x400200a0
 801b7f8:	400200b8 	.word	0x400200b8
 801b7fc:	40020410 	.word	0x40020410
 801b800:	40020428 	.word	0x40020428
 801b804:	40020440 	.word	0x40020440
 801b808:	40020458 	.word	0x40020458
 801b80c:	40020470 	.word	0x40020470
 801b810:	40020488 	.word	0x40020488
 801b814:	400204a0 	.word	0x400204a0
 801b818:	400204b8 	.word	0x400204b8
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	681b      	ldr	r3, [r3, #0]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	f003 0308 	and.w	r3, r3, #8
 801b826:	2b00      	cmp	r3, #0
 801b828:	bf14      	ite	ne
 801b82a:	2301      	movne	r3, #1
 801b82c:	2300      	moveq	r3, #0
 801b82e:	b2db      	uxtb	r3, r3
 801b830:	2b00      	cmp	r3, #0
 801b832:	d015      	beq.n	801b860 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801b834:	687b      	ldr	r3, [r7, #4]
 801b836:	681b      	ldr	r3, [r3, #0]
 801b838:	681a      	ldr	r2, [r3, #0]
 801b83a:	687b      	ldr	r3, [r7, #4]
 801b83c:	681b      	ldr	r3, [r3, #0]
 801b83e:	f022 0204 	bic.w	r2, r2, #4
 801b842:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b848:	f003 031f 	and.w	r3, r3, #31
 801b84c:	2208      	movs	r2, #8
 801b84e:	409a      	lsls	r2, r3
 801b850:	6a3b      	ldr	r3, [r7, #32]
 801b852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801b854:	687b      	ldr	r3, [r7, #4]
 801b856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b858:	f043 0201 	orr.w	r2, r3, #1
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b864:	f003 031f 	and.w	r3, r3, #31
 801b868:	69ba      	ldr	r2, [r7, #24]
 801b86a:	fa22 f303 	lsr.w	r3, r2, r3
 801b86e:	f003 0301 	and.w	r3, r3, #1
 801b872:	2b00      	cmp	r3, #0
 801b874:	d06e      	beq.n	801b954 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801b876:	687b      	ldr	r3, [r7, #4]
 801b878:	681b      	ldr	r3, [r3, #0]
 801b87a:	4a69      	ldr	r2, [pc, #420]	@ (801ba20 <HAL_DMA_IRQHandler+0x3f8>)
 801b87c:	4293      	cmp	r3, r2
 801b87e:	d04a      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	681b      	ldr	r3, [r3, #0]
 801b884:	4a67      	ldr	r2, [pc, #412]	@ (801ba24 <HAL_DMA_IRQHandler+0x3fc>)
 801b886:	4293      	cmp	r3, r2
 801b888:	d045      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	681b      	ldr	r3, [r3, #0]
 801b88e:	4a66      	ldr	r2, [pc, #408]	@ (801ba28 <HAL_DMA_IRQHandler+0x400>)
 801b890:	4293      	cmp	r3, r2
 801b892:	d040      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b894:	687b      	ldr	r3, [r7, #4]
 801b896:	681b      	ldr	r3, [r3, #0]
 801b898:	4a64      	ldr	r2, [pc, #400]	@ (801ba2c <HAL_DMA_IRQHandler+0x404>)
 801b89a:	4293      	cmp	r3, r2
 801b89c:	d03b      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b89e:	687b      	ldr	r3, [r7, #4]
 801b8a0:	681b      	ldr	r3, [r3, #0]
 801b8a2:	4a63      	ldr	r2, [pc, #396]	@ (801ba30 <HAL_DMA_IRQHandler+0x408>)
 801b8a4:	4293      	cmp	r3, r2
 801b8a6:	d036      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8a8:	687b      	ldr	r3, [r7, #4]
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	4a61      	ldr	r2, [pc, #388]	@ (801ba34 <HAL_DMA_IRQHandler+0x40c>)
 801b8ae:	4293      	cmp	r3, r2
 801b8b0:	d031      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	4a60      	ldr	r2, [pc, #384]	@ (801ba38 <HAL_DMA_IRQHandler+0x410>)
 801b8b8:	4293      	cmp	r3, r2
 801b8ba:	d02c      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	4a5e      	ldr	r2, [pc, #376]	@ (801ba3c <HAL_DMA_IRQHandler+0x414>)
 801b8c2:	4293      	cmp	r3, r2
 801b8c4:	d027      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	4a5d      	ldr	r2, [pc, #372]	@ (801ba40 <HAL_DMA_IRQHandler+0x418>)
 801b8cc:	4293      	cmp	r3, r2
 801b8ce:	d022      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	4a5b      	ldr	r2, [pc, #364]	@ (801ba44 <HAL_DMA_IRQHandler+0x41c>)
 801b8d6:	4293      	cmp	r3, r2
 801b8d8:	d01d      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8da:	687b      	ldr	r3, [r7, #4]
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	4a5a      	ldr	r2, [pc, #360]	@ (801ba48 <HAL_DMA_IRQHandler+0x420>)
 801b8e0:	4293      	cmp	r3, r2
 801b8e2:	d018      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	4a58      	ldr	r2, [pc, #352]	@ (801ba4c <HAL_DMA_IRQHandler+0x424>)
 801b8ea:	4293      	cmp	r3, r2
 801b8ec:	d013      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8ee:	687b      	ldr	r3, [r7, #4]
 801b8f0:	681b      	ldr	r3, [r3, #0]
 801b8f2:	4a57      	ldr	r2, [pc, #348]	@ (801ba50 <HAL_DMA_IRQHandler+0x428>)
 801b8f4:	4293      	cmp	r3, r2
 801b8f6:	d00e      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	681b      	ldr	r3, [r3, #0]
 801b8fc:	4a55      	ldr	r2, [pc, #340]	@ (801ba54 <HAL_DMA_IRQHandler+0x42c>)
 801b8fe:	4293      	cmp	r3, r2
 801b900:	d009      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b902:	687b      	ldr	r3, [r7, #4]
 801b904:	681b      	ldr	r3, [r3, #0]
 801b906:	4a54      	ldr	r2, [pc, #336]	@ (801ba58 <HAL_DMA_IRQHandler+0x430>)
 801b908:	4293      	cmp	r3, r2
 801b90a:	d004      	beq.n	801b916 <HAL_DMA_IRQHandler+0x2ee>
 801b90c:	687b      	ldr	r3, [r7, #4]
 801b90e:	681b      	ldr	r3, [r3, #0]
 801b910:	4a52      	ldr	r2, [pc, #328]	@ (801ba5c <HAL_DMA_IRQHandler+0x434>)
 801b912:	4293      	cmp	r3, r2
 801b914:	d10a      	bne.n	801b92c <HAL_DMA_IRQHandler+0x304>
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	695b      	ldr	r3, [r3, #20]
 801b91c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b920:	2b00      	cmp	r3, #0
 801b922:	bf14      	ite	ne
 801b924:	2301      	movne	r3, #1
 801b926:	2300      	moveq	r3, #0
 801b928:	b2db      	uxtb	r3, r3
 801b92a:	e003      	b.n	801b934 <HAL_DMA_IRQHandler+0x30c>
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	681b      	ldr	r3, [r3, #0]
 801b932:	2300      	movs	r3, #0
 801b934:	2b00      	cmp	r3, #0
 801b936:	d00d      	beq.n	801b954 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b93c:	f003 031f 	and.w	r3, r3, #31
 801b940:	2201      	movs	r2, #1
 801b942:	409a      	lsls	r2, r3
 801b944:	6a3b      	ldr	r3, [r7, #32]
 801b946:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b94c:	f043 0202 	orr.w	r2, r3, #2
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b958:	f003 031f 	and.w	r3, r3, #31
 801b95c:	2204      	movs	r2, #4
 801b95e:	409a      	lsls	r2, r3
 801b960:	69bb      	ldr	r3, [r7, #24]
 801b962:	4013      	ands	r3, r2
 801b964:	2b00      	cmp	r3, #0
 801b966:	f000 808f 	beq.w	801ba88 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	4a2c      	ldr	r2, [pc, #176]	@ (801ba20 <HAL_DMA_IRQHandler+0x3f8>)
 801b970:	4293      	cmp	r3, r2
 801b972:	d04a      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	681b      	ldr	r3, [r3, #0]
 801b978:	4a2a      	ldr	r2, [pc, #168]	@ (801ba24 <HAL_DMA_IRQHandler+0x3fc>)
 801b97a:	4293      	cmp	r3, r2
 801b97c:	d045      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	4a29      	ldr	r2, [pc, #164]	@ (801ba28 <HAL_DMA_IRQHandler+0x400>)
 801b984:	4293      	cmp	r3, r2
 801b986:	d040      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b988:	687b      	ldr	r3, [r7, #4]
 801b98a:	681b      	ldr	r3, [r3, #0]
 801b98c:	4a27      	ldr	r2, [pc, #156]	@ (801ba2c <HAL_DMA_IRQHandler+0x404>)
 801b98e:	4293      	cmp	r3, r2
 801b990:	d03b      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	4a26      	ldr	r2, [pc, #152]	@ (801ba30 <HAL_DMA_IRQHandler+0x408>)
 801b998:	4293      	cmp	r3, r2
 801b99a:	d036      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b99c:	687b      	ldr	r3, [r7, #4]
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	4a24      	ldr	r2, [pc, #144]	@ (801ba34 <HAL_DMA_IRQHandler+0x40c>)
 801b9a2:	4293      	cmp	r3, r2
 801b9a4:	d031      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9a6:	687b      	ldr	r3, [r7, #4]
 801b9a8:	681b      	ldr	r3, [r3, #0]
 801b9aa:	4a23      	ldr	r2, [pc, #140]	@ (801ba38 <HAL_DMA_IRQHandler+0x410>)
 801b9ac:	4293      	cmp	r3, r2
 801b9ae:	d02c      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	4a21      	ldr	r2, [pc, #132]	@ (801ba3c <HAL_DMA_IRQHandler+0x414>)
 801b9b6:	4293      	cmp	r3, r2
 801b9b8:	d027      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9ba:	687b      	ldr	r3, [r7, #4]
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	4a20      	ldr	r2, [pc, #128]	@ (801ba40 <HAL_DMA_IRQHandler+0x418>)
 801b9c0:	4293      	cmp	r3, r2
 801b9c2:	d022      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	4a1e      	ldr	r2, [pc, #120]	@ (801ba44 <HAL_DMA_IRQHandler+0x41c>)
 801b9ca:	4293      	cmp	r3, r2
 801b9cc:	d01d      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	4a1d      	ldr	r2, [pc, #116]	@ (801ba48 <HAL_DMA_IRQHandler+0x420>)
 801b9d4:	4293      	cmp	r3, r2
 801b9d6:	d018      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	681b      	ldr	r3, [r3, #0]
 801b9dc:	4a1b      	ldr	r2, [pc, #108]	@ (801ba4c <HAL_DMA_IRQHandler+0x424>)
 801b9de:	4293      	cmp	r3, r2
 801b9e0:	d013      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9e2:	687b      	ldr	r3, [r7, #4]
 801b9e4:	681b      	ldr	r3, [r3, #0]
 801b9e6:	4a1a      	ldr	r2, [pc, #104]	@ (801ba50 <HAL_DMA_IRQHandler+0x428>)
 801b9e8:	4293      	cmp	r3, r2
 801b9ea:	d00e      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9ec:	687b      	ldr	r3, [r7, #4]
 801b9ee:	681b      	ldr	r3, [r3, #0]
 801b9f0:	4a18      	ldr	r2, [pc, #96]	@ (801ba54 <HAL_DMA_IRQHandler+0x42c>)
 801b9f2:	4293      	cmp	r3, r2
 801b9f4:	d009      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	681b      	ldr	r3, [r3, #0]
 801b9fa:	4a17      	ldr	r2, [pc, #92]	@ (801ba58 <HAL_DMA_IRQHandler+0x430>)
 801b9fc:	4293      	cmp	r3, r2
 801b9fe:	d004      	beq.n	801ba0a <HAL_DMA_IRQHandler+0x3e2>
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	681b      	ldr	r3, [r3, #0]
 801ba04:	4a15      	ldr	r2, [pc, #84]	@ (801ba5c <HAL_DMA_IRQHandler+0x434>)
 801ba06:	4293      	cmp	r3, r2
 801ba08:	d12a      	bne.n	801ba60 <HAL_DMA_IRQHandler+0x438>
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	681b      	ldr	r3, [r3, #0]
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	f003 0302 	and.w	r3, r3, #2
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	bf14      	ite	ne
 801ba18:	2301      	movne	r3, #1
 801ba1a:	2300      	moveq	r3, #0
 801ba1c:	b2db      	uxtb	r3, r3
 801ba1e:	e023      	b.n	801ba68 <HAL_DMA_IRQHandler+0x440>
 801ba20:	40020010 	.word	0x40020010
 801ba24:	40020028 	.word	0x40020028
 801ba28:	40020040 	.word	0x40020040
 801ba2c:	40020058 	.word	0x40020058
 801ba30:	40020070 	.word	0x40020070
 801ba34:	40020088 	.word	0x40020088
 801ba38:	400200a0 	.word	0x400200a0
 801ba3c:	400200b8 	.word	0x400200b8
 801ba40:	40020410 	.word	0x40020410
 801ba44:	40020428 	.word	0x40020428
 801ba48:	40020440 	.word	0x40020440
 801ba4c:	40020458 	.word	0x40020458
 801ba50:	40020470 	.word	0x40020470
 801ba54:	40020488 	.word	0x40020488
 801ba58:	400204a0 	.word	0x400204a0
 801ba5c:	400204b8 	.word	0x400204b8
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	681b      	ldr	r3, [r3, #0]
 801ba66:	2300      	movs	r3, #0
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	d00d      	beq.n	801ba88 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ba70:	f003 031f 	and.w	r3, r3, #31
 801ba74:	2204      	movs	r2, #4
 801ba76:	409a      	lsls	r2, r3
 801ba78:	6a3b      	ldr	r3, [r7, #32]
 801ba7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801ba7c:	687b      	ldr	r3, [r7, #4]
 801ba7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ba80:	f043 0204 	orr.w	r2, r3, #4
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801ba88:	687b      	ldr	r3, [r7, #4]
 801ba8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ba8c:	f003 031f 	and.w	r3, r3, #31
 801ba90:	2210      	movs	r2, #16
 801ba92:	409a      	lsls	r2, r3
 801ba94:	69bb      	ldr	r3, [r7, #24]
 801ba96:	4013      	ands	r3, r2
 801ba98:	2b00      	cmp	r3, #0
 801ba9a:	f000 80a6 	beq.w	801bbea <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	4a85      	ldr	r2, [pc, #532]	@ (801bcb8 <HAL_DMA_IRQHandler+0x690>)
 801baa4:	4293      	cmp	r3, r2
 801baa6:	d04a      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801baa8:	687b      	ldr	r3, [r7, #4]
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	4a83      	ldr	r2, [pc, #524]	@ (801bcbc <HAL_DMA_IRQHandler+0x694>)
 801baae:	4293      	cmp	r3, r2
 801bab0:	d045      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	4a82      	ldr	r2, [pc, #520]	@ (801bcc0 <HAL_DMA_IRQHandler+0x698>)
 801bab8:	4293      	cmp	r3, r2
 801baba:	d040      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	681b      	ldr	r3, [r3, #0]
 801bac0:	4a80      	ldr	r2, [pc, #512]	@ (801bcc4 <HAL_DMA_IRQHandler+0x69c>)
 801bac2:	4293      	cmp	r3, r2
 801bac4:	d03b      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	681b      	ldr	r3, [r3, #0]
 801baca:	4a7f      	ldr	r2, [pc, #508]	@ (801bcc8 <HAL_DMA_IRQHandler+0x6a0>)
 801bacc:	4293      	cmp	r3, r2
 801bace:	d036      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	681b      	ldr	r3, [r3, #0]
 801bad4:	4a7d      	ldr	r2, [pc, #500]	@ (801bccc <HAL_DMA_IRQHandler+0x6a4>)
 801bad6:	4293      	cmp	r3, r2
 801bad8:	d031      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	4a7c      	ldr	r2, [pc, #496]	@ (801bcd0 <HAL_DMA_IRQHandler+0x6a8>)
 801bae0:	4293      	cmp	r3, r2
 801bae2:	d02c      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bae4:	687b      	ldr	r3, [r7, #4]
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	4a7a      	ldr	r2, [pc, #488]	@ (801bcd4 <HAL_DMA_IRQHandler+0x6ac>)
 801baea:	4293      	cmp	r3, r2
 801baec:	d027      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	4a79      	ldr	r2, [pc, #484]	@ (801bcd8 <HAL_DMA_IRQHandler+0x6b0>)
 801baf4:	4293      	cmp	r3, r2
 801baf6:	d022      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801baf8:	687b      	ldr	r3, [r7, #4]
 801bafa:	681b      	ldr	r3, [r3, #0]
 801bafc:	4a77      	ldr	r2, [pc, #476]	@ (801bcdc <HAL_DMA_IRQHandler+0x6b4>)
 801bafe:	4293      	cmp	r3, r2
 801bb00:	d01d      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	681b      	ldr	r3, [r3, #0]
 801bb06:	4a76      	ldr	r2, [pc, #472]	@ (801bce0 <HAL_DMA_IRQHandler+0x6b8>)
 801bb08:	4293      	cmp	r3, r2
 801bb0a:	d018      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	681b      	ldr	r3, [r3, #0]
 801bb10:	4a74      	ldr	r2, [pc, #464]	@ (801bce4 <HAL_DMA_IRQHandler+0x6bc>)
 801bb12:	4293      	cmp	r3, r2
 801bb14:	d013      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bb16:	687b      	ldr	r3, [r7, #4]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	4a73      	ldr	r2, [pc, #460]	@ (801bce8 <HAL_DMA_IRQHandler+0x6c0>)
 801bb1c:	4293      	cmp	r3, r2
 801bb1e:	d00e      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bb20:	687b      	ldr	r3, [r7, #4]
 801bb22:	681b      	ldr	r3, [r3, #0]
 801bb24:	4a71      	ldr	r2, [pc, #452]	@ (801bcec <HAL_DMA_IRQHandler+0x6c4>)
 801bb26:	4293      	cmp	r3, r2
 801bb28:	d009      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	681b      	ldr	r3, [r3, #0]
 801bb2e:	4a70      	ldr	r2, [pc, #448]	@ (801bcf0 <HAL_DMA_IRQHandler+0x6c8>)
 801bb30:	4293      	cmp	r3, r2
 801bb32:	d004      	beq.n	801bb3e <HAL_DMA_IRQHandler+0x516>
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	4a6e      	ldr	r2, [pc, #440]	@ (801bcf4 <HAL_DMA_IRQHandler+0x6cc>)
 801bb3a:	4293      	cmp	r3, r2
 801bb3c:	d10a      	bne.n	801bb54 <HAL_DMA_IRQHandler+0x52c>
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	681b      	ldr	r3, [r3, #0]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	f003 0308 	and.w	r3, r3, #8
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	bf14      	ite	ne
 801bb4c:	2301      	movne	r3, #1
 801bb4e:	2300      	moveq	r3, #0
 801bb50:	b2db      	uxtb	r3, r3
 801bb52:	e009      	b.n	801bb68 <HAL_DMA_IRQHandler+0x540>
 801bb54:	687b      	ldr	r3, [r7, #4]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	f003 0304 	and.w	r3, r3, #4
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	bf14      	ite	ne
 801bb62:	2301      	movne	r3, #1
 801bb64:	2300      	moveq	r3, #0
 801bb66:	b2db      	uxtb	r3, r3
 801bb68:	2b00      	cmp	r3, #0
 801bb6a:	d03e      	beq.n	801bbea <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bb70:	f003 031f 	and.w	r3, r3, #31
 801bb74:	2210      	movs	r2, #16
 801bb76:	409a      	lsls	r2, r3
 801bb78:	6a3b      	ldr	r3, [r7, #32]
 801bb7a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	681b      	ldr	r3, [r3, #0]
 801bb82:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d018      	beq.n	801bbbc <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	681b      	ldr	r3, [r3, #0]
 801bb8e:	681b      	ldr	r3, [r3, #0]
 801bb90:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bb94:	2b00      	cmp	r3, #0
 801bb96:	d108      	bne.n	801bbaa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bb9c:	2b00      	cmp	r3, #0
 801bb9e:	d024      	beq.n	801bbea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bba4:	6878      	ldr	r0, [r7, #4]
 801bba6:	4798      	blx	r3
 801bba8:	e01f      	b.n	801bbea <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bbae:	2b00      	cmp	r3, #0
 801bbb0:	d01b      	beq.n	801bbea <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bbb6:	6878      	ldr	r0, [r7, #4]
 801bbb8:	4798      	blx	r3
 801bbba:	e016      	b.n	801bbea <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d107      	bne.n	801bbda <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	681a      	ldr	r2, [r3, #0]
 801bbd0:	687b      	ldr	r3, [r7, #4]
 801bbd2:	681b      	ldr	r3, [r3, #0]
 801bbd4:	f022 0208 	bic.w	r2, r2, #8
 801bbd8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bbde:	2b00      	cmp	r3, #0
 801bbe0:	d003      	beq.n	801bbea <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801bbe2:	687b      	ldr	r3, [r7, #4]
 801bbe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bbe6:	6878      	ldr	r0, [r7, #4]
 801bbe8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bbee:	f003 031f 	and.w	r3, r3, #31
 801bbf2:	2220      	movs	r2, #32
 801bbf4:	409a      	lsls	r2, r3
 801bbf6:	69bb      	ldr	r3, [r7, #24]
 801bbf8:	4013      	ands	r3, r2
 801bbfa:	2b00      	cmp	r3, #0
 801bbfc:	f000 8110 	beq.w	801be20 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	4a2c      	ldr	r2, [pc, #176]	@ (801bcb8 <HAL_DMA_IRQHandler+0x690>)
 801bc06:	4293      	cmp	r3, r2
 801bc08:	d04a      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	681b      	ldr	r3, [r3, #0]
 801bc0e:	4a2b      	ldr	r2, [pc, #172]	@ (801bcbc <HAL_DMA_IRQHandler+0x694>)
 801bc10:	4293      	cmp	r3, r2
 801bc12:	d045      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	681b      	ldr	r3, [r3, #0]
 801bc18:	4a29      	ldr	r2, [pc, #164]	@ (801bcc0 <HAL_DMA_IRQHandler+0x698>)
 801bc1a:	4293      	cmp	r3, r2
 801bc1c:	d040      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc1e:	687b      	ldr	r3, [r7, #4]
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	4a28      	ldr	r2, [pc, #160]	@ (801bcc4 <HAL_DMA_IRQHandler+0x69c>)
 801bc24:	4293      	cmp	r3, r2
 801bc26:	d03b      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	4a26      	ldr	r2, [pc, #152]	@ (801bcc8 <HAL_DMA_IRQHandler+0x6a0>)
 801bc2e:	4293      	cmp	r3, r2
 801bc30:	d036      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	4a25      	ldr	r2, [pc, #148]	@ (801bccc <HAL_DMA_IRQHandler+0x6a4>)
 801bc38:	4293      	cmp	r3, r2
 801bc3a:	d031      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	4a23      	ldr	r2, [pc, #140]	@ (801bcd0 <HAL_DMA_IRQHandler+0x6a8>)
 801bc42:	4293      	cmp	r3, r2
 801bc44:	d02c      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	4a22      	ldr	r2, [pc, #136]	@ (801bcd4 <HAL_DMA_IRQHandler+0x6ac>)
 801bc4c:	4293      	cmp	r3, r2
 801bc4e:	d027      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	4a20      	ldr	r2, [pc, #128]	@ (801bcd8 <HAL_DMA_IRQHandler+0x6b0>)
 801bc56:	4293      	cmp	r3, r2
 801bc58:	d022      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	4a1f      	ldr	r2, [pc, #124]	@ (801bcdc <HAL_DMA_IRQHandler+0x6b4>)
 801bc60:	4293      	cmp	r3, r2
 801bc62:	d01d      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	4a1d      	ldr	r2, [pc, #116]	@ (801bce0 <HAL_DMA_IRQHandler+0x6b8>)
 801bc6a:	4293      	cmp	r3, r2
 801bc6c:	d018      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	4a1c      	ldr	r2, [pc, #112]	@ (801bce4 <HAL_DMA_IRQHandler+0x6bc>)
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d013      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	4a1a      	ldr	r2, [pc, #104]	@ (801bce8 <HAL_DMA_IRQHandler+0x6c0>)
 801bc7e:	4293      	cmp	r3, r2
 801bc80:	d00e      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	4a19      	ldr	r2, [pc, #100]	@ (801bcec <HAL_DMA_IRQHandler+0x6c4>)
 801bc88:	4293      	cmp	r3, r2
 801bc8a:	d009      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	4a17      	ldr	r2, [pc, #92]	@ (801bcf0 <HAL_DMA_IRQHandler+0x6c8>)
 801bc92:	4293      	cmp	r3, r2
 801bc94:	d004      	beq.n	801bca0 <HAL_DMA_IRQHandler+0x678>
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	4a16      	ldr	r2, [pc, #88]	@ (801bcf4 <HAL_DMA_IRQHandler+0x6cc>)
 801bc9c:	4293      	cmp	r3, r2
 801bc9e:	d12b      	bne.n	801bcf8 <HAL_DMA_IRQHandler+0x6d0>
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	f003 0310 	and.w	r3, r3, #16
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	bf14      	ite	ne
 801bcae:	2301      	movne	r3, #1
 801bcb0:	2300      	moveq	r3, #0
 801bcb2:	b2db      	uxtb	r3, r3
 801bcb4:	e02a      	b.n	801bd0c <HAL_DMA_IRQHandler+0x6e4>
 801bcb6:	bf00      	nop
 801bcb8:	40020010 	.word	0x40020010
 801bcbc:	40020028 	.word	0x40020028
 801bcc0:	40020040 	.word	0x40020040
 801bcc4:	40020058 	.word	0x40020058
 801bcc8:	40020070 	.word	0x40020070
 801bccc:	40020088 	.word	0x40020088
 801bcd0:	400200a0 	.word	0x400200a0
 801bcd4:	400200b8 	.word	0x400200b8
 801bcd8:	40020410 	.word	0x40020410
 801bcdc:	40020428 	.word	0x40020428
 801bce0:	40020440 	.word	0x40020440
 801bce4:	40020458 	.word	0x40020458
 801bce8:	40020470 	.word	0x40020470
 801bcec:	40020488 	.word	0x40020488
 801bcf0:	400204a0 	.word	0x400204a0
 801bcf4:	400204b8 	.word	0x400204b8
 801bcf8:	687b      	ldr	r3, [r7, #4]
 801bcfa:	681b      	ldr	r3, [r3, #0]
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	f003 0302 	and.w	r3, r3, #2
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	bf14      	ite	ne
 801bd06:	2301      	movne	r3, #1
 801bd08:	2300      	moveq	r3, #0
 801bd0a:	b2db      	uxtb	r3, r3
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	f000 8087 	beq.w	801be20 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bd16:	f003 031f 	and.w	r3, r3, #31
 801bd1a:	2220      	movs	r2, #32
 801bd1c:	409a      	lsls	r2, r3
 801bd1e:	6a3b      	ldr	r3, [r7, #32]
 801bd20:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801bd28:	b2db      	uxtb	r3, r3
 801bd2a:	2b04      	cmp	r3, #4
 801bd2c:	d139      	bne.n	801bda2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	681b      	ldr	r3, [r3, #0]
 801bd32:	681a      	ldr	r2, [r3, #0]
 801bd34:	687b      	ldr	r3, [r7, #4]
 801bd36:	681b      	ldr	r3, [r3, #0]
 801bd38:	f022 0216 	bic.w	r2, r2, #22
 801bd3c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	681b      	ldr	r3, [r3, #0]
 801bd42:	695a      	ldr	r2, [r3, #20]
 801bd44:	687b      	ldr	r3, [r7, #4]
 801bd46:	681b      	ldr	r3, [r3, #0]
 801bd48:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801bd4c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d103      	bne.n	801bd5e <HAL_DMA_IRQHandler+0x736>
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	d007      	beq.n	801bd6e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	681a      	ldr	r2, [r3, #0]
 801bd64:	687b      	ldr	r3, [r7, #4]
 801bd66:	681b      	ldr	r3, [r3, #0]
 801bd68:	f022 0208 	bic.w	r2, r2, #8
 801bd6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801bd6e:	687b      	ldr	r3, [r7, #4]
 801bd70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bd72:	f003 031f 	and.w	r3, r3, #31
 801bd76:	223f      	movs	r2, #63	@ 0x3f
 801bd78:	409a      	lsls	r2, r3
 801bd7a:	6a3b      	ldr	r3, [r7, #32]
 801bd7c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801bd7e:	687b      	ldr	r3, [r7, #4]
 801bd80:	2201      	movs	r2, #1
 801bd82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801bd86:	687b      	ldr	r3, [r7, #4]
 801bd88:	2200      	movs	r2, #0
 801bd8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	f000 834a 	beq.w	801c42c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801bd9c:	6878      	ldr	r0, [r7, #4]
 801bd9e:	4798      	blx	r3
          }
          return;
 801bda0:	e344      	b.n	801c42c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	681b      	ldr	r3, [r3, #0]
 801bda6:	681b      	ldr	r3, [r3, #0]
 801bda8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801bdac:	2b00      	cmp	r3, #0
 801bdae:	d018      	beq.n	801bde2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d108      	bne.n	801bdd0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801bdbe:	687b      	ldr	r3, [r7, #4]
 801bdc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bdc2:	2b00      	cmp	r3, #0
 801bdc4:	d02c      	beq.n	801be20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bdca:	6878      	ldr	r0, [r7, #4]
 801bdcc:	4798      	blx	r3
 801bdce:	e027      	b.n	801be20 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bdd4:	2b00      	cmp	r3, #0
 801bdd6:	d023      	beq.n	801be20 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801bdd8:	687b      	ldr	r3, [r7, #4]
 801bdda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bddc:	6878      	ldr	r0, [r7, #4]
 801bdde:	4798      	blx	r3
 801bde0:	e01e      	b.n	801be20 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	681b      	ldr	r3, [r3, #0]
 801bde8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bdec:	2b00      	cmp	r3, #0
 801bdee:	d10f      	bne.n	801be10 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	681b      	ldr	r3, [r3, #0]
 801bdf4:	681a      	ldr	r2, [r3, #0]
 801bdf6:	687b      	ldr	r3, [r7, #4]
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	f022 0210 	bic.w	r2, r2, #16
 801bdfe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	2201      	movs	r2, #1
 801be04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801be08:	687b      	ldr	r3, [r7, #4]
 801be0a:	2200      	movs	r2, #0
 801be0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be14:	2b00      	cmp	r3, #0
 801be16:	d003      	beq.n	801be20 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be1c:	6878      	ldr	r0, [r7, #4]
 801be1e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801be24:	2b00      	cmp	r3, #0
 801be26:	f000 8306 	beq.w	801c436 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801be2e:	f003 0301 	and.w	r3, r3, #1
 801be32:	2b00      	cmp	r3, #0
 801be34:	f000 8088 	beq.w	801bf48 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801be38:	687b      	ldr	r3, [r7, #4]
 801be3a:	2204      	movs	r2, #4
 801be3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	4a7a      	ldr	r2, [pc, #488]	@ (801c030 <HAL_DMA_IRQHandler+0xa08>)
 801be46:	4293      	cmp	r3, r2
 801be48:	d04a      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	4a79      	ldr	r2, [pc, #484]	@ (801c034 <HAL_DMA_IRQHandler+0xa0c>)
 801be50:	4293      	cmp	r3, r2
 801be52:	d045      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	681b      	ldr	r3, [r3, #0]
 801be58:	4a77      	ldr	r2, [pc, #476]	@ (801c038 <HAL_DMA_IRQHandler+0xa10>)
 801be5a:	4293      	cmp	r3, r2
 801be5c:	d040      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	4a76      	ldr	r2, [pc, #472]	@ (801c03c <HAL_DMA_IRQHandler+0xa14>)
 801be64:	4293      	cmp	r3, r2
 801be66:	d03b      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	4a74      	ldr	r2, [pc, #464]	@ (801c040 <HAL_DMA_IRQHandler+0xa18>)
 801be6e:	4293      	cmp	r3, r2
 801be70:	d036      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	4a73      	ldr	r2, [pc, #460]	@ (801c044 <HAL_DMA_IRQHandler+0xa1c>)
 801be78:	4293      	cmp	r3, r2
 801be7a:	d031      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	4a71      	ldr	r2, [pc, #452]	@ (801c048 <HAL_DMA_IRQHandler+0xa20>)
 801be82:	4293      	cmp	r3, r2
 801be84:	d02c      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	681b      	ldr	r3, [r3, #0]
 801be8a:	4a70      	ldr	r2, [pc, #448]	@ (801c04c <HAL_DMA_IRQHandler+0xa24>)
 801be8c:	4293      	cmp	r3, r2
 801be8e:	d027      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be90:	687b      	ldr	r3, [r7, #4]
 801be92:	681b      	ldr	r3, [r3, #0]
 801be94:	4a6e      	ldr	r2, [pc, #440]	@ (801c050 <HAL_DMA_IRQHandler+0xa28>)
 801be96:	4293      	cmp	r3, r2
 801be98:	d022      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	681b      	ldr	r3, [r3, #0]
 801be9e:	4a6d      	ldr	r2, [pc, #436]	@ (801c054 <HAL_DMA_IRQHandler+0xa2c>)
 801bea0:	4293      	cmp	r3, r2
 801bea2:	d01d      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	681b      	ldr	r3, [r3, #0]
 801bea8:	4a6b      	ldr	r2, [pc, #428]	@ (801c058 <HAL_DMA_IRQHandler+0xa30>)
 801beaa:	4293      	cmp	r3, r2
 801beac:	d018      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	681b      	ldr	r3, [r3, #0]
 801beb2:	4a6a      	ldr	r2, [pc, #424]	@ (801c05c <HAL_DMA_IRQHandler+0xa34>)
 801beb4:	4293      	cmp	r3, r2
 801beb6:	d013      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801beb8:	687b      	ldr	r3, [r7, #4]
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	4a68      	ldr	r2, [pc, #416]	@ (801c060 <HAL_DMA_IRQHandler+0xa38>)
 801bebe:	4293      	cmp	r3, r2
 801bec0:	d00e      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801bec2:	687b      	ldr	r3, [r7, #4]
 801bec4:	681b      	ldr	r3, [r3, #0]
 801bec6:	4a67      	ldr	r2, [pc, #412]	@ (801c064 <HAL_DMA_IRQHandler+0xa3c>)
 801bec8:	4293      	cmp	r3, r2
 801beca:	d009      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801becc:	687b      	ldr	r3, [r7, #4]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	4a65      	ldr	r2, [pc, #404]	@ (801c068 <HAL_DMA_IRQHandler+0xa40>)
 801bed2:	4293      	cmp	r3, r2
 801bed4:	d004      	beq.n	801bee0 <HAL_DMA_IRQHandler+0x8b8>
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	681b      	ldr	r3, [r3, #0]
 801beda:	4a64      	ldr	r2, [pc, #400]	@ (801c06c <HAL_DMA_IRQHandler+0xa44>)
 801bedc:	4293      	cmp	r3, r2
 801bede:	d108      	bne.n	801bef2 <HAL_DMA_IRQHandler+0x8ca>
 801bee0:	687b      	ldr	r3, [r7, #4]
 801bee2:	681b      	ldr	r3, [r3, #0]
 801bee4:	681a      	ldr	r2, [r3, #0]
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	f022 0201 	bic.w	r2, r2, #1
 801beee:	601a      	str	r2, [r3, #0]
 801bef0:	e007      	b.n	801bf02 <HAL_DMA_IRQHandler+0x8da>
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	681b      	ldr	r3, [r3, #0]
 801bef6:	681a      	ldr	r2, [r3, #0]
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	681b      	ldr	r3, [r3, #0]
 801befc:	f022 0201 	bic.w	r2, r2, #1
 801bf00:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	3301      	adds	r3, #1
 801bf06:	60fb      	str	r3, [r7, #12]
 801bf08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf0a:	429a      	cmp	r2, r3
 801bf0c:	d307      	bcc.n	801bf1e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	681b      	ldr	r3, [r3, #0]
 801bf12:	681b      	ldr	r3, [r3, #0]
 801bf14:	f003 0301 	and.w	r3, r3, #1
 801bf18:	2b00      	cmp	r3, #0
 801bf1a:	d1f2      	bne.n	801bf02 <HAL_DMA_IRQHandler+0x8da>
 801bf1c:	e000      	b.n	801bf20 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801bf1e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	681b      	ldr	r3, [r3, #0]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	f003 0301 	and.w	r3, r3, #1
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d004      	beq.n	801bf38 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	2203      	movs	r2, #3
 801bf32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801bf36:	e003      	b.n	801bf40 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	2201      	movs	r2, #1
 801bf3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	2200      	movs	r2, #0
 801bf44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801bf48:	687b      	ldr	r3, [r7, #4]
 801bf4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	f000 8272 	beq.w	801c436 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bf56:	6878      	ldr	r0, [r7, #4]
 801bf58:	4798      	blx	r3
 801bf5a:	e26c      	b.n	801c436 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	681b      	ldr	r3, [r3, #0]
 801bf60:	4a43      	ldr	r2, [pc, #268]	@ (801c070 <HAL_DMA_IRQHandler+0xa48>)
 801bf62:	4293      	cmp	r3, r2
 801bf64:	d022      	beq.n	801bfac <HAL_DMA_IRQHandler+0x984>
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	4a42      	ldr	r2, [pc, #264]	@ (801c074 <HAL_DMA_IRQHandler+0xa4c>)
 801bf6c:	4293      	cmp	r3, r2
 801bf6e:	d01d      	beq.n	801bfac <HAL_DMA_IRQHandler+0x984>
 801bf70:	687b      	ldr	r3, [r7, #4]
 801bf72:	681b      	ldr	r3, [r3, #0]
 801bf74:	4a40      	ldr	r2, [pc, #256]	@ (801c078 <HAL_DMA_IRQHandler+0xa50>)
 801bf76:	4293      	cmp	r3, r2
 801bf78:	d018      	beq.n	801bfac <HAL_DMA_IRQHandler+0x984>
 801bf7a:	687b      	ldr	r3, [r7, #4]
 801bf7c:	681b      	ldr	r3, [r3, #0]
 801bf7e:	4a3f      	ldr	r2, [pc, #252]	@ (801c07c <HAL_DMA_IRQHandler+0xa54>)
 801bf80:	4293      	cmp	r3, r2
 801bf82:	d013      	beq.n	801bfac <HAL_DMA_IRQHandler+0x984>
 801bf84:	687b      	ldr	r3, [r7, #4]
 801bf86:	681b      	ldr	r3, [r3, #0]
 801bf88:	4a3d      	ldr	r2, [pc, #244]	@ (801c080 <HAL_DMA_IRQHandler+0xa58>)
 801bf8a:	4293      	cmp	r3, r2
 801bf8c:	d00e      	beq.n	801bfac <HAL_DMA_IRQHandler+0x984>
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	681b      	ldr	r3, [r3, #0]
 801bf92:	4a3c      	ldr	r2, [pc, #240]	@ (801c084 <HAL_DMA_IRQHandler+0xa5c>)
 801bf94:	4293      	cmp	r3, r2
 801bf96:	d009      	beq.n	801bfac <HAL_DMA_IRQHandler+0x984>
 801bf98:	687b      	ldr	r3, [r7, #4]
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	4a3a      	ldr	r2, [pc, #232]	@ (801c088 <HAL_DMA_IRQHandler+0xa60>)
 801bf9e:	4293      	cmp	r3, r2
 801bfa0:	d004      	beq.n	801bfac <HAL_DMA_IRQHandler+0x984>
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	4a39      	ldr	r2, [pc, #228]	@ (801c08c <HAL_DMA_IRQHandler+0xa64>)
 801bfa8:	4293      	cmp	r3, r2
 801bfaa:	d101      	bne.n	801bfb0 <HAL_DMA_IRQHandler+0x988>
 801bfac:	2301      	movs	r3, #1
 801bfae:	e000      	b.n	801bfb2 <HAL_DMA_IRQHandler+0x98a>
 801bfb0:	2300      	movs	r3, #0
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	f000 823f 	beq.w	801c436 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	681b      	ldr	r3, [r3, #0]
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bfc4:	f003 031f 	and.w	r3, r3, #31
 801bfc8:	2204      	movs	r2, #4
 801bfca:	409a      	lsls	r2, r3
 801bfcc:	697b      	ldr	r3, [r7, #20]
 801bfce:	4013      	ands	r3, r2
 801bfd0:	2b00      	cmp	r3, #0
 801bfd2:	f000 80cd 	beq.w	801c170 <HAL_DMA_IRQHandler+0xb48>
 801bfd6:	693b      	ldr	r3, [r7, #16]
 801bfd8:	f003 0304 	and.w	r3, r3, #4
 801bfdc:	2b00      	cmp	r3, #0
 801bfde:	f000 80c7 	beq.w	801c170 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bfe6:	f003 031f 	and.w	r3, r3, #31
 801bfea:	2204      	movs	r2, #4
 801bfec:	409a      	lsls	r2, r3
 801bfee:	69fb      	ldr	r3, [r7, #28]
 801bff0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bff2:	693b      	ldr	r3, [r7, #16]
 801bff4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d049      	beq.n	801c090 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801bffc:	693b      	ldr	r3, [r7, #16]
 801bffe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c002:	2b00      	cmp	r3, #0
 801c004:	d109      	bne.n	801c01a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801c006:	687b      	ldr	r3, [r7, #4]
 801c008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	f000 8210 	beq.w	801c430 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801c010:	687b      	ldr	r3, [r7, #4]
 801c012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c014:	6878      	ldr	r0, [r7, #4]
 801c016:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c018:	e20a      	b.n	801c430 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801c01a:	687b      	ldr	r3, [r7, #4]
 801c01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c01e:	2b00      	cmp	r3, #0
 801c020:	f000 8206 	beq.w	801c430 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801c024:	687b      	ldr	r3, [r7, #4]
 801c026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c028:	6878      	ldr	r0, [r7, #4]
 801c02a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c02c:	e200      	b.n	801c430 <HAL_DMA_IRQHandler+0xe08>
 801c02e:	bf00      	nop
 801c030:	40020010 	.word	0x40020010
 801c034:	40020028 	.word	0x40020028
 801c038:	40020040 	.word	0x40020040
 801c03c:	40020058 	.word	0x40020058
 801c040:	40020070 	.word	0x40020070
 801c044:	40020088 	.word	0x40020088
 801c048:	400200a0 	.word	0x400200a0
 801c04c:	400200b8 	.word	0x400200b8
 801c050:	40020410 	.word	0x40020410
 801c054:	40020428 	.word	0x40020428
 801c058:	40020440 	.word	0x40020440
 801c05c:	40020458 	.word	0x40020458
 801c060:	40020470 	.word	0x40020470
 801c064:	40020488 	.word	0x40020488
 801c068:	400204a0 	.word	0x400204a0
 801c06c:	400204b8 	.word	0x400204b8
 801c070:	58025408 	.word	0x58025408
 801c074:	5802541c 	.word	0x5802541c
 801c078:	58025430 	.word	0x58025430
 801c07c:	58025444 	.word	0x58025444
 801c080:	58025458 	.word	0x58025458
 801c084:	5802546c 	.word	0x5802546c
 801c088:	58025480 	.word	0x58025480
 801c08c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c090:	693b      	ldr	r3, [r7, #16]
 801c092:	f003 0320 	and.w	r3, r3, #32
 801c096:	2b00      	cmp	r3, #0
 801c098:	d160      	bne.n	801c15c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	681b      	ldr	r3, [r3, #0]
 801c09e:	4a7f      	ldr	r2, [pc, #508]	@ (801c29c <HAL_DMA_IRQHandler+0xc74>)
 801c0a0:	4293      	cmp	r3, r2
 801c0a2:	d04a      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	4a7d      	ldr	r2, [pc, #500]	@ (801c2a0 <HAL_DMA_IRQHandler+0xc78>)
 801c0aa:	4293      	cmp	r3, r2
 801c0ac:	d045      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0ae:	687b      	ldr	r3, [r7, #4]
 801c0b0:	681b      	ldr	r3, [r3, #0]
 801c0b2:	4a7c      	ldr	r2, [pc, #496]	@ (801c2a4 <HAL_DMA_IRQHandler+0xc7c>)
 801c0b4:	4293      	cmp	r3, r2
 801c0b6:	d040      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0b8:	687b      	ldr	r3, [r7, #4]
 801c0ba:	681b      	ldr	r3, [r3, #0]
 801c0bc:	4a7a      	ldr	r2, [pc, #488]	@ (801c2a8 <HAL_DMA_IRQHandler+0xc80>)
 801c0be:	4293      	cmp	r3, r2
 801c0c0:	d03b      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0c2:	687b      	ldr	r3, [r7, #4]
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	4a79      	ldr	r2, [pc, #484]	@ (801c2ac <HAL_DMA_IRQHandler+0xc84>)
 801c0c8:	4293      	cmp	r3, r2
 801c0ca:	d036      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0cc:	687b      	ldr	r3, [r7, #4]
 801c0ce:	681b      	ldr	r3, [r3, #0]
 801c0d0:	4a77      	ldr	r2, [pc, #476]	@ (801c2b0 <HAL_DMA_IRQHandler+0xc88>)
 801c0d2:	4293      	cmp	r3, r2
 801c0d4:	d031      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	681b      	ldr	r3, [r3, #0]
 801c0da:	4a76      	ldr	r2, [pc, #472]	@ (801c2b4 <HAL_DMA_IRQHandler+0xc8c>)
 801c0dc:	4293      	cmp	r3, r2
 801c0de:	d02c      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	4a74      	ldr	r2, [pc, #464]	@ (801c2b8 <HAL_DMA_IRQHandler+0xc90>)
 801c0e6:	4293      	cmp	r3, r2
 801c0e8:	d027      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	4a73      	ldr	r2, [pc, #460]	@ (801c2bc <HAL_DMA_IRQHandler+0xc94>)
 801c0f0:	4293      	cmp	r3, r2
 801c0f2:	d022      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	4a71      	ldr	r2, [pc, #452]	@ (801c2c0 <HAL_DMA_IRQHandler+0xc98>)
 801c0fa:	4293      	cmp	r3, r2
 801c0fc:	d01d      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c0fe:	687b      	ldr	r3, [r7, #4]
 801c100:	681b      	ldr	r3, [r3, #0]
 801c102:	4a70      	ldr	r2, [pc, #448]	@ (801c2c4 <HAL_DMA_IRQHandler+0xc9c>)
 801c104:	4293      	cmp	r3, r2
 801c106:	d018      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c108:	687b      	ldr	r3, [r7, #4]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	4a6e      	ldr	r2, [pc, #440]	@ (801c2c8 <HAL_DMA_IRQHandler+0xca0>)
 801c10e:	4293      	cmp	r3, r2
 801c110:	d013      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	4a6d      	ldr	r2, [pc, #436]	@ (801c2cc <HAL_DMA_IRQHandler+0xca4>)
 801c118:	4293      	cmp	r3, r2
 801c11a:	d00e      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	4a6b      	ldr	r2, [pc, #428]	@ (801c2d0 <HAL_DMA_IRQHandler+0xca8>)
 801c122:	4293      	cmp	r3, r2
 801c124:	d009      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	4a6a      	ldr	r2, [pc, #424]	@ (801c2d4 <HAL_DMA_IRQHandler+0xcac>)
 801c12c:	4293      	cmp	r3, r2
 801c12e:	d004      	beq.n	801c13a <HAL_DMA_IRQHandler+0xb12>
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	4a68      	ldr	r2, [pc, #416]	@ (801c2d8 <HAL_DMA_IRQHandler+0xcb0>)
 801c136:	4293      	cmp	r3, r2
 801c138:	d108      	bne.n	801c14c <HAL_DMA_IRQHandler+0xb24>
 801c13a:	687b      	ldr	r3, [r7, #4]
 801c13c:	681b      	ldr	r3, [r3, #0]
 801c13e:	681a      	ldr	r2, [r3, #0]
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	681b      	ldr	r3, [r3, #0]
 801c144:	f022 0208 	bic.w	r2, r2, #8
 801c148:	601a      	str	r2, [r3, #0]
 801c14a:	e007      	b.n	801c15c <HAL_DMA_IRQHandler+0xb34>
 801c14c:	687b      	ldr	r3, [r7, #4]
 801c14e:	681b      	ldr	r3, [r3, #0]
 801c150:	681a      	ldr	r2, [r3, #0]
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	681b      	ldr	r3, [r3, #0]
 801c156:	f022 0204 	bic.w	r2, r2, #4
 801c15a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c160:	2b00      	cmp	r3, #0
 801c162:	f000 8165 	beq.w	801c430 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c16a:	6878      	ldr	r0, [r7, #4]
 801c16c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c16e:	e15f      	b.n	801c430 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c174:	f003 031f 	and.w	r3, r3, #31
 801c178:	2202      	movs	r2, #2
 801c17a:	409a      	lsls	r2, r3
 801c17c:	697b      	ldr	r3, [r7, #20]
 801c17e:	4013      	ands	r3, r2
 801c180:	2b00      	cmp	r3, #0
 801c182:	f000 80c5 	beq.w	801c310 <HAL_DMA_IRQHandler+0xce8>
 801c186:	693b      	ldr	r3, [r7, #16]
 801c188:	f003 0302 	and.w	r3, r3, #2
 801c18c:	2b00      	cmp	r3, #0
 801c18e:	f000 80bf 	beq.w	801c310 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801c192:	687b      	ldr	r3, [r7, #4]
 801c194:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c196:	f003 031f 	and.w	r3, r3, #31
 801c19a:	2202      	movs	r2, #2
 801c19c:	409a      	lsls	r2, r3
 801c19e:	69fb      	ldr	r3, [r7, #28]
 801c1a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1a2:	693b      	ldr	r3, [r7, #16]
 801c1a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d018      	beq.n	801c1de <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801c1ac:	693b      	ldr	r3, [r7, #16]
 801c1ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d109      	bne.n	801c1ca <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c1ba:	2b00      	cmp	r3, #0
 801c1bc:	f000 813a 	beq.w	801c434 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c1c4:	6878      	ldr	r0, [r7, #4]
 801c1c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1c8:	e134      	b.n	801c434 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801c1ca:	687b      	ldr	r3, [r7, #4]
 801c1cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c1ce:	2b00      	cmp	r3, #0
 801c1d0:	f000 8130 	beq.w	801c434 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c1d8:	6878      	ldr	r0, [r7, #4]
 801c1da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c1dc:	e12a      	b.n	801c434 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801c1de:	693b      	ldr	r3, [r7, #16]
 801c1e0:	f003 0320 	and.w	r3, r3, #32
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	f040 8089 	bne.w	801c2fc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801c1ea:	687b      	ldr	r3, [r7, #4]
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	4a2b      	ldr	r2, [pc, #172]	@ (801c29c <HAL_DMA_IRQHandler+0xc74>)
 801c1f0:	4293      	cmp	r3, r2
 801c1f2:	d04a      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	4a29      	ldr	r2, [pc, #164]	@ (801c2a0 <HAL_DMA_IRQHandler+0xc78>)
 801c1fa:	4293      	cmp	r3, r2
 801c1fc:	d045      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	681b      	ldr	r3, [r3, #0]
 801c202:	4a28      	ldr	r2, [pc, #160]	@ (801c2a4 <HAL_DMA_IRQHandler+0xc7c>)
 801c204:	4293      	cmp	r3, r2
 801c206:	d040      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	4a26      	ldr	r2, [pc, #152]	@ (801c2a8 <HAL_DMA_IRQHandler+0xc80>)
 801c20e:	4293      	cmp	r3, r2
 801c210:	d03b      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	681b      	ldr	r3, [r3, #0]
 801c216:	4a25      	ldr	r2, [pc, #148]	@ (801c2ac <HAL_DMA_IRQHandler+0xc84>)
 801c218:	4293      	cmp	r3, r2
 801c21a:	d036      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	4a23      	ldr	r2, [pc, #140]	@ (801c2b0 <HAL_DMA_IRQHandler+0xc88>)
 801c222:	4293      	cmp	r3, r2
 801c224:	d031      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	4a22      	ldr	r2, [pc, #136]	@ (801c2b4 <HAL_DMA_IRQHandler+0xc8c>)
 801c22c:	4293      	cmp	r3, r2
 801c22e:	d02c      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c230:	687b      	ldr	r3, [r7, #4]
 801c232:	681b      	ldr	r3, [r3, #0]
 801c234:	4a20      	ldr	r2, [pc, #128]	@ (801c2b8 <HAL_DMA_IRQHandler+0xc90>)
 801c236:	4293      	cmp	r3, r2
 801c238:	d027      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	681b      	ldr	r3, [r3, #0]
 801c23e:	4a1f      	ldr	r2, [pc, #124]	@ (801c2bc <HAL_DMA_IRQHandler+0xc94>)
 801c240:	4293      	cmp	r3, r2
 801c242:	d022      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c244:	687b      	ldr	r3, [r7, #4]
 801c246:	681b      	ldr	r3, [r3, #0]
 801c248:	4a1d      	ldr	r2, [pc, #116]	@ (801c2c0 <HAL_DMA_IRQHandler+0xc98>)
 801c24a:	4293      	cmp	r3, r2
 801c24c:	d01d      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c24e:	687b      	ldr	r3, [r7, #4]
 801c250:	681b      	ldr	r3, [r3, #0]
 801c252:	4a1c      	ldr	r2, [pc, #112]	@ (801c2c4 <HAL_DMA_IRQHandler+0xc9c>)
 801c254:	4293      	cmp	r3, r2
 801c256:	d018      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	681b      	ldr	r3, [r3, #0]
 801c25c:	4a1a      	ldr	r2, [pc, #104]	@ (801c2c8 <HAL_DMA_IRQHandler+0xca0>)
 801c25e:	4293      	cmp	r3, r2
 801c260:	d013      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	681b      	ldr	r3, [r3, #0]
 801c266:	4a19      	ldr	r2, [pc, #100]	@ (801c2cc <HAL_DMA_IRQHandler+0xca4>)
 801c268:	4293      	cmp	r3, r2
 801c26a:	d00e      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	4a17      	ldr	r2, [pc, #92]	@ (801c2d0 <HAL_DMA_IRQHandler+0xca8>)
 801c272:	4293      	cmp	r3, r2
 801c274:	d009      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c276:	687b      	ldr	r3, [r7, #4]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	4a16      	ldr	r2, [pc, #88]	@ (801c2d4 <HAL_DMA_IRQHandler+0xcac>)
 801c27c:	4293      	cmp	r3, r2
 801c27e:	d004      	beq.n	801c28a <HAL_DMA_IRQHandler+0xc62>
 801c280:	687b      	ldr	r3, [r7, #4]
 801c282:	681b      	ldr	r3, [r3, #0]
 801c284:	4a14      	ldr	r2, [pc, #80]	@ (801c2d8 <HAL_DMA_IRQHandler+0xcb0>)
 801c286:	4293      	cmp	r3, r2
 801c288:	d128      	bne.n	801c2dc <HAL_DMA_IRQHandler+0xcb4>
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	681a      	ldr	r2, [r3, #0]
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	681b      	ldr	r3, [r3, #0]
 801c294:	f022 0214 	bic.w	r2, r2, #20
 801c298:	601a      	str	r2, [r3, #0]
 801c29a:	e027      	b.n	801c2ec <HAL_DMA_IRQHandler+0xcc4>
 801c29c:	40020010 	.word	0x40020010
 801c2a0:	40020028 	.word	0x40020028
 801c2a4:	40020040 	.word	0x40020040
 801c2a8:	40020058 	.word	0x40020058
 801c2ac:	40020070 	.word	0x40020070
 801c2b0:	40020088 	.word	0x40020088
 801c2b4:	400200a0 	.word	0x400200a0
 801c2b8:	400200b8 	.word	0x400200b8
 801c2bc:	40020410 	.word	0x40020410
 801c2c0:	40020428 	.word	0x40020428
 801c2c4:	40020440 	.word	0x40020440
 801c2c8:	40020458 	.word	0x40020458
 801c2cc:	40020470 	.word	0x40020470
 801c2d0:	40020488 	.word	0x40020488
 801c2d4:	400204a0 	.word	0x400204a0
 801c2d8:	400204b8 	.word	0x400204b8
 801c2dc:	687b      	ldr	r3, [r7, #4]
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	681a      	ldr	r2, [r3, #0]
 801c2e2:	687b      	ldr	r3, [r7, #4]
 801c2e4:	681b      	ldr	r3, [r3, #0]
 801c2e6:	f022 020a 	bic.w	r2, r2, #10
 801c2ea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	2201      	movs	r2, #1
 801c2f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	2200      	movs	r2, #0
 801c2f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c300:	2b00      	cmp	r3, #0
 801c302:	f000 8097 	beq.w	801c434 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c30a:	6878      	ldr	r0, [r7, #4]
 801c30c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c30e:	e091      	b.n	801c434 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801c310:	687b      	ldr	r3, [r7, #4]
 801c312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c314:	f003 031f 	and.w	r3, r3, #31
 801c318:	2208      	movs	r2, #8
 801c31a:	409a      	lsls	r2, r3
 801c31c:	697b      	ldr	r3, [r7, #20]
 801c31e:	4013      	ands	r3, r2
 801c320:	2b00      	cmp	r3, #0
 801c322:	f000 8088 	beq.w	801c436 <HAL_DMA_IRQHandler+0xe0e>
 801c326:	693b      	ldr	r3, [r7, #16]
 801c328:	f003 0308 	and.w	r3, r3, #8
 801c32c:	2b00      	cmp	r3, #0
 801c32e:	f000 8082 	beq.w	801c436 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801c332:	687b      	ldr	r3, [r7, #4]
 801c334:	681b      	ldr	r3, [r3, #0]
 801c336:	4a41      	ldr	r2, [pc, #260]	@ (801c43c <HAL_DMA_IRQHandler+0xe14>)
 801c338:	4293      	cmp	r3, r2
 801c33a:	d04a      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	4a3f      	ldr	r2, [pc, #252]	@ (801c440 <HAL_DMA_IRQHandler+0xe18>)
 801c342:	4293      	cmp	r3, r2
 801c344:	d045      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	4a3e      	ldr	r2, [pc, #248]	@ (801c444 <HAL_DMA_IRQHandler+0xe1c>)
 801c34c:	4293      	cmp	r3, r2
 801c34e:	d040      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c350:	687b      	ldr	r3, [r7, #4]
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	4a3c      	ldr	r2, [pc, #240]	@ (801c448 <HAL_DMA_IRQHandler+0xe20>)
 801c356:	4293      	cmp	r3, r2
 801c358:	d03b      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c35a:	687b      	ldr	r3, [r7, #4]
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	4a3b      	ldr	r2, [pc, #236]	@ (801c44c <HAL_DMA_IRQHandler+0xe24>)
 801c360:	4293      	cmp	r3, r2
 801c362:	d036      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c364:	687b      	ldr	r3, [r7, #4]
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	4a39      	ldr	r2, [pc, #228]	@ (801c450 <HAL_DMA_IRQHandler+0xe28>)
 801c36a:	4293      	cmp	r3, r2
 801c36c:	d031      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	4a38      	ldr	r2, [pc, #224]	@ (801c454 <HAL_DMA_IRQHandler+0xe2c>)
 801c374:	4293      	cmp	r3, r2
 801c376:	d02c      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	681b      	ldr	r3, [r3, #0]
 801c37c:	4a36      	ldr	r2, [pc, #216]	@ (801c458 <HAL_DMA_IRQHandler+0xe30>)
 801c37e:	4293      	cmp	r3, r2
 801c380:	d027      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	681b      	ldr	r3, [r3, #0]
 801c386:	4a35      	ldr	r2, [pc, #212]	@ (801c45c <HAL_DMA_IRQHandler+0xe34>)
 801c388:	4293      	cmp	r3, r2
 801c38a:	d022      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	681b      	ldr	r3, [r3, #0]
 801c390:	4a33      	ldr	r2, [pc, #204]	@ (801c460 <HAL_DMA_IRQHandler+0xe38>)
 801c392:	4293      	cmp	r3, r2
 801c394:	d01d      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c396:	687b      	ldr	r3, [r7, #4]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	4a32      	ldr	r2, [pc, #200]	@ (801c464 <HAL_DMA_IRQHandler+0xe3c>)
 801c39c:	4293      	cmp	r3, r2
 801c39e:	d018      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c3a0:	687b      	ldr	r3, [r7, #4]
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	4a30      	ldr	r2, [pc, #192]	@ (801c468 <HAL_DMA_IRQHandler+0xe40>)
 801c3a6:	4293      	cmp	r3, r2
 801c3a8:	d013      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	4a2f      	ldr	r2, [pc, #188]	@ (801c46c <HAL_DMA_IRQHandler+0xe44>)
 801c3b0:	4293      	cmp	r3, r2
 801c3b2:	d00e      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c3b4:	687b      	ldr	r3, [r7, #4]
 801c3b6:	681b      	ldr	r3, [r3, #0]
 801c3b8:	4a2d      	ldr	r2, [pc, #180]	@ (801c470 <HAL_DMA_IRQHandler+0xe48>)
 801c3ba:	4293      	cmp	r3, r2
 801c3bc:	d009      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	681b      	ldr	r3, [r3, #0]
 801c3c2:	4a2c      	ldr	r2, [pc, #176]	@ (801c474 <HAL_DMA_IRQHandler+0xe4c>)
 801c3c4:	4293      	cmp	r3, r2
 801c3c6:	d004      	beq.n	801c3d2 <HAL_DMA_IRQHandler+0xdaa>
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	681b      	ldr	r3, [r3, #0]
 801c3cc:	4a2a      	ldr	r2, [pc, #168]	@ (801c478 <HAL_DMA_IRQHandler+0xe50>)
 801c3ce:	4293      	cmp	r3, r2
 801c3d0:	d108      	bne.n	801c3e4 <HAL_DMA_IRQHandler+0xdbc>
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	681b      	ldr	r3, [r3, #0]
 801c3d6:	681a      	ldr	r2, [r3, #0]
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	681b      	ldr	r3, [r3, #0]
 801c3dc:	f022 021c 	bic.w	r2, r2, #28
 801c3e0:	601a      	str	r2, [r3, #0]
 801c3e2:	e007      	b.n	801c3f4 <HAL_DMA_IRQHandler+0xdcc>
 801c3e4:	687b      	ldr	r3, [r7, #4]
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	681a      	ldr	r2, [r3, #0]
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	f022 020e 	bic.w	r2, r2, #14
 801c3f2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c3f8:	f003 031f 	and.w	r3, r3, #31
 801c3fc:	2201      	movs	r2, #1
 801c3fe:	409a      	lsls	r2, r3
 801c400:	69fb      	ldr	r3, [r7, #28]
 801c402:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	2201      	movs	r2, #1
 801c408:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	2201      	movs	r2, #1
 801c40e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801c412:	687b      	ldr	r3, [r7, #4]
 801c414:	2200      	movs	r2, #0
 801c416:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c41e:	2b00      	cmp	r3, #0
 801c420:	d009      	beq.n	801c436 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801c422:	687b      	ldr	r3, [r7, #4]
 801c424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c426:	6878      	ldr	r0, [r7, #4]
 801c428:	4798      	blx	r3
 801c42a:	e004      	b.n	801c436 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801c42c:	bf00      	nop
 801c42e:	e002      	b.n	801c436 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c430:	bf00      	nop
 801c432:	e000      	b.n	801c436 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801c434:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801c436:	3728      	adds	r7, #40	@ 0x28
 801c438:	46bd      	mov	sp, r7
 801c43a:	bd80      	pop	{r7, pc}
 801c43c:	40020010 	.word	0x40020010
 801c440:	40020028 	.word	0x40020028
 801c444:	40020040 	.word	0x40020040
 801c448:	40020058 	.word	0x40020058
 801c44c:	40020070 	.word	0x40020070
 801c450:	40020088 	.word	0x40020088
 801c454:	400200a0 	.word	0x400200a0
 801c458:	400200b8 	.word	0x400200b8
 801c45c:	40020410 	.word	0x40020410
 801c460:	40020428 	.word	0x40020428
 801c464:	40020440 	.word	0x40020440
 801c468:	40020458 	.word	0x40020458
 801c46c:	40020470 	.word	0x40020470
 801c470:	40020488 	.word	0x40020488
 801c474:	400204a0 	.word	0x400204a0
 801c478:	400204b8 	.word	0x400204b8

0801c47c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801c47c:	b480      	push	{r7}
 801c47e:	b085      	sub	sp, #20
 801c480:	af00      	add	r7, sp, #0
 801c482:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	4a42      	ldr	r2, [pc, #264]	@ (801c594 <DMA_CalcBaseAndBitshift+0x118>)
 801c48a:	4293      	cmp	r3, r2
 801c48c:	d04a      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	681b      	ldr	r3, [r3, #0]
 801c492:	4a41      	ldr	r2, [pc, #260]	@ (801c598 <DMA_CalcBaseAndBitshift+0x11c>)
 801c494:	4293      	cmp	r3, r2
 801c496:	d045      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c498:	687b      	ldr	r3, [r7, #4]
 801c49a:	681b      	ldr	r3, [r3, #0]
 801c49c:	4a3f      	ldr	r2, [pc, #252]	@ (801c59c <DMA_CalcBaseAndBitshift+0x120>)
 801c49e:	4293      	cmp	r3, r2
 801c4a0:	d040      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	4a3e      	ldr	r2, [pc, #248]	@ (801c5a0 <DMA_CalcBaseAndBitshift+0x124>)
 801c4a8:	4293      	cmp	r3, r2
 801c4aa:	d03b      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4ac:	687b      	ldr	r3, [r7, #4]
 801c4ae:	681b      	ldr	r3, [r3, #0]
 801c4b0:	4a3c      	ldr	r2, [pc, #240]	@ (801c5a4 <DMA_CalcBaseAndBitshift+0x128>)
 801c4b2:	4293      	cmp	r3, r2
 801c4b4:	d036      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	4a3b      	ldr	r2, [pc, #236]	@ (801c5a8 <DMA_CalcBaseAndBitshift+0x12c>)
 801c4bc:	4293      	cmp	r3, r2
 801c4be:	d031      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4c0:	687b      	ldr	r3, [r7, #4]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	4a39      	ldr	r2, [pc, #228]	@ (801c5ac <DMA_CalcBaseAndBitshift+0x130>)
 801c4c6:	4293      	cmp	r3, r2
 801c4c8:	d02c      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4ca:	687b      	ldr	r3, [r7, #4]
 801c4cc:	681b      	ldr	r3, [r3, #0]
 801c4ce:	4a38      	ldr	r2, [pc, #224]	@ (801c5b0 <DMA_CalcBaseAndBitshift+0x134>)
 801c4d0:	4293      	cmp	r3, r2
 801c4d2:	d027      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	4a36      	ldr	r2, [pc, #216]	@ (801c5b4 <DMA_CalcBaseAndBitshift+0x138>)
 801c4da:	4293      	cmp	r3, r2
 801c4dc:	d022      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	4a35      	ldr	r2, [pc, #212]	@ (801c5b8 <DMA_CalcBaseAndBitshift+0x13c>)
 801c4e4:	4293      	cmp	r3, r2
 801c4e6:	d01d      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4e8:	687b      	ldr	r3, [r7, #4]
 801c4ea:	681b      	ldr	r3, [r3, #0]
 801c4ec:	4a33      	ldr	r2, [pc, #204]	@ (801c5bc <DMA_CalcBaseAndBitshift+0x140>)
 801c4ee:	4293      	cmp	r3, r2
 801c4f0:	d018      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	681b      	ldr	r3, [r3, #0]
 801c4f6:	4a32      	ldr	r2, [pc, #200]	@ (801c5c0 <DMA_CalcBaseAndBitshift+0x144>)
 801c4f8:	4293      	cmp	r3, r2
 801c4fa:	d013      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	681b      	ldr	r3, [r3, #0]
 801c500:	4a30      	ldr	r2, [pc, #192]	@ (801c5c4 <DMA_CalcBaseAndBitshift+0x148>)
 801c502:	4293      	cmp	r3, r2
 801c504:	d00e      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	4a2f      	ldr	r2, [pc, #188]	@ (801c5c8 <DMA_CalcBaseAndBitshift+0x14c>)
 801c50c:	4293      	cmp	r3, r2
 801c50e:	d009      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	4a2d      	ldr	r2, [pc, #180]	@ (801c5cc <DMA_CalcBaseAndBitshift+0x150>)
 801c516:	4293      	cmp	r3, r2
 801c518:	d004      	beq.n	801c524 <DMA_CalcBaseAndBitshift+0xa8>
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	681b      	ldr	r3, [r3, #0]
 801c51e:	4a2c      	ldr	r2, [pc, #176]	@ (801c5d0 <DMA_CalcBaseAndBitshift+0x154>)
 801c520:	4293      	cmp	r3, r2
 801c522:	d101      	bne.n	801c528 <DMA_CalcBaseAndBitshift+0xac>
 801c524:	2301      	movs	r3, #1
 801c526:	e000      	b.n	801c52a <DMA_CalcBaseAndBitshift+0xae>
 801c528:	2300      	movs	r3, #0
 801c52a:	2b00      	cmp	r3, #0
 801c52c:	d024      	beq.n	801c578 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	b2db      	uxtb	r3, r3
 801c534:	3b10      	subs	r3, #16
 801c536:	4a27      	ldr	r2, [pc, #156]	@ (801c5d4 <DMA_CalcBaseAndBitshift+0x158>)
 801c538:	fba2 2303 	umull	r2, r3, r2, r3
 801c53c:	091b      	lsrs	r3, r3, #4
 801c53e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801c540:	68fb      	ldr	r3, [r7, #12]
 801c542:	f003 0307 	and.w	r3, r3, #7
 801c546:	4a24      	ldr	r2, [pc, #144]	@ (801c5d8 <DMA_CalcBaseAndBitshift+0x15c>)
 801c548:	5cd3      	ldrb	r3, [r2, r3]
 801c54a:	461a      	mov	r2, r3
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801c550:	68fb      	ldr	r3, [r7, #12]
 801c552:	2b03      	cmp	r3, #3
 801c554:	d908      	bls.n	801c568 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801c556:	687b      	ldr	r3, [r7, #4]
 801c558:	681b      	ldr	r3, [r3, #0]
 801c55a:	461a      	mov	r2, r3
 801c55c:	4b1f      	ldr	r3, [pc, #124]	@ (801c5dc <DMA_CalcBaseAndBitshift+0x160>)
 801c55e:	4013      	ands	r3, r2
 801c560:	1d1a      	adds	r2, r3, #4
 801c562:	687b      	ldr	r3, [r7, #4]
 801c564:	659a      	str	r2, [r3, #88]	@ 0x58
 801c566:	e00d      	b.n	801c584 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801c568:	687b      	ldr	r3, [r7, #4]
 801c56a:	681b      	ldr	r3, [r3, #0]
 801c56c:	461a      	mov	r2, r3
 801c56e:	4b1b      	ldr	r3, [pc, #108]	@ (801c5dc <DMA_CalcBaseAndBitshift+0x160>)
 801c570:	4013      	ands	r3, r2
 801c572:	687a      	ldr	r2, [r7, #4]
 801c574:	6593      	str	r3, [r2, #88]	@ 0x58
 801c576:	e005      	b.n	801c584 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801c588:	4618      	mov	r0, r3
 801c58a:	3714      	adds	r7, #20
 801c58c:	46bd      	mov	sp, r7
 801c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c592:	4770      	bx	lr
 801c594:	40020010 	.word	0x40020010
 801c598:	40020028 	.word	0x40020028
 801c59c:	40020040 	.word	0x40020040
 801c5a0:	40020058 	.word	0x40020058
 801c5a4:	40020070 	.word	0x40020070
 801c5a8:	40020088 	.word	0x40020088
 801c5ac:	400200a0 	.word	0x400200a0
 801c5b0:	400200b8 	.word	0x400200b8
 801c5b4:	40020410 	.word	0x40020410
 801c5b8:	40020428 	.word	0x40020428
 801c5bc:	40020440 	.word	0x40020440
 801c5c0:	40020458 	.word	0x40020458
 801c5c4:	40020470 	.word	0x40020470
 801c5c8:	40020488 	.word	0x40020488
 801c5cc:	400204a0 	.word	0x400204a0
 801c5d0:	400204b8 	.word	0x400204b8
 801c5d4:	aaaaaaab 	.word	0xaaaaaaab
 801c5d8:	08027fd0 	.word	0x08027fd0
 801c5dc:	fffffc00 	.word	0xfffffc00

0801c5e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801c5e0:	b480      	push	{r7}
 801c5e2:	b085      	sub	sp, #20
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	699b      	ldr	r3, [r3, #24]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d120      	bne.n	801c636 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801c5f4:	687b      	ldr	r3, [r7, #4]
 801c5f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c5f8:	2b03      	cmp	r3, #3
 801c5fa:	d858      	bhi.n	801c6ae <DMA_CheckFifoParam+0xce>
 801c5fc:	a201      	add	r2, pc, #4	@ (adr r2, 801c604 <DMA_CheckFifoParam+0x24>)
 801c5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c602:	bf00      	nop
 801c604:	0801c615 	.word	0x0801c615
 801c608:	0801c627 	.word	0x0801c627
 801c60c:	0801c615 	.word	0x0801c615
 801c610:	0801c6af 	.word	0x0801c6af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c614:	687b      	ldr	r3, [r7, #4]
 801c616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c618:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c61c:	2b00      	cmp	r3, #0
 801c61e:	d048      	beq.n	801c6b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801c620:	2301      	movs	r3, #1
 801c622:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c624:	e045      	b.n	801c6b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c62a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c62e:	d142      	bne.n	801c6b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801c630:	2301      	movs	r3, #1
 801c632:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c634:	e03f      	b.n	801c6b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	699b      	ldr	r3, [r3, #24]
 801c63a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c63e:	d123      	bne.n	801c688 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801c640:	687b      	ldr	r3, [r7, #4]
 801c642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c644:	2b03      	cmp	r3, #3
 801c646:	d838      	bhi.n	801c6ba <DMA_CheckFifoParam+0xda>
 801c648:	a201      	add	r2, pc, #4	@ (adr r2, 801c650 <DMA_CheckFifoParam+0x70>)
 801c64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c64e:	bf00      	nop
 801c650:	0801c661 	.word	0x0801c661
 801c654:	0801c667 	.word	0x0801c667
 801c658:	0801c661 	.word	0x0801c661
 801c65c:	0801c679 	.word	0x0801c679
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801c660:	2301      	movs	r3, #1
 801c662:	73fb      	strb	r3, [r7, #15]
        break;
 801c664:	e030      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c66a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c66e:	2b00      	cmp	r3, #0
 801c670:	d025      	beq.n	801c6be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801c672:	2301      	movs	r3, #1
 801c674:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c676:	e022      	b.n	801c6be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c67c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801c680:	d11f      	bne.n	801c6c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801c682:	2301      	movs	r3, #1
 801c684:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801c686:	e01c      	b.n	801c6c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c68c:	2b02      	cmp	r3, #2
 801c68e:	d902      	bls.n	801c696 <DMA_CheckFifoParam+0xb6>
 801c690:	2b03      	cmp	r3, #3
 801c692:	d003      	beq.n	801c69c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801c694:	e018      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801c696:	2301      	movs	r3, #1
 801c698:	73fb      	strb	r3, [r7, #15]
        break;
 801c69a:	e015      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d00e      	beq.n	801c6c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801c6a8:	2301      	movs	r3, #1
 801c6aa:	73fb      	strb	r3, [r7, #15]
    break;
 801c6ac:	e00b      	b.n	801c6c6 <DMA_CheckFifoParam+0xe6>
        break;
 801c6ae:	bf00      	nop
 801c6b0:	e00a      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c6b2:	bf00      	nop
 801c6b4:	e008      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c6b6:	bf00      	nop
 801c6b8:	e006      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c6ba:	bf00      	nop
 801c6bc:	e004      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c6be:	bf00      	nop
 801c6c0:	e002      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
        break;
 801c6c2:	bf00      	nop
 801c6c4:	e000      	b.n	801c6c8 <DMA_CheckFifoParam+0xe8>
    break;
 801c6c6:	bf00      	nop
    }
  }

  return status;
 801c6c8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6ca:	4618      	mov	r0, r3
 801c6cc:	3714      	adds	r7, #20
 801c6ce:	46bd      	mov	sp, r7
 801c6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6d4:	4770      	bx	lr
 801c6d6:	bf00      	nop

0801c6d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c6d8:	b480      	push	{r7}
 801c6da:	b085      	sub	sp, #20
 801c6dc:	af00      	add	r7, sp, #0
 801c6de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	681b      	ldr	r3, [r3, #0]
 801c6e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c6e6:	687b      	ldr	r3, [r7, #4]
 801c6e8:	681b      	ldr	r3, [r3, #0]
 801c6ea:	4a38      	ldr	r2, [pc, #224]	@ (801c7cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801c6ec:	4293      	cmp	r3, r2
 801c6ee:	d022      	beq.n	801c736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	681b      	ldr	r3, [r3, #0]
 801c6f4:	4a36      	ldr	r2, [pc, #216]	@ (801c7d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801c6f6:	4293      	cmp	r3, r2
 801c6f8:	d01d      	beq.n	801c736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	681b      	ldr	r3, [r3, #0]
 801c6fe:	4a35      	ldr	r2, [pc, #212]	@ (801c7d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801c700:	4293      	cmp	r3, r2
 801c702:	d018      	beq.n	801c736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	4a33      	ldr	r2, [pc, #204]	@ (801c7d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801c70a:	4293      	cmp	r3, r2
 801c70c:	d013      	beq.n	801c736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	681b      	ldr	r3, [r3, #0]
 801c712:	4a32      	ldr	r2, [pc, #200]	@ (801c7dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801c714:	4293      	cmp	r3, r2
 801c716:	d00e      	beq.n	801c736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	681b      	ldr	r3, [r3, #0]
 801c71c:	4a30      	ldr	r2, [pc, #192]	@ (801c7e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801c71e:	4293      	cmp	r3, r2
 801c720:	d009      	beq.n	801c736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	681b      	ldr	r3, [r3, #0]
 801c726:	4a2f      	ldr	r2, [pc, #188]	@ (801c7e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801c728:	4293      	cmp	r3, r2
 801c72a:	d004      	beq.n	801c736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	4a2d      	ldr	r2, [pc, #180]	@ (801c7e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801c732:	4293      	cmp	r3, r2
 801c734:	d101      	bne.n	801c73a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801c736:	2301      	movs	r3, #1
 801c738:	e000      	b.n	801c73c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801c73a:	2300      	movs	r3, #0
 801c73c:	2b00      	cmp	r3, #0
 801c73e:	d01a      	beq.n	801c776 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801c740:	687b      	ldr	r3, [r7, #4]
 801c742:	681b      	ldr	r3, [r3, #0]
 801c744:	b2db      	uxtb	r3, r3
 801c746:	3b08      	subs	r3, #8
 801c748:	4a28      	ldr	r2, [pc, #160]	@ (801c7ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801c74a:	fba2 2303 	umull	r2, r3, r2, r3
 801c74e:	091b      	lsrs	r3, r3, #4
 801c750:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801c752:	68fa      	ldr	r2, [r7, #12]
 801c754:	4b26      	ldr	r3, [pc, #152]	@ (801c7f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801c756:	4413      	add	r3, r2
 801c758:	009b      	lsls	r3, r3, #2
 801c75a:	461a      	mov	r2, r3
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	4a24      	ldr	r2, [pc, #144]	@ (801c7f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801c764:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c766:	68fb      	ldr	r3, [r7, #12]
 801c768:	f003 031f 	and.w	r3, r3, #31
 801c76c:	2201      	movs	r2, #1
 801c76e:	409a      	lsls	r2, r3
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801c774:	e024      	b.n	801c7c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801c776:	687b      	ldr	r3, [r7, #4]
 801c778:	681b      	ldr	r3, [r3, #0]
 801c77a:	b2db      	uxtb	r3, r3
 801c77c:	3b10      	subs	r3, #16
 801c77e:	4a1e      	ldr	r2, [pc, #120]	@ (801c7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801c780:	fba2 2303 	umull	r2, r3, r2, r3
 801c784:	091b      	lsrs	r3, r3, #4
 801c786:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801c788:	68bb      	ldr	r3, [r7, #8]
 801c78a:	4a1c      	ldr	r2, [pc, #112]	@ (801c7fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801c78c:	4293      	cmp	r3, r2
 801c78e:	d806      	bhi.n	801c79e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801c790:	68bb      	ldr	r3, [r7, #8]
 801c792:	4a1b      	ldr	r2, [pc, #108]	@ (801c800 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801c794:	4293      	cmp	r3, r2
 801c796:	d902      	bls.n	801c79e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801c798:	68fb      	ldr	r3, [r7, #12]
 801c79a:	3308      	adds	r3, #8
 801c79c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801c79e:	68fa      	ldr	r2, [r7, #12]
 801c7a0:	4b18      	ldr	r3, [pc, #96]	@ (801c804 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801c7a2:	4413      	add	r3, r2
 801c7a4:	009b      	lsls	r3, r3, #2
 801c7a6:	461a      	mov	r2, r3
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801c7ac:	687b      	ldr	r3, [r7, #4]
 801c7ae:	4a16      	ldr	r2, [pc, #88]	@ (801c808 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801c7b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801c7b2:	68fb      	ldr	r3, [r7, #12]
 801c7b4:	f003 031f 	and.w	r3, r3, #31
 801c7b8:	2201      	movs	r2, #1
 801c7ba:	409a      	lsls	r2, r3
 801c7bc:	687b      	ldr	r3, [r7, #4]
 801c7be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801c7c0:	bf00      	nop
 801c7c2:	3714      	adds	r7, #20
 801c7c4:	46bd      	mov	sp, r7
 801c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7ca:	4770      	bx	lr
 801c7cc:	58025408 	.word	0x58025408
 801c7d0:	5802541c 	.word	0x5802541c
 801c7d4:	58025430 	.word	0x58025430
 801c7d8:	58025444 	.word	0x58025444
 801c7dc:	58025458 	.word	0x58025458
 801c7e0:	5802546c 	.word	0x5802546c
 801c7e4:	58025480 	.word	0x58025480
 801c7e8:	58025494 	.word	0x58025494
 801c7ec:	cccccccd 	.word	0xcccccccd
 801c7f0:	16009600 	.word	0x16009600
 801c7f4:	58025880 	.word	0x58025880
 801c7f8:	aaaaaaab 	.word	0xaaaaaaab
 801c7fc:	400204b8 	.word	0x400204b8
 801c800:	4002040f 	.word	0x4002040f
 801c804:	10008200 	.word	0x10008200
 801c808:	40020880 	.word	0x40020880

0801c80c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801c80c:	b480      	push	{r7}
 801c80e:	b085      	sub	sp, #20
 801c810:	af00      	add	r7, sp, #0
 801c812:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	685b      	ldr	r3, [r3, #4]
 801c818:	b2db      	uxtb	r3, r3
 801c81a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801c81c:	68fb      	ldr	r3, [r7, #12]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	d04a      	beq.n	801c8b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801c822:	68fb      	ldr	r3, [r7, #12]
 801c824:	2b08      	cmp	r3, #8
 801c826:	d847      	bhi.n	801c8b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	681b      	ldr	r3, [r3, #0]
 801c82c:	4a25      	ldr	r2, [pc, #148]	@ (801c8c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801c82e:	4293      	cmp	r3, r2
 801c830:	d022      	beq.n	801c878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c832:	687b      	ldr	r3, [r7, #4]
 801c834:	681b      	ldr	r3, [r3, #0]
 801c836:	4a24      	ldr	r2, [pc, #144]	@ (801c8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801c838:	4293      	cmp	r3, r2
 801c83a:	d01d      	beq.n	801c878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	681b      	ldr	r3, [r3, #0]
 801c840:	4a22      	ldr	r2, [pc, #136]	@ (801c8cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801c842:	4293      	cmp	r3, r2
 801c844:	d018      	beq.n	801c878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	681b      	ldr	r3, [r3, #0]
 801c84a:	4a21      	ldr	r2, [pc, #132]	@ (801c8d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801c84c:	4293      	cmp	r3, r2
 801c84e:	d013      	beq.n	801c878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	4a1f      	ldr	r2, [pc, #124]	@ (801c8d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801c856:	4293      	cmp	r3, r2
 801c858:	d00e      	beq.n	801c878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	4a1e      	ldr	r2, [pc, #120]	@ (801c8d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801c860:	4293      	cmp	r3, r2
 801c862:	d009      	beq.n	801c878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	681b      	ldr	r3, [r3, #0]
 801c868:	4a1c      	ldr	r2, [pc, #112]	@ (801c8dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801c86a:	4293      	cmp	r3, r2
 801c86c:	d004      	beq.n	801c878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	4a1b      	ldr	r2, [pc, #108]	@ (801c8e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801c874:	4293      	cmp	r3, r2
 801c876:	d101      	bne.n	801c87c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801c878:	2301      	movs	r3, #1
 801c87a:	e000      	b.n	801c87e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801c87c:	2300      	movs	r3, #0
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d00a      	beq.n	801c898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801c882:	68fa      	ldr	r2, [r7, #12]
 801c884:	4b17      	ldr	r3, [pc, #92]	@ (801c8e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801c886:	4413      	add	r3, r2
 801c888:	009b      	lsls	r3, r3, #2
 801c88a:	461a      	mov	r2, r3
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801c890:	687b      	ldr	r3, [r7, #4]
 801c892:	4a15      	ldr	r2, [pc, #84]	@ (801c8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801c894:	671a      	str	r2, [r3, #112]	@ 0x70
 801c896:	e009      	b.n	801c8ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c898:	68fa      	ldr	r2, [r7, #12]
 801c89a:	4b14      	ldr	r3, [pc, #80]	@ (801c8ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801c89c:	4413      	add	r3, r2
 801c89e:	009b      	lsls	r3, r3, #2
 801c8a0:	461a      	mov	r2, r3
 801c8a2:	687b      	ldr	r3, [r7, #4]
 801c8a4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	4a11      	ldr	r2, [pc, #68]	@ (801c8f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801c8aa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801c8ac:	68fb      	ldr	r3, [r7, #12]
 801c8ae:	3b01      	subs	r3, #1
 801c8b0:	2201      	movs	r2, #1
 801c8b2:	409a      	lsls	r2, r3
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801c8b8:	bf00      	nop
 801c8ba:	3714      	adds	r7, #20
 801c8bc:	46bd      	mov	sp, r7
 801c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8c2:	4770      	bx	lr
 801c8c4:	58025408 	.word	0x58025408
 801c8c8:	5802541c 	.word	0x5802541c
 801c8cc:	58025430 	.word	0x58025430
 801c8d0:	58025444 	.word	0x58025444
 801c8d4:	58025458 	.word	0x58025458
 801c8d8:	5802546c 	.word	0x5802546c
 801c8dc:	58025480 	.word	0x58025480
 801c8e0:	58025494 	.word	0x58025494
 801c8e4:	1600963f 	.word	0x1600963f
 801c8e8:	58025940 	.word	0x58025940
 801c8ec:	1000823f 	.word	0x1000823f
 801c8f0:	40020940 	.word	0x40020940

0801c8f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c8f4:	b480      	push	{r7}
 801c8f6:	b089      	sub	sp, #36	@ 0x24
 801c8f8:	af00      	add	r7, sp, #0
 801c8fa:	6078      	str	r0, [r7, #4]
 801c8fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c8fe:	2300      	movs	r3, #0
 801c900:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c902:	4b89      	ldr	r3, [pc, #548]	@ (801cb28 <HAL_GPIO_Init+0x234>)
 801c904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c906:	e194      	b.n	801cc32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c908:	683b      	ldr	r3, [r7, #0]
 801c90a:	681a      	ldr	r2, [r3, #0]
 801c90c:	2101      	movs	r1, #1
 801c90e:	69fb      	ldr	r3, [r7, #28]
 801c910:	fa01 f303 	lsl.w	r3, r1, r3
 801c914:	4013      	ands	r3, r2
 801c916:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c918:	693b      	ldr	r3, [r7, #16]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	f000 8186 	beq.w	801cc2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c920:	683b      	ldr	r3, [r7, #0]
 801c922:	685b      	ldr	r3, [r3, #4]
 801c924:	f003 0303 	and.w	r3, r3, #3
 801c928:	2b01      	cmp	r3, #1
 801c92a:	d005      	beq.n	801c938 <HAL_GPIO_Init+0x44>
 801c92c:	683b      	ldr	r3, [r7, #0]
 801c92e:	685b      	ldr	r3, [r3, #4]
 801c930:	f003 0303 	and.w	r3, r3, #3
 801c934:	2b02      	cmp	r3, #2
 801c936:	d130      	bne.n	801c99a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c938:	687b      	ldr	r3, [r7, #4]
 801c93a:	689b      	ldr	r3, [r3, #8]
 801c93c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c93e:	69fb      	ldr	r3, [r7, #28]
 801c940:	005b      	lsls	r3, r3, #1
 801c942:	2203      	movs	r2, #3
 801c944:	fa02 f303 	lsl.w	r3, r2, r3
 801c948:	43db      	mvns	r3, r3
 801c94a:	69ba      	ldr	r2, [r7, #24]
 801c94c:	4013      	ands	r3, r2
 801c94e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c950:	683b      	ldr	r3, [r7, #0]
 801c952:	68da      	ldr	r2, [r3, #12]
 801c954:	69fb      	ldr	r3, [r7, #28]
 801c956:	005b      	lsls	r3, r3, #1
 801c958:	fa02 f303 	lsl.w	r3, r2, r3
 801c95c:	69ba      	ldr	r2, [r7, #24]
 801c95e:	4313      	orrs	r3, r2
 801c960:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c962:	687b      	ldr	r3, [r7, #4]
 801c964:	69ba      	ldr	r2, [r7, #24]
 801c966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c968:	687b      	ldr	r3, [r7, #4]
 801c96a:	685b      	ldr	r3, [r3, #4]
 801c96c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c96e:	2201      	movs	r2, #1
 801c970:	69fb      	ldr	r3, [r7, #28]
 801c972:	fa02 f303 	lsl.w	r3, r2, r3
 801c976:	43db      	mvns	r3, r3
 801c978:	69ba      	ldr	r2, [r7, #24]
 801c97a:	4013      	ands	r3, r2
 801c97c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c97e:	683b      	ldr	r3, [r7, #0]
 801c980:	685b      	ldr	r3, [r3, #4]
 801c982:	091b      	lsrs	r3, r3, #4
 801c984:	f003 0201 	and.w	r2, r3, #1
 801c988:	69fb      	ldr	r3, [r7, #28]
 801c98a:	fa02 f303 	lsl.w	r3, r2, r3
 801c98e:	69ba      	ldr	r2, [r7, #24]
 801c990:	4313      	orrs	r3, r2
 801c992:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	69ba      	ldr	r2, [r7, #24]
 801c998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c99a:	683b      	ldr	r3, [r7, #0]
 801c99c:	685b      	ldr	r3, [r3, #4]
 801c99e:	f003 0303 	and.w	r3, r3, #3
 801c9a2:	2b03      	cmp	r3, #3
 801c9a4:	d017      	beq.n	801c9d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	68db      	ldr	r3, [r3, #12]
 801c9aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c9ac:	69fb      	ldr	r3, [r7, #28]
 801c9ae:	005b      	lsls	r3, r3, #1
 801c9b0:	2203      	movs	r2, #3
 801c9b2:	fa02 f303 	lsl.w	r3, r2, r3
 801c9b6:	43db      	mvns	r3, r3
 801c9b8:	69ba      	ldr	r2, [r7, #24]
 801c9ba:	4013      	ands	r3, r2
 801c9bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c9be:	683b      	ldr	r3, [r7, #0]
 801c9c0:	689a      	ldr	r2, [r3, #8]
 801c9c2:	69fb      	ldr	r3, [r7, #28]
 801c9c4:	005b      	lsls	r3, r3, #1
 801c9c6:	fa02 f303 	lsl.w	r3, r2, r3
 801c9ca:	69ba      	ldr	r2, [r7, #24]
 801c9cc:	4313      	orrs	r3, r2
 801c9ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	69ba      	ldr	r2, [r7, #24]
 801c9d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c9d6:	683b      	ldr	r3, [r7, #0]
 801c9d8:	685b      	ldr	r3, [r3, #4]
 801c9da:	f003 0303 	and.w	r3, r3, #3
 801c9de:	2b02      	cmp	r3, #2
 801c9e0:	d123      	bne.n	801ca2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c9e2:	69fb      	ldr	r3, [r7, #28]
 801c9e4:	08da      	lsrs	r2, r3, #3
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	3208      	adds	r2, #8
 801c9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c9ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c9f0:	69fb      	ldr	r3, [r7, #28]
 801c9f2:	f003 0307 	and.w	r3, r3, #7
 801c9f6:	009b      	lsls	r3, r3, #2
 801c9f8:	220f      	movs	r2, #15
 801c9fa:	fa02 f303 	lsl.w	r3, r2, r3
 801c9fe:	43db      	mvns	r3, r3
 801ca00:	69ba      	ldr	r2, [r7, #24]
 801ca02:	4013      	ands	r3, r2
 801ca04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ca06:	683b      	ldr	r3, [r7, #0]
 801ca08:	691a      	ldr	r2, [r3, #16]
 801ca0a:	69fb      	ldr	r3, [r7, #28]
 801ca0c:	f003 0307 	and.w	r3, r3, #7
 801ca10:	009b      	lsls	r3, r3, #2
 801ca12:	fa02 f303 	lsl.w	r3, r2, r3
 801ca16:	69ba      	ldr	r2, [r7, #24]
 801ca18:	4313      	orrs	r3, r2
 801ca1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ca1c:	69fb      	ldr	r3, [r7, #28]
 801ca1e:	08da      	lsrs	r2, r3, #3
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	3208      	adds	r2, #8
 801ca24:	69b9      	ldr	r1, [r7, #24]
 801ca26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ca2a:	687b      	ldr	r3, [r7, #4]
 801ca2c:	681b      	ldr	r3, [r3, #0]
 801ca2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801ca30:	69fb      	ldr	r3, [r7, #28]
 801ca32:	005b      	lsls	r3, r3, #1
 801ca34:	2203      	movs	r2, #3
 801ca36:	fa02 f303 	lsl.w	r3, r2, r3
 801ca3a:	43db      	mvns	r3, r3
 801ca3c:	69ba      	ldr	r2, [r7, #24]
 801ca3e:	4013      	ands	r3, r2
 801ca40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	685b      	ldr	r3, [r3, #4]
 801ca46:	f003 0203 	and.w	r2, r3, #3
 801ca4a:	69fb      	ldr	r3, [r7, #28]
 801ca4c:	005b      	lsls	r3, r3, #1
 801ca4e:	fa02 f303 	lsl.w	r3, r2, r3
 801ca52:	69ba      	ldr	r2, [r7, #24]
 801ca54:	4313      	orrs	r3, r2
 801ca56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	69ba      	ldr	r2, [r7, #24]
 801ca5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801ca5e:	683b      	ldr	r3, [r7, #0]
 801ca60:	685b      	ldr	r3, [r3, #4]
 801ca62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801ca66:	2b00      	cmp	r3, #0
 801ca68:	f000 80e0 	beq.w	801cc2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ca6c:	4b2f      	ldr	r3, [pc, #188]	@ (801cb2c <HAL_GPIO_Init+0x238>)
 801ca6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801ca72:	4a2e      	ldr	r2, [pc, #184]	@ (801cb2c <HAL_GPIO_Init+0x238>)
 801ca74:	f043 0302 	orr.w	r3, r3, #2
 801ca78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801ca7c:	4b2b      	ldr	r3, [pc, #172]	@ (801cb2c <HAL_GPIO_Init+0x238>)
 801ca7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801ca82:	f003 0302 	and.w	r3, r3, #2
 801ca86:	60fb      	str	r3, [r7, #12]
 801ca88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ca8a:	4a29      	ldr	r2, [pc, #164]	@ (801cb30 <HAL_GPIO_Init+0x23c>)
 801ca8c:	69fb      	ldr	r3, [r7, #28]
 801ca8e:	089b      	lsrs	r3, r3, #2
 801ca90:	3302      	adds	r3, #2
 801ca92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ca96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ca98:	69fb      	ldr	r3, [r7, #28]
 801ca9a:	f003 0303 	and.w	r3, r3, #3
 801ca9e:	009b      	lsls	r3, r3, #2
 801caa0:	220f      	movs	r2, #15
 801caa2:	fa02 f303 	lsl.w	r3, r2, r3
 801caa6:	43db      	mvns	r3, r3
 801caa8:	69ba      	ldr	r2, [r7, #24]
 801caaa:	4013      	ands	r3, r2
 801caac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	4a20      	ldr	r2, [pc, #128]	@ (801cb34 <HAL_GPIO_Init+0x240>)
 801cab2:	4293      	cmp	r3, r2
 801cab4:	d052      	beq.n	801cb5c <HAL_GPIO_Init+0x268>
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	4a1f      	ldr	r2, [pc, #124]	@ (801cb38 <HAL_GPIO_Init+0x244>)
 801caba:	4293      	cmp	r3, r2
 801cabc:	d031      	beq.n	801cb22 <HAL_GPIO_Init+0x22e>
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	4a1e      	ldr	r2, [pc, #120]	@ (801cb3c <HAL_GPIO_Init+0x248>)
 801cac2:	4293      	cmp	r3, r2
 801cac4:	d02b      	beq.n	801cb1e <HAL_GPIO_Init+0x22a>
 801cac6:	687b      	ldr	r3, [r7, #4]
 801cac8:	4a1d      	ldr	r2, [pc, #116]	@ (801cb40 <HAL_GPIO_Init+0x24c>)
 801caca:	4293      	cmp	r3, r2
 801cacc:	d025      	beq.n	801cb1a <HAL_GPIO_Init+0x226>
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	4a1c      	ldr	r2, [pc, #112]	@ (801cb44 <HAL_GPIO_Init+0x250>)
 801cad2:	4293      	cmp	r3, r2
 801cad4:	d01f      	beq.n	801cb16 <HAL_GPIO_Init+0x222>
 801cad6:	687b      	ldr	r3, [r7, #4]
 801cad8:	4a1b      	ldr	r2, [pc, #108]	@ (801cb48 <HAL_GPIO_Init+0x254>)
 801cada:	4293      	cmp	r3, r2
 801cadc:	d019      	beq.n	801cb12 <HAL_GPIO_Init+0x21e>
 801cade:	687b      	ldr	r3, [r7, #4]
 801cae0:	4a1a      	ldr	r2, [pc, #104]	@ (801cb4c <HAL_GPIO_Init+0x258>)
 801cae2:	4293      	cmp	r3, r2
 801cae4:	d013      	beq.n	801cb0e <HAL_GPIO_Init+0x21a>
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	4a19      	ldr	r2, [pc, #100]	@ (801cb50 <HAL_GPIO_Init+0x25c>)
 801caea:	4293      	cmp	r3, r2
 801caec:	d00d      	beq.n	801cb0a <HAL_GPIO_Init+0x216>
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	4a18      	ldr	r2, [pc, #96]	@ (801cb54 <HAL_GPIO_Init+0x260>)
 801caf2:	4293      	cmp	r3, r2
 801caf4:	d007      	beq.n	801cb06 <HAL_GPIO_Init+0x212>
 801caf6:	687b      	ldr	r3, [r7, #4]
 801caf8:	4a17      	ldr	r2, [pc, #92]	@ (801cb58 <HAL_GPIO_Init+0x264>)
 801cafa:	4293      	cmp	r3, r2
 801cafc:	d101      	bne.n	801cb02 <HAL_GPIO_Init+0x20e>
 801cafe:	2309      	movs	r3, #9
 801cb00:	e02d      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb02:	230a      	movs	r3, #10
 801cb04:	e02b      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb06:	2308      	movs	r3, #8
 801cb08:	e029      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb0a:	2307      	movs	r3, #7
 801cb0c:	e027      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb0e:	2306      	movs	r3, #6
 801cb10:	e025      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb12:	2305      	movs	r3, #5
 801cb14:	e023      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb16:	2304      	movs	r3, #4
 801cb18:	e021      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb1a:	2303      	movs	r3, #3
 801cb1c:	e01f      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb1e:	2302      	movs	r3, #2
 801cb20:	e01d      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb22:	2301      	movs	r3, #1
 801cb24:	e01b      	b.n	801cb5e <HAL_GPIO_Init+0x26a>
 801cb26:	bf00      	nop
 801cb28:	58000080 	.word	0x58000080
 801cb2c:	58024400 	.word	0x58024400
 801cb30:	58000400 	.word	0x58000400
 801cb34:	58020000 	.word	0x58020000
 801cb38:	58020400 	.word	0x58020400
 801cb3c:	58020800 	.word	0x58020800
 801cb40:	58020c00 	.word	0x58020c00
 801cb44:	58021000 	.word	0x58021000
 801cb48:	58021400 	.word	0x58021400
 801cb4c:	58021800 	.word	0x58021800
 801cb50:	58021c00 	.word	0x58021c00
 801cb54:	58022000 	.word	0x58022000
 801cb58:	58022400 	.word	0x58022400
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	69fa      	ldr	r2, [r7, #28]
 801cb60:	f002 0203 	and.w	r2, r2, #3
 801cb64:	0092      	lsls	r2, r2, #2
 801cb66:	4093      	lsls	r3, r2
 801cb68:	69ba      	ldr	r2, [r7, #24]
 801cb6a:	4313      	orrs	r3, r2
 801cb6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801cb6e:	4938      	ldr	r1, [pc, #224]	@ (801cc50 <HAL_GPIO_Init+0x35c>)
 801cb70:	69fb      	ldr	r3, [r7, #28]
 801cb72:	089b      	lsrs	r3, r3, #2
 801cb74:	3302      	adds	r3, #2
 801cb76:	69ba      	ldr	r2, [r7, #24]
 801cb78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801cb7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cb84:	693b      	ldr	r3, [r7, #16]
 801cb86:	43db      	mvns	r3, r3
 801cb88:	69ba      	ldr	r2, [r7, #24]
 801cb8a:	4013      	ands	r3, r2
 801cb8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801cb8e:	683b      	ldr	r3, [r7, #0]
 801cb90:	685b      	ldr	r3, [r3, #4]
 801cb92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d003      	beq.n	801cba2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801cb9a:	69ba      	ldr	r2, [r7, #24]
 801cb9c:	693b      	ldr	r3, [r7, #16]
 801cb9e:	4313      	orrs	r3, r2
 801cba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801cba2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cba6:	69bb      	ldr	r3, [r7, #24]
 801cba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801cbaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801cbae:	685b      	ldr	r3, [r3, #4]
 801cbb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cbb2:	693b      	ldr	r3, [r7, #16]
 801cbb4:	43db      	mvns	r3, r3
 801cbb6:	69ba      	ldr	r2, [r7, #24]
 801cbb8:	4013      	ands	r3, r2
 801cbba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801cbbc:	683b      	ldr	r3, [r7, #0]
 801cbbe:	685b      	ldr	r3, [r3, #4]
 801cbc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801cbc4:	2b00      	cmp	r3, #0
 801cbc6:	d003      	beq.n	801cbd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801cbc8:	69ba      	ldr	r2, [r7, #24]
 801cbca:	693b      	ldr	r3, [r7, #16]
 801cbcc:	4313      	orrs	r3, r2
 801cbce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801cbd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801cbd4:	69bb      	ldr	r3, [r7, #24]
 801cbd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801cbd8:	697b      	ldr	r3, [r7, #20]
 801cbda:	685b      	ldr	r3, [r3, #4]
 801cbdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cbde:	693b      	ldr	r3, [r7, #16]
 801cbe0:	43db      	mvns	r3, r3
 801cbe2:	69ba      	ldr	r2, [r7, #24]
 801cbe4:	4013      	ands	r3, r2
 801cbe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801cbe8:	683b      	ldr	r3, [r7, #0]
 801cbea:	685b      	ldr	r3, [r3, #4]
 801cbec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	d003      	beq.n	801cbfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801cbf4:	69ba      	ldr	r2, [r7, #24]
 801cbf6:	693b      	ldr	r3, [r7, #16]
 801cbf8:	4313      	orrs	r3, r2
 801cbfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801cbfc:	697b      	ldr	r3, [r7, #20]
 801cbfe:	69ba      	ldr	r2, [r7, #24]
 801cc00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801cc02:	697b      	ldr	r3, [r7, #20]
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801cc08:	693b      	ldr	r3, [r7, #16]
 801cc0a:	43db      	mvns	r3, r3
 801cc0c:	69ba      	ldr	r2, [r7, #24]
 801cc0e:	4013      	ands	r3, r2
 801cc10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801cc12:	683b      	ldr	r3, [r7, #0]
 801cc14:	685b      	ldr	r3, [r3, #4]
 801cc16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	d003      	beq.n	801cc26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801cc1e:	69ba      	ldr	r2, [r7, #24]
 801cc20:	693b      	ldr	r3, [r7, #16]
 801cc22:	4313      	orrs	r3, r2
 801cc24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801cc26:	697b      	ldr	r3, [r7, #20]
 801cc28:	69ba      	ldr	r2, [r7, #24]
 801cc2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801cc2c:	69fb      	ldr	r3, [r7, #28]
 801cc2e:	3301      	adds	r3, #1
 801cc30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801cc32:	683b      	ldr	r3, [r7, #0]
 801cc34:	681a      	ldr	r2, [r3, #0]
 801cc36:	69fb      	ldr	r3, [r7, #28]
 801cc38:	fa22 f303 	lsr.w	r3, r2, r3
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	f47f ae63 	bne.w	801c908 <HAL_GPIO_Init+0x14>
  }
}
 801cc42:	bf00      	nop
 801cc44:	bf00      	nop
 801cc46:	3724      	adds	r7, #36	@ 0x24
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc4e:	4770      	bx	lr
 801cc50:	58000400 	.word	0x58000400

0801cc54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801cc54:	b480      	push	{r7}
 801cc56:	b083      	sub	sp, #12
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
 801cc5c:	460b      	mov	r3, r1
 801cc5e:	807b      	strh	r3, [r7, #2]
 801cc60:	4613      	mov	r3, r2
 801cc62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801cc64:	787b      	ldrb	r3, [r7, #1]
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d003      	beq.n	801cc72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801cc6a:	887a      	ldrh	r2, [r7, #2]
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801cc70:	e003      	b.n	801cc7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801cc72:	887b      	ldrh	r3, [r7, #2]
 801cc74:	041a      	lsls	r2, r3, #16
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	619a      	str	r2, [r3, #24]
}
 801cc7a:	bf00      	nop
 801cc7c:	370c      	adds	r7, #12
 801cc7e:	46bd      	mov	sp, r7
 801cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc84:	4770      	bx	lr
	...

0801cc88 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801cc88:	b580      	push	{r7, lr}
 801cc8a:	b082      	sub	sp, #8
 801cc8c:	af00      	add	r7, sp, #0
 801cc8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d101      	bne.n	801cc9a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801cc96:	2301      	movs	r3, #1
 801cc98:	e08b      	b.n	801cdb2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801cca0:	b2db      	uxtb	r3, r3
 801cca2:	2b00      	cmp	r3, #0
 801cca4:	d106      	bne.n	801ccb4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	2200      	movs	r2, #0
 801ccaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801ccae:	6878      	ldr	r0, [r7, #4]
 801ccb0:	f7e5 fc6e 	bl	8002590 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ccb4:	687b      	ldr	r3, [r7, #4]
 801ccb6:	2224      	movs	r2, #36	@ 0x24
 801ccb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	681b      	ldr	r3, [r3, #0]
 801ccc0:	681a      	ldr	r2, [r3, #0]
 801ccc2:	687b      	ldr	r3, [r7, #4]
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	f022 0201 	bic.w	r2, r2, #1
 801ccca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	685a      	ldr	r2, [r3, #4]
 801ccd0:	687b      	ldr	r3, [r7, #4]
 801ccd2:	681b      	ldr	r3, [r3, #0]
 801ccd4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801ccd8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801ccda:	687b      	ldr	r3, [r7, #4]
 801ccdc:	681b      	ldr	r3, [r3, #0]
 801ccde:	689a      	ldr	r2, [r3, #8]
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cce8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	68db      	ldr	r3, [r3, #12]
 801ccee:	2b01      	cmp	r3, #1
 801ccf0:	d107      	bne.n	801cd02 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	689a      	ldr	r2, [r3, #8]
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	681b      	ldr	r3, [r3, #0]
 801ccfa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801ccfe:	609a      	str	r2, [r3, #8]
 801cd00:	e006      	b.n	801cd10 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	689a      	ldr	r2, [r3, #8]
 801cd06:	687b      	ldr	r3, [r7, #4]
 801cd08:	681b      	ldr	r3, [r3, #0]
 801cd0a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801cd0e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	68db      	ldr	r3, [r3, #12]
 801cd14:	2b02      	cmp	r3, #2
 801cd16:	d108      	bne.n	801cd2a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cd18:	687b      	ldr	r3, [r7, #4]
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	685a      	ldr	r2, [r3, #4]
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	681b      	ldr	r3, [r3, #0]
 801cd22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801cd26:	605a      	str	r2, [r3, #4]
 801cd28:	e007      	b.n	801cd3a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	681b      	ldr	r3, [r3, #0]
 801cd2e:	685a      	ldr	r2, [r3, #4]
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	681b      	ldr	r3, [r3, #0]
 801cd34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801cd38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801cd3a:	687b      	ldr	r3, [r7, #4]
 801cd3c:	681b      	ldr	r3, [r3, #0]
 801cd3e:	6859      	ldr	r1, [r3, #4]
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	681a      	ldr	r2, [r3, #0]
 801cd44:	4b1d      	ldr	r3, [pc, #116]	@ (801cdbc <HAL_I2C_Init+0x134>)
 801cd46:	430b      	orrs	r3, r1
 801cd48:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801cd4a:	687b      	ldr	r3, [r7, #4]
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	68da      	ldr	r2, [r3, #12]
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801cd58:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	691a      	ldr	r2, [r3, #16]
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	695b      	ldr	r3, [r3, #20]
 801cd62:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	699b      	ldr	r3, [r3, #24]
 801cd6a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801cd6c:	687b      	ldr	r3, [r7, #4]
 801cd6e:	681b      	ldr	r3, [r3, #0]
 801cd70:	430a      	orrs	r2, r1
 801cd72:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801cd74:	687b      	ldr	r3, [r7, #4]
 801cd76:	69d9      	ldr	r1, [r3, #28]
 801cd78:	687b      	ldr	r3, [r7, #4]
 801cd7a:	6a1a      	ldr	r2, [r3, #32]
 801cd7c:	687b      	ldr	r3, [r7, #4]
 801cd7e:	681b      	ldr	r3, [r3, #0]
 801cd80:	430a      	orrs	r2, r1
 801cd82:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	681a      	ldr	r2, [r3, #0]
 801cd8a:	687b      	ldr	r3, [r7, #4]
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	f042 0201 	orr.w	r2, r2, #1
 801cd92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	2200      	movs	r2, #0
 801cd98:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801cd9a:	687b      	ldr	r3, [r7, #4]
 801cd9c:	2220      	movs	r2, #32
 801cd9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	2200      	movs	r2, #0
 801cda6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	2200      	movs	r2, #0
 801cdac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801cdb0:	2300      	movs	r3, #0
}
 801cdb2:	4618      	mov	r0, r3
 801cdb4:	3708      	adds	r7, #8
 801cdb6:	46bd      	mov	sp, r7
 801cdb8:	bd80      	pop	{r7, pc}
 801cdba:	bf00      	nop
 801cdbc:	02008000 	.word	0x02008000

0801cdc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801cdc0:	b480      	push	{r7}
 801cdc2:	b083      	sub	sp, #12
 801cdc4:	af00      	add	r7, sp, #0
 801cdc6:	6078      	str	r0, [r7, #4]
 801cdc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801cdd0:	b2db      	uxtb	r3, r3
 801cdd2:	2b20      	cmp	r3, #32
 801cdd4:	d138      	bne.n	801ce48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801cdd6:	687b      	ldr	r3, [r7, #4]
 801cdd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801cddc:	2b01      	cmp	r3, #1
 801cdde:	d101      	bne.n	801cde4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801cde0:	2302      	movs	r3, #2
 801cde2:	e032      	b.n	801ce4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801cde4:	687b      	ldr	r3, [r7, #4]
 801cde6:	2201      	movs	r2, #1
 801cde8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801cdec:	687b      	ldr	r3, [r7, #4]
 801cdee:	2224      	movs	r2, #36	@ 0x24
 801cdf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801cdf4:	687b      	ldr	r3, [r7, #4]
 801cdf6:	681b      	ldr	r3, [r3, #0]
 801cdf8:	681a      	ldr	r2, [r3, #0]
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	f022 0201 	bic.w	r2, r2, #1
 801ce02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801ce04:	687b      	ldr	r3, [r7, #4]
 801ce06:	681b      	ldr	r3, [r3, #0]
 801ce08:	681a      	ldr	r2, [r3, #0]
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801ce12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	6819      	ldr	r1, [r3, #0]
 801ce1a:	687b      	ldr	r3, [r7, #4]
 801ce1c:	681b      	ldr	r3, [r3, #0]
 801ce1e:	683a      	ldr	r2, [r7, #0]
 801ce20:	430a      	orrs	r2, r1
 801ce22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	681b      	ldr	r3, [r3, #0]
 801ce28:	681a      	ldr	r2, [r3, #0]
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	681b      	ldr	r3, [r3, #0]
 801ce2e:	f042 0201 	orr.w	r2, r2, #1
 801ce32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	2220      	movs	r2, #32
 801ce38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	2200      	movs	r2, #0
 801ce40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801ce44:	2300      	movs	r3, #0
 801ce46:	e000      	b.n	801ce4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801ce48:	2302      	movs	r3, #2
  }
}
 801ce4a:	4618      	mov	r0, r3
 801ce4c:	370c      	adds	r7, #12
 801ce4e:	46bd      	mov	sp, r7
 801ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce54:	4770      	bx	lr

0801ce56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801ce56:	b480      	push	{r7}
 801ce58:	b085      	sub	sp, #20
 801ce5a:	af00      	add	r7, sp, #0
 801ce5c:	6078      	str	r0, [r7, #4]
 801ce5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ce66:	b2db      	uxtb	r3, r3
 801ce68:	2b20      	cmp	r3, #32
 801ce6a:	d139      	bne.n	801cee0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801ce72:	2b01      	cmp	r3, #1
 801ce74:	d101      	bne.n	801ce7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801ce76:	2302      	movs	r3, #2
 801ce78:	e033      	b.n	801cee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	2201      	movs	r2, #1
 801ce7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	2224      	movs	r2, #36	@ 0x24
 801ce86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	681a      	ldr	r2, [r3, #0]
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	681b      	ldr	r3, [r3, #0]
 801ce94:	f022 0201 	bic.w	r2, r2, #1
 801ce98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801cea2:	68fb      	ldr	r3, [r7, #12]
 801cea4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801cea8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801ceaa:	683b      	ldr	r3, [r7, #0]
 801ceac:	021b      	lsls	r3, r3, #8
 801ceae:	68fa      	ldr	r2, [r7, #12]
 801ceb0:	4313      	orrs	r3, r2
 801ceb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801ceb4:	687b      	ldr	r3, [r7, #4]
 801ceb6:	681b      	ldr	r3, [r3, #0]
 801ceb8:	68fa      	ldr	r2, [r7, #12]
 801ceba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	681b      	ldr	r3, [r3, #0]
 801cec0:	681a      	ldr	r2, [r3, #0]
 801cec2:	687b      	ldr	r3, [r7, #4]
 801cec4:	681b      	ldr	r3, [r3, #0]
 801cec6:	f042 0201 	orr.w	r2, r2, #1
 801ceca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801cecc:	687b      	ldr	r3, [r7, #4]
 801cece:	2220      	movs	r2, #32
 801ced0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	2200      	movs	r2, #0
 801ced8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801cedc:	2300      	movs	r3, #0
 801cede:	e000      	b.n	801cee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801cee0:	2302      	movs	r3, #2
  }
}
 801cee2:	4618      	mov	r0, r3
 801cee4:	3714      	adds	r7, #20
 801cee6:	46bd      	mov	sp, r7
 801cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceec:	4770      	bx	lr
	...

0801cef0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801cef0:	b580      	push	{r7, lr}
 801cef2:	b084      	sub	sp, #16
 801cef4:	af00      	add	r7, sp, #0
 801cef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801cef8:	4b19      	ldr	r3, [pc, #100]	@ (801cf60 <HAL_PWREx_ConfigSupply+0x70>)
 801cefa:	68db      	ldr	r3, [r3, #12]
 801cefc:	f003 0304 	and.w	r3, r3, #4
 801cf00:	2b04      	cmp	r3, #4
 801cf02:	d00a      	beq.n	801cf1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801cf04:	4b16      	ldr	r3, [pc, #88]	@ (801cf60 <HAL_PWREx_ConfigSupply+0x70>)
 801cf06:	68db      	ldr	r3, [r3, #12]
 801cf08:	f003 0307 	and.w	r3, r3, #7
 801cf0c:	687a      	ldr	r2, [r7, #4]
 801cf0e:	429a      	cmp	r2, r3
 801cf10:	d001      	beq.n	801cf16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801cf12:	2301      	movs	r3, #1
 801cf14:	e01f      	b.n	801cf56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801cf16:	2300      	movs	r3, #0
 801cf18:	e01d      	b.n	801cf56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801cf1a:	4b11      	ldr	r3, [pc, #68]	@ (801cf60 <HAL_PWREx_ConfigSupply+0x70>)
 801cf1c:	68db      	ldr	r3, [r3, #12]
 801cf1e:	f023 0207 	bic.w	r2, r3, #7
 801cf22:	490f      	ldr	r1, [pc, #60]	@ (801cf60 <HAL_PWREx_ConfigSupply+0x70>)
 801cf24:	687b      	ldr	r3, [r7, #4]
 801cf26:	4313      	orrs	r3, r2
 801cf28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801cf2a:	f7fd fc03 	bl	801a734 <HAL_GetTick>
 801cf2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cf30:	e009      	b.n	801cf46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801cf32:	f7fd fbff 	bl	801a734 <HAL_GetTick>
 801cf36:	4602      	mov	r2, r0
 801cf38:	68fb      	ldr	r3, [r7, #12]
 801cf3a:	1ad3      	subs	r3, r2, r3
 801cf3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801cf40:	d901      	bls.n	801cf46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801cf42:	2301      	movs	r3, #1
 801cf44:	e007      	b.n	801cf56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801cf46:	4b06      	ldr	r3, [pc, #24]	@ (801cf60 <HAL_PWREx_ConfigSupply+0x70>)
 801cf48:	685b      	ldr	r3, [r3, #4]
 801cf4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cf4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801cf52:	d1ee      	bne.n	801cf32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801cf54:	2300      	movs	r3, #0
}
 801cf56:	4618      	mov	r0, r3
 801cf58:	3710      	adds	r7, #16
 801cf5a:	46bd      	mov	sp, r7
 801cf5c:	bd80      	pop	{r7, pc}
 801cf5e:	bf00      	nop
 801cf60:	58024800 	.word	0x58024800

0801cf64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801cf64:	b580      	push	{r7, lr}
 801cf66:	b08c      	sub	sp, #48	@ 0x30
 801cf68:	af00      	add	r7, sp, #0
 801cf6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d102      	bne.n	801cf78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801cf72:	2301      	movs	r3, #1
 801cf74:	f000 bc48 	b.w	801d808 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801cf78:	687b      	ldr	r3, [r7, #4]
 801cf7a:	681b      	ldr	r3, [r3, #0]
 801cf7c:	f003 0301 	and.w	r3, r3, #1
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	f000 8088 	beq.w	801d096 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801cf86:	4b99      	ldr	r3, [pc, #612]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cf88:	691b      	ldr	r3, [r3, #16]
 801cf8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cf8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801cf90:	4b96      	ldr	r3, [pc, #600]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cf92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cf94:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801cf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf98:	2b10      	cmp	r3, #16
 801cf9a:	d007      	beq.n	801cfac <HAL_RCC_OscConfig+0x48>
 801cf9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf9e:	2b18      	cmp	r3, #24
 801cfa0:	d111      	bne.n	801cfc6 <HAL_RCC_OscConfig+0x62>
 801cfa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cfa4:	f003 0303 	and.w	r3, r3, #3
 801cfa8:	2b02      	cmp	r3, #2
 801cfaa:	d10c      	bne.n	801cfc6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801cfac:	4b8f      	ldr	r3, [pc, #572]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d06d      	beq.n	801d094 <HAL_RCC_OscConfig+0x130>
 801cfb8:	687b      	ldr	r3, [r7, #4]
 801cfba:	685b      	ldr	r3, [r3, #4]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	d169      	bne.n	801d094 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801cfc0:	2301      	movs	r3, #1
 801cfc2:	f000 bc21 	b.w	801d808 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	685b      	ldr	r3, [r3, #4]
 801cfca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cfce:	d106      	bne.n	801cfde <HAL_RCC_OscConfig+0x7a>
 801cfd0:	4b86      	ldr	r3, [pc, #536]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	4a85      	ldr	r2, [pc, #532]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cfd6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801cfda:	6013      	str	r3, [r2, #0]
 801cfdc:	e02e      	b.n	801d03c <HAL_RCC_OscConfig+0xd8>
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	685b      	ldr	r3, [r3, #4]
 801cfe2:	2b00      	cmp	r3, #0
 801cfe4:	d10c      	bne.n	801d000 <HAL_RCC_OscConfig+0x9c>
 801cfe6:	4b81      	ldr	r3, [pc, #516]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cfe8:	681b      	ldr	r3, [r3, #0]
 801cfea:	4a80      	ldr	r2, [pc, #512]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cfec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801cff0:	6013      	str	r3, [r2, #0]
 801cff2:	4b7e      	ldr	r3, [pc, #504]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cff4:	681b      	ldr	r3, [r3, #0]
 801cff6:	4a7d      	ldr	r2, [pc, #500]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801cff8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801cffc:	6013      	str	r3, [r2, #0]
 801cffe:	e01d      	b.n	801d03c <HAL_RCC_OscConfig+0xd8>
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	685b      	ldr	r3, [r3, #4]
 801d004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d008:	d10c      	bne.n	801d024 <HAL_RCC_OscConfig+0xc0>
 801d00a:	4b78      	ldr	r3, [pc, #480]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	4a77      	ldr	r2, [pc, #476]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d014:	6013      	str	r3, [r2, #0]
 801d016:	4b75      	ldr	r3, [pc, #468]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	4a74      	ldr	r2, [pc, #464]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d01c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d020:	6013      	str	r3, [r2, #0]
 801d022:	e00b      	b.n	801d03c <HAL_RCC_OscConfig+0xd8>
 801d024:	4b71      	ldr	r3, [pc, #452]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	4a70      	ldr	r2, [pc, #448]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d02a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d02e:	6013      	str	r3, [r2, #0]
 801d030:	4b6e      	ldr	r3, [pc, #440]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	4a6d      	ldr	r2, [pc, #436]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801d03a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	685b      	ldr	r3, [r3, #4]
 801d040:	2b00      	cmp	r3, #0
 801d042:	d013      	beq.n	801d06c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d044:	f7fd fb76 	bl	801a734 <HAL_GetTick>
 801d048:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d04a:	e008      	b.n	801d05e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d04c:	f7fd fb72 	bl	801a734 <HAL_GetTick>
 801d050:	4602      	mov	r2, r0
 801d052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d054:	1ad3      	subs	r3, r2, r3
 801d056:	2b64      	cmp	r3, #100	@ 0x64
 801d058:	d901      	bls.n	801d05e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801d05a:	2303      	movs	r3, #3
 801d05c:	e3d4      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d05e:	4b63      	ldr	r3, [pc, #396]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d060:	681b      	ldr	r3, [r3, #0]
 801d062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d066:	2b00      	cmp	r3, #0
 801d068:	d0f0      	beq.n	801d04c <HAL_RCC_OscConfig+0xe8>
 801d06a:	e014      	b.n	801d096 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d06c:	f7fd fb62 	bl	801a734 <HAL_GetTick>
 801d070:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d072:	e008      	b.n	801d086 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801d074:	f7fd fb5e 	bl	801a734 <HAL_GetTick>
 801d078:	4602      	mov	r2, r0
 801d07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d07c:	1ad3      	subs	r3, r2, r3
 801d07e:	2b64      	cmp	r3, #100	@ 0x64
 801d080:	d901      	bls.n	801d086 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801d082:	2303      	movs	r3, #3
 801d084:	e3c0      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801d086:	4b59      	ldr	r3, [pc, #356]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d1f0      	bne.n	801d074 <HAL_RCC_OscConfig+0x110>
 801d092:	e000      	b.n	801d096 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801d094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	f003 0302 	and.w	r3, r3, #2
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	f000 80ca 	beq.w	801d238 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d0a4:	4b51      	ldr	r3, [pc, #324]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d0a6:	691b      	ldr	r3, [r3, #16]
 801d0a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d0ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d0ae:	4b4f      	ldr	r3, [pc, #316]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d0b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801d0b4:	6a3b      	ldr	r3, [r7, #32]
 801d0b6:	2b00      	cmp	r3, #0
 801d0b8:	d007      	beq.n	801d0ca <HAL_RCC_OscConfig+0x166>
 801d0ba:	6a3b      	ldr	r3, [r7, #32]
 801d0bc:	2b18      	cmp	r3, #24
 801d0be:	d156      	bne.n	801d16e <HAL_RCC_OscConfig+0x20a>
 801d0c0:	69fb      	ldr	r3, [r7, #28]
 801d0c2:	f003 0303 	and.w	r3, r3, #3
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d151      	bne.n	801d16e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d0ca:	4b48      	ldr	r3, [pc, #288]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d0cc:	681b      	ldr	r3, [r3, #0]
 801d0ce:	f003 0304 	and.w	r3, r3, #4
 801d0d2:	2b00      	cmp	r3, #0
 801d0d4:	d005      	beq.n	801d0e2 <HAL_RCC_OscConfig+0x17e>
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	68db      	ldr	r3, [r3, #12]
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d101      	bne.n	801d0e2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801d0de:	2301      	movs	r3, #1
 801d0e0:	e392      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d0e2:	4b42      	ldr	r3, [pc, #264]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	f023 0219 	bic.w	r2, r3, #25
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	68db      	ldr	r3, [r3, #12]
 801d0ee:	493f      	ldr	r1, [pc, #252]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d0f0:	4313      	orrs	r3, r2
 801d0f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d0f4:	f7fd fb1e 	bl	801a734 <HAL_GetTick>
 801d0f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d0fa:	e008      	b.n	801d10e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d0fc:	f7fd fb1a 	bl	801a734 <HAL_GetTick>
 801d100:	4602      	mov	r2, r0
 801d102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d104:	1ad3      	subs	r3, r2, r3
 801d106:	2b02      	cmp	r3, #2
 801d108:	d901      	bls.n	801d10e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801d10a:	2303      	movs	r3, #3
 801d10c:	e37c      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d10e:	4b37      	ldr	r3, [pc, #220]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d110:	681b      	ldr	r3, [r3, #0]
 801d112:	f003 0304 	and.w	r3, r3, #4
 801d116:	2b00      	cmp	r3, #0
 801d118:	d0f0      	beq.n	801d0fc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d11a:	f7fd fb3b 	bl	801a794 <HAL_GetREVID>
 801d11e:	4603      	mov	r3, r0
 801d120:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d124:	4293      	cmp	r3, r2
 801d126:	d817      	bhi.n	801d158 <HAL_RCC_OscConfig+0x1f4>
 801d128:	687b      	ldr	r3, [r7, #4]
 801d12a:	691b      	ldr	r3, [r3, #16]
 801d12c:	2b40      	cmp	r3, #64	@ 0x40
 801d12e:	d108      	bne.n	801d142 <HAL_RCC_OscConfig+0x1de>
 801d130:	4b2e      	ldr	r3, [pc, #184]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d132:	685b      	ldr	r3, [r3, #4]
 801d134:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d138:	4a2c      	ldr	r2, [pc, #176]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d13a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d13e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d140:	e07a      	b.n	801d238 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d142:	4b2a      	ldr	r3, [pc, #168]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d144:	685b      	ldr	r3, [r3, #4]
 801d146:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d14a:	687b      	ldr	r3, [r7, #4]
 801d14c:	691b      	ldr	r3, [r3, #16]
 801d14e:	031b      	lsls	r3, r3, #12
 801d150:	4926      	ldr	r1, [pc, #152]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d152:	4313      	orrs	r3, r2
 801d154:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d156:	e06f      	b.n	801d238 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d158:	4b24      	ldr	r3, [pc, #144]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d15a:	685b      	ldr	r3, [r3, #4]
 801d15c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	691b      	ldr	r3, [r3, #16]
 801d164:	061b      	lsls	r3, r3, #24
 801d166:	4921      	ldr	r1, [pc, #132]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d168:	4313      	orrs	r3, r2
 801d16a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801d16c:	e064      	b.n	801d238 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801d16e:	687b      	ldr	r3, [r7, #4]
 801d170:	68db      	ldr	r3, [r3, #12]
 801d172:	2b00      	cmp	r3, #0
 801d174:	d047      	beq.n	801d206 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801d176:	4b1d      	ldr	r3, [pc, #116]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d178:	681b      	ldr	r3, [r3, #0]
 801d17a:	f023 0219 	bic.w	r2, r3, #25
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	68db      	ldr	r3, [r3, #12]
 801d182:	491a      	ldr	r1, [pc, #104]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d184:	4313      	orrs	r3, r2
 801d186:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d188:	f7fd fad4 	bl	801a734 <HAL_GetTick>
 801d18c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d18e:	e008      	b.n	801d1a2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d190:	f7fd fad0 	bl	801a734 <HAL_GetTick>
 801d194:	4602      	mov	r2, r0
 801d196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d198:	1ad3      	subs	r3, r2, r3
 801d19a:	2b02      	cmp	r3, #2
 801d19c:	d901      	bls.n	801d1a2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801d19e:	2303      	movs	r3, #3
 801d1a0:	e332      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d1a2:	4b12      	ldr	r3, [pc, #72]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	f003 0304 	and.w	r3, r3, #4
 801d1aa:	2b00      	cmp	r3, #0
 801d1ac:	d0f0      	beq.n	801d190 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801d1ae:	f7fd faf1 	bl	801a794 <HAL_GetREVID>
 801d1b2:	4603      	mov	r3, r0
 801d1b4:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d1b8:	4293      	cmp	r3, r2
 801d1ba:	d819      	bhi.n	801d1f0 <HAL_RCC_OscConfig+0x28c>
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	691b      	ldr	r3, [r3, #16]
 801d1c0:	2b40      	cmp	r3, #64	@ 0x40
 801d1c2:	d108      	bne.n	801d1d6 <HAL_RCC_OscConfig+0x272>
 801d1c4:	4b09      	ldr	r3, [pc, #36]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d1c6:	685b      	ldr	r3, [r3, #4]
 801d1c8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801d1cc:	4a07      	ldr	r2, [pc, #28]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d1ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d1d2:	6053      	str	r3, [r2, #4]
 801d1d4:	e030      	b.n	801d238 <HAL_RCC_OscConfig+0x2d4>
 801d1d6:	4b05      	ldr	r3, [pc, #20]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d1d8:	685b      	ldr	r3, [r3, #4]
 801d1da:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801d1de:	687b      	ldr	r3, [r7, #4]
 801d1e0:	691b      	ldr	r3, [r3, #16]
 801d1e2:	031b      	lsls	r3, r3, #12
 801d1e4:	4901      	ldr	r1, [pc, #4]	@ (801d1ec <HAL_RCC_OscConfig+0x288>)
 801d1e6:	4313      	orrs	r3, r2
 801d1e8:	604b      	str	r3, [r1, #4]
 801d1ea:	e025      	b.n	801d238 <HAL_RCC_OscConfig+0x2d4>
 801d1ec:	58024400 	.word	0x58024400
 801d1f0:	4b9a      	ldr	r3, [pc, #616]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d1f2:	685b      	ldr	r3, [r3, #4]
 801d1f4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801d1f8:	687b      	ldr	r3, [r7, #4]
 801d1fa:	691b      	ldr	r3, [r3, #16]
 801d1fc:	061b      	lsls	r3, r3, #24
 801d1fe:	4997      	ldr	r1, [pc, #604]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d200:	4313      	orrs	r3, r2
 801d202:	604b      	str	r3, [r1, #4]
 801d204:	e018      	b.n	801d238 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801d206:	4b95      	ldr	r3, [pc, #596]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	4a94      	ldr	r2, [pc, #592]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d20c:	f023 0301 	bic.w	r3, r3, #1
 801d210:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d212:	f7fd fa8f 	bl	801a734 <HAL_GetTick>
 801d216:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d218:	e008      	b.n	801d22c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801d21a:	f7fd fa8b 	bl	801a734 <HAL_GetTick>
 801d21e:	4602      	mov	r2, r0
 801d220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d222:	1ad3      	subs	r3, r2, r3
 801d224:	2b02      	cmp	r3, #2
 801d226:	d901      	bls.n	801d22c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801d228:	2303      	movs	r3, #3
 801d22a:	e2ed      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801d22c:	4b8b      	ldr	r3, [pc, #556]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	f003 0304 	and.w	r3, r3, #4
 801d234:	2b00      	cmp	r3, #0
 801d236:	d1f0      	bne.n	801d21a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801d238:	687b      	ldr	r3, [r7, #4]
 801d23a:	681b      	ldr	r3, [r3, #0]
 801d23c:	f003 0310 	and.w	r3, r3, #16
 801d240:	2b00      	cmp	r3, #0
 801d242:	f000 80a9 	beq.w	801d398 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801d246:	4b85      	ldr	r3, [pc, #532]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d248:	691b      	ldr	r3, [r3, #16]
 801d24a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d24e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801d250:	4b82      	ldr	r3, [pc, #520]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d254:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801d256:	69bb      	ldr	r3, [r7, #24]
 801d258:	2b08      	cmp	r3, #8
 801d25a:	d007      	beq.n	801d26c <HAL_RCC_OscConfig+0x308>
 801d25c:	69bb      	ldr	r3, [r7, #24]
 801d25e:	2b18      	cmp	r3, #24
 801d260:	d13a      	bne.n	801d2d8 <HAL_RCC_OscConfig+0x374>
 801d262:	697b      	ldr	r3, [r7, #20]
 801d264:	f003 0303 	and.w	r3, r3, #3
 801d268:	2b01      	cmp	r3, #1
 801d26a:	d135      	bne.n	801d2d8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d26c:	4b7b      	ldr	r3, [pc, #492]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d274:	2b00      	cmp	r3, #0
 801d276:	d005      	beq.n	801d284 <HAL_RCC_OscConfig+0x320>
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	69db      	ldr	r3, [r3, #28]
 801d27c:	2b80      	cmp	r3, #128	@ 0x80
 801d27e:	d001      	beq.n	801d284 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801d280:	2301      	movs	r3, #1
 801d282:	e2c1      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d284:	f7fd fa86 	bl	801a794 <HAL_GetREVID>
 801d288:	4603      	mov	r3, r0
 801d28a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d28e:	4293      	cmp	r3, r2
 801d290:	d817      	bhi.n	801d2c2 <HAL_RCC_OscConfig+0x35e>
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	6a1b      	ldr	r3, [r3, #32]
 801d296:	2b20      	cmp	r3, #32
 801d298:	d108      	bne.n	801d2ac <HAL_RCC_OscConfig+0x348>
 801d29a:	4b70      	ldr	r3, [pc, #448]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d29c:	685b      	ldr	r3, [r3, #4]
 801d29e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d2a2:	4a6e      	ldr	r2, [pc, #440]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d2a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d2a8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d2aa:	e075      	b.n	801d398 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d2ac:	4b6b      	ldr	r3, [pc, #428]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d2ae:	685b      	ldr	r3, [r3, #4]
 801d2b0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	6a1b      	ldr	r3, [r3, #32]
 801d2b8:	069b      	lsls	r3, r3, #26
 801d2ba:	4968      	ldr	r1, [pc, #416]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d2bc:	4313      	orrs	r3, r2
 801d2be:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d2c0:	e06a      	b.n	801d398 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d2c2:	4b66      	ldr	r3, [pc, #408]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d2c4:	68db      	ldr	r3, [r3, #12]
 801d2c6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	6a1b      	ldr	r3, [r3, #32]
 801d2ce:	061b      	lsls	r3, r3, #24
 801d2d0:	4962      	ldr	r1, [pc, #392]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d2d2:	4313      	orrs	r3, r2
 801d2d4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801d2d6:	e05f      	b.n	801d398 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801d2d8:	687b      	ldr	r3, [r7, #4]
 801d2da:	69db      	ldr	r3, [r3, #28]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d042      	beq.n	801d366 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801d2e0:	4b5e      	ldr	r3, [pc, #376]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	4a5d      	ldr	r2, [pc, #372]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d2e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d2ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d2ec:	f7fd fa22 	bl	801a734 <HAL_GetTick>
 801d2f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d2f2:	e008      	b.n	801d306 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d2f4:	f7fd fa1e 	bl	801a734 <HAL_GetTick>
 801d2f8:	4602      	mov	r2, r0
 801d2fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d2fc:	1ad3      	subs	r3, r2, r3
 801d2fe:	2b02      	cmp	r3, #2
 801d300:	d901      	bls.n	801d306 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801d302:	2303      	movs	r3, #3
 801d304:	e280      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d306:	4b55      	ldr	r3, [pc, #340]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d308:	681b      	ldr	r3, [r3, #0]
 801d30a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d30e:	2b00      	cmp	r3, #0
 801d310:	d0f0      	beq.n	801d2f4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801d312:	f7fd fa3f 	bl	801a794 <HAL_GetREVID>
 801d316:	4603      	mov	r3, r0
 801d318:	f241 0203 	movw	r2, #4099	@ 0x1003
 801d31c:	4293      	cmp	r3, r2
 801d31e:	d817      	bhi.n	801d350 <HAL_RCC_OscConfig+0x3ec>
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	6a1b      	ldr	r3, [r3, #32]
 801d324:	2b20      	cmp	r3, #32
 801d326:	d108      	bne.n	801d33a <HAL_RCC_OscConfig+0x3d6>
 801d328:	4b4c      	ldr	r3, [pc, #304]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d32a:	685b      	ldr	r3, [r3, #4]
 801d32c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801d330:	4a4a      	ldr	r2, [pc, #296]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d332:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801d336:	6053      	str	r3, [r2, #4]
 801d338:	e02e      	b.n	801d398 <HAL_RCC_OscConfig+0x434>
 801d33a:	4b48      	ldr	r3, [pc, #288]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d33c:	685b      	ldr	r3, [r3, #4]
 801d33e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801d342:	687b      	ldr	r3, [r7, #4]
 801d344:	6a1b      	ldr	r3, [r3, #32]
 801d346:	069b      	lsls	r3, r3, #26
 801d348:	4944      	ldr	r1, [pc, #272]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d34a:	4313      	orrs	r3, r2
 801d34c:	604b      	str	r3, [r1, #4]
 801d34e:	e023      	b.n	801d398 <HAL_RCC_OscConfig+0x434>
 801d350:	4b42      	ldr	r3, [pc, #264]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d352:	68db      	ldr	r3, [r3, #12]
 801d354:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	6a1b      	ldr	r3, [r3, #32]
 801d35c:	061b      	lsls	r3, r3, #24
 801d35e:	493f      	ldr	r1, [pc, #252]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d360:	4313      	orrs	r3, r2
 801d362:	60cb      	str	r3, [r1, #12]
 801d364:	e018      	b.n	801d398 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801d366:	4b3d      	ldr	r3, [pc, #244]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d368:	681b      	ldr	r3, [r3, #0]
 801d36a:	4a3c      	ldr	r2, [pc, #240]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d36c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801d370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d372:	f7fd f9df 	bl	801a734 <HAL_GetTick>
 801d376:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d378:	e008      	b.n	801d38c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801d37a:	f7fd f9db 	bl	801a734 <HAL_GetTick>
 801d37e:	4602      	mov	r2, r0
 801d380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d382:	1ad3      	subs	r3, r2, r3
 801d384:	2b02      	cmp	r3, #2
 801d386:	d901      	bls.n	801d38c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801d388:	2303      	movs	r3, #3
 801d38a:	e23d      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801d38c:	4b33      	ldr	r3, [pc, #204]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d38e:	681b      	ldr	r3, [r3, #0]
 801d390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d394:	2b00      	cmp	r3, #0
 801d396:	d1f0      	bne.n	801d37a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801d398:	687b      	ldr	r3, [r7, #4]
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	f003 0308 	and.w	r3, r3, #8
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	d036      	beq.n	801d412 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	695b      	ldr	r3, [r3, #20]
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d019      	beq.n	801d3e0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801d3ac:	4b2b      	ldr	r3, [pc, #172]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d3ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3b0:	4a2a      	ldr	r2, [pc, #168]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d3b2:	f043 0301 	orr.w	r3, r3, #1
 801d3b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d3b8:	f7fd f9bc 	bl	801a734 <HAL_GetTick>
 801d3bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d3be:	e008      	b.n	801d3d2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d3c0:	f7fd f9b8 	bl	801a734 <HAL_GetTick>
 801d3c4:	4602      	mov	r2, r0
 801d3c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3c8:	1ad3      	subs	r3, r2, r3
 801d3ca:	2b02      	cmp	r3, #2
 801d3cc:	d901      	bls.n	801d3d2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801d3ce:	2303      	movs	r3, #3
 801d3d0:	e21a      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801d3d2:	4b22      	ldr	r3, [pc, #136]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d3d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3d6:	f003 0302 	and.w	r3, r3, #2
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d0f0      	beq.n	801d3c0 <HAL_RCC_OscConfig+0x45c>
 801d3de:	e018      	b.n	801d412 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801d3e0:	4b1e      	ldr	r3, [pc, #120]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d3e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d3e4:	4a1d      	ldr	r2, [pc, #116]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d3e6:	f023 0301 	bic.w	r3, r3, #1
 801d3ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d3ec:	f7fd f9a2 	bl	801a734 <HAL_GetTick>
 801d3f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d3f2:	e008      	b.n	801d406 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801d3f4:	f7fd f99e 	bl	801a734 <HAL_GetTick>
 801d3f8:	4602      	mov	r2, r0
 801d3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d3fc:	1ad3      	subs	r3, r2, r3
 801d3fe:	2b02      	cmp	r3, #2
 801d400:	d901      	bls.n	801d406 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801d402:	2303      	movs	r3, #3
 801d404:	e200      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801d406:	4b15      	ldr	r3, [pc, #84]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d408:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d40a:	f003 0302 	and.w	r3, r3, #2
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d1f0      	bne.n	801d3f4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801d412:	687b      	ldr	r3, [r7, #4]
 801d414:	681b      	ldr	r3, [r3, #0]
 801d416:	f003 0320 	and.w	r3, r3, #32
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d039      	beq.n	801d492 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	699b      	ldr	r3, [r3, #24]
 801d422:	2b00      	cmp	r3, #0
 801d424:	d01c      	beq.n	801d460 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801d426:	4b0d      	ldr	r3, [pc, #52]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d428:	681b      	ldr	r3, [r3, #0]
 801d42a:	4a0c      	ldr	r2, [pc, #48]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d42c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801d430:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d432:	f7fd f97f 	bl	801a734 <HAL_GetTick>
 801d436:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d438:	e008      	b.n	801d44c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d43a:	f7fd f97b 	bl	801a734 <HAL_GetTick>
 801d43e:	4602      	mov	r2, r0
 801d440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d442:	1ad3      	subs	r3, r2, r3
 801d444:	2b02      	cmp	r3, #2
 801d446:	d901      	bls.n	801d44c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801d448:	2303      	movs	r3, #3
 801d44a:	e1dd      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801d44c:	4b03      	ldr	r3, [pc, #12]	@ (801d45c <HAL_RCC_OscConfig+0x4f8>)
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d454:	2b00      	cmp	r3, #0
 801d456:	d0f0      	beq.n	801d43a <HAL_RCC_OscConfig+0x4d6>
 801d458:	e01b      	b.n	801d492 <HAL_RCC_OscConfig+0x52e>
 801d45a:	bf00      	nop
 801d45c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801d460:	4b9b      	ldr	r3, [pc, #620]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d462:	681b      	ldr	r3, [r3, #0]
 801d464:	4a9a      	ldr	r2, [pc, #616]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d46a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801d46c:	f7fd f962 	bl	801a734 <HAL_GetTick>
 801d470:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d472:	e008      	b.n	801d486 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801d474:	f7fd f95e 	bl	801a734 <HAL_GetTick>
 801d478:	4602      	mov	r2, r0
 801d47a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d47c:	1ad3      	subs	r3, r2, r3
 801d47e:	2b02      	cmp	r3, #2
 801d480:	d901      	bls.n	801d486 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801d482:	2303      	movs	r3, #3
 801d484:	e1c0      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801d486:	4b92      	ldr	r3, [pc, #584]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d1f0      	bne.n	801d474 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	681b      	ldr	r3, [r3, #0]
 801d496:	f003 0304 	and.w	r3, r3, #4
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	f000 8081 	beq.w	801d5a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d4a0:	4b8c      	ldr	r3, [pc, #560]	@ (801d6d4 <HAL_RCC_OscConfig+0x770>)
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	4a8b      	ldr	r2, [pc, #556]	@ (801d6d4 <HAL_RCC_OscConfig+0x770>)
 801d4a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d4aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d4ac:	f7fd f942 	bl	801a734 <HAL_GetTick>
 801d4b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d4b2:	e008      	b.n	801d4c6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d4b4:	f7fd f93e 	bl	801a734 <HAL_GetTick>
 801d4b8:	4602      	mov	r2, r0
 801d4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d4bc:	1ad3      	subs	r3, r2, r3
 801d4be:	2b64      	cmp	r3, #100	@ 0x64
 801d4c0:	d901      	bls.n	801d4c6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801d4c2:	2303      	movs	r3, #3
 801d4c4:	e1a0      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d4c6:	4b83      	ldr	r3, [pc, #524]	@ (801d6d4 <HAL_RCC_OscConfig+0x770>)
 801d4c8:	681b      	ldr	r3, [r3, #0]
 801d4ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d4ce:	2b00      	cmp	r3, #0
 801d4d0:	d0f0      	beq.n	801d4b4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801d4d2:	687b      	ldr	r3, [r7, #4]
 801d4d4:	689b      	ldr	r3, [r3, #8]
 801d4d6:	2b01      	cmp	r3, #1
 801d4d8:	d106      	bne.n	801d4e8 <HAL_RCC_OscConfig+0x584>
 801d4da:	4b7d      	ldr	r3, [pc, #500]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d4dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d4de:	4a7c      	ldr	r2, [pc, #496]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d4e0:	f043 0301 	orr.w	r3, r3, #1
 801d4e4:	6713      	str	r3, [r2, #112]	@ 0x70
 801d4e6:	e02d      	b.n	801d544 <HAL_RCC_OscConfig+0x5e0>
 801d4e8:	687b      	ldr	r3, [r7, #4]
 801d4ea:	689b      	ldr	r3, [r3, #8]
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d10c      	bne.n	801d50a <HAL_RCC_OscConfig+0x5a6>
 801d4f0:	4b77      	ldr	r3, [pc, #476]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d4f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d4f4:	4a76      	ldr	r2, [pc, #472]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d4f6:	f023 0301 	bic.w	r3, r3, #1
 801d4fa:	6713      	str	r3, [r2, #112]	@ 0x70
 801d4fc:	4b74      	ldr	r3, [pc, #464]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d4fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d500:	4a73      	ldr	r2, [pc, #460]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d502:	f023 0304 	bic.w	r3, r3, #4
 801d506:	6713      	str	r3, [r2, #112]	@ 0x70
 801d508:	e01c      	b.n	801d544 <HAL_RCC_OscConfig+0x5e0>
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	689b      	ldr	r3, [r3, #8]
 801d50e:	2b05      	cmp	r3, #5
 801d510:	d10c      	bne.n	801d52c <HAL_RCC_OscConfig+0x5c8>
 801d512:	4b6f      	ldr	r3, [pc, #444]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d514:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d516:	4a6e      	ldr	r2, [pc, #440]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d518:	f043 0304 	orr.w	r3, r3, #4
 801d51c:	6713      	str	r3, [r2, #112]	@ 0x70
 801d51e:	4b6c      	ldr	r3, [pc, #432]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d522:	4a6b      	ldr	r2, [pc, #428]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d524:	f043 0301 	orr.w	r3, r3, #1
 801d528:	6713      	str	r3, [r2, #112]	@ 0x70
 801d52a:	e00b      	b.n	801d544 <HAL_RCC_OscConfig+0x5e0>
 801d52c:	4b68      	ldr	r3, [pc, #416]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d52e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d530:	4a67      	ldr	r2, [pc, #412]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d532:	f023 0301 	bic.w	r3, r3, #1
 801d536:	6713      	str	r3, [r2, #112]	@ 0x70
 801d538:	4b65      	ldr	r3, [pc, #404]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d53a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d53c:	4a64      	ldr	r2, [pc, #400]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d53e:	f023 0304 	bic.w	r3, r3, #4
 801d542:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801d544:	687b      	ldr	r3, [r7, #4]
 801d546:	689b      	ldr	r3, [r3, #8]
 801d548:	2b00      	cmp	r3, #0
 801d54a:	d015      	beq.n	801d578 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d54c:	f7fd f8f2 	bl	801a734 <HAL_GetTick>
 801d550:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d552:	e00a      	b.n	801d56a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d554:	f7fd f8ee 	bl	801a734 <HAL_GetTick>
 801d558:	4602      	mov	r2, r0
 801d55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d55c:	1ad3      	subs	r3, r2, r3
 801d55e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d562:	4293      	cmp	r3, r2
 801d564:	d901      	bls.n	801d56a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801d566:	2303      	movs	r3, #3
 801d568:	e14e      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d56a:	4b59      	ldr	r3, [pc, #356]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d56c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d56e:	f003 0302 	and.w	r3, r3, #2
 801d572:	2b00      	cmp	r3, #0
 801d574:	d0ee      	beq.n	801d554 <HAL_RCC_OscConfig+0x5f0>
 801d576:	e014      	b.n	801d5a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801d578:	f7fd f8dc 	bl	801a734 <HAL_GetTick>
 801d57c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d57e:	e00a      	b.n	801d596 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d580:	f7fd f8d8 	bl	801a734 <HAL_GetTick>
 801d584:	4602      	mov	r2, r0
 801d586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d588:	1ad3      	subs	r3, r2, r3
 801d58a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d58e:	4293      	cmp	r3, r2
 801d590:	d901      	bls.n	801d596 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801d592:	2303      	movs	r3, #3
 801d594:	e138      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801d596:	4b4e      	ldr	r3, [pc, #312]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d59a:	f003 0302 	and.w	r3, r3, #2
 801d59e:	2b00      	cmp	r3, #0
 801d5a0:	d1ee      	bne.n	801d580 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801d5a2:	687b      	ldr	r3, [r7, #4]
 801d5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d5a6:	2b00      	cmp	r3, #0
 801d5a8:	f000 812d 	beq.w	801d806 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801d5ac:	4b48      	ldr	r3, [pc, #288]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d5ae:	691b      	ldr	r3, [r3, #16]
 801d5b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d5b4:	2b18      	cmp	r3, #24
 801d5b6:	f000 80bd 	beq.w	801d734 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801d5ba:	687b      	ldr	r3, [r7, #4]
 801d5bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d5be:	2b02      	cmp	r3, #2
 801d5c0:	f040 809e 	bne.w	801d700 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d5c4:	4b42      	ldr	r3, [pc, #264]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d5c6:	681b      	ldr	r3, [r3, #0]
 801d5c8:	4a41      	ldr	r2, [pc, #260]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d5ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d5ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d5d0:	f7fd f8b0 	bl	801a734 <HAL_GetTick>
 801d5d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d5d6:	e008      	b.n	801d5ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d5d8:	f7fd f8ac 	bl	801a734 <HAL_GetTick>
 801d5dc:	4602      	mov	r2, r0
 801d5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d5e0:	1ad3      	subs	r3, r2, r3
 801d5e2:	2b02      	cmp	r3, #2
 801d5e4:	d901      	bls.n	801d5ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801d5e6:	2303      	movs	r3, #3
 801d5e8:	e10e      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d5ea:	4b39      	ldr	r3, [pc, #228]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d5ec:	681b      	ldr	r3, [r3, #0]
 801d5ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d5f2:	2b00      	cmp	r3, #0
 801d5f4:	d1f0      	bne.n	801d5d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801d5f6:	4b36      	ldr	r3, [pc, #216]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d5f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801d5fa:	4b37      	ldr	r3, [pc, #220]	@ (801d6d8 <HAL_RCC_OscConfig+0x774>)
 801d5fc:	4013      	ands	r3, r2
 801d5fe:	687a      	ldr	r2, [r7, #4]
 801d600:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801d602:	687a      	ldr	r2, [r7, #4]
 801d604:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801d606:	0112      	lsls	r2, r2, #4
 801d608:	430a      	orrs	r2, r1
 801d60a:	4931      	ldr	r1, [pc, #196]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d60c:	4313      	orrs	r3, r2
 801d60e:	628b      	str	r3, [r1, #40]	@ 0x28
 801d610:	687b      	ldr	r3, [r7, #4]
 801d612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d614:	3b01      	subs	r3, #1
 801d616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d61a:	687b      	ldr	r3, [r7, #4]
 801d61c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d61e:	3b01      	subs	r3, #1
 801d620:	025b      	lsls	r3, r3, #9
 801d622:	b29b      	uxth	r3, r3
 801d624:	431a      	orrs	r2, r3
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d62a:	3b01      	subs	r3, #1
 801d62c:	041b      	lsls	r3, r3, #16
 801d62e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801d632:	431a      	orrs	r2, r3
 801d634:	687b      	ldr	r3, [r7, #4]
 801d636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d638:	3b01      	subs	r3, #1
 801d63a:	061b      	lsls	r3, r3, #24
 801d63c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801d640:	4923      	ldr	r1, [pc, #140]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d642:	4313      	orrs	r3, r2
 801d644:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801d646:	4b22      	ldr	r3, [pc, #136]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d64a:	4a21      	ldr	r2, [pc, #132]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d64c:	f023 0301 	bic.w	r3, r3, #1
 801d650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d652:	4b1f      	ldr	r3, [pc, #124]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d656:	4b21      	ldr	r3, [pc, #132]	@ (801d6dc <HAL_RCC_OscConfig+0x778>)
 801d658:	4013      	ands	r3, r2
 801d65a:	687a      	ldr	r2, [r7, #4]
 801d65c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d65e:	00d2      	lsls	r2, r2, #3
 801d660:	491b      	ldr	r1, [pc, #108]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d662:	4313      	orrs	r3, r2
 801d664:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801d666:	4b1a      	ldr	r3, [pc, #104]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d66a:	f023 020c 	bic.w	r2, r3, #12
 801d66e:	687b      	ldr	r3, [r7, #4]
 801d670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d672:	4917      	ldr	r1, [pc, #92]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d674:	4313      	orrs	r3, r2
 801d676:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801d678:	4b15      	ldr	r3, [pc, #84]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d67c:	f023 0202 	bic.w	r2, r3, #2
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d684:	4912      	ldr	r1, [pc, #72]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d686:	4313      	orrs	r3, r2
 801d688:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801d68a:	4b11      	ldr	r3, [pc, #68]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d68c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d68e:	4a10      	ldr	r2, [pc, #64]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d690:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d694:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d696:	4b0e      	ldr	r3, [pc, #56]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d69a:	4a0d      	ldr	r2, [pc, #52]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d69c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d6a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801d6a2:	4b0b      	ldr	r3, [pc, #44]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d6a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6a6:	4a0a      	ldr	r2, [pc, #40]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d6a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801d6ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801d6ae:	4b08      	ldr	r3, [pc, #32]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d6b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6b2:	4a07      	ldr	r2, [pc, #28]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d6b4:	f043 0301 	orr.w	r3, r3, #1
 801d6b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801d6ba:	4b05      	ldr	r3, [pc, #20]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d6bc:	681b      	ldr	r3, [r3, #0]
 801d6be:	4a04      	ldr	r2, [pc, #16]	@ (801d6d0 <HAL_RCC_OscConfig+0x76c>)
 801d6c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801d6c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d6c6:	f7fd f835 	bl	801a734 <HAL_GetTick>
 801d6ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d6cc:	e011      	b.n	801d6f2 <HAL_RCC_OscConfig+0x78e>
 801d6ce:	bf00      	nop
 801d6d0:	58024400 	.word	0x58024400
 801d6d4:	58024800 	.word	0x58024800
 801d6d8:	fffffc0c 	.word	0xfffffc0c
 801d6dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d6e0:	f7fd f828 	bl	801a734 <HAL_GetTick>
 801d6e4:	4602      	mov	r2, r0
 801d6e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d6e8:	1ad3      	subs	r3, r2, r3
 801d6ea:	2b02      	cmp	r3, #2
 801d6ec:	d901      	bls.n	801d6f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801d6ee:	2303      	movs	r3, #3
 801d6f0:	e08a      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d6f2:	4b47      	ldr	r3, [pc, #284]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d6fa:	2b00      	cmp	r3, #0
 801d6fc:	d0f0      	beq.n	801d6e0 <HAL_RCC_OscConfig+0x77c>
 801d6fe:	e082      	b.n	801d806 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801d700:	4b43      	ldr	r3, [pc, #268]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	4a42      	ldr	r2, [pc, #264]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d706:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801d70a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d70c:	f7fd f812 	bl	801a734 <HAL_GetTick>
 801d710:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d712:	e008      	b.n	801d726 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801d714:	f7fd f80e 	bl	801a734 <HAL_GetTick>
 801d718:	4602      	mov	r2, r0
 801d71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d71c:	1ad3      	subs	r3, r2, r3
 801d71e:	2b02      	cmp	r3, #2
 801d720:	d901      	bls.n	801d726 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801d722:	2303      	movs	r3, #3
 801d724:	e070      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801d726:	4b3a      	ldr	r3, [pc, #232]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d728:	681b      	ldr	r3, [r3, #0]
 801d72a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d72e:	2b00      	cmp	r3, #0
 801d730:	d1f0      	bne.n	801d714 <HAL_RCC_OscConfig+0x7b0>
 801d732:	e068      	b.n	801d806 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801d734:	4b36      	ldr	r3, [pc, #216]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d738:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801d73a:	4b35      	ldr	r3, [pc, #212]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d73c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d73e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801d744:	2b01      	cmp	r3, #1
 801d746:	d031      	beq.n	801d7ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d748:	693b      	ldr	r3, [r7, #16]
 801d74a:	f003 0203 	and.w	r2, r3, #3
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801d752:	429a      	cmp	r2, r3
 801d754:	d12a      	bne.n	801d7ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d756:	693b      	ldr	r3, [r7, #16]
 801d758:	091b      	lsrs	r3, r3, #4
 801d75a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801d75e:	687b      	ldr	r3, [r7, #4]
 801d760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801d762:	429a      	cmp	r2, r3
 801d764:	d122      	bne.n	801d7ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d766:	68fb      	ldr	r3, [r7, #12]
 801d768:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d770:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801d772:	429a      	cmp	r2, r3
 801d774:	d11a      	bne.n	801d7ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	0a5b      	lsrs	r3, r3, #9
 801d77a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d77e:	687b      	ldr	r3, [r7, #4]
 801d780:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d782:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801d784:	429a      	cmp	r2, r3
 801d786:	d111      	bne.n	801d7ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d788:	68fb      	ldr	r3, [r7, #12]
 801d78a:	0c1b      	lsrs	r3, r3, #16
 801d78c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d794:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801d796:	429a      	cmp	r2, r3
 801d798:	d108      	bne.n	801d7ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801d79a:	68fb      	ldr	r3, [r7, #12]
 801d79c:	0e1b      	lsrs	r3, r3, #24
 801d79e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801d7a2:	687b      	ldr	r3, [r7, #4]
 801d7a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d7a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801d7a8:	429a      	cmp	r2, r3
 801d7aa:	d001      	beq.n	801d7b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801d7ac:	2301      	movs	r3, #1
 801d7ae:	e02b      	b.n	801d808 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801d7b0:	4b17      	ldr	r3, [pc, #92]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d7b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d7b4:	08db      	lsrs	r3, r3, #3
 801d7b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d7ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801d7bc:	687b      	ldr	r3, [r7, #4]
 801d7be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d7c0:	693a      	ldr	r2, [r7, #16]
 801d7c2:	429a      	cmp	r2, r3
 801d7c4:	d01f      	beq.n	801d806 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801d7c6:	4b12      	ldr	r3, [pc, #72]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d7c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7ca:	4a11      	ldr	r2, [pc, #68]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d7cc:	f023 0301 	bic.w	r3, r3, #1
 801d7d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801d7d2:	f7fc ffaf 	bl	801a734 <HAL_GetTick>
 801d7d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801d7d8:	bf00      	nop
 801d7da:	f7fc ffab 	bl	801a734 <HAL_GetTick>
 801d7de:	4602      	mov	r2, r0
 801d7e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801d7e2:	4293      	cmp	r3, r2
 801d7e4:	d0f9      	beq.n	801d7da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801d7e6:	4b0a      	ldr	r3, [pc, #40]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d7e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801d7ea:	4b0a      	ldr	r3, [pc, #40]	@ (801d814 <HAL_RCC_OscConfig+0x8b0>)
 801d7ec:	4013      	ands	r3, r2
 801d7ee:	687a      	ldr	r2, [r7, #4]
 801d7f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801d7f2:	00d2      	lsls	r2, r2, #3
 801d7f4:	4906      	ldr	r1, [pc, #24]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d7f6:	4313      	orrs	r3, r2
 801d7f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801d7fa:	4b05      	ldr	r3, [pc, #20]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d7fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7fe:	4a04      	ldr	r2, [pc, #16]	@ (801d810 <HAL_RCC_OscConfig+0x8ac>)
 801d800:	f043 0301 	orr.w	r3, r3, #1
 801d804:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801d806:	2300      	movs	r3, #0
}
 801d808:	4618      	mov	r0, r3
 801d80a:	3730      	adds	r7, #48	@ 0x30
 801d80c:	46bd      	mov	sp, r7
 801d80e:	bd80      	pop	{r7, pc}
 801d810:	58024400 	.word	0x58024400
 801d814:	ffff0007 	.word	0xffff0007

0801d818 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801d818:	b580      	push	{r7, lr}
 801d81a:	b086      	sub	sp, #24
 801d81c:	af00      	add	r7, sp, #0
 801d81e:	6078      	str	r0, [r7, #4]
 801d820:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	2b00      	cmp	r3, #0
 801d826:	d101      	bne.n	801d82c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801d828:	2301      	movs	r3, #1
 801d82a:	e19c      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801d82c:	4b8a      	ldr	r3, [pc, #552]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	f003 030f 	and.w	r3, r3, #15
 801d834:	683a      	ldr	r2, [r7, #0]
 801d836:	429a      	cmp	r2, r3
 801d838:	d910      	bls.n	801d85c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d83a:	4b87      	ldr	r3, [pc, #540]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	f023 020f 	bic.w	r2, r3, #15
 801d842:	4985      	ldr	r1, [pc, #532]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801d844:	683b      	ldr	r3, [r7, #0]
 801d846:	4313      	orrs	r3, r2
 801d848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d84a:	4b83      	ldr	r3, [pc, #524]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801d84c:	681b      	ldr	r3, [r3, #0]
 801d84e:	f003 030f 	and.w	r3, r3, #15
 801d852:	683a      	ldr	r2, [r7, #0]
 801d854:	429a      	cmp	r2, r3
 801d856:	d001      	beq.n	801d85c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801d858:	2301      	movs	r3, #1
 801d85a:	e184      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d85c:	687b      	ldr	r3, [r7, #4]
 801d85e:	681b      	ldr	r3, [r3, #0]
 801d860:	f003 0304 	and.w	r3, r3, #4
 801d864:	2b00      	cmp	r3, #0
 801d866:	d010      	beq.n	801d88a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d868:	687b      	ldr	r3, [r7, #4]
 801d86a:	691a      	ldr	r2, [r3, #16]
 801d86c:	4b7b      	ldr	r3, [pc, #492]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d86e:	699b      	ldr	r3, [r3, #24]
 801d870:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d874:	429a      	cmp	r2, r3
 801d876:	d908      	bls.n	801d88a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d878:	4b78      	ldr	r3, [pc, #480]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d87a:	699b      	ldr	r3, [r3, #24]
 801d87c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d880:	687b      	ldr	r3, [r7, #4]
 801d882:	691b      	ldr	r3, [r3, #16]
 801d884:	4975      	ldr	r1, [pc, #468]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d886:	4313      	orrs	r3, r2
 801d888:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d88a:	687b      	ldr	r3, [r7, #4]
 801d88c:	681b      	ldr	r3, [r3, #0]
 801d88e:	f003 0308 	and.w	r3, r3, #8
 801d892:	2b00      	cmp	r3, #0
 801d894:	d010      	beq.n	801d8b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d896:	687b      	ldr	r3, [r7, #4]
 801d898:	695a      	ldr	r2, [r3, #20]
 801d89a:	4b70      	ldr	r3, [pc, #448]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d89c:	69db      	ldr	r3, [r3, #28]
 801d89e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d8a2:	429a      	cmp	r2, r3
 801d8a4:	d908      	bls.n	801d8b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d8a6:	4b6d      	ldr	r3, [pc, #436]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d8a8:	69db      	ldr	r3, [r3, #28]
 801d8aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d8ae:	687b      	ldr	r3, [r7, #4]
 801d8b0:	695b      	ldr	r3, [r3, #20]
 801d8b2:	496a      	ldr	r1, [pc, #424]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d8b4:	4313      	orrs	r3, r2
 801d8b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	681b      	ldr	r3, [r3, #0]
 801d8bc:	f003 0310 	and.w	r3, r3, #16
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	d010      	beq.n	801d8e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	699a      	ldr	r2, [r3, #24]
 801d8c8:	4b64      	ldr	r3, [pc, #400]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d8ca:	69db      	ldr	r3, [r3, #28]
 801d8cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d8d0:	429a      	cmp	r2, r3
 801d8d2:	d908      	bls.n	801d8e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d8d4:	4b61      	ldr	r3, [pc, #388]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d8d6:	69db      	ldr	r3, [r3, #28]
 801d8d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	699b      	ldr	r3, [r3, #24]
 801d8e0:	495e      	ldr	r1, [pc, #376]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d8e2:	4313      	orrs	r3, r2
 801d8e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	f003 0320 	and.w	r3, r3, #32
 801d8ee:	2b00      	cmp	r3, #0
 801d8f0:	d010      	beq.n	801d914 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	69da      	ldr	r2, [r3, #28]
 801d8f6:	4b59      	ldr	r3, [pc, #356]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d8f8:	6a1b      	ldr	r3, [r3, #32]
 801d8fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d8fe:	429a      	cmp	r2, r3
 801d900:	d908      	bls.n	801d914 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d902:	4b56      	ldr	r3, [pc, #344]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d904:	6a1b      	ldr	r3, [r3, #32]
 801d906:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d90a:	687b      	ldr	r3, [r7, #4]
 801d90c:	69db      	ldr	r3, [r3, #28]
 801d90e:	4953      	ldr	r1, [pc, #332]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d910:	4313      	orrs	r3, r2
 801d912:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	f003 0302 	and.w	r3, r3, #2
 801d91c:	2b00      	cmp	r3, #0
 801d91e:	d010      	beq.n	801d942 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d920:	687b      	ldr	r3, [r7, #4]
 801d922:	68da      	ldr	r2, [r3, #12]
 801d924:	4b4d      	ldr	r3, [pc, #308]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d926:	699b      	ldr	r3, [r3, #24]
 801d928:	f003 030f 	and.w	r3, r3, #15
 801d92c:	429a      	cmp	r2, r3
 801d92e:	d908      	bls.n	801d942 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d930:	4b4a      	ldr	r3, [pc, #296]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d932:	699b      	ldr	r3, [r3, #24]
 801d934:	f023 020f 	bic.w	r2, r3, #15
 801d938:	687b      	ldr	r3, [r7, #4]
 801d93a:	68db      	ldr	r3, [r3, #12]
 801d93c:	4947      	ldr	r1, [pc, #284]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d93e:	4313      	orrs	r3, r2
 801d940:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	681b      	ldr	r3, [r3, #0]
 801d946:	f003 0301 	and.w	r3, r3, #1
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d055      	beq.n	801d9fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801d94e:	4b43      	ldr	r3, [pc, #268]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d950:	699b      	ldr	r3, [r3, #24]
 801d952:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801d956:	687b      	ldr	r3, [r7, #4]
 801d958:	689b      	ldr	r3, [r3, #8]
 801d95a:	4940      	ldr	r1, [pc, #256]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d95c:	4313      	orrs	r3, r2
 801d95e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	685b      	ldr	r3, [r3, #4]
 801d964:	2b02      	cmp	r3, #2
 801d966:	d107      	bne.n	801d978 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d968:	4b3c      	ldr	r3, [pc, #240]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d96a:	681b      	ldr	r3, [r3, #0]
 801d96c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d970:	2b00      	cmp	r3, #0
 801d972:	d121      	bne.n	801d9b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d974:	2301      	movs	r3, #1
 801d976:	e0f6      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	685b      	ldr	r3, [r3, #4]
 801d97c:	2b03      	cmp	r3, #3
 801d97e:	d107      	bne.n	801d990 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d980:	4b36      	ldr	r3, [pc, #216]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d982:	681b      	ldr	r3, [r3, #0]
 801d984:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d115      	bne.n	801d9b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d98c:	2301      	movs	r3, #1
 801d98e:	e0ea      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801d990:	687b      	ldr	r3, [r7, #4]
 801d992:	685b      	ldr	r3, [r3, #4]
 801d994:	2b01      	cmp	r3, #1
 801d996:	d107      	bne.n	801d9a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d998:	4b30      	ldr	r3, [pc, #192]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d109      	bne.n	801d9b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d9a4:	2301      	movs	r3, #1
 801d9a6:	e0de      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d9a8:	4b2c      	ldr	r3, [pc, #176]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d9aa:	681b      	ldr	r3, [r3, #0]
 801d9ac:	f003 0304 	and.w	r3, r3, #4
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d101      	bne.n	801d9b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d9b4:	2301      	movs	r3, #1
 801d9b6:	e0d6      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d9b8:	4b28      	ldr	r3, [pc, #160]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d9ba:	691b      	ldr	r3, [r3, #16]
 801d9bc:	f023 0207 	bic.w	r2, r3, #7
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	685b      	ldr	r3, [r3, #4]
 801d9c4:	4925      	ldr	r1, [pc, #148]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d9c6:	4313      	orrs	r3, r2
 801d9c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d9ca:	f7fc feb3 	bl	801a734 <HAL_GetTick>
 801d9ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d9d0:	e00a      	b.n	801d9e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d9d2:	f7fc feaf 	bl	801a734 <HAL_GetTick>
 801d9d6:	4602      	mov	r2, r0
 801d9d8:	697b      	ldr	r3, [r7, #20]
 801d9da:	1ad3      	subs	r3, r2, r3
 801d9dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d9e0:	4293      	cmp	r3, r2
 801d9e2:	d901      	bls.n	801d9e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801d9e4:	2303      	movs	r3, #3
 801d9e6:	e0be      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d9e8:	4b1c      	ldr	r3, [pc, #112]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801d9ea:	691b      	ldr	r3, [r3, #16]
 801d9ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801d9f0:	687b      	ldr	r3, [r7, #4]
 801d9f2:	685b      	ldr	r3, [r3, #4]
 801d9f4:	00db      	lsls	r3, r3, #3
 801d9f6:	429a      	cmp	r2, r3
 801d9f8:	d1eb      	bne.n	801d9d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d9fa:	687b      	ldr	r3, [r7, #4]
 801d9fc:	681b      	ldr	r3, [r3, #0]
 801d9fe:	f003 0302 	and.w	r3, r3, #2
 801da02:	2b00      	cmp	r3, #0
 801da04:	d010      	beq.n	801da28 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801da06:	687b      	ldr	r3, [r7, #4]
 801da08:	68da      	ldr	r2, [r3, #12]
 801da0a:	4b14      	ldr	r3, [pc, #80]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801da0c:	699b      	ldr	r3, [r3, #24]
 801da0e:	f003 030f 	and.w	r3, r3, #15
 801da12:	429a      	cmp	r2, r3
 801da14:	d208      	bcs.n	801da28 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801da16:	4b11      	ldr	r3, [pc, #68]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801da18:	699b      	ldr	r3, [r3, #24]
 801da1a:	f023 020f 	bic.w	r2, r3, #15
 801da1e:	687b      	ldr	r3, [r7, #4]
 801da20:	68db      	ldr	r3, [r3, #12]
 801da22:	490e      	ldr	r1, [pc, #56]	@ (801da5c <HAL_RCC_ClockConfig+0x244>)
 801da24:	4313      	orrs	r3, r2
 801da26:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801da28:	4b0b      	ldr	r3, [pc, #44]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	f003 030f 	and.w	r3, r3, #15
 801da30:	683a      	ldr	r2, [r7, #0]
 801da32:	429a      	cmp	r2, r3
 801da34:	d214      	bcs.n	801da60 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801da36:	4b08      	ldr	r3, [pc, #32]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801da38:	681b      	ldr	r3, [r3, #0]
 801da3a:	f023 020f 	bic.w	r2, r3, #15
 801da3e:	4906      	ldr	r1, [pc, #24]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801da40:	683b      	ldr	r3, [r7, #0]
 801da42:	4313      	orrs	r3, r2
 801da44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801da46:	4b04      	ldr	r3, [pc, #16]	@ (801da58 <HAL_RCC_ClockConfig+0x240>)
 801da48:	681b      	ldr	r3, [r3, #0]
 801da4a:	f003 030f 	and.w	r3, r3, #15
 801da4e:	683a      	ldr	r2, [r7, #0]
 801da50:	429a      	cmp	r2, r3
 801da52:	d005      	beq.n	801da60 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801da54:	2301      	movs	r3, #1
 801da56:	e086      	b.n	801db66 <HAL_RCC_ClockConfig+0x34e>
 801da58:	52002000 	.word	0x52002000
 801da5c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	f003 0304 	and.w	r3, r3, #4
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d010      	beq.n	801da8e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801da6c:	687b      	ldr	r3, [r7, #4]
 801da6e:	691a      	ldr	r2, [r3, #16]
 801da70:	4b3f      	ldr	r3, [pc, #252]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801da72:	699b      	ldr	r3, [r3, #24]
 801da74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801da78:	429a      	cmp	r2, r3
 801da7a:	d208      	bcs.n	801da8e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801da7c:	4b3c      	ldr	r3, [pc, #240]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801da7e:	699b      	ldr	r3, [r3, #24]
 801da80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801da84:	687b      	ldr	r3, [r7, #4]
 801da86:	691b      	ldr	r3, [r3, #16]
 801da88:	4939      	ldr	r1, [pc, #228]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801da8a:	4313      	orrs	r3, r2
 801da8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	681b      	ldr	r3, [r3, #0]
 801da92:	f003 0308 	and.w	r3, r3, #8
 801da96:	2b00      	cmp	r3, #0
 801da98:	d010      	beq.n	801dabc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	695a      	ldr	r2, [r3, #20]
 801da9e:	4b34      	ldr	r3, [pc, #208]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801daa0:	69db      	ldr	r3, [r3, #28]
 801daa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801daa6:	429a      	cmp	r2, r3
 801daa8:	d208      	bcs.n	801dabc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801daaa:	4b31      	ldr	r3, [pc, #196]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801daac:	69db      	ldr	r3, [r3, #28]
 801daae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801dab2:	687b      	ldr	r3, [r7, #4]
 801dab4:	695b      	ldr	r3, [r3, #20]
 801dab6:	492e      	ldr	r1, [pc, #184]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801dab8:	4313      	orrs	r3, r2
 801daba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801dabc:	687b      	ldr	r3, [r7, #4]
 801dabe:	681b      	ldr	r3, [r3, #0]
 801dac0:	f003 0310 	and.w	r3, r3, #16
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d010      	beq.n	801daea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	699a      	ldr	r2, [r3, #24]
 801dacc:	4b28      	ldr	r3, [pc, #160]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801dace:	69db      	ldr	r3, [r3, #28]
 801dad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801dad4:	429a      	cmp	r2, r3
 801dad6:	d208      	bcs.n	801daea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801dad8:	4b25      	ldr	r3, [pc, #148]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801dada:	69db      	ldr	r3, [r3, #28]
 801dadc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801dae0:	687b      	ldr	r3, [r7, #4]
 801dae2:	699b      	ldr	r3, [r3, #24]
 801dae4:	4922      	ldr	r1, [pc, #136]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801dae6:	4313      	orrs	r3, r2
 801dae8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801daea:	687b      	ldr	r3, [r7, #4]
 801daec:	681b      	ldr	r3, [r3, #0]
 801daee:	f003 0320 	and.w	r3, r3, #32
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	d010      	beq.n	801db18 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801daf6:	687b      	ldr	r3, [r7, #4]
 801daf8:	69da      	ldr	r2, [r3, #28]
 801dafa:	4b1d      	ldr	r3, [pc, #116]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801dafc:	6a1b      	ldr	r3, [r3, #32]
 801dafe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801db02:	429a      	cmp	r2, r3
 801db04:	d208      	bcs.n	801db18 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801db06:	4b1a      	ldr	r3, [pc, #104]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801db08:	6a1b      	ldr	r3, [r3, #32]
 801db0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	69db      	ldr	r3, [r3, #28]
 801db12:	4917      	ldr	r1, [pc, #92]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801db14:	4313      	orrs	r3, r2
 801db16:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801db18:	f000 f834 	bl	801db84 <HAL_RCC_GetSysClockFreq>
 801db1c:	4602      	mov	r2, r0
 801db1e:	4b14      	ldr	r3, [pc, #80]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801db20:	699b      	ldr	r3, [r3, #24]
 801db22:	0a1b      	lsrs	r3, r3, #8
 801db24:	f003 030f 	and.w	r3, r3, #15
 801db28:	4912      	ldr	r1, [pc, #72]	@ (801db74 <HAL_RCC_ClockConfig+0x35c>)
 801db2a:	5ccb      	ldrb	r3, [r1, r3]
 801db2c:	f003 031f 	and.w	r3, r3, #31
 801db30:	fa22 f303 	lsr.w	r3, r2, r3
 801db34:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801db36:	4b0e      	ldr	r3, [pc, #56]	@ (801db70 <HAL_RCC_ClockConfig+0x358>)
 801db38:	699b      	ldr	r3, [r3, #24]
 801db3a:	f003 030f 	and.w	r3, r3, #15
 801db3e:	4a0d      	ldr	r2, [pc, #52]	@ (801db74 <HAL_RCC_ClockConfig+0x35c>)
 801db40:	5cd3      	ldrb	r3, [r2, r3]
 801db42:	f003 031f 	and.w	r3, r3, #31
 801db46:	693a      	ldr	r2, [r7, #16]
 801db48:	fa22 f303 	lsr.w	r3, r2, r3
 801db4c:	4a0a      	ldr	r2, [pc, #40]	@ (801db78 <HAL_RCC_ClockConfig+0x360>)
 801db4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801db50:	4a0a      	ldr	r2, [pc, #40]	@ (801db7c <HAL_RCC_ClockConfig+0x364>)
 801db52:	693b      	ldr	r3, [r7, #16]
 801db54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801db56:	4b0a      	ldr	r3, [pc, #40]	@ (801db80 <HAL_RCC_ClockConfig+0x368>)
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	4618      	mov	r0, r3
 801db5c:	f7fc fda0 	bl	801a6a0 <HAL_InitTick>
 801db60:	4603      	mov	r3, r0
 801db62:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801db64:	7bfb      	ldrb	r3, [r7, #15]
}
 801db66:	4618      	mov	r0, r3
 801db68:	3718      	adds	r7, #24
 801db6a:	46bd      	mov	sp, r7
 801db6c:	bd80      	pop	{r7, pc}
 801db6e:	bf00      	nop
 801db70:	58024400 	.word	0x58024400
 801db74:	08027e94 	.word	0x08027e94
 801db78:	20000004 	.word	0x20000004
 801db7c:	20000000 	.word	0x20000000
 801db80:	20000020 	.word	0x20000020

0801db84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801db84:	b480      	push	{r7}
 801db86:	b089      	sub	sp, #36	@ 0x24
 801db88:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801db8a:	4bb3      	ldr	r3, [pc, #716]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801db8c:	691b      	ldr	r3, [r3, #16]
 801db8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801db92:	2b18      	cmp	r3, #24
 801db94:	f200 8155 	bhi.w	801de42 <HAL_RCC_GetSysClockFreq+0x2be>
 801db98:	a201      	add	r2, pc, #4	@ (adr r2, 801dba0 <HAL_RCC_GetSysClockFreq+0x1c>)
 801db9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801db9e:	bf00      	nop
 801dba0:	0801dc05 	.word	0x0801dc05
 801dba4:	0801de43 	.word	0x0801de43
 801dba8:	0801de43 	.word	0x0801de43
 801dbac:	0801de43 	.word	0x0801de43
 801dbb0:	0801de43 	.word	0x0801de43
 801dbb4:	0801de43 	.word	0x0801de43
 801dbb8:	0801de43 	.word	0x0801de43
 801dbbc:	0801de43 	.word	0x0801de43
 801dbc0:	0801dc2b 	.word	0x0801dc2b
 801dbc4:	0801de43 	.word	0x0801de43
 801dbc8:	0801de43 	.word	0x0801de43
 801dbcc:	0801de43 	.word	0x0801de43
 801dbd0:	0801de43 	.word	0x0801de43
 801dbd4:	0801de43 	.word	0x0801de43
 801dbd8:	0801de43 	.word	0x0801de43
 801dbdc:	0801de43 	.word	0x0801de43
 801dbe0:	0801dc31 	.word	0x0801dc31
 801dbe4:	0801de43 	.word	0x0801de43
 801dbe8:	0801de43 	.word	0x0801de43
 801dbec:	0801de43 	.word	0x0801de43
 801dbf0:	0801de43 	.word	0x0801de43
 801dbf4:	0801de43 	.word	0x0801de43
 801dbf8:	0801de43 	.word	0x0801de43
 801dbfc:	0801de43 	.word	0x0801de43
 801dc00:	0801dc37 	.word	0x0801dc37
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dc04:	4b94      	ldr	r3, [pc, #592]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc06:	681b      	ldr	r3, [r3, #0]
 801dc08:	f003 0320 	and.w	r3, r3, #32
 801dc0c:	2b00      	cmp	r3, #0
 801dc0e:	d009      	beq.n	801dc24 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dc10:	4b91      	ldr	r3, [pc, #580]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc12:	681b      	ldr	r3, [r3, #0]
 801dc14:	08db      	lsrs	r3, r3, #3
 801dc16:	f003 0303 	and.w	r3, r3, #3
 801dc1a:	4a90      	ldr	r2, [pc, #576]	@ (801de5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dc1c:	fa22 f303 	lsr.w	r3, r2, r3
 801dc20:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801dc22:	e111      	b.n	801de48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801dc24:	4b8d      	ldr	r3, [pc, #564]	@ (801de5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dc26:	61bb      	str	r3, [r7, #24]
      break;
 801dc28:	e10e      	b.n	801de48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801dc2a:	4b8d      	ldr	r3, [pc, #564]	@ (801de60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801dc2c:	61bb      	str	r3, [r7, #24]
      break;
 801dc2e:	e10b      	b.n	801de48 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801dc30:	4b8c      	ldr	r3, [pc, #560]	@ (801de64 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801dc32:	61bb      	str	r3, [r7, #24]
      break;
 801dc34:	e108      	b.n	801de48 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dc36:	4b88      	ldr	r3, [pc, #544]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc3a:	f003 0303 	and.w	r3, r3, #3
 801dc3e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801dc40:	4b85      	ldr	r3, [pc, #532]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc44:	091b      	lsrs	r3, r3, #4
 801dc46:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dc4a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801dc4c:	4b82      	ldr	r3, [pc, #520]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dc50:	f003 0301 	and.w	r3, r3, #1
 801dc54:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801dc56:	4b80      	ldr	r3, [pc, #512]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801dc5a:	08db      	lsrs	r3, r3, #3
 801dc5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc60:	68fa      	ldr	r2, [r7, #12]
 801dc62:	fb02 f303 	mul.w	r3, r2, r3
 801dc66:	ee07 3a90 	vmov	s15, r3
 801dc6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc6e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801dc72:	693b      	ldr	r3, [r7, #16]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	f000 80e1 	beq.w	801de3c <HAL_RCC_GetSysClockFreq+0x2b8>
 801dc7a:	697b      	ldr	r3, [r7, #20]
 801dc7c:	2b02      	cmp	r3, #2
 801dc7e:	f000 8083 	beq.w	801dd88 <HAL_RCC_GetSysClockFreq+0x204>
 801dc82:	697b      	ldr	r3, [r7, #20]
 801dc84:	2b02      	cmp	r3, #2
 801dc86:	f200 80a1 	bhi.w	801ddcc <HAL_RCC_GetSysClockFreq+0x248>
 801dc8a:	697b      	ldr	r3, [r7, #20]
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d003      	beq.n	801dc98 <HAL_RCC_GetSysClockFreq+0x114>
 801dc90:	697b      	ldr	r3, [r7, #20]
 801dc92:	2b01      	cmp	r3, #1
 801dc94:	d056      	beq.n	801dd44 <HAL_RCC_GetSysClockFreq+0x1c0>
 801dc96:	e099      	b.n	801ddcc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dc98:	4b6f      	ldr	r3, [pc, #444]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	f003 0320 	and.w	r3, r3, #32
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d02d      	beq.n	801dd00 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dca4:	4b6c      	ldr	r3, [pc, #432]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	08db      	lsrs	r3, r3, #3
 801dcaa:	f003 0303 	and.w	r3, r3, #3
 801dcae:	4a6b      	ldr	r2, [pc, #428]	@ (801de5c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801dcb0:	fa22 f303 	lsr.w	r3, r2, r3
 801dcb4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	ee07 3a90 	vmov	s15, r3
 801dcbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcc0:	693b      	ldr	r3, [r7, #16]
 801dcc2:	ee07 3a90 	vmov	s15, r3
 801dcc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dcce:	4b62      	ldr	r3, [pc, #392]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dcd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dcd6:	ee07 3a90 	vmov	s15, r3
 801dcda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcde:	ed97 6a02 	vldr	s12, [r7, #8]
 801dce2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801de68 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dcea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dcee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dcf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dcfa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801dcfe:	e087      	b.n	801de10 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd00:	693b      	ldr	r3, [r7, #16]
 801dd02:	ee07 3a90 	vmov	s15, r3
 801dd06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd0a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801de6c <HAL_RCC_GetSysClockFreq+0x2e8>
 801dd0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd12:	4b51      	ldr	r3, [pc, #324]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd1a:	ee07 3a90 	vmov	s15, r3
 801dd1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd22:	ed97 6a02 	vldr	s12, [r7, #8]
 801dd26:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801de68 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dd2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dd42:	e065      	b.n	801de10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd44:	693b      	ldr	r3, [r7, #16]
 801dd46:	ee07 3a90 	vmov	s15, r3
 801dd4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd4e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801de70 <HAL_RCC_GetSysClockFreq+0x2ec>
 801dd52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd56:	4b40      	ldr	r3, [pc, #256]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd5e:	ee07 3a90 	vmov	s15, r3
 801dd62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd66:	ed97 6a02 	vldr	s12, [r7, #8]
 801dd6a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801de68 <HAL_RCC_GetSysClockFreq+0x2e4>
 801dd6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dd7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801dd86:	e043      	b.n	801de10 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dd88:	693b      	ldr	r3, [r7, #16]
 801dd8a:	ee07 3a90 	vmov	s15, r3
 801dd8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd92:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801de74 <HAL_RCC_GetSysClockFreq+0x2f0>
 801dd96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd9a:	4b2f      	ldr	r3, [pc, #188]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dd9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dd9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dda2:	ee07 3a90 	vmov	s15, r3
 801dda6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddaa:	ed97 6a02 	vldr	s12, [r7, #8]
 801ddae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801de68 <HAL_RCC_GetSysClockFreq+0x2e4>
 801ddb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ddb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ddba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ddbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801ddca:	e021      	b.n	801de10 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ddcc:	693b      	ldr	r3, [r7, #16]
 801ddce:	ee07 3a90 	vmov	s15, r3
 801ddd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddd6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801de70 <HAL_RCC_GetSysClockFreq+0x2ec>
 801ddda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddde:	4b1e      	ldr	r3, [pc, #120]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801dde0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dde2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dde6:	ee07 3a90 	vmov	s15, r3
 801ddea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddee:	ed97 6a02 	vldr	s12, [r7, #8]
 801ddf2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801de68 <HAL_RCC_GetSysClockFreq+0x2e4>
 801ddf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ddfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ddfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de06:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801de0e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801de10:	4b11      	ldr	r3, [pc, #68]	@ (801de58 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801de12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801de14:	0a5b      	lsrs	r3, r3, #9
 801de16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801de1a:	3301      	adds	r3, #1
 801de1c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801de1e:	683b      	ldr	r3, [r7, #0]
 801de20:	ee07 3a90 	vmov	s15, r3
 801de24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801de28:	edd7 6a07 	vldr	s13, [r7, #28]
 801de2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801de30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de34:	ee17 3a90 	vmov	r3, s15
 801de38:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801de3a:	e005      	b.n	801de48 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801de3c:	2300      	movs	r3, #0
 801de3e:	61bb      	str	r3, [r7, #24]
      break;
 801de40:	e002      	b.n	801de48 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801de42:	4b07      	ldr	r3, [pc, #28]	@ (801de60 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801de44:	61bb      	str	r3, [r7, #24]
      break;
 801de46:	bf00      	nop
  }

  return sysclockfreq;
 801de48:	69bb      	ldr	r3, [r7, #24]
}
 801de4a:	4618      	mov	r0, r3
 801de4c:	3724      	adds	r7, #36	@ 0x24
 801de4e:	46bd      	mov	sp, r7
 801de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de54:	4770      	bx	lr
 801de56:	bf00      	nop
 801de58:	58024400 	.word	0x58024400
 801de5c:	03d09000 	.word	0x03d09000
 801de60:	003d0900 	.word	0x003d0900
 801de64:	017d7840 	.word	0x017d7840
 801de68:	46000000 	.word	0x46000000
 801de6c:	4c742400 	.word	0x4c742400
 801de70:	4a742400 	.word	0x4a742400
 801de74:	4bbebc20 	.word	0x4bbebc20

0801de78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801de78:	b580      	push	{r7, lr}
 801de7a:	b082      	sub	sp, #8
 801de7c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801de7e:	f7ff fe81 	bl	801db84 <HAL_RCC_GetSysClockFreq>
 801de82:	4602      	mov	r2, r0
 801de84:	4b10      	ldr	r3, [pc, #64]	@ (801dec8 <HAL_RCC_GetHCLKFreq+0x50>)
 801de86:	699b      	ldr	r3, [r3, #24]
 801de88:	0a1b      	lsrs	r3, r3, #8
 801de8a:	f003 030f 	and.w	r3, r3, #15
 801de8e:	490f      	ldr	r1, [pc, #60]	@ (801decc <HAL_RCC_GetHCLKFreq+0x54>)
 801de90:	5ccb      	ldrb	r3, [r1, r3]
 801de92:	f003 031f 	and.w	r3, r3, #31
 801de96:	fa22 f303 	lsr.w	r3, r2, r3
 801de9a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801de9c:	4b0a      	ldr	r3, [pc, #40]	@ (801dec8 <HAL_RCC_GetHCLKFreq+0x50>)
 801de9e:	699b      	ldr	r3, [r3, #24]
 801dea0:	f003 030f 	and.w	r3, r3, #15
 801dea4:	4a09      	ldr	r2, [pc, #36]	@ (801decc <HAL_RCC_GetHCLKFreq+0x54>)
 801dea6:	5cd3      	ldrb	r3, [r2, r3]
 801dea8:	f003 031f 	and.w	r3, r3, #31
 801deac:	687a      	ldr	r2, [r7, #4]
 801deae:	fa22 f303 	lsr.w	r3, r2, r3
 801deb2:	4a07      	ldr	r2, [pc, #28]	@ (801ded0 <HAL_RCC_GetHCLKFreq+0x58>)
 801deb4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801deb6:	4a07      	ldr	r2, [pc, #28]	@ (801ded4 <HAL_RCC_GetHCLKFreq+0x5c>)
 801deb8:	687b      	ldr	r3, [r7, #4]
 801deba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801debc:	4b04      	ldr	r3, [pc, #16]	@ (801ded0 <HAL_RCC_GetHCLKFreq+0x58>)
 801debe:	681b      	ldr	r3, [r3, #0]
}
 801dec0:	4618      	mov	r0, r3
 801dec2:	3708      	adds	r7, #8
 801dec4:	46bd      	mov	sp, r7
 801dec6:	bd80      	pop	{r7, pc}
 801dec8:	58024400 	.word	0x58024400
 801decc:	08027e94 	.word	0x08027e94
 801ded0:	20000004 	.word	0x20000004
 801ded4:	20000000 	.word	0x20000000

0801ded8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ded8:	b580      	push	{r7, lr}
 801deda:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801dedc:	f7ff ffcc 	bl	801de78 <HAL_RCC_GetHCLKFreq>
 801dee0:	4602      	mov	r2, r0
 801dee2:	4b06      	ldr	r3, [pc, #24]	@ (801defc <HAL_RCC_GetPCLK1Freq+0x24>)
 801dee4:	69db      	ldr	r3, [r3, #28]
 801dee6:	091b      	lsrs	r3, r3, #4
 801dee8:	f003 0307 	and.w	r3, r3, #7
 801deec:	4904      	ldr	r1, [pc, #16]	@ (801df00 <HAL_RCC_GetPCLK1Freq+0x28>)
 801deee:	5ccb      	ldrb	r3, [r1, r3]
 801def0:	f003 031f 	and.w	r3, r3, #31
 801def4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801def8:	4618      	mov	r0, r3
 801defa:	bd80      	pop	{r7, pc}
 801defc:	58024400 	.word	0x58024400
 801df00:	08027e94 	.word	0x08027e94

0801df04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801df04:	b580      	push	{r7, lr}
 801df06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801df08:	f7ff ffb6 	bl	801de78 <HAL_RCC_GetHCLKFreq>
 801df0c:	4602      	mov	r2, r0
 801df0e:	4b06      	ldr	r3, [pc, #24]	@ (801df28 <HAL_RCC_GetPCLK2Freq+0x24>)
 801df10:	69db      	ldr	r3, [r3, #28]
 801df12:	0a1b      	lsrs	r3, r3, #8
 801df14:	f003 0307 	and.w	r3, r3, #7
 801df18:	4904      	ldr	r1, [pc, #16]	@ (801df2c <HAL_RCC_GetPCLK2Freq+0x28>)
 801df1a:	5ccb      	ldrb	r3, [r1, r3]
 801df1c:	f003 031f 	and.w	r3, r3, #31
 801df20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801df24:	4618      	mov	r0, r3
 801df26:	bd80      	pop	{r7, pc}
 801df28:	58024400 	.word	0x58024400
 801df2c:	08027e94 	.word	0x08027e94

0801df30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801df30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801df34:	b0ca      	sub	sp, #296	@ 0x128
 801df36:	af00      	add	r7, sp, #0
 801df38:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801df3c:	2300      	movs	r3, #0
 801df3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801df42:	2300      	movs	r3, #0
 801df44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801df48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801df54:	2500      	movs	r5, #0
 801df56:	ea54 0305 	orrs.w	r3, r4, r5
 801df5a:	d049      	beq.n	801dff0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801df5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801df62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801df66:	d02f      	beq.n	801dfc8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801df68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801df6c:	d828      	bhi.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801df6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801df72:	d01a      	beq.n	801dfaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801df74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801df78:	d822      	bhi.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d003      	beq.n	801df86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801df7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801df82:	d007      	beq.n	801df94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801df84:	e01c      	b.n	801dfc0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801df86:	4bb8      	ldr	r3, [pc, #736]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801df88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801df8a:	4ab7      	ldr	r2, [pc, #732]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801df8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801df90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801df92:	e01a      	b.n	801dfca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801df94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df98:	3308      	adds	r3, #8
 801df9a:	2102      	movs	r1, #2
 801df9c:	4618      	mov	r0, r3
 801df9e:	f001 fc8f 	bl	801f8c0 <RCCEx_PLL2_Config>
 801dfa2:	4603      	mov	r3, r0
 801dfa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801dfa8:	e00f      	b.n	801dfca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfae:	3328      	adds	r3, #40	@ 0x28
 801dfb0:	2102      	movs	r1, #2
 801dfb2:	4618      	mov	r0, r3
 801dfb4:	f001 fd36 	bl	801fa24 <RCCEx_PLL3_Config>
 801dfb8:	4603      	mov	r3, r0
 801dfba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801dfbe:	e004      	b.n	801dfca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dfc0:	2301      	movs	r3, #1
 801dfc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dfc6:	e000      	b.n	801dfca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801dfc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dfca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfce:	2b00      	cmp	r3, #0
 801dfd0:	d10a      	bne.n	801dfe8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801dfd2:	4ba5      	ldr	r3, [pc, #660]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dfd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dfd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801dfda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801dfe0:	4aa1      	ldr	r2, [pc, #644]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801dfe2:	430b      	orrs	r3, r1
 801dfe4:	6513      	str	r3, [r2, #80]	@ 0x50
 801dfe6:	e003      	b.n	801dff0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dfe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801dff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dff8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801dffc:	f04f 0900 	mov.w	r9, #0
 801e000:	ea58 0309 	orrs.w	r3, r8, r9
 801e004:	d047      	beq.n	801e096 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801e006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e00a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e00c:	2b04      	cmp	r3, #4
 801e00e:	d82a      	bhi.n	801e066 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801e010:	a201      	add	r2, pc, #4	@ (adr r2, 801e018 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801e012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e016:	bf00      	nop
 801e018:	0801e02d 	.word	0x0801e02d
 801e01c:	0801e03b 	.word	0x0801e03b
 801e020:	0801e051 	.word	0x0801e051
 801e024:	0801e06f 	.word	0x0801e06f
 801e028:	0801e06f 	.word	0x0801e06f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e02c:	4b8e      	ldr	r3, [pc, #568]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e030:	4a8d      	ldr	r2, [pc, #564]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e038:	e01a      	b.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e03a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e03e:	3308      	adds	r3, #8
 801e040:	2100      	movs	r1, #0
 801e042:	4618      	mov	r0, r3
 801e044:	f001 fc3c 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e048:	4603      	mov	r3, r0
 801e04a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e04e:	e00f      	b.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e054:	3328      	adds	r3, #40	@ 0x28
 801e056:	2100      	movs	r1, #0
 801e058:	4618      	mov	r0, r3
 801e05a:	f001 fce3 	bl	801fa24 <RCCEx_PLL3_Config>
 801e05e:	4603      	mov	r3, r0
 801e060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e064:	e004      	b.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e066:	2301      	movs	r3, #1
 801e068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e06c:	e000      	b.n	801e070 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801e06e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e074:	2b00      	cmp	r3, #0
 801e076:	d10a      	bne.n	801e08e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801e078:	4b7b      	ldr	r3, [pc, #492]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e07a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e07c:	f023 0107 	bic.w	r1, r3, #7
 801e080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e084:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e086:	4a78      	ldr	r2, [pc, #480]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e088:	430b      	orrs	r3, r1
 801e08a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e08c:	e003      	b.n	801e096 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e08e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e092:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801e096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e09e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801e0a2:	f04f 0b00 	mov.w	fp, #0
 801e0a6:	ea5a 030b 	orrs.w	r3, sl, fp
 801e0aa:	d04c      	beq.n	801e146 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801e0ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e0b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e0b6:	d030      	beq.n	801e11a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801e0b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e0bc:	d829      	bhi.n	801e112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e0be:	2bc0      	cmp	r3, #192	@ 0xc0
 801e0c0:	d02d      	beq.n	801e11e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801e0c2:	2bc0      	cmp	r3, #192	@ 0xc0
 801e0c4:	d825      	bhi.n	801e112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e0c6:	2b80      	cmp	r3, #128	@ 0x80
 801e0c8:	d018      	beq.n	801e0fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801e0ca:	2b80      	cmp	r3, #128	@ 0x80
 801e0cc:	d821      	bhi.n	801e112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801e0ce:	2b00      	cmp	r3, #0
 801e0d0:	d002      	beq.n	801e0d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801e0d2:	2b40      	cmp	r3, #64	@ 0x40
 801e0d4:	d007      	beq.n	801e0e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801e0d6:	e01c      	b.n	801e112 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e0d8:	4b63      	ldr	r3, [pc, #396]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0dc:	4a62      	ldr	r2, [pc, #392]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e0de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e0e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e0e4:	e01c      	b.n	801e120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ea:	3308      	adds	r3, #8
 801e0ec:	2100      	movs	r1, #0
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	f001 fbe6 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e0f4:	4603      	mov	r3, r0
 801e0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e0fa:	e011      	b.n	801e120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e100:	3328      	adds	r3, #40	@ 0x28
 801e102:	2100      	movs	r1, #0
 801e104:	4618      	mov	r0, r3
 801e106:	f001 fc8d 	bl	801fa24 <RCCEx_PLL3_Config>
 801e10a:	4603      	mov	r3, r0
 801e10c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801e110:	e006      	b.n	801e120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e112:	2301      	movs	r3, #1
 801e114:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e118:	e002      	b.n	801e120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e11a:	bf00      	nop
 801e11c:	e000      	b.n	801e120 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801e11e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e124:	2b00      	cmp	r3, #0
 801e126:	d10a      	bne.n	801e13e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801e128:	4b4f      	ldr	r3, [pc, #316]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e12a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e12c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801e130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801e136:	4a4c      	ldr	r2, [pc, #304]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e138:	430b      	orrs	r3, r1
 801e13a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e13c:	e003      	b.n	801e146 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e13e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e142:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801e146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e14e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801e152:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801e156:	2300      	movs	r3, #0
 801e158:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801e15c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801e160:	460b      	mov	r3, r1
 801e162:	4313      	orrs	r3, r2
 801e164:	d053      	beq.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801e166:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e16a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e16e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e172:	d035      	beq.n	801e1e0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801e174:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801e178:	d82e      	bhi.n	801e1d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e17a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e17e:	d031      	beq.n	801e1e4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801e180:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801e184:	d828      	bhi.n	801e1d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e186:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e18a:	d01a      	beq.n	801e1c2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801e18c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e190:	d822      	bhi.n	801e1d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801e192:	2b00      	cmp	r3, #0
 801e194:	d003      	beq.n	801e19e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801e196:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e19a:	d007      	beq.n	801e1ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801e19c:	e01c      	b.n	801e1d8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e19e:	4b32      	ldr	r3, [pc, #200]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1a2:	4a31      	ldr	r2, [pc, #196]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e1a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e1aa:	e01c      	b.n	801e1e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e1ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1b0:	3308      	adds	r3, #8
 801e1b2:	2100      	movs	r1, #0
 801e1b4:	4618      	mov	r0, r3
 801e1b6:	f001 fb83 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e1ba:	4603      	mov	r3, r0
 801e1bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e1c0:	e011      	b.n	801e1e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1c6:	3328      	adds	r3, #40	@ 0x28
 801e1c8:	2100      	movs	r1, #0
 801e1ca:	4618      	mov	r0, r3
 801e1cc:	f001 fc2a 	bl	801fa24 <RCCEx_PLL3_Config>
 801e1d0:	4603      	mov	r3, r0
 801e1d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e1d6:	e006      	b.n	801e1e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e1d8:	2301      	movs	r3, #1
 801e1da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e1de:	e002      	b.n	801e1e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e1e0:	bf00      	nop
 801e1e2:	e000      	b.n	801e1e6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801e1e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e1e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1ea:	2b00      	cmp	r3, #0
 801e1ec:	d10b      	bne.n	801e206 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801e1ee:	4b1e      	ldr	r3, [pc, #120]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e1f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e1f2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801e1f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1fa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801e1fe:	4a1a      	ldr	r2, [pc, #104]	@ (801e268 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801e200:	430b      	orrs	r3, r1
 801e202:	6593      	str	r3, [r2, #88]	@ 0x58
 801e204:	e003      	b.n	801e20e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e206:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e20a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801e20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e212:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e216:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801e21a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801e21e:	2300      	movs	r3, #0
 801e220:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801e224:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801e228:	460b      	mov	r3, r1
 801e22a:	4313      	orrs	r3, r2
 801e22c:	d056      	beq.n	801e2dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801e22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e232:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e236:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e23a:	d038      	beq.n	801e2ae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801e23c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e240:	d831      	bhi.n	801e2a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e242:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e246:	d034      	beq.n	801e2b2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801e248:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801e24c:	d82b      	bhi.n	801e2a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e24e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e252:	d01d      	beq.n	801e290 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801e254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801e258:	d825      	bhi.n	801e2a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e25a:	2b00      	cmp	r3, #0
 801e25c:	d006      	beq.n	801e26c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801e25e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801e262:	d00a      	beq.n	801e27a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801e264:	e01f      	b.n	801e2a6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801e266:	bf00      	nop
 801e268:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e26c:	4ba2      	ldr	r3, [pc, #648]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e26e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e270:	4aa1      	ldr	r2, [pc, #644]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e278:	e01c      	b.n	801e2b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e27e:	3308      	adds	r3, #8
 801e280:	2100      	movs	r1, #0
 801e282:	4618      	mov	r0, r3
 801e284:	f001 fb1c 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e288:	4603      	mov	r3, r0
 801e28a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801e28e:	e011      	b.n	801e2b4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e294:	3328      	adds	r3, #40	@ 0x28
 801e296:	2100      	movs	r1, #0
 801e298:	4618      	mov	r0, r3
 801e29a:	f001 fbc3 	bl	801fa24 <RCCEx_PLL3_Config>
 801e29e:	4603      	mov	r3, r0
 801e2a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801e2a4:	e006      	b.n	801e2b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801e2a6:	2301      	movs	r3, #1
 801e2a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e2ac:	e002      	b.n	801e2b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e2ae:	bf00      	nop
 801e2b0:	e000      	b.n	801e2b4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801e2b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e2b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e2b8:	2b00      	cmp	r3, #0
 801e2ba:	d10b      	bne.n	801e2d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801e2bc:	4b8e      	ldr	r3, [pc, #568]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e2c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801e2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801e2cc:	4a8a      	ldr	r2, [pc, #552]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e2ce:	430b      	orrs	r3, r1
 801e2d0:	6593      	str	r3, [r2, #88]	@ 0x58
 801e2d2:	e003      	b.n	801e2dc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e2d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e2d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801e2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e2e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801e2e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801e2f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801e2f6:	460b      	mov	r3, r1
 801e2f8:	4313      	orrs	r3, r2
 801e2fa:	d03a      	beq.n	801e372 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801e2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e302:	2b30      	cmp	r3, #48	@ 0x30
 801e304:	d01f      	beq.n	801e346 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801e306:	2b30      	cmp	r3, #48	@ 0x30
 801e308:	d819      	bhi.n	801e33e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e30a:	2b20      	cmp	r3, #32
 801e30c:	d00c      	beq.n	801e328 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801e30e:	2b20      	cmp	r3, #32
 801e310:	d815      	bhi.n	801e33e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801e312:	2b00      	cmp	r3, #0
 801e314:	d019      	beq.n	801e34a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801e316:	2b10      	cmp	r3, #16
 801e318:	d111      	bne.n	801e33e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e31a:	4b77      	ldr	r3, [pc, #476]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e31e:	4a76      	ldr	r2, [pc, #472]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e320:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e326:	e011      	b.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e32c:	3308      	adds	r3, #8
 801e32e:	2102      	movs	r1, #2
 801e330:	4618      	mov	r0, r3
 801e332:	f001 fac5 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e336:	4603      	mov	r3, r0
 801e338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801e33c:	e006      	b.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e33e:	2301      	movs	r3, #1
 801e340:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e344:	e002      	b.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e346:	bf00      	nop
 801e348:	e000      	b.n	801e34c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801e34a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e34c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e350:	2b00      	cmp	r3, #0
 801e352:	d10a      	bne.n	801e36a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801e354:	4b68      	ldr	r3, [pc, #416]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e358:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801e35c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e362:	4a65      	ldr	r2, [pc, #404]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e364:	430b      	orrs	r3, r1
 801e366:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e368:	e003      	b.n	801e372 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e36a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e36e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801e372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e37a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801e37e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801e382:	2300      	movs	r3, #0
 801e384:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801e388:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801e38c:	460b      	mov	r3, r1
 801e38e:	4313      	orrs	r3, r2
 801e390:	d051      	beq.n	801e436 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801e392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e398:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e39c:	d035      	beq.n	801e40a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801e39e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e3a2:	d82e      	bhi.n	801e402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e3a4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e3a8:	d031      	beq.n	801e40e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801e3aa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801e3ae:	d828      	bhi.n	801e402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e3b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e3b4:	d01a      	beq.n	801e3ec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801e3b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e3ba:	d822      	bhi.n	801e402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d003      	beq.n	801e3c8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801e3c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e3c4:	d007      	beq.n	801e3d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801e3c6:	e01c      	b.n	801e402 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e3c8:	4b4b      	ldr	r3, [pc, #300]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3cc:	4a4a      	ldr	r2, [pc, #296]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e3ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e3d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e3d4:	e01c      	b.n	801e410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3da:	3308      	adds	r3, #8
 801e3dc:	2100      	movs	r1, #0
 801e3de:	4618      	mov	r0, r3
 801e3e0:	f001 fa6e 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e3e4:	4603      	mov	r3, r0
 801e3e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e3ea:	e011      	b.n	801e410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3f0:	3328      	adds	r3, #40	@ 0x28
 801e3f2:	2100      	movs	r1, #0
 801e3f4:	4618      	mov	r0, r3
 801e3f6:	f001 fb15 	bl	801fa24 <RCCEx_PLL3_Config>
 801e3fa:	4603      	mov	r3, r0
 801e3fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801e400:	e006      	b.n	801e410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e402:	2301      	movs	r3, #1
 801e404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e408:	e002      	b.n	801e410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e40a:	bf00      	nop
 801e40c:	e000      	b.n	801e410 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801e40e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e414:	2b00      	cmp	r3, #0
 801e416:	d10a      	bne.n	801e42e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801e418:	4b37      	ldr	r3, [pc, #220]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e41c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801e420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e424:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801e426:	4a34      	ldr	r2, [pc, #208]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e428:	430b      	orrs	r3, r1
 801e42a:	6513      	str	r3, [r2, #80]	@ 0x50
 801e42c:	e003      	b.n	801e436 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e42e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e432:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801e436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e43e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801e442:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801e446:	2300      	movs	r3, #0
 801e448:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801e44c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801e450:	460b      	mov	r3, r1
 801e452:	4313      	orrs	r3, r2
 801e454:	d056      	beq.n	801e504 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801e456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e45a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e45c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e460:	d033      	beq.n	801e4ca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801e462:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801e466:	d82c      	bhi.n	801e4c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e468:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e46c:	d02f      	beq.n	801e4ce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801e46e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801e472:	d826      	bhi.n	801e4c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e474:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e478:	d02b      	beq.n	801e4d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801e47a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801e47e:	d820      	bhi.n	801e4c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e480:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e484:	d012      	beq.n	801e4ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801e486:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e48a:	d81a      	bhi.n	801e4c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801e48c:	2b00      	cmp	r3, #0
 801e48e:	d022      	beq.n	801e4d6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801e490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e494:	d115      	bne.n	801e4c2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e49a:	3308      	adds	r3, #8
 801e49c:	2101      	movs	r1, #1
 801e49e:	4618      	mov	r0, r3
 801e4a0:	f001 fa0e 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e4a4:	4603      	mov	r3, r0
 801e4a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e4aa:	e015      	b.n	801e4d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e4ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4b0:	3328      	adds	r3, #40	@ 0x28
 801e4b2:	2101      	movs	r1, #1
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	f001 fab5 	bl	801fa24 <RCCEx_PLL3_Config>
 801e4ba:	4603      	mov	r3, r0
 801e4bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801e4c0:	e00a      	b.n	801e4d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e4c2:	2301      	movs	r3, #1
 801e4c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e4c8:	e006      	b.n	801e4d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e4ca:	bf00      	nop
 801e4cc:	e004      	b.n	801e4d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e4ce:	bf00      	nop
 801e4d0:	e002      	b.n	801e4d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e4d2:	bf00      	nop
 801e4d4:	e000      	b.n	801e4d8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801e4d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e4d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4dc:	2b00      	cmp	r3, #0
 801e4de:	d10d      	bne.n	801e4fc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801e4e0:	4b05      	ldr	r3, [pc, #20]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e4e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e4e4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801e4e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4ec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e4ee:	4a02      	ldr	r2, [pc, #8]	@ (801e4f8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801e4f0:	430b      	orrs	r3, r1
 801e4f2:	6513      	str	r3, [r2, #80]	@ 0x50
 801e4f4:	e006      	b.n	801e504 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801e4f6:	bf00      	nop
 801e4f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801e504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e50c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801e510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801e514:	2300      	movs	r3, #0
 801e516:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801e51a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801e51e:	460b      	mov	r3, r1
 801e520:	4313      	orrs	r3, r2
 801e522:	d055      	beq.n	801e5d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801e524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e528:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e52c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e530:	d033      	beq.n	801e59a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801e532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e536:	d82c      	bhi.n	801e592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e538:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e53c:	d02f      	beq.n	801e59e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801e53e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e542:	d826      	bhi.n	801e592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e544:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e548:	d02b      	beq.n	801e5a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801e54a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e54e:	d820      	bhi.n	801e592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e550:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e554:	d012      	beq.n	801e57c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801e556:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e55a:	d81a      	bhi.n	801e592 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801e55c:	2b00      	cmp	r3, #0
 801e55e:	d022      	beq.n	801e5a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801e560:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e564:	d115      	bne.n	801e592 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e56a:	3308      	adds	r3, #8
 801e56c:	2101      	movs	r1, #1
 801e56e:	4618      	mov	r0, r3
 801e570:	f001 f9a6 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e574:	4603      	mov	r3, r0
 801e576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e57a:	e015      	b.n	801e5a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e57c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e580:	3328      	adds	r3, #40	@ 0x28
 801e582:	2101      	movs	r1, #1
 801e584:	4618      	mov	r0, r3
 801e586:	f001 fa4d 	bl	801fa24 <RCCEx_PLL3_Config>
 801e58a:	4603      	mov	r3, r0
 801e58c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801e590:	e00a      	b.n	801e5a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801e592:	2301      	movs	r3, #1
 801e594:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e598:	e006      	b.n	801e5a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e59a:	bf00      	nop
 801e59c:	e004      	b.n	801e5a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e59e:	bf00      	nop
 801e5a0:	e002      	b.n	801e5a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e5a2:	bf00      	nop
 801e5a4:	e000      	b.n	801e5a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801e5a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e5a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5ac:	2b00      	cmp	r3, #0
 801e5ae:	d10b      	bne.n	801e5c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801e5b0:	4ba3      	ldr	r3, [pc, #652]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e5b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e5b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e5b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801e5c0:	4a9f      	ldr	r2, [pc, #636]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e5c2:	430b      	orrs	r3, r1
 801e5c4:	6593      	str	r3, [r2, #88]	@ 0x58
 801e5c6:	e003      	b.n	801e5d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e5c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e5cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801e5d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801e5dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801e5e0:	2300      	movs	r3, #0
 801e5e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801e5e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801e5ea:	460b      	mov	r3, r1
 801e5ec:	4313      	orrs	r3, r2
 801e5ee:	d037      	beq.n	801e660 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801e5f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e5f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e5fa:	d00e      	beq.n	801e61a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801e5fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e600:	d816      	bhi.n	801e630 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801e602:	2b00      	cmp	r3, #0
 801e604:	d018      	beq.n	801e638 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801e606:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e60a:	d111      	bne.n	801e630 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e60c:	4b8c      	ldr	r3, [pc, #560]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e610:	4a8b      	ldr	r2, [pc, #556]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e616:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e618:	e00f      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e61e:	3308      	adds	r3, #8
 801e620:	2101      	movs	r1, #1
 801e622:	4618      	mov	r0, r3
 801e624:	f001 f94c 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e628:	4603      	mov	r3, r0
 801e62a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801e62e:	e004      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e630:	2301      	movs	r3, #1
 801e632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e636:	e000      	b.n	801e63a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801e638:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e63a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e63e:	2b00      	cmp	r3, #0
 801e640:	d10a      	bne.n	801e658 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801e642:	4b7f      	ldr	r3, [pc, #508]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e646:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e64e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e650:	4a7b      	ldr	r2, [pc, #492]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e652:	430b      	orrs	r3, r1
 801e654:	6513      	str	r3, [r2, #80]	@ 0x50
 801e656:	e003      	b.n	801e660 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e65c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801e660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e668:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801e66c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801e670:	2300      	movs	r3, #0
 801e672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801e676:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801e67a:	460b      	mov	r3, r1
 801e67c:	4313      	orrs	r3, r2
 801e67e:	d039      	beq.n	801e6f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801e680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e684:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e686:	2b03      	cmp	r3, #3
 801e688:	d81c      	bhi.n	801e6c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801e68a:	a201      	add	r2, pc, #4	@ (adr r2, 801e690 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801e68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e690:	0801e6cd 	.word	0x0801e6cd
 801e694:	0801e6a1 	.word	0x0801e6a1
 801e698:	0801e6af 	.word	0x0801e6af
 801e69c:	0801e6cd 	.word	0x0801e6cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e6a0:	4b67      	ldr	r3, [pc, #412]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e6a4:	4a66      	ldr	r2, [pc, #408]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e6aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e6ac:	e00f      	b.n	801e6ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6b2:	3308      	adds	r3, #8
 801e6b4:	2102      	movs	r1, #2
 801e6b6:	4618      	mov	r0, r3
 801e6b8:	f001 f902 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e6bc:	4603      	mov	r3, r0
 801e6be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801e6c2:	e004      	b.n	801e6ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801e6c4:	2301      	movs	r3, #1
 801e6c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e6ca:	e000      	b.n	801e6ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801e6cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e6ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6d2:	2b00      	cmp	r3, #0
 801e6d4:	d10a      	bne.n	801e6ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801e6d6:	4b5a      	ldr	r3, [pc, #360]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e6da:	f023 0103 	bic.w	r1, r3, #3
 801e6de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e6e4:	4a56      	ldr	r2, [pc, #344]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e6e6:	430b      	orrs	r3, r1
 801e6e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e6ea:	e003      	b.n	801e6f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801e6f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801e700:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801e704:	2300      	movs	r3, #0
 801e706:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801e70a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801e70e:	460b      	mov	r3, r1
 801e710:	4313      	orrs	r3, r2
 801e712:	f000 809f 	beq.w	801e854 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801e716:	4b4b      	ldr	r3, [pc, #300]	@ (801e844 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e718:	681b      	ldr	r3, [r3, #0]
 801e71a:	4a4a      	ldr	r2, [pc, #296]	@ (801e844 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e71c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e720:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801e722:	f7fc f807 	bl	801a734 <HAL_GetTick>
 801e726:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e72a:	e00b      	b.n	801e744 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801e72c:	f7fc f802 	bl	801a734 <HAL_GetTick>
 801e730:	4602      	mov	r2, r0
 801e732:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e736:	1ad3      	subs	r3, r2, r3
 801e738:	2b64      	cmp	r3, #100	@ 0x64
 801e73a:	d903      	bls.n	801e744 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801e73c:	2303      	movs	r3, #3
 801e73e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e742:	e005      	b.n	801e750 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801e744:	4b3f      	ldr	r3, [pc, #252]	@ (801e844 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801e746:	681b      	ldr	r3, [r3, #0]
 801e748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	d0ed      	beq.n	801e72c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801e750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e754:	2b00      	cmp	r3, #0
 801e756:	d179      	bne.n	801e84c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801e758:	4b39      	ldr	r3, [pc, #228]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e75a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801e75c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e760:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e764:	4053      	eors	r3, r2
 801e766:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e76a:	2b00      	cmp	r3, #0
 801e76c:	d015      	beq.n	801e79a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801e76e:	4b34      	ldr	r3, [pc, #208]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e772:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801e776:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801e77a:	4b31      	ldr	r3, [pc, #196]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e77c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e77e:	4a30      	ldr	r2, [pc, #192]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e780:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801e784:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801e786:	4b2e      	ldr	r3, [pc, #184]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e788:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e78a:	4a2d      	ldr	r2, [pc, #180]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e78c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801e790:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801e792:	4a2b      	ldr	r2, [pc, #172]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801e798:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801e79a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e79e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e7a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e7a6:	d118      	bne.n	801e7da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801e7a8:	f7fb ffc4 	bl	801a734 <HAL_GetTick>
 801e7ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e7b0:	e00d      	b.n	801e7ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801e7b2:	f7fb ffbf 	bl	801a734 <HAL_GetTick>
 801e7b6:	4602      	mov	r2, r0
 801e7b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801e7bc:	1ad2      	subs	r2, r2, r3
 801e7be:	f241 3388 	movw	r3, #5000	@ 0x1388
 801e7c2:	429a      	cmp	r2, r3
 801e7c4:	d903      	bls.n	801e7ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801e7c6:	2303      	movs	r3, #3
 801e7c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801e7cc:	e005      	b.n	801e7da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801e7ce:	4b1c      	ldr	r3, [pc, #112]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e7d2:	f003 0302 	and.w	r3, r3, #2
 801e7d6:	2b00      	cmp	r3, #0
 801e7d8:	d0eb      	beq.n	801e7b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801e7da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7de:	2b00      	cmp	r3, #0
 801e7e0:	d129      	bne.n	801e836 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801e7e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e7ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801e7ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e7f2:	d10e      	bne.n	801e812 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801e7f4:	4b12      	ldr	r3, [pc, #72]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e7f6:	691b      	ldr	r3, [r3, #16]
 801e7f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801e7fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e800:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e804:	091a      	lsrs	r2, r3, #4
 801e806:	4b10      	ldr	r3, [pc, #64]	@ (801e848 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801e808:	4013      	ands	r3, r2
 801e80a:	4a0d      	ldr	r2, [pc, #52]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e80c:	430b      	orrs	r3, r1
 801e80e:	6113      	str	r3, [r2, #16]
 801e810:	e005      	b.n	801e81e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801e812:	4b0b      	ldr	r3, [pc, #44]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e814:	691b      	ldr	r3, [r3, #16]
 801e816:	4a0a      	ldr	r2, [pc, #40]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e818:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801e81c:	6113      	str	r3, [r2, #16]
 801e81e:	4b08      	ldr	r3, [pc, #32]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e820:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801e822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e826:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801e82a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801e82e:	4a04      	ldr	r2, [pc, #16]	@ (801e840 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801e830:	430b      	orrs	r3, r1
 801e832:	6713      	str	r3, [r2, #112]	@ 0x70
 801e834:	e00e      	b.n	801e854 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801e836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e83a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801e83e:	e009      	b.n	801e854 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801e840:	58024400 	.word	0x58024400
 801e844:	58024800 	.word	0x58024800
 801e848:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e84c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e850:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801e854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e85c:	f002 0301 	and.w	r3, r2, #1
 801e860:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e864:	2300      	movs	r3, #0
 801e866:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e86a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e86e:	460b      	mov	r3, r1
 801e870:	4313      	orrs	r3, r2
 801e872:	f000 8089 	beq.w	801e988 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801e876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e87a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e87c:	2b28      	cmp	r3, #40	@ 0x28
 801e87e:	d86b      	bhi.n	801e958 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801e880:	a201      	add	r2, pc, #4	@ (adr r2, 801e888 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801e882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e886:	bf00      	nop
 801e888:	0801e961 	.word	0x0801e961
 801e88c:	0801e959 	.word	0x0801e959
 801e890:	0801e959 	.word	0x0801e959
 801e894:	0801e959 	.word	0x0801e959
 801e898:	0801e959 	.word	0x0801e959
 801e89c:	0801e959 	.word	0x0801e959
 801e8a0:	0801e959 	.word	0x0801e959
 801e8a4:	0801e959 	.word	0x0801e959
 801e8a8:	0801e92d 	.word	0x0801e92d
 801e8ac:	0801e959 	.word	0x0801e959
 801e8b0:	0801e959 	.word	0x0801e959
 801e8b4:	0801e959 	.word	0x0801e959
 801e8b8:	0801e959 	.word	0x0801e959
 801e8bc:	0801e959 	.word	0x0801e959
 801e8c0:	0801e959 	.word	0x0801e959
 801e8c4:	0801e959 	.word	0x0801e959
 801e8c8:	0801e943 	.word	0x0801e943
 801e8cc:	0801e959 	.word	0x0801e959
 801e8d0:	0801e959 	.word	0x0801e959
 801e8d4:	0801e959 	.word	0x0801e959
 801e8d8:	0801e959 	.word	0x0801e959
 801e8dc:	0801e959 	.word	0x0801e959
 801e8e0:	0801e959 	.word	0x0801e959
 801e8e4:	0801e959 	.word	0x0801e959
 801e8e8:	0801e961 	.word	0x0801e961
 801e8ec:	0801e959 	.word	0x0801e959
 801e8f0:	0801e959 	.word	0x0801e959
 801e8f4:	0801e959 	.word	0x0801e959
 801e8f8:	0801e959 	.word	0x0801e959
 801e8fc:	0801e959 	.word	0x0801e959
 801e900:	0801e959 	.word	0x0801e959
 801e904:	0801e959 	.word	0x0801e959
 801e908:	0801e961 	.word	0x0801e961
 801e90c:	0801e959 	.word	0x0801e959
 801e910:	0801e959 	.word	0x0801e959
 801e914:	0801e959 	.word	0x0801e959
 801e918:	0801e959 	.word	0x0801e959
 801e91c:	0801e959 	.word	0x0801e959
 801e920:	0801e959 	.word	0x0801e959
 801e924:	0801e959 	.word	0x0801e959
 801e928:	0801e961 	.word	0x0801e961
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e92c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e930:	3308      	adds	r3, #8
 801e932:	2101      	movs	r1, #1
 801e934:	4618      	mov	r0, r3
 801e936:	f000 ffc3 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e93a:	4603      	mov	r3, r0
 801e93c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e940:	e00f      	b.n	801e962 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e946:	3328      	adds	r3, #40	@ 0x28
 801e948:	2101      	movs	r1, #1
 801e94a:	4618      	mov	r0, r3
 801e94c:	f001 f86a 	bl	801fa24 <RCCEx_PLL3_Config>
 801e950:	4603      	mov	r3, r0
 801e952:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e956:	e004      	b.n	801e962 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e958:	2301      	movs	r3, #1
 801e95a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e95e:	e000      	b.n	801e962 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801e960:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e962:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e966:	2b00      	cmp	r3, #0
 801e968:	d10a      	bne.n	801e980 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801e96a:	4bbf      	ldr	r3, [pc, #764]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e96c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e96e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801e972:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e978:	4abb      	ldr	r2, [pc, #748]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e97a:	430b      	orrs	r3, r1
 801e97c:	6553      	str	r3, [r2, #84]	@ 0x54
 801e97e:	e003      	b.n	801e988 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e980:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e984:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801e988:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e990:	f002 0302 	and.w	r3, r2, #2
 801e994:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e998:	2300      	movs	r3, #0
 801e99a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801e99e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801e9a2:	460b      	mov	r3, r1
 801e9a4:	4313      	orrs	r3, r2
 801e9a6:	d041      	beq.n	801ea2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801e9a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e9ae:	2b05      	cmp	r3, #5
 801e9b0:	d824      	bhi.n	801e9fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801e9b2:	a201      	add	r2, pc, #4	@ (adr r2, 801e9b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801e9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e9b8:	0801ea05 	.word	0x0801ea05
 801e9bc:	0801e9d1 	.word	0x0801e9d1
 801e9c0:	0801e9e7 	.word	0x0801e9e7
 801e9c4:	0801ea05 	.word	0x0801ea05
 801e9c8:	0801ea05 	.word	0x0801ea05
 801e9cc:	0801ea05 	.word	0x0801ea05
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9d4:	3308      	adds	r3, #8
 801e9d6:	2101      	movs	r1, #1
 801e9d8:	4618      	mov	r0, r3
 801e9da:	f000 ff71 	bl	801f8c0 <RCCEx_PLL2_Config>
 801e9de:	4603      	mov	r3, r0
 801e9e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e9e4:	e00f      	b.n	801ea06 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9ea:	3328      	adds	r3, #40	@ 0x28
 801e9ec:	2101      	movs	r1, #1
 801e9ee:	4618      	mov	r0, r3
 801e9f0:	f001 f818 	bl	801fa24 <RCCEx_PLL3_Config>
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e9fa:	e004      	b.n	801ea06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e9fc:	2301      	movs	r3, #1
 801e9fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ea02:	e000      	b.n	801ea06 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801ea04:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ea06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea0a:	2b00      	cmp	r3, #0
 801ea0c:	d10a      	bne.n	801ea24 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801ea0e:	4b96      	ldr	r3, [pc, #600]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ea12:	f023 0107 	bic.w	r1, r3, #7
 801ea16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801ea1c:	4a92      	ldr	r2, [pc, #584]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ea1e:	430b      	orrs	r3, r1
 801ea20:	6553      	str	r3, [r2, #84]	@ 0x54
 801ea22:	e003      	b.n	801ea2c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801ea2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea34:	f002 0304 	and.w	r3, r2, #4
 801ea38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801ea3c:	2300      	movs	r3, #0
 801ea3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801ea42:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801ea46:	460b      	mov	r3, r1
 801ea48:	4313      	orrs	r3, r2
 801ea4a:	d044      	beq.n	801ead6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801ea4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ea54:	2b05      	cmp	r3, #5
 801ea56:	d825      	bhi.n	801eaa4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801ea58:	a201      	add	r2, pc, #4	@ (adr r2, 801ea60 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801ea5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ea5e:	bf00      	nop
 801ea60:	0801eaad 	.word	0x0801eaad
 801ea64:	0801ea79 	.word	0x0801ea79
 801ea68:	0801ea8f 	.word	0x0801ea8f
 801ea6c:	0801eaad 	.word	0x0801eaad
 801ea70:	0801eaad 	.word	0x0801eaad
 801ea74:	0801eaad 	.word	0x0801eaad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ea78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea7c:	3308      	adds	r3, #8
 801ea7e:	2101      	movs	r1, #1
 801ea80:	4618      	mov	r0, r3
 801ea82:	f000 ff1d 	bl	801f8c0 <RCCEx_PLL2_Config>
 801ea86:	4603      	mov	r3, r0
 801ea88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801ea8c:	e00f      	b.n	801eaae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ea8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea92:	3328      	adds	r3, #40	@ 0x28
 801ea94:	2101      	movs	r1, #1
 801ea96:	4618      	mov	r0, r3
 801ea98:	f000 ffc4 	bl	801fa24 <RCCEx_PLL3_Config>
 801ea9c:	4603      	mov	r3, r0
 801ea9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801eaa2:	e004      	b.n	801eaae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eaa4:	2301      	movs	r3, #1
 801eaa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eaaa:	e000      	b.n	801eaae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801eaac:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eaae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eab2:	2b00      	cmp	r3, #0
 801eab4:	d10b      	bne.n	801eace <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801eab6:	4b6c      	ldr	r3, [pc, #432]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801eaba:	f023 0107 	bic.w	r1, r3, #7
 801eabe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801eac6:	4a68      	ldr	r2, [pc, #416]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eac8:	430b      	orrs	r3, r1
 801eaca:	6593      	str	r3, [r2, #88]	@ 0x58
 801eacc:	e003      	b.n	801ead6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ead2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ead6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eada:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eade:	f002 0320 	and.w	r3, r2, #32
 801eae2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801eae6:	2300      	movs	r3, #0
 801eae8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801eaec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801eaf0:	460b      	mov	r3, r1
 801eaf2:	4313      	orrs	r3, r2
 801eaf4:	d055      	beq.n	801eba2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801eaf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eafa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801eafe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801eb02:	d033      	beq.n	801eb6c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801eb04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801eb08:	d82c      	bhi.n	801eb64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb0e:	d02f      	beq.n	801eb70 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801eb10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb14:	d826      	bhi.n	801eb64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801eb1a:	d02b      	beq.n	801eb74 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801eb1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801eb20:	d820      	bhi.n	801eb64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb22:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eb26:	d012      	beq.n	801eb4e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801eb28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801eb2c:	d81a      	bhi.n	801eb64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801eb2e:	2b00      	cmp	r3, #0
 801eb30:	d022      	beq.n	801eb78 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801eb32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801eb36:	d115      	bne.n	801eb64 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801eb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb3c:	3308      	adds	r3, #8
 801eb3e:	2100      	movs	r1, #0
 801eb40:	4618      	mov	r0, r3
 801eb42:	f000 febd 	bl	801f8c0 <RCCEx_PLL2_Config>
 801eb46:	4603      	mov	r3, r0
 801eb48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801eb4c:	e015      	b.n	801eb7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eb4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb52:	3328      	adds	r3, #40	@ 0x28
 801eb54:	2102      	movs	r1, #2
 801eb56:	4618      	mov	r0, r3
 801eb58:	f000 ff64 	bl	801fa24 <RCCEx_PLL3_Config>
 801eb5c:	4603      	mov	r3, r0
 801eb5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801eb62:	e00a      	b.n	801eb7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eb64:	2301      	movs	r3, #1
 801eb66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801eb6a:	e006      	b.n	801eb7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801eb6c:	bf00      	nop
 801eb6e:	e004      	b.n	801eb7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801eb70:	bf00      	nop
 801eb72:	e002      	b.n	801eb7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801eb74:	bf00      	nop
 801eb76:	e000      	b.n	801eb7a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801eb78:	bf00      	nop
    }

    if (ret == HAL_OK)
 801eb7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb7e:	2b00      	cmp	r3, #0
 801eb80:	d10b      	bne.n	801eb9a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801eb82:	4b39      	ldr	r3, [pc, #228]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801eb86:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801eb8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eb8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801eb92:	4a35      	ldr	r2, [pc, #212]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801eb94:	430b      	orrs	r3, r1
 801eb96:	6553      	str	r3, [r2, #84]	@ 0x54
 801eb98:	e003      	b.n	801eba2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eb9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eb9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801eba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ebaa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801ebae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801ebb2:	2300      	movs	r3, #0
 801ebb4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801ebb8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801ebbc:	460b      	mov	r3, r1
 801ebbe:	4313      	orrs	r3, r2
 801ebc0:	d058      	beq.n	801ec74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801ebc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ebc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ebca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801ebce:	d033      	beq.n	801ec38 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801ebd0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801ebd4:	d82c      	bhi.n	801ec30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ebd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ebda:	d02f      	beq.n	801ec3c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801ebdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ebe0:	d826      	bhi.n	801ec30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ebe2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ebe6:	d02b      	beq.n	801ec40 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801ebe8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801ebec:	d820      	bhi.n	801ec30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ebee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ebf2:	d012      	beq.n	801ec1a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801ebf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801ebf8:	d81a      	bhi.n	801ec30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d022      	beq.n	801ec44 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801ebfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801ec02:	d115      	bne.n	801ec30 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ec04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec08:	3308      	adds	r3, #8
 801ec0a:	2100      	movs	r1, #0
 801ec0c:	4618      	mov	r0, r3
 801ec0e:	f000 fe57 	bl	801f8c0 <RCCEx_PLL2_Config>
 801ec12:	4603      	mov	r3, r0
 801ec14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ec18:	e015      	b.n	801ec46 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ec1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec1e:	3328      	adds	r3, #40	@ 0x28
 801ec20:	2102      	movs	r1, #2
 801ec22:	4618      	mov	r0, r3
 801ec24:	f000 fefe 	bl	801fa24 <RCCEx_PLL3_Config>
 801ec28:	4603      	mov	r3, r0
 801ec2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ec2e:	e00a      	b.n	801ec46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ec30:	2301      	movs	r3, #1
 801ec32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ec36:	e006      	b.n	801ec46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec38:	bf00      	nop
 801ec3a:	e004      	b.n	801ec46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec3c:	bf00      	nop
 801ec3e:	e002      	b.n	801ec46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec40:	bf00      	nop
 801ec42:	e000      	b.n	801ec46 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801ec44:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ec46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d10e      	bne.n	801ec6c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ec4e:	4b06      	ldr	r3, [pc, #24]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ec50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ec52:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801ec56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801ec5e:	4a02      	ldr	r2, [pc, #8]	@ (801ec68 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801ec60:	430b      	orrs	r3, r1
 801ec62:	6593      	str	r3, [r2, #88]	@ 0x58
 801ec64:	e006      	b.n	801ec74 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801ec66:	bf00      	nop
 801ec68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ec6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ec70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ec74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ec7c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801ec80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ec84:	2300      	movs	r3, #0
 801ec86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ec8a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801ec8e:	460b      	mov	r3, r1
 801ec90:	4313      	orrs	r3, r2
 801ec92:	d055      	beq.n	801ed40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ec94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ec98:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ec9c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801eca0:	d033      	beq.n	801ed0a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801eca2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801eca6:	d82c      	bhi.n	801ed02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eca8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ecac:	d02f      	beq.n	801ed0e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801ecae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801ecb2:	d826      	bhi.n	801ed02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ecb4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ecb8:	d02b      	beq.n	801ed12 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801ecba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801ecbe:	d820      	bhi.n	801ed02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801ecc0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ecc4:	d012      	beq.n	801ecec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801ecc6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ecca:	d81a      	bhi.n	801ed02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d022      	beq.n	801ed16 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801ecd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ecd4:	d115      	bne.n	801ed02 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ecd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecda:	3308      	adds	r3, #8
 801ecdc:	2100      	movs	r1, #0
 801ecde:	4618      	mov	r0, r3
 801ece0:	f000 fdee 	bl	801f8c0 <RCCEx_PLL2_Config>
 801ece4:	4603      	mov	r3, r0
 801ece6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ecea:	e015      	b.n	801ed18 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ecec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ecf0:	3328      	adds	r3, #40	@ 0x28
 801ecf2:	2102      	movs	r1, #2
 801ecf4:	4618      	mov	r0, r3
 801ecf6:	f000 fe95 	bl	801fa24 <RCCEx_PLL3_Config>
 801ecfa:	4603      	mov	r3, r0
 801ecfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ed00:	e00a      	b.n	801ed18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ed02:	2301      	movs	r3, #1
 801ed04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ed08:	e006      	b.n	801ed18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed0a:	bf00      	nop
 801ed0c:	e004      	b.n	801ed18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed0e:	bf00      	nop
 801ed10:	e002      	b.n	801ed18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed12:	bf00      	nop
 801ed14:	e000      	b.n	801ed18 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801ed16:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ed18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed1c:	2b00      	cmp	r3, #0
 801ed1e:	d10b      	bne.n	801ed38 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801ed20:	4ba1      	ldr	r3, [pc, #644]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ed24:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801ed28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801ed30:	4a9d      	ldr	r2, [pc, #628]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed32:	430b      	orrs	r3, r1
 801ed34:	6593      	str	r3, [r2, #88]	@ 0x58
 801ed36:	e003      	b.n	801ed40 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ed38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ed3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801ed40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ed48:	f002 0308 	and.w	r3, r2, #8
 801ed4c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801ed50:	2300      	movs	r3, #0
 801ed52:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801ed56:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801ed5a:	460b      	mov	r3, r1
 801ed5c:	4313      	orrs	r3, r2
 801ed5e:	d01e      	beq.n	801ed9e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801ed60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ed68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ed6c:	d10c      	bne.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ed6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed72:	3328      	adds	r3, #40	@ 0x28
 801ed74:	2102      	movs	r1, #2
 801ed76:	4618      	mov	r0, r3
 801ed78:	f000 fe54 	bl	801fa24 <RCCEx_PLL3_Config>
 801ed7c:	4603      	mov	r3, r0
 801ed7e:	2b00      	cmp	r3, #0
 801ed80:	d002      	beq.n	801ed88 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801ed82:	2301      	movs	r3, #1
 801ed84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801ed88:	4b87      	ldr	r3, [pc, #540]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ed8c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801ed90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ed94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ed98:	4a83      	ldr	r2, [pc, #524]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ed9a:	430b      	orrs	r3, r1
 801ed9c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801ed9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eda2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eda6:	f002 0310 	and.w	r3, r2, #16
 801edaa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801edae:	2300      	movs	r3, #0
 801edb0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801edb4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801edb8:	460b      	mov	r3, r1
 801edba:	4313      	orrs	r3, r2
 801edbc:	d01e      	beq.n	801edfc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801edbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801edc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801edca:	d10c      	bne.n	801ede6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801edcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edd0:	3328      	adds	r3, #40	@ 0x28
 801edd2:	2102      	movs	r1, #2
 801edd4:	4618      	mov	r0, r3
 801edd6:	f000 fe25 	bl	801fa24 <RCCEx_PLL3_Config>
 801edda:	4603      	mov	r3, r0
 801eddc:	2b00      	cmp	r3, #0
 801edde:	d002      	beq.n	801ede6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801ede0:	2301      	movs	r3, #1
 801ede2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801ede6:	4b70      	ldr	r3, [pc, #448]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ede8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801edea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801edee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801edf2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801edf6:	4a6c      	ldr	r2, [pc, #432]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801edf8:	430b      	orrs	r3, r1
 801edfa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801edfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee00:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ee04:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801ee08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ee12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801ee16:	460b      	mov	r3, r1
 801ee18:	4313      	orrs	r3, r2
 801ee1a:	d03e      	beq.n	801ee9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801ee1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ee24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ee28:	d022      	beq.n	801ee70 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801ee2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ee2e:	d81b      	bhi.n	801ee68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d003      	beq.n	801ee3c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801ee34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ee38:	d00b      	beq.n	801ee52 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801ee3a:	e015      	b.n	801ee68 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ee3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee40:	3308      	adds	r3, #8
 801ee42:	2100      	movs	r1, #0
 801ee44:	4618      	mov	r0, r3
 801ee46:	f000 fd3b 	bl	801f8c0 <RCCEx_PLL2_Config>
 801ee4a:	4603      	mov	r3, r0
 801ee4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801ee50:	e00f      	b.n	801ee72 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ee52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee56:	3328      	adds	r3, #40	@ 0x28
 801ee58:	2102      	movs	r1, #2
 801ee5a:	4618      	mov	r0, r3
 801ee5c:	f000 fde2 	bl	801fa24 <RCCEx_PLL3_Config>
 801ee60:	4603      	mov	r3, r0
 801ee62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801ee66:	e004      	b.n	801ee72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ee68:	2301      	movs	r3, #1
 801ee6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ee6e:	e000      	b.n	801ee72 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801ee70:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ee72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d10b      	bne.n	801ee92 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801ee7a:	4b4b      	ldr	r3, [pc, #300]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ee7e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801ee82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801ee8a:	4a47      	ldr	r2, [pc, #284]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ee8c:	430b      	orrs	r3, r1
 801ee8e:	6593      	str	r3, [r2, #88]	@ 0x58
 801ee90:	e003      	b.n	801ee9a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ee92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ee96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801ee9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ee9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eea2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801eea6:	67bb      	str	r3, [r7, #120]	@ 0x78
 801eea8:	2300      	movs	r3, #0
 801eeaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801eeac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801eeb0:	460b      	mov	r3, r1
 801eeb2:	4313      	orrs	r3, r2
 801eeb4:	d03b      	beq.n	801ef2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801eeb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eeba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801eebe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801eec2:	d01f      	beq.n	801ef04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801eec4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801eec8:	d818      	bhi.n	801eefc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801eeca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801eece:	d003      	beq.n	801eed8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801eed0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801eed4:	d007      	beq.n	801eee6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801eed6:	e011      	b.n	801eefc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801eed8:	4b33      	ldr	r3, [pc, #204]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eeda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eedc:	4a32      	ldr	r2, [pc, #200]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801eede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801eee2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801eee4:	e00f      	b.n	801ef06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801eee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eeea:	3328      	adds	r3, #40	@ 0x28
 801eeec:	2101      	movs	r1, #1
 801eeee:	4618      	mov	r0, r3
 801eef0:	f000 fd98 	bl	801fa24 <RCCEx_PLL3_Config>
 801eef4:	4603      	mov	r3, r0
 801eef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801eefa:	e004      	b.n	801ef06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801eefc:	2301      	movs	r3, #1
 801eefe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ef02:	e000      	b.n	801ef06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801ef04:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ef06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef0a:	2b00      	cmp	r3, #0
 801ef0c:	d10b      	bne.n	801ef26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ef0e:	4b26      	ldr	r3, [pc, #152]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801ef12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801ef16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801ef1e:	4a22      	ldr	r2, [pc, #136]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef20:	430b      	orrs	r3, r1
 801ef22:	6553      	str	r3, [r2, #84]	@ 0x54
 801ef24:	e003      	b.n	801ef2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ef26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ef2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef36:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801ef3a:	673b      	str	r3, [r7, #112]	@ 0x70
 801ef3c:	2300      	movs	r3, #0
 801ef3e:	677b      	str	r3, [r7, #116]	@ 0x74
 801ef40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801ef44:	460b      	mov	r3, r1
 801ef46:	4313      	orrs	r3, r2
 801ef48:	d034      	beq.n	801efb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801ef4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ef50:	2b00      	cmp	r3, #0
 801ef52:	d003      	beq.n	801ef5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801ef54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ef58:	d007      	beq.n	801ef6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801ef5a:	e011      	b.n	801ef80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ef5c:	4b12      	ldr	r3, [pc, #72]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef60:	4a11      	ldr	r2, [pc, #68]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ef66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801ef68:	e00e      	b.n	801ef88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801ef6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef6e:	3308      	adds	r3, #8
 801ef70:	2102      	movs	r1, #2
 801ef72:	4618      	mov	r0, r3
 801ef74:	f000 fca4 	bl	801f8c0 <RCCEx_PLL2_Config>
 801ef78:	4603      	mov	r3, r0
 801ef7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801ef7e:	e003      	b.n	801ef88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801ef80:	2301      	movs	r3, #1
 801ef82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ef86:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ef88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d10d      	bne.n	801efac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801ef90:	4b05      	ldr	r3, [pc, #20]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801ef92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ef94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801ef98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ef9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ef9e:	4a02      	ldr	r2, [pc, #8]	@ (801efa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801efa0:	430b      	orrs	r3, r1
 801efa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801efa4:	e006      	b.n	801efb4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801efa6:	bf00      	nop
 801efa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801efac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801efb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801efb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801efbc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801efc0:	66bb      	str	r3, [r7, #104]	@ 0x68
 801efc2:	2300      	movs	r3, #0
 801efc4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801efc6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801efca:	460b      	mov	r3, r1
 801efcc:	4313      	orrs	r3, r2
 801efce:	d00c      	beq.n	801efea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801efd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efd4:	3328      	adds	r3, #40	@ 0x28
 801efd6:	2102      	movs	r1, #2
 801efd8:	4618      	mov	r0, r3
 801efda:	f000 fd23 	bl	801fa24 <RCCEx_PLL3_Config>
 801efde:	4603      	mov	r3, r0
 801efe0:	2b00      	cmp	r3, #0
 801efe2:	d002      	beq.n	801efea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801efe4:	2301      	movs	r3, #1
 801efe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801efea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801efee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eff2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801eff6:	663b      	str	r3, [r7, #96]	@ 0x60
 801eff8:	2300      	movs	r3, #0
 801effa:	667b      	str	r3, [r7, #100]	@ 0x64
 801effc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801f000:	460b      	mov	r3, r1
 801f002:	4313      	orrs	r3, r2
 801f004:	d038      	beq.n	801f078 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801f006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f00a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f00e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f012:	d018      	beq.n	801f046 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801f014:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f018:	d811      	bhi.n	801f03e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f01a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f01e:	d014      	beq.n	801f04a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801f020:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801f024:	d80b      	bhi.n	801f03e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801f026:	2b00      	cmp	r3, #0
 801f028:	d011      	beq.n	801f04e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801f02a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801f02e:	d106      	bne.n	801f03e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801f030:	4bc3      	ldr	r3, [pc, #780]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f034:	4ac2      	ldr	r2, [pc, #776]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801f03a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801f03c:	e008      	b.n	801f050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801f03e:	2301      	movs	r3, #1
 801f040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801f044:	e004      	b.n	801f050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f046:	bf00      	nop
 801f048:	e002      	b.n	801f050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f04a:	bf00      	nop
 801f04c:	e000      	b.n	801f050 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801f04e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801f050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f054:	2b00      	cmp	r3, #0
 801f056:	d10b      	bne.n	801f070 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801f058:	4bb9      	ldr	r3, [pc, #740]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f05a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f05c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801f060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801f068:	4ab5      	ldr	r2, [pc, #724]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f06a:	430b      	orrs	r3, r1
 801f06c:	6553      	str	r3, [r2, #84]	@ 0x54
 801f06e:	e003      	b.n	801f078 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801f078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f080:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801f084:	65bb      	str	r3, [r7, #88]	@ 0x58
 801f086:	2300      	movs	r3, #0
 801f088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801f08a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801f08e:	460b      	mov	r3, r1
 801f090:	4313      	orrs	r3, r2
 801f092:	d009      	beq.n	801f0a8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801f094:	4baa      	ldr	r3, [pc, #680]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f098:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f0a2:	4aa7      	ldr	r2, [pc, #668]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0a4:	430b      	orrs	r3, r1
 801f0a6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801f0a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0b0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801f0b4:	653b      	str	r3, [r7, #80]	@ 0x50
 801f0b6:	2300      	movs	r3, #0
 801f0b8:	657b      	str	r3, [r7, #84]	@ 0x54
 801f0ba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801f0be:	460b      	mov	r3, r1
 801f0c0:	4313      	orrs	r3, r2
 801f0c2:	d00a      	beq.n	801f0da <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801f0c4:	4b9e      	ldr	r3, [pc, #632]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0c6:	691b      	ldr	r3, [r3, #16]
 801f0c8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801f0cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0d0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801f0d4:	4a9a      	ldr	r2, [pc, #616]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0d6:	430b      	orrs	r3, r1
 801f0d8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801f0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f0e2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801f0e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801f0e8:	2300      	movs	r3, #0
 801f0ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801f0ec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801f0f0:	460b      	mov	r3, r1
 801f0f2:	4313      	orrs	r3, r2
 801f0f4:	d009      	beq.n	801f10a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801f0f6:	4b92      	ldr	r3, [pc, #584]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f0f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f0fa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801f0fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f102:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801f104:	4a8e      	ldr	r2, [pc, #568]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f106:	430b      	orrs	r3, r1
 801f108:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801f10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f112:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801f116:	643b      	str	r3, [r7, #64]	@ 0x40
 801f118:	2300      	movs	r3, #0
 801f11a:	647b      	str	r3, [r7, #68]	@ 0x44
 801f11c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801f120:	460b      	mov	r3, r1
 801f122:	4313      	orrs	r3, r2
 801f124:	d00e      	beq.n	801f144 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801f126:	4b86      	ldr	r3, [pc, #536]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f128:	691b      	ldr	r3, [r3, #16]
 801f12a:	4a85      	ldr	r2, [pc, #532]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f12c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801f130:	6113      	str	r3, [r2, #16]
 801f132:	4b83      	ldr	r3, [pc, #524]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f134:	6919      	ldr	r1, [r3, #16]
 801f136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f13a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801f13e:	4a80      	ldr	r2, [pc, #512]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f140:	430b      	orrs	r3, r1
 801f142:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801f144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f14c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801f150:	63bb      	str	r3, [r7, #56]	@ 0x38
 801f152:	2300      	movs	r3, #0
 801f154:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801f156:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801f15a:	460b      	mov	r3, r1
 801f15c:	4313      	orrs	r3, r2
 801f15e:	d009      	beq.n	801f174 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801f160:	4b77      	ldr	r3, [pc, #476]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f164:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801f168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f16e:	4a74      	ldr	r2, [pc, #464]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f170:	430b      	orrs	r3, r1
 801f172:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801f174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f178:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f17c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801f180:	633b      	str	r3, [r7, #48]	@ 0x30
 801f182:	2300      	movs	r3, #0
 801f184:	637b      	str	r3, [r7, #52]	@ 0x34
 801f186:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801f18a:	460b      	mov	r3, r1
 801f18c:	4313      	orrs	r3, r2
 801f18e:	d00a      	beq.n	801f1a6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801f190:	4b6b      	ldr	r3, [pc, #428]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f194:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801f198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f19c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801f1a0:	4a67      	ldr	r2, [pc, #412]	@ (801f340 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801f1a2:	430b      	orrs	r3, r1
 801f1a4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801f1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ae:	2100      	movs	r1, #0
 801f1b0:	62b9      	str	r1, [r7, #40]	@ 0x28
 801f1b2:	f003 0301 	and.w	r3, r3, #1
 801f1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801f1b8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801f1bc:	460b      	mov	r3, r1
 801f1be:	4313      	orrs	r3, r2
 801f1c0:	d011      	beq.n	801f1e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801f1c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1c6:	3308      	adds	r3, #8
 801f1c8:	2100      	movs	r1, #0
 801f1ca:	4618      	mov	r0, r3
 801f1cc:	f000 fb78 	bl	801f8c0 <RCCEx_PLL2_Config>
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f1d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f1da:	2b00      	cmp	r3, #0
 801f1dc:	d003      	beq.n	801f1e6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f1de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f1e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801f1e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f1ee:	2100      	movs	r1, #0
 801f1f0:	6239      	str	r1, [r7, #32]
 801f1f2:	f003 0302 	and.w	r3, r3, #2
 801f1f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801f1f8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801f1fc:	460b      	mov	r3, r1
 801f1fe:	4313      	orrs	r3, r2
 801f200:	d011      	beq.n	801f226 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801f202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f206:	3308      	adds	r3, #8
 801f208:	2101      	movs	r1, #1
 801f20a:	4618      	mov	r0, r3
 801f20c:	f000 fb58 	bl	801f8c0 <RCCEx_PLL2_Config>
 801f210:	4603      	mov	r3, r0
 801f212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d003      	beq.n	801f226 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f21e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801f226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f22e:	2100      	movs	r1, #0
 801f230:	61b9      	str	r1, [r7, #24]
 801f232:	f003 0304 	and.w	r3, r3, #4
 801f236:	61fb      	str	r3, [r7, #28]
 801f238:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801f23c:	460b      	mov	r3, r1
 801f23e:	4313      	orrs	r3, r2
 801f240:	d011      	beq.n	801f266 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801f242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f246:	3308      	adds	r3, #8
 801f248:	2102      	movs	r1, #2
 801f24a:	4618      	mov	r0, r3
 801f24c:	f000 fb38 	bl	801f8c0 <RCCEx_PLL2_Config>
 801f250:	4603      	mov	r3, r0
 801f252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f256:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d003      	beq.n	801f266 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f25e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801f266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f26e:	2100      	movs	r1, #0
 801f270:	6139      	str	r1, [r7, #16]
 801f272:	f003 0308 	and.w	r3, r3, #8
 801f276:	617b      	str	r3, [r7, #20]
 801f278:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801f27c:	460b      	mov	r3, r1
 801f27e:	4313      	orrs	r3, r2
 801f280:	d011      	beq.n	801f2a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801f282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f286:	3328      	adds	r3, #40	@ 0x28
 801f288:	2100      	movs	r1, #0
 801f28a:	4618      	mov	r0, r3
 801f28c:	f000 fbca 	bl	801fa24 <RCCEx_PLL3_Config>
 801f290:	4603      	mov	r3, r0
 801f292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801f296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	d003      	beq.n	801f2a6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f29e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801f2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ae:	2100      	movs	r1, #0
 801f2b0:	60b9      	str	r1, [r7, #8]
 801f2b2:	f003 0310 	and.w	r3, r3, #16
 801f2b6:	60fb      	str	r3, [r7, #12]
 801f2b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801f2bc:	460b      	mov	r3, r1
 801f2be:	4313      	orrs	r3, r2
 801f2c0:	d011      	beq.n	801f2e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801f2c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2c6:	3328      	adds	r3, #40	@ 0x28
 801f2c8:	2101      	movs	r1, #1
 801f2ca:	4618      	mov	r0, r3
 801f2cc:	f000 fbaa 	bl	801fa24 <RCCEx_PLL3_Config>
 801f2d0:	4603      	mov	r3, r0
 801f2d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f2d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	d003      	beq.n	801f2e6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f2de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f2e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801f2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f2ee:	2100      	movs	r1, #0
 801f2f0:	6039      	str	r1, [r7, #0]
 801f2f2:	f003 0320 	and.w	r3, r3, #32
 801f2f6:	607b      	str	r3, [r7, #4]
 801f2f8:	e9d7 1200 	ldrd	r1, r2, [r7]
 801f2fc:	460b      	mov	r3, r1
 801f2fe:	4313      	orrs	r3, r2
 801f300:	d011      	beq.n	801f326 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801f302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801f306:	3328      	adds	r3, #40	@ 0x28
 801f308:	2102      	movs	r1, #2
 801f30a:	4618      	mov	r0, r3
 801f30c:	f000 fb8a 	bl	801fa24 <RCCEx_PLL3_Config>
 801f310:	4603      	mov	r3, r0
 801f312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801f316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d003      	beq.n	801f326 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801f31e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801f322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801f326:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801f32a:	2b00      	cmp	r3, #0
 801f32c:	d101      	bne.n	801f332 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801f32e:	2300      	movs	r3, #0
 801f330:	e000      	b.n	801f334 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801f332:	2301      	movs	r3, #1
}
 801f334:	4618      	mov	r0, r3
 801f336:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801f33a:	46bd      	mov	sp, r7
 801f33c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801f340:	58024400 	.word	0x58024400

0801f344 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801f344:	b580      	push	{r7, lr}
 801f346:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801f348:	f7fe fd96 	bl	801de78 <HAL_RCC_GetHCLKFreq>
 801f34c:	4602      	mov	r2, r0
 801f34e:	4b06      	ldr	r3, [pc, #24]	@ (801f368 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801f350:	6a1b      	ldr	r3, [r3, #32]
 801f352:	091b      	lsrs	r3, r3, #4
 801f354:	f003 0307 	and.w	r3, r3, #7
 801f358:	4904      	ldr	r1, [pc, #16]	@ (801f36c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801f35a:	5ccb      	ldrb	r3, [r1, r3]
 801f35c:	f003 031f 	and.w	r3, r3, #31
 801f360:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801f364:	4618      	mov	r0, r3
 801f366:	bd80      	pop	{r7, pc}
 801f368:	58024400 	.word	0x58024400
 801f36c:	08027e94 	.word	0x08027e94

0801f370 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801f370:	b480      	push	{r7}
 801f372:	b089      	sub	sp, #36	@ 0x24
 801f374:	af00      	add	r7, sp, #0
 801f376:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f378:	4ba1      	ldr	r3, [pc, #644]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f37a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f37c:	f003 0303 	and.w	r3, r3, #3
 801f380:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801f382:	4b9f      	ldr	r3, [pc, #636]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f386:	0b1b      	lsrs	r3, r3, #12
 801f388:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f38c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801f38e:	4b9c      	ldr	r3, [pc, #624]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f392:	091b      	lsrs	r3, r3, #4
 801f394:	f003 0301 	and.w	r3, r3, #1
 801f398:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801f39a:	4b99      	ldr	r3, [pc, #612]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f39c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f39e:	08db      	lsrs	r3, r3, #3
 801f3a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f3a4:	693a      	ldr	r2, [r7, #16]
 801f3a6:	fb02 f303 	mul.w	r3, r2, r3
 801f3aa:	ee07 3a90 	vmov	s15, r3
 801f3ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f3b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801f3b6:	697b      	ldr	r3, [r7, #20]
 801f3b8:	2b00      	cmp	r3, #0
 801f3ba:	f000 8111 	beq.w	801f5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801f3be:	69bb      	ldr	r3, [r7, #24]
 801f3c0:	2b02      	cmp	r3, #2
 801f3c2:	f000 8083 	beq.w	801f4cc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801f3c6:	69bb      	ldr	r3, [r7, #24]
 801f3c8:	2b02      	cmp	r3, #2
 801f3ca:	f200 80a1 	bhi.w	801f510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801f3ce:	69bb      	ldr	r3, [r7, #24]
 801f3d0:	2b00      	cmp	r3, #0
 801f3d2:	d003      	beq.n	801f3dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801f3d4:	69bb      	ldr	r3, [r7, #24]
 801f3d6:	2b01      	cmp	r3, #1
 801f3d8:	d056      	beq.n	801f488 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801f3da:	e099      	b.n	801f510 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f3dc:	4b88      	ldr	r3, [pc, #544]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3de:	681b      	ldr	r3, [r3, #0]
 801f3e0:	f003 0320 	and.w	r3, r3, #32
 801f3e4:	2b00      	cmp	r3, #0
 801f3e6:	d02d      	beq.n	801f444 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f3e8:	4b85      	ldr	r3, [pc, #532]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	08db      	lsrs	r3, r3, #3
 801f3ee:	f003 0303 	and.w	r3, r3, #3
 801f3f2:	4a84      	ldr	r2, [pc, #528]	@ (801f604 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801f3f4:	fa22 f303 	lsr.w	r3, r2, r3
 801f3f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f3fa:	68bb      	ldr	r3, [r7, #8]
 801f3fc:	ee07 3a90 	vmov	s15, r3
 801f400:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f404:	697b      	ldr	r3, [r7, #20]
 801f406:	ee07 3a90 	vmov	s15, r3
 801f40a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f40e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f412:	4b7b      	ldr	r3, [pc, #492]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f41a:	ee07 3a90 	vmov	s15, r3
 801f41e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f422:	ed97 6a03 	vldr	s12, [r7, #12]
 801f426:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f42a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f42e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f43a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f43e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f442:	e087      	b.n	801f554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f444:	697b      	ldr	r3, [r7, #20]
 801f446:	ee07 3a90 	vmov	s15, r3
 801f44a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f44e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f60c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801f452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f456:	4b6a      	ldr	r3, [pc, #424]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f45a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f45e:	ee07 3a90 	vmov	s15, r3
 801f462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f466:	ed97 6a03 	vldr	s12, [r7, #12]
 801f46a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f46e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f47a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f47e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f486:	e065      	b.n	801f554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f488:	697b      	ldr	r3, [r7, #20]
 801f48a:	ee07 3a90 	vmov	s15, r3
 801f48e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f492:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f49a:	4b59      	ldr	r3, [pc, #356]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f49c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f49e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f4a2:	ee07 3a90 	vmov	s15, r3
 801f4a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f4aa:	ed97 6a03 	vldr	s12, [r7, #12]
 801f4ae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f4b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f4b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f4ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f4be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f4c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f4c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f4ca:	e043      	b.n	801f554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f4cc:	697b      	ldr	r3, [r7, #20]
 801f4ce:	ee07 3a90 	vmov	s15, r3
 801f4d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f4d6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f614 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801f4da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f4de:	4b48      	ldr	r3, [pc, #288]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f4e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f4e6:	ee07 3a90 	vmov	s15, r3
 801f4ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f4ee:	ed97 6a03 	vldr	s12, [r7, #12]
 801f4f2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f4f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f4fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f4fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f506:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f50a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f50e:	e021      	b.n	801f554 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801f510:	697b      	ldr	r3, [r7, #20]
 801f512:	ee07 3a90 	vmov	s15, r3
 801f516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f51a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f610 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801f51e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f522:	4b37      	ldr	r3, [pc, #220]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f52a:	ee07 3a90 	vmov	s15, r3
 801f52e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f532:	ed97 6a03 	vldr	s12, [r7, #12]
 801f536:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f608 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801f53a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f53e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f54a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f54e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f552:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801f554:	4b2a      	ldr	r3, [pc, #168]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f558:	0a5b      	lsrs	r3, r3, #9
 801f55a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f55e:	ee07 3a90 	vmov	s15, r3
 801f562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f566:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f56a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f56e:	edd7 6a07 	vldr	s13, [r7, #28]
 801f572:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f576:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f57a:	ee17 2a90 	vmov	r2, s15
 801f57e:	687b      	ldr	r3, [r7, #4]
 801f580:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801f582:	4b1f      	ldr	r3, [pc, #124]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f586:	0c1b      	lsrs	r3, r3, #16
 801f588:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f58c:	ee07 3a90 	vmov	s15, r3
 801f590:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f594:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f598:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f59c:	edd7 6a07 	vldr	s13, [r7, #28]
 801f5a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f5a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f5a8:	ee17 2a90 	vmov	r2, s15
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801f5b0:	4b13      	ldr	r3, [pc, #76]	@ (801f600 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801f5b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f5b4:	0e1b      	lsrs	r3, r3, #24
 801f5b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f5ba:	ee07 3a90 	vmov	s15, r3
 801f5be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f5c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f5c6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f5ca:	edd7 6a07 	vldr	s13, [r7, #28]
 801f5ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f5d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f5d6:	ee17 2a90 	vmov	r2, s15
 801f5da:	687b      	ldr	r3, [r7, #4]
 801f5dc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801f5de:	e008      	b.n	801f5f2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801f5e0:	687b      	ldr	r3, [r7, #4]
 801f5e2:	2200      	movs	r2, #0
 801f5e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	2200      	movs	r2, #0
 801f5ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	2200      	movs	r2, #0
 801f5f0:	609a      	str	r2, [r3, #8]
}
 801f5f2:	bf00      	nop
 801f5f4:	3724      	adds	r7, #36	@ 0x24
 801f5f6:	46bd      	mov	sp, r7
 801f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5fc:	4770      	bx	lr
 801f5fe:	bf00      	nop
 801f600:	58024400 	.word	0x58024400
 801f604:	03d09000 	.word	0x03d09000
 801f608:	46000000 	.word	0x46000000
 801f60c:	4c742400 	.word	0x4c742400
 801f610:	4a742400 	.word	0x4a742400
 801f614:	4bbebc20 	.word	0x4bbebc20

0801f618 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801f618:	b480      	push	{r7}
 801f61a:	b089      	sub	sp, #36	@ 0x24
 801f61c:	af00      	add	r7, sp, #0
 801f61e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801f620:	4ba1      	ldr	r3, [pc, #644]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f624:	f003 0303 	and.w	r3, r3, #3
 801f628:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801f62a:	4b9f      	ldr	r3, [pc, #636]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f62c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f62e:	0d1b      	lsrs	r3, r3, #20
 801f630:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801f634:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801f636:	4b9c      	ldr	r3, [pc, #624]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f63a:	0a1b      	lsrs	r3, r3, #8
 801f63c:	f003 0301 	and.w	r3, r3, #1
 801f640:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801f642:	4b99      	ldr	r3, [pc, #612]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801f646:	08db      	lsrs	r3, r3, #3
 801f648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f64c:	693a      	ldr	r2, [r7, #16]
 801f64e:	fb02 f303 	mul.w	r3, r2, r3
 801f652:	ee07 3a90 	vmov	s15, r3
 801f656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f65a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801f65e:	697b      	ldr	r3, [r7, #20]
 801f660:	2b00      	cmp	r3, #0
 801f662:	f000 8111 	beq.w	801f888 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801f666:	69bb      	ldr	r3, [r7, #24]
 801f668:	2b02      	cmp	r3, #2
 801f66a:	f000 8083 	beq.w	801f774 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801f66e:	69bb      	ldr	r3, [r7, #24]
 801f670:	2b02      	cmp	r3, #2
 801f672:	f200 80a1 	bhi.w	801f7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801f676:	69bb      	ldr	r3, [r7, #24]
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d003      	beq.n	801f684 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801f67c:	69bb      	ldr	r3, [r7, #24]
 801f67e:	2b01      	cmp	r3, #1
 801f680:	d056      	beq.n	801f730 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801f682:	e099      	b.n	801f7b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f684:	4b88      	ldr	r3, [pc, #544]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f686:	681b      	ldr	r3, [r3, #0]
 801f688:	f003 0320 	and.w	r3, r3, #32
 801f68c:	2b00      	cmp	r3, #0
 801f68e:	d02d      	beq.n	801f6ec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801f690:	4b85      	ldr	r3, [pc, #532]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f692:	681b      	ldr	r3, [r3, #0]
 801f694:	08db      	lsrs	r3, r3, #3
 801f696:	f003 0303 	and.w	r3, r3, #3
 801f69a:	4a84      	ldr	r2, [pc, #528]	@ (801f8ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801f69c:	fa22 f303 	lsr.w	r3, r2, r3
 801f6a0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f6a2:	68bb      	ldr	r3, [r7, #8]
 801f6a4:	ee07 3a90 	vmov	s15, r3
 801f6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6ac:	697b      	ldr	r3, [r7, #20]
 801f6ae:	ee07 3a90 	vmov	s15, r3
 801f6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f6ba:	4b7b      	ldr	r3, [pc, #492]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f6c2:	ee07 3a90 	vmov	s15, r3
 801f6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f6ca:	ed97 6a03 	vldr	s12, [r7, #12]
 801f6ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f6da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f6e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801f6ea:	e087      	b.n	801f7fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f6ec:	697b      	ldr	r3, [r7, #20]
 801f6ee:	ee07 3a90 	vmov	s15, r3
 801f6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f6f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801f6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f6fe:	4b6a      	ldr	r3, [pc, #424]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f706:	ee07 3a90 	vmov	s15, r3
 801f70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f70e:	ed97 6a03 	vldr	s12, [r7, #12]
 801f712:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f71e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f726:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f72a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f72e:	e065      	b.n	801f7fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f730:	697b      	ldr	r3, [r7, #20]
 801f732:	ee07 3a90 	vmov	s15, r3
 801f736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f73a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f742:	4b59      	ldr	r3, [pc, #356]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f74a:	ee07 3a90 	vmov	s15, r3
 801f74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f752:	ed97 6a03 	vldr	s12, [r7, #12]
 801f756:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f76e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f772:	e043      	b.n	801f7fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f774:	697b      	ldr	r3, [r7, #20]
 801f776:	ee07 3a90 	vmov	s15, r3
 801f77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f77e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f8bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801f782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f786:	4b48      	ldr	r3, [pc, #288]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f78e:	ee07 3a90 	vmov	s15, r3
 801f792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f796:	ed97 6a03 	vldr	s12, [r7, #12]
 801f79a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f7b6:	e021      	b.n	801f7fc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801f7b8:	697b      	ldr	r3, [r7, #20]
 801f7ba:	ee07 3a90 	vmov	s15, r3
 801f7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f7c2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f8b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801f7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801f7ca:	4b37      	ldr	r3, [pc, #220]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f7cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801f7d2:	ee07 3a90 	vmov	s15, r3
 801f7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f7da:	ed97 6a03 	vldr	s12, [r7, #12]
 801f7de:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f8b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801f7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801f7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801f7ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801f7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801f7f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801f7fa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801f7fc:	4b2a      	ldr	r3, [pc, #168]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f7fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f800:	0a5b      	lsrs	r3, r3, #9
 801f802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f806:	ee07 3a90 	vmov	s15, r3
 801f80a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f80e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f812:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f816:	edd7 6a07 	vldr	s13, [r7, #28]
 801f81a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f81e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f822:	ee17 2a90 	vmov	r2, s15
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801f82a:	4b1f      	ldr	r3, [pc, #124]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f82c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f82e:	0c1b      	lsrs	r3, r3, #16
 801f830:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f834:	ee07 3a90 	vmov	s15, r3
 801f838:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f83c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f840:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f844:	edd7 6a07 	vldr	s13, [r7, #28]
 801f848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f84c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f850:	ee17 2a90 	vmov	r2, s15
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801f858:	4b13      	ldr	r3, [pc, #76]	@ (801f8a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801f85a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f85c:	0e1b      	lsrs	r3, r3, #24
 801f85e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f862:	ee07 3a90 	vmov	s15, r3
 801f866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f86a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f86e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f872:	edd7 6a07 	vldr	s13, [r7, #28]
 801f876:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f87a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f87e:	ee17 2a90 	vmov	r2, s15
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f886:	e008      	b.n	801f89a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f888:	687b      	ldr	r3, [r7, #4]
 801f88a:	2200      	movs	r2, #0
 801f88c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f88e:	687b      	ldr	r3, [r7, #4]
 801f890:	2200      	movs	r2, #0
 801f892:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	2200      	movs	r2, #0
 801f898:	609a      	str	r2, [r3, #8]
}
 801f89a:	bf00      	nop
 801f89c:	3724      	adds	r7, #36	@ 0x24
 801f89e:	46bd      	mov	sp, r7
 801f8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8a4:	4770      	bx	lr
 801f8a6:	bf00      	nop
 801f8a8:	58024400 	.word	0x58024400
 801f8ac:	03d09000 	.word	0x03d09000
 801f8b0:	46000000 	.word	0x46000000
 801f8b4:	4c742400 	.word	0x4c742400
 801f8b8:	4a742400 	.word	0x4a742400
 801f8bc:	4bbebc20 	.word	0x4bbebc20

0801f8c0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b084      	sub	sp, #16
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	6078      	str	r0, [r7, #4]
 801f8c8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f8ca:	2300      	movs	r3, #0
 801f8cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f8ce:	4b53      	ldr	r3, [pc, #332]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f8d2:	f003 0303 	and.w	r3, r3, #3
 801f8d6:	2b03      	cmp	r3, #3
 801f8d8:	d101      	bne.n	801f8de <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f8da:	2301      	movs	r3, #1
 801f8dc:	e099      	b.n	801fa12 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f8de:	4b4f      	ldr	r3, [pc, #316]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	4a4e      	ldr	r2, [pc, #312]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f8e4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f8e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f8ea:	f7fa ff23 	bl	801a734 <HAL_GetTick>
 801f8ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f8f0:	e008      	b.n	801f904 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f8f2:	f7fa ff1f 	bl	801a734 <HAL_GetTick>
 801f8f6:	4602      	mov	r2, r0
 801f8f8:	68bb      	ldr	r3, [r7, #8]
 801f8fa:	1ad3      	subs	r3, r2, r3
 801f8fc:	2b02      	cmp	r3, #2
 801f8fe:	d901      	bls.n	801f904 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f900:	2303      	movs	r3, #3
 801f902:	e086      	b.n	801fa12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f904:	4b45      	ldr	r3, [pc, #276]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f906:	681b      	ldr	r3, [r3, #0]
 801f908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f90c:	2b00      	cmp	r3, #0
 801f90e:	d1f0      	bne.n	801f8f2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f910:	4b42      	ldr	r3, [pc, #264]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f914:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f918:	687b      	ldr	r3, [r7, #4]
 801f91a:	681b      	ldr	r3, [r3, #0]
 801f91c:	031b      	lsls	r3, r3, #12
 801f91e:	493f      	ldr	r1, [pc, #252]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f920:	4313      	orrs	r3, r2
 801f922:	628b      	str	r3, [r1, #40]	@ 0x28
 801f924:	687b      	ldr	r3, [r7, #4]
 801f926:	685b      	ldr	r3, [r3, #4]
 801f928:	3b01      	subs	r3, #1
 801f92a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f92e:	687b      	ldr	r3, [r7, #4]
 801f930:	689b      	ldr	r3, [r3, #8]
 801f932:	3b01      	subs	r3, #1
 801f934:	025b      	lsls	r3, r3, #9
 801f936:	b29b      	uxth	r3, r3
 801f938:	431a      	orrs	r2, r3
 801f93a:	687b      	ldr	r3, [r7, #4]
 801f93c:	68db      	ldr	r3, [r3, #12]
 801f93e:	3b01      	subs	r3, #1
 801f940:	041b      	lsls	r3, r3, #16
 801f942:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f946:	431a      	orrs	r2, r3
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	691b      	ldr	r3, [r3, #16]
 801f94c:	3b01      	subs	r3, #1
 801f94e:	061b      	lsls	r3, r3, #24
 801f950:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f954:	4931      	ldr	r1, [pc, #196]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f956:	4313      	orrs	r3, r2
 801f958:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f95a:	4b30      	ldr	r3, [pc, #192]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f95e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f962:	687b      	ldr	r3, [r7, #4]
 801f964:	695b      	ldr	r3, [r3, #20]
 801f966:	492d      	ldr	r1, [pc, #180]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f968:	4313      	orrs	r3, r2
 801f96a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f96c:	4b2b      	ldr	r3, [pc, #172]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f96e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f970:	f023 0220 	bic.w	r2, r3, #32
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	699b      	ldr	r3, [r3, #24]
 801f978:	4928      	ldr	r1, [pc, #160]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f97a:	4313      	orrs	r3, r2
 801f97c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f97e:	4b27      	ldr	r3, [pc, #156]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f982:	4a26      	ldr	r2, [pc, #152]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f984:	f023 0310 	bic.w	r3, r3, #16
 801f988:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f98a:	4b24      	ldr	r3, [pc, #144]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f98c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f98e:	4b24      	ldr	r3, [pc, #144]	@ (801fa20 <RCCEx_PLL2_Config+0x160>)
 801f990:	4013      	ands	r3, r2
 801f992:	687a      	ldr	r2, [r7, #4]
 801f994:	69d2      	ldr	r2, [r2, #28]
 801f996:	00d2      	lsls	r2, r2, #3
 801f998:	4920      	ldr	r1, [pc, #128]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f99a:	4313      	orrs	r3, r2
 801f99c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f99e:	4b1f      	ldr	r3, [pc, #124]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9a2:	4a1e      	ldr	r2, [pc, #120]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9a4:	f043 0310 	orr.w	r3, r3, #16
 801f9a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f9aa:	683b      	ldr	r3, [r7, #0]
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	d106      	bne.n	801f9be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801f9b0:	4b1a      	ldr	r3, [pc, #104]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9b4:	4a19      	ldr	r2, [pc, #100]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9b6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f9ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f9bc:	e00f      	b.n	801f9de <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f9be:	683b      	ldr	r3, [r7, #0]
 801f9c0:	2b01      	cmp	r3, #1
 801f9c2:	d106      	bne.n	801f9d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801f9c4:	4b15      	ldr	r3, [pc, #84]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9c8:	4a14      	ldr	r2, [pc, #80]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f9ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f9d0:	e005      	b.n	801f9de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801f9d2:	4b12      	ldr	r3, [pc, #72]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9d6:	4a11      	ldr	r2, [pc, #68]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801f9dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801f9de:	4b0f      	ldr	r3, [pc, #60]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	4a0e      	ldr	r2, [pc, #56]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801f9e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f9e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f9ea:	f7fa fea3 	bl	801a734 <HAL_GetTick>
 801f9ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f9f0:	e008      	b.n	801fa04 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f9f2:	f7fa fe9f 	bl	801a734 <HAL_GetTick>
 801f9f6:	4602      	mov	r2, r0
 801f9f8:	68bb      	ldr	r3, [r7, #8]
 801f9fa:	1ad3      	subs	r3, r2, r3
 801f9fc:	2b02      	cmp	r3, #2
 801f9fe:	d901      	bls.n	801fa04 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fa00:	2303      	movs	r3, #3
 801fa02:	e006      	b.n	801fa12 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801fa04:	4b05      	ldr	r3, [pc, #20]	@ (801fa1c <RCCEx_PLL2_Config+0x15c>)
 801fa06:	681b      	ldr	r3, [r3, #0]
 801fa08:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801fa0c:	2b00      	cmp	r3, #0
 801fa0e:	d0f0      	beq.n	801f9f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801fa10:	7bfb      	ldrb	r3, [r7, #15]
}
 801fa12:	4618      	mov	r0, r3
 801fa14:	3710      	adds	r7, #16
 801fa16:	46bd      	mov	sp, r7
 801fa18:	bd80      	pop	{r7, pc}
 801fa1a:	bf00      	nop
 801fa1c:	58024400 	.word	0x58024400
 801fa20:	ffff0007 	.word	0xffff0007

0801fa24 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801fa24:	b580      	push	{r7, lr}
 801fa26:	b084      	sub	sp, #16
 801fa28:	af00      	add	r7, sp, #0
 801fa2a:	6078      	str	r0, [r7, #4]
 801fa2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801fa2e:	2300      	movs	r3, #0
 801fa30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801fa32:	4b53      	ldr	r3, [pc, #332]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fa34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa36:	f003 0303 	and.w	r3, r3, #3
 801fa3a:	2b03      	cmp	r3, #3
 801fa3c:	d101      	bne.n	801fa42 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801fa3e:	2301      	movs	r3, #1
 801fa40:	e099      	b.n	801fb76 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801fa42:	4b4f      	ldr	r3, [pc, #316]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fa44:	681b      	ldr	r3, [r3, #0]
 801fa46:	4a4e      	ldr	r2, [pc, #312]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fa48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801fa4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fa4e:	f7fa fe71 	bl	801a734 <HAL_GetTick>
 801fa52:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fa54:	e008      	b.n	801fa68 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fa56:	f7fa fe6d 	bl	801a734 <HAL_GetTick>
 801fa5a:	4602      	mov	r2, r0
 801fa5c:	68bb      	ldr	r3, [r7, #8]
 801fa5e:	1ad3      	subs	r3, r2, r3
 801fa60:	2b02      	cmp	r3, #2
 801fa62:	d901      	bls.n	801fa68 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801fa64:	2303      	movs	r3, #3
 801fa66:	e086      	b.n	801fb76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801fa68:	4b45      	ldr	r3, [pc, #276]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fa6a:	681b      	ldr	r3, [r3, #0]
 801fa6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fa70:	2b00      	cmp	r3, #0
 801fa72:	d1f0      	bne.n	801fa56 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801fa74:	4b42      	ldr	r3, [pc, #264]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fa76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fa78:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801fa7c:	687b      	ldr	r3, [r7, #4]
 801fa7e:	681b      	ldr	r3, [r3, #0]
 801fa80:	051b      	lsls	r3, r3, #20
 801fa82:	493f      	ldr	r1, [pc, #252]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fa84:	4313      	orrs	r3, r2
 801fa86:	628b      	str	r3, [r1, #40]	@ 0x28
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	685b      	ldr	r3, [r3, #4]
 801fa8c:	3b01      	subs	r3, #1
 801fa8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801fa92:	687b      	ldr	r3, [r7, #4]
 801fa94:	689b      	ldr	r3, [r3, #8]
 801fa96:	3b01      	subs	r3, #1
 801fa98:	025b      	lsls	r3, r3, #9
 801fa9a:	b29b      	uxth	r3, r3
 801fa9c:	431a      	orrs	r2, r3
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	68db      	ldr	r3, [r3, #12]
 801faa2:	3b01      	subs	r3, #1
 801faa4:	041b      	lsls	r3, r3, #16
 801faa6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801faaa:	431a      	orrs	r2, r3
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	691b      	ldr	r3, [r3, #16]
 801fab0:	3b01      	subs	r3, #1
 801fab2:	061b      	lsls	r3, r3, #24
 801fab4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801fab8:	4931      	ldr	r1, [pc, #196]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801faba:	4313      	orrs	r3, r2
 801fabc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801fabe:	4b30      	ldr	r3, [pc, #192]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fac2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801fac6:	687b      	ldr	r3, [r7, #4]
 801fac8:	695b      	ldr	r3, [r3, #20]
 801faca:	492d      	ldr	r1, [pc, #180]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801facc:	4313      	orrs	r3, r2
 801face:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801fad0:	4b2b      	ldr	r3, [pc, #172]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fad4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801fad8:	687b      	ldr	r3, [r7, #4]
 801fada:	699b      	ldr	r3, [r3, #24]
 801fadc:	4928      	ldr	r1, [pc, #160]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fade:	4313      	orrs	r3, r2
 801fae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801fae2:	4b27      	ldr	r3, [pc, #156]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fae6:	4a26      	ldr	r2, [pc, #152]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801faec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801faee:	4b24      	ldr	r3, [pc, #144]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801faf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801faf2:	4b24      	ldr	r3, [pc, #144]	@ (801fb84 <RCCEx_PLL3_Config+0x160>)
 801faf4:	4013      	ands	r3, r2
 801faf6:	687a      	ldr	r2, [r7, #4]
 801faf8:	69d2      	ldr	r2, [r2, #28]
 801fafa:	00d2      	lsls	r2, r2, #3
 801fafc:	4920      	ldr	r1, [pc, #128]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fafe:	4313      	orrs	r3, r2
 801fb00:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801fb02:	4b1f      	ldr	r3, [pc, #124]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb06:	4a1e      	ldr	r2, [pc, #120]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801fb0c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801fb0e:	683b      	ldr	r3, [r7, #0]
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d106      	bne.n	801fb22 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801fb14:	4b1a      	ldr	r3, [pc, #104]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb18:	4a19      	ldr	r2, [pc, #100]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb1a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801fb1e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fb20:	e00f      	b.n	801fb42 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801fb22:	683b      	ldr	r3, [r7, #0]
 801fb24:	2b01      	cmp	r3, #1
 801fb26:	d106      	bne.n	801fb36 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801fb28:	4b15      	ldr	r3, [pc, #84]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb2c:	4a14      	ldr	r2, [pc, #80]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb2e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801fb32:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801fb34:	e005      	b.n	801fb42 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801fb36:	4b12      	ldr	r3, [pc, #72]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb3a:	4a11      	ldr	r2, [pc, #68]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb3c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801fb40:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801fb42:	4b0f      	ldr	r3, [pc, #60]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb44:	681b      	ldr	r3, [r3, #0]
 801fb46:	4a0e      	ldr	r2, [pc, #56]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801fb4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801fb4e:	f7fa fdf1 	bl	801a734 <HAL_GetTick>
 801fb52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fb54:	e008      	b.n	801fb68 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801fb56:	f7fa fded 	bl	801a734 <HAL_GetTick>
 801fb5a:	4602      	mov	r2, r0
 801fb5c:	68bb      	ldr	r3, [r7, #8]
 801fb5e:	1ad3      	subs	r3, r2, r3
 801fb60:	2b02      	cmp	r3, #2
 801fb62:	d901      	bls.n	801fb68 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801fb64:	2303      	movs	r3, #3
 801fb66:	e006      	b.n	801fb76 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801fb68:	4b05      	ldr	r3, [pc, #20]	@ (801fb80 <RCCEx_PLL3_Config+0x15c>)
 801fb6a:	681b      	ldr	r3, [r3, #0]
 801fb6c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801fb70:	2b00      	cmp	r3, #0
 801fb72:	d0f0      	beq.n	801fb56 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801fb74:	7bfb      	ldrb	r3, [r7, #15]
}
 801fb76:	4618      	mov	r0, r3
 801fb78:	3710      	adds	r7, #16
 801fb7a:	46bd      	mov	sp, r7
 801fb7c:	bd80      	pop	{r7, pc}
 801fb7e:	bf00      	nop
 801fb80:	58024400 	.word	0x58024400
 801fb84:	ffff0007 	.word	0xffff0007

0801fb88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801fb88:	b580      	push	{r7, lr}
 801fb8a:	b084      	sub	sp, #16
 801fb8c:	af00      	add	r7, sp, #0
 801fb8e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801fb90:	687b      	ldr	r3, [r7, #4]
 801fb92:	2b00      	cmp	r3, #0
 801fb94:	d101      	bne.n	801fb9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801fb96:	2301      	movs	r3, #1
 801fb98:	e10f      	b.n	801fdba <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	2200      	movs	r2, #0
 801fb9e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801fba0:	687b      	ldr	r3, [r7, #4]
 801fba2:	681b      	ldr	r3, [r3, #0]
 801fba4:	4a87      	ldr	r2, [pc, #540]	@ (801fdc4 <HAL_SPI_Init+0x23c>)
 801fba6:	4293      	cmp	r3, r2
 801fba8:	d00f      	beq.n	801fbca <HAL_SPI_Init+0x42>
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	4a86      	ldr	r2, [pc, #536]	@ (801fdc8 <HAL_SPI_Init+0x240>)
 801fbb0:	4293      	cmp	r3, r2
 801fbb2:	d00a      	beq.n	801fbca <HAL_SPI_Init+0x42>
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	4a84      	ldr	r2, [pc, #528]	@ (801fdcc <HAL_SPI_Init+0x244>)
 801fbba:	4293      	cmp	r3, r2
 801fbbc:	d005      	beq.n	801fbca <HAL_SPI_Init+0x42>
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	68db      	ldr	r3, [r3, #12]
 801fbc2:	2b0f      	cmp	r3, #15
 801fbc4:	d901      	bls.n	801fbca <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801fbc6:	2301      	movs	r3, #1
 801fbc8:	e0f7      	b.n	801fdba <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801fbca:	6878      	ldr	r0, [r7, #4]
 801fbcc:	f000 fbba 	bl	8020344 <SPI_GetPacketSize>
 801fbd0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	4a7b      	ldr	r2, [pc, #492]	@ (801fdc4 <HAL_SPI_Init+0x23c>)
 801fbd8:	4293      	cmp	r3, r2
 801fbda:	d00c      	beq.n	801fbf6 <HAL_SPI_Init+0x6e>
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	4a79      	ldr	r2, [pc, #484]	@ (801fdc8 <HAL_SPI_Init+0x240>)
 801fbe2:	4293      	cmp	r3, r2
 801fbe4:	d007      	beq.n	801fbf6 <HAL_SPI_Init+0x6e>
 801fbe6:	687b      	ldr	r3, [r7, #4]
 801fbe8:	681b      	ldr	r3, [r3, #0]
 801fbea:	4a78      	ldr	r2, [pc, #480]	@ (801fdcc <HAL_SPI_Init+0x244>)
 801fbec:	4293      	cmp	r3, r2
 801fbee:	d002      	beq.n	801fbf6 <HAL_SPI_Init+0x6e>
 801fbf0:	68fb      	ldr	r3, [r7, #12]
 801fbf2:	2b08      	cmp	r3, #8
 801fbf4:	d811      	bhi.n	801fc1a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801fbfa:	4a72      	ldr	r2, [pc, #456]	@ (801fdc4 <HAL_SPI_Init+0x23c>)
 801fbfc:	4293      	cmp	r3, r2
 801fbfe:	d009      	beq.n	801fc14 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801fc00:	687b      	ldr	r3, [r7, #4]
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	4a70      	ldr	r2, [pc, #448]	@ (801fdc8 <HAL_SPI_Init+0x240>)
 801fc06:	4293      	cmp	r3, r2
 801fc08:	d004      	beq.n	801fc14 <HAL_SPI_Init+0x8c>
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	681b      	ldr	r3, [r3, #0]
 801fc0e:	4a6f      	ldr	r2, [pc, #444]	@ (801fdcc <HAL_SPI_Init+0x244>)
 801fc10:	4293      	cmp	r3, r2
 801fc12:	d104      	bne.n	801fc1e <HAL_SPI_Init+0x96>
 801fc14:	68fb      	ldr	r3, [r7, #12]
 801fc16:	2b10      	cmp	r3, #16
 801fc18:	d901      	bls.n	801fc1e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801fc1a:	2301      	movs	r3, #1
 801fc1c:	e0cd      	b.n	801fdba <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801fc1e:	687b      	ldr	r3, [r7, #4]
 801fc20:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fc24:	b2db      	uxtb	r3, r3
 801fc26:	2b00      	cmp	r3, #0
 801fc28:	d106      	bne.n	801fc38 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801fc2a:	687b      	ldr	r3, [r7, #4]
 801fc2c:	2200      	movs	r2, #0
 801fc2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801fc32:	6878      	ldr	r0, [r7, #4]
 801fc34:	f7e2 fd16 	bl	8002664 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	2202      	movs	r2, #2
 801fc3c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801fc40:	687b      	ldr	r3, [r7, #4]
 801fc42:	681b      	ldr	r3, [r3, #0]
 801fc44:	681a      	ldr	r2, [r3, #0]
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	681b      	ldr	r3, [r3, #0]
 801fc4a:	f022 0201 	bic.w	r2, r2, #1
 801fc4e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	681b      	ldr	r3, [r3, #0]
 801fc54:	689b      	ldr	r3, [r3, #8]
 801fc56:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801fc5a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fc5c:	687b      	ldr	r3, [r7, #4]
 801fc5e:	699b      	ldr	r3, [r3, #24]
 801fc60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801fc64:	d119      	bne.n	801fc9a <HAL_SPI_Init+0x112>
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	685b      	ldr	r3, [r3, #4]
 801fc6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801fc6e:	d103      	bne.n	801fc78 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fc70:	687b      	ldr	r3, [r7, #4]
 801fc72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801fc74:	2b00      	cmp	r3, #0
 801fc76:	d008      	beq.n	801fc8a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801fc7c:	2b00      	cmp	r3, #0
 801fc7e:	d10c      	bne.n	801fc9a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801fc80:	687b      	ldr	r3, [r7, #4]
 801fc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801fc84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fc88:	d107      	bne.n	801fc9a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801fc8a:	687b      	ldr	r3, [r7, #4]
 801fc8c:	681b      	ldr	r3, [r3, #0]
 801fc8e:	681a      	ldr	r2, [r3, #0]
 801fc90:	687b      	ldr	r3, [r7, #4]
 801fc92:	681b      	ldr	r3, [r3, #0]
 801fc94:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801fc98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801fc9a:	687b      	ldr	r3, [r7, #4]
 801fc9c:	685b      	ldr	r3, [r3, #4]
 801fc9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fca2:	2b00      	cmp	r3, #0
 801fca4:	d00f      	beq.n	801fcc6 <HAL_SPI_Init+0x13e>
 801fca6:	687b      	ldr	r3, [r7, #4]
 801fca8:	68db      	ldr	r3, [r3, #12]
 801fcaa:	2b06      	cmp	r3, #6
 801fcac:	d90b      	bls.n	801fcc6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801fcae:	687b      	ldr	r3, [r7, #4]
 801fcb0:	681b      	ldr	r3, [r3, #0]
 801fcb2:	681b      	ldr	r3, [r3, #0]
 801fcb4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801fcb8:	687b      	ldr	r3, [r7, #4]
 801fcba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fcbc:	687b      	ldr	r3, [r7, #4]
 801fcbe:	681b      	ldr	r3, [r3, #0]
 801fcc0:	430a      	orrs	r2, r1
 801fcc2:	601a      	str	r2, [r3, #0]
 801fcc4:	e007      	b.n	801fcd6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	681a      	ldr	r2, [r3, #0]
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	681b      	ldr	r3, [r3, #0]
 801fcd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801fcd4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	69da      	ldr	r2, [r3, #28]
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcde:	431a      	orrs	r2, r3
 801fce0:	68bb      	ldr	r3, [r7, #8]
 801fce2:	431a      	orrs	r2, r3
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801fce8:	ea42 0103 	orr.w	r1, r2, r3
 801fcec:	687b      	ldr	r3, [r7, #4]
 801fcee:	68da      	ldr	r2, [r3, #12]
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	681b      	ldr	r3, [r3, #0]
 801fcf4:	430a      	orrs	r2, r1
 801fcf6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801fcf8:	687b      	ldr	r3, [r7, #4]
 801fcfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fcfc:	687b      	ldr	r3, [r7, #4]
 801fcfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fd00:	431a      	orrs	r2, r3
 801fd02:	687b      	ldr	r3, [r7, #4]
 801fd04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fd06:	431a      	orrs	r2, r3
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	699b      	ldr	r3, [r3, #24]
 801fd0c:	431a      	orrs	r2, r3
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	691b      	ldr	r3, [r3, #16]
 801fd12:	431a      	orrs	r2, r3
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	695b      	ldr	r3, [r3, #20]
 801fd18:	431a      	orrs	r2, r3
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	6a1b      	ldr	r3, [r3, #32]
 801fd1e:	431a      	orrs	r2, r3
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	685b      	ldr	r3, [r3, #4]
 801fd24:	431a      	orrs	r2, r3
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801fd2a:	431a      	orrs	r2, r3
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	689b      	ldr	r3, [r3, #8]
 801fd30:	431a      	orrs	r2, r3
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801fd36:	ea42 0103 	orr.w	r1, r2, r3
 801fd3a:	687b      	ldr	r3, [r7, #4]
 801fd3c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801fd3e:	687b      	ldr	r3, [r7, #4]
 801fd40:	681b      	ldr	r3, [r3, #0]
 801fd42:	430a      	orrs	r2, r1
 801fd44:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801fd46:	687b      	ldr	r3, [r7, #4]
 801fd48:	685b      	ldr	r3, [r3, #4]
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d113      	bne.n	801fd76 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	681b      	ldr	r3, [r3, #0]
 801fd52:	689b      	ldr	r3, [r3, #8]
 801fd54:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	681b      	ldr	r3, [r3, #0]
 801fd5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fd60:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801fd62:	687b      	ldr	r3, [r7, #4]
 801fd64:	681b      	ldr	r3, [r3, #0]
 801fd66:	689b      	ldr	r3, [r3, #8]
 801fd68:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801fd74:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	681b      	ldr	r3, [r3, #0]
 801fd7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	681b      	ldr	r3, [r3, #0]
 801fd80:	f022 0201 	bic.w	r2, r2, #1
 801fd84:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801fd86:	687b      	ldr	r3, [r7, #4]
 801fd88:	685b      	ldr	r3, [r3, #4]
 801fd8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801fd8e:	2b00      	cmp	r3, #0
 801fd90:	d00a      	beq.n	801fda8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	68db      	ldr	r3, [r3, #12]
 801fd98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801fda0:	687b      	ldr	r3, [r7, #4]
 801fda2:	681b      	ldr	r3, [r3, #0]
 801fda4:	430a      	orrs	r2, r1
 801fda6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	2200      	movs	r2, #0
 801fdac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801fdb0:	687b      	ldr	r3, [r7, #4]
 801fdb2:	2201      	movs	r2, #1
 801fdb4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801fdb8:	2300      	movs	r3, #0
}
 801fdba:	4618      	mov	r0, r3
 801fdbc:	3710      	adds	r7, #16
 801fdbe:	46bd      	mov	sp, r7
 801fdc0:	bd80      	pop	{r7, pc}
 801fdc2:	bf00      	nop
 801fdc4:	40013000 	.word	0x40013000
 801fdc8:	40003800 	.word	0x40003800
 801fdcc:	40003c00 	.word	0x40003c00

0801fdd0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801fdd0:	b580      	push	{r7, lr}
 801fdd2:	b08a      	sub	sp, #40	@ 0x28
 801fdd4:	af00      	add	r7, sp, #0
 801fdd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	691b      	ldr	r3, [r3, #16]
 801fdde:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801fde0:	687b      	ldr	r3, [r7, #4]
 801fde2:	681b      	ldr	r3, [r3, #0]
 801fde4:	695b      	ldr	r3, [r3, #20]
 801fde6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801fde8:	6a3a      	ldr	r2, [r7, #32]
 801fdea:	69fb      	ldr	r3, [r7, #28]
 801fdec:	4013      	ands	r3, r2
 801fdee:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801fdf0:	687b      	ldr	r3, [r7, #4]
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	689b      	ldr	r3, [r3, #8]
 801fdf6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801fdf8:	2300      	movs	r3, #0
 801fdfa:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fe02:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801fe04:	687b      	ldr	r3, [r7, #4]
 801fe06:	681b      	ldr	r3, [r3, #0]
 801fe08:	3330      	adds	r3, #48	@ 0x30
 801fe0a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801fe0c:	69fb      	ldr	r3, [r7, #28]
 801fe0e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d010      	beq.n	801fe38 <HAL_SPI_IRQHandler+0x68>
 801fe16:	6a3b      	ldr	r3, [r7, #32]
 801fe18:	f003 0308 	and.w	r3, r3, #8
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d00b      	beq.n	801fe38 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	699a      	ldr	r2, [r3, #24]
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	681b      	ldr	r3, [r3, #0]
 801fe2a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fe2e:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801fe30:	6878      	ldr	r0, [r7, #4]
 801fe32:	f000 f9c3 	bl	80201bc <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801fe36:	e192      	b.n	802015e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fe38:	69bb      	ldr	r3, [r7, #24]
 801fe3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fe3e:	2b00      	cmp	r3, #0
 801fe40:	d113      	bne.n	801fe6a <HAL_SPI_IRQHandler+0x9a>
 801fe42:	69bb      	ldr	r3, [r7, #24]
 801fe44:	f003 0320 	and.w	r3, r3, #32
 801fe48:	2b00      	cmp	r3, #0
 801fe4a:	d10e      	bne.n	801fe6a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801fe4c:	69bb      	ldr	r3, [r7, #24]
 801fe4e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801fe52:	2b00      	cmp	r3, #0
 801fe54:	d009      	beq.n	801fe6a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801fe56:	687b      	ldr	r3, [r7, #4]
 801fe58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801fe5a:	6878      	ldr	r0, [r7, #4]
 801fe5c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fe62:	6878      	ldr	r0, [r7, #4]
 801fe64:	4798      	blx	r3
    handled = 1UL;
 801fe66:	2301      	movs	r3, #1
 801fe68:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801fe6a:	69bb      	ldr	r3, [r7, #24]
 801fe6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fe70:	2b00      	cmp	r3, #0
 801fe72:	d10f      	bne.n	801fe94 <HAL_SPI_IRQHandler+0xc4>
 801fe74:	69bb      	ldr	r3, [r7, #24]
 801fe76:	f003 0301 	and.w	r3, r3, #1
 801fe7a:	2b00      	cmp	r3, #0
 801fe7c:	d00a      	beq.n	801fe94 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801fe7e:	69bb      	ldr	r3, [r7, #24]
 801fe80:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801fe84:	2b00      	cmp	r3, #0
 801fe86:	d105      	bne.n	801fe94 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801fe88:	687b      	ldr	r3, [r7, #4]
 801fe8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801fe8c:	6878      	ldr	r0, [r7, #4]
 801fe8e:	4798      	blx	r3
    handled = 1UL;
 801fe90:	2301      	movs	r3, #1
 801fe92:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801fe94:	69bb      	ldr	r3, [r7, #24]
 801fe96:	f003 0320 	and.w	r3, r3, #32
 801fe9a:	2b00      	cmp	r3, #0
 801fe9c:	d10f      	bne.n	801febe <HAL_SPI_IRQHandler+0xee>
 801fe9e:	69bb      	ldr	r3, [r7, #24]
 801fea0:	f003 0302 	and.w	r3, r3, #2
 801fea4:	2b00      	cmp	r3, #0
 801fea6:	d00a      	beq.n	801febe <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801fea8:	69bb      	ldr	r3, [r7, #24]
 801feaa:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801feae:	2b00      	cmp	r3, #0
 801feb0:	d105      	bne.n	801febe <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801feb6:	6878      	ldr	r0, [r7, #4]
 801feb8:	4798      	blx	r3
    handled = 1UL;
 801feba:	2301      	movs	r3, #1
 801febc:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801febe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	f040 8147 	bne.w	8020154 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801fec6:	69bb      	ldr	r3, [r7, #24]
 801fec8:	f003 0308 	and.w	r3, r3, #8
 801fecc:	2b00      	cmp	r3, #0
 801fece:	f000 808b 	beq.w	801ffe8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801fed2:	687b      	ldr	r3, [r7, #4]
 801fed4:	681b      	ldr	r3, [r3, #0]
 801fed6:	699a      	ldr	r2, [r3, #24]
 801fed8:	687b      	ldr	r3, [r7, #4]
 801feda:	681b      	ldr	r3, [r3, #0]
 801fedc:	f042 0208 	orr.w	r2, r2, #8
 801fee0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	699a      	ldr	r2, [r3, #24]
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	681b      	ldr	r3, [r3, #0]
 801feec:	f042 0210 	orr.w	r2, r2, #16
 801fef0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	699a      	ldr	r2, [r3, #24]
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	681b      	ldr	r3, [r3, #0]
 801fefc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ff00:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801ff02:	687b      	ldr	r3, [r7, #4]
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	691a      	ldr	r2, [r3, #16]
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	681b      	ldr	r3, [r3, #0]
 801ff0c:	f022 0208 	bic.w	r2, r2, #8
 801ff10:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	681b      	ldr	r3, [r3, #0]
 801ff16:	689b      	ldr	r3, [r3, #8]
 801ff18:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801ff1c:	2b00      	cmp	r3, #0
 801ff1e:	d13d      	bne.n	801ff9c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801ff20:	e036      	b.n	801ff90 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801ff22:	687b      	ldr	r3, [r7, #4]
 801ff24:	68db      	ldr	r3, [r3, #12]
 801ff26:	2b0f      	cmp	r3, #15
 801ff28:	d90b      	bls.n	801ff42 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801ff2a:	687b      	ldr	r3, [r7, #4]
 801ff2c:	681a      	ldr	r2, [r3, #0]
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff32:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ff34:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801ff36:	687b      	ldr	r3, [r7, #4]
 801ff38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff3a:	1d1a      	adds	r2, r3, #4
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	665a      	str	r2, [r3, #100]	@ 0x64
 801ff40:	e01d      	b.n	801ff7e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	68db      	ldr	r3, [r3, #12]
 801ff46:	2b07      	cmp	r3, #7
 801ff48:	d90b      	bls.n	801ff62 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff4e:	68fa      	ldr	r2, [r7, #12]
 801ff50:	8812      	ldrh	r2, [r2, #0]
 801ff52:	b292      	uxth	r2, r2
 801ff54:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff5a:	1c9a      	adds	r2, r3, #2
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	665a      	str	r2, [r3, #100]	@ 0x64
 801ff60:	e00d      	b.n	801ff7e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801ff62:	687b      	ldr	r3, [r7, #4]
 801ff64:	681b      	ldr	r3, [r3, #0]
 801ff66:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff6e:	7812      	ldrb	r2, [r2, #0]
 801ff70:	b2d2      	uxtb	r2, r2
 801ff72:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801ff74:	687b      	ldr	r3, [r7, #4]
 801ff76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ff78:	1c5a      	adds	r2, r3, #1
 801ff7a:	687b      	ldr	r3, [r7, #4]
 801ff7c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801ff7e:	687b      	ldr	r3, [r7, #4]
 801ff80:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801ff84:	b29b      	uxth	r3, r3
 801ff86:	3b01      	subs	r3, #1
 801ff88:	b29a      	uxth	r2, r3
 801ff8a:	687b      	ldr	r3, [r7, #4]
 801ff8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801ff96:	b29b      	uxth	r3, r3
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	d1c2      	bne.n	801ff22 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801ff9c:	6878      	ldr	r0, [r7, #4]
 801ff9e:	f000 f931 	bl	8020204 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801ffa2:	687b      	ldr	r3, [r7, #4]
 801ffa4:	2201      	movs	r2, #1
 801ffa6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	d003      	beq.n	801ffbc <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801ffb4:	6878      	ldr	r0, [r7, #4]
 801ffb6:	f000 f8f7 	bl	80201a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801ffba:	e0d0      	b.n	802015e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801ffbc:	7cfb      	ldrb	r3, [r7, #19]
 801ffbe:	2b05      	cmp	r3, #5
 801ffc0:	d103      	bne.n	801ffca <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801ffc2:	6878      	ldr	r0, [r7, #4]
 801ffc4:	f000 f8e6 	bl	8020194 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801ffc8:	e0c6      	b.n	8020158 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801ffca:	7cfb      	ldrb	r3, [r7, #19]
 801ffcc:	2b04      	cmp	r3, #4
 801ffce:	d103      	bne.n	801ffd8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801ffd0:	6878      	ldr	r0, [r7, #4]
 801ffd2:	f000 f8d5 	bl	8020180 <HAL_SPI_RxCpltCallback>
    return;
 801ffd6:	e0bf      	b.n	8020158 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801ffd8:	7cfb      	ldrb	r3, [r7, #19]
 801ffda:	2b03      	cmp	r3, #3
 801ffdc:	f040 80bc 	bne.w	8020158 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801ffe0:	6878      	ldr	r0, [r7, #4]
 801ffe2:	f000 f8c3 	bl	802016c <HAL_SPI_TxCpltCallback>
    return;
 801ffe6:	e0b7      	b.n	8020158 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801ffe8:	69bb      	ldr	r3, [r7, #24]
 801ffea:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801ffee:	2b00      	cmp	r3, #0
 801fff0:	f000 80b5 	beq.w	802015e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801fff4:	69bb      	ldr	r3, [r7, #24]
 801fff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fffa:	2b00      	cmp	r3, #0
 801fffc:	d00f      	beq.n	802001e <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801fffe:	687b      	ldr	r3, [r7, #4]
 8020000:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020004:	f043 0204 	orr.w	r2, r3, #4
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 802000e:	687b      	ldr	r3, [r7, #4]
 8020010:	681b      	ldr	r3, [r3, #0]
 8020012:	699a      	ldr	r2, [r3, #24]
 8020014:	687b      	ldr	r3, [r7, #4]
 8020016:	681b      	ldr	r3, [r3, #0]
 8020018:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 802001c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 802001e:	69bb      	ldr	r3, [r7, #24]
 8020020:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8020024:	2b00      	cmp	r3, #0
 8020026:	d00f      	beq.n	8020048 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802002e:	f043 0201 	orr.w	r2, r3, #1
 8020032:	687b      	ldr	r3, [r7, #4]
 8020034:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	681b      	ldr	r3, [r3, #0]
 802003c:	699a      	ldr	r2, [r3, #24]
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	681b      	ldr	r3, [r3, #0]
 8020042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8020046:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8020048:	69bb      	ldr	r3, [r7, #24]
 802004a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 802004e:	2b00      	cmp	r3, #0
 8020050:	d00f      	beq.n	8020072 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8020052:	687b      	ldr	r3, [r7, #4]
 8020054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020058:	f043 0208 	orr.w	r2, r3, #8
 802005c:	687b      	ldr	r3, [r7, #4]
 802005e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	681b      	ldr	r3, [r3, #0]
 8020066:	699a      	ldr	r2, [r3, #24]
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8020070:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8020072:	69bb      	ldr	r3, [r7, #24]
 8020074:	f003 0320 	and.w	r3, r3, #32
 8020078:	2b00      	cmp	r3, #0
 802007a:	d00f      	beq.n	802009c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802007c:	687b      	ldr	r3, [r7, #4]
 802007e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020082:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	681b      	ldr	r3, [r3, #0]
 8020090:	699a      	ldr	r2, [r3, #24]
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	681b      	ldr	r3, [r3, #0]
 8020096:	f042 0220 	orr.w	r2, r2, #32
 802009a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80200a2:	2b00      	cmp	r3, #0
 80200a4:	d05a      	beq.n	802015c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80200a6:	687b      	ldr	r3, [r7, #4]
 80200a8:	681b      	ldr	r3, [r3, #0]
 80200aa:	681a      	ldr	r2, [r3, #0]
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	681b      	ldr	r3, [r3, #0]
 80200b0:	f022 0201 	bic.w	r2, r2, #1
 80200b4:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	681b      	ldr	r3, [r3, #0]
 80200ba:	6919      	ldr	r1, [r3, #16]
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	681a      	ldr	r2, [r3, #0]
 80200c0:	4b28      	ldr	r3, [pc, #160]	@ (8020164 <HAL_SPI_IRQHandler+0x394>)
 80200c2:	400b      	ands	r3, r1
 80200c4:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80200c6:	697b      	ldr	r3, [r7, #20]
 80200c8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80200cc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80200d0:	d138      	bne.n	8020144 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	681b      	ldr	r3, [r3, #0]
 80200d6:	689a      	ldr	r2, [r3, #8]
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80200e0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80200e2:	687b      	ldr	r3, [r7, #4]
 80200e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80200e6:	2b00      	cmp	r3, #0
 80200e8:	d013      	beq.n	8020112 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80200ea:	687b      	ldr	r3, [r7, #4]
 80200ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80200ee:	4a1e      	ldr	r2, [pc, #120]	@ (8020168 <HAL_SPI_IRQHandler+0x398>)
 80200f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80200f6:	4618      	mov	r0, r3
 80200f8:	f7fb f850 	bl	801b19c <HAL_DMA_Abort_IT>
 80200fc:	4603      	mov	r3, r0
 80200fe:	2b00      	cmp	r3, #0
 8020100:	d007      	beq.n	8020112 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8020102:	687b      	ldr	r3, [r7, #4]
 8020104:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020108:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802010c:	687b      	ldr	r3, [r7, #4]
 802010e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020116:	2b00      	cmp	r3, #0
 8020118:	d020      	beq.n	802015c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 802011a:	687b      	ldr	r3, [r7, #4]
 802011c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 802011e:	4a12      	ldr	r2, [pc, #72]	@ (8020168 <HAL_SPI_IRQHandler+0x398>)
 8020120:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8020122:	687b      	ldr	r3, [r7, #4]
 8020124:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8020126:	4618      	mov	r0, r3
 8020128:	f7fb f838 	bl	801b19c <HAL_DMA_Abort_IT>
 802012c:	4603      	mov	r3, r0
 802012e:	2b00      	cmp	r3, #0
 8020130:	d014      	beq.n	802015c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020138:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 802013c:	687b      	ldr	r3, [r7, #4]
 802013e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8020142:	e00b      	b.n	802015c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	2201      	movs	r2, #1
 8020148:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 802014c:	6878      	ldr	r0, [r7, #4]
 802014e:	f000 f82b 	bl	80201a8 <HAL_SPI_ErrorCallback>
    return;
 8020152:	e003      	b.n	802015c <HAL_SPI_IRQHandler+0x38c>
    return;
 8020154:	bf00      	nop
 8020156:	e002      	b.n	802015e <HAL_SPI_IRQHandler+0x38e>
    return;
 8020158:	bf00      	nop
 802015a:	e000      	b.n	802015e <HAL_SPI_IRQHandler+0x38e>
    return;
 802015c:	bf00      	nop
  }
}
 802015e:	3728      	adds	r7, #40	@ 0x28
 8020160:	46bd      	mov	sp, r7
 8020162:	bd80      	pop	{r7, pc}
 8020164:	fffffc94 	.word	0xfffffc94
 8020168:	080201d1 	.word	0x080201d1

0802016c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 802016c:	b480      	push	{r7}
 802016e:	b083      	sub	sp, #12
 8020170:	af00      	add	r7, sp, #0
 8020172:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8020174:	bf00      	nop
 8020176:	370c      	adds	r7, #12
 8020178:	46bd      	mov	sp, r7
 802017a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802017e:	4770      	bx	lr

08020180 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020180:	b480      	push	{r7}
 8020182:	b083      	sub	sp, #12
 8020184:	af00      	add	r7, sp, #0
 8020186:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8020188:	bf00      	nop
 802018a:	370c      	adds	r7, #12
 802018c:	46bd      	mov	sp, r7
 802018e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020192:	4770      	bx	lr

08020194 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8020194:	b480      	push	{r7}
 8020196:	b083      	sub	sp, #12
 8020198:	af00      	add	r7, sp, #0
 802019a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 802019c:	bf00      	nop
 802019e:	370c      	adds	r7, #12
 80201a0:	46bd      	mov	sp, r7
 80201a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201a6:	4770      	bx	lr

080201a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201a8:	b480      	push	{r7}
 80201aa:	b083      	sub	sp, #12
 80201ac:	af00      	add	r7, sp, #0
 80201ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80201b0:	bf00      	nop
 80201b2:	370c      	adds	r7, #12
 80201b4:	46bd      	mov	sp, r7
 80201b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ba:	4770      	bx	lr

080201bc <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80201bc:	b480      	push	{r7}
 80201be:	b083      	sub	sp, #12
 80201c0:	af00      	add	r7, sp, #0
 80201c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 80201c4:	bf00      	nop
 80201c6:	370c      	adds	r7, #12
 80201c8:	46bd      	mov	sp, r7
 80201ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201ce:	4770      	bx	lr

080201d0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80201d0:	b580      	push	{r7, lr}
 80201d2:	b084      	sub	sp, #16
 80201d4:	af00      	add	r7, sp, #0
 80201d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80201d8:	687b      	ldr	r3, [r7, #4]
 80201da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80201dc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 80201de:	68fb      	ldr	r3, [r7, #12]
 80201e0:	2200      	movs	r2, #0
 80201e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 80201e6:	68fb      	ldr	r3, [r7, #12]
 80201e8:	2200      	movs	r2, #0
 80201ea:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 80201ee:	68fb      	ldr	r3, [r7, #12]
 80201f0:	2201      	movs	r2, #1
 80201f2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80201f6:	68f8      	ldr	r0, [r7, #12]
 80201f8:	f7ff ffd6 	bl	80201a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80201fc:	bf00      	nop
 80201fe:	3710      	adds	r7, #16
 8020200:	46bd      	mov	sp, r7
 8020202:	bd80      	pop	{r7, pc}

08020204 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8020204:	b480      	push	{r7}
 8020206:	b085      	sub	sp, #20
 8020208:	af00      	add	r7, sp, #0
 802020a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 802020c:	687b      	ldr	r3, [r7, #4]
 802020e:	681b      	ldr	r3, [r3, #0]
 8020210:	695b      	ldr	r3, [r3, #20]
 8020212:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	699a      	ldr	r2, [r3, #24]
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	681b      	ldr	r3, [r3, #0]
 802021e:	f042 0208 	orr.w	r2, r2, #8
 8020222:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	681b      	ldr	r3, [r3, #0]
 8020228:	699a      	ldr	r2, [r3, #24]
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	681b      	ldr	r3, [r3, #0]
 802022e:	f042 0210 	orr.w	r2, r2, #16
 8020232:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	681b      	ldr	r3, [r3, #0]
 8020238:	681a      	ldr	r2, [r3, #0]
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	681b      	ldr	r3, [r3, #0]
 802023e:	f022 0201 	bic.w	r2, r2, #1
 8020242:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	681b      	ldr	r3, [r3, #0]
 8020248:	6919      	ldr	r1, [r3, #16]
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	681a      	ldr	r2, [r3, #0]
 802024e:	4b3c      	ldr	r3, [pc, #240]	@ (8020340 <SPI_CloseTransfer+0x13c>)
 8020250:	400b      	ands	r3, r1
 8020252:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8020254:	687b      	ldr	r3, [r7, #4]
 8020256:	681b      	ldr	r3, [r3, #0]
 8020258:	689a      	ldr	r2, [r3, #8]
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	681b      	ldr	r3, [r3, #0]
 802025e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8020262:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 802026a:	b2db      	uxtb	r3, r3
 802026c:	2b04      	cmp	r3, #4
 802026e:	d014      	beq.n	802029a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8020270:	68fb      	ldr	r3, [r7, #12]
 8020272:	f003 0320 	and.w	r3, r3, #32
 8020276:	2b00      	cmp	r3, #0
 8020278:	d00f      	beq.n	802029a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8020280:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	681b      	ldr	r3, [r3, #0]
 802028e:	699a      	ldr	r2, [r3, #24]
 8020290:	687b      	ldr	r3, [r7, #4]
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	f042 0220 	orr.w	r2, r2, #32
 8020298:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80202a0:	b2db      	uxtb	r3, r3
 80202a2:	2b03      	cmp	r3, #3
 80202a4:	d014      	beq.n	80202d0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80202a6:	68fb      	ldr	r3, [r7, #12]
 80202a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80202ac:	2b00      	cmp	r3, #0
 80202ae:	d00f      	beq.n	80202d0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80202b6:	f043 0204 	orr.w	r2, r3, #4
 80202ba:	687b      	ldr	r3, [r7, #4]
 80202bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	681b      	ldr	r3, [r3, #0]
 80202c4:	699a      	ldr	r2, [r3, #24]
 80202c6:	687b      	ldr	r3, [r7, #4]
 80202c8:	681b      	ldr	r3, [r3, #0]
 80202ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80202ce:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80202d0:	68fb      	ldr	r3, [r7, #12]
 80202d2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80202d6:	2b00      	cmp	r3, #0
 80202d8:	d00f      	beq.n	80202fa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80202da:	687b      	ldr	r3, [r7, #4]
 80202dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80202e0:	f043 0201 	orr.w	r2, r3, #1
 80202e4:	687b      	ldr	r3, [r7, #4]
 80202e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80202ea:	687b      	ldr	r3, [r7, #4]
 80202ec:	681b      	ldr	r3, [r3, #0]
 80202ee:	699a      	ldr	r2, [r3, #24]
 80202f0:	687b      	ldr	r3, [r7, #4]
 80202f2:	681b      	ldr	r3, [r3, #0]
 80202f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80202f8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80202fa:	68fb      	ldr	r3, [r7, #12]
 80202fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8020300:	2b00      	cmp	r3, #0
 8020302:	d00f      	beq.n	8020324 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8020304:	687b      	ldr	r3, [r7, #4]
 8020306:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 802030a:	f043 0208 	orr.w	r2, r3, #8
 802030e:	687b      	ldr	r3, [r7, #4]
 8020310:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8020314:	687b      	ldr	r3, [r7, #4]
 8020316:	681b      	ldr	r3, [r3, #0]
 8020318:	699a      	ldr	r2, [r3, #24]
 802031a:	687b      	ldr	r3, [r7, #4]
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8020322:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8020324:	687b      	ldr	r3, [r7, #4]
 8020326:	2200      	movs	r2, #0
 8020328:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 802032c:	687b      	ldr	r3, [r7, #4]
 802032e:	2200      	movs	r2, #0
 8020330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 8020334:	bf00      	nop
 8020336:	3714      	adds	r7, #20
 8020338:	46bd      	mov	sp, r7
 802033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802033e:	4770      	bx	lr
 8020340:	fffffc90 	.word	0xfffffc90

08020344 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8020344:	b480      	push	{r7}
 8020346:	b085      	sub	sp, #20
 8020348:	af00      	add	r7, sp, #0
 802034a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 802034c:	687b      	ldr	r3, [r7, #4]
 802034e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020350:	095b      	lsrs	r3, r3, #5
 8020352:	3301      	adds	r3, #1
 8020354:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	68db      	ldr	r3, [r3, #12]
 802035a:	3301      	adds	r3, #1
 802035c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 802035e:	68bb      	ldr	r3, [r7, #8]
 8020360:	3307      	adds	r3, #7
 8020362:	08db      	lsrs	r3, r3, #3
 8020364:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8020366:	68bb      	ldr	r3, [r7, #8]
 8020368:	68fa      	ldr	r2, [r7, #12]
 802036a:	fb02 f303 	mul.w	r3, r2, r3
}
 802036e:	4618      	mov	r0, r3
 8020370:	3714      	adds	r7, #20
 8020372:	46bd      	mov	sp, r7
 8020374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020378:	4770      	bx	lr

0802037a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 802037a:	b580      	push	{r7, lr}
 802037c:	b082      	sub	sp, #8
 802037e:	af00      	add	r7, sp, #0
 8020380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	2b00      	cmp	r3, #0
 8020386:	d101      	bne.n	802038c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8020388:	2301      	movs	r3, #1
 802038a:	e049      	b.n	8020420 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802038c:	687b      	ldr	r3, [r7, #4]
 802038e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020392:	b2db      	uxtb	r3, r3
 8020394:	2b00      	cmp	r3, #0
 8020396:	d106      	bne.n	80203a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	2200      	movs	r2, #0
 802039c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80203a0:	6878      	ldr	r0, [r7, #4]
 80203a2:	f7e2 fb2b 	bl	80029fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80203a6:	687b      	ldr	r3, [r7, #4]
 80203a8:	2202      	movs	r2, #2
 80203aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	681a      	ldr	r2, [r3, #0]
 80203b2:	687b      	ldr	r3, [r7, #4]
 80203b4:	3304      	adds	r3, #4
 80203b6:	4619      	mov	r1, r3
 80203b8:	4610      	mov	r0, r2
 80203ba:	f000 fb1b 	bl	80209f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80203be:	687b      	ldr	r3, [r7, #4]
 80203c0:	2201      	movs	r2, #1
 80203c2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	2201      	movs	r2, #1
 80203ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80203ce:	687b      	ldr	r3, [r7, #4]
 80203d0:	2201      	movs	r2, #1
 80203d2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	2201      	movs	r2, #1
 80203da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80203de:	687b      	ldr	r3, [r7, #4]
 80203e0:	2201      	movs	r2, #1
 80203e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	2201      	movs	r2, #1
 80203ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	2201      	movs	r2, #1
 80203f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	2201      	movs	r2, #1
 80203fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80203fe:	687b      	ldr	r3, [r7, #4]
 8020400:	2201      	movs	r2, #1
 8020402:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8020406:	687b      	ldr	r3, [r7, #4]
 8020408:	2201      	movs	r2, #1
 802040a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	2201      	movs	r2, #1
 8020412:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	2201      	movs	r2, #1
 802041a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 802041e:	2300      	movs	r3, #0
}
 8020420:	4618      	mov	r0, r3
 8020422:	3708      	adds	r7, #8
 8020424:	46bd      	mov	sp, r7
 8020426:	bd80      	pop	{r7, pc}

08020428 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8020428:	b480      	push	{r7}
 802042a:	b085      	sub	sp, #20
 802042c:	af00      	add	r7, sp, #0
 802042e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8020430:	687b      	ldr	r3, [r7, #4]
 8020432:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020436:	b2db      	uxtb	r3, r3
 8020438:	2b01      	cmp	r3, #1
 802043a:	d001      	beq.n	8020440 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 802043c:	2301      	movs	r3, #1
 802043e:	e054      	b.n	80204ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020440:	687b      	ldr	r3, [r7, #4]
 8020442:	2202      	movs	r2, #2
 8020444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8020448:	687b      	ldr	r3, [r7, #4]
 802044a:	681b      	ldr	r3, [r3, #0]
 802044c:	68da      	ldr	r2, [r3, #12]
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	f042 0201 	orr.w	r2, r2, #1
 8020456:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020458:	687b      	ldr	r3, [r7, #4]
 802045a:	681b      	ldr	r3, [r3, #0]
 802045c:	4a26      	ldr	r2, [pc, #152]	@ (80204f8 <HAL_TIM_Base_Start_IT+0xd0>)
 802045e:	4293      	cmp	r3, r2
 8020460:	d022      	beq.n	80204a8 <HAL_TIM_Base_Start_IT+0x80>
 8020462:	687b      	ldr	r3, [r7, #4]
 8020464:	681b      	ldr	r3, [r3, #0]
 8020466:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 802046a:	d01d      	beq.n	80204a8 <HAL_TIM_Base_Start_IT+0x80>
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	681b      	ldr	r3, [r3, #0]
 8020470:	4a22      	ldr	r2, [pc, #136]	@ (80204fc <HAL_TIM_Base_Start_IT+0xd4>)
 8020472:	4293      	cmp	r3, r2
 8020474:	d018      	beq.n	80204a8 <HAL_TIM_Base_Start_IT+0x80>
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	681b      	ldr	r3, [r3, #0]
 802047a:	4a21      	ldr	r2, [pc, #132]	@ (8020500 <HAL_TIM_Base_Start_IT+0xd8>)
 802047c:	4293      	cmp	r3, r2
 802047e:	d013      	beq.n	80204a8 <HAL_TIM_Base_Start_IT+0x80>
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	4a1f      	ldr	r2, [pc, #124]	@ (8020504 <HAL_TIM_Base_Start_IT+0xdc>)
 8020486:	4293      	cmp	r3, r2
 8020488:	d00e      	beq.n	80204a8 <HAL_TIM_Base_Start_IT+0x80>
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	681b      	ldr	r3, [r3, #0]
 802048e:	4a1e      	ldr	r2, [pc, #120]	@ (8020508 <HAL_TIM_Base_Start_IT+0xe0>)
 8020490:	4293      	cmp	r3, r2
 8020492:	d009      	beq.n	80204a8 <HAL_TIM_Base_Start_IT+0x80>
 8020494:	687b      	ldr	r3, [r7, #4]
 8020496:	681b      	ldr	r3, [r3, #0]
 8020498:	4a1c      	ldr	r2, [pc, #112]	@ (802050c <HAL_TIM_Base_Start_IT+0xe4>)
 802049a:	4293      	cmp	r3, r2
 802049c:	d004      	beq.n	80204a8 <HAL_TIM_Base_Start_IT+0x80>
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	4a1b      	ldr	r2, [pc, #108]	@ (8020510 <HAL_TIM_Base_Start_IT+0xe8>)
 80204a4:	4293      	cmp	r3, r2
 80204a6:	d115      	bne.n	80204d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80204a8:	687b      	ldr	r3, [r7, #4]
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	689a      	ldr	r2, [r3, #8]
 80204ae:	4b19      	ldr	r3, [pc, #100]	@ (8020514 <HAL_TIM_Base_Start_IT+0xec>)
 80204b0:	4013      	ands	r3, r2
 80204b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80204b4:	68fb      	ldr	r3, [r7, #12]
 80204b6:	2b06      	cmp	r3, #6
 80204b8:	d015      	beq.n	80204e6 <HAL_TIM_Base_Start_IT+0xbe>
 80204ba:	68fb      	ldr	r3, [r7, #12]
 80204bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80204c0:	d011      	beq.n	80204e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80204c2:	687b      	ldr	r3, [r7, #4]
 80204c4:	681b      	ldr	r3, [r3, #0]
 80204c6:	681a      	ldr	r2, [r3, #0]
 80204c8:	687b      	ldr	r3, [r7, #4]
 80204ca:	681b      	ldr	r3, [r3, #0]
 80204cc:	f042 0201 	orr.w	r2, r2, #1
 80204d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80204d2:	e008      	b.n	80204e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80204d4:	687b      	ldr	r3, [r7, #4]
 80204d6:	681b      	ldr	r3, [r3, #0]
 80204d8:	681a      	ldr	r2, [r3, #0]
 80204da:	687b      	ldr	r3, [r7, #4]
 80204dc:	681b      	ldr	r3, [r3, #0]
 80204de:	f042 0201 	orr.w	r2, r2, #1
 80204e2:	601a      	str	r2, [r3, #0]
 80204e4:	e000      	b.n	80204e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80204e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80204e8:	2300      	movs	r3, #0
}
 80204ea:	4618      	mov	r0, r3
 80204ec:	3714      	adds	r7, #20
 80204ee:	46bd      	mov	sp, r7
 80204f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204f4:	4770      	bx	lr
 80204f6:	bf00      	nop
 80204f8:	40010000 	.word	0x40010000
 80204fc:	40000400 	.word	0x40000400
 8020500:	40000800 	.word	0x40000800
 8020504:	40000c00 	.word	0x40000c00
 8020508:	40010400 	.word	0x40010400
 802050c:	40001800 	.word	0x40001800
 8020510:	40014000 	.word	0x40014000
 8020514:	00010007 	.word	0x00010007

08020518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8020518:	b580      	push	{r7, lr}
 802051a:	b082      	sub	sp, #8
 802051c:	af00      	add	r7, sp, #0
 802051e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8020520:	687b      	ldr	r3, [r7, #4]
 8020522:	2b00      	cmp	r3, #0
 8020524:	d101      	bne.n	802052a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8020526:	2301      	movs	r3, #1
 8020528:	e049      	b.n	80205be <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 802052a:	687b      	ldr	r3, [r7, #4]
 802052c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8020530:	b2db      	uxtb	r3, r3
 8020532:	2b00      	cmp	r3, #0
 8020534:	d106      	bne.n	8020544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8020536:	687b      	ldr	r3, [r7, #4]
 8020538:	2200      	movs	r2, #0
 802053a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 802053e:	6878      	ldr	r0, [r7, #4]
 8020540:	f000 f841 	bl	80205c6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020544:	687b      	ldr	r3, [r7, #4]
 8020546:	2202      	movs	r2, #2
 8020548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	681a      	ldr	r2, [r3, #0]
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	3304      	adds	r3, #4
 8020554:	4619      	mov	r1, r3
 8020556:	4610      	mov	r0, r2
 8020558:	f000 fa4c 	bl	80209f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 802055c:	687b      	ldr	r3, [r7, #4]
 802055e:	2201      	movs	r2, #1
 8020560:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020564:	687b      	ldr	r3, [r7, #4]
 8020566:	2201      	movs	r2, #1
 8020568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 802056c:	687b      	ldr	r3, [r7, #4]
 802056e:	2201      	movs	r2, #1
 8020570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8020574:	687b      	ldr	r3, [r7, #4]
 8020576:	2201      	movs	r2, #1
 8020578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 802057c:	687b      	ldr	r3, [r7, #4]
 802057e:	2201      	movs	r2, #1
 8020580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	2201      	movs	r2, #1
 8020588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 802058c:	687b      	ldr	r3, [r7, #4]
 802058e:	2201      	movs	r2, #1
 8020590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	2201      	movs	r2, #1
 8020598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	2201      	movs	r2, #1
 80205a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80205a4:	687b      	ldr	r3, [r7, #4]
 80205a6:	2201      	movs	r2, #1
 80205a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80205ac:	687b      	ldr	r3, [r7, #4]
 80205ae:	2201      	movs	r2, #1
 80205b0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80205b4:	687b      	ldr	r3, [r7, #4]
 80205b6:	2201      	movs	r2, #1
 80205b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80205bc:	2300      	movs	r3, #0
}
 80205be:	4618      	mov	r0, r3
 80205c0:	3708      	adds	r7, #8
 80205c2:	46bd      	mov	sp, r7
 80205c4:	bd80      	pop	{r7, pc}

080205c6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80205c6:	b480      	push	{r7}
 80205c8:	b083      	sub	sp, #12
 80205ca:	af00      	add	r7, sp, #0
 80205cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80205ce:	bf00      	nop
 80205d0:	370c      	adds	r7, #12
 80205d2:	46bd      	mov	sp, r7
 80205d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205d8:	4770      	bx	lr
	...

080205dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80205dc:	b580      	push	{r7, lr}
 80205de:	b086      	sub	sp, #24
 80205e0:	af00      	add	r7, sp, #0
 80205e2:	60f8      	str	r0, [r7, #12]
 80205e4:	60b9      	str	r1, [r7, #8]
 80205e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80205e8:	2300      	movs	r3, #0
 80205ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80205ec:	68fb      	ldr	r3, [r7, #12]
 80205ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80205f2:	2b01      	cmp	r3, #1
 80205f4:	d101      	bne.n	80205fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80205f6:	2302      	movs	r3, #2
 80205f8:	e0ff      	b.n	80207fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80205fa:	68fb      	ldr	r3, [r7, #12]
 80205fc:	2201      	movs	r2, #1
 80205fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	2b14      	cmp	r3, #20
 8020606:	f200 80f0 	bhi.w	80207ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 802060a:	a201      	add	r2, pc, #4	@ (adr r2, 8020610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 802060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020610:	08020665 	.word	0x08020665
 8020614:	080207eb 	.word	0x080207eb
 8020618:	080207eb 	.word	0x080207eb
 802061c:	080207eb 	.word	0x080207eb
 8020620:	080206a5 	.word	0x080206a5
 8020624:	080207eb 	.word	0x080207eb
 8020628:	080207eb 	.word	0x080207eb
 802062c:	080207eb 	.word	0x080207eb
 8020630:	080206e7 	.word	0x080206e7
 8020634:	080207eb 	.word	0x080207eb
 8020638:	080207eb 	.word	0x080207eb
 802063c:	080207eb 	.word	0x080207eb
 8020640:	08020727 	.word	0x08020727
 8020644:	080207eb 	.word	0x080207eb
 8020648:	080207eb 	.word	0x080207eb
 802064c:	080207eb 	.word	0x080207eb
 8020650:	08020769 	.word	0x08020769
 8020654:	080207eb 	.word	0x080207eb
 8020658:	080207eb 	.word	0x080207eb
 802065c:	080207eb 	.word	0x080207eb
 8020660:	080207a9 	.word	0x080207a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8020664:	68fb      	ldr	r3, [r7, #12]
 8020666:	681b      	ldr	r3, [r3, #0]
 8020668:	68b9      	ldr	r1, [r7, #8]
 802066a:	4618      	mov	r0, r3
 802066c:	f000 fa68 	bl	8020b40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8020670:	68fb      	ldr	r3, [r7, #12]
 8020672:	681b      	ldr	r3, [r3, #0]
 8020674:	699a      	ldr	r2, [r3, #24]
 8020676:	68fb      	ldr	r3, [r7, #12]
 8020678:	681b      	ldr	r3, [r3, #0]
 802067a:	f042 0208 	orr.w	r2, r2, #8
 802067e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8020680:	68fb      	ldr	r3, [r7, #12]
 8020682:	681b      	ldr	r3, [r3, #0]
 8020684:	699a      	ldr	r2, [r3, #24]
 8020686:	68fb      	ldr	r3, [r7, #12]
 8020688:	681b      	ldr	r3, [r3, #0]
 802068a:	f022 0204 	bic.w	r2, r2, #4
 802068e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8020690:	68fb      	ldr	r3, [r7, #12]
 8020692:	681b      	ldr	r3, [r3, #0]
 8020694:	6999      	ldr	r1, [r3, #24]
 8020696:	68bb      	ldr	r3, [r7, #8]
 8020698:	691a      	ldr	r2, [r3, #16]
 802069a:	68fb      	ldr	r3, [r7, #12]
 802069c:	681b      	ldr	r3, [r3, #0]
 802069e:	430a      	orrs	r2, r1
 80206a0:	619a      	str	r2, [r3, #24]
      break;
 80206a2:	e0a5      	b.n	80207f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80206a4:	68fb      	ldr	r3, [r7, #12]
 80206a6:	681b      	ldr	r3, [r3, #0]
 80206a8:	68b9      	ldr	r1, [r7, #8]
 80206aa:	4618      	mov	r0, r3
 80206ac:	f000 fad8 	bl	8020c60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80206b0:	68fb      	ldr	r3, [r7, #12]
 80206b2:	681b      	ldr	r3, [r3, #0]
 80206b4:	699a      	ldr	r2, [r3, #24]
 80206b6:	68fb      	ldr	r3, [r7, #12]
 80206b8:	681b      	ldr	r3, [r3, #0]
 80206ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80206be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80206c0:	68fb      	ldr	r3, [r7, #12]
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	699a      	ldr	r2, [r3, #24]
 80206c6:	68fb      	ldr	r3, [r7, #12]
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80206ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80206d0:	68fb      	ldr	r3, [r7, #12]
 80206d2:	681b      	ldr	r3, [r3, #0]
 80206d4:	6999      	ldr	r1, [r3, #24]
 80206d6:	68bb      	ldr	r3, [r7, #8]
 80206d8:	691b      	ldr	r3, [r3, #16]
 80206da:	021a      	lsls	r2, r3, #8
 80206dc:	68fb      	ldr	r3, [r7, #12]
 80206de:	681b      	ldr	r3, [r3, #0]
 80206e0:	430a      	orrs	r2, r1
 80206e2:	619a      	str	r2, [r3, #24]
      break;
 80206e4:	e084      	b.n	80207f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80206e6:	68fb      	ldr	r3, [r7, #12]
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	68b9      	ldr	r1, [r7, #8]
 80206ec:	4618      	mov	r0, r3
 80206ee:	f000 fb41 	bl	8020d74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	681b      	ldr	r3, [r3, #0]
 80206f6:	69da      	ldr	r2, [r3, #28]
 80206f8:	68fb      	ldr	r3, [r7, #12]
 80206fa:	681b      	ldr	r3, [r3, #0]
 80206fc:	f042 0208 	orr.w	r2, r2, #8
 8020700:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8020702:	68fb      	ldr	r3, [r7, #12]
 8020704:	681b      	ldr	r3, [r3, #0]
 8020706:	69da      	ldr	r2, [r3, #28]
 8020708:	68fb      	ldr	r3, [r7, #12]
 802070a:	681b      	ldr	r3, [r3, #0]
 802070c:	f022 0204 	bic.w	r2, r2, #4
 8020710:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8020712:	68fb      	ldr	r3, [r7, #12]
 8020714:	681b      	ldr	r3, [r3, #0]
 8020716:	69d9      	ldr	r1, [r3, #28]
 8020718:	68bb      	ldr	r3, [r7, #8]
 802071a:	691a      	ldr	r2, [r3, #16]
 802071c:	68fb      	ldr	r3, [r7, #12]
 802071e:	681b      	ldr	r3, [r3, #0]
 8020720:	430a      	orrs	r2, r1
 8020722:	61da      	str	r2, [r3, #28]
      break;
 8020724:	e064      	b.n	80207f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8020726:	68fb      	ldr	r3, [r7, #12]
 8020728:	681b      	ldr	r3, [r3, #0]
 802072a:	68b9      	ldr	r1, [r7, #8]
 802072c:	4618      	mov	r0, r3
 802072e:	f000 fba9 	bl	8020e84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8020732:	68fb      	ldr	r3, [r7, #12]
 8020734:	681b      	ldr	r3, [r3, #0]
 8020736:	69da      	ldr	r2, [r3, #28]
 8020738:	68fb      	ldr	r3, [r7, #12]
 802073a:	681b      	ldr	r3, [r3, #0]
 802073c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8020740:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8020742:	68fb      	ldr	r3, [r7, #12]
 8020744:	681b      	ldr	r3, [r3, #0]
 8020746:	69da      	ldr	r2, [r3, #28]
 8020748:	68fb      	ldr	r3, [r7, #12]
 802074a:	681b      	ldr	r3, [r3, #0]
 802074c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8020750:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8020752:	68fb      	ldr	r3, [r7, #12]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	69d9      	ldr	r1, [r3, #28]
 8020758:	68bb      	ldr	r3, [r7, #8]
 802075a:	691b      	ldr	r3, [r3, #16]
 802075c:	021a      	lsls	r2, r3, #8
 802075e:	68fb      	ldr	r3, [r7, #12]
 8020760:	681b      	ldr	r3, [r3, #0]
 8020762:	430a      	orrs	r2, r1
 8020764:	61da      	str	r2, [r3, #28]
      break;
 8020766:	e043      	b.n	80207f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8020768:	68fb      	ldr	r3, [r7, #12]
 802076a:	681b      	ldr	r3, [r3, #0]
 802076c:	68b9      	ldr	r1, [r7, #8]
 802076e:	4618      	mov	r0, r3
 8020770:	f000 fbf2 	bl	8020f58 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8020774:	68fb      	ldr	r3, [r7, #12]
 8020776:	681b      	ldr	r3, [r3, #0]
 8020778:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802077a:	68fb      	ldr	r3, [r7, #12]
 802077c:	681b      	ldr	r3, [r3, #0]
 802077e:	f042 0208 	orr.w	r2, r2, #8
 8020782:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8020784:	68fb      	ldr	r3, [r7, #12]
 8020786:	681b      	ldr	r3, [r3, #0]
 8020788:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 802078a:	68fb      	ldr	r3, [r7, #12]
 802078c:	681b      	ldr	r3, [r3, #0]
 802078e:	f022 0204 	bic.w	r2, r2, #4
 8020792:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8020794:	68fb      	ldr	r3, [r7, #12]
 8020796:	681b      	ldr	r3, [r3, #0]
 8020798:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 802079a:	68bb      	ldr	r3, [r7, #8]
 802079c:	691a      	ldr	r2, [r3, #16]
 802079e:	68fb      	ldr	r3, [r7, #12]
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	430a      	orrs	r2, r1
 80207a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80207a6:	e023      	b.n	80207f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80207a8:	68fb      	ldr	r3, [r7, #12]
 80207aa:	681b      	ldr	r3, [r3, #0]
 80207ac:	68b9      	ldr	r1, [r7, #8]
 80207ae:	4618      	mov	r0, r3
 80207b0:	f000 fc36 	bl	8021020 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80207b4:	68fb      	ldr	r3, [r7, #12]
 80207b6:	681b      	ldr	r3, [r3, #0]
 80207b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80207ba:	68fb      	ldr	r3, [r7, #12]
 80207bc:	681b      	ldr	r3, [r3, #0]
 80207be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80207c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80207c4:	68fb      	ldr	r3, [r7, #12]
 80207c6:	681b      	ldr	r3, [r3, #0]
 80207c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80207ca:	68fb      	ldr	r3, [r7, #12]
 80207cc:	681b      	ldr	r3, [r3, #0]
 80207ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80207d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80207d4:	68fb      	ldr	r3, [r7, #12]
 80207d6:	681b      	ldr	r3, [r3, #0]
 80207d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80207da:	68bb      	ldr	r3, [r7, #8]
 80207dc:	691b      	ldr	r3, [r3, #16]
 80207de:	021a      	lsls	r2, r3, #8
 80207e0:	68fb      	ldr	r3, [r7, #12]
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	430a      	orrs	r2, r1
 80207e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80207e8:	e002      	b.n	80207f0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80207ea:	2301      	movs	r3, #1
 80207ec:	75fb      	strb	r3, [r7, #23]
      break;
 80207ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80207f0:	68fb      	ldr	r3, [r7, #12]
 80207f2:	2200      	movs	r2, #0
 80207f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80207f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80207fa:	4618      	mov	r0, r3
 80207fc:	3718      	adds	r7, #24
 80207fe:	46bd      	mov	sp, r7
 8020800:	bd80      	pop	{r7, pc}
 8020802:	bf00      	nop

08020804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8020804:	b580      	push	{r7, lr}
 8020806:	b084      	sub	sp, #16
 8020808:	af00      	add	r7, sp, #0
 802080a:	6078      	str	r0, [r7, #4]
 802080c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 802080e:	2300      	movs	r3, #0
 8020810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8020812:	687b      	ldr	r3, [r7, #4]
 8020814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8020818:	2b01      	cmp	r3, #1
 802081a:	d101      	bne.n	8020820 <HAL_TIM_ConfigClockSource+0x1c>
 802081c:	2302      	movs	r3, #2
 802081e:	e0dc      	b.n	80209da <HAL_TIM_ConfigClockSource+0x1d6>
 8020820:	687b      	ldr	r3, [r7, #4]
 8020822:	2201      	movs	r2, #1
 8020824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	2202      	movs	r2, #2
 802082c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8020830:	687b      	ldr	r3, [r7, #4]
 8020832:	681b      	ldr	r3, [r3, #0]
 8020834:	689b      	ldr	r3, [r3, #8]
 8020836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8020838:	68ba      	ldr	r2, [r7, #8]
 802083a:	4b6a      	ldr	r3, [pc, #424]	@ (80209e4 <HAL_TIM_ConfigClockSource+0x1e0>)
 802083c:	4013      	ands	r3, r2
 802083e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020840:	68bb      	ldr	r3, [r7, #8]
 8020842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8020846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8020848:	687b      	ldr	r3, [r7, #4]
 802084a:	681b      	ldr	r3, [r3, #0]
 802084c:	68ba      	ldr	r2, [r7, #8]
 802084e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8020850:	683b      	ldr	r3, [r7, #0]
 8020852:	681b      	ldr	r3, [r3, #0]
 8020854:	4a64      	ldr	r2, [pc, #400]	@ (80209e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8020856:	4293      	cmp	r3, r2
 8020858:	f000 80a9 	beq.w	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 802085c:	4a62      	ldr	r2, [pc, #392]	@ (80209e8 <HAL_TIM_ConfigClockSource+0x1e4>)
 802085e:	4293      	cmp	r3, r2
 8020860:	f200 80ae 	bhi.w	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020864:	4a61      	ldr	r2, [pc, #388]	@ (80209ec <HAL_TIM_ConfigClockSource+0x1e8>)
 8020866:	4293      	cmp	r3, r2
 8020868:	f000 80a1 	beq.w	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 802086c:	4a5f      	ldr	r2, [pc, #380]	@ (80209ec <HAL_TIM_ConfigClockSource+0x1e8>)
 802086e:	4293      	cmp	r3, r2
 8020870:	f200 80a6 	bhi.w	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020874:	4a5e      	ldr	r2, [pc, #376]	@ (80209f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8020876:	4293      	cmp	r3, r2
 8020878:	f000 8099 	beq.w	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 802087c:	4a5c      	ldr	r2, [pc, #368]	@ (80209f0 <HAL_TIM_ConfigClockSource+0x1ec>)
 802087e:	4293      	cmp	r3, r2
 8020880:	f200 809e 	bhi.w	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020884:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020888:	f000 8091 	beq.w	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 802088c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020890:	f200 8096 	bhi.w	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 8020894:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020898:	f000 8089 	beq.w	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 802089c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80208a0:	f200 808e 	bhi.w	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80208a8:	d03e      	beq.n	8020928 <HAL_TIM_ConfigClockSource+0x124>
 80208aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80208ae:	f200 8087 	bhi.w	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80208b6:	f000 8086 	beq.w	80209c6 <HAL_TIM_ConfigClockSource+0x1c2>
 80208ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80208be:	d87f      	bhi.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208c0:	2b70      	cmp	r3, #112	@ 0x70
 80208c2:	d01a      	beq.n	80208fa <HAL_TIM_ConfigClockSource+0xf6>
 80208c4:	2b70      	cmp	r3, #112	@ 0x70
 80208c6:	d87b      	bhi.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208c8:	2b60      	cmp	r3, #96	@ 0x60
 80208ca:	d050      	beq.n	802096e <HAL_TIM_ConfigClockSource+0x16a>
 80208cc:	2b60      	cmp	r3, #96	@ 0x60
 80208ce:	d877      	bhi.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208d0:	2b50      	cmp	r3, #80	@ 0x50
 80208d2:	d03c      	beq.n	802094e <HAL_TIM_ConfigClockSource+0x14a>
 80208d4:	2b50      	cmp	r3, #80	@ 0x50
 80208d6:	d873      	bhi.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208d8:	2b40      	cmp	r3, #64	@ 0x40
 80208da:	d058      	beq.n	802098e <HAL_TIM_ConfigClockSource+0x18a>
 80208dc:	2b40      	cmp	r3, #64	@ 0x40
 80208de:	d86f      	bhi.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208e0:	2b30      	cmp	r3, #48	@ 0x30
 80208e2:	d064      	beq.n	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 80208e4:	2b30      	cmp	r3, #48	@ 0x30
 80208e6:	d86b      	bhi.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208e8:	2b20      	cmp	r3, #32
 80208ea:	d060      	beq.n	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 80208ec:	2b20      	cmp	r3, #32
 80208ee:	d867      	bhi.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
 80208f0:	2b00      	cmp	r3, #0
 80208f2:	d05c      	beq.n	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 80208f4:	2b10      	cmp	r3, #16
 80208f6:	d05a      	beq.n	80209ae <HAL_TIM_ConfigClockSource+0x1aa>
 80208f8:	e062      	b.n	80209c0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80208fa:	687b      	ldr	r3, [r7, #4]
 80208fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80208fe:	683b      	ldr	r3, [r7, #0]
 8020900:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020902:	683b      	ldr	r3, [r7, #0]
 8020904:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020906:	683b      	ldr	r3, [r7, #0]
 8020908:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 802090a:	f000 fc6d 	bl	80211e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 802090e:	687b      	ldr	r3, [r7, #4]
 8020910:	681b      	ldr	r3, [r3, #0]
 8020912:	689b      	ldr	r3, [r3, #8]
 8020914:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8020916:	68bb      	ldr	r3, [r7, #8]
 8020918:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 802091c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 802091e:	687b      	ldr	r3, [r7, #4]
 8020920:	681b      	ldr	r3, [r3, #0]
 8020922:	68ba      	ldr	r2, [r7, #8]
 8020924:	609a      	str	r2, [r3, #8]
      break;
 8020926:	e04f      	b.n	80209c8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8020928:	687b      	ldr	r3, [r7, #4]
 802092a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 802092c:	683b      	ldr	r3, [r7, #0]
 802092e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8020930:	683b      	ldr	r3, [r7, #0]
 8020932:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8020934:	683b      	ldr	r3, [r7, #0]
 8020936:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8020938:	f000 fc56 	bl	80211e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 802093c:	687b      	ldr	r3, [r7, #4]
 802093e:	681b      	ldr	r3, [r3, #0]
 8020940:	689a      	ldr	r2, [r3, #8]
 8020942:	687b      	ldr	r3, [r7, #4]
 8020944:	681b      	ldr	r3, [r3, #0]
 8020946:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 802094a:	609a      	str	r2, [r3, #8]
      break;
 802094c:	e03c      	b.n	80209c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020952:	683b      	ldr	r3, [r7, #0]
 8020954:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020956:	683b      	ldr	r3, [r7, #0]
 8020958:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 802095a:	461a      	mov	r2, r3
 802095c:	f000 fbc6 	bl	80210ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020960:	687b      	ldr	r3, [r7, #4]
 8020962:	681b      	ldr	r3, [r3, #0]
 8020964:	2150      	movs	r1, #80	@ 0x50
 8020966:	4618      	mov	r0, r3
 8020968:	f000 fc20 	bl	80211ac <TIM_ITRx_SetConfig>
      break;
 802096c:	e02c      	b.n	80209c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 802096e:	687b      	ldr	r3, [r7, #4]
 8020970:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020972:	683b      	ldr	r3, [r7, #0]
 8020974:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020976:	683b      	ldr	r3, [r7, #0]
 8020978:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 802097a:	461a      	mov	r2, r3
 802097c:	f000 fbe5 	bl	802114a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020980:	687b      	ldr	r3, [r7, #4]
 8020982:	681b      	ldr	r3, [r3, #0]
 8020984:	2160      	movs	r1, #96	@ 0x60
 8020986:	4618      	mov	r0, r3
 8020988:	f000 fc10 	bl	80211ac <TIM_ITRx_SetConfig>
      break;
 802098c:	e01c      	b.n	80209c8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 802098e:	687b      	ldr	r3, [r7, #4]
 8020990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020992:	683b      	ldr	r3, [r7, #0]
 8020994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8020996:	683b      	ldr	r3, [r7, #0]
 8020998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 802099a:	461a      	mov	r2, r3
 802099c:	f000 fba6 	bl	80210ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80209a0:	687b      	ldr	r3, [r7, #4]
 80209a2:	681b      	ldr	r3, [r3, #0]
 80209a4:	2140      	movs	r1, #64	@ 0x40
 80209a6:	4618      	mov	r0, r3
 80209a8:	f000 fc00 	bl	80211ac <TIM_ITRx_SetConfig>
      break;
 80209ac:	e00c      	b.n	80209c8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80209ae:	687b      	ldr	r3, [r7, #4]
 80209b0:	681a      	ldr	r2, [r3, #0]
 80209b2:	683b      	ldr	r3, [r7, #0]
 80209b4:	681b      	ldr	r3, [r3, #0]
 80209b6:	4619      	mov	r1, r3
 80209b8:	4610      	mov	r0, r2
 80209ba:	f000 fbf7 	bl	80211ac <TIM_ITRx_SetConfig>
      break;
 80209be:	e003      	b.n	80209c8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80209c0:	2301      	movs	r3, #1
 80209c2:	73fb      	strb	r3, [r7, #15]
      break;
 80209c4:	e000      	b.n	80209c8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80209c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80209c8:	687b      	ldr	r3, [r7, #4]
 80209ca:	2201      	movs	r2, #1
 80209cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80209d0:	687b      	ldr	r3, [r7, #4]
 80209d2:	2200      	movs	r2, #0
 80209d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80209d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80209da:	4618      	mov	r0, r3
 80209dc:	3710      	adds	r7, #16
 80209de:	46bd      	mov	sp, r7
 80209e0:	bd80      	pop	{r7, pc}
 80209e2:	bf00      	nop
 80209e4:	ffceff88 	.word	0xffceff88
 80209e8:	00100040 	.word	0x00100040
 80209ec:	00100030 	.word	0x00100030
 80209f0:	00100020 	.word	0x00100020

080209f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80209f4:	b480      	push	{r7}
 80209f6:	b085      	sub	sp, #20
 80209f8:	af00      	add	r7, sp, #0
 80209fa:	6078      	str	r0, [r7, #4]
 80209fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80209fe:	687b      	ldr	r3, [r7, #4]
 8020a00:	681b      	ldr	r3, [r3, #0]
 8020a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	4a46      	ldr	r2, [pc, #280]	@ (8020b20 <TIM_Base_SetConfig+0x12c>)
 8020a08:	4293      	cmp	r3, r2
 8020a0a:	d013      	beq.n	8020a34 <TIM_Base_SetConfig+0x40>
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020a12:	d00f      	beq.n	8020a34 <TIM_Base_SetConfig+0x40>
 8020a14:	687b      	ldr	r3, [r7, #4]
 8020a16:	4a43      	ldr	r2, [pc, #268]	@ (8020b24 <TIM_Base_SetConfig+0x130>)
 8020a18:	4293      	cmp	r3, r2
 8020a1a:	d00b      	beq.n	8020a34 <TIM_Base_SetConfig+0x40>
 8020a1c:	687b      	ldr	r3, [r7, #4]
 8020a1e:	4a42      	ldr	r2, [pc, #264]	@ (8020b28 <TIM_Base_SetConfig+0x134>)
 8020a20:	4293      	cmp	r3, r2
 8020a22:	d007      	beq.n	8020a34 <TIM_Base_SetConfig+0x40>
 8020a24:	687b      	ldr	r3, [r7, #4]
 8020a26:	4a41      	ldr	r2, [pc, #260]	@ (8020b2c <TIM_Base_SetConfig+0x138>)
 8020a28:	4293      	cmp	r3, r2
 8020a2a:	d003      	beq.n	8020a34 <TIM_Base_SetConfig+0x40>
 8020a2c:	687b      	ldr	r3, [r7, #4]
 8020a2e:	4a40      	ldr	r2, [pc, #256]	@ (8020b30 <TIM_Base_SetConfig+0x13c>)
 8020a30:	4293      	cmp	r3, r2
 8020a32:	d108      	bne.n	8020a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8020a34:	68fb      	ldr	r3, [r7, #12]
 8020a36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8020a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8020a3c:	683b      	ldr	r3, [r7, #0]
 8020a3e:	685b      	ldr	r3, [r3, #4]
 8020a40:	68fa      	ldr	r2, [r7, #12]
 8020a42:	4313      	orrs	r3, r2
 8020a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	4a35      	ldr	r2, [pc, #212]	@ (8020b20 <TIM_Base_SetConfig+0x12c>)
 8020a4a:	4293      	cmp	r3, r2
 8020a4c:	d01f      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020a54:	d01b      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a56:	687b      	ldr	r3, [r7, #4]
 8020a58:	4a32      	ldr	r2, [pc, #200]	@ (8020b24 <TIM_Base_SetConfig+0x130>)
 8020a5a:	4293      	cmp	r3, r2
 8020a5c:	d017      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a5e:	687b      	ldr	r3, [r7, #4]
 8020a60:	4a31      	ldr	r2, [pc, #196]	@ (8020b28 <TIM_Base_SetConfig+0x134>)
 8020a62:	4293      	cmp	r3, r2
 8020a64:	d013      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	4a30      	ldr	r2, [pc, #192]	@ (8020b2c <TIM_Base_SetConfig+0x138>)
 8020a6a:	4293      	cmp	r3, r2
 8020a6c:	d00f      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a6e:	687b      	ldr	r3, [r7, #4]
 8020a70:	4a2f      	ldr	r2, [pc, #188]	@ (8020b30 <TIM_Base_SetConfig+0x13c>)
 8020a72:	4293      	cmp	r3, r2
 8020a74:	d00b      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	4a2e      	ldr	r2, [pc, #184]	@ (8020b34 <TIM_Base_SetConfig+0x140>)
 8020a7a:	4293      	cmp	r3, r2
 8020a7c:	d007      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	4a2d      	ldr	r2, [pc, #180]	@ (8020b38 <TIM_Base_SetConfig+0x144>)
 8020a82:	4293      	cmp	r3, r2
 8020a84:	d003      	beq.n	8020a8e <TIM_Base_SetConfig+0x9a>
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	4a2c      	ldr	r2, [pc, #176]	@ (8020b3c <TIM_Base_SetConfig+0x148>)
 8020a8a:	4293      	cmp	r3, r2
 8020a8c:	d108      	bne.n	8020aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020a8e:	68fb      	ldr	r3, [r7, #12]
 8020a90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8020a96:	683b      	ldr	r3, [r7, #0]
 8020a98:	68db      	ldr	r3, [r3, #12]
 8020a9a:	68fa      	ldr	r2, [r7, #12]
 8020a9c:	4313      	orrs	r3, r2
 8020a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020aa0:	68fb      	ldr	r3, [r7, #12]
 8020aa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8020aa6:	683b      	ldr	r3, [r7, #0]
 8020aa8:	695b      	ldr	r3, [r3, #20]
 8020aaa:	4313      	orrs	r3, r2
 8020aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020aae:	687b      	ldr	r3, [r7, #4]
 8020ab0:	68fa      	ldr	r2, [r7, #12]
 8020ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020ab4:	683b      	ldr	r3, [r7, #0]
 8020ab6:	689a      	ldr	r2, [r3, #8]
 8020ab8:	687b      	ldr	r3, [r7, #4]
 8020aba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020abc:	683b      	ldr	r3, [r7, #0]
 8020abe:	681a      	ldr	r2, [r3, #0]
 8020ac0:	687b      	ldr	r3, [r7, #4]
 8020ac2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	4a16      	ldr	r2, [pc, #88]	@ (8020b20 <TIM_Base_SetConfig+0x12c>)
 8020ac8:	4293      	cmp	r3, r2
 8020aca:	d00f      	beq.n	8020aec <TIM_Base_SetConfig+0xf8>
 8020acc:	687b      	ldr	r3, [r7, #4]
 8020ace:	4a18      	ldr	r2, [pc, #96]	@ (8020b30 <TIM_Base_SetConfig+0x13c>)
 8020ad0:	4293      	cmp	r3, r2
 8020ad2:	d00b      	beq.n	8020aec <TIM_Base_SetConfig+0xf8>
 8020ad4:	687b      	ldr	r3, [r7, #4]
 8020ad6:	4a17      	ldr	r2, [pc, #92]	@ (8020b34 <TIM_Base_SetConfig+0x140>)
 8020ad8:	4293      	cmp	r3, r2
 8020ada:	d007      	beq.n	8020aec <TIM_Base_SetConfig+0xf8>
 8020adc:	687b      	ldr	r3, [r7, #4]
 8020ade:	4a16      	ldr	r2, [pc, #88]	@ (8020b38 <TIM_Base_SetConfig+0x144>)
 8020ae0:	4293      	cmp	r3, r2
 8020ae2:	d003      	beq.n	8020aec <TIM_Base_SetConfig+0xf8>
 8020ae4:	687b      	ldr	r3, [r7, #4]
 8020ae6:	4a15      	ldr	r2, [pc, #84]	@ (8020b3c <TIM_Base_SetConfig+0x148>)
 8020ae8:	4293      	cmp	r3, r2
 8020aea:	d103      	bne.n	8020af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020aec:	683b      	ldr	r3, [r7, #0]
 8020aee:	691a      	ldr	r2, [r3, #16]
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020af4:	687b      	ldr	r3, [r7, #4]
 8020af6:	2201      	movs	r2, #1
 8020af8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	691b      	ldr	r3, [r3, #16]
 8020afe:	f003 0301 	and.w	r3, r3, #1
 8020b02:	2b01      	cmp	r3, #1
 8020b04:	d105      	bne.n	8020b12 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	691b      	ldr	r3, [r3, #16]
 8020b0a:	f023 0201 	bic.w	r2, r3, #1
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	611a      	str	r2, [r3, #16]
  }
}
 8020b12:	bf00      	nop
 8020b14:	3714      	adds	r7, #20
 8020b16:	46bd      	mov	sp, r7
 8020b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b1c:	4770      	bx	lr
 8020b1e:	bf00      	nop
 8020b20:	40010000 	.word	0x40010000
 8020b24:	40000400 	.word	0x40000400
 8020b28:	40000800 	.word	0x40000800
 8020b2c:	40000c00 	.word	0x40000c00
 8020b30:	40010400 	.word	0x40010400
 8020b34:	40014000 	.word	0x40014000
 8020b38:	40014400 	.word	0x40014400
 8020b3c:	40014800 	.word	0x40014800

08020b40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020b40:	b480      	push	{r7}
 8020b42:	b087      	sub	sp, #28
 8020b44:	af00      	add	r7, sp, #0
 8020b46:	6078      	str	r0, [r7, #4]
 8020b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020b4a:	687b      	ldr	r3, [r7, #4]
 8020b4c:	6a1b      	ldr	r3, [r3, #32]
 8020b4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8020b50:	687b      	ldr	r3, [r7, #4]
 8020b52:	6a1b      	ldr	r3, [r3, #32]
 8020b54:	f023 0201 	bic.w	r2, r3, #1
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020b5c:	687b      	ldr	r3, [r7, #4]
 8020b5e:	685b      	ldr	r3, [r3, #4]
 8020b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020b62:	687b      	ldr	r3, [r7, #4]
 8020b64:	699b      	ldr	r3, [r3, #24]
 8020b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8020b68:	68fa      	ldr	r2, [r7, #12]
 8020b6a:	4b37      	ldr	r3, [pc, #220]	@ (8020c48 <TIM_OC1_SetConfig+0x108>)
 8020b6c:	4013      	ands	r3, r2
 8020b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020b70:	68fb      	ldr	r3, [r7, #12]
 8020b72:	f023 0303 	bic.w	r3, r3, #3
 8020b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020b78:	683b      	ldr	r3, [r7, #0]
 8020b7a:	681b      	ldr	r3, [r3, #0]
 8020b7c:	68fa      	ldr	r2, [r7, #12]
 8020b7e:	4313      	orrs	r3, r2
 8020b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020b82:	697b      	ldr	r3, [r7, #20]
 8020b84:	f023 0302 	bic.w	r3, r3, #2
 8020b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8020b8a:	683b      	ldr	r3, [r7, #0]
 8020b8c:	689b      	ldr	r3, [r3, #8]
 8020b8e:	697a      	ldr	r2, [r7, #20]
 8020b90:	4313      	orrs	r3, r2
 8020b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020b94:	687b      	ldr	r3, [r7, #4]
 8020b96:	4a2d      	ldr	r2, [pc, #180]	@ (8020c4c <TIM_OC1_SetConfig+0x10c>)
 8020b98:	4293      	cmp	r3, r2
 8020b9a:	d00f      	beq.n	8020bbc <TIM_OC1_SetConfig+0x7c>
 8020b9c:	687b      	ldr	r3, [r7, #4]
 8020b9e:	4a2c      	ldr	r2, [pc, #176]	@ (8020c50 <TIM_OC1_SetConfig+0x110>)
 8020ba0:	4293      	cmp	r3, r2
 8020ba2:	d00b      	beq.n	8020bbc <TIM_OC1_SetConfig+0x7c>
 8020ba4:	687b      	ldr	r3, [r7, #4]
 8020ba6:	4a2b      	ldr	r2, [pc, #172]	@ (8020c54 <TIM_OC1_SetConfig+0x114>)
 8020ba8:	4293      	cmp	r3, r2
 8020baa:	d007      	beq.n	8020bbc <TIM_OC1_SetConfig+0x7c>
 8020bac:	687b      	ldr	r3, [r7, #4]
 8020bae:	4a2a      	ldr	r2, [pc, #168]	@ (8020c58 <TIM_OC1_SetConfig+0x118>)
 8020bb0:	4293      	cmp	r3, r2
 8020bb2:	d003      	beq.n	8020bbc <TIM_OC1_SetConfig+0x7c>
 8020bb4:	687b      	ldr	r3, [r7, #4]
 8020bb6:	4a29      	ldr	r2, [pc, #164]	@ (8020c5c <TIM_OC1_SetConfig+0x11c>)
 8020bb8:	4293      	cmp	r3, r2
 8020bba:	d10c      	bne.n	8020bd6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020bbc:	697b      	ldr	r3, [r7, #20]
 8020bbe:	f023 0308 	bic.w	r3, r3, #8
 8020bc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020bc4:	683b      	ldr	r3, [r7, #0]
 8020bc6:	68db      	ldr	r3, [r3, #12]
 8020bc8:	697a      	ldr	r2, [r7, #20]
 8020bca:	4313      	orrs	r3, r2
 8020bcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020bce:	697b      	ldr	r3, [r7, #20]
 8020bd0:	f023 0304 	bic.w	r3, r3, #4
 8020bd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020bd6:	687b      	ldr	r3, [r7, #4]
 8020bd8:	4a1c      	ldr	r2, [pc, #112]	@ (8020c4c <TIM_OC1_SetConfig+0x10c>)
 8020bda:	4293      	cmp	r3, r2
 8020bdc:	d00f      	beq.n	8020bfe <TIM_OC1_SetConfig+0xbe>
 8020bde:	687b      	ldr	r3, [r7, #4]
 8020be0:	4a1b      	ldr	r2, [pc, #108]	@ (8020c50 <TIM_OC1_SetConfig+0x110>)
 8020be2:	4293      	cmp	r3, r2
 8020be4:	d00b      	beq.n	8020bfe <TIM_OC1_SetConfig+0xbe>
 8020be6:	687b      	ldr	r3, [r7, #4]
 8020be8:	4a1a      	ldr	r2, [pc, #104]	@ (8020c54 <TIM_OC1_SetConfig+0x114>)
 8020bea:	4293      	cmp	r3, r2
 8020bec:	d007      	beq.n	8020bfe <TIM_OC1_SetConfig+0xbe>
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	4a19      	ldr	r2, [pc, #100]	@ (8020c58 <TIM_OC1_SetConfig+0x118>)
 8020bf2:	4293      	cmp	r3, r2
 8020bf4:	d003      	beq.n	8020bfe <TIM_OC1_SetConfig+0xbe>
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	4a18      	ldr	r2, [pc, #96]	@ (8020c5c <TIM_OC1_SetConfig+0x11c>)
 8020bfa:	4293      	cmp	r3, r2
 8020bfc:	d111      	bne.n	8020c22 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8020bfe:	693b      	ldr	r3, [r7, #16]
 8020c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8020c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8020c06:	693b      	ldr	r3, [r7, #16]
 8020c08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8020c0e:	683b      	ldr	r3, [r7, #0]
 8020c10:	695b      	ldr	r3, [r3, #20]
 8020c12:	693a      	ldr	r2, [r7, #16]
 8020c14:	4313      	orrs	r3, r2
 8020c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8020c18:	683b      	ldr	r3, [r7, #0]
 8020c1a:	699b      	ldr	r3, [r3, #24]
 8020c1c:	693a      	ldr	r2, [r7, #16]
 8020c1e:	4313      	orrs	r3, r2
 8020c20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020c22:	687b      	ldr	r3, [r7, #4]
 8020c24:	693a      	ldr	r2, [r7, #16]
 8020c26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020c28:	687b      	ldr	r3, [r7, #4]
 8020c2a:	68fa      	ldr	r2, [r7, #12]
 8020c2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8020c2e:	683b      	ldr	r3, [r7, #0]
 8020c30:	685a      	ldr	r2, [r3, #4]
 8020c32:	687b      	ldr	r3, [r7, #4]
 8020c34:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020c36:	687b      	ldr	r3, [r7, #4]
 8020c38:	697a      	ldr	r2, [r7, #20]
 8020c3a:	621a      	str	r2, [r3, #32]
}
 8020c3c:	bf00      	nop
 8020c3e:	371c      	adds	r7, #28
 8020c40:	46bd      	mov	sp, r7
 8020c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020c46:	4770      	bx	lr
 8020c48:	fffeff8f 	.word	0xfffeff8f
 8020c4c:	40010000 	.word	0x40010000
 8020c50:	40010400 	.word	0x40010400
 8020c54:	40014000 	.word	0x40014000
 8020c58:	40014400 	.word	0x40014400
 8020c5c:	40014800 	.word	0x40014800

08020c60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020c60:	b480      	push	{r7}
 8020c62:	b087      	sub	sp, #28
 8020c64:	af00      	add	r7, sp, #0
 8020c66:	6078      	str	r0, [r7, #4]
 8020c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020c6a:	687b      	ldr	r3, [r7, #4]
 8020c6c:	6a1b      	ldr	r3, [r3, #32]
 8020c6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020c70:	687b      	ldr	r3, [r7, #4]
 8020c72:	6a1b      	ldr	r3, [r3, #32]
 8020c74:	f023 0210 	bic.w	r2, r3, #16
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020c7c:	687b      	ldr	r3, [r7, #4]
 8020c7e:	685b      	ldr	r3, [r3, #4]
 8020c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020c82:	687b      	ldr	r3, [r7, #4]
 8020c84:	699b      	ldr	r3, [r3, #24]
 8020c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8020c88:	68fa      	ldr	r2, [r7, #12]
 8020c8a:	4b34      	ldr	r3, [pc, #208]	@ (8020d5c <TIM_OC2_SetConfig+0xfc>)
 8020c8c:	4013      	ands	r3, r2
 8020c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020c90:	68fb      	ldr	r3, [r7, #12]
 8020c92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020c98:	683b      	ldr	r3, [r7, #0]
 8020c9a:	681b      	ldr	r3, [r3, #0]
 8020c9c:	021b      	lsls	r3, r3, #8
 8020c9e:	68fa      	ldr	r2, [r7, #12]
 8020ca0:	4313      	orrs	r3, r2
 8020ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020ca4:	697b      	ldr	r3, [r7, #20]
 8020ca6:	f023 0320 	bic.w	r3, r3, #32
 8020caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020cac:	683b      	ldr	r3, [r7, #0]
 8020cae:	689b      	ldr	r3, [r3, #8]
 8020cb0:	011b      	lsls	r3, r3, #4
 8020cb2:	697a      	ldr	r2, [r7, #20]
 8020cb4:	4313      	orrs	r3, r2
 8020cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8020cb8:	687b      	ldr	r3, [r7, #4]
 8020cba:	4a29      	ldr	r2, [pc, #164]	@ (8020d60 <TIM_OC2_SetConfig+0x100>)
 8020cbc:	4293      	cmp	r3, r2
 8020cbe:	d003      	beq.n	8020cc8 <TIM_OC2_SetConfig+0x68>
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	4a28      	ldr	r2, [pc, #160]	@ (8020d64 <TIM_OC2_SetConfig+0x104>)
 8020cc4:	4293      	cmp	r3, r2
 8020cc6:	d10d      	bne.n	8020ce4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8020cc8:	697b      	ldr	r3, [r7, #20]
 8020cca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020cd0:	683b      	ldr	r3, [r7, #0]
 8020cd2:	68db      	ldr	r3, [r3, #12]
 8020cd4:	011b      	lsls	r3, r3, #4
 8020cd6:	697a      	ldr	r2, [r7, #20]
 8020cd8:	4313      	orrs	r3, r2
 8020cda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020cdc:	697b      	ldr	r3, [r7, #20]
 8020cde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020ce2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020ce4:	687b      	ldr	r3, [r7, #4]
 8020ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8020d60 <TIM_OC2_SetConfig+0x100>)
 8020ce8:	4293      	cmp	r3, r2
 8020cea:	d00f      	beq.n	8020d0c <TIM_OC2_SetConfig+0xac>
 8020cec:	687b      	ldr	r3, [r7, #4]
 8020cee:	4a1d      	ldr	r2, [pc, #116]	@ (8020d64 <TIM_OC2_SetConfig+0x104>)
 8020cf0:	4293      	cmp	r3, r2
 8020cf2:	d00b      	beq.n	8020d0c <TIM_OC2_SetConfig+0xac>
 8020cf4:	687b      	ldr	r3, [r7, #4]
 8020cf6:	4a1c      	ldr	r2, [pc, #112]	@ (8020d68 <TIM_OC2_SetConfig+0x108>)
 8020cf8:	4293      	cmp	r3, r2
 8020cfa:	d007      	beq.n	8020d0c <TIM_OC2_SetConfig+0xac>
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8020d6c <TIM_OC2_SetConfig+0x10c>)
 8020d00:	4293      	cmp	r3, r2
 8020d02:	d003      	beq.n	8020d0c <TIM_OC2_SetConfig+0xac>
 8020d04:	687b      	ldr	r3, [r7, #4]
 8020d06:	4a1a      	ldr	r2, [pc, #104]	@ (8020d70 <TIM_OC2_SetConfig+0x110>)
 8020d08:	4293      	cmp	r3, r2
 8020d0a:	d113      	bne.n	8020d34 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8020d0c:	693b      	ldr	r3, [r7, #16]
 8020d0e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020d12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8020d14:	693b      	ldr	r3, [r7, #16]
 8020d16:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8020d1c:	683b      	ldr	r3, [r7, #0]
 8020d1e:	695b      	ldr	r3, [r3, #20]
 8020d20:	009b      	lsls	r3, r3, #2
 8020d22:	693a      	ldr	r2, [r7, #16]
 8020d24:	4313      	orrs	r3, r2
 8020d26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8020d28:	683b      	ldr	r3, [r7, #0]
 8020d2a:	699b      	ldr	r3, [r3, #24]
 8020d2c:	009b      	lsls	r3, r3, #2
 8020d2e:	693a      	ldr	r2, [r7, #16]
 8020d30:	4313      	orrs	r3, r2
 8020d32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020d34:	687b      	ldr	r3, [r7, #4]
 8020d36:	693a      	ldr	r2, [r7, #16]
 8020d38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8020d3a:	687b      	ldr	r3, [r7, #4]
 8020d3c:	68fa      	ldr	r2, [r7, #12]
 8020d3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8020d40:	683b      	ldr	r3, [r7, #0]
 8020d42:	685a      	ldr	r2, [r3, #4]
 8020d44:	687b      	ldr	r3, [r7, #4]
 8020d46:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020d48:	687b      	ldr	r3, [r7, #4]
 8020d4a:	697a      	ldr	r2, [r7, #20]
 8020d4c:	621a      	str	r2, [r3, #32]
}
 8020d4e:	bf00      	nop
 8020d50:	371c      	adds	r7, #28
 8020d52:	46bd      	mov	sp, r7
 8020d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d58:	4770      	bx	lr
 8020d5a:	bf00      	nop
 8020d5c:	feff8fff 	.word	0xfeff8fff
 8020d60:	40010000 	.word	0x40010000
 8020d64:	40010400 	.word	0x40010400
 8020d68:	40014000 	.word	0x40014000
 8020d6c:	40014400 	.word	0x40014400
 8020d70:	40014800 	.word	0x40014800

08020d74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020d74:	b480      	push	{r7}
 8020d76:	b087      	sub	sp, #28
 8020d78:	af00      	add	r7, sp, #0
 8020d7a:	6078      	str	r0, [r7, #4]
 8020d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	6a1b      	ldr	r3, [r3, #32]
 8020d82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	6a1b      	ldr	r3, [r3, #32]
 8020d88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020d90:	687b      	ldr	r3, [r7, #4]
 8020d92:	685b      	ldr	r3, [r3, #4]
 8020d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020d96:	687b      	ldr	r3, [r7, #4]
 8020d98:	69db      	ldr	r3, [r3, #28]
 8020d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020d9c:	68fa      	ldr	r2, [r7, #12]
 8020d9e:	4b33      	ldr	r3, [pc, #204]	@ (8020e6c <TIM_OC3_SetConfig+0xf8>)
 8020da0:	4013      	ands	r3, r2
 8020da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020da4:	68fb      	ldr	r3, [r7, #12]
 8020da6:	f023 0303 	bic.w	r3, r3, #3
 8020daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020dac:	683b      	ldr	r3, [r7, #0]
 8020dae:	681b      	ldr	r3, [r3, #0]
 8020db0:	68fa      	ldr	r2, [r7, #12]
 8020db2:	4313      	orrs	r3, r2
 8020db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8020db6:	697b      	ldr	r3, [r7, #20]
 8020db8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020dbe:	683b      	ldr	r3, [r7, #0]
 8020dc0:	689b      	ldr	r3, [r3, #8]
 8020dc2:	021b      	lsls	r3, r3, #8
 8020dc4:	697a      	ldr	r2, [r7, #20]
 8020dc6:	4313      	orrs	r3, r2
 8020dc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	4a28      	ldr	r2, [pc, #160]	@ (8020e70 <TIM_OC3_SetConfig+0xfc>)
 8020dce:	4293      	cmp	r3, r2
 8020dd0:	d003      	beq.n	8020dda <TIM_OC3_SetConfig+0x66>
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	4a27      	ldr	r2, [pc, #156]	@ (8020e74 <TIM_OC3_SetConfig+0x100>)
 8020dd6:	4293      	cmp	r3, r2
 8020dd8:	d10d      	bne.n	8020df6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8020dda:	697b      	ldr	r3, [r7, #20]
 8020ddc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020de0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020de2:	683b      	ldr	r3, [r7, #0]
 8020de4:	68db      	ldr	r3, [r3, #12]
 8020de6:	021b      	lsls	r3, r3, #8
 8020de8:	697a      	ldr	r2, [r7, #20]
 8020dea:	4313      	orrs	r3, r2
 8020dec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020dee:	697b      	ldr	r3, [r7, #20]
 8020df0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020df4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020df6:	687b      	ldr	r3, [r7, #4]
 8020df8:	4a1d      	ldr	r2, [pc, #116]	@ (8020e70 <TIM_OC3_SetConfig+0xfc>)
 8020dfa:	4293      	cmp	r3, r2
 8020dfc:	d00f      	beq.n	8020e1e <TIM_OC3_SetConfig+0xaa>
 8020dfe:	687b      	ldr	r3, [r7, #4]
 8020e00:	4a1c      	ldr	r2, [pc, #112]	@ (8020e74 <TIM_OC3_SetConfig+0x100>)
 8020e02:	4293      	cmp	r3, r2
 8020e04:	d00b      	beq.n	8020e1e <TIM_OC3_SetConfig+0xaa>
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	4a1b      	ldr	r2, [pc, #108]	@ (8020e78 <TIM_OC3_SetConfig+0x104>)
 8020e0a:	4293      	cmp	r3, r2
 8020e0c:	d007      	beq.n	8020e1e <TIM_OC3_SetConfig+0xaa>
 8020e0e:	687b      	ldr	r3, [r7, #4]
 8020e10:	4a1a      	ldr	r2, [pc, #104]	@ (8020e7c <TIM_OC3_SetConfig+0x108>)
 8020e12:	4293      	cmp	r3, r2
 8020e14:	d003      	beq.n	8020e1e <TIM_OC3_SetConfig+0xaa>
 8020e16:	687b      	ldr	r3, [r7, #4]
 8020e18:	4a19      	ldr	r2, [pc, #100]	@ (8020e80 <TIM_OC3_SetConfig+0x10c>)
 8020e1a:	4293      	cmp	r3, r2
 8020e1c:	d113      	bne.n	8020e46 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8020e1e:	693b      	ldr	r3, [r7, #16]
 8020e20:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020e24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8020e26:	693b      	ldr	r3, [r7, #16]
 8020e28:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8020e2e:	683b      	ldr	r3, [r7, #0]
 8020e30:	695b      	ldr	r3, [r3, #20]
 8020e32:	011b      	lsls	r3, r3, #4
 8020e34:	693a      	ldr	r2, [r7, #16]
 8020e36:	4313      	orrs	r3, r2
 8020e38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8020e3a:	683b      	ldr	r3, [r7, #0]
 8020e3c:	699b      	ldr	r3, [r3, #24]
 8020e3e:	011b      	lsls	r3, r3, #4
 8020e40:	693a      	ldr	r2, [r7, #16]
 8020e42:	4313      	orrs	r3, r2
 8020e44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020e46:	687b      	ldr	r3, [r7, #4]
 8020e48:	693a      	ldr	r2, [r7, #16]
 8020e4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020e4c:	687b      	ldr	r3, [r7, #4]
 8020e4e:	68fa      	ldr	r2, [r7, #12]
 8020e50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8020e52:	683b      	ldr	r3, [r7, #0]
 8020e54:	685a      	ldr	r2, [r3, #4]
 8020e56:	687b      	ldr	r3, [r7, #4]
 8020e58:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	697a      	ldr	r2, [r7, #20]
 8020e5e:	621a      	str	r2, [r3, #32]
}
 8020e60:	bf00      	nop
 8020e62:	371c      	adds	r7, #28
 8020e64:	46bd      	mov	sp, r7
 8020e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e6a:	4770      	bx	lr
 8020e6c:	fffeff8f 	.word	0xfffeff8f
 8020e70:	40010000 	.word	0x40010000
 8020e74:	40010400 	.word	0x40010400
 8020e78:	40014000 	.word	0x40014000
 8020e7c:	40014400 	.word	0x40014400
 8020e80:	40014800 	.word	0x40014800

08020e84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020e84:	b480      	push	{r7}
 8020e86:	b087      	sub	sp, #28
 8020e88:	af00      	add	r7, sp, #0
 8020e8a:	6078      	str	r0, [r7, #4]
 8020e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020e8e:	687b      	ldr	r3, [r7, #4]
 8020e90:	6a1b      	ldr	r3, [r3, #32]
 8020e92:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020e94:	687b      	ldr	r3, [r7, #4]
 8020e96:	6a1b      	ldr	r3, [r3, #32]
 8020e98:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020e9c:	687b      	ldr	r3, [r7, #4]
 8020e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020ea0:	687b      	ldr	r3, [r7, #4]
 8020ea2:	685b      	ldr	r3, [r3, #4]
 8020ea4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	69db      	ldr	r3, [r3, #28]
 8020eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020eac:	68fa      	ldr	r2, [r7, #12]
 8020eae:	4b24      	ldr	r3, [pc, #144]	@ (8020f40 <TIM_OC4_SetConfig+0xbc>)
 8020eb0:	4013      	ands	r3, r2
 8020eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020eb4:	68fb      	ldr	r3, [r7, #12]
 8020eb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020eba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020ebc:	683b      	ldr	r3, [r7, #0]
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	021b      	lsls	r3, r3, #8
 8020ec2:	68fa      	ldr	r2, [r7, #12]
 8020ec4:	4313      	orrs	r3, r2
 8020ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8020ec8:	693b      	ldr	r3, [r7, #16]
 8020eca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020ece:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020ed0:	683b      	ldr	r3, [r7, #0]
 8020ed2:	689b      	ldr	r3, [r3, #8]
 8020ed4:	031b      	lsls	r3, r3, #12
 8020ed6:	693a      	ldr	r2, [r7, #16]
 8020ed8:	4313      	orrs	r3, r2
 8020eda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020edc:	687b      	ldr	r3, [r7, #4]
 8020ede:	4a19      	ldr	r2, [pc, #100]	@ (8020f44 <TIM_OC4_SetConfig+0xc0>)
 8020ee0:	4293      	cmp	r3, r2
 8020ee2:	d00f      	beq.n	8020f04 <TIM_OC4_SetConfig+0x80>
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	4a18      	ldr	r2, [pc, #96]	@ (8020f48 <TIM_OC4_SetConfig+0xc4>)
 8020ee8:	4293      	cmp	r3, r2
 8020eea:	d00b      	beq.n	8020f04 <TIM_OC4_SetConfig+0x80>
 8020eec:	687b      	ldr	r3, [r7, #4]
 8020eee:	4a17      	ldr	r2, [pc, #92]	@ (8020f4c <TIM_OC4_SetConfig+0xc8>)
 8020ef0:	4293      	cmp	r3, r2
 8020ef2:	d007      	beq.n	8020f04 <TIM_OC4_SetConfig+0x80>
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	4a16      	ldr	r2, [pc, #88]	@ (8020f50 <TIM_OC4_SetConfig+0xcc>)
 8020ef8:	4293      	cmp	r3, r2
 8020efa:	d003      	beq.n	8020f04 <TIM_OC4_SetConfig+0x80>
 8020efc:	687b      	ldr	r3, [r7, #4]
 8020efe:	4a15      	ldr	r2, [pc, #84]	@ (8020f54 <TIM_OC4_SetConfig+0xd0>)
 8020f00:	4293      	cmp	r3, r2
 8020f02:	d109      	bne.n	8020f18 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8020f04:	697b      	ldr	r3, [r7, #20]
 8020f06:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8020f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8020f0c:	683b      	ldr	r3, [r7, #0]
 8020f0e:	695b      	ldr	r3, [r3, #20]
 8020f10:	019b      	lsls	r3, r3, #6
 8020f12:	697a      	ldr	r2, [r7, #20]
 8020f14:	4313      	orrs	r3, r2
 8020f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	697a      	ldr	r2, [r7, #20]
 8020f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8020f1e:	687b      	ldr	r3, [r7, #4]
 8020f20:	68fa      	ldr	r2, [r7, #12]
 8020f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8020f24:	683b      	ldr	r3, [r7, #0]
 8020f26:	685a      	ldr	r2, [r3, #4]
 8020f28:	687b      	ldr	r3, [r7, #4]
 8020f2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	693a      	ldr	r2, [r7, #16]
 8020f30:	621a      	str	r2, [r3, #32]
}
 8020f32:	bf00      	nop
 8020f34:	371c      	adds	r7, #28
 8020f36:	46bd      	mov	sp, r7
 8020f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f3c:	4770      	bx	lr
 8020f3e:	bf00      	nop
 8020f40:	feff8fff 	.word	0xfeff8fff
 8020f44:	40010000 	.word	0x40010000
 8020f48:	40010400 	.word	0x40010400
 8020f4c:	40014000 	.word	0x40014000
 8020f50:	40014400 	.word	0x40014400
 8020f54:	40014800 	.word	0x40014800

08020f58 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020f58:	b480      	push	{r7}
 8020f5a:	b087      	sub	sp, #28
 8020f5c:	af00      	add	r7, sp, #0
 8020f5e:	6078      	str	r0, [r7, #4]
 8020f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	6a1b      	ldr	r3, [r3, #32]
 8020f66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	6a1b      	ldr	r3, [r3, #32]
 8020f6c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8020f70:	687b      	ldr	r3, [r7, #4]
 8020f72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020f74:	687b      	ldr	r3, [r7, #4]
 8020f76:	685b      	ldr	r3, [r3, #4]
 8020f78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020f7a:	687b      	ldr	r3, [r7, #4]
 8020f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020f80:	68fa      	ldr	r2, [r7, #12]
 8020f82:	4b21      	ldr	r3, [pc, #132]	@ (8021008 <TIM_OC5_SetConfig+0xb0>)
 8020f84:	4013      	ands	r3, r2
 8020f86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020f88:	683b      	ldr	r3, [r7, #0]
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	68fa      	ldr	r2, [r7, #12]
 8020f8e:	4313      	orrs	r3, r2
 8020f90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020f92:	693b      	ldr	r3, [r7, #16]
 8020f94:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8020f98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8020f9a:	683b      	ldr	r3, [r7, #0]
 8020f9c:	689b      	ldr	r3, [r3, #8]
 8020f9e:	041b      	lsls	r3, r3, #16
 8020fa0:	693a      	ldr	r2, [r7, #16]
 8020fa2:	4313      	orrs	r3, r2
 8020fa4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020fa6:	687b      	ldr	r3, [r7, #4]
 8020fa8:	4a18      	ldr	r2, [pc, #96]	@ (802100c <TIM_OC5_SetConfig+0xb4>)
 8020faa:	4293      	cmp	r3, r2
 8020fac:	d00f      	beq.n	8020fce <TIM_OC5_SetConfig+0x76>
 8020fae:	687b      	ldr	r3, [r7, #4]
 8020fb0:	4a17      	ldr	r2, [pc, #92]	@ (8021010 <TIM_OC5_SetConfig+0xb8>)
 8020fb2:	4293      	cmp	r3, r2
 8020fb4:	d00b      	beq.n	8020fce <TIM_OC5_SetConfig+0x76>
 8020fb6:	687b      	ldr	r3, [r7, #4]
 8020fb8:	4a16      	ldr	r2, [pc, #88]	@ (8021014 <TIM_OC5_SetConfig+0xbc>)
 8020fba:	4293      	cmp	r3, r2
 8020fbc:	d007      	beq.n	8020fce <TIM_OC5_SetConfig+0x76>
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	4a15      	ldr	r2, [pc, #84]	@ (8021018 <TIM_OC5_SetConfig+0xc0>)
 8020fc2:	4293      	cmp	r3, r2
 8020fc4:	d003      	beq.n	8020fce <TIM_OC5_SetConfig+0x76>
 8020fc6:	687b      	ldr	r3, [r7, #4]
 8020fc8:	4a14      	ldr	r2, [pc, #80]	@ (802101c <TIM_OC5_SetConfig+0xc4>)
 8020fca:	4293      	cmp	r3, r2
 8020fcc:	d109      	bne.n	8020fe2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020fce:	697b      	ldr	r3, [r7, #20]
 8020fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020fd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8020fd6:	683b      	ldr	r3, [r7, #0]
 8020fd8:	695b      	ldr	r3, [r3, #20]
 8020fda:	021b      	lsls	r3, r3, #8
 8020fdc:	697a      	ldr	r2, [r7, #20]
 8020fde:	4313      	orrs	r3, r2
 8020fe0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	697a      	ldr	r2, [r7, #20]
 8020fe6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020fe8:	687b      	ldr	r3, [r7, #4]
 8020fea:	68fa      	ldr	r2, [r7, #12]
 8020fec:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020fee:	683b      	ldr	r3, [r7, #0]
 8020ff0:	685a      	ldr	r2, [r3, #4]
 8020ff2:	687b      	ldr	r3, [r7, #4]
 8020ff4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	693a      	ldr	r2, [r7, #16]
 8020ffa:	621a      	str	r2, [r3, #32]
}
 8020ffc:	bf00      	nop
 8020ffe:	371c      	adds	r7, #28
 8021000:	46bd      	mov	sp, r7
 8021002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021006:	4770      	bx	lr
 8021008:	fffeff8f 	.word	0xfffeff8f
 802100c:	40010000 	.word	0x40010000
 8021010:	40010400 	.word	0x40010400
 8021014:	40014000 	.word	0x40014000
 8021018:	40014400 	.word	0x40014400
 802101c:	40014800 	.word	0x40014800

08021020 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8021020:	b480      	push	{r7}
 8021022:	b087      	sub	sp, #28
 8021024:	af00      	add	r7, sp, #0
 8021026:	6078      	str	r0, [r7, #4]
 8021028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802102a:	687b      	ldr	r3, [r7, #4]
 802102c:	6a1b      	ldr	r3, [r3, #32]
 802102e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8021030:	687b      	ldr	r3, [r7, #4]
 8021032:	6a1b      	ldr	r3, [r3, #32]
 8021034:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8021038:	687b      	ldr	r3, [r7, #4]
 802103a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802103c:	687b      	ldr	r3, [r7, #4]
 802103e:	685b      	ldr	r3, [r3, #4]
 8021040:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8021048:	68fa      	ldr	r2, [r7, #12]
 802104a:	4b22      	ldr	r3, [pc, #136]	@ (80210d4 <TIM_OC6_SetConfig+0xb4>)
 802104c:	4013      	ands	r3, r2
 802104e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8021050:	683b      	ldr	r3, [r7, #0]
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	021b      	lsls	r3, r3, #8
 8021056:	68fa      	ldr	r2, [r7, #12]
 8021058:	4313      	orrs	r3, r2
 802105a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 802105c:	693b      	ldr	r3, [r7, #16]
 802105e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8021062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8021064:	683b      	ldr	r3, [r7, #0]
 8021066:	689b      	ldr	r3, [r3, #8]
 8021068:	051b      	lsls	r3, r3, #20
 802106a:	693a      	ldr	r2, [r7, #16]
 802106c:	4313      	orrs	r3, r2
 802106e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8021070:	687b      	ldr	r3, [r7, #4]
 8021072:	4a19      	ldr	r2, [pc, #100]	@ (80210d8 <TIM_OC6_SetConfig+0xb8>)
 8021074:	4293      	cmp	r3, r2
 8021076:	d00f      	beq.n	8021098 <TIM_OC6_SetConfig+0x78>
 8021078:	687b      	ldr	r3, [r7, #4]
 802107a:	4a18      	ldr	r2, [pc, #96]	@ (80210dc <TIM_OC6_SetConfig+0xbc>)
 802107c:	4293      	cmp	r3, r2
 802107e:	d00b      	beq.n	8021098 <TIM_OC6_SetConfig+0x78>
 8021080:	687b      	ldr	r3, [r7, #4]
 8021082:	4a17      	ldr	r2, [pc, #92]	@ (80210e0 <TIM_OC6_SetConfig+0xc0>)
 8021084:	4293      	cmp	r3, r2
 8021086:	d007      	beq.n	8021098 <TIM_OC6_SetConfig+0x78>
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	4a16      	ldr	r2, [pc, #88]	@ (80210e4 <TIM_OC6_SetConfig+0xc4>)
 802108c:	4293      	cmp	r3, r2
 802108e:	d003      	beq.n	8021098 <TIM_OC6_SetConfig+0x78>
 8021090:	687b      	ldr	r3, [r7, #4]
 8021092:	4a15      	ldr	r2, [pc, #84]	@ (80210e8 <TIM_OC6_SetConfig+0xc8>)
 8021094:	4293      	cmp	r3, r2
 8021096:	d109      	bne.n	80210ac <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8021098:	697b      	ldr	r3, [r7, #20]
 802109a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 802109e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80210a0:	683b      	ldr	r3, [r7, #0]
 80210a2:	695b      	ldr	r3, [r3, #20]
 80210a4:	029b      	lsls	r3, r3, #10
 80210a6:	697a      	ldr	r2, [r7, #20]
 80210a8:	4313      	orrs	r3, r2
 80210aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80210ac:	687b      	ldr	r3, [r7, #4]
 80210ae:	697a      	ldr	r2, [r7, #20]
 80210b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80210b2:	687b      	ldr	r3, [r7, #4]
 80210b4:	68fa      	ldr	r2, [r7, #12]
 80210b6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80210b8:	683b      	ldr	r3, [r7, #0]
 80210ba:	685a      	ldr	r2, [r3, #4]
 80210bc:	687b      	ldr	r3, [r7, #4]
 80210be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80210c0:	687b      	ldr	r3, [r7, #4]
 80210c2:	693a      	ldr	r2, [r7, #16]
 80210c4:	621a      	str	r2, [r3, #32]
}
 80210c6:	bf00      	nop
 80210c8:	371c      	adds	r7, #28
 80210ca:	46bd      	mov	sp, r7
 80210cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210d0:	4770      	bx	lr
 80210d2:	bf00      	nop
 80210d4:	feff8fff 	.word	0xfeff8fff
 80210d8:	40010000 	.word	0x40010000
 80210dc:	40010400 	.word	0x40010400
 80210e0:	40014000 	.word	0x40014000
 80210e4:	40014400 	.word	0x40014400
 80210e8:	40014800 	.word	0x40014800

080210ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80210ec:	b480      	push	{r7}
 80210ee:	b087      	sub	sp, #28
 80210f0:	af00      	add	r7, sp, #0
 80210f2:	60f8      	str	r0, [r7, #12]
 80210f4:	60b9      	str	r1, [r7, #8]
 80210f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80210f8:	68fb      	ldr	r3, [r7, #12]
 80210fa:	6a1b      	ldr	r3, [r3, #32]
 80210fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80210fe:	68fb      	ldr	r3, [r7, #12]
 8021100:	6a1b      	ldr	r3, [r3, #32]
 8021102:	f023 0201 	bic.w	r2, r3, #1
 8021106:	68fb      	ldr	r3, [r7, #12]
 8021108:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802110a:	68fb      	ldr	r3, [r7, #12]
 802110c:	699b      	ldr	r3, [r3, #24]
 802110e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8021110:	693b      	ldr	r3, [r7, #16]
 8021112:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8021116:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8021118:	687b      	ldr	r3, [r7, #4]
 802111a:	011b      	lsls	r3, r3, #4
 802111c:	693a      	ldr	r2, [r7, #16]
 802111e:	4313      	orrs	r3, r2
 8021120:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8021122:	697b      	ldr	r3, [r7, #20]
 8021124:	f023 030a 	bic.w	r3, r3, #10
 8021128:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 802112a:	697a      	ldr	r2, [r7, #20]
 802112c:	68bb      	ldr	r3, [r7, #8]
 802112e:	4313      	orrs	r3, r2
 8021130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8021132:	68fb      	ldr	r3, [r7, #12]
 8021134:	693a      	ldr	r2, [r7, #16]
 8021136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021138:	68fb      	ldr	r3, [r7, #12]
 802113a:	697a      	ldr	r2, [r7, #20]
 802113c:	621a      	str	r2, [r3, #32]
}
 802113e:	bf00      	nop
 8021140:	371c      	adds	r7, #28
 8021142:	46bd      	mov	sp, r7
 8021144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021148:	4770      	bx	lr

0802114a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802114a:	b480      	push	{r7}
 802114c:	b087      	sub	sp, #28
 802114e:	af00      	add	r7, sp, #0
 8021150:	60f8      	str	r0, [r7, #12]
 8021152:	60b9      	str	r1, [r7, #8]
 8021154:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8021156:	68fb      	ldr	r3, [r7, #12]
 8021158:	6a1b      	ldr	r3, [r3, #32]
 802115a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802115c:	68fb      	ldr	r3, [r7, #12]
 802115e:	6a1b      	ldr	r3, [r3, #32]
 8021160:	f023 0210 	bic.w	r2, r3, #16
 8021164:	68fb      	ldr	r3, [r7, #12]
 8021166:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8021168:	68fb      	ldr	r3, [r7, #12]
 802116a:	699b      	ldr	r3, [r3, #24]
 802116c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802116e:	693b      	ldr	r3, [r7, #16]
 8021170:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8021174:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8021176:	687b      	ldr	r3, [r7, #4]
 8021178:	031b      	lsls	r3, r3, #12
 802117a:	693a      	ldr	r2, [r7, #16]
 802117c:	4313      	orrs	r3, r2
 802117e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8021180:	697b      	ldr	r3, [r7, #20]
 8021182:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8021186:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8021188:	68bb      	ldr	r3, [r7, #8]
 802118a:	011b      	lsls	r3, r3, #4
 802118c:	697a      	ldr	r2, [r7, #20]
 802118e:	4313      	orrs	r3, r2
 8021190:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8021192:	68fb      	ldr	r3, [r7, #12]
 8021194:	693a      	ldr	r2, [r7, #16]
 8021196:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8021198:	68fb      	ldr	r3, [r7, #12]
 802119a:	697a      	ldr	r2, [r7, #20]
 802119c:	621a      	str	r2, [r3, #32]
}
 802119e:	bf00      	nop
 80211a0:	371c      	adds	r7, #28
 80211a2:	46bd      	mov	sp, r7
 80211a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211a8:	4770      	bx	lr
	...

080211ac <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80211ac:	b480      	push	{r7}
 80211ae:	b085      	sub	sp, #20
 80211b0:	af00      	add	r7, sp, #0
 80211b2:	6078      	str	r0, [r7, #4]
 80211b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80211b6:	687b      	ldr	r3, [r7, #4]
 80211b8:	689b      	ldr	r3, [r3, #8]
 80211ba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80211bc:	68fa      	ldr	r2, [r7, #12]
 80211be:	4b09      	ldr	r3, [pc, #36]	@ (80211e4 <TIM_ITRx_SetConfig+0x38>)
 80211c0:	4013      	ands	r3, r2
 80211c2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80211c4:	683a      	ldr	r2, [r7, #0]
 80211c6:	68fb      	ldr	r3, [r7, #12]
 80211c8:	4313      	orrs	r3, r2
 80211ca:	f043 0307 	orr.w	r3, r3, #7
 80211ce:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80211d0:	687b      	ldr	r3, [r7, #4]
 80211d2:	68fa      	ldr	r2, [r7, #12]
 80211d4:	609a      	str	r2, [r3, #8]
}
 80211d6:	bf00      	nop
 80211d8:	3714      	adds	r7, #20
 80211da:	46bd      	mov	sp, r7
 80211dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211e0:	4770      	bx	lr
 80211e2:	bf00      	nop
 80211e4:	ffcfff8f 	.word	0xffcfff8f

080211e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80211e8:	b480      	push	{r7}
 80211ea:	b087      	sub	sp, #28
 80211ec:	af00      	add	r7, sp, #0
 80211ee:	60f8      	str	r0, [r7, #12]
 80211f0:	60b9      	str	r1, [r7, #8]
 80211f2:	607a      	str	r2, [r7, #4]
 80211f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80211f6:	68fb      	ldr	r3, [r7, #12]
 80211f8:	689b      	ldr	r3, [r3, #8]
 80211fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80211fc:	697b      	ldr	r3, [r7, #20]
 80211fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8021202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8021204:	683b      	ldr	r3, [r7, #0]
 8021206:	021a      	lsls	r2, r3, #8
 8021208:	687b      	ldr	r3, [r7, #4]
 802120a:	431a      	orrs	r2, r3
 802120c:	68bb      	ldr	r3, [r7, #8]
 802120e:	4313      	orrs	r3, r2
 8021210:	697a      	ldr	r2, [r7, #20]
 8021212:	4313      	orrs	r3, r2
 8021214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8021216:	68fb      	ldr	r3, [r7, #12]
 8021218:	697a      	ldr	r2, [r7, #20]
 802121a:	609a      	str	r2, [r3, #8]
}
 802121c:	bf00      	nop
 802121e:	371c      	adds	r7, #28
 8021220:	46bd      	mov	sp, r7
 8021222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021226:	4770      	bx	lr

08021228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8021228:	b480      	push	{r7}
 802122a:	b085      	sub	sp, #20
 802122c:	af00      	add	r7, sp, #0
 802122e:	6078      	str	r0, [r7, #4]
 8021230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8021238:	2b01      	cmp	r3, #1
 802123a:	d101      	bne.n	8021240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 802123c:	2302      	movs	r3, #2
 802123e:	e06d      	b.n	802131c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8021240:	687b      	ldr	r3, [r7, #4]
 8021242:	2201      	movs	r2, #1
 8021244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8021248:	687b      	ldr	r3, [r7, #4]
 802124a:	2202      	movs	r2, #2
 802124c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8021250:	687b      	ldr	r3, [r7, #4]
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	685b      	ldr	r3, [r3, #4]
 8021256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8021258:	687b      	ldr	r3, [r7, #4]
 802125a:	681b      	ldr	r3, [r3, #0]
 802125c:	689b      	ldr	r3, [r3, #8]
 802125e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8021260:	687b      	ldr	r3, [r7, #4]
 8021262:	681b      	ldr	r3, [r3, #0]
 8021264:	4a30      	ldr	r2, [pc, #192]	@ (8021328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8021266:	4293      	cmp	r3, r2
 8021268:	d004      	beq.n	8021274 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 802126a:	687b      	ldr	r3, [r7, #4]
 802126c:	681b      	ldr	r3, [r3, #0]
 802126e:	4a2f      	ldr	r2, [pc, #188]	@ (802132c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8021270:	4293      	cmp	r3, r2
 8021272:	d108      	bne.n	8021286 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8021274:	68fb      	ldr	r3, [r7, #12]
 8021276:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 802127a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 802127c:	683b      	ldr	r3, [r7, #0]
 802127e:	685b      	ldr	r3, [r3, #4]
 8021280:	68fa      	ldr	r2, [r7, #12]
 8021282:	4313      	orrs	r3, r2
 8021284:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8021286:	68fb      	ldr	r3, [r7, #12]
 8021288:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 802128c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 802128e:	683b      	ldr	r3, [r7, #0]
 8021290:	681b      	ldr	r3, [r3, #0]
 8021292:	68fa      	ldr	r2, [r7, #12]
 8021294:	4313      	orrs	r3, r2
 8021296:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8021298:	687b      	ldr	r3, [r7, #4]
 802129a:	681b      	ldr	r3, [r3, #0]
 802129c:	68fa      	ldr	r2, [r7, #12]
 802129e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80212a0:	687b      	ldr	r3, [r7, #4]
 80212a2:	681b      	ldr	r3, [r3, #0]
 80212a4:	4a20      	ldr	r2, [pc, #128]	@ (8021328 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80212a6:	4293      	cmp	r3, r2
 80212a8:	d022      	beq.n	80212f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212aa:	687b      	ldr	r3, [r7, #4]
 80212ac:	681b      	ldr	r3, [r3, #0]
 80212ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80212b2:	d01d      	beq.n	80212f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212b4:	687b      	ldr	r3, [r7, #4]
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	4a1d      	ldr	r2, [pc, #116]	@ (8021330 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80212ba:	4293      	cmp	r3, r2
 80212bc:	d018      	beq.n	80212f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212be:	687b      	ldr	r3, [r7, #4]
 80212c0:	681b      	ldr	r3, [r3, #0]
 80212c2:	4a1c      	ldr	r2, [pc, #112]	@ (8021334 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80212c4:	4293      	cmp	r3, r2
 80212c6:	d013      	beq.n	80212f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212c8:	687b      	ldr	r3, [r7, #4]
 80212ca:	681b      	ldr	r3, [r3, #0]
 80212cc:	4a1a      	ldr	r2, [pc, #104]	@ (8021338 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80212ce:	4293      	cmp	r3, r2
 80212d0:	d00e      	beq.n	80212f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212d2:	687b      	ldr	r3, [r7, #4]
 80212d4:	681b      	ldr	r3, [r3, #0]
 80212d6:	4a15      	ldr	r2, [pc, #84]	@ (802132c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80212d8:	4293      	cmp	r3, r2
 80212da:	d009      	beq.n	80212f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	681b      	ldr	r3, [r3, #0]
 80212e0:	4a16      	ldr	r2, [pc, #88]	@ (802133c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80212e2:	4293      	cmp	r3, r2
 80212e4:	d004      	beq.n	80212f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	681b      	ldr	r3, [r3, #0]
 80212ea:	4a15      	ldr	r2, [pc, #84]	@ (8021340 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80212ec:	4293      	cmp	r3, r2
 80212ee:	d10c      	bne.n	802130a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80212f0:	68bb      	ldr	r3, [r7, #8]
 80212f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80212f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80212f8:	683b      	ldr	r3, [r7, #0]
 80212fa:	689b      	ldr	r3, [r3, #8]
 80212fc:	68ba      	ldr	r2, [r7, #8]
 80212fe:	4313      	orrs	r3, r2
 8021300:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8021302:	687b      	ldr	r3, [r7, #4]
 8021304:	681b      	ldr	r3, [r3, #0]
 8021306:	68ba      	ldr	r2, [r7, #8]
 8021308:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802130a:	687b      	ldr	r3, [r7, #4]
 802130c:	2201      	movs	r2, #1
 802130e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8021312:	687b      	ldr	r3, [r7, #4]
 8021314:	2200      	movs	r2, #0
 8021316:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 802131a:	2300      	movs	r3, #0
}
 802131c:	4618      	mov	r0, r3
 802131e:	3714      	adds	r7, #20
 8021320:	46bd      	mov	sp, r7
 8021322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021326:	4770      	bx	lr
 8021328:	40010000 	.word	0x40010000
 802132c:	40010400 	.word	0x40010400
 8021330:	40000400 	.word	0x40000400
 8021334:	40000800 	.word	0x40000800
 8021338:	40000c00 	.word	0x40000c00
 802133c:	40001800 	.word	0x40001800
 8021340:	40014000 	.word	0x40014000

08021344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8021344:	b580      	push	{r7, lr}
 8021346:	b082      	sub	sp, #8
 8021348:	af00      	add	r7, sp, #0
 802134a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 802134c:	687b      	ldr	r3, [r7, #4]
 802134e:	2b00      	cmp	r3, #0
 8021350:	d101      	bne.n	8021356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8021352:	2301      	movs	r3, #1
 8021354:	e042      	b.n	80213dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8021356:	687b      	ldr	r3, [r7, #4]
 8021358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 802135c:	2b00      	cmp	r3, #0
 802135e:	d106      	bne.n	802136e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8021360:	687b      	ldr	r3, [r7, #4]
 8021362:	2200      	movs	r2, #0
 8021364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8021368:	6878      	ldr	r0, [r7, #4]
 802136a:	f7e1 fcff 	bl	8002d6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802136e:	687b      	ldr	r3, [r7, #4]
 8021370:	2224      	movs	r2, #36	@ 0x24
 8021372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8021376:	687b      	ldr	r3, [r7, #4]
 8021378:	681b      	ldr	r3, [r3, #0]
 802137a:	681a      	ldr	r2, [r3, #0]
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	681b      	ldr	r3, [r3, #0]
 8021380:	f022 0201 	bic.w	r2, r2, #1
 8021384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8021386:	687b      	ldr	r3, [r7, #4]
 8021388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802138a:	2b00      	cmp	r3, #0
 802138c:	d002      	beq.n	8021394 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 802138e:	6878      	ldr	r0, [r7, #4]
 8021390:	f000 fd90 	bl	8021eb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8021394:	6878      	ldr	r0, [r7, #4]
 8021396:	f000 f825 	bl	80213e4 <UART_SetConfig>
 802139a:	4603      	mov	r3, r0
 802139c:	2b01      	cmp	r3, #1
 802139e:	d101      	bne.n	80213a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80213a0:	2301      	movs	r3, #1
 80213a2:	e01b      	b.n	80213dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	681b      	ldr	r3, [r3, #0]
 80213a8:	685a      	ldr	r2, [r3, #4]
 80213aa:	687b      	ldr	r3, [r7, #4]
 80213ac:	681b      	ldr	r3, [r3, #0]
 80213ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80213b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80213b4:	687b      	ldr	r3, [r7, #4]
 80213b6:	681b      	ldr	r3, [r3, #0]
 80213b8:	689a      	ldr	r2, [r3, #8]
 80213ba:	687b      	ldr	r3, [r7, #4]
 80213bc:	681b      	ldr	r3, [r3, #0]
 80213be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80213c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	681a      	ldr	r2, [r3, #0]
 80213ca:	687b      	ldr	r3, [r7, #4]
 80213cc:	681b      	ldr	r3, [r3, #0]
 80213ce:	f042 0201 	orr.w	r2, r2, #1
 80213d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80213d4:	6878      	ldr	r0, [r7, #4]
 80213d6:	f000 fe0f 	bl	8021ff8 <UART_CheckIdleState>
 80213da:	4603      	mov	r3, r0
}
 80213dc:	4618      	mov	r0, r3
 80213de:	3708      	adds	r7, #8
 80213e0:	46bd      	mov	sp, r7
 80213e2:	bd80      	pop	{r7, pc}

080213e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80213e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80213e8:	b092      	sub	sp, #72	@ 0x48
 80213ea:	af00      	add	r7, sp, #0
 80213ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80213ee:	2300      	movs	r3, #0
 80213f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80213f4:	697b      	ldr	r3, [r7, #20]
 80213f6:	689a      	ldr	r2, [r3, #8]
 80213f8:	697b      	ldr	r3, [r7, #20]
 80213fa:	691b      	ldr	r3, [r3, #16]
 80213fc:	431a      	orrs	r2, r3
 80213fe:	697b      	ldr	r3, [r7, #20]
 8021400:	695b      	ldr	r3, [r3, #20]
 8021402:	431a      	orrs	r2, r3
 8021404:	697b      	ldr	r3, [r7, #20]
 8021406:	69db      	ldr	r3, [r3, #28]
 8021408:	4313      	orrs	r3, r2
 802140a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 802140c:	697b      	ldr	r3, [r7, #20]
 802140e:	681b      	ldr	r3, [r3, #0]
 8021410:	681a      	ldr	r2, [r3, #0]
 8021412:	4bbe      	ldr	r3, [pc, #760]	@ (802170c <UART_SetConfig+0x328>)
 8021414:	4013      	ands	r3, r2
 8021416:	697a      	ldr	r2, [r7, #20]
 8021418:	6812      	ldr	r2, [r2, #0]
 802141a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 802141c:	430b      	orrs	r3, r1
 802141e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8021420:	697b      	ldr	r3, [r7, #20]
 8021422:	681b      	ldr	r3, [r3, #0]
 8021424:	685b      	ldr	r3, [r3, #4]
 8021426:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 802142a:	697b      	ldr	r3, [r7, #20]
 802142c:	68da      	ldr	r2, [r3, #12]
 802142e:	697b      	ldr	r3, [r7, #20]
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	430a      	orrs	r2, r1
 8021434:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8021436:	697b      	ldr	r3, [r7, #20]
 8021438:	699b      	ldr	r3, [r3, #24]
 802143a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 802143c:	697b      	ldr	r3, [r7, #20]
 802143e:	681b      	ldr	r3, [r3, #0]
 8021440:	4ab3      	ldr	r2, [pc, #716]	@ (8021710 <UART_SetConfig+0x32c>)
 8021442:	4293      	cmp	r3, r2
 8021444:	d004      	beq.n	8021450 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8021446:	697b      	ldr	r3, [r7, #20]
 8021448:	6a1b      	ldr	r3, [r3, #32]
 802144a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802144c:	4313      	orrs	r3, r2
 802144e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8021450:	697b      	ldr	r3, [r7, #20]
 8021452:	681b      	ldr	r3, [r3, #0]
 8021454:	689a      	ldr	r2, [r3, #8]
 8021456:	4baf      	ldr	r3, [pc, #700]	@ (8021714 <UART_SetConfig+0x330>)
 8021458:	4013      	ands	r3, r2
 802145a:	697a      	ldr	r2, [r7, #20]
 802145c:	6812      	ldr	r2, [r2, #0]
 802145e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8021460:	430b      	orrs	r3, r1
 8021462:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8021464:	697b      	ldr	r3, [r7, #20]
 8021466:	681b      	ldr	r3, [r3, #0]
 8021468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802146a:	f023 010f 	bic.w	r1, r3, #15
 802146e:	697b      	ldr	r3, [r7, #20]
 8021470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8021472:	697b      	ldr	r3, [r7, #20]
 8021474:	681b      	ldr	r3, [r3, #0]
 8021476:	430a      	orrs	r2, r1
 8021478:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 802147a:	697b      	ldr	r3, [r7, #20]
 802147c:	681b      	ldr	r3, [r3, #0]
 802147e:	4aa6      	ldr	r2, [pc, #664]	@ (8021718 <UART_SetConfig+0x334>)
 8021480:	4293      	cmp	r3, r2
 8021482:	d177      	bne.n	8021574 <UART_SetConfig+0x190>
 8021484:	4ba5      	ldr	r3, [pc, #660]	@ (802171c <UART_SetConfig+0x338>)
 8021486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021488:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802148c:	2b28      	cmp	r3, #40	@ 0x28
 802148e:	d86d      	bhi.n	802156c <UART_SetConfig+0x188>
 8021490:	a201      	add	r2, pc, #4	@ (adr r2, 8021498 <UART_SetConfig+0xb4>)
 8021492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021496:	bf00      	nop
 8021498:	0802153d 	.word	0x0802153d
 802149c:	0802156d 	.word	0x0802156d
 80214a0:	0802156d 	.word	0x0802156d
 80214a4:	0802156d 	.word	0x0802156d
 80214a8:	0802156d 	.word	0x0802156d
 80214ac:	0802156d 	.word	0x0802156d
 80214b0:	0802156d 	.word	0x0802156d
 80214b4:	0802156d 	.word	0x0802156d
 80214b8:	08021545 	.word	0x08021545
 80214bc:	0802156d 	.word	0x0802156d
 80214c0:	0802156d 	.word	0x0802156d
 80214c4:	0802156d 	.word	0x0802156d
 80214c8:	0802156d 	.word	0x0802156d
 80214cc:	0802156d 	.word	0x0802156d
 80214d0:	0802156d 	.word	0x0802156d
 80214d4:	0802156d 	.word	0x0802156d
 80214d8:	0802154d 	.word	0x0802154d
 80214dc:	0802156d 	.word	0x0802156d
 80214e0:	0802156d 	.word	0x0802156d
 80214e4:	0802156d 	.word	0x0802156d
 80214e8:	0802156d 	.word	0x0802156d
 80214ec:	0802156d 	.word	0x0802156d
 80214f0:	0802156d 	.word	0x0802156d
 80214f4:	0802156d 	.word	0x0802156d
 80214f8:	08021555 	.word	0x08021555
 80214fc:	0802156d 	.word	0x0802156d
 8021500:	0802156d 	.word	0x0802156d
 8021504:	0802156d 	.word	0x0802156d
 8021508:	0802156d 	.word	0x0802156d
 802150c:	0802156d 	.word	0x0802156d
 8021510:	0802156d 	.word	0x0802156d
 8021514:	0802156d 	.word	0x0802156d
 8021518:	0802155d 	.word	0x0802155d
 802151c:	0802156d 	.word	0x0802156d
 8021520:	0802156d 	.word	0x0802156d
 8021524:	0802156d 	.word	0x0802156d
 8021528:	0802156d 	.word	0x0802156d
 802152c:	0802156d 	.word	0x0802156d
 8021530:	0802156d 	.word	0x0802156d
 8021534:	0802156d 	.word	0x0802156d
 8021538:	08021565 	.word	0x08021565
 802153c:	2301      	movs	r3, #1
 802153e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021542:	e222      	b.n	802198a <UART_SetConfig+0x5a6>
 8021544:	2304      	movs	r3, #4
 8021546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802154a:	e21e      	b.n	802198a <UART_SetConfig+0x5a6>
 802154c:	2308      	movs	r3, #8
 802154e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021552:	e21a      	b.n	802198a <UART_SetConfig+0x5a6>
 8021554:	2310      	movs	r3, #16
 8021556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802155a:	e216      	b.n	802198a <UART_SetConfig+0x5a6>
 802155c:	2320      	movs	r3, #32
 802155e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021562:	e212      	b.n	802198a <UART_SetConfig+0x5a6>
 8021564:	2340      	movs	r3, #64	@ 0x40
 8021566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802156a:	e20e      	b.n	802198a <UART_SetConfig+0x5a6>
 802156c:	2380      	movs	r3, #128	@ 0x80
 802156e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021572:	e20a      	b.n	802198a <UART_SetConfig+0x5a6>
 8021574:	697b      	ldr	r3, [r7, #20]
 8021576:	681b      	ldr	r3, [r3, #0]
 8021578:	4a69      	ldr	r2, [pc, #420]	@ (8021720 <UART_SetConfig+0x33c>)
 802157a:	4293      	cmp	r3, r2
 802157c:	d130      	bne.n	80215e0 <UART_SetConfig+0x1fc>
 802157e:	4b67      	ldr	r3, [pc, #412]	@ (802171c <UART_SetConfig+0x338>)
 8021580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021582:	f003 0307 	and.w	r3, r3, #7
 8021586:	2b05      	cmp	r3, #5
 8021588:	d826      	bhi.n	80215d8 <UART_SetConfig+0x1f4>
 802158a:	a201      	add	r2, pc, #4	@ (adr r2, 8021590 <UART_SetConfig+0x1ac>)
 802158c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021590:	080215a9 	.word	0x080215a9
 8021594:	080215b1 	.word	0x080215b1
 8021598:	080215b9 	.word	0x080215b9
 802159c:	080215c1 	.word	0x080215c1
 80215a0:	080215c9 	.word	0x080215c9
 80215a4:	080215d1 	.word	0x080215d1
 80215a8:	2300      	movs	r3, #0
 80215aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215ae:	e1ec      	b.n	802198a <UART_SetConfig+0x5a6>
 80215b0:	2304      	movs	r3, #4
 80215b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215b6:	e1e8      	b.n	802198a <UART_SetConfig+0x5a6>
 80215b8:	2308      	movs	r3, #8
 80215ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215be:	e1e4      	b.n	802198a <UART_SetConfig+0x5a6>
 80215c0:	2310      	movs	r3, #16
 80215c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215c6:	e1e0      	b.n	802198a <UART_SetConfig+0x5a6>
 80215c8:	2320      	movs	r3, #32
 80215ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215ce:	e1dc      	b.n	802198a <UART_SetConfig+0x5a6>
 80215d0:	2340      	movs	r3, #64	@ 0x40
 80215d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215d6:	e1d8      	b.n	802198a <UART_SetConfig+0x5a6>
 80215d8:	2380      	movs	r3, #128	@ 0x80
 80215da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80215de:	e1d4      	b.n	802198a <UART_SetConfig+0x5a6>
 80215e0:	697b      	ldr	r3, [r7, #20]
 80215e2:	681b      	ldr	r3, [r3, #0]
 80215e4:	4a4f      	ldr	r2, [pc, #316]	@ (8021724 <UART_SetConfig+0x340>)
 80215e6:	4293      	cmp	r3, r2
 80215e8:	d130      	bne.n	802164c <UART_SetConfig+0x268>
 80215ea:	4b4c      	ldr	r3, [pc, #304]	@ (802171c <UART_SetConfig+0x338>)
 80215ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80215ee:	f003 0307 	and.w	r3, r3, #7
 80215f2:	2b05      	cmp	r3, #5
 80215f4:	d826      	bhi.n	8021644 <UART_SetConfig+0x260>
 80215f6:	a201      	add	r2, pc, #4	@ (adr r2, 80215fc <UART_SetConfig+0x218>)
 80215f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80215fc:	08021615 	.word	0x08021615
 8021600:	0802161d 	.word	0x0802161d
 8021604:	08021625 	.word	0x08021625
 8021608:	0802162d 	.word	0x0802162d
 802160c:	08021635 	.word	0x08021635
 8021610:	0802163d 	.word	0x0802163d
 8021614:	2300      	movs	r3, #0
 8021616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802161a:	e1b6      	b.n	802198a <UART_SetConfig+0x5a6>
 802161c:	2304      	movs	r3, #4
 802161e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021622:	e1b2      	b.n	802198a <UART_SetConfig+0x5a6>
 8021624:	2308      	movs	r3, #8
 8021626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802162a:	e1ae      	b.n	802198a <UART_SetConfig+0x5a6>
 802162c:	2310      	movs	r3, #16
 802162e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021632:	e1aa      	b.n	802198a <UART_SetConfig+0x5a6>
 8021634:	2320      	movs	r3, #32
 8021636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802163a:	e1a6      	b.n	802198a <UART_SetConfig+0x5a6>
 802163c:	2340      	movs	r3, #64	@ 0x40
 802163e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021642:	e1a2      	b.n	802198a <UART_SetConfig+0x5a6>
 8021644:	2380      	movs	r3, #128	@ 0x80
 8021646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802164a:	e19e      	b.n	802198a <UART_SetConfig+0x5a6>
 802164c:	697b      	ldr	r3, [r7, #20]
 802164e:	681b      	ldr	r3, [r3, #0]
 8021650:	4a35      	ldr	r2, [pc, #212]	@ (8021728 <UART_SetConfig+0x344>)
 8021652:	4293      	cmp	r3, r2
 8021654:	d130      	bne.n	80216b8 <UART_SetConfig+0x2d4>
 8021656:	4b31      	ldr	r3, [pc, #196]	@ (802171c <UART_SetConfig+0x338>)
 8021658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802165a:	f003 0307 	and.w	r3, r3, #7
 802165e:	2b05      	cmp	r3, #5
 8021660:	d826      	bhi.n	80216b0 <UART_SetConfig+0x2cc>
 8021662:	a201      	add	r2, pc, #4	@ (adr r2, 8021668 <UART_SetConfig+0x284>)
 8021664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021668:	08021681 	.word	0x08021681
 802166c:	08021689 	.word	0x08021689
 8021670:	08021691 	.word	0x08021691
 8021674:	08021699 	.word	0x08021699
 8021678:	080216a1 	.word	0x080216a1
 802167c:	080216a9 	.word	0x080216a9
 8021680:	2300      	movs	r3, #0
 8021682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021686:	e180      	b.n	802198a <UART_SetConfig+0x5a6>
 8021688:	2304      	movs	r3, #4
 802168a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802168e:	e17c      	b.n	802198a <UART_SetConfig+0x5a6>
 8021690:	2308      	movs	r3, #8
 8021692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021696:	e178      	b.n	802198a <UART_SetConfig+0x5a6>
 8021698:	2310      	movs	r3, #16
 802169a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802169e:	e174      	b.n	802198a <UART_SetConfig+0x5a6>
 80216a0:	2320      	movs	r3, #32
 80216a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216a6:	e170      	b.n	802198a <UART_SetConfig+0x5a6>
 80216a8:	2340      	movs	r3, #64	@ 0x40
 80216aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216ae:	e16c      	b.n	802198a <UART_SetConfig+0x5a6>
 80216b0:	2380      	movs	r3, #128	@ 0x80
 80216b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216b6:	e168      	b.n	802198a <UART_SetConfig+0x5a6>
 80216b8:	697b      	ldr	r3, [r7, #20]
 80216ba:	681b      	ldr	r3, [r3, #0]
 80216bc:	4a1b      	ldr	r2, [pc, #108]	@ (802172c <UART_SetConfig+0x348>)
 80216be:	4293      	cmp	r3, r2
 80216c0:	d142      	bne.n	8021748 <UART_SetConfig+0x364>
 80216c2:	4b16      	ldr	r3, [pc, #88]	@ (802171c <UART_SetConfig+0x338>)
 80216c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80216c6:	f003 0307 	and.w	r3, r3, #7
 80216ca:	2b05      	cmp	r3, #5
 80216cc:	d838      	bhi.n	8021740 <UART_SetConfig+0x35c>
 80216ce:	a201      	add	r2, pc, #4	@ (adr r2, 80216d4 <UART_SetConfig+0x2f0>)
 80216d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80216d4:	080216ed 	.word	0x080216ed
 80216d8:	080216f5 	.word	0x080216f5
 80216dc:	080216fd 	.word	0x080216fd
 80216e0:	08021705 	.word	0x08021705
 80216e4:	08021731 	.word	0x08021731
 80216e8:	08021739 	.word	0x08021739
 80216ec:	2300      	movs	r3, #0
 80216ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216f2:	e14a      	b.n	802198a <UART_SetConfig+0x5a6>
 80216f4:	2304      	movs	r3, #4
 80216f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80216fa:	e146      	b.n	802198a <UART_SetConfig+0x5a6>
 80216fc:	2308      	movs	r3, #8
 80216fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021702:	e142      	b.n	802198a <UART_SetConfig+0x5a6>
 8021704:	2310      	movs	r3, #16
 8021706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802170a:	e13e      	b.n	802198a <UART_SetConfig+0x5a6>
 802170c:	cfff69f3 	.word	0xcfff69f3
 8021710:	58000c00 	.word	0x58000c00
 8021714:	11fff4ff 	.word	0x11fff4ff
 8021718:	40011000 	.word	0x40011000
 802171c:	58024400 	.word	0x58024400
 8021720:	40004400 	.word	0x40004400
 8021724:	40004800 	.word	0x40004800
 8021728:	40004c00 	.word	0x40004c00
 802172c:	40005000 	.word	0x40005000
 8021730:	2320      	movs	r3, #32
 8021732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021736:	e128      	b.n	802198a <UART_SetConfig+0x5a6>
 8021738:	2340      	movs	r3, #64	@ 0x40
 802173a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802173e:	e124      	b.n	802198a <UART_SetConfig+0x5a6>
 8021740:	2380      	movs	r3, #128	@ 0x80
 8021742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021746:	e120      	b.n	802198a <UART_SetConfig+0x5a6>
 8021748:	697b      	ldr	r3, [r7, #20]
 802174a:	681b      	ldr	r3, [r3, #0]
 802174c:	4acb      	ldr	r2, [pc, #812]	@ (8021a7c <UART_SetConfig+0x698>)
 802174e:	4293      	cmp	r3, r2
 8021750:	d176      	bne.n	8021840 <UART_SetConfig+0x45c>
 8021752:	4bcb      	ldr	r3, [pc, #812]	@ (8021a80 <UART_SetConfig+0x69c>)
 8021754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8021756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 802175a:	2b28      	cmp	r3, #40	@ 0x28
 802175c:	d86c      	bhi.n	8021838 <UART_SetConfig+0x454>
 802175e:	a201      	add	r2, pc, #4	@ (adr r2, 8021764 <UART_SetConfig+0x380>)
 8021760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021764:	08021809 	.word	0x08021809
 8021768:	08021839 	.word	0x08021839
 802176c:	08021839 	.word	0x08021839
 8021770:	08021839 	.word	0x08021839
 8021774:	08021839 	.word	0x08021839
 8021778:	08021839 	.word	0x08021839
 802177c:	08021839 	.word	0x08021839
 8021780:	08021839 	.word	0x08021839
 8021784:	08021811 	.word	0x08021811
 8021788:	08021839 	.word	0x08021839
 802178c:	08021839 	.word	0x08021839
 8021790:	08021839 	.word	0x08021839
 8021794:	08021839 	.word	0x08021839
 8021798:	08021839 	.word	0x08021839
 802179c:	08021839 	.word	0x08021839
 80217a0:	08021839 	.word	0x08021839
 80217a4:	08021819 	.word	0x08021819
 80217a8:	08021839 	.word	0x08021839
 80217ac:	08021839 	.word	0x08021839
 80217b0:	08021839 	.word	0x08021839
 80217b4:	08021839 	.word	0x08021839
 80217b8:	08021839 	.word	0x08021839
 80217bc:	08021839 	.word	0x08021839
 80217c0:	08021839 	.word	0x08021839
 80217c4:	08021821 	.word	0x08021821
 80217c8:	08021839 	.word	0x08021839
 80217cc:	08021839 	.word	0x08021839
 80217d0:	08021839 	.word	0x08021839
 80217d4:	08021839 	.word	0x08021839
 80217d8:	08021839 	.word	0x08021839
 80217dc:	08021839 	.word	0x08021839
 80217e0:	08021839 	.word	0x08021839
 80217e4:	08021829 	.word	0x08021829
 80217e8:	08021839 	.word	0x08021839
 80217ec:	08021839 	.word	0x08021839
 80217f0:	08021839 	.word	0x08021839
 80217f4:	08021839 	.word	0x08021839
 80217f8:	08021839 	.word	0x08021839
 80217fc:	08021839 	.word	0x08021839
 8021800:	08021839 	.word	0x08021839
 8021804:	08021831 	.word	0x08021831
 8021808:	2301      	movs	r3, #1
 802180a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802180e:	e0bc      	b.n	802198a <UART_SetConfig+0x5a6>
 8021810:	2304      	movs	r3, #4
 8021812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021816:	e0b8      	b.n	802198a <UART_SetConfig+0x5a6>
 8021818:	2308      	movs	r3, #8
 802181a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802181e:	e0b4      	b.n	802198a <UART_SetConfig+0x5a6>
 8021820:	2310      	movs	r3, #16
 8021822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021826:	e0b0      	b.n	802198a <UART_SetConfig+0x5a6>
 8021828:	2320      	movs	r3, #32
 802182a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802182e:	e0ac      	b.n	802198a <UART_SetConfig+0x5a6>
 8021830:	2340      	movs	r3, #64	@ 0x40
 8021832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021836:	e0a8      	b.n	802198a <UART_SetConfig+0x5a6>
 8021838:	2380      	movs	r3, #128	@ 0x80
 802183a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802183e:	e0a4      	b.n	802198a <UART_SetConfig+0x5a6>
 8021840:	697b      	ldr	r3, [r7, #20]
 8021842:	681b      	ldr	r3, [r3, #0]
 8021844:	4a8f      	ldr	r2, [pc, #572]	@ (8021a84 <UART_SetConfig+0x6a0>)
 8021846:	4293      	cmp	r3, r2
 8021848:	d130      	bne.n	80218ac <UART_SetConfig+0x4c8>
 802184a:	4b8d      	ldr	r3, [pc, #564]	@ (8021a80 <UART_SetConfig+0x69c>)
 802184c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802184e:	f003 0307 	and.w	r3, r3, #7
 8021852:	2b05      	cmp	r3, #5
 8021854:	d826      	bhi.n	80218a4 <UART_SetConfig+0x4c0>
 8021856:	a201      	add	r2, pc, #4	@ (adr r2, 802185c <UART_SetConfig+0x478>)
 8021858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802185c:	08021875 	.word	0x08021875
 8021860:	0802187d 	.word	0x0802187d
 8021864:	08021885 	.word	0x08021885
 8021868:	0802188d 	.word	0x0802188d
 802186c:	08021895 	.word	0x08021895
 8021870:	0802189d 	.word	0x0802189d
 8021874:	2300      	movs	r3, #0
 8021876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802187a:	e086      	b.n	802198a <UART_SetConfig+0x5a6>
 802187c:	2304      	movs	r3, #4
 802187e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021882:	e082      	b.n	802198a <UART_SetConfig+0x5a6>
 8021884:	2308      	movs	r3, #8
 8021886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802188a:	e07e      	b.n	802198a <UART_SetConfig+0x5a6>
 802188c:	2310      	movs	r3, #16
 802188e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021892:	e07a      	b.n	802198a <UART_SetConfig+0x5a6>
 8021894:	2320      	movs	r3, #32
 8021896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802189a:	e076      	b.n	802198a <UART_SetConfig+0x5a6>
 802189c:	2340      	movs	r3, #64	@ 0x40
 802189e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218a2:	e072      	b.n	802198a <UART_SetConfig+0x5a6>
 80218a4:	2380      	movs	r3, #128	@ 0x80
 80218a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218aa:	e06e      	b.n	802198a <UART_SetConfig+0x5a6>
 80218ac:	697b      	ldr	r3, [r7, #20]
 80218ae:	681b      	ldr	r3, [r3, #0]
 80218b0:	4a75      	ldr	r2, [pc, #468]	@ (8021a88 <UART_SetConfig+0x6a4>)
 80218b2:	4293      	cmp	r3, r2
 80218b4:	d130      	bne.n	8021918 <UART_SetConfig+0x534>
 80218b6:	4b72      	ldr	r3, [pc, #456]	@ (8021a80 <UART_SetConfig+0x69c>)
 80218b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80218ba:	f003 0307 	and.w	r3, r3, #7
 80218be:	2b05      	cmp	r3, #5
 80218c0:	d826      	bhi.n	8021910 <UART_SetConfig+0x52c>
 80218c2:	a201      	add	r2, pc, #4	@ (adr r2, 80218c8 <UART_SetConfig+0x4e4>)
 80218c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80218c8:	080218e1 	.word	0x080218e1
 80218cc:	080218e9 	.word	0x080218e9
 80218d0:	080218f1 	.word	0x080218f1
 80218d4:	080218f9 	.word	0x080218f9
 80218d8:	08021901 	.word	0x08021901
 80218dc:	08021909 	.word	0x08021909
 80218e0:	2300      	movs	r3, #0
 80218e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218e6:	e050      	b.n	802198a <UART_SetConfig+0x5a6>
 80218e8:	2304      	movs	r3, #4
 80218ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218ee:	e04c      	b.n	802198a <UART_SetConfig+0x5a6>
 80218f0:	2308      	movs	r3, #8
 80218f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218f6:	e048      	b.n	802198a <UART_SetConfig+0x5a6>
 80218f8:	2310      	movs	r3, #16
 80218fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80218fe:	e044      	b.n	802198a <UART_SetConfig+0x5a6>
 8021900:	2320      	movs	r3, #32
 8021902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021906:	e040      	b.n	802198a <UART_SetConfig+0x5a6>
 8021908:	2340      	movs	r3, #64	@ 0x40
 802190a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802190e:	e03c      	b.n	802198a <UART_SetConfig+0x5a6>
 8021910:	2380      	movs	r3, #128	@ 0x80
 8021912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021916:	e038      	b.n	802198a <UART_SetConfig+0x5a6>
 8021918:	697b      	ldr	r3, [r7, #20]
 802191a:	681b      	ldr	r3, [r3, #0]
 802191c:	4a5b      	ldr	r2, [pc, #364]	@ (8021a8c <UART_SetConfig+0x6a8>)
 802191e:	4293      	cmp	r3, r2
 8021920:	d130      	bne.n	8021984 <UART_SetConfig+0x5a0>
 8021922:	4b57      	ldr	r3, [pc, #348]	@ (8021a80 <UART_SetConfig+0x69c>)
 8021924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021926:	f003 0307 	and.w	r3, r3, #7
 802192a:	2b05      	cmp	r3, #5
 802192c:	d826      	bhi.n	802197c <UART_SetConfig+0x598>
 802192e:	a201      	add	r2, pc, #4	@ (adr r2, 8021934 <UART_SetConfig+0x550>)
 8021930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021934:	0802194d 	.word	0x0802194d
 8021938:	08021955 	.word	0x08021955
 802193c:	0802195d 	.word	0x0802195d
 8021940:	08021965 	.word	0x08021965
 8021944:	0802196d 	.word	0x0802196d
 8021948:	08021975 	.word	0x08021975
 802194c:	2302      	movs	r3, #2
 802194e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021952:	e01a      	b.n	802198a <UART_SetConfig+0x5a6>
 8021954:	2304      	movs	r3, #4
 8021956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802195a:	e016      	b.n	802198a <UART_SetConfig+0x5a6>
 802195c:	2308      	movs	r3, #8
 802195e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021962:	e012      	b.n	802198a <UART_SetConfig+0x5a6>
 8021964:	2310      	movs	r3, #16
 8021966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802196a:	e00e      	b.n	802198a <UART_SetConfig+0x5a6>
 802196c:	2320      	movs	r3, #32
 802196e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021972:	e00a      	b.n	802198a <UART_SetConfig+0x5a6>
 8021974:	2340      	movs	r3, #64	@ 0x40
 8021976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802197a:	e006      	b.n	802198a <UART_SetConfig+0x5a6>
 802197c:	2380      	movs	r3, #128	@ 0x80
 802197e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021982:	e002      	b.n	802198a <UART_SetConfig+0x5a6>
 8021984:	2380      	movs	r3, #128	@ 0x80
 8021986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802198a:	697b      	ldr	r3, [r7, #20]
 802198c:	681b      	ldr	r3, [r3, #0]
 802198e:	4a3f      	ldr	r2, [pc, #252]	@ (8021a8c <UART_SetConfig+0x6a8>)
 8021990:	4293      	cmp	r3, r2
 8021992:	f040 80f8 	bne.w	8021b86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8021996:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802199a:	2b20      	cmp	r3, #32
 802199c:	dc46      	bgt.n	8021a2c <UART_SetConfig+0x648>
 802199e:	2b02      	cmp	r3, #2
 80219a0:	f2c0 8082 	blt.w	8021aa8 <UART_SetConfig+0x6c4>
 80219a4:	3b02      	subs	r3, #2
 80219a6:	2b1e      	cmp	r3, #30
 80219a8:	d87e      	bhi.n	8021aa8 <UART_SetConfig+0x6c4>
 80219aa:	a201      	add	r2, pc, #4	@ (adr r2, 80219b0 <UART_SetConfig+0x5cc>)
 80219ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80219b0:	08021a33 	.word	0x08021a33
 80219b4:	08021aa9 	.word	0x08021aa9
 80219b8:	08021a3b 	.word	0x08021a3b
 80219bc:	08021aa9 	.word	0x08021aa9
 80219c0:	08021aa9 	.word	0x08021aa9
 80219c4:	08021aa9 	.word	0x08021aa9
 80219c8:	08021a4b 	.word	0x08021a4b
 80219cc:	08021aa9 	.word	0x08021aa9
 80219d0:	08021aa9 	.word	0x08021aa9
 80219d4:	08021aa9 	.word	0x08021aa9
 80219d8:	08021aa9 	.word	0x08021aa9
 80219dc:	08021aa9 	.word	0x08021aa9
 80219e0:	08021aa9 	.word	0x08021aa9
 80219e4:	08021aa9 	.word	0x08021aa9
 80219e8:	08021a5b 	.word	0x08021a5b
 80219ec:	08021aa9 	.word	0x08021aa9
 80219f0:	08021aa9 	.word	0x08021aa9
 80219f4:	08021aa9 	.word	0x08021aa9
 80219f8:	08021aa9 	.word	0x08021aa9
 80219fc:	08021aa9 	.word	0x08021aa9
 8021a00:	08021aa9 	.word	0x08021aa9
 8021a04:	08021aa9 	.word	0x08021aa9
 8021a08:	08021aa9 	.word	0x08021aa9
 8021a0c:	08021aa9 	.word	0x08021aa9
 8021a10:	08021aa9 	.word	0x08021aa9
 8021a14:	08021aa9 	.word	0x08021aa9
 8021a18:	08021aa9 	.word	0x08021aa9
 8021a1c:	08021aa9 	.word	0x08021aa9
 8021a20:	08021aa9 	.word	0x08021aa9
 8021a24:	08021aa9 	.word	0x08021aa9
 8021a28:	08021a9b 	.word	0x08021a9b
 8021a2c:	2b40      	cmp	r3, #64	@ 0x40
 8021a2e:	d037      	beq.n	8021aa0 <UART_SetConfig+0x6bc>
 8021a30:	e03a      	b.n	8021aa8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8021a32:	f7fd fc87 	bl	801f344 <HAL_RCCEx_GetD3PCLK1Freq>
 8021a36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021a38:	e03c      	b.n	8021ab4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021a3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021a3e:	4618      	mov	r0, r3
 8021a40:	f7fd fc96 	bl	801f370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021a48:	e034      	b.n	8021ab4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021a4a:	f107 0318 	add.w	r3, r7, #24
 8021a4e:	4618      	mov	r0, r3
 8021a50:	f7fd fde2 	bl	801f618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021a54:	69fb      	ldr	r3, [r7, #28]
 8021a56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021a58:	e02c      	b.n	8021ab4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021a5a:	4b09      	ldr	r3, [pc, #36]	@ (8021a80 <UART_SetConfig+0x69c>)
 8021a5c:	681b      	ldr	r3, [r3, #0]
 8021a5e:	f003 0320 	and.w	r3, r3, #32
 8021a62:	2b00      	cmp	r3, #0
 8021a64:	d016      	beq.n	8021a94 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021a66:	4b06      	ldr	r3, [pc, #24]	@ (8021a80 <UART_SetConfig+0x69c>)
 8021a68:	681b      	ldr	r3, [r3, #0]
 8021a6a:	08db      	lsrs	r3, r3, #3
 8021a6c:	f003 0303 	and.w	r3, r3, #3
 8021a70:	4a07      	ldr	r2, [pc, #28]	@ (8021a90 <UART_SetConfig+0x6ac>)
 8021a72:	fa22 f303 	lsr.w	r3, r2, r3
 8021a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021a78:	e01c      	b.n	8021ab4 <UART_SetConfig+0x6d0>
 8021a7a:	bf00      	nop
 8021a7c:	40011400 	.word	0x40011400
 8021a80:	58024400 	.word	0x58024400
 8021a84:	40007800 	.word	0x40007800
 8021a88:	40007c00 	.word	0x40007c00
 8021a8c:	58000c00 	.word	0x58000c00
 8021a90:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8021a94:	4b9d      	ldr	r3, [pc, #628]	@ (8021d0c <UART_SetConfig+0x928>)
 8021a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021a98:	e00c      	b.n	8021ab4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021a9a:	4b9d      	ldr	r3, [pc, #628]	@ (8021d10 <UART_SetConfig+0x92c>)
 8021a9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021a9e:	e009      	b.n	8021ab4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021aa0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021aa6:	e005      	b.n	8021ab4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8021aa8:	2300      	movs	r3, #0
 8021aaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021aac:	2301      	movs	r3, #1
 8021aae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021ab2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8021ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021ab6:	2b00      	cmp	r3, #0
 8021ab8:	f000 81de 	beq.w	8021e78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8021abc:	697b      	ldr	r3, [r7, #20]
 8021abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021ac0:	4a94      	ldr	r2, [pc, #592]	@ (8021d14 <UART_SetConfig+0x930>)
 8021ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021ac6:	461a      	mov	r2, r3
 8021ac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021aca:	fbb3 f3f2 	udiv	r3, r3, r2
 8021ace:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021ad0:	697b      	ldr	r3, [r7, #20]
 8021ad2:	685a      	ldr	r2, [r3, #4]
 8021ad4:	4613      	mov	r3, r2
 8021ad6:	005b      	lsls	r3, r3, #1
 8021ad8:	4413      	add	r3, r2
 8021ada:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021adc:	429a      	cmp	r2, r3
 8021ade:	d305      	bcc.n	8021aec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8021ae0:	697b      	ldr	r3, [r7, #20]
 8021ae2:	685b      	ldr	r3, [r3, #4]
 8021ae4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021ae8:	429a      	cmp	r2, r3
 8021aea:	d903      	bls.n	8021af4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8021aec:	2301      	movs	r3, #1
 8021aee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021af2:	e1c1      	b.n	8021e78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021af6:	2200      	movs	r2, #0
 8021af8:	60bb      	str	r3, [r7, #8]
 8021afa:	60fa      	str	r2, [r7, #12]
 8021afc:	697b      	ldr	r3, [r7, #20]
 8021afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021b00:	4a84      	ldr	r2, [pc, #528]	@ (8021d14 <UART_SetConfig+0x930>)
 8021b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021b06:	b29b      	uxth	r3, r3
 8021b08:	2200      	movs	r2, #0
 8021b0a:	603b      	str	r3, [r7, #0]
 8021b0c:	607a      	str	r2, [r7, #4]
 8021b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8021b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8021b16:	f7de fc4b 	bl	80003b0 <__aeabi_uldivmod>
 8021b1a:	4602      	mov	r2, r0
 8021b1c:	460b      	mov	r3, r1
 8021b1e:	4610      	mov	r0, r2
 8021b20:	4619      	mov	r1, r3
 8021b22:	f04f 0200 	mov.w	r2, #0
 8021b26:	f04f 0300 	mov.w	r3, #0
 8021b2a:	020b      	lsls	r3, r1, #8
 8021b2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8021b30:	0202      	lsls	r2, r0, #8
 8021b32:	6979      	ldr	r1, [r7, #20]
 8021b34:	6849      	ldr	r1, [r1, #4]
 8021b36:	0849      	lsrs	r1, r1, #1
 8021b38:	2000      	movs	r0, #0
 8021b3a:	460c      	mov	r4, r1
 8021b3c:	4605      	mov	r5, r0
 8021b3e:	eb12 0804 	adds.w	r8, r2, r4
 8021b42:	eb43 0905 	adc.w	r9, r3, r5
 8021b46:	697b      	ldr	r3, [r7, #20]
 8021b48:	685b      	ldr	r3, [r3, #4]
 8021b4a:	2200      	movs	r2, #0
 8021b4c:	469a      	mov	sl, r3
 8021b4e:	4693      	mov	fp, r2
 8021b50:	4652      	mov	r2, sl
 8021b52:	465b      	mov	r3, fp
 8021b54:	4640      	mov	r0, r8
 8021b56:	4649      	mov	r1, r9
 8021b58:	f7de fc2a 	bl	80003b0 <__aeabi_uldivmod>
 8021b5c:	4602      	mov	r2, r0
 8021b5e:	460b      	mov	r3, r1
 8021b60:	4613      	mov	r3, r2
 8021b62:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8021b6a:	d308      	bcc.n	8021b7e <UART_SetConfig+0x79a>
 8021b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021b6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021b72:	d204      	bcs.n	8021b7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021b74:	697b      	ldr	r3, [r7, #20]
 8021b76:	681b      	ldr	r3, [r3, #0]
 8021b78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8021b7a:	60da      	str	r2, [r3, #12]
 8021b7c:	e17c      	b.n	8021e78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021b7e:	2301      	movs	r3, #1
 8021b80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021b84:	e178      	b.n	8021e78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8021b86:	697b      	ldr	r3, [r7, #20]
 8021b88:	69db      	ldr	r3, [r3, #28]
 8021b8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021b8e:	f040 80c5 	bne.w	8021d1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021b92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021b96:	2b20      	cmp	r3, #32
 8021b98:	dc48      	bgt.n	8021c2c <UART_SetConfig+0x848>
 8021b9a:	2b00      	cmp	r3, #0
 8021b9c:	db7b      	blt.n	8021c96 <UART_SetConfig+0x8b2>
 8021b9e:	2b20      	cmp	r3, #32
 8021ba0:	d879      	bhi.n	8021c96 <UART_SetConfig+0x8b2>
 8021ba2:	a201      	add	r2, pc, #4	@ (adr r2, 8021ba8 <UART_SetConfig+0x7c4>)
 8021ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021ba8:	08021c33 	.word	0x08021c33
 8021bac:	08021c3b 	.word	0x08021c3b
 8021bb0:	08021c97 	.word	0x08021c97
 8021bb4:	08021c97 	.word	0x08021c97
 8021bb8:	08021c43 	.word	0x08021c43
 8021bbc:	08021c97 	.word	0x08021c97
 8021bc0:	08021c97 	.word	0x08021c97
 8021bc4:	08021c97 	.word	0x08021c97
 8021bc8:	08021c53 	.word	0x08021c53
 8021bcc:	08021c97 	.word	0x08021c97
 8021bd0:	08021c97 	.word	0x08021c97
 8021bd4:	08021c97 	.word	0x08021c97
 8021bd8:	08021c97 	.word	0x08021c97
 8021bdc:	08021c97 	.word	0x08021c97
 8021be0:	08021c97 	.word	0x08021c97
 8021be4:	08021c97 	.word	0x08021c97
 8021be8:	08021c63 	.word	0x08021c63
 8021bec:	08021c97 	.word	0x08021c97
 8021bf0:	08021c97 	.word	0x08021c97
 8021bf4:	08021c97 	.word	0x08021c97
 8021bf8:	08021c97 	.word	0x08021c97
 8021bfc:	08021c97 	.word	0x08021c97
 8021c00:	08021c97 	.word	0x08021c97
 8021c04:	08021c97 	.word	0x08021c97
 8021c08:	08021c97 	.word	0x08021c97
 8021c0c:	08021c97 	.word	0x08021c97
 8021c10:	08021c97 	.word	0x08021c97
 8021c14:	08021c97 	.word	0x08021c97
 8021c18:	08021c97 	.word	0x08021c97
 8021c1c:	08021c97 	.word	0x08021c97
 8021c20:	08021c97 	.word	0x08021c97
 8021c24:	08021c97 	.word	0x08021c97
 8021c28:	08021c89 	.word	0x08021c89
 8021c2c:	2b40      	cmp	r3, #64	@ 0x40
 8021c2e:	d02e      	beq.n	8021c8e <UART_SetConfig+0x8aa>
 8021c30:	e031      	b.n	8021c96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021c32:	f7fc f951 	bl	801ded8 <HAL_RCC_GetPCLK1Freq>
 8021c36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021c38:	e033      	b.n	8021ca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021c3a:	f7fc f963 	bl	801df04 <HAL_RCC_GetPCLK2Freq>
 8021c3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021c40:	e02f      	b.n	8021ca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021c42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021c46:	4618      	mov	r0, r3
 8021c48:	f7fd fb92 	bl	801f370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021c4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021c50:	e027      	b.n	8021ca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021c52:	f107 0318 	add.w	r3, r7, #24
 8021c56:	4618      	mov	r0, r3
 8021c58:	f7fd fcde 	bl	801f618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021c5c:	69fb      	ldr	r3, [r7, #28]
 8021c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021c60:	e01f      	b.n	8021ca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021c62:	4b2d      	ldr	r3, [pc, #180]	@ (8021d18 <UART_SetConfig+0x934>)
 8021c64:	681b      	ldr	r3, [r3, #0]
 8021c66:	f003 0320 	and.w	r3, r3, #32
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	d009      	beq.n	8021c82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021c6e:	4b2a      	ldr	r3, [pc, #168]	@ (8021d18 <UART_SetConfig+0x934>)
 8021c70:	681b      	ldr	r3, [r3, #0]
 8021c72:	08db      	lsrs	r3, r3, #3
 8021c74:	f003 0303 	and.w	r3, r3, #3
 8021c78:	4a24      	ldr	r2, [pc, #144]	@ (8021d0c <UART_SetConfig+0x928>)
 8021c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8021c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021c80:	e00f      	b.n	8021ca2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021c82:	4b22      	ldr	r3, [pc, #136]	@ (8021d0c <UART_SetConfig+0x928>)
 8021c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021c86:	e00c      	b.n	8021ca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021c88:	4b21      	ldr	r3, [pc, #132]	@ (8021d10 <UART_SetConfig+0x92c>)
 8021c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021c8c:	e009      	b.n	8021ca2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021c92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021c94:	e005      	b.n	8021ca2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8021c96:	2300      	movs	r3, #0
 8021c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021c9a:	2301      	movs	r3, #1
 8021c9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	f000 80e7 	beq.w	8021e78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021caa:	697b      	ldr	r3, [r7, #20]
 8021cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021cae:	4a19      	ldr	r2, [pc, #100]	@ (8021d14 <UART_SetConfig+0x930>)
 8021cb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021cb4:	461a      	mov	r2, r3
 8021cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021cb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8021cbc:	005a      	lsls	r2, r3, #1
 8021cbe:	697b      	ldr	r3, [r7, #20]
 8021cc0:	685b      	ldr	r3, [r3, #4]
 8021cc2:	085b      	lsrs	r3, r3, #1
 8021cc4:	441a      	add	r2, r3
 8021cc6:	697b      	ldr	r3, [r7, #20]
 8021cc8:	685b      	ldr	r3, [r3, #4]
 8021cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8021cce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021cd2:	2b0f      	cmp	r3, #15
 8021cd4:	d916      	bls.n	8021d04 <UART_SetConfig+0x920>
 8021cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021cd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021cdc:	d212      	bcs.n	8021d04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8021cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021ce0:	b29b      	uxth	r3, r3
 8021ce2:	f023 030f 	bic.w	r3, r3, #15
 8021ce6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8021ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021cea:	085b      	lsrs	r3, r3, #1
 8021cec:	b29b      	uxth	r3, r3
 8021cee:	f003 0307 	and.w	r3, r3, #7
 8021cf2:	b29a      	uxth	r2, r3
 8021cf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8021cf6:	4313      	orrs	r3, r2
 8021cf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8021cfa:	697b      	ldr	r3, [r7, #20]
 8021cfc:	681b      	ldr	r3, [r3, #0]
 8021cfe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8021d00:	60da      	str	r2, [r3, #12]
 8021d02:	e0b9      	b.n	8021e78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021d04:	2301      	movs	r3, #1
 8021d06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021d0a:	e0b5      	b.n	8021e78 <UART_SetConfig+0xa94>
 8021d0c:	03d09000 	.word	0x03d09000
 8021d10:	003d0900 	.word	0x003d0900
 8021d14:	08027fd8 	.word	0x08027fd8
 8021d18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8021d1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8021d20:	2b20      	cmp	r3, #32
 8021d22:	dc49      	bgt.n	8021db8 <UART_SetConfig+0x9d4>
 8021d24:	2b00      	cmp	r3, #0
 8021d26:	db7c      	blt.n	8021e22 <UART_SetConfig+0xa3e>
 8021d28:	2b20      	cmp	r3, #32
 8021d2a:	d87a      	bhi.n	8021e22 <UART_SetConfig+0xa3e>
 8021d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8021d34 <UART_SetConfig+0x950>)
 8021d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021d32:	bf00      	nop
 8021d34:	08021dbf 	.word	0x08021dbf
 8021d38:	08021dc7 	.word	0x08021dc7
 8021d3c:	08021e23 	.word	0x08021e23
 8021d40:	08021e23 	.word	0x08021e23
 8021d44:	08021dcf 	.word	0x08021dcf
 8021d48:	08021e23 	.word	0x08021e23
 8021d4c:	08021e23 	.word	0x08021e23
 8021d50:	08021e23 	.word	0x08021e23
 8021d54:	08021ddf 	.word	0x08021ddf
 8021d58:	08021e23 	.word	0x08021e23
 8021d5c:	08021e23 	.word	0x08021e23
 8021d60:	08021e23 	.word	0x08021e23
 8021d64:	08021e23 	.word	0x08021e23
 8021d68:	08021e23 	.word	0x08021e23
 8021d6c:	08021e23 	.word	0x08021e23
 8021d70:	08021e23 	.word	0x08021e23
 8021d74:	08021def 	.word	0x08021def
 8021d78:	08021e23 	.word	0x08021e23
 8021d7c:	08021e23 	.word	0x08021e23
 8021d80:	08021e23 	.word	0x08021e23
 8021d84:	08021e23 	.word	0x08021e23
 8021d88:	08021e23 	.word	0x08021e23
 8021d8c:	08021e23 	.word	0x08021e23
 8021d90:	08021e23 	.word	0x08021e23
 8021d94:	08021e23 	.word	0x08021e23
 8021d98:	08021e23 	.word	0x08021e23
 8021d9c:	08021e23 	.word	0x08021e23
 8021da0:	08021e23 	.word	0x08021e23
 8021da4:	08021e23 	.word	0x08021e23
 8021da8:	08021e23 	.word	0x08021e23
 8021dac:	08021e23 	.word	0x08021e23
 8021db0:	08021e23 	.word	0x08021e23
 8021db4:	08021e15 	.word	0x08021e15
 8021db8:	2b40      	cmp	r3, #64	@ 0x40
 8021dba:	d02e      	beq.n	8021e1a <UART_SetConfig+0xa36>
 8021dbc:	e031      	b.n	8021e22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021dbe:	f7fc f88b 	bl	801ded8 <HAL_RCC_GetPCLK1Freq>
 8021dc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021dc4:	e033      	b.n	8021e2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8021dc6:	f7fc f89d 	bl	801df04 <HAL_RCC_GetPCLK2Freq>
 8021dca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021dcc:	e02f      	b.n	8021e2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021dce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021dd2:	4618      	mov	r0, r3
 8021dd4:	f7fd facc 	bl	801f370 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8021dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021ddc:	e027      	b.n	8021e2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021dde:	f107 0318 	add.w	r3, r7, #24
 8021de2:	4618      	mov	r0, r3
 8021de4:	f7fd fc18 	bl	801f618 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021de8:	69fb      	ldr	r3, [r7, #28]
 8021dea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021dec:	e01f      	b.n	8021e2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021dee:	4b2d      	ldr	r3, [pc, #180]	@ (8021ea4 <UART_SetConfig+0xac0>)
 8021df0:	681b      	ldr	r3, [r3, #0]
 8021df2:	f003 0320 	and.w	r3, r3, #32
 8021df6:	2b00      	cmp	r3, #0
 8021df8:	d009      	beq.n	8021e0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8021ea4 <UART_SetConfig+0xac0>)
 8021dfc:	681b      	ldr	r3, [r3, #0]
 8021dfe:	08db      	lsrs	r3, r3, #3
 8021e00:	f003 0303 	and.w	r3, r3, #3
 8021e04:	4a28      	ldr	r2, [pc, #160]	@ (8021ea8 <UART_SetConfig+0xac4>)
 8021e06:	fa22 f303 	lsr.w	r3, r2, r3
 8021e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021e0c:	e00f      	b.n	8021e2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8021e0e:	4b26      	ldr	r3, [pc, #152]	@ (8021ea8 <UART_SetConfig+0xac4>)
 8021e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e12:	e00c      	b.n	8021e2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8021e14:	4b25      	ldr	r3, [pc, #148]	@ (8021eac <UART_SetConfig+0xac8>)
 8021e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e18:	e009      	b.n	8021e2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021e20:	e005      	b.n	8021e2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8021e22:	2300      	movs	r3, #0
 8021e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021e26:	2301      	movs	r3, #1
 8021e28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021e2c:	bf00      	nop
    }

    if (pclk != 0U)
 8021e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d021      	beq.n	8021e78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021e34:	697b      	ldr	r3, [r7, #20]
 8021e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021e38:	4a1d      	ldr	r2, [pc, #116]	@ (8021eb0 <UART_SetConfig+0xacc>)
 8021e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021e3e:	461a      	mov	r2, r3
 8021e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021e42:	fbb3 f2f2 	udiv	r2, r3, r2
 8021e46:	697b      	ldr	r3, [r7, #20]
 8021e48:	685b      	ldr	r3, [r3, #4]
 8021e4a:	085b      	lsrs	r3, r3, #1
 8021e4c:	441a      	add	r2, r3
 8021e4e:	697b      	ldr	r3, [r7, #20]
 8021e50:	685b      	ldr	r3, [r3, #4]
 8021e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8021e56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021e58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e5a:	2b0f      	cmp	r3, #15
 8021e5c:	d909      	bls.n	8021e72 <UART_SetConfig+0xa8e>
 8021e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021e64:	d205      	bcs.n	8021e72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8021e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021e68:	b29a      	uxth	r2, r3
 8021e6a:	697b      	ldr	r3, [r7, #20]
 8021e6c:	681b      	ldr	r3, [r3, #0]
 8021e6e:	60da      	str	r2, [r3, #12]
 8021e70:	e002      	b.n	8021e78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021e72:	2301      	movs	r3, #1
 8021e74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8021e78:	697b      	ldr	r3, [r7, #20]
 8021e7a:	2201      	movs	r2, #1
 8021e7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8021e80:	697b      	ldr	r3, [r7, #20]
 8021e82:	2201      	movs	r2, #1
 8021e84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8021e88:	697b      	ldr	r3, [r7, #20]
 8021e8a:	2200      	movs	r2, #0
 8021e8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8021e8e:	697b      	ldr	r3, [r7, #20]
 8021e90:	2200      	movs	r2, #0
 8021e92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8021e94:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8021e98:	4618      	mov	r0, r3
 8021e9a:	3748      	adds	r7, #72	@ 0x48
 8021e9c:	46bd      	mov	sp, r7
 8021e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021ea2:	bf00      	nop
 8021ea4:	58024400 	.word	0x58024400
 8021ea8:	03d09000 	.word	0x03d09000
 8021eac:	003d0900 	.word	0x003d0900
 8021eb0:	08027fd8 	.word	0x08027fd8

08021eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021eb4:	b480      	push	{r7}
 8021eb6:	b083      	sub	sp, #12
 8021eb8:	af00      	add	r7, sp, #0
 8021eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021ebc:	687b      	ldr	r3, [r7, #4]
 8021ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ec0:	f003 0308 	and.w	r3, r3, #8
 8021ec4:	2b00      	cmp	r3, #0
 8021ec6:	d00a      	beq.n	8021ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8021ec8:	687b      	ldr	r3, [r7, #4]
 8021eca:	681b      	ldr	r3, [r3, #0]
 8021ecc:	685b      	ldr	r3, [r3, #4]
 8021ece:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021ed2:	687b      	ldr	r3, [r7, #4]
 8021ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8021ed6:	687b      	ldr	r3, [r7, #4]
 8021ed8:	681b      	ldr	r3, [r3, #0]
 8021eda:	430a      	orrs	r2, r1
 8021edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021ede:	687b      	ldr	r3, [r7, #4]
 8021ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021ee2:	f003 0301 	and.w	r3, r3, #1
 8021ee6:	2b00      	cmp	r3, #0
 8021ee8:	d00a      	beq.n	8021f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8021eea:	687b      	ldr	r3, [r7, #4]
 8021eec:	681b      	ldr	r3, [r3, #0]
 8021eee:	685b      	ldr	r3, [r3, #4]
 8021ef0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021ef4:	687b      	ldr	r3, [r7, #4]
 8021ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8021ef8:	687b      	ldr	r3, [r7, #4]
 8021efa:	681b      	ldr	r3, [r3, #0]
 8021efc:	430a      	orrs	r2, r1
 8021efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8021f00:	687b      	ldr	r3, [r7, #4]
 8021f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f04:	f003 0302 	and.w	r3, r3, #2
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d00a      	beq.n	8021f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8021f0c:	687b      	ldr	r3, [r7, #4]
 8021f0e:	681b      	ldr	r3, [r3, #0]
 8021f10:	685b      	ldr	r3, [r3, #4]
 8021f12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8021f1a:	687b      	ldr	r3, [r7, #4]
 8021f1c:	681b      	ldr	r3, [r3, #0]
 8021f1e:	430a      	orrs	r2, r1
 8021f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8021f22:	687b      	ldr	r3, [r7, #4]
 8021f24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f26:	f003 0304 	and.w	r3, r3, #4
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d00a      	beq.n	8021f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	681b      	ldr	r3, [r3, #0]
 8021f32:	685b      	ldr	r3, [r3, #4]
 8021f34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021f3c:	687b      	ldr	r3, [r7, #4]
 8021f3e:	681b      	ldr	r3, [r3, #0]
 8021f40:	430a      	orrs	r2, r1
 8021f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8021f44:	687b      	ldr	r3, [r7, #4]
 8021f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f48:	f003 0310 	and.w	r3, r3, #16
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d00a      	beq.n	8021f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	681b      	ldr	r3, [r3, #0]
 8021f54:	689b      	ldr	r3, [r3, #8]
 8021f56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	681b      	ldr	r3, [r3, #0]
 8021f62:	430a      	orrs	r2, r1
 8021f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8021f66:	687b      	ldr	r3, [r7, #4]
 8021f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f6a:	f003 0320 	and.w	r3, r3, #32
 8021f6e:	2b00      	cmp	r3, #0
 8021f70:	d00a      	beq.n	8021f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021f72:	687b      	ldr	r3, [r7, #4]
 8021f74:	681b      	ldr	r3, [r3, #0]
 8021f76:	689b      	ldr	r3, [r3, #8]
 8021f78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8021f7c:	687b      	ldr	r3, [r7, #4]
 8021f7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021f80:	687b      	ldr	r3, [r7, #4]
 8021f82:	681b      	ldr	r3, [r3, #0]
 8021f84:	430a      	orrs	r2, r1
 8021f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021f8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021f90:	2b00      	cmp	r3, #0
 8021f92:	d01a      	beq.n	8021fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021f94:	687b      	ldr	r3, [r7, #4]
 8021f96:	681b      	ldr	r3, [r3, #0]
 8021f98:	685b      	ldr	r3, [r3, #4]
 8021f9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8021f9e:	687b      	ldr	r3, [r7, #4]
 8021fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	681b      	ldr	r3, [r3, #0]
 8021fa6:	430a      	orrs	r2, r1
 8021fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8021faa:	687b      	ldr	r3, [r7, #4]
 8021fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021fae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021fb2:	d10a      	bne.n	8021fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021fb4:	687b      	ldr	r3, [r7, #4]
 8021fb6:	681b      	ldr	r3, [r3, #0]
 8021fb8:	685b      	ldr	r3, [r3, #4]
 8021fba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8021fbe:	687b      	ldr	r3, [r7, #4]
 8021fc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021fc2:	687b      	ldr	r3, [r7, #4]
 8021fc4:	681b      	ldr	r3, [r3, #0]
 8021fc6:	430a      	orrs	r2, r1
 8021fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8021fca:	687b      	ldr	r3, [r7, #4]
 8021fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021fd2:	2b00      	cmp	r3, #0
 8021fd4:	d00a      	beq.n	8021fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8021fd6:	687b      	ldr	r3, [r7, #4]
 8021fd8:	681b      	ldr	r3, [r3, #0]
 8021fda:	685b      	ldr	r3, [r3, #4]
 8021fdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8021fe0:	687b      	ldr	r3, [r7, #4]
 8021fe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021fe4:	687b      	ldr	r3, [r7, #4]
 8021fe6:	681b      	ldr	r3, [r3, #0]
 8021fe8:	430a      	orrs	r2, r1
 8021fea:	605a      	str	r2, [r3, #4]
  }
}
 8021fec:	bf00      	nop
 8021fee:	370c      	adds	r7, #12
 8021ff0:	46bd      	mov	sp, r7
 8021ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ff6:	4770      	bx	lr

08021ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8021ff8:	b580      	push	{r7, lr}
 8021ffa:	b098      	sub	sp, #96	@ 0x60
 8021ffc:	af02      	add	r7, sp, #8
 8021ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8022000:	687b      	ldr	r3, [r7, #4]
 8022002:	2200      	movs	r2, #0
 8022004:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8022008:	f7f8 fb94 	bl	801a734 <HAL_GetTick>
 802200c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802200e:	687b      	ldr	r3, [r7, #4]
 8022010:	681b      	ldr	r3, [r3, #0]
 8022012:	681b      	ldr	r3, [r3, #0]
 8022014:	f003 0308 	and.w	r3, r3, #8
 8022018:	2b08      	cmp	r3, #8
 802201a:	d12f      	bne.n	802207c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802201c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8022020:	9300      	str	r3, [sp, #0]
 8022022:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022024:	2200      	movs	r2, #0
 8022026:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 802202a:	6878      	ldr	r0, [r7, #4]
 802202c:	f000 f88e 	bl	802214c <UART_WaitOnFlagUntilTimeout>
 8022030:	4603      	mov	r3, r0
 8022032:	2b00      	cmp	r3, #0
 8022034:	d022      	beq.n	802207c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	681b      	ldr	r3, [r3, #0]
 802203a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802203c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802203e:	e853 3f00 	ldrex	r3, [r3]
 8022042:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8022044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022046:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 802204a:	653b      	str	r3, [r7, #80]	@ 0x50
 802204c:	687b      	ldr	r3, [r7, #4]
 802204e:	681b      	ldr	r3, [r3, #0]
 8022050:	461a      	mov	r2, r3
 8022052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022054:	647b      	str	r3, [r7, #68]	@ 0x44
 8022056:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022058:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 802205a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802205c:	e841 2300 	strex	r3, r2, [r1]
 8022060:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8022062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8022064:	2b00      	cmp	r3, #0
 8022066:	d1e6      	bne.n	8022036 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8022068:	687b      	ldr	r3, [r7, #4]
 802206a:	2220      	movs	r2, #32
 802206c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8022070:	687b      	ldr	r3, [r7, #4]
 8022072:	2200      	movs	r2, #0
 8022074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8022078:	2303      	movs	r3, #3
 802207a:	e063      	b.n	8022144 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 802207c:	687b      	ldr	r3, [r7, #4]
 802207e:	681b      	ldr	r3, [r3, #0]
 8022080:	681b      	ldr	r3, [r3, #0]
 8022082:	f003 0304 	and.w	r3, r3, #4
 8022086:	2b04      	cmp	r3, #4
 8022088:	d149      	bne.n	802211e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802208a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 802208e:	9300      	str	r3, [sp, #0]
 8022090:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022092:	2200      	movs	r2, #0
 8022094:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8022098:	6878      	ldr	r0, [r7, #4]
 802209a:	f000 f857 	bl	802214c <UART_WaitOnFlagUntilTimeout>
 802209e:	4603      	mov	r3, r0
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	d03c      	beq.n	802211e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80220a4:	687b      	ldr	r3, [r7, #4]
 80220a6:	681b      	ldr	r3, [r3, #0]
 80220a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80220aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80220ac:	e853 3f00 	ldrex	r3, [r3]
 80220b0:	623b      	str	r3, [r7, #32]
   return(result);
 80220b2:	6a3b      	ldr	r3, [r7, #32]
 80220b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80220b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80220ba:	687b      	ldr	r3, [r7, #4]
 80220bc:	681b      	ldr	r3, [r3, #0]
 80220be:	461a      	mov	r2, r3
 80220c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80220c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80220c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80220c6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80220c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80220ca:	e841 2300 	strex	r3, r2, [r1]
 80220ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80220d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	d1e6      	bne.n	80220a4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80220d6:	687b      	ldr	r3, [r7, #4]
 80220d8:	681b      	ldr	r3, [r3, #0]
 80220da:	3308      	adds	r3, #8
 80220dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80220de:	693b      	ldr	r3, [r7, #16]
 80220e0:	e853 3f00 	ldrex	r3, [r3]
 80220e4:	60fb      	str	r3, [r7, #12]
   return(result);
 80220e6:	68fb      	ldr	r3, [r7, #12]
 80220e8:	f023 0301 	bic.w	r3, r3, #1
 80220ec:	64bb      	str	r3, [r7, #72]	@ 0x48
 80220ee:	687b      	ldr	r3, [r7, #4]
 80220f0:	681b      	ldr	r3, [r3, #0]
 80220f2:	3308      	adds	r3, #8
 80220f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80220f6:	61fa      	str	r2, [r7, #28]
 80220f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80220fa:	69b9      	ldr	r1, [r7, #24]
 80220fc:	69fa      	ldr	r2, [r7, #28]
 80220fe:	e841 2300 	strex	r3, r2, [r1]
 8022102:	617b      	str	r3, [r7, #20]
   return(result);
 8022104:	697b      	ldr	r3, [r7, #20]
 8022106:	2b00      	cmp	r3, #0
 8022108:	d1e5      	bne.n	80220d6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 802210a:	687b      	ldr	r3, [r7, #4]
 802210c:	2220      	movs	r2, #32
 802210e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8022112:	687b      	ldr	r3, [r7, #4]
 8022114:	2200      	movs	r2, #0
 8022116:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802211a:	2303      	movs	r3, #3
 802211c:	e012      	b.n	8022144 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802211e:	687b      	ldr	r3, [r7, #4]
 8022120:	2220      	movs	r2, #32
 8022122:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8022126:	687b      	ldr	r3, [r7, #4]
 8022128:	2220      	movs	r2, #32
 802212a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802212e:	687b      	ldr	r3, [r7, #4]
 8022130:	2200      	movs	r2, #0
 8022132:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	2200      	movs	r2, #0
 8022138:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	2200      	movs	r2, #0
 802213e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022142:	2300      	movs	r3, #0
}
 8022144:	4618      	mov	r0, r3
 8022146:	3758      	adds	r7, #88	@ 0x58
 8022148:	46bd      	mov	sp, r7
 802214a:	bd80      	pop	{r7, pc}

0802214c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 802214c:	b580      	push	{r7, lr}
 802214e:	b084      	sub	sp, #16
 8022150:	af00      	add	r7, sp, #0
 8022152:	60f8      	str	r0, [r7, #12]
 8022154:	60b9      	str	r1, [r7, #8]
 8022156:	603b      	str	r3, [r7, #0]
 8022158:	4613      	mov	r3, r2
 802215a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802215c:	e04f      	b.n	80221fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802215e:	69bb      	ldr	r3, [r7, #24]
 8022160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022164:	d04b      	beq.n	80221fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8022166:	f7f8 fae5 	bl	801a734 <HAL_GetTick>
 802216a:	4602      	mov	r2, r0
 802216c:	683b      	ldr	r3, [r7, #0]
 802216e:	1ad3      	subs	r3, r2, r3
 8022170:	69ba      	ldr	r2, [r7, #24]
 8022172:	429a      	cmp	r2, r3
 8022174:	d302      	bcc.n	802217c <UART_WaitOnFlagUntilTimeout+0x30>
 8022176:	69bb      	ldr	r3, [r7, #24]
 8022178:	2b00      	cmp	r3, #0
 802217a:	d101      	bne.n	8022180 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 802217c:	2303      	movs	r3, #3
 802217e:	e04e      	b.n	802221e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8022180:	68fb      	ldr	r3, [r7, #12]
 8022182:	681b      	ldr	r3, [r3, #0]
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	f003 0304 	and.w	r3, r3, #4
 802218a:	2b00      	cmp	r3, #0
 802218c:	d037      	beq.n	80221fe <UART_WaitOnFlagUntilTimeout+0xb2>
 802218e:	68bb      	ldr	r3, [r7, #8]
 8022190:	2b80      	cmp	r3, #128	@ 0x80
 8022192:	d034      	beq.n	80221fe <UART_WaitOnFlagUntilTimeout+0xb2>
 8022194:	68bb      	ldr	r3, [r7, #8]
 8022196:	2b40      	cmp	r3, #64	@ 0x40
 8022198:	d031      	beq.n	80221fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802219a:	68fb      	ldr	r3, [r7, #12]
 802219c:	681b      	ldr	r3, [r3, #0]
 802219e:	69db      	ldr	r3, [r3, #28]
 80221a0:	f003 0308 	and.w	r3, r3, #8
 80221a4:	2b08      	cmp	r3, #8
 80221a6:	d110      	bne.n	80221ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80221a8:	68fb      	ldr	r3, [r7, #12]
 80221aa:	681b      	ldr	r3, [r3, #0]
 80221ac:	2208      	movs	r2, #8
 80221ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80221b0:	68f8      	ldr	r0, [r7, #12]
 80221b2:	f000 f839 	bl	8022228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80221b6:	68fb      	ldr	r3, [r7, #12]
 80221b8:	2208      	movs	r2, #8
 80221ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80221be:	68fb      	ldr	r3, [r7, #12]
 80221c0:	2200      	movs	r2, #0
 80221c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80221c6:	2301      	movs	r3, #1
 80221c8:	e029      	b.n	802221e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80221ca:	68fb      	ldr	r3, [r7, #12]
 80221cc:	681b      	ldr	r3, [r3, #0]
 80221ce:	69db      	ldr	r3, [r3, #28]
 80221d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80221d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80221d8:	d111      	bne.n	80221fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80221da:	68fb      	ldr	r3, [r7, #12]
 80221dc:	681b      	ldr	r3, [r3, #0]
 80221de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80221e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80221e4:	68f8      	ldr	r0, [r7, #12]
 80221e6:	f000 f81f 	bl	8022228 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80221ea:	68fb      	ldr	r3, [r7, #12]
 80221ec:	2220      	movs	r2, #32
 80221ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80221f2:	68fb      	ldr	r3, [r7, #12]
 80221f4:	2200      	movs	r2, #0
 80221f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80221fa:	2303      	movs	r3, #3
 80221fc:	e00f      	b.n	802221e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80221fe:	68fb      	ldr	r3, [r7, #12]
 8022200:	681b      	ldr	r3, [r3, #0]
 8022202:	69da      	ldr	r2, [r3, #28]
 8022204:	68bb      	ldr	r3, [r7, #8]
 8022206:	4013      	ands	r3, r2
 8022208:	68ba      	ldr	r2, [r7, #8]
 802220a:	429a      	cmp	r2, r3
 802220c:	bf0c      	ite	eq
 802220e:	2301      	moveq	r3, #1
 8022210:	2300      	movne	r3, #0
 8022212:	b2db      	uxtb	r3, r3
 8022214:	461a      	mov	r2, r3
 8022216:	79fb      	ldrb	r3, [r7, #7]
 8022218:	429a      	cmp	r2, r3
 802221a:	d0a0      	beq.n	802215e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 802221c:	2300      	movs	r3, #0
}
 802221e:	4618      	mov	r0, r3
 8022220:	3710      	adds	r7, #16
 8022222:	46bd      	mov	sp, r7
 8022224:	bd80      	pop	{r7, pc}
	...

08022228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8022228:	b480      	push	{r7}
 802222a:	b095      	sub	sp, #84	@ 0x54
 802222c:	af00      	add	r7, sp, #0
 802222e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8022230:	687b      	ldr	r3, [r7, #4]
 8022232:	681b      	ldr	r3, [r3, #0]
 8022234:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8022236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8022238:	e853 3f00 	ldrex	r3, [r3]
 802223c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8022240:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8022244:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8022246:	687b      	ldr	r3, [r7, #4]
 8022248:	681b      	ldr	r3, [r3, #0]
 802224a:	461a      	mov	r2, r3
 802224c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802224e:	643b      	str	r3, [r7, #64]	@ 0x40
 8022250:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022252:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022254:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022256:	e841 2300 	strex	r3, r2, [r1]
 802225a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 802225c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802225e:	2b00      	cmp	r3, #0
 8022260:	d1e6      	bne.n	8022230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8022262:	687b      	ldr	r3, [r7, #4]
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	3308      	adds	r3, #8
 8022268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802226a:	6a3b      	ldr	r3, [r7, #32]
 802226c:	e853 3f00 	ldrex	r3, [r3]
 8022270:	61fb      	str	r3, [r7, #28]
   return(result);
 8022272:	69fa      	ldr	r2, [r7, #28]
 8022274:	4b1e      	ldr	r3, [pc, #120]	@ (80222f0 <UART_EndRxTransfer+0xc8>)
 8022276:	4013      	ands	r3, r2
 8022278:	64bb      	str	r3, [r7, #72]	@ 0x48
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	681b      	ldr	r3, [r3, #0]
 802227e:	3308      	adds	r3, #8
 8022280:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022282:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8022284:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8022286:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022288:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802228a:	e841 2300 	strex	r3, r2, [r1]
 802228e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8022290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022292:	2b00      	cmp	r3, #0
 8022294:	d1e5      	bne.n	8022262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8022296:	687b      	ldr	r3, [r7, #4]
 8022298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 802229a:	2b01      	cmp	r3, #1
 802229c:	d118      	bne.n	80222d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802229e:	687b      	ldr	r3, [r7, #4]
 80222a0:	681b      	ldr	r3, [r3, #0]
 80222a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80222a4:	68fb      	ldr	r3, [r7, #12]
 80222a6:	e853 3f00 	ldrex	r3, [r3]
 80222aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80222ac:	68bb      	ldr	r3, [r7, #8]
 80222ae:	f023 0310 	bic.w	r3, r3, #16
 80222b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80222b4:	687b      	ldr	r3, [r7, #4]
 80222b6:	681b      	ldr	r3, [r3, #0]
 80222b8:	461a      	mov	r2, r3
 80222ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80222bc:	61bb      	str	r3, [r7, #24]
 80222be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80222c0:	6979      	ldr	r1, [r7, #20]
 80222c2:	69ba      	ldr	r2, [r7, #24]
 80222c4:	e841 2300 	strex	r3, r2, [r1]
 80222c8:	613b      	str	r3, [r7, #16]
   return(result);
 80222ca:	693b      	ldr	r3, [r7, #16]
 80222cc:	2b00      	cmp	r3, #0
 80222ce:	d1e6      	bne.n	802229e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80222d0:	687b      	ldr	r3, [r7, #4]
 80222d2:	2220      	movs	r2, #32
 80222d4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80222d8:	687b      	ldr	r3, [r7, #4]
 80222da:	2200      	movs	r2, #0
 80222dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	2200      	movs	r2, #0
 80222e2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80222e4:	bf00      	nop
 80222e6:	3754      	adds	r7, #84	@ 0x54
 80222e8:	46bd      	mov	sp, r7
 80222ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222ee:	4770      	bx	lr
 80222f0:	effffffe 	.word	0xeffffffe

080222f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80222f4:	b480      	push	{r7}
 80222f6:	b085      	sub	sp, #20
 80222f8:	af00      	add	r7, sp, #0
 80222fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80222fc:	687b      	ldr	r3, [r7, #4]
 80222fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022302:	2b01      	cmp	r3, #1
 8022304:	d101      	bne.n	802230a <HAL_UARTEx_DisableFifoMode+0x16>
 8022306:	2302      	movs	r3, #2
 8022308:	e027      	b.n	802235a <HAL_UARTEx_DisableFifoMode+0x66>
 802230a:	687b      	ldr	r3, [r7, #4]
 802230c:	2201      	movs	r2, #1
 802230e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022312:	687b      	ldr	r3, [r7, #4]
 8022314:	2224      	movs	r2, #36	@ 0x24
 8022316:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	681b      	ldr	r3, [r3, #0]
 802231e:	681b      	ldr	r3, [r3, #0]
 8022320:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022322:	687b      	ldr	r3, [r7, #4]
 8022324:	681b      	ldr	r3, [r3, #0]
 8022326:	681a      	ldr	r2, [r3, #0]
 8022328:	687b      	ldr	r3, [r7, #4]
 802232a:	681b      	ldr	r3, [r3, #0]
 802232c:	f022 0201 	bic.w	r2, r2, #1
 8022330:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8022332:	68fb      	ldr	r3, [r7, #12]
 8022334:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8022338:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 802233a:	687b      	ldr	r3, [r7, #4]
 802233c:	2200      	movs	r2, #0
 802233e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8022340:	687b      	ldr	r3, [r7, #4]
 8022342:	681b      	ldr	r3, [r3, #0]
 8022344:	68fa      	ldr	r2, [r7, #12]
 8022346:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022348:	687b      	ldr	r3, [r7, #4]
 802234a:	2220      	movs	r2, #32
 802234c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8022350:	687b      	ldr	r3, [r7, #4]
 8022352:	2200      	movs	r2, #0
 8022354:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022358:	2300      	movs	r3, #0
}
 802235a:	4618      	mov	r0, r3
 802235c:	3714      	adds	r7, #20
 802235e:	46bd      	mov	sp, r7
 8022360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022364:	4770      	bx	lr

08022366 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8022366:	b580      	push	{r7, lr}
 8022368:	b084      	sub	sp, #16
 802236a:	af00      	add	r7, sp, #0
 802236c:	6078      	str	r0, [r7, #4]
 802236e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8022370:	687b      	ldr	r3, [r7, #4]
 8022372:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8022376:	2b01      	cmp	r3, #1
 8022378:	d101      	bne.n	802237e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 802237a:	2302      	movs	r3, #2
 802237c:	e02d      	b.n	80223da <HAL_UARTEx_SetTxFifoThreshold+0x74>
 802237e:	687b      	ldr	r3, [r7, #4]
 8022380:	2201      	movs	r2, #1
 8022382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022386:	687b      	ldr	r3, [r7, #4]
 8022388:	2224      	movs	r2, #36	@ 0x24
 802238a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802238e:	687b      	ldr	r3, [r7, #4]
 8022390:	681b      	ldr	r3, [r3, #0]
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022396:	687b      	ldr	r3, [r7, #4]
 8022398:	681b      	ldr	r3, [r3, #0]
 802239a:	681a      	ldr	r2, [r3, #0]
 802239c:	687b      	ldr	r3, [r7, #4]
 802239e:	681b      	ldr	r3, [r3, #0]
 80223a0:	f022 0201 	bic.w	r2, r2, #1
 80223a4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80223a6:	687b      	ldr	r3, [r7, #4]
 80223a8:	681b      	ldr	r3, [r3, #0]
 80223aa:	689b      	ldr	r3, [r3, #8]
 80223ac:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80223b0:	687b      	ldr	r3, [r7, #4]
 80223b2:	681b      	ldr	r3, [r3, #0]
 80223b4:	683a      	ldr	r2, [r7, #0]
 80223b6:	430a      	orrs	r2, r1
 80223b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80223ba:	6878      	ldr	r0, [r7, #4]
 80223bc:	f000 f850 	bl	8022460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	681b      	ldr	r3, [r3, #0]
 80223c4:	68fa      	ldr	r2, [r7, #12]
 80223c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80223c8:	687b      	ldr	r3, [r7, #4]
 80223ca:	2220      	movs	r2, #32
 80223cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80223d0:	687b      	ldr	r3, [r7, #4]
 80223d2:	2200      	movs	r2, #0
 80223d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80223d8:	2300      	movs	r3, #0
}
 80223da:	4618      	mov	r0, r3
 80223dc:	3710      	adds	r7, #16
 80223de:	46bd      	mov	sp, r7
 80223e0:	bd80      	pop	{r7, pc}

080223e2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80223e2:	b580      	push	{r7, lr}
 80223e4:	b084      	sub	sp, #16
 80223e6:	af00      	add	r7, sp, #0
 80223e8:	6078      	str	r0, [r7, #4]
 80223ea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80223ec:	687b      	ldr	r3, [r7, #4]
 80223ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80223f2:	2b01      	cmp	r3, #1
 80223f4:	d101      	bne.n	80223fa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80223f6:	2302      	movs	r3, #2
 80223f8:	e02d      	b.n	8022456 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80223fa:	687b      	ldr	r3, [r7, #4]
 80223fc:	2201      	movs	r2, #1
 80223fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8022402:	687b      	ldr	r3, [r7, #4]
 8022404:	2224      	movs	r2, #36	@ 0x24
 8022406:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 802240a:	687b      	ldr	r3, [r7, #4]
 802240c:	681b      	ldr	r3, [r3, #0]
 802240e:	681b      	ldr	r3, [r3, #0]
 8022410:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8022412:	687b      	ldr	r3, [r7, #4]
 8022414:	681b      	ldr	r3, [r3, #0]
 8022416:	681a      	ldr	r2, [r3, #0]
 8022418:	687b      	ldr	r3, [r7, #4]
 802241a:	681b      	ldr	r3, [r3, #0]
 802241c:	f022 0201 	bic.w	r2, r2, #1
 8022420:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	689b      	ldr	r3, [r3, #8]
 8022428:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 802242c:	687b      	ldr	r3, [r7, #4]
 802242e:	681b      	ldr	r3, [r3, #0]
 8022430:	683a      	ldr	r2, [r7, #0]
 8022432:	430a      	orrs	r2, r1
 8022434:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8022436:	6878      	ldr	r0, [r7, #4]
 8022438:	f000 f812 	bl	8022460 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802243c:	687b      	ldr	r3, [r7, #4]
 802243e:	681b      	ldr	r3, [r3, #0]
 8022440:	68fa      	ldr	r2, [r7, #12]
 8022442:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8022444:	687b      	ldr	r3, [r7, #4]
 8022446:	2220      	movs	r2, #32
 8022448:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802244c:	687b      	ldr	r3, [r7, #4]
 802244e:	2200      	movs	r2, #0
 8022450:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8022454:	2300      	movs	r3, #0
}
 8022456:	4618      	mov	r0, r3
 8022458:	3710      	adds	r7, #16
 802245a:	46bd      	mov	sp, r7
 802245c:	bd80      	pop	{r7, pc}
	...

08022460 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8022460:	b480      	push	{r7}
 8022462:	b085      	sub	sp, #20
 8022464:	af00      	add	r7, sp, #0
 8022466:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802246c:	2b00      	cmp	r3, #0
 802246e:	d108      	bne.n	8022482 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8022470:	687b      	ldr	r3, [r7, #4]
 8022472:	2201      	movs	r2, #1
 8022474:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8022478:	687b      	ldr	r3, [r7, #4]
 802247a:	2201      	movs	r2, #1
 802247c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8022480:	e031      	b.n	80224e6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8022482:	2310      	movs	r3, #16
 8022484:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8022486:	2310      	movs	r3, #16
 8022488:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 802248a:	687b      	ldr	r3, [r7, #4]
 802248c:	681b      	ldr	r3, [r3, #0]
 802248e:	689b      	ldr	r3, [r3, #8]
 8022490:	0e5b      	lsrs	r3, r3, #25
 8022492:	b2db      	uxtb	r3, r3
 8022494:	f003 0307 	and.w	r3, r3, #7
 8022498:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 802249a:	687b      	ldr	r3, [r7, #4]
 802249c:	681b      	ldr	r3, [r3, #0]
 802249e:	689b      	ldr	r3, [r3, #8]
 80224a0:	0f5b      	lsrs	r3, r3, #29
 80224a2:	b2db      	uxtb	r3, r3
 80224a4:	f003 0307 	and.w	r3, r3, #7
 80224a8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80224aa:	7bbb      	ldrb	r3, [r7, #14]
 80224ac:	7b3a      	ldrb	r2, [r7, #12]
 80224ae:	4911      	ldr	r1, [pc, #68]	@ (80224f4 <UARTEx_SetNbDataToProcess+0x94>)
 80224b0:	5c8a      	ldrb	r2, [r1, r2]
 80224b2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80224b6:	7b3a      	ldrb	r2, [r7, #12]
 80224b8:	490f      	ldr	r1, [pc, #60]	@ (80224f8 <UARTEx_SetNbDataToProcess+0x98>)
 80224ba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80224bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80224c0:	b29a      	uxth	r2, r3
 80224c2:	687b      	ldr	r3, [r7, #4]
 80224c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80224c8:	7bfb      	ldrb	r3, [r7, #15]
 80224ca:	7b7a      	ldrb	r2, [r7, #13]
 80224cc:	4909      	ldr	r1, [pc, #36]	@ (80224f4 <UARTEx_SetNbDataToProcess+0x94>)
 80224ce:	5c8a      	ldrb	r2, [r1, r2]
 80224d0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80224d4:	7b7a      	ldrb	r2, [r7, #13]
 80224d6:	4908      	ldr	r1, [pc, #32]	@ (80224f8 <UARTEx_SetNbDataToProcess+0x98>)
 80224d8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80224da:	fb93 f3f2 	sdiv	r3, r3, r2
 80224de:	b29a      	uxth	r2, r3
 80224e0:	687b      	ldr	r3, [r7, #4]
 80224e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80224e6:	bf00      	nop
 80224e8:	3714      	adds	r7, #20
 80224ea:	46bd      	mov	sp, r7
 80224ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224f0:	4770      	bx	lr
 80224f2:	bf00      	nop
 80224f4:	08027ff0 	.word	0x08027ff0
 80224f8:	08027ff8 	.word	0x08027ff8

080224fc <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 80224fc:	b580      	push	{r7, lr}
 80224fe:	b082      	sub	sp, #8
 8022500:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8022502:	4b15      	ldr	r3, [pc, #84]	@ (8022558 <prvInitialiseLogging+0x5c>)
 8022504:	681b      	ldr	r3, [r3, #0]
 8022506:	2b00      	cmp	r3, #0
 8022508:	d120      	bne.n	802254c <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 802250a:	f7e3 f8bf 	bl	800568c <xTaskGetSchedulerState>
 802250e:	4603      	mov	r3, r0
 8022510:	2b02      	cmp	r3, #2
 8022512:	d11b      	bne.n	802254c <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8022514:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8022518:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 802251a:	6878      	ldr	r0, [r7, #4]
 802251c:	f7e4 fa1a 	bl	8006954 <pvPortMalloc>
 8022520:	4603      	mov	r3, r0
 8022522:	4a0e      	ldr	r2, [pc, #56]	@ (802255c <prvInitialiseLogging+0x60>)
 8022524:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 8022526:	4b0d      	ldr	r3, [pc, #52]	@ (802255c <prvInitialiseLogging+0x60>)
 8022528:	681b      	ldr	r3, [r3, #0]
 802252a:	2b00      	cmp	r3, #0
 802252c:	d00e      	beq.n	802254c <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 802252e:	4b0b      	ldr	r3, [pc, #44]	@ (802255c <prvInitialiseLogging+0x60>)
 8022530:	681b      	ldr	r3, [r3, #0]
 8022532:	687a      	ldr	r2, [r7, #4]
 8022534:	2100      	movs	r1, #0
 8022536:	4618      	mov	r0, r3
 8022538:	f000 fc35 	bl	8022da6 <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 802253c:	4b07      	ldr	r3, [pc, #28]	@ (802255c <prvInitialiseLogging+0x60>)
 802253e:	681b      	ldr	r3, [r3, #0]
 8022540:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8022544:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 8022546:	4b04      	ldr	r3, [pc, #16]	@ (8022558 <prvInitialiseLogging+0x5c>)
 8022548:	2201      	movs	r2, #1
 802254a:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 802254c:	4b02      	ldr	r3, [pc, #8]	@ (8022558 <prvInitialiseLogging+0x5c>)
 802254e:	681b      	ldr	r3, [r3, #0]
}
 8022550:	4618      	mov	r0, r3
 8022552:	3708      	adds	r7, #8
 8022554:	46bd      	mov	sp, r7
 8022556:	bd80      	pop	{r7, pc}
 8022558:	20002668 	.word	0x20002668
 802255c:	20002658 	.word	0x20002658

08022560 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8022560:	b580      	push	{r7, lr}
 8022562:	b086      	sub	sp, #24
 8022564:	af02      	add	r7, sp, #8
 8022566:	6078      	str	r0, [r7, #4]
 8022568:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 802256a:	2300      	movs	r3, #0
 802256c:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 802256e:	4b24      	ldr	r3, [pc, #144]	@ (8022600 <prvGetMessageFromStreamBuffer+0xa0>)
 8022570:	681b      	ldr	r3, [r3, #0]
 8022572:	2b00      	cmp	r3, #0
 8022574:	d03f      	beq.n	80225f6 <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 8022576:	4b22      	ldr	r3, [pc, #136]	@ (8022600 <prvGetMessageFromStreamBuffer+0xa0>)
 8022578:	681b      	ldr	r3, [r3, #0]
 802257a:	4618      	mov	r0, r3
 802257c:	f7ee fe19 	bl	80111b2 <uxStreamBufferGetSize>
 8022580:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 8022582:	68fb      	ldr	r3, [r7, #12]
 8022584:	2b04      	cmp	r3, #4
 8022586:	d936      	bls.n	80225f6 <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 8022588:	f7e2 fa62 	bl	8004a50 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 802258c:	4b1c      	ldr	r3, [pc, #112]	@ (8022600 <prvGetMessageFromStreamBuffer+0xa0>)
 802258e:	6818      	ldr	r0, [r3, #0]
 8022590:	f107 0208 	add.w	r2, r7, #8
 8022594:	2300      	movs	r3, #0
 8022596:	9300      	str	r3, [sp, #0]
 8022598:	2304      	movs	r3, #4
 802259a:	2100      	movs	r1, #0
 802259c:	f7ee ff27 	bl	80113ee <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 80225a0:	68bb      	ldr	r3, [r7, #8]
 80225a2:	683a      	ldr	r2, [r7, #0]
 80225a4:	429a      	cmp	r2, r3
 80225a6:	d216      	bcs.n	80225d6 <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 80225a8:	4b15      	ldr	r3, [pc, #84]	@ (8022600 <prvGetMessageFromStreamBuffer+0xa0>)
 80225aa:	6818      	ldr	r0, [r3, #0]
 80225ac:	68bb      	ldr	r3, [r7, #8]
 80225ae:	2200      	movs	r2, #0
 80225b0:	9200      	str	r2, [sp, #0]
 80225b2:	4a14      	ldr	r2, [pc, #80]	@ (8022604 <prvGetMessageFromStreamBuffer+0xa4>)
 80225b4:	2100      	movs	r1, #0
 80225b6:	f7ee ff1a 	bl	80113ee <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 80225ba:	683a      	ldr	r2, [r7, #0]
 80225bc:	4911      	ldr	r1, [pc, #68]	@ (8022604 <prvGetMessageFromStreamBuffer+0xa4>)
 80225be:	6878      	ldr	r0, [r7, #4]
 80225c0:	f000 fae4 	bl	8022b8c <memcpy>
					xMessageLength = xBufferLength;
 80225c4:	683b      	ldr	r3, [r7, #0]
 80225c6:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 80225c8:	683b      	ldr	r3, [r7, #0]
 80225ca:	3b01      	subs	r3, #1
 80225cc:	687a      	ldr	r2, [r7, #4]
 80225ce:	4413      	add	r3, r2
 80225d0:	2200      	movs	r2, #0
 80225d2:	701a      	strb	r2, [r3, #0]
 80225d4:	e00d      	b.n	80225f2 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 80225d6:	4b0a      	ldr	r3, [pc, #40]	@ (8022600 <prvGetMessageFromStreamBuffer+0xa0>)
 80225d8:	6818      	ldr	r0, [r3, #0]
 80225da:	68bb      	ldr	r3, [r7, #8]
 80225dc:	2200      	movs	r2, #0
 80225de:	9200      	str	r2, [sp, #0]
 80225e0:	687a      	ldr	r2, [r7, #4]
 80225e2:	2100      	movs	r1, #0
 80225e4:	f7ee ff03 	bl	80113ee <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 80225e8:	68bb      	ldr	r3, [r7, #8]
 80225ea:	687a      	ldr	r2, [r7, #4]
 80225ec:	4413      	add	r3, r2
 80225ee:	2200      	movs	r2, #0
 80225f0:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 80225f2:	f7e2 fa3b 	bl	8004a6c <xTaskResumeAll>
		}
	}

	return xMessageLength;
 80225f6:	68bb      	ldr	r3, [r7, #8]
}
 80225f8:	4618      	mov	r0, r3
 80225fa:	3710      	adds	r7, #16
 80225fc:	46bd      	mov	sp, r7
 80225fe:	bd80      	pop	{r7, pc}
 8022600:	20002658 	.word	0x20002658
 8022604:	20002590 	.word	0x20002590

08022608 <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8022608:	b580      	push	{r7, lr}
 802260a:	b08e      	sub	sp, #56	@ 0x38
 802260c:	af04      	add	r7, sp, #16
 802260e:	6078      	str	r0, [r7, #4]
 8022610:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8022612:	4b49      	ldr	r3, [pc, #292]	@ (8022738 <prvBufferFormattedString+0x130>)
 8022614:	681b      	ldr	r3, [r3, #0]
 8022616:	2b00      	cmp	r3, #0
 8022618:	d104      	bne.n	8022624 <prvBufferFormattedString+0x1c>
 802261a:	f44f 7199 	mov.w	r1, #306	@ 0x132
 802261e:	4847      	ldr	r0, [pc, #284]	@ (802273c <prvBufferFormattedString+0x134>)
 8022620:	f7df f9ba 	bl	8001998 <vAssertCalled>

	vTaskSuspendAll();
 8022624:	f7e2 fa14 	bl	8004a50 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8022628:	f000 fa2a 	bl	8022a80 <ullGetHighResolutionTime>
 802262c:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8022630:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022634:	4a42      	ldr	r2, [pc, #264]	@ (8022740 <prvBufferFormattedString+0x138>)
 8022636:	f04f 0300 	mov.w	r3, #0
 802263a:	f7dd feb9 	bl	80003b0 <__aeabi_uldivmod>
 802263e:	4602      	mov	r2, r0
 8022640:	460b      	mov	r3, r1
 8022642:	4613      	mov	r3, r2
 8022644:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 8022646:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802264a:	4a3d      	ldr	r2, [pc, #244]	@ (8022740 <prvBufferFormattedString+0x138>)
 802264c:	f04f 0300 	mov.w	r3, #0
 8022650:	f7dd feae 	bl	80003b0 <__aeabi_uldivmod>
 8022654:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 8022658:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802265c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8022660:	f04f 0300 	mov.w	r3, #0
 8022664:	f7dd fea4 	bl	80003b0 <__aeabi_uldivmod>
 8022668:	4602      	mov	r2, r0
 802266a:	460b      	mov	r3, r1
 802266c:	4613      	mov	r3, r2
 802266e:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8022670:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8022674:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8022678:	f04f 0300 	mov.w	r3, #0
 802267c:	f7dd fe98 	bl	80003b0 <__aeabi_uldivmod>
 8022680:	4613      	mov	r3, r2
 8022682:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8022684:	2000      	movs	r0, #0
 8022686:	f7e2 fb05 	bl	8004c94 <pcTaskGetName>
 802268a:	4603      	mov	r3, r0
 802268c:	9302      	str	r3, [sp, #8]
 802268e:	697b      	ldr	r3, [r7, #20]
 8022690:	9301      	str	r3, [sp, #4]
 8022692:	69bb      	ldr	r3, [r7, #24]
 8022694:	9300      	str	r3, [sp, #0]
 8022696:	69fb      	ldr	r3, [r7, #28]
 8022698:	4a2a      	ldr	r2, [pc, #168]	@ (8022744 <prvBufferFormattedString+0x13c>)
 802269a:	21c8      	movs	r1, #200	@ 0xc8
 802269c:	482a      	ldr	r0, [pc, #168]	@ (8022748 <prvBufferFormattedString+0x140>)
 802269e:	f001 f885 	bl	80237ac <snprintf>
 80226a2:	4603      	mov	r3, r0
 80226a4:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 80226a6:	68fb      	ldr	r3, [r7, #12]
 80226a8:	4a27      	ldr	r2, [pc, #156]	@ (8022748 <prvBufferFormattedString+0x140>)
 80226aa:	1898      	adds	r0, r3, r2
 80226ac:	68fb      	ldr	r3, [r7, #12]
 80226ae:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80226b2:	683b      	ldr	r3, [r7, #0]
 80226b4:	687a      	ldr	r2, [r7, #4]
 80226b6:	f001 f85d 	bl	8023774 <vsnprintf>
 80226ba:	4603      	mov	r3, r0
 80226bc:	461a      	mov	r2, r3
 80226be:	68fb      	ldr	r3, [r7, #12]
 80226c0:	4413      	add	r3, r2
 80226c2:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 80226c4:	4b1c      	ldr	r3, [pc, #112]	@ (8022738 <prvBufferFormattedString+0x130>)
 80226c6:	681b      	ldr	r3, [r3, #0]
 80226c8:	4618      	mov	r0, r3
 80226ca:	f7ee fd50 	bl	801116e <uxStreamBufferGetSpace>
 80226ce:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 80226d0:	68fb      	ldr	r3, [r7, #12]
 80226d2:	3304      	adds	r3, #4
 80226d4:	693a      	ldr	r2, [r7, #16]
 80226d6:	429a      	cmp	r2, r3
 80226d8:	d90e      	bls.n	80226f8 <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 80226da:	4b17      	ldr	r3, [pc, #92]	@ (8022738 <prvBufferFormattedString+0x130>)
 80226dc:	6818      	ldr	r0, [r3, #0]
 80226de:	f107 020c 	add.w	r2, r7, #12
 80226e2:	2304      	movs	r3, #4
 80226e4:	2100      	movs	r1, #0
 80226e6:	f7ee fe02 	bl	80112ee <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 80226ea:	4b13      	ldr	r3, [pc, #76]	@ (8022738 <prvBufferFormattedString+0x130>)
 80226ec:	6818      	ldr	r0, [r3, #0]
 80226ee:	68fb      	ldr	r3, [r7, #12]
 80226f0:	4a15      	ldr	r2, [pc, #84]	@ (8022748 <prvBufferFormattedString+0x140>)
 80226f2:	2100      	movs	r1, #0
 80226f4:	f7ee fdfb 	bl	80112ee <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 80226f8:	f7e2 f9b8 	bl	8004a6c <xTaskResumeAll>

	if( xLoggingTask == NULL )
 80226fc:	4b13      	ldr	r3, [pc, #76]	@ (802274c <prvBufferFormattedString+0x144>)
 80226fe:	681b      	ldr	r3, [r3, #0]
 8022700:	2b00      	cmp	r3, #0
 8022702:	d10a      	bne.n	802271a <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8022704:	68fb      	ldr	r3, [r7, #12]
 8022706:	4619      	mov	r1, r3
 8022708:	480f      	ldr	r0, [pc, #60]	@ (8022748 <prvBufferFormattedString+0x140>)
 802270a:	f000 f85b 	bl	80227c4 <vUDPLoggingHook>
		uxSkipCount++;
 802270e:	4b10      	ldr	r3, [pc, #64]	@ (8022750 <prvBufferFormattedString+0x148>)
 8022710:	681b      	ldr	r3, [r3, #0]
 8022712:	3301      	adds	r3, #1
 8022714:	4a0e      	ldr	r2, [pc, #56]	@ (8022750 <prvBufferFormattedString+0x148>)
 8022716:	6013      	str	r3, [r2, #0]
 8022718:	e008      	b.n	802272c <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 802271a:	4b0c      	ldr	r3, [pc, #48]	@ (802274c <prvBufferFormattedString+0x144>)
 802271c:	6818      	ldr	r0, [r3, #0]
 802271e:	2300      	movs	r3, #0
 8022720:	9300      	str	r3, [sp, #0]
 8022722:	2302      	movs	r3, #2
 8022724:	2200      	movs	r2, #0
 8022726:	2100      	movs	r1, #0
 8022728:	f7e3 faf6 	bl	8005d18 <xTaskGenericNotify>
	}

	return xLength;
 802272c:	68fb      	ldr	r3, [r7, #12]
}
 802272e:	4618      	mov	r0, r3
 8022730:	3728      	adds	r7, #40	@ 0x28
 8022732:	46bd      	mov	sp, r7
 8022734:	bd80      	pop	{r7, pc}
 8022736:	bf00      	nop
 8022738:	20002658 	.word	0x20002658
 802273c:	08027dd8 	.word	0x08027dd8
 8022740:	000f4240 	.word	0x000f4240
 8022744:	08027e00 	.word	0x08027e00
 8022748:	20002590 	.word	0x20002590
 802274c:	2000265c 	.word	0x2000265c
 8022750:	20002660 	.word	0x20002660

08022754 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8022754:	b40f      	push	{r0, r1, r2, r3}
 8022756:	b580      	push	{r7, lr}
 8022758:	b082      	sub	sp, #8
 802275a:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 802275c:	f7ff fece 	bl	80224fc <prvInitialiseLogging>
 8022760:	4603      	mov	r3, r0
 8022762:	2b00      	cmp	r3, #0
 8022764:	d008      	beq.n	8022778 <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 8022766:	f107 0314 	add.w	r3, r7, #20
 802276a:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 802276c:	6839      	ldr	r1, [r7, #0]
 802276e:	6938      	ldr	r0, [r7, #16]
 8022770:	f7ff ff4a 	bl	8022608 <prvBufferFormattedString>
 8022774:	6078      	str	r0, [r7, #4]
 8022776:	e001      	b.n	802277c <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 8022778:	2300      	movs	r3, #0
 802277a:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 802277c:	687b      	ldr	r3, [r7, #4]
}
 802277e:	4618      	mov	r0, r3
 8022780:	3708      	adds	r7, #8
 8022782:	46bd      	mov	sp, r7
 8022784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022788:	b004      	add	sp, #16
 802278a:	4770      	bx	lr

0802278c <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 802278c:	b580      	push	{r7, lr}
 802278e:	b082      	sub	sp, #8
 8022790:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8022792:	4b08      	ldr	r3, [pc, #32]	@ (80227b4 <vUDPLoggingTaskCreate+0x28>)
 8022794:	9301      	str	r3, [sp, #4]
 8022796:	2302      	movs	r3, #2
 8022798:	9300      	str	r3, [sp, #0]
 802279a:	2300      	movs	r3, #0
 802279c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80227a0:	4905      	ldr	r1, [pc, #20]	@ (80227b8 <vUDPLoggingTaskCreate+0x2c>)
 80227a2:	4806      	ldr	r0, [pc, #24]	@ (80227bc <vUDPLoggingTaskCreate+0x30>)
 80227a4:	f7e1 febe 	bl	8004524 <xTaskCreate>
 80227a8:	4603      	mov	r3, r0
 80227aa:	4a05      	ldr	r2, [pc, #20]	@ (80227c0 <vUDPLoggingTaskCreate+0x34>)
 80227ac:	6013      	str	r3, [r2, #0]
}
 80227ae:	bf00      	nop
 80227b0:	46bd      	mov	sp, r7
 80227b2:	bd80      	pop	{r7, pc}
 80227b4:	2000265c 	.word	0x2000265c
 80227b8:	08027e18 	.word	0x08027e18
 80227bc:	080227dd 	.word	0x080227dd
 80227c0:	20002664 	.word	0x20002664

080227c4 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 80227c4:	b480      	push	{r7}
 80227c6:	b083      	sub	sp, #12
 80227c8:	af00      	add	r7, sp, #0
 80227ca:	6078      	str	r0, [r7, #4]
 80227cc:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 80227ce:	bf00      	nop
 80227d0:	370c      	adds	r7, #12
 80227d2:	46bd      	mov	sp, r7
 80227d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80227d8:	4770      	bx	lr
	...

080227dc <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 80227dc:	b580      	push	{r7, lr}
 80227de:	b098      	sub	sp, #96	@ 0x60
 80227e0:	af02      	add	r7, sp, #8
 80227e2:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 80227e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80227e8:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80227ea:	2000      	movs	r0, #0
 80227ec:	f7eb f974 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 80227f0:	6538      	str	r0, [r7, #80]	@ 0x50
 80227f2:	e01c      	b.n	802282e <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 80227f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80227f6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80227fa:	f003 0310 	and.w	r3, r3, #16
 80227fe:	b2db      	uxtb	r3, r3
 8022800:	2b00      	cmp	r3, #0
 8022802:	d00f      	beq.n	8022824 <prvLoggingTask+0x48>
 8022804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022806:	2b00      	cmp	r3, #0
 8022808:	d009      	beq.n	802281e <prvLoggingTask+0x42>
 802280a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802280c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8022810:	f003 0304 	and.w	r3, r3, #4
 8022814:	b2db      	uxtb	r3, r3
 8022816:	2b00      	cmp	r3, #0
 8022818:	d101      	bne.n	802281e <prvLoggingTask+0x42>
 802281a:	2301      	movs	r3, #1
 802281c:	e000      	b.n	8022820 <prvLoggingTask+0x44>
 802281e:	2300      	movs	r3, #0
 8022820:	2b00      	cmp	r3, #0
 8022822:	d108      	bne.n	8022836 <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8022824:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8022826:	2000      	movs	r0, #0
 8022828:	f7eb f978 	bl	800db1c <FreeRTOS_NextEndPoint>
 802282c:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 802282e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022830:	2b00      	cmp	r3, #0
 8022832:	d1df      	bne.n	80227f4 <prvLoggingTask+0x18>
 8022834:	e000      	b.n	8022838 <prvLoggingTask+0x5c>
				{
					break;
 8022836:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8022838:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802283a:	2b00      	cmp	r3, #0
 802283c:	d000      	beq.n	8022840 <prvLoggingTask+0x64>
			{
				break;
 802283e:	e004      	b.n	802284a <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8022840:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8022844:	f7e2 f84c 	bl	80048e0 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8022848:	e7cf      	b.n	80227ea <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 802284a:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 802284c:	f7e2 f848 	bl	80048e0 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8022850:	2211      	movs	r2, #17
 8022852:	2102      	movs	r1, #2
 8022854:	2002      	movs	r0, #2
 8022856:	f7eb febb 	bl	800e5d0 <FreeRTOS_socket>
 802285a:	4603      	mov	r3, r0
 802285c:	4a4c      	ldr	r2, [pc, #304]	@ (8022990 <prvLoggingTask+0x1b4>)
 802285e:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8022860:	4b4b      	ldr	r3, [pc, #300]	@ (8022990 <prvLoggingTask+0x1b4>)
 8022862:	681b      	ldr	r3, [r3, #0]
 8022864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022868:	d0ef      	beq.n	802284a <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 802286a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802286c:	2b00      	cmp	r3, #0
 802286e:	d104      	bne.n	802287a <prvLoggingTask+0x9e>
 8022870:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8022874:	4847      	ldr	r0, [pc, #284]	@ (8022994 <prvLoggingTask+0x1b8>)
 8022876:	f7df f88f 	bl	8001998 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 802287a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802287c:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022880:	2b00      	cmp	r3, #0
 8022882:	d104      	bne.n	802288e <prvLoggingTask+0xb2>
 8022884:	f240 11df 	movw	r1, #479	@ 0x1df
 8022888:	4842      	ldr	r0, [pc, #264]	@ (8022994 <prvLoggingTask+0x1b8>)
 802288a:	f7df f885 	bl	8001998 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 802288e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022890:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022894:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 8022896:	f246 2309 	movw	r3, #25097	@ 0x6209
 802289a:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 802289c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802289e:	681b      	ldr	r3, [r3, #0]
 80228a0:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 80228a2:	4b3b      	ldr	r3, [pc, #236]	@ (8022990 <prvLoggingTask+0x1b4>)
 80228a4:	681b      	ldr	r3, [r3, #0]
 80228a6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80228aa:	2218      	movs	r2, #24
 80228ac:	4618      	mov	r0, r3
 80228ae:	f7ec f87f 	bl	800e9b0 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 80228b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80228b4:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 80228b6:	4b36      	ldr	r3, [pc, #216]	@ (8022990 <prvLoggingTask+0x1b4>)
 80228b8:	6818      	ldr	r0, [r3, #0]
 80228ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80228be:	2204      	movs	r2, #4
 80228c0:	9200      	str	r2, [sp, #0]
 80228c2:	2201      	movs	r2, #1
 80228c4:	2100      	movs	r1, #0
 80228c6:	f7ec fe3d 	bl	800f544 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 80228ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80228cc:	2101      	movs	r1, #1
 80228ce:	2000      	movs	r0, #0
 80228d0:	f7e3 f916 	bl	8005b00 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 80228d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80228d6:	691b      	ldr	r3, [r3, #16]
 80228d8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80228da:	4798      	blx	r3
 80228dc:	4603      	mov	r3, r0
 80228de:	2b00      	cmp	r3, #0
 80228e0:	d0f3      	beq.n	80228ca <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80228e2:	2300      	movs	r3, #0
 80228e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80228e6:	e04c      	b.n	8022982 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 80228e8:	21c8      	movs	r1, #200	@ 0xc8
 80228ea:	482b      	ldr	r0, [pc, #172]	@ (8022998 <prvLoggingTask+0x1bc>)
 80228ec:	f7ff fe38 	bl	8022560 <prvGetMessageFromStreamBuffer>
 80228f0:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 80228f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80228f4:	2b00      	cmp	r3, #0
 80228f6:	d048      	beq.n	802298a <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80228f8:	2000      	movs	r0, #0
 80228fa:	f7eb f8ed 	bl	800dad8 <FreeRTOS_FirstEndPoint>
 80228fe:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8022900:	e02a      	b.n	8022958 <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8022902:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022904:	2b00      	cmp	r3, #0
 8022906:	d022      	beq.n	802294e <prvLoggingTask+0x172>
 8022908:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802290a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 802290e:	f003 0304 	and.w	r3, r3, #4
 8022912:	b2db      	uxtb	r3, r3
 8022914:	2b00      	cmp	r3, #0
 8022916:	d11a      	bne.n	802294e <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8022918:	2318      	movs	r3, #24
 802291a:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 802291c:	2302      	movs	r3, #2
 802291e:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8022920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022922:	681a      	ldr	r2, [r3, #0]
 8022924:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8022926:	685b      	ldr	r3, [r3, #4]
 8022928:	43db      	mvns	r3, r3
 802292a:	4313      	orrs	r3, r2
 802292c:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 802292e:	f246 3309 	movw	r3, #25353	@ 0x6309
 8022932:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8022934:	4b16      	ldr	r3, [pc, #88]	@ (8022990 <prvLoggingTask+0x1b4>)
 8022936:	6818      	ldr	r0, [r3, #0]
 8022938:	2318      	movs	r3, #24
 802293a:	9301      	str	r3, [sp, #4]
 802293c:	f107 030c 	add.w	r3, r7, #12
 8022940:	9300      	str	r3, [sp, #0]
 8022942:	2300      	movs	r3, #0
 8022944:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022946:	4914      	ldr	r1, [pc, #80]	@ (8022998 <prvLoggingTask+0x1bc>)
 8022948:	f7eb ffc2 	bl	800e8d0 <FreeRTOS_sendto>
							}
							break;
 802294c:	e007      	b.n	802295e <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 802294e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8022950:	2000      	movs	r0, #0
 8022952:	f7eb f8e3 	bl	800db1c <FreeRTOS_NextEndPoint>
 8022956:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8022958:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802295a:	2b00      	cmp	r3, #0
 802295c:	d1d1      	bne.n	8022902 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 802295e:	4b0f      	ldr	r3, [pc, #60]	@ (802299c <prvLoggingTask+0x1c0>)
 8022960:	681b      	ldr	r3, [r3, #0]
 8022962:	2b00      	cmp	r3, #0
 8022964:	d005      	beq.n	8022972 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8022966:	4b0d      	ldr	r3, [pc, #52]	@ (802299c <prvLoggingTask+0x1c0>)
 8022968:	681b      	ldr	r3, [r3, #0]
 802296a:	3b01      	subs	r3, #1
 802296c:	4a0b      	ldr	r2, [pc, #44]	@ (802299c <prvLoggingTask+0x1c0>)
 802296e:	6013      	str	r3, [r2, #0]
 8022970:	e004      	b.n	802297c <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8022972:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022974:	4619      	mov	r1, r3
 8022976:	4808      	ldr	r0, [pc, #32]	@ (8022998 <prvLoggingTask+0x1bc>)
 8022978:	f7ff ff24 	bl	80227c4 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 802297c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 802297e:	3301      	adds	r3, #1
 8022980:	657b      	str	r3, [r7, #84]	@ 0x54
 8022982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022984:	2b13      	cmp	r3, #19
 8022986:	ddaf      	ble.n	80228e8 <prvLoggingTask+0x10c>
 8022988:	e79f      	b.n	80228ca <prvLoggingTask+0xee>
					break;
 802298a:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 802298c:	e79d      	b.n	80228ca <prvLoggingTask+0xee>
 802298e:	bf00      	nop
 8022990:	20000028 	.word	0x20000028
 8022994:	08027dd8 	.word	0x08027dd8
 8022998:	2000266c 	.word	0x2000266c
 802299c:	20002660 	.word	0x20002660

080229a0 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 80229a0:	b480      	push	{r7}
 80229a2:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 80229a4:	4b0c      	ldr	r3, [pc, #48]	@ (80229d8 <TIM2_IRQHandler+0x38>)
 80229a6:	681b      	ldr	r3, [r3, #0]
 80229a8:	691b      	ldr	r3, [r3, #16]
 80229aa:	4a0c      	ldr	r2, [pc, #48]	@ (80229dc <TIM2_IRQHandler+0x3c>)
 80229ac:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 80229ae:	4b0b      	ldr	r3, [pc, #44]	@ (80229dc <TIM2_IRQHandler+0x3c>)
 80229b0:	681b      	ldr	r3, [r3, #0]
 80229b2:	f003 0301 	and.w	r3, r3, #1
 80229b6:	2b00      	cmp	r3, #0
 80229b8:	d009      	beq.n	80229ce <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 80229ba:	4b07      	ldr	r3, [pc, #28]	@ (80229d8 <TIM2_IRQHandler+0x38>)
 80229bc:	681b      	ldr	r3, [r3, #0]
 80229be:	f06f 0201 	mvn.w	r2, #1
 80229c2:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 80229c4:	4b06      	ldr	r3, [pc, #24]	@ (80229e0 <TIM2_IRQHandler+0x40>)
 80229c6:	681b      	ldr	r3, [r3, #0]
 80229c8:	3301      	adds	r3, #1
 80229ca:	4a05      	ldr	r2, [pc, #20]	@ (80229e0 <TIM2_IRQHandler+0x40>)
 80229cc:	6013      	str	r3, [r2, #0]
	}
}
 80229ce:	bf00      	nop
 80229d0:	46bd      	mov	sp, r7
 80229d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80229d6:	4770      	bx	lr
 80229d8:	20000444 	.word	0x20000444
 80229dc:	20002738 	.word	0x20002738
 80229e0:	20002734 	.word	0x20002734

080229e4 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 80229e4:	b580      	push	{r7, lr}
 80229e6:	b082      	sub	sp, #8
 80229e8:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 80229ea:	4b20      	ldr	r3, [pc, #128]	@ (8022a6c <vStartHighResolutionTimer+0x88>)
 80229ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80229f0:	4a1e      	ldr	r2, [pc, #120]	@ (8022a6c <vStartHighResolutionTimer+0x88>)
 80229f2:	f043 0301 	orr.w	r3, r3, #1
 80229f6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80229fa:	4b1c      	ldr	r3, [pc, #112]	@ (8022a6c <vStartHighResolutionTimer+0x88>)
 80229fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022a00:	f003 0301 	and.w	r3, r3, #1
 8022a04:	607b      	str	r3, [r7, #4]
 8022a06:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8022a08:	4b19      	ldr	r3, [pc, #100]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8022a0e:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8022a10:	23c8      	movs	r3, #200	@ 0xc8
 8022a12:	3b01      	subs	r3, #1
 8022a14:	4a16      	ldr	r2, [pc, #88]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a16:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8022a18:	4b15      	ldr	r3, [pc, #84]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a1a:	2200      	movs	r2, #0
 8022a1c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8022a1e:	4b15      	ldr	r3, [pc, #84]	@ (8022a74 <vStartHighResolutionTimer+0x90>)
 8022a20:	3b01      	subs	r3, #1
 8022a22:	4a13      	ldr	r2, [pc, #76]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a24:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8022a26:	4b12      	ldr	r3, [pc, #72]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a28:	2200      	movs	r2, #0
 8022a2a:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8022a2c:	4b10      	ldr	r3, [pc, #64]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a2e:	2200      	movs	r2, #0
 8022a30:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8022a32:	4b0f      	ldr	r3, [pc, #60]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a34:	2201      	movs	r2, #1
 8022a36:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8022a38:	2200      	movs	r2, #0
 8022a3a:	2105      	movs	r1, #5
 8022a3c:	201c      	movs	r0, #28
 8022a3e:	f7f7 ffa4 	bl	801a98a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8022a42:	201c      	movs	r0, #28
 8022a44:	f7f7 ffbb 	bl	801a9be <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8022a48:	4809      	ldr	r0, [pc, #36]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a4a:	f7fd fc96 	bl	802037a <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8022a4e:	4808      	ldr	r0, [pc, #32]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a50:	f7fd fcea 	bl	8020428 <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8022a54:	4b06      	ldr	r3, [pc, #24]	@ (8022a70 <vStartHighResolutionTimer+0x8c>)
 8022a56:	681b      	ldr	r3, [r3, #0]
 8022a58:	691b      	ldr	r3, [r3, #16]
 8022a5a:	4a07      	ldr	r2, [pc, #28]	@ (8022a78 <vStartHighResolutionTimer+0x94>)
 8022a5c:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8022a5e:	4b07      	ldr	r3, [pc, #28]	@ (8022a7c <vStartHighResolutionTimer+0x98>)
 8022a60:	2200      	movs	r2, #0
 8022a62:	601a      	str	r2, [r3, #0]
}
 8022a64:	bf00      	nop
 8022a66:	3708      	adds	r7, #8
 8022a68:	46bd      	mov	sp, r7
 8022a6a:	bd80      	pop	{r7, pc}
 8022a6c:	58024400 	.word	0x58024400
 8022a70:	20000444 	.word	0x20000444
 8022a74:	00989680 	.word	0x00989680
 8022a78:	20002738 	.word	0x20002738
 8022a7c:	20002734 	.word	0x20002734

08022a80 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8022a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022a84:	b08e      	sub	sp, #56	@ 0x38
 8022a86:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8022a88:	493d      	ldr	r1, [pc, #244]	@ (8022b80 <ullGetHighResolutionTime+0x100>)
 8022a8a:	6809      	ldr	r1, [r1, #0]
 8022a8c:	2900      	cmp	r1, #0
 8022a8e:	d132      	bne.n	8022af6 <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8022a90:	f7e2 f8f0 	bl	8004c74 <xTaskGetTickCount>
 8022a94:	4603      	mov	r3, r0
 8022a96:	2200      	movs	r2, #0
 8022a98:	469a      	mov	sl, r3
 8022a9a:	4693      	mov	fp, r2
 8022a9c:	4652      	mov	r2, sl
 8022a9e:	465b      	mov	r3, fp
 8022aa0:	f04f 0000 	mov.w	r0, #0
 8022aa4:	f04f 0100 	mov.w	r1, #0
 8022aa8:	0159      	lsls	r1, r3, #5
 8022aaa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022aae:	0150      	lsls	r0, r2, #5
 8022ab0:	4602      	mov	r2, r0
 8022ab2:	460b      	mov	r3, r1
 8022ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8022ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8022abc:	f04f 0200 	mov.w	r2, #0
 8022ac0:	f04f 0300 	mov.w	r3, #0
 8022ac4:	00ab      	lsls	r3, r5, #2
 8022ac6:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8022aca:	00a2      	lsls	r2, r4, #2
 8022acc:	4614      	mov	r4, r2
 8022ace:	461d      	mov	r5, r3
 8022ad0:	eb14 080a 	adds.w	r8, r4, sl
 8022ad4:	eb45 090b 	adc.w	r9, r5, fp
 8022ad8:	f04f 0200 	mov.w	r2, #0
 8022adc:	f04f 0300 	mov.w	r3, #0
 8022ae0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022ae4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8022ae8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022aec:	4690      	mov	r8, r2
 8022aee:	4699      	mov	r9, r3
 8022af0:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8022af4:	e03c      	b.n	8022b70 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022af6:	4922      	ldr	r1, [pc, #136]	@ (8022b80 <ullGetHighResolutionTime+0x100>)
 8022af8:	6809      	ldr	r1, [r1, #0]
 8022afa:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022afc:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8022afe:	4921      	ldr	r1, [pc, #132]	@ (8022b84 <ullGetHighResolutionTime+0x104>)
 8022b00:	6809      	ldr	r1, [r1, #0]
 8022b02:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8022b04:	491e      	ldr	r1, [pc, #120]	@ (8022b80 <ullGetHighResolutionTime+0x100>)
 8022b06:	6809      	ldr	r1, [r1, #0]
 8022b08:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8022b0a:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8022b0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8022b0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8022b10:	4288      	cmp	r0, r1
 8022b12:	d200      	bcs.n	8022b16 <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8022b14:	e7ef      	b.n	8022af6 <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8022b16:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8022b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8022b1a:	2000      	movs	r0, #0
 8022b1c:	61b9      	str	r1, [r7, #24]
 8022b1e:	61f8      	str	r0, [r7, #28]
 8022b20:	4819      	ldr	r0, [pc, #100]	@ (8022b88 <ullGetHighResolutionTime+0x108>)
 8022b22:	2100      	movs	r1, #0
 8022b24:	6138      	str	r0, [r7, #16]
 8022b26:	6179      	str	r1, [r7, #20]
 8022b28:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8022b2c:	4649      	mov	r1, r9
 8022b2e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8022b32:	4650      	mov	r0, sl
 8022b34:	fb00 f001 	mul.w	r0, r0, r1
 8022b38:	4659      	mov	r1, fp
 8022b3a:	4644      	mov	r4, r8
 8022b3c:	fb04 f101 	mul.w	r1, r4, r1
 8022b40:	4401      	add	r1, r0
 8022b42:	4640      	mov	r0, r8
 8022b44:	4654      	mov	r4, sl
 8022b46:	fba0 2304 	umull	r2, r3, r0, r4
 8022b4a:	4419      	add	r1, r3
 8022b4c:	460b      	mov	r3, r1
 8022b4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8022b50:	2000      	movs	r0, #0
 8022b52:	60b9      	str	r1, [r7, #8]
 8022b54:	60f8      	str	r0, [r7, #12]
 8022b56:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8022b5a:	4621      	mov	r1, r4
 8022b5c:	1851      	adds	r1, r2, r1
 8022b5e:	6039      	str	r1, [r7, #0]
 8022b60:	4629      	mov	r1, r5
 8022b62:	eb43 0101 	adc.w	r1, r3, r1
 8022b66:	6079      	str	r1, [r7, #4]
 8022b68:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022b6c:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022b70:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022b74:	4610      	mov	r0, r2
 8022b76:	4619      	mov	r1, r3
 8022b78:	3738      	adds	r7, #56	@ 0x38
 8022b7a:	46bd      	mov	sp, r7
 8022b7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022b80:	20000444 	.word	0x20000444
 8022b84:	20002734 	.word	0x20002734
 8022b88:	00989680 	.word	0x00989680

08022b8c <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022b8c:	b480      	push	{r7}
 8022b8e:	b08d      	sub	sp, #52	@ 0x34
 8022b90:	af00      	add	r7, sp, #0
 8022b92:	60f8      	str	r0, [r7, #12]
 8022b94:	60b9      	str	r1, [r7, #8]
 8022b96:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022b98:	68fb      	ldr	r3, [r7, #12]
 8022b9a:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022b9c:	68bb      	ldr	r3, [r7, #8]
 8022b9e:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022ba0:	697a      	ldr	r2, [r7, #20]
 8022ba2:	687b      	ldr	r3, [r7, #4]
 8022ba4:	4413      	add	r3, r2
 8022ba6:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 8022ba8:	69ba      	ldr	r2, [r7, #24]
 8022baa:	697b      	ldr	r3, [r7, #20]
 8022bac:	4053      	eors	r3, r2
 8022bae:	f003 0303 	and.w	r3, r3, #3
 8022bb2:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8022bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022bb6:	f003 0301 	and.w	r3, r3, #1
 8022bba:	2b00      	cmp	r3, #0
 8022bbc:	f040 80a1 	bne.w	8022d02 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8022bc0:	697b      	ldr	r3, [r7, #20]
 8022bc2:	f003 0301 	and.w	r3, r3, #1
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	d00b      	beq.n	8022be2 <memcpy+0x56>
 8022bca:	697a      	ldr	r2, [r7, #20]
 8022bcc:	693b      	ldr	r3, [r7, #16]
 8022bce:	429a      	cmp	r2, r3
 8022bd0:	d207      	bcs.n	8022be2 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8022bd2:	697a      	ldr	r2, [r7, #20]
 8022bd4:	1c53      	adds	r3, r2, #1
 8022bd6:	617b      	str	r3, [r7, #20]
 8022bd8:	69bb      	ldr	r3, [r7, #24]
 8022bda:	1c59      	adds	r1, r3, #1
 8022bdc:	61b9      	str	r1, [r7, #24]
 8022bde:	7812      	ldrb	r2, [r2, #0]
 8022be0:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8022be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022be4:	f003 0302 	and.w	r3, r3, #2
 8022be8:	2b00      	cmp	r3, #0
 8022bea:	d01f      	beq.n	8022c2c <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8022bec:	693b      	ldr	r3, [r7, #16]
 8022bee:	f003 0301 	and.w	r3, r3, #1
 8022bf2:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8022bf4:	693b      	ldr	r3, [r7, #16]
 8022bf6:	f023 0301 	bic.w	r3, r3, #1
 8022bfa:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022bfc:	e00a      	b.n	8022c14 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022bfe:	697a      	ldr	r2, [r7, #20]
 8022c00:	1c93      	adds	r3, r2, #2
 8022c02:	617b      	str	r3, [r7, #20]
 8022c04:	69bb      	ldr	r3, [r7, #24]
 8022c06:	1c99      	adds	r1, r3, #2
 8022c08:	61b9      	str	r1, [r7, #24]
 8022c0a:	8812      	ldrh	r2, [r2, #0]
 8022c0c:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	3b02      	subs	r3, #2
 8022c12:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8022c14:	697a      	ldr	r2, [r7, #20]
 8022c16:	693b      	ldr	r3, [r7, #16]
 8022c18:	429a      	cmp	r2, r3
 8022c1a:	d202      	bcs.n	8022c22 <memcpy+0x96>
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	2b00      	cmp	r3, #0
 8022c20:	d1ed      	bne.n	8022bfe <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022c22:	693a      	ldr	r2, [r7, #16]
 8022c24:	69fb      	ldr	r3, [r7, #28]
 8022c26:	4313      	orrs	r3, r2
 8022c28:	613b      	str	r3, [r7, #16]
 8022c2a:	e0ae      	b.n	8022d8a <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8022c2c:	697b      	ldr	r3, [r7, #20]
 8022c2e:	f003 0302 	and.w	r3, r3, #2
 8022c32:	2b00      	cmp	r3, #0
 8022c34:	d00c      	beq.n	8022c50 <memcpy+0xc4>
 8022c36:	697a      	ldr	r2, [r7, #20]
 8022c38:	693b      	ldr	r3, [r7, #16]
 8022c3a:	3b01      	subs	r3, #1
 8022c3c:	429a      	cmp	r2, r3
 8022c3e:	d207      	bcs.n	8022c50 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8022c40:	697a      	ldr	r2, [r7, #20]
 8022c42:	1c93      	adds	r3, r2, #2
 8022c44:	617b      	str	r3, [r7, #20]
 8022c46:	69bb      	ldr	r3, [r7, #24]
 8022c48:	1c99      	adds	r1, r3, #2
 8022c4a:	61b9      	str	r1, [r7, #24]
 8022c4c:	8812      	ldrh	r2, [r2, #0]
 8022c4e:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8022c50:	693b      	ldr	r3, [r7, #16]
 8022c52:	f003 0303 	and.w	r3, r3, #3
 8022c56:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8022c58:	693b      	ldr	r3, [r7, #16]
 8022c5a:	f023 0303 	bic.w	r3, r3, #3
 8022c5e:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8022c60:	693a      	ldr	r2, [r7, #16]
 8022c62:	697b      	ldr	r3, [r7, #20]
 8022c64:	1ad3      	subs	r3, r2, r3
 8022c66:	109b      	asrs	r3, r3, #2
 8022c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022c6a:	e02f      	b.n	8022ccc <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022c6c:	697a      	ldr	r2, [r7, #20]
 8022c6e:	69bb      	ldr	r3, [r7, #24]
 8022c70:	6812      	ldr	r2, [r2, #0]
 8022c72:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022c74:	697a      	ldr	r2, [r7, #20]
 8022c76:	69bb      	ldr	r3, [r7, #24]
 8022c78:	3304      	adds	r3, #4
 8022c7a:	6852      	ldr	r2, [r2, #4]
 8022c7c:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022c7e:	697a      	ldr	r2, [r7, #20]
 8022c80:	69bb      	ldr	r3, [r7, #24]
 8022c82:	3308      	adds	r3, #8
 8022c84:	6892      	ldr	r2, [r2, #8]
 8022c86:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8022c88:	697a      	ldr	r2, [r7, #20]
 8022c8a:	69bb      	ldr	r3, [r7, #24]
 8022c8c:	330c      	adds	r3, #12
 8022c8e:	68d2      	ldr	r2, [r2, #12]
 8022c90:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022c92:	697a      	ldr	r2, [r7, #20]
 8022c94:	69bb      	ldr	r3, [r7, #24]
 8022c96:	3310      	adds	r3, #16
 8022c98:	6912      	ldr	r2, [r2, #16]
 8022c9a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022c9c:	697a      	ldr	r2, [r7, #20]
 8022c9e:	69bb      	ldr	r3, [r7, #24]
 8022ca0:	3314      	adds	r3, #20
 8022ca2:	6952      	ldr	r2, [r2, #20]
 8022ca4:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8022ca6:	697a      	ldr	r2, [r7, #20]
 8022ca8:	69bb      	ldr	r3, [r7, #24]
 8022caa:	3318      	adds	r3, #24
 8022cac:	6992      	ldr	r2, [r2, #24]
 8022cae:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8022cb0:	697a      	ldr	r2, [r7, #20]
 8022cb2:	69bb      	ldr	r3, [r7, #24]
 8022cb4:	331c      	adds	r3, #28
 8022cb6:	69d2      	ldr	r2, [r2, #28]
 8022cb8:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8022cba:	69bb      	ldr	r3, [r7, #24]
 8022cbc:	3320      	adds	r3, #32
 8022cbe:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8022cc0:	697b      	ldr	r3, [r7, #20]
 8022cc2:	3320      	adds	r3, #32
 8022cc4:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8022cc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022cc8:	3b08      	subs	r3, #8
 8022cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022cce:	2b08      	cmp	r3, #8
 8022cd0:	dccc      	bgt.n	8022c6c <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022cd2:	e00a      	b.n	8022cea <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8022cd4:	697a      	ldr	r2, [r7, #20]
 8022cd6:	1d13      	adds	r3, r2, #4
 8022cd8:	617b      	str	r3, [r7, #20]
 8022cda:	69bb      	ldr	r3, [r7, #24]
 8022cdc:	1d19      	adds	r1, r3, #4
 8022cde:	61b9      	str	r1, [r7, #24]
 8022ce0:	6812      	ldr	r2, [r2, #0]
 8022ce2:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8022ce4:	687b      	ldr	r3, [r7, #4]
 8022ce6:	3b04      	subs	r3, #4
 8022ce8:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022cea:	697a      	ldr	r2, [r7, #20]
 8022cec:	693b      	ldr	r3, [r7, #16]
 8022cee:	429a      	cmp	r2, r3
 8022cf0:	d202      	bcs.n	8022cf8 <memcpy+0x16c>
 8022cf2:	687b      	ldr	r3, [r7, #4]
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	d1ed      	bne.n	8022cd4 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8022cf8:	693a      	ldr	r2, [r7, #16]
 8022cfa:	6a3b      	ldr	r3, [r7, #32]
 8022cfc:	4313      	orrs	r3, r2
 8022cfe:	613b      	str	r3, [r7, #16]
 8022d00:	e043      	b.n	8022d8a <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8022d02:	693a      	ldr	r2, [r7, #16]
 8022d04:	697b      	ldr	r3, [r7, #20]
 8022d06:	1ad3      	subs	r3, r2, r3
 8022d08:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022d0a:	e02f      	b.n	8022d6c <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8022d0c:	697a      	ldr	r2, [r7, #20]
 8022d0e:	69bb      	ldr	r3, [r7, #24]
 8022d10:	7812      	ldrb	r2, [r2, #0]
 8022d12:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8022d14:	697a      	ldr	r2, [r7, #20]
 8022d16:	69bb      	ldr	r3, [r7, #24]
 8022d18:	3301      	adds	r3, #1
 8022d1a:	7852      	ldrb	r2, [r2, #1]
 8022d1c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8022d1e:	697a      	ldr	r2, [r7, #20]
 8022d20:	69bb      	ldr	r3, [r7, #24]
 8022d22:	3302      	adds	r3, #2
 8022d24:	7892      	ldrb	r2, [r2, #2]
 8022d26:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8022d28:	697a      	ldr	r2, [r7, #20]
 8022d2a:	69bb      	ldr	r3, [r7, #24]
 8022d2c:	3303      	adds	r3, #3
 8022d2e:	78d2      	ldrb	r2, [r2, #3]
 8022d30:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8022d32:	697a      	ldr	r2, [r7, #20]
 8022d34:	69bb      	ldr	r3, [r7, #24]
 8022d36:	3304      	adds	r3, #4
 8022d38:	7912      	ldrb	r2, [r2, #4]
 8022d3a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8022d3c:	697a      	ldr	r2, [r7, #20]
 8022d3e:	69bb      	ldr	r3, [r7, #24]
 8022d40:	3305      	adds	r3, #5
 8022d42:	7952      	ldrb	r2, [r2, #5]
 8022d44:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8022d46:	697a      	ldr	r2, [r7, #20]
 8022d48:	69bb      	ldr	r3, [r7, #24]
 8022d4a:	3306      	adds	r3, #6
 8022d4c:	7992      	ldrb	r2, [r2, #6]
 8022d4e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8022d50:	697a      	ldr	r2, [r7, #20]
 8022d52:	69bb      	ldr	r3, [r7, #24]
 8022d54:	3307      	adds	r3, #7
 8022d56:	79d2      	ldrb	r2, [r2, #7]
 8022d58:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8022d5a:	69bb      	ldr	r3, [r7, #24]
 8022d5c:	3308      	adds	r3, #8
 8022d5e:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8022d60:	697b      	ldr	r3, [r7, #20]
 8022d62:	3308      	adds	r3, #8
 8022d64:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d68:	3b08      	subs	r3, #8
 8022d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022d6e:	2b08      	cmp	r3, #8
 8022d70:	dccc      	bgt.n	8022d0c <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022d72:	e00a      	b.n	8022d8a <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8022d74:	697a      	ldr	r2, [r7, #20]
 8022d76:	1c53      	adds	r3, r2, #1
 8022d78:	617b      	str	r3, [r7, #20]
 8022d7a:	69bb      	ldr	r3, [r7, #24]
 8022d7c:	1c59      	adds	r1, r3, #1
 8022d7e:	61b9      	str	r1, [r7, #24]
 8022d80:	7812      	ldrb	r2, [r2, #0]
 8022d82:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8022d84:	687b      	ldr	r3, [r7, #4]
 8022d86:	3b01      	subs	r3, #1
 8022d88:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022d8a:	697a      	ldr	r2, [r7, #20]
 8022d8c:	693b      	ldr	r3, [r7, #16]
 8022d8e:	429a      	cmp	r2, r3
 8022d90:	d202      	bcs.n	8022d98 <memcpy+0x20c>
 8022d92:	687b      	ldr	r3, [r7, #4]
 8022d94:	2b00      	cmp	r3, #0
 8022d96:	d1ed      	bne.n	8022d74 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8022d98:	68fb      	ldr	r3, [r7, #12]
}
 8022d9a:	4618      	mov	r0, r3
 8022d9c:	3734      	adds	r7, #52	@ 0x34
 8022d9e:	46bd      	mov	sp, r7
 8022da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022da4:	4770      	bx	lr

08022da6 <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8022da6:	b480      	push	{r7}
 8022da8:	b08b      	sub	sp, #44	@ 0x2c
 8022daa:	af00      	add	r7, sp, #0
 8022dac:	60f8      	str	r0, [r7, #12]
 8022dae:	60b9      	str	r1, [r7, #8]
 8022db0:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8022db6:	697a      	ldr	r2, [r7, #20]
 8022db8:	687b      	ldr	r3, [r7, #4]
 8022dba:	4413      	add	r3, r2
 8022dbc:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8022dbe:	687b      	ldr	r3, [r7, #4]
 8022dc0:	2b07      	cmp	r3, #7
 8022dc2:	d97b      	bls.n	8022ebc <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8022dc4:	68bb      	ldr	r3, [r7, #8]
 8022dc6:	b2db      	uxtb	r3, r3
 8022dc8:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8022dca:	69fb      	ldr	r3, [r7, #28]
 8022dcc:	021a      	lsls	r2, r3, #8
 8022dce:	69fb      	ldr	r3, [r7, #28]
 8022dd0:	041b      	lsls	r3, r3, #16
 8022dd2:	431a      	orrs	r2, r3
 8022dd4:	69fb      	ldr	r3, [r7, #28]
 8022dd6:	061b      	lsls	r3, r3, #24
 8022dd8:	4313      	orrs	r3, r2
 8022dda:	69fa      	ldr	r2, [r7, #28]
 8022ddc:	4313      	orrs	r3, r2
 8022dde:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8022de0:	697b      	ldr	r3, [r7, #20]
 8022de2:	f003 0303 	and.w	r3, r3, #3
 8022de6:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8022de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	d010      	beq.n	8022e10 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8022dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022df0:	f1c3 0304 	rsb	r3, r3, #4
 8022df4:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8022df6:	e006      	b.n	8022e06 <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8022df8:	697b      	ldr	r3, [r7, #20]
 8022dfa:	68ba      	ldr	r2, [r7, #8]
 8022dfc:	b2d2      	uxtb	r2, r2
 8022dfe:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8022e00:	697b      	ldr	r3, [r7, #20]
 8022e02:	3301      	adds	r3, #1
 8022e04:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8022e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022e08:	1e5a      	subs	r2, r3, #1
 8022e0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8022e0c:	2b00      	cmp	r3, #0
 8022e0e:	d1f3      	bne.n	8022df8 <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8022e10:	693b      	ldr	r3, [r7, #16]
 8022e12:	f003 0303 	and.w	r3, r3, #3
 8022e16:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8022e18:	693b      	ldr	r3, [r7, #16]
 8022e1a:	f023 0303 	bic.w	r3, r3, #3
 8022e1e:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8022e20:	693a      	ldr	r2, [r7, #16]
 8022e22:	697b      	ldr	r3, [r7, #20]
 8022e24:	1ad3      	subs	r3, r2, r3
 8022e26:	109b      	asrs	r3, r3, #2
 8022e28:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022e2a:	e024      	b.n	8022e76 <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8022e2c:	697b      	ldr	r3, [r7, #20]
 8022e2e:	69fa      	ldr	r2, [r7, #28]
 8022e30:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8022e32:	697b      	ldr	r3, [r7, #20]
 8022e34:	3304      	adds	r3, #4
 8022e36:	69fa      	ldr	r2, [r7, #28]
 8022e38:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8022e3a:	697b      	ldr	r3, [r7, #20]
 8022e3c:	3308      	adds	r3, #8
 8022e3e:	69fa      	ldr	r2, [r7, #28]
 8022e40:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8022e42:	697b      	ldr	r3, [r7, #20]
 8022e44:	330c      	adds	r3, #12
 8022e46:	69fa      	ldr	r2, [r7, #28]
 8022e48:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8022e4a:	697b      	ldr	r3, [r7, #20]
 8022e4c:	3310      	adds	r3, #16
 8022e4e:	69fa      	ldr	r2, [r7, #28]
 8022e50:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8022e52:	697b      	ldr	r3, [r7, #20]
 8022e54:	3314      	adds	r3, #20
 8022e56:	69fa      	ldr	r2, [r7, #28]
 8022e58:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8022e5a:	697b      	ldr	r3, [r7, #20]
 8022e5c:	3318      	adds	r3, #24
 8022e5e:	69fa      	ldr	r2, [r7, #28]
 8022e60:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8022e62:	697b      	ldr	r3, [r7, #20]
 8022e64:	331c      	adds	r3, #28
 8022e66:	69fa      	ldr	r2, [r7, #28]
 8022e68:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8022e6a:	697b      	ldr	r3, [r7, #20]
 8022e6c:	3320      	adds	r3, #32
 8022e6e:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022e70:	6a3b      	ldr	r3, [r7, #32]
 8022e72:	3b08      	subs	r3, #8
 8022e74:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8022e76:	6a3b      	ldr	r3, [r7, #32]
 8022e78:	2b08      	cmp	r3, #8
 8022e7a:	dcd7      	bgt.n	8022e2c <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022e7c:	e008      	b.n	8022e90 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8022e7e:	697b      	ldr	r3, [r7, #20]
 8022e80:	69fa      	ldr	r2, [r7, #28]
 8022e82:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8022e84:	697b      	ldr	r3, [r7, #20]
 8022e86:	3304      	adds	r3, #4
 8022e88:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8022e8a:	687b      	ldr	r3, [r7, #4]
 8022e8c:	3304      	adds	r3, #4
 8022e8e:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022e90:	697a      	ldr	r2, [r7, #20]
 8022e92:	693b      	ldr	r3, [r7, #16]
 8022e94:	429a      	cmp	r2, r3
 8022e96:	d202      	bcs.n	8022e9e <memset+0xf8>
 8022e98:	687b      	ldr	r3, [r7, #4]
 8022e9a:	2b00      	cmp	r3, #0
 8022e9c:	d1ef      	bne.n	8022e7e <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022e9e:	693a      	ldr	r2, [r7, #16]
 8022ea0:	69bb      	ldr	r3, [r7, #24]
 8022ea2:	4313      	orrs	r3, r2
 8022ea4:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022ea6:	e009      	b.n	8022ebc <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 8022ea8:	697b      	ldr	r3, [r7, #20]
 8022eaa:	68ba      	ldr	r2, [r7, #8]
 8022eac:	b2d2      	uxtb	r2, r2
 8022eae:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8022eb0:	697b      	ldr	r3, [r7, #20]
 8022eb2:	3301      	adds	r3, #1
 8022eb4:	617b      	str	r3, [r7, #20]
			ulBytes++;
 8022eb6:	687b      	ldr	r3, [r7, #4]
 8022eb8:	3301      	adds	r3, #1
 8022eba:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022ebc:	697a      	ldr	r2, [r7, #20]
 8022ebe:	693b      	ldr	r3, [r7, #16]
 8022ec0:	429a      	cmp	r2, r3
 8022ec2:	d202      	bcs.n	8022eca <memset+0x124>
 8022ec4:	687b      	ldr	r3, [r7, #4]
 8022ec6:	2b00      	cmp	r3, #0
 8022ec8:	d1ee      	bne.n	8022ea8 <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 8022eca:	68fb      	ldr	r3, [r7, #12]
}
 8022ecc:	4618      	mov	r0, r3
 8022ece:	372c      	adds	r7, #44	@ 0x2c
 8022ed0:	46bd      	mov	sp, r7
 8022ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ed6:	4770      	bx	lr

08022ed8 <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 8022ed8:	b480      	push	{r7}
 8022eda:	b083      	sub	sp, #12
 8022edc:	af00      	add	r7, sp, #0
 8022ede:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022ee0:	2303      	movs	r3, #3
}
 8022ee2:	4618      	mov	r0, r3
 8022ee4:	370c      	adds	r7, #12
 8022ee6:	46bd      	mov	sp, r7
 8022ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022eec:	4770      	bx	lr

08022eee <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022eee:	b480      	push	{r7}
 8022ef0:	b083      	sub	sp, #12
 8022ef2:	af00      	add	r7, sp, #0
 8022ef4:	4603      	mov	r3, r0
 8022ef6:	6039      	str	r1, [r7, #0]
 8022ef8:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 8022efa:	bf00      	nop
 8022efc:	370c      	adds	r7, #12
 8022efe:	46bd      	mov	sp, r7
 8022f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f04:	4770      	bx	lr

08022f06 <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8022f06:	b580      	push	{r7, lr}
 8022f08:	b084      	sub	sp, #16
 8022f0a:	af00      	add	r7, sp, #0
 8022f0c:	60f8      	str	r0, [r7, #12]
 8022f0e:	60b9      	str	r1, [r7, #8]
 8022f10:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8022f12:	68fb      	ldr	r3, [r7, #12]
 8022f14:	68ba      	ldr	r2, [r7, #8]
 8022f16:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8022f18:	68fb      	ldr	r3, [r7, #12]
 8022f1a:	68ba      	ldr	r2, [r7, #8]
 8022f1c:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8022f1e:	687b      	ldr	r3, [r7, #4]
 8022f20:	1e5a      	subs	r2, r3, #1
 8022f22:	68fb      	ldr	r3, [r7, #12]
 8022f24:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8022f26:	68fb      	ldr	r3, [r7, #12]
 8022f28:	2200      	movs	r2, #0
 8022f2a:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8022f2c:	68fb      	ldr	r3, [r7, #12]
 8022f2e:	3310      	adds	r3, #16
 8022f30:	2210      	movs	r2, #16
 8022f32:	2100      	movs	r1, #0
 8022f34:	4618      	mov	r0, r3
 8022f36:	f7ff ff36 	bl	8022da6 <memset>
}
 8022f3a:	bf00      	nop
 8022f3c:	3710      	adds	r7, #16
 8022f3e:	46bd      	mov	sp, r7
 8022f40:	bd80      	pop	{r7, pc}

08022f42 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8022f42:	b580      	push	{r7, lr}
 8022f44:	b082      	sub	sp, #8
 8022f46:	af00      	add	r7, sp, #0
 8022f48:	6078      	str	r0, [r7, #4]
 8022f4a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022f4c:	687b      	ldr	r3, [r7, #4]
 8022f4e:	681b      	ldr	r3, [r3, #0]
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	d10d      	bne.n	8022f70 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022f54:	683b      	ldr	r3, [r7, #0]
 8022f56:	b2db      	uxtb	r3, r3
 8022f58:	2214      	movs	r2, #20
 8022f5a:	4611      	mov	r1, r2
 8022f5c:	4618      	mov	r0, r3
 8022f5e:	f7ff ffc6 	bl	8022eee <vOutputChar>
		apStr->curLen++;
 8022f62:	687b      	ldr	r3, [r7, #4]
 8022f64:	68db      	ldr	r3, [r3, #12]
 8022f66:	1c5a      	adds	r2, r3, #1
 8022f68:	687b      	ldr	r3, [r7, #4]
 8022f6a:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022f6c:	2301      	movs	r3, #1
 8022f6e:	e022      	b.n	8022fb6 <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8022f70:	687b      	ldr	r3, [r7, #4]
 8022f72:	681a      	ldr	r2, [r3, #0]
 8022f74:	687b      	ldr	r3, [r7, #4]
 8022f76:	689b      	ldr	r3, [r3, #8]
 8022f78:	429a      	cmp	r2, r3
 8022f7a:	d20e      	bcs.n	8022f9a <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8022f7c:	687b      	ldr	r3, [r7, #4]
 8022f7e:	681b      	ldr	r3, [r3, #0]
 8022f80:	1c59      	adds	r1, r3, #1
 8022f82:	687a      	ldr	r2, [r7, #4]
 8022f84:	6011      	str	r1, [r2, #0]
 8022f86:	683a      	ldr	r2, [r7, #0]
 8022f88:	b2d2      	uxtb	r2, r2
 8022f8a:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8022f8c:	687b      	ldr	r3, [r7, #4]
 8022f8e:	68db      	ldr	r3, [r3, #12]
 8022f90:	1c5a      	adds	r2, r3, #1
 8022f92:	687b      	ldr	r3, [r7, #4]
 8022f94:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022f96:	2301      	movs	r3, #1
 8022f98:	e00d      	b.n	8022fb6 <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 8022f9a:	687b      	ldr	r3, [r7, #4]
 8022f9c:	681a      	ldr	r2, [r3, #0]
 8022f9e:	687b      	ldr	r3, [r7, #4]
 8022fa0:	689b      	ldr	r3, [r3, #8]
 8022fa2:	429a      	cmp	r2, r3
 8022fa4:	d106      	bne.n	8022fb4 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 8022fa6:	687b      	ldr	r3, [r7, #4]
 8022fa8:	681b      	ldr	r3, [r3, #0]
 8022faa:	1c59      	adds	r1, r3, #1
 8022fac:	687a      	ldr	r2, [r7, #4]
 8022fae:	6011      	str	r1, [r2, #0]
 8022fb0:	2200      	movs	r2, #0
 8022fb2:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022fb4:	2300      	movs	r3, #0
}
 8022fb6:	4618      	mov	r0, r3
 8022fb8:	3708      	adds	r7, #8
 8022fba:	46bd      	mov	sp, r7
 8022fbc:	bd80      	pop	{r7, pc}

08022fbe <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8022fbe:	b580      	push	{r7, lr}
 8022fc0:	b082      	sub	sp, #8
 8022fc2:	af00      	add	r7, sp, #0
 8022fc4:	6078      	str	r0, [r7, #4]
 8022fc6:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8022fc8:	687b      	ldr	r3, [r7, #4]
 8022fca:	681b      	ldr	r3, [r3, #0]
 8022fcc:	2b00      	cmp	r3, #0
 8022fce:	d112      	bne.n	8022ff6 <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022fd0:	683b      	ldr	r3, [r7, #0]
 8022fd2:	b2db      	uxtb	r3, r3
 8022fd4:	2214      	movs	r2, #20
 8022fd6:	4611      	mov	r1, r2
 8022fd8:	4618      	mov	r0, r3
 8022fda:	f7ff ff88 	bl	8022eee <vOutputChar>
		if( c == 0 )
 8022fde:	683b      	ldr	r3, [r7, #0]
 8022fe0:	2b00      	cmp	r3, #0
 8022fe2:	d101      	bne.n	8022fe8 <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8022fe4:	2300      	movs	r3, #0
 8022fe6:	e02e      	b.n	8023046 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8022fe8:	687b      	ldr	r3, [r7, #4]
 8022fea:	68db      	ldr	r3, [r3, #12]
 8022fec:	1c5a      	adds	r2, r3, #1
 8022fee:	687b      	ldr	r3, [r7, #4]
 8022ff0:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022ff2:	2301      	movs	r3, #1
 8022ff4:	e027      	b.n	8023046 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 8022ff6:	687b      	ldr	r3, [r7, #4]
 8022ff8:	681a      	ldr	r2, [r3, #0]
 8022ffa:	687b      	ldr	r3, [r7, #4]
 8022ffc:	689b      	ldr	r3, [r3, #8]
 8022ffe:	429a      	cmp	r2, r3
 8023000:	d213      	bcs.n	802302a <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8023002:	687b      	ldr	r3, [r7, #4]
 8023004:	681b      	ldr	r3, [r3, #0]
 8023006:	1c59      	adds	r1, r3, #1
 8023008:	687a      	ldr	r2, [r7, #4]
 802300a:	6011      	str	r1, [r2, #0]
 802300c:	683a      	ldr	r2, [r7, #0]
 802300e:	b2d2      	uxtb	r2, r2
 8023010:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8023012:	683b      	ldr	r3, [r7, #0]
 8023014:	2b00      	cmp	r3, #0
 8023016:	d101      	bne.n	802301c <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8023018:	2300      	movs	r3, #0
 802301a:	e014      	b.n	8023046 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802301c:	687b      	ldr	r3, [r7, #4]
 802301e:	68db      	ldr	r3, [r3, #12]
 8023020:	1c5a      	adds	r2, r3, #1
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8023026:	2301      	movs	r3, #1
 8023028:	e00d      	b.n	8023046 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 802302a:	687b      	ldr	r3, [r7, #4]
 802302c:	681a      	ldr	r2, [r3, #0]
 802302e:	687b      	ldr	r3, [r7, #4]
 8023030:	689b      	ldr	r3, [r3, #8]
 8023032:	429a      	cmp	r2, r3
 8023034:	d106      	bne.n	8023044 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8023036:	687b      	ldr	r3, [r7, #4]
 8023038:	681b      	ldr	r3, [r3, #0]
 802303a:	1c59      	adds	r1, r3, #1
 802303c:	687a      	ldr	r2, [r7, #4]
 802303e:	6011      	str	r1, [r2, #0]
 8023040:	2200      	movs	r2, #0
 8023042:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8023044:	2300      	movs	r3, #0
}
 8023046:	4618      	mov	r0, r3
 8023048:	3708      	adds	r7, #8
 802304a:	46bd      	mov	sp, r7
 802304c:	bd80      	pop	{r7, pc}
	...

08023050 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8023050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023052:	b085      	sub	sp, #20
 8023054:	af00      	add	r7, sp, #0
 8023056:	6078      	str	r0, [r7, #4]
 8023058:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 802305a:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 802305c:	683b      	ldr	r3, [r7, #0]
 802305e:	4618      	mov	r0, r3
 8023060:	f7ff ff3a 	bl	8022ed8 <xApplicationMemoryPermissions>
 8023064:	4603      	mov	r3, r0
 8023066:	2b00      	cmp	r3, #0
 8023068:	d101      	bne.n	802306e <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 802306a:	4b4c      	ldr	r3, [pc, #304]	@ (802319c <prints+0x14c>)
 802306c:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 802306e:	687b      	ldr	r3, [r7, #4]
 8023070:	695b      	ldr	r3, [r3, #20]
 8023072:	2b00      	cmp	r3, #0
 8023074:	dd1b      	ble.n	80230ae <prints+0x5e>
	{
		register int count = 0;
 8023076:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 8023078:	683d      	ldr	r5, [r7, #0]
 802307a:	e001      	b.n	8023080 <prints+0x30>
		{
			++count;
 802307c:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 802307e:	3501      	adds	r5, #1
 8023080:	782b      	ldrb	r3, [r5, #0]
 8023082:	2b00      	cmp	r3, #0
 8023084:	d1fa      	bne.n	802307c <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 8023086:	687b      	ldr	r3, [r7, #4]
 8023088:	695b      	ldr	r3, [r3, #20]
 802308a:	429c      	cmp	r4, r3
 802308c:	db03      	blt.n	8023096 <prints+0x46>
		{
			apBuf->flags.width = 0;
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	2200      	movs	r2, #0
 8023092:	615a      	str	r2, [r3, #20]
 8023094:	e004      	b.n	80230a0 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 8023096:	687b      	ldr	r3, [r7, #4]
 8023098:	695b      	ldr	r3, [r3, #20]
 802309a:	1b1a      	subs	r2, r3, r4
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 80230a0:	687b      	ldr	r3, [r7, #4]
 80230a2:	7f1b      	ldrb	r3, [r3, #28]
 80230a4:	f003 0302 	and.w	r3, r3, #2
 80230a8:	2b00      	cmp	r3, #0
 80230aa:	d000      	beq.n	80230ae <prints+0x5e>
		{
			padchar = '0';
 80230ac:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 80230ae:	687b      	ldr	r3, [r7, #4]
 80230b0:	7f1b      	ldrb	r3, [r3, #28]
 80230b2:	f003 0301 	and.w	r3, r3, #1
 80230b6:	2b00      	cmp	r3, #0
 80230b8:	d112      	bne.n	80230e0 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80230ba:	e00d      	b.n	80230d8 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 80230bc:	4631      	mov	r1, r6
 80230be:	6878      	ldr	r0, [r7, #4]
 80230c0:	f7ff ff3f 	bl	8022f42 <strbuf_printchar>
 80230c4:	4603      	mov	r3, r0
 80230c6:	2b00      	cmp	r3, #0
 80230c8:	d101      	bne.n	80230ce <prints+0x7e>
			{
				return pdFALSE;
 80230ca:	2300      	movs	r3, #0
 80230cc:	e062      	b.n	8023194 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80230ce:	687b      	ldr	r3, [r7, #4]
 80230d0:	695b      	ldr	r3, [r3, #20]
 80230d2:	1e5a      	subs	r2, r3, #1
 80230d4:	687b      	ldr	r3, [r7, #4]
 80230d6:	615a      	str	r2, [r3, #20]
 80230d8:	687b      	ldr	r3, [r7, #4]
 80230da:	695b      	ldr	r3, [r3, #20]
 80230dc:	2b00      	cmp	r3, #0
 80230de:	dced      	bgt.n	80230bc <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 80230e0:	687b      	ldr	r3, [r7, #4]
 80230e2:	7f9b      	ldrb	r3, [r3, #30]
 80230e4:	f003 0302 	and.w	r3, r3, #2
 80230e8:	b2db      	uxtb	r3, r3
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	d036      	beq.n	802315c <prints+0x10c>
 80230ee:	687b      	ldr	r3, [r7, #4]
 80230f0:	7f1b      	ldrb	r3, [r3, #28]
 80230f2:	2b01      	cmp	r3, #1
 80230f4:	d132      	bne.n	802315c <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 80230f6:	6838      	ldr	r0, [r7, #0]
 80230f8:	f7dd f8fc 	bl	80002f4 <strlen>
 80230fc:	4603      	mov	r3, r0
 80230fe:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8023100:	687b      	ldr	r3, [r7, #4]
 8023102:	699b      	ldr	r3, [r3, #24]
 8023104:	68ba      	ldr	r2, [r7, #8]
 8023106:	429a      	cmp	r2, r3
 8023108:	da28      	bge.n	802315c <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 802310a:	687b      	ldr	r3, [r7, #4]
 802310c:	699a      	ldr	r2, [r3, #24]
 802310e:	68bb      	ldr	r3, [r7, #8]
 8023110:	1ad3      	subs	r3, r2, r3
 8023112:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8023114:	e00b      	b.n	802312e <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8023116:	2130      	movs	r1, #48	@ 0x30
 8023118:	6878      	ldr	r0, [r7, #4]
 802311a:	f7ff ff12 	bl	8022f42 <strbuf_printchar>
 802311e:	4603      	mov	r3, r0
 8023120:	2b00      	cmp	r3, #0
 8023122:	d101      	bne.n	8023128 <prints+0xd8>
				{
					return pdFALSE;
 8023124:	2300      	movs	r3, #0
 8023126:	e035      	b.n	8023194 <prints+0x144>
			for( ; i; i-- )
 8023128:	68fb      	ldr	r3, [r7, #12]
 802312a:	3b01      	subs	r3, #1
 802312c:	60fb      	str	r3, [r7, #12]
 802312e:	68fb      	ldr	r3, [r7, #12]
 8023130:	2b00      	cmp	r3, #0
 8023132:	d1f0      	bne.n	8023116 <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8023134:	e012      	b.n	802315c <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8023136:	683b      	ldr	r3, [r7, #0]
 8023138:	781b      	ldrb	r3, [r3, #0]
 802313a:	4619      	mov	r1, r3
 802313c:	6878      	ldr	r0, [r7, #4]
 802313e:	f7ff ff00 	bl	8022f42 <strbuf_printchar>
 8023142:	4603      	mov	r3, r0
 8023144:	2b00      	cmp	r3, #0
 8023146:	d101      	bne.n	802314c <prints+0xfc>
		{
			return pdFALSE;
 8023148:	2300      	movs	r3, #0
 802314a:	e023      	b.n	8023194 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 802314c:	683b      	ldr	r3, [r7, #0]
 802314e:	3301      	adds	r3, #1
 8023150:	603b      	str	r3, [r7, #0]
 8023152:	687b      	ldr	r3, [r7, #4]
 8023154:	699b      	ldr	r3, [r3, #24]
 8023156:	1e5a      	subs	r2, r3, #1
 8023158:	687b      	ldr	r3, [r7, #4]
 802315a:	619a      	str	r2, [r3, #24]
 802315c:	687b      	ldr	r3, [r7, #4]
 802315e:	699b      	ldr	r3, [r3, #24]
 8023160:	2b00      	cmp	r3, #0
 8023162:	d012      	beq.n	802318a <prints+0x13a>
 8023164:	683b      	ldr	r3, [r7, #0]
 8023166:	781b      	ldrb	r3, [r3, #0]
 8023168:	2b00      	cmp	r3, #0
 802316a:	d1e4      	bne.n	8023136 <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802316c:	e00d      	b.n	802318a <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 802316e:	4631      	mov	r1, r6
 8023170:	6878      	ldr	r0, [r7, #4]
 8023172:	f7ff fee6 	bl	8022f42 <strbuf_printchar>
 8023176:	4603      	mov	r3, r0
 8023178:	2b00      	cmp	r3, #0
 802317a:	d101      	bne.n	8023180 <prints+0x130>
		{
			return pdFALSE;
 802317c:	2300      	movs	r3, #0
 802317e:	e009      	b.n	8023194 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8023180:	687b      	ldr	r3, [r7, #4]
 8023182:	695b      	ldr	r3, [r3, #20]
 8023184:	1e5a      	subs	r2, r3, #1
 8023186:	687b      	ldr	r3, [r7, #4]
 8023188:	615a      	str	r2, [r3, #20]
 802318a:	687b      	ldr	r3, [r7, #4]
 802318c:	695b      	ldr	r3, [r3, #20]
 802318e:	2b00      	cmp	r3, #0
 8023190:	dced      	bgt.n	802316e <prints+0x11e>
		}
	}

	return pdTRUE;
 8023192:	2301      	movs	r3, #1
}
 8023194:	4618      	mov	r0, r3
 8023196:	3714      	adds	r7, #20
 8023198:	46bd      	mov	sp, r7
 802319a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802319c:	08027e20 	.word	0x08027e20

080231a0 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 80231a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80231a4:	b087      	sub	sp, #28
 80231a6:	af00      	add	r7, sp, #0
 80231a8:	6078      	str	r0, [r7, #4]
 80231aa:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 80231ac:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 80231b0:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 80231b2:	687b      	ldr	r3, [r7, #4]
 80231b4:	691b      	ldr	r3, [r3, #16]
 80231b6:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80231b8:	687a      	ldr	r2, [r7, #4]
 80231ba:	7f93      	ldrb	r3, [r2, #30]
 80231bc:	f043 0302 	orr.w	r3, r3, #2
 80231c0:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 80231c2:	683b      	ldr	r3, [r7, #0]
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	d10b      	bne.n	80231e0 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 80231c8:	2330      	movs	r3, #48	@ 0x30
 80231ca:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 80231cc:	2300      	movs	r3, #0
 80231ce:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 80231d0:	f107 030c 	add.w	r3, r7, #12
 80231d4:	4619      	mov	r1, r3
 80231d6:	6878      	ldr	r0, [r7, #4]
 80231d8:	f7ff ff3a 	bl	8023050 <prints>
 80231dc:	4603      	mov	r3, r0
 80231de:	e067      	b.n	80232b0 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 80231e0:	687b      	ldr	r3, [r7, #4]
 80231e2:	7f9b      	ldrb	r3, [r3, #30]
 80231e4:	f003 0301 	and.w	r3, r3, #1
 80231e8:	b2db      	uxtb	r3, r3
 80231ea:	2b00      	cmp	r3, #0
 80231ec:	d009      	beq.n	8023202 <printi+0x62>
 80231ee:	2e0a      	cmp	r6, #10
 80231f0:	d107      	bne.n	8023202 <printi+0x62>
 80231f2:	683b      	ldr	r3, [r7, #0]
 80231f4:	2b00      	cmp	r3, #0
 80231f6:	da04      	bge.n	8023202 <printi+0x62>
	{
		neg = 1;
 80231f8:	f04f 0901 	mov.w	r9, #1
		u = -i;
 80231fc:	683b      	ldr	r3, [r7, #0]
 80231fe:	425b      	negs	r3, r3
 8023200:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 8023202:	f107 040c 	add.w	r4, r7, #12
 8023206:	340b      	adds	r4, #11

	*s = '\0';
 8023208:	2300      	movs	r3, #0
 802320a:	7023      	strb	r3, [r4, #0]
	switch( base )
 802320c:	2e10      	cmp	r6, #16
 802320e:	d017      	beq.n	8023240 <printi+0xa0>
 8023210:	2e10      	cmp	r6, #16
 8023212:	d829      	bhi.n	8023268 <printi+0xc8>
 8023214:	2e08      	cmp	r6, #8
 8023216:	d024      	beq.n	8023262 <printi+0xc2>
 8023218:	2e0a      	cmp	r6, #10
 802321a:	d022      	beq.n	8023262 <printi+0xc2>
 802321c:	e024      	b.n	8023268 <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 802321e:	462b      	mov	r3, r5
 8023220:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8023224:	f1b8 0f09 	cmp.w	r8, #9
 8023228:	dd03      	ble.n	8023232 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 802322a:	687b      	ldr	r3, [r7, #4]
 802322c:	7f5b      	ldrb	r3, [r3, #29]
 802322e:	3b3a      	subs	r3, #58	@ 0x3a
 8023230:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 8023232:	fa5f f388 	uxtb.w	r3, r8
 8023236:	3c01      	subs	r4, #1
 8023238:	3330      	adds	r3, #48	@ 0x30
 802323a:	b2db      	uxtb	r3, r3
 802323c:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 802323e:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8023240:	2d00      	cmp	r5, #0
 8023242:	d1ec      	bne.n	802321e <printi+0x7e>
		}
		break;
 8023244:	e010      	b.n	8023268 <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 8023246:	fbb5 f3f6 	udiv	r3, r5, r6
 802324a:	fb06 f303 	mul.w	r3, r6, r3
 802324e:	1aeb      	subs	r3, r5, r3
 8023250:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 8023252:	fa5f f388 	uxtb.w	r3, r8
 8023256:	3c01      	subs	r4, #1
 8023258:	3330      	adds	r3, #48	@ 0x30
 802325a:	b2db      	uxtb	r3, r3
 802325c:	7023      	strb	r3, [r4, #0]
			u /= base;
 802325e:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 8023262:	2d00      	cmp	r5, #0
 8023264:	d1ef      	bne.n	8023246 <printi+0xa6>
		}
		break;
 8023266:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 8023268:	f1b9 0f00 	cmp.w	r9, #0
 802326c:	d01b      	beq.n	80232a6 <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 802326e:	687b      	ldr	r3, [r7, #4]
 8023270:	695b      	ldr	r3, [r3, #20]
 8023272:	2b00      	cmp	r3, #0
 8023274:	d014      	beq.n	80232a0 <printi+0x100>
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	7f1b      	ldrb	r3, [r3, #28]
 802327a:	f003 0302 	and.w	r3, r3, #2
 802327e:	2b00      	cmp	r3, #0
 8023280:	d00e      	beq.n	80232a0 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8023282:	212d      	movs	r1, #45	@ 0x2d
 8023284:	6878      	ldr	r0, [r7, #4]
 8023286:	f7ff fe5c 	bl	8022f42 <strbuf_printchar>
 802328a:	4603      	mov	r3, r0
 802328c:	2b00      	cmp	r3, #0
 802328e:	d101      	bne.n	8023294 <printi+0xf4>
			{
				return pdFALSE;
 8023290:	2300      	movs	r3, #0
 8023292:	e00d      	b.n	80232b0 <printi+0x110>
			}
			--apBuf->flags.width;
 8023294:	687b      	ldr	r3, [r7, #4]
 8023296:	695b      	ldr	r3, [r3, #20]
 8023298:	1e5a      	subs	r2, r3, #1
 802329a:	687b      	ldr	r3, [r7, #4]
 802329c:	615a      	str	r2, [r3, #20]
 802329e:	e002      	b.n	80232a6 <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 80232a0:	3c01      	subs	r4, #1
 80232a2:	232d      	movs	r3, #45	@ 0x2d
 80232a4:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 80232a6:	4621      	mov	r1, r4
 80232a8:	6878      	ldr	r0, [r7, #4]
 80232aa:	f7ff fed1 	bl	8023050 <prints>
 80232ae:	4603      	mov	r3, r0
}
 80232b0:	4618      	mov	r0, r3
 80232b2:	371c      	adds	r7, #28
 80232b4:	46bd      	mov	sp, r7
 80232b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080232bc <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 80232bc:	b590      	push	{r4, r7, lr}
 80232be:	b089      	sub	sp, #36	@ 0x24
 80232c0:	af02      	add	r7, sp, #8
 80232c2:	6078      	str	r0, [r7, #4]
 80232c4:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 80232c6:	683b      	ldr	r3, [r7, #0]
 80232c8:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 80232ca:	683b      	ldr	r3, [r7, #0]
 80232cc:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 80232ce:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 80232d0:	683b      	ldr	r3, [r7, #0]
 80232d2:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 80232d4:	b2db      	uxtb	r3, r3
 80232d6:	683a      	ldr	r2, [r7, #0]
 80232d8:	b2d2      	uxtb	r2, r2
 80232da:	f107 0008 	add.w	r0, r7, #8
 80232de:	9201      	str	r2, [sp, #4]
 80232e0:	9300      	str	r3, [sp, #0]
 80232e2:	4623      	mov	r3, r4
 80232e4:	460a      	mov	r2, r1
 80232e6:	4909      	ldr	r1, [pc, #36]	@ (802330c <printIp+0x50>)
 80232e8:	f000 fa81 	bl	80237ee <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80232ec:	687a      	ldr	r2, [r7, #4]
 80232ee:	7f93      	ldrb	r3, [r2, #30]
 80232f0:	f043 0302 	orr.w	r3, r3, #2
 80232f4:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 80232f6:	f107 0308 	add.w	r3, r7, #8
 80232fa:	4619      	mov	r1, r3
 80232fc:	6878      	ldr	r0, [r7, #4]
 80232fe:	f7ff fea7 	bl	8023050 <prints>

	return pdTRUE;
 8023302:	2301      	movs	r3, #1
}
 8023304:	4618      	mov	r0, r3
 8023306:	371c      	adds	r7, #28
 8023308:	46bd      	mov	sp, r7
 802330a:	bd90      	pop	{r4, r7, pc}
 802330c:	08027e28 	.word	0x08027e28

08023310 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8023310:	b480      	push	{r7}
 8023312:	b083      	sub	sp, #12
 8023314:	af00      	add	r7, sp, #0
 8023316:	4603      	mov	r3, r0
 8023318:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 802331a:	4a0b      	ldr	r2, [pc, #44]	@ (8023348 <usNetToHost+0x38>)
 802331c:	4b0b      	ldr	r3, [pc, #44]	@ (802334c <usNetToHost+0x3c>)
 802331e:	429a      	cmp	r2, r3
 8023320:	d101      	bne.n	8023326 <usNetToHost+0x16>
	{
		return usValue;
 8023322:	88fb      	ldrh	r3, [r7, #6]
 8023324:	e009      	b.n	802333a <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8023326:	88fb      	ldrh	r3, [r7, #6]
 8023328:	021b      	lsls	r3, r3, #8
 802332a:	b21a      	sxth	r2, r3
 802332c:	88fb      	ldrh	r3, [r7, #6]
 802332e:	0a1b      	lsrs	r3, r3, #8
 8023330:	b29b      	uxth	r3, r3
 8023332:	b21b      	sxth	r3, r3
 8023334:	4313      	orrs	r3, r2
 8023336:	b21b      	sxth	r3, r3
 8023338:	b29b      	uxth	r3, r3
	}
}
 802333a:	4618      	mov	r0, r3
 802333c:	370c      	adds	r7, #12
 802333e:	46bd      	mov	sp, r7
 8023340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023344:	4770      	bx	lr
 8023346:	bf00      	nop
 8023348:	03020100 	.word	0x03020100
 802334c:	00010203 	.word	0x00010203

08023350 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8023350:	b580      	push	{r7, lr}
 8023352:	b088      	sub	sp, #32
 8023354:	af00      	add	r7, sp, #0
 8023356:	6078      	str	r0, [r7, #4]
 8023358:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 802335a:	f04f 33ff 	mov.w	r3, #4294967295
 802335e:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 8023360:	2300      	movs	r3, #0
 8023362:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 8023364:	2300      	movs	r3, #0
 8023366:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 8023368:	2300      	movs	r3, #0
 802336a:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 802336c:	2300      	movs	r3, #0
 802336e:	61fb      	str	r3, [r7, #28]
 8023370:	e026      	b.n	80233c0 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 8023372:	69fb      	ldr	r3, [r7, #28]
 8023374:	005b      	lsls	r3, r3, #1
 8023376:	683a      	ldr	r2, [r7, #0]
 8023378:	4413      	add	r3, r2
 802337a:	881b      	ldrh	r3, [r3, #0]
 802337c:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 802337e:	897b      	ldrh	r3, [r7, #10]
 8023380:	2b00      	cmp	r3, #0
 8023382:	d107      	bne.n	8023394 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8023384:	68fb      	ldr	r3, [r7, #12]
 8023386:	2b00      	cmp	r3, #0
 8023388:	d101      	bne.n	802338e <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 802338a:	69fb      	ldr	r3, [r7, #28]
 802338c:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 802338e:	68fb      	ldr	r3, [r7, #12]
 8023390:	3301      	adds	r3, #1
 8023392:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8023394:	897b      	ldrh	r3, [r7, #10]
 8023396:	2b00      	cmp	r3, #0
 8023398:	d102      	bne.n	80233a0 <printIPv6+0x50>
 802339a:	69fb      	ldr	r3, [r7, #28]
 802339c:	2b07      	cmp	r3, #7
 802339e:	d10c      	bne.n	80233ba <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 80233a0:	68fb      	ldr	r3, [r7, #12]
 80233a2:	2b01      	cmp	r3, #1
 80233a4:	dd07      	ble.n	80233b6 <printIPv6+0x66>
 80233a6:	697a      	ldr	r2, [r7, #20]
 80233a8:	68fb      	ldr	r3, [r7, #12]
 80233aa:	429a      	cmp	r2, r3
 80233ac:	da03      	bge.n	80233b6 <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 80233ae:	68fb      	ldr	r3, [r7, #12]
 80233b0:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 80233b2:	693b      	ldr	r3, [r7, #16]
 80233b4:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 80233b6:	2300      	movs	r3, #0
 80233b8:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80233ba:	69fb      	ldr	r3, [r7, #28]
 80233bc:	3301      	adds	r3, #1
 80233be:	61fb      	str	r3, [r7, #28]
 80233c0:	69fb      	ldr	r3, [r7, #28]
 80233c2:	2b07      	cmp	r3, #7
 80233c4:	ddd5      	ble.n	8023372 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 80233c6:	687b      	ldr	r3, [r7, #4]
 80233c8:	2210      	movs	r2, #16
 80233ca:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 80233cc:	687b      	ldr	r3, [r7, #4]
 80233ce:	2261      	movs	r2, #97	@ 0x61
 80233d0:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80233d2:	2300      	movs	r3, #0
 80233d4:	61fb      	str	r3, [r7, #28]
 80233d6:	e02b      	b.n	8023430 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 80233d8:	69fa      	ldr	r2, [r7, #28]
 80233da:	69bb      	ldr	r3, [r7, #24]
 80233dc:	429a      	cmp	r2, r3
 80233de:	d110      	bne.n	8023402 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 80233e0:	697b      	ldr	r3, [r7, #20]
 80233e2:	3b01      	subs	r3, #1
 80233e4:	69fa      	ldr	r2, [r7, #28]
 80233e6:	4413      	add	r3, r2
 80233e8:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 80233ea:	213a      	movs	r1, #58	@ 0x3a
 80233ec:	6878      	ldr	r0, [r7, #4]
 80233ee:	f7ff fda8 	bl	8022f42 <strbuf_printchar>
			if( iIndex == 7 )
 80233f2:	69fb      	ldr	r3, [r7, #28]
 80233f4:	2b07      	cmp	r3, #7
 80233f6:	d118      	bne.n	802342a <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 80233f8:	213a      	movs	r1, #58	@ 0x3a
 80233fa:	6878      	ldr	r0, [r7, #4]
 80233fc:	f7ff fda1 	bl	8022f42 <strbuf_printchar>
 8023400:	e013      	b.n	802342a <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8023402:	69fb      	ldr	r3, [r7, #28]
 8023404:	2b00      	cmp	r3, #0
 8023406:	dd03      	ble.n	8023410 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 8023408:	213a      	movs	r1, #58	@ 0x3a
 802340a:	6878      	ldr	r0, [r7, #4]
 802340c:	f7ff fd99 	bl	8022f42 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8023410:	69fb      	ldr	r3, [r7, #28]
 8023412:	005b      	lsls	r3, r3, #1
 8023414:	683a      	ldr	r2, [r7, #0]
 8023416:	4413      	add	r3, r2
 8023418:	881b      	ldrh	r3, [r3, #0]
 802341a:	4618      	mov	r0, r3
 802341c:	f7ff ff78 	bl	8023310 <usNetToHost>
 8023420:	4603      	mov	r3, r0
 8023422:	4619      	mov	r1, r3
 8023424:	6878      	ldr	r0, [r7, #4]
 8023426:	f7ff febb 	bl	80231a0 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 802342a:	69fb      	ldr	r3, [r7, #28]
 802342c:	3301      	adds	r3, #1
 802342e:	61fb      	str	r3, [r7, #28]
 8023430:	69fb      	ldr	r3, [r7, #28]
 8023432:	2b07      	cmp	r3, #7
 8023434:	ddd0      	ble.n	80233d8 <printIPv6+0x88>
		}
	}

	return pdTRUE;
 8023436:	2301      	movs	r3, #1
}
 8023438:	4618      	mov	r0, r3
 802343a:	3720      	adds	r7, #32
 802343c:	46bd      	mov	sp, r7
 802343e:	bd80      	pop	{r7, pc}

08023440 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8023440:	b590      	push	{r4, r7, lr}
 8023442:	b087      	sub	sp, #28
 8023444:	af00      	add	r7, sp, #0
 8023446:	60f8      	str	r0, [r7, #12]
 8023448:	60b9      	str	r1, [r7, #8]
 802344a:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 802344c:	68bb      	ldr	r3, [r7, #8]
 802344e:	1c5a      	adds	r2, r3, #1
 8023450:	60ba      	str	r2, [r7, #8]
 8023452:	781b      	ldrb	r3, [r3, #0]
 8023454:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 8023456:	697b      	ldr	r3, [r7, #20]
 8023458:	2b25      	cmp	r3, #37	@ 0x25
 802345a:	d00f      	beq.n	802347c <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 802345c:	6979      	ldr	r1, [r7, #20]
 802345e:	68f8      	ldr	r0, [r7, #12]
 8023460:	f7ff fdad 	bl	8022fbe <strbuf_printchar_inline>
 8023464:	4603      	mov	r3, r0
 8023466:	2b00      	cmp	r3, #0
 8023468:	f000 817e 	beq.w	8023768 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 802346c:	68bb      	ldr	r3, [r7, #8]
 802346e:	1c5a      	adds	r2, r3, #1
 8023470:	60ba      	str	r2, [r7, #8]
 8023472:	781b      	ldrb	r3, [r3, #0]
 8023474:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 8023476:	697b      	ldr	r3, [r7, #20]
 8023478:	2b25      	cmp	r3, #37	@ 0x25
 802347a:	d1ef      	bne.n	802345c <tiny_print+0x1c>
		}
		ch = *( format++ );
 802347c:	68bb      	ldr	r3, [r7, #8]
 802347e:	1c5a      	adds	r2, r3, #1
 8023480:	60ba      	str	r2, [r7, #8]
 8023482:	781b      	ldrb	r3, [r3, #0]
 8023484:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 8023486:	697b      	ldr	r3, [r7, #20]
 8023488:	2b00      	cmp	r3, #0
 802348a:	f000 8165 	beq.w	8023758 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 802348e:	697b      	ldr	r3, [r7, #20]
 8023490:	2b25      	cmp	r3, #37	@ 0x25
 8023492:	d108      	bne.n	80234a6 <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8023494:	6979      	ldr	r1, [r7, #20]
 8023496:	68f8      	ldr	r0, [r7, #12]
 8023498:	f7ff fd53 	bl	8022f42 <strbuf_printchar>
 802349c:	4603      	mov	r3, r0
 802349e:	2b00      	cmp	r3, #0
 80234a0:	f040 814e 	bne.w	8023740 <tiny_print+0x300>
			{
				return;
 80234a4:	e161      	b.n	802376a <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 80234a6:	68fb      	ldr	r3, [r7, #12]
 80234a8:	3310      	adds	r3, #16
 80234aa:	2210      	movs	r2, #16
 80234ac:	2100      	movs	r1, #0
 80234ae:	4618      	mov	r0, r3
 80234b0:	f7ff fc79 	bl	8022da6 <memset>

		if( ch == '-' )
 80234b4:	697b      	ldr	r3, [r7, #20]
 80234b6:	2b2d      	cmp	r3, #45	@ 0x2d
 80234b8:	d114      	bne.n	80234e4 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80234ba:	68bb      	ldr	r3, [r7, #8]
 80234bc:	1c5a      	adds	r2, r3, #1
 80234be:	60ba      	str	r2, [r7, #8]
 80234c0:	781b      	ldrb	r3, [r3, #0]
 80234c2:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 80234c4:	68fb      	ldr	r3, [r7, #12]
 80234c6:	2201      	movs	r2, #1
 80234c8:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 80234ca:	e00b      	b.n	80234e4 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80234cc:	68bb      	ldr	r3, [r7, #8]
 80234ce:	1c5a      	adds	r2, r3, #1
 80234d0:	60ba      	str	r2, [r7, #8]
 80234d2:	781b      	ldrb	r3, [r3, #0]
 80234d4:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 80234d6:	68fb      	ldr	r3, [r7, #12]
 80234d8:	7f1b      	ldrb	r3, [r3, #28]
 80234da:	f043 0302 	orr.w	r3, r3, #2
 80234de:	b2da      	uxtb	r2, r3
 80234e0:	68fb      	ldr	r3, [r7, #12]
 80234e2:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 80234e4:	697b      	ldr	r3, [r7, #20]
 80234e6:	2b30      	cmp	r3, #48	@ 0x30
 80234e8:	d0f0      	beq.n	80234cc <tiny_print+0x8c>
		}
		if( ch == '*' )
 80234ea:	697b      	ldr	r3, [r7, #20]
 80234ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80234ee:	d120      	bne.n	8023532 <tiny_print+0xf2>
		{
			ch = *( format++ );
 80234f0:	68bb      	ldr	r3, [r7, #8]
 80234f2:	1c5a      	adds	r2, r3, #1
 80234f4:	60ba      	str	r2, [r7, #8]
 80234f6:	781b      	ldrb	r3, [r3, #0]
 80234f8:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 80234fa:	687b      	ldr	r3, [r7, #4]
 80234fc:	1d1a      	adds	r2, r3, #4
 80234fe:	607a      	str	r2, [r7, #4]
 8023500:	681a      	ldr	r2, [r3, #0]
 8023502:	68fb      	ldr	r3, [r7, #12]
 8023504:	615a      	str	r2, [r3, #20]
 8023506:	e01a      	b.n	802353e <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8023508:	68fb      	ldr	r3, [r7, #12]
 802350a:	695a      	ldr	r2, [r3, #20]
 802350c:	4613      	mov	r3, r2
 802350e:	009b      	lsls	r3, r3, #2
 8023510:	4413      	add	r3, r2
 8023512:	005b      	lsls	r3, r3, #1
 8023514:	461a      	mov	r2, r3
 8023516:	68fb      	ldr	r3, [r7, #12]
 8023518:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 802351a:	68fb      	ldr	r3, [r7, #12]
 802351c:	695a      	ldr	r2, [r3, #20]
 802351e:	697b      	ldr	r3, [r7, #20]
 8023520:	3b30      	subs	r3, #48	@ 0x30
 8023522:	441a      	add	r2, r3
 8023524:	68fb      	ldr	r3, [r7, #12]
 8023526:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8023528:	68bb      	ldr	r3, [r7, #8]
 802352a:	1c5a      	adds	r2, r3, #1
 802352c:	60ba      	str	r2, [r7, #8]
 802352e:	781b      	ldrb	r3, [r3, #0]
 8023530:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8023532:	697b      	ldr	r3, [r7, #20]
 8023534:	2b2f      	cmp	r3, #47	@ 0x2f
 8023536:	dd02      	ble.n	802353e <tiny_print+0xfe>
 8023538:	697b      	ldr	r3, [r7, #20]
 802353a:	2b39      	cmp	r3, #57	@ 0x39
 802353c:	dde4      	ble.n	8023508 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 802353e:	697b      	ldr	r3, [r7, #20]
 8023540:	2b2e      	cmp	r3, #46	@ 0x2e
 8023542:	d12e      	bne.n	80235a2 <tiny_print+0x162>
		{
			ch = *( format++ );
 8023544:	68bb      	ldr	r3, [r7, #8]
 8023546:	1c5a      	adds	r2, r3, #1
 8023548:	60ba      	str	r2, [r7, #8]
 802354a:	781b      	ldrb	r3, [r3, #0]
 802354c:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 802354e:	697b      	ldr	r3, [r7, #20]
 8023550:	2b2a      	cmp	r3, #42	@ 0x2a
 8023552:	d120      	bne.n	8023596 <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8023554:	687b      	ldr	r3, [r7, #4]
 8023556:	1d1a      	adds	r2, r3, #4
 8023558:	607a      	str	r2, [r7, #4]
 802355a:	681a      	ldr	r2, [r3, #0]
 802355c:	68fb      	ldr	r3, [r7, #12]
 802355e:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8023560:	68bb      	ldr	r3, [r7, #8]
 8023562:	1c5a      	adds	r2, r3, #1
 8023564:	60ba      	str	r2, [r7, #8]
 8023566:	781b      	ldrb	r3, [r3, #0]
 8023568:	617b      	str	r3, [r7, #20]
 802356a:	e01a      	b.n	80235a2 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 802356c:	68fb      	ldr	r3, [r7, #12]
 802356e:	699a      	ldr	r2, [r3, #24]
 8023570:	4613      	mov	r3, r2
 8023572:	009b      	lsls	r3, r3, #2
 8023574:	4413      	add	r3, r2
 8023576:	005b      	lsls	r3, r3, #1
 8023578:	461a      	mov	r2, r3
 802357a:	68fb      	ldr	r3, [r7, #12]
 802357c:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 802357e:	68fb      	ldr	r3, [r7, #12]
 8023580:	699a      	ldr	r2, [r3, #24]
 8023582:	697b      	ldr	r3, [r7, #20]
 8023584:	3b30      	subs	r3, #48	@ 0x30
 8023586:	441a      	add	r2, r3
 8023588:	68fb      	ldr	r3, [r7, #12]
 802358a:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 802358c:	68bb      	ldr	r3, [r7, #8]
 802358e:	1c5a      	adds	r2, r3, #1
 8023590:	60ba      	str	r2, [r7, #8]
 8023592:	781b      	ldrb	r3, [r3, #0]
 8023594:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8023596:	697b      	ldr	r3, [r7, #20]
 8023598:	2b2f      	cmp	r3, #47	@ 0x2f
 802359a:	dd02      	ble.n	80235a2 <tiny_print+0x162>
 802359c:	697b      	ldr	r3, [r7, #20]
 802359e:	2b39      	cmp	r3, #57	@ 0x39
 80235a0:	dde4      	ble.n	802356c <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 80235a2:	68fb      	ldr	r3, [r7, #12]
 80235a4:	699b      	ldr	r3, [r3, #24]
 80235a6:	2b00      	cmp	r3, #0
 80235a8:	d104      	bne.n	80235b4 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 80235aa:	68fb      	ldr	r3, [r7, #12]
 80235ac:	699b      	ldr	r3, [r3, #24]
 80235ae:	1e5a      	subs	r2, r3, #1
 80235b0:	68fb      	ldr	r3, [r7, #12]
 80235b2:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 80235b4:	697b      	ldr	r3, [r7, #20]
 80235b6:	2b70      	cmp	r3, #112	@ 0x70
 80235b8:	d118      	bne.n	80235ec <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 80235ba:	68bb      	ldr	r3, [r7, #8]
 80235bc:	781b      	ldrb	r3, [r3, #0]
 80235be:	2b69      	cmp	r3, #105	@ 0x69
 80235c0:	d114      	bne.n	80235ec <tiny_print+0x1ac>
 80235c2:	68bb      	ldr	r3, [r7, #8]
 80235c4:	3301      	adds	r3, #1
 80235c6:	781b      	ldrb	r3, [r3, #0]
 80235c8:	2b70      	cmp	r3, #112	@ 0x70
 80235ca:	d10f      	bne.n	80235ec <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 80235cc:	68bb      	ldr	r3, [r7, #8]
 80235ce:	3302      	adds	r3, #2
 80235d0:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 80235d2:	687b      	ldr	r3, [r7, #4]
 80235d4:	1d1a      	adds	r2, r3, #4
 80235d6:	607a      	str	r2, [r7, #4]
 80235d8:	681b      	ldr	r3, [r3, #0]
 80235da:	4619      	mov	r1, r3
 80235dc:	68f8      	ldr	r0, [r7, #12]
 80235de:	f7ff feb7 	bl	8023350 <printIPv6>
 80235e2:	4603      	mov	r3, r0
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	f040 80ad 	bne.w	8023744 <tiny_print+0x304>
				{
					break;
 80235ea:	e0b8      	b.n	802375e <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 80235ec:	697b      	ldr	r3, [r7, #20]
 80235ee:	2b73      	cmp	r3, #115	@ 0x73
 80235f0:	d112      	bne.n	8023618 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	1d1a      	adds	r2, r3, #4
 80235f6:	607a      	str	r2, [r7, #4]
 80235f8:	681b      	ldr	r3, [r3, #0]
 80235fa:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 80235fc:	2c00      	cmp	r4, #0
 80235fe:	d001      	beq.n	8023604 <tiny_print+0x1c4>
 8023600:	4623      	mov	r3, r4
 8023602:	e000      	b.n	8023606 <tiny_print+0x1c6>
 8023604:	4b5a      	ldr	r3, [pc, #360]	@ (8023770 <tiny_print+0x330>)
 8023606:	4619      	mov	r1, r3
 8023608:	68f8      	ldr	r0, [r7, #12]
 802360a:	f7ff fd21 	bl	8023050 <prints>
 802360e:	4603      	mov	r3, r0
 8023610:	2b00      	cmp	r3, #0
 8023612:	f040 8099 	bne.w	8023748 <tiny_print+0x308>
			{
				break;
 8023616:	e0a2      	b.n	802375e <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8023618:	697b      	ldr	r3, [r7, #20]
 802361a:	2b63      	cmp	r3, #99	@ 0x63
 802361c:	d10f      	bne.n	802363e <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 802361e:	687b      	ldr	r3, [r7, #4]
 8023620:	1d1a      	adds	r2, r3, #4
 8023622:	607a      	str	r2, [r7, #4]
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	b2db      	uxtb	r3, r3
 8023628:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 802362a:	7c3b      	ldrb	r3, [r7, #16]
 802362c:	4619      	mov	r1, r3
 802362e:	68f8      	ldr	r0, [r7, #12]
 8023630:	f7ff fc87 	bl	8022f42 <strbuf_printchar>
 8023634:	4603      	mov	r3, r0
 8023636:	2b00      	cmp	r3, #0
 8023638:	f040 8088 	bne.w	802374c <tiny_print+0x30c>
			{
				return;
 802363c:	e095      	b.n	802376a <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 802363e:	697b      	ldr	r3, [r7, #20]
 8023640:	2b6c      	cmp	r3, #108	@ 0x6c
 8023642:	d109      	bne.n	8023658 <tiny_print+0x218>
		{
			ch = *( format++ );
 8023644:	68bb      	ldr	r3, [r7, #8]
 8023646:	1c5a      	adds	r2, r3, #1
 8023648:	60ba      	str	r2, [r7, #8]
 802364a:	781b      	ldrb	r3, [r3, #0]
 802364c:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 802364e:	68fa      	ldr	r2, [r7, #12]
 8023650:	7f93      	ldrb	r3, [r2, #30]
 8023652:	f043 0304 	orr.w	r3, r3, #4
 8023656:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8023658:	697b      	ldr	r3, [r7, #20]
 802365a:	2b4c      	cmp	r3, #76	@ 0x4c
 802365c:	d109      	bne.n	8023672 <tiny_print+0x232>
		{
			ch = *( format++ );
 802365e:	68bb      	ldr	r3, [r7, #8]
 8023660:	1c5a      	adds	r2, r3, #1
 8023662:	60ba      	str	r2, [r7, #8]
 8023664:	781b      	ldrb	r3, [r3, #0]
 8023666:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 8023668:	68fa      	ldr	r2, [r7, #12]
 802366a:	7f93      	ldrb	r3, [r2, #30]
 802366c:	f043 0308 	orr.w	r3, r3, #8
 8023670:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8023672:	68fb      	ldr	r3, [r7, #12]
 8023674:	220a      	movs	r2, #10
 8023676:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 8023678:	68fb      	ldr	r3, [r7, #12]
 802367a:	2261      	movs	r2, #97	@ 0x61
 802367c:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 802367e:	697b      	ldr	r3, [r7, #20]
 8023680:	2b64      	cmp	r3, #100	@ 0x64
 8023682:	d002      	beq.n	802368a <tiny_print+0x24a>
 8023684:	697b      	ldr	r3, [r7, #20]
 8023686:	2b75      	cmp	r3, #117	@ 0x75
 8023688:	d116      	bne.n	80236b8 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 802368a:	697b      	ldr	r3, [r7, #20]
 802368c:	2b64      	cmp	r3, #100	@ 0x64
 802368e:	bf0c      	ite	eq
 8023690:	2301      	moveq	r3, #1
 8023692:	2300      	movne	r3, #0
 8023694:	b2d9      	uxtb	r1, r3
 8023696:	68fa      	ldr	r2, [r7, #12]
 8023698:	7f93      	ldrb	r3, [r2, #30]
 802369a:	f361 0300 	bfi	r3, r1, #0, #1
 802369e:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 80236a0:	687b      	ldr	r3, [r7, #4]
 80236a2:	1d1a      	adds	r2, r3, #4
 80236a4:	607a      	str	r2, [r7, #4]
 80236a6:	681b      	ldr	r3, [r3, #0]
 80236a8:	4619      	mov	r1, r3
 80236aa:	68f8      	ldr	r0, [r7, #12]
 80236ac:	f7ff fd78 	bl	80231a0 <printi>
 80236b0:	4603      	mov	r3, r0
 80236b2:	2b00      	cmp	r3, #0
 80236b4:	d14c      	bne.n	8023750 <tiny_print+0x310>
			{
				break;
 80236b6:	e052      	b.n	802375e <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 80236b8:	68fb      	ldr	r3, [r7, #12]
 80236ba:	2210      	movs	r2, #16
 80236bc:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 80236be:	697b      	ldr	r3, [r7, #20]
 80236c0:	2b78      	cmp	r3, #120	@ 0x78
 80236c2:	d117      	bne.n	80236f4 <tiny_print+0x2b4>
 80236c4:	68bb      	ldr	r3, [r7, #8]
 80236c6:	781b      	ldrb	r3, [r3, #0]
 80236c8:	2b69      	cmp	r3, #105	@ 0x69
 80236ca:	d113      	bne.n	80236f4 <tiny_print+0x2b4>
 80236cc:	68bb      	ldr	r3, [r7, #8]
 80236ce:	3301      	adds	r3, #1
 80236d0:	781b      	ldrb	r3, [r3, #0]
 80236d2:	2b70      	cmp	r3, #112	@ 0x70
 80236d4:	d10e      	bne.n	80236f4 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 80236d6:	68bb      	ldr	r3, [r7, #8]
 80236d8:	3302      	adds	r3, #2
 80236da:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 80236dc:	687b      	ldr	r3, [r7, #4]
 80236de:	1d1a      	adds	r2, r3, #4
 80236e0:	607a      	str	r2, [r7, #4]
 80236e2:	681b      	ldr	r3, [r3, #0]
 80236e4:	4619      	mov	r1, r3
 80236e6:	68f8      	ldr	r0, [r7, #12]
 80236e8:	f7ff fde8 	bl	80232bc <printIp>
 80236ec:	4603      	mov	r3, r0
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	d130      	bne.n	8023754 <tiny_print+0x314>
			{
				break;
 80236f2:	e034      	b.n	802375e <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 80236f4:	697b      	ldr	r3, [r7, #20]
 80236f6:	2b78      	cmp	r3, #120	@ 0x78
 80236f8:	d009      	beq.n	802370e <tiny_print+0x2ce>
 80236fa:	697b      	ldr	r3, [r7, #20]
 80236fc:	2b58      	cmp	r3, #88	@ 0x58
 80236fe:	d006      	beq.n	802370e <tiny_print+0x2ce>
 8023700:	697b      	ldr	r3, [r7, #20]
 8023702:	2b70      	cmp	r3, #112	@ 0x70
 8023704:	d003      	beq.n	802370e <tiny_print+0x2ce>
 8023706:	697b      	ldr	r3, [r7, #20]
 8023708:	2b6f      	cmp	r3, #111	@ 0x6f
 802370a:	f47f ae9f 	bne.w	802344c <tiny_print+0xc>
		{
			if( ch == 'X' )
 802370e:	697b      	ldr	r3, [r7, #20]
 8023710:	2b58      	cmp	r3, #88	@ 0x58
 8023712:	d103      	bne.n	802371c <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8023714:	68fb      	ldr	r3, [r7, #12]
 8023716:	2241      	movs	r2, #65	@ 0x41
 8023718:	775a      	strb	r2, [r3, #29]
 802371a:	e005      	b.n	8023728 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 802371c:	697b      	ldr	r3, [r7, #20]
 802371e:	2b6f      	cmp	r3, #111	@ 0x6f
 8023720:	d102      	bne.n	8023728 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8023722:	68fb      	ldr	r3, [r7, #12]
 8023724:	2208      	movs	r2, #8
 8023726:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8023728:	687b      	ldr	r3, [r7, #4]
 802372a:	1d1a      	adds	r2, r3, #4
 802372c:	607a      	str	r2, [r7, #4]
 802372e:	681b      	ldr	r3, [r3, #0]
 8023730:	4619      	mov	r1, r3
 8023732:	68f8      	ldr	r0, [r7, #12]
 8023734:	f7ff fd34 	bl	80231a0 <printi>
 8023738:	4603      	mov	r3, r0
 802373a:	2b00      	cmp	r3, #0
 802373c:	d00e      	beq.n	802375c <tiny_print+0x31c>
			{
				break;
			}
			continue;
 802373e:	e00a      	b.n	8023756 <tiny_print+0x316>
			continue;
 8023740:	bf00      	nop
 8023742:	e683      	b.n	802344c <tiny_print+0xc>
				continue;
 8023744:	bf00      	nop
 8023746:	e681      	b.n	802344c <tiny_print+0xc>
			continue;
 8023748:	bf00      	nop
 802374a:	e67f      	b.n	802344c <tiny_print+0xc>
			continue;
 802374c:	bf00      	nop
 802374e:	e67d      	b.n	802344c <tiny_print+0xc>
			continue;
 8023750:	bf00      	nop
 8023752:	e67b      	b.n	802344c <tiny_print+0xc>
			continue;
 8023754:	bf00      	nop
	{
 8023756:	e679      	b.n	802344c <tiny_print+0xc>
			break;
 8023758:	bf00      	nop
 802375a:	e000      	b.n	802375e <tiny_print+0x31e>
				break;
 802375c:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 802375e:	2100      	movs	r1, #0
 8023760:	68f8      	ldr	r0, [r7, #12]
 8023762:	f7ff fbee 	bl	8022f42 <strbuf_printchar>
 8023766:	e000      	b.n	802376a <tiny_print+0x32a>
					return;
 8023768:	bf00      	nop
}
 802376a:	371c      	adds	r7, #28
 802376c:	46bd      	mov	sp, r7
 802376e:	bd90      	pop	{r4, r7, pc}
 8023770:	08027e34 	.word	0x08027e34

08023774 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 8023774:	b580      	push	{r7, lr}
 8023776:	b08c      	sub	sp, #48	@ 0x30
 8023778:	af00      	add	r7, sp, #0
 802377a:	60f8      	str	r0, [r7, #12]
 802377c:	60b9      	str	r1, [r7, #8]
 802377e:	607a      	str	r2, [r7, #4]
 8023780:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8023782:	68fa      	ldr	r2, [r7, #12]
 8023784:	68bb      	ldr	r3, [r7, #8]
 8023786:	441a      	add	r2, r3
 8023788:	f107 0310 	add.w	r3, r7, #16
 802378c:	68f9      	ldr	r1, [r7, #12]
 802378e:	4618      	mov	r0, r3
 8023790:	f7ff fbb9 	bl	8022f06 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023794:	f107 0310 	add.w	r3, r7, #16
 8023798:	683a      	ldr	r2, [r7, #0]
 802379a:	6879      	ldr	r1, [r7, #4]
 802379c:	4618      	mov	r0, r3
 802379e:	f7ff fe4f 	bl	8023440 <tiny_print>

	return strBuf.curLen;
 80237a2:	69fb      	ldr	r3, [r7, #28]
}
 80237a4:	4618      	mov	r0, r3
 80237a6:	3730      	adds	r7, #48	@ 0x30
 80237a8:	46bd      	mov	sp, r7
 80237aa:	bd80      	pop	{r7, pc}

080237ac <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 80237ac:	b40c      	push	{r2, r3}
 80237ae:	b580      	push	{r7, lr}
 80237b0:	b08c      	sub	sp, #48	@ 0x30
 80237b2:	af00      	add	r7, sp, #0
 80237b4:	6078      	str	r0, [r7, #4]
 80237b6:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 80237b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80237bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80237be:	687a      	ldr	r2, [r7, #4]
 80237c0:	683b      	ldr	r3, [r7, #0]
 80237c2:	441a      	add	r2, r3
 80237c4:	f107 030c 	add.w	r3, r7, #12
 80237c8:	6879      	ldr	r1, [r7, #4]
 80237ca:	4618      	mov	r0, r3
 80237cc:	f7ff fb9b 	bl	8022f06 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80237d0:	f107 030c 	add.w	r3, r7, #12
 80237d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80237d6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80237d8:	4618      	mov	r0, r3
 80237da:	f7ff fe31 	bl	8023440 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 80237de:	69bb      	ldr	r3, [r7, #24]
}
 80237e0:	4618      	mov	r0, r3
 80237e2:	3730      	adds	r7, #48	@ 0x30
 80237e4:	46bd      	mov	sp, r7
 80237e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80237ea:	b002      	add	sp, #8
 80237ec:	4770      	bx	lr

080237ee <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 80237ee:	b40e      	push	{r1, r2, r3}
 80237f0:	b580      	push	{r7, lr}
 80237f2:	b08d      	sub	sp, #52	@ 0x34
 80237f4:	af00      	add	r7, sp, #0
 80237f6:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 80237f8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80237fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 80237fe:	687b      	ldr	r3, [r7, #4]
 8023800:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8023804:	f107 030c 	add.w	r3, r7, #12
 8023808:	6879      	ldr	r1, [r7, #4]
 802380a:	4618      	mov	r0, r3
 802380c:	f7ff fb7b 	bl	8022f06 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8023810:	f107 030c 	add.w	r3, r7, #12
 8023814:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023816:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8023818:	4618      	mov	r0, r3
 802381a:	f7ff fe11 	bl	8023440 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 802381e:	69bb      	ldr	r3, [r7, #24]
}
 8023820:	4618      	mov	r0, r3
 8023822:	3734      	adds	r7, #52	@ 0x34
 8023824:	46bd      	mov	sp, r7
 8023826:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 802382a:	b003      	add	sp, #12
 802382c:	4770      	bx	lr
	...

08023830 <rand>:
 8023830:	4b16      	ldr	r3, [pc, #88]	@ (802388c <rand+0x5c>)
 8023832:	b510      	push	{r4, lr}
 8023834:	681c      	ldr	r4, [r3, #0]
 8023836:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8023838:	b9b3      	cbnz	r3, 8023868 <rand+0x38>
 802383a:	2018      	movs	r0, #24
 802383c:	f000 fa82 	bl	8023d44 <malloc>
 8023840:	4602      	mov	r2, r0
 8023842:	6320      	str	r0, [r4, #48]	@ 0x30
 8023844:	b920      	cbnz	r0, 8023850 <rand+0x20>
 8023846:	4b12      	ldr	r3, [pc, #72]	@ (8023890 <rand+0x60>)
 8023848:	4812      	ldr	r0, [pc, #72]	@ (8023894 <rand+0x64>)
 802384a:	2152      	movs	r1, #82	@ 0x52
 802384c:	f000 fa12 	bl	8023c74 <__assert_func>
 8023850:	4911      	ldr	r1, [pc, #68]	@ (8023898 <rand+0x68>)
 8023852:	4b12      	ldr	r3, [pc, #72]	@ (802389c <rand+0x6c>)
 8023854:	e9c0 1300 	strd	r1, r3, [r0]
 8023858:	4b11      	ldr	r3, [pc, #68]	@ (80238a0 <rand+0x70>)
 802385a:	6083      	str	r3, [r0, #8]
 802385c:	230b      	movs	r3, #11
 802385e:	8183      	strh	r3, [r0, #12]
 8023860:	2100      	movs	r1, #0
 8023862:	2001      	movs	r0, #1
 8023864:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8023868:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802386a:	480e      	ldr	r0, [pc, #56]	@ (80238a4 <rand+0x74>)
 802386c:	690b      	ldr	r3, [r1, #16]
 802386e:	694c      	ldr	r4, [r1, #20]
 8023870:	4a0d      	ldr	r2, [pc, #52]	@ (80238a8 <rand+0x78>)
 8023872:	4358      	muls	r0, r3
 8023874:	fb02 0004 	mla	r0, r2, r4, r0
 8023878:	fba3 3202 	umull	r3, r2, r3, r2
 802387c:	3301      	adds	r3, #1
 802387e:	eb40 0002 	adc.w	r0, r0, r2
 8023882:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8023886:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802388a:	bd10      	pop	{r4, pc}
 802388c:	20000038 	.word	0x20000038
 8023890:	08028000 	.word	0x08028000
 8023894:	08028017 	.word	0x08028017
 8023898:	abcd330e 	.word	0xabcd330e
 802389c:	e66d1234 	.word	0xe66d1234
 80238a0:	0005deec 	.word	0x0005deec
 80238a4:	5851f42d 	.word	0x5851f42d
 80238a8:	4c957f2d 	.word	0x4c957f2d

080238ac <std>:
 80238ac:	2300      	movs	r3, #0
 80238ae:	b510      	push	{r4, lr}
 80238b0:	4604      	mov	r4, r0
 80238b2:	e9c0 3300 	strd	r3, r3, [r0]
 80238b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80238ba:	6083      	str	r3, [r0, #8]
 80238bc:	8181      	strh	r1, [r0, #12]
 80238be:	6643      	str	r3, [r0, #100]	@ 0x64
 80238c0:	81c2      	strh	r2, [r0, #14]
 80238c2:	6183      	str	r3, [r0, #24]
 80238c4:	4619      	mov	r1, r3
 80238c6:	2208      	movs	r2, #8
 80238c8:	305c      	adds	r0, #92	@ 0x5c
 80238ca:	f7ff fa6c 	bl	8022da6 <memset>
 80238ce:	4b0d      	ldr	r3, [pc, #52]	@ (8023904 <std+0x58>)
 80238d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80238d2:	4b0d      	ldr	r3, [pc, #52]	@ (8023908 <std+0x5c>)
 80238d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80238d6:	4b0d      	ldr	r3, [pc, #52]	@ (802390c <std+0x60>)
 80238d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80238da:	4b0d      	ldr	r3, [pc, #52]	@ (8023910 <std+0x64>)
 80238dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80238de:	4b0d      	ldr	r3, [pc, #52]	@ (8023914 <std+0x68>)
 80238e0:	6224      	str	r4, [r4, #32]
 80238e2:	429c      	cmp	r4, r3
 80238e4:	d006      	beq.n	80238f4 <std+0x48>
 80238e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80238ea:	4294      	cmp	r4, r2
 80238ec:	d002      	beq.n	80238f4 <std+0x48>
 80238ee:	33d0      	adds	r3, #208	@ 0xd0
 80238f0:	429c      	cmp	r4, r3
 80238f2:	d105      	bne.n	8023900 <std+0x54>
 80238f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80238f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80238fc:	f000 b9b6 	b.w	8023c6c <__retarget_lock_init_recursive>
 8023900:	bd10      	pop	{r4, pc}
 8023902:	bf00      	nop
 8023904:	08023a31 	.word	0x08023a31
 8023908:	08023a53 	.word	0x08023a53
 802390c:	08023a8b 	.word	0x08023a8b
 8023910:	08023aaf 	.word	0x08023aaf
 8023914:	2000273c 	.word	0x2000273c

08023918 <stdio_exit_handler>:
 8023918:	4a02      	ldr	r2, [pc, #8]	@ (8023924 <stdio_exit_handler+0xc>)
 802391a:	4903      	ldr	r1, [pc, #12]	@ (8023928 <stdio_exit_handler+0x10>)
 802391c:	4803      	ldr	r0, [pc, #12]	@ (802392c <stdio_exit_handler+0x14>)
 802391e:	f000 b869 	b.w	80239f4 <_fwalk_sglue>
 8023922:	bf00      	nop
 8023924:	2000002c 	.word	0x2000002c
 8023928:	08023fb9 	.word	0x08023fb9
 802392c:	2000003c 	.word	0x2000003c

08023930 <cleanup_stdio>:
 8023930:	6841      	ldr	r1, [r0, #4]
 8023932:	4b0c      	ldr	r3, [pc, #48]	@ (8023964 <cleanup_stdio+0x34>)
 8023934:	4299      	cmp	r1, r3
 8023936:	b510      	push	{r4, lr}
 8023938:	4604      	mov	r4, r0
 802393a:	d001      	beq.n	8023940 <cleanup_stdio+0x10>
 802393c:	f000 fb3c 	bl	8023fb8 <_fflush_r>
 8023940:	68a1      	ldr	r1, [r4, #8]
 8023942:	4b09      	ldr	r3, [pc, #36]	@ (8023968 <cleanup_stdio+0x38>)
 8023944:	4299      	cmp	r1, r3
 8023946:	d002      	beq.n	802394e <cleanup_stdio+0x1e>
 8023948:	4620      	mov	r0, r4
 802394a:	f000 fb35 	bl	8023fb8 <_fflush_r>
 802394e:	68e1      	ldr	r1, [r4, #12]
 8023950:	4b06      	ldr	r3, [pc, #24]	@ (802396c <cleanup_stdio+0x3c>)
 8023952:	4299      	cmp	r1, r3
 8023954:	d004      	beq.n	8023960 <cleanup_stdio+0x30>
 8023956:	4620      	mov	r0, r4
 8023958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802395c:	f000 bb2c 	b.w	8023fb8 <_fflush_r>
 8023960:	bd10      	pop	{r4, pc}
 8023962:	bf00      	nop
 8023964:	2000273c 	.word	0x2000273c
 8023968:	200027a4 	.word	0x200027a4
 802396c:	2000280c 	.word	0x2000280c

08023970 <global_stdio_init.part.0>:
 8023970:	b510      	push	{r4, lr}
 8023972:	4b0b      	ldr	r3, [pc, #44]	@ (80239a0 <global_stdio_init.part.0+0x30>)
 8023974:	4c0b      	ldr	r4, [pc, #44]	@ (80239a4 <global_stdio_init.part.0+0x34>)
 8023976:	4a0c      	ldr	r2, [pc, #48]	@ (80239a8 <global_stdio_init.part.0+0x38>)
 8023978:	601a      	str	r2, [r3, #0]
 802397a:	4620      	mov	r0, r4
 802397c:	2200      	movs	r2, #0
 802397e:	2104      	movs	r1, #4
 8023980:	f7ff ff94 	bl	80238ac <std>
 8023984:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8023988:	2201      	movs	r2, #1
 802398a:	2109      	movs	r1, #9
 802398c:	f7ff ff8e 	bl	80238ac <std>
 8023990:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023994:	2202      	movs	r2, #2
 8023996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802399a:	2112      	movs	r1, #18
 802399c:	f7ff bf86 	b.w	80238ac <std>
 80239a0:	20002874 	.word	0x20002874
 80239a4:	2000273c 	.word	0x2000273c
 80239a8:	08023919 	.word	0x08023919

080239ac <__sfp_lock_acquire>:
 80239ac:	4801      	ldr	r0, [pc, #4]	@ (80239b4 <__sfp_lock_acquire+0x8>)
 80239ae:	f000 b95e 	b.w	8023c6e <__retarget_lock_acquire_recursive>
 80239b2:	bf00      	nop
 80239b4:	2000287d 	.word	0x2000287d

080239b8 <__sfp_lock_release>:
 80239b8:	4801      	ldr	r0, [pc, #4]	@ (80239c0 <__sfp_lock_release+0x8>)
 80239ba:	f000 b959 	b.w	8023c70 <__retarget_lock_release_recursive>
 80239be:	bf00      	nop
 80239c0:	2000287d 	.word	0x2000287d

080239c4 <__sinit>:
 80239c4:	b510      	push	{r4, lr}
 80239c6:	4604      	mov	r4, r0
 80239c8:	f7ff fff0 	bl	80239ac <__sfp_lock_acquire>
 80239cc:	6a23      	ldr	r3, [r4, #32]
 80239ce:	b11b      	cbz	r3, 80239d8 <__sinit+0x14>
 80239d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80239d4:	f7ff bff0 	b.w	80239b8 <__sfp_lock_release>
 80239d8:	4b04      	ldr	r3, [pc, #16]	@ (80239ec <__sinit+0x28>)
 80239da:	6223      	str	r3, [r4, #32]
 80239dc:	4b04      	ldr	r3, [pc, #16]	@ (80239f0 <__sinit+0x2c>)
 80239de:	681b      	ldr	r3, [r3, #0]
 80239e0:	2b00      	cmp	r3, #0
 80239e2:	d1f5      	bne.n	80239d0 <__sinit+0xc>
 80239e4:	f7ff ffc4 	bl	8023970 <global_stdio_init.part.0>
 80239e8:	e7f2      	b.n	80239d0 <__sinit+0xc>
 80239ea:	bf00      	nop
 80239ec:	08023931 	.word	0x08023931
 80239f0:	20002874 	.word	0x20002874

080239f4 <_fwalk_sglue>:
 80239f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80239f8:	4607      	mov	r7, r0
 80239fa:	4688      	mov	r8, r1
 80239fc:	4614      	mov	r4, r2
 80239fe:	2600      	movs	r6, #0
 8023a00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023a04:	f1b9 0901 	subs.w	r9, r9, #1
 8023a08:	d505      	bpl.n	8023a16 <_fwalk_sglue+0x22>
 8023a0a:	6824      	ldr	r4, [r4, #0]
 8023a0c:	2c00      	cmp	r4, #0
 8023a0e:	d1f7      	bne.n	8023a00 <_fwalk_sglue+0xc>
 8023a10:	4630      	mov	r0, r6
 8023a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023a16:	89ab      	ldrh	r3, [r5, #12]
 8023a18:	2b01      	cmp	r3, #1
 8023a1a:	d907      	bls.n	8023a2c <_fwalk_sglue+0x38>
 8023a1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023a20:	3301      	adds	r3, #1
 8023a22:	d003      	beq.n	8023a2c <_fwalk_sglue+0x38>
 8023a24:	4629      	mov	r1, r5
 8023a26:	4638      	mov	r0, r7
 8023a28:	47c0      	blx	r8
 8023a2a:	4306      	orrs	r6, r0
 8023a2c:	3568      	adds	r5, #104	@ 0x68
 8023a2e:	e7e9      	b.n	8023a04 <_fwalk_sglue+0x10>

08023a30 <__sread>:
 8023a30:	b510      	push	{r4, lr}
 8023a32:	460c      	mov	r4, r1
 8023a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a38:	f000 f8ca 	bl	8023bd0 <_read_r>
 8023a3c:	2800      	cmp	r0, #0
 8023a3e:	bfab      	itete	ge
 8023a40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8023a42:	89a3      	ldrhlt	r3, [r4, #12]
 8023a44:	181b      	addge	r3, r3, r0
 8023a46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8023a4a:	bfac      	ite	ge
 8023a4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8023a4e:	81a3      	strhlt	r3, [r4, #12]
 8023a50:	bd10      	pop	{r4, pc}

08023a52 <__swrite>:
 8023a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023a56:	461f      	mov	r7, r3
 8023a58:	898b      	ldrh	r3, [r1, #12]
 8023a5a:	05db      	lsls	r3, r3, #23
 8023a5c:	4605      	mov	r5, r0
 8023a5e:	460c      	mov	r4, r1
 8023a60:	4616      	mov	r6, r2
 8023a62:	d505      	bpl.n	8023a70 <__swrite+0x1e>
 8023a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a68:	2302      	movs	r3, #2
 8023a6a:	2200      	movs	r2, #0
 8023a6c:	f000 f89e 	bl	8023bac <_lseek_r>
 8023a70:	89a3      	ldrh	r3, [r4, #12]
 8023a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8023a7a:	81a3      	strh	r3, [r4, #12]
 8023a7c:	4632      	mov	r2, r6
 8023a7e:	463b      	mov	r3, r7
 8023a80:	4628      	mov	r0, r5
 8023a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023a86:	f000 b8b5 	b.w	8023bf4 <_write_r>

08023a8a <__sseek>:
 8023a8a:	b510      	push	{r4, lr}
 8023a8c:	460c      	mov	r4, r1
 8023a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023a92:	f000 f88b 	bl	8023bac <_lseek_r>
 8023a96:	1c43      	adds	r3, r0, #1
 8023a98:	89a3      	ldrh	r3, [r4, #12]
 8023a9a:	bf15      	itete	ne
 8023a9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023a9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023aa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8023aa6:	81a3      	strheq	r3, [r4, #12]
 8023aa8:	bf18      	it	ne
 8023aaa:	81a3      	strhne	r3, [r4, #12]
 8023aac:	bd10      	pop	{r4, pc}

08023aae <__sclose>:
 8023aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ab2:	f000 b86b 	b.w	8023b8c <_close_r>

08023ab6 <memcmp>:
 8023ab6:	b510      	push	{r4, lr}
 8023ab8:	3901      	subs	r1, #1
 8023aba:	4402      	add	r2, r0
 8023abc:	4290      	cmp	r0, r2
 8023abe:	d101      	bne.n	8023ac4 <memcmp+0xe>
 8023ac0:	2000      	movs	r0, #0
 8023ac2:	e005      	b.n	8023ad0 <memcmp+0x1a>
 8023ac4:	7803      	ldrb	r3, [r0, #0]
 8023ac6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023aca:	42a3      	cmp	r3, r4
 8023acc:	d001      	beq.n	8023ad2 <memcmp+0x1c>
 8023ace:	1b18      	subs	r0, r3, r4
 8023ad0:	bd10      	pop	{r4, pc}
 8023ad2:	3001      	adds	r0, #1
 8023ad4:	e7f2      	b.n	8023abc <memcmp+0x6>

08023ad6 <memmove>:
 8023ad6:	4288      	cmp	r0, r1
 8023ad8:	b510      	push	{r4, lr}
 8023ada:	eb01 0402 	add.w	r4, r1, r2
 8023ade:	d902      	bls.n	8023ae6 <memmove+0x10>
 8023ae0:	4284      	cmp	r4, r0
 8023ae2:	4623      	mov	r3, r4
 8023ae4:	d807      	bhi.n	8023af6 <memmove+0x20>
 8023ae6:	1e43      	subs	r3, r0, #1
 8023ae8:	42a1      	cmp	r1, r4
 8023aea:	d008      	beq.n	8023afe <memmove+0x28>
 8023aec:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023af0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023af4:	e7f8      	b.n	8023ae8 <memmove+0x12>
 8023af6:	4402      	add	r2, r0
 8023af8:	4601      	mov	r1, r0
 8023afa:	428a      	cmp	r2, r1
 8023afc:	d100      	bne.n	8023b00 <memmove+0x2a>
 8023afe:	bd10      	pop	{r4, pc}
 8023b00:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023b04:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023b08:	e7f7      	b.n	8023afa <memmove+0x24>
	...

08023b0c <strcasecmp>:
 8023b0c:	b530      	push	{r4, r5, lr}
 8023b0e:	4d0b      	ldr	r5, [pc, #44]	@ (8023b3c <strcasecmp+0x30>)
 8023b10:	4604      	mov	r4, r0
 8023b12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8023b16:	5cea      	ldrb	r2, [r5, r3]
 8023b18:	f002 0203 	and.w	r2, r2, #3
 8023b1c:	2a01      	cmp	r2, #1
 8023b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023b22:	5ca8      	ldrb	r0, [r5, r2]
 8023b24:	f000 0003 	and.w	r0, r0, #3
 8023b28:	bf08      	it	eq
 8023b2a:	3320      	addeq	r3, #32
 8023b2c:	2801      	cmp	r0, #1
 8023b2e:	bf08      	it	eq
 8023b30:	3220      	addeq	r2, #32
 8023b32:	1a98      	subs	r0, r3, r2
 8023b34:	d101      	bne.n	8023b3a <strcasecmp+0x2e>
 8023b36:	2a00      	cmp	r2, #0
 8023b38:	d1eb      	bne.n	8023b12 <strcasecmp+0x6>
 8023b3a:	bd30      	pop	{r4, r5, pc}
 8023b3c:	080280ac 	.word	0x080280ac

08023b40 <strncmp>:
 8023b40:	b510      	push	{r4, lr}
 8023b42:	b16a      	cbz	r2, 8023b60 <strncmp+0x20>
 8023b44:	3901      	subs	r1, #1
 8023b46:	1884      	adds	r4, r0, r2
 8023b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023b4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8023b50:	429a      	cmp	r2, r3
 8023b52:	d103      	bne.n	8023b5c <strncmp+0x1c>
 8023b54:	42a0      	cmp	r0, r4
 8023b56:	d001      	beq.n	8023b5c <strncmp+0x1c>
 8023b58:	2a00      	cmp	r2, #0
 8023b5a:	d1f5      	bne.n	8023b48 <strncmp+0x8>
 8023b5c:	1ad0      	subs	r0, r2, r3
 8023b5e:	bd10      	pop	{r4, pc}
 8023b60:	4610      	mov	r0, r2
 8023b62:	e7fc      	b.n	8023b5e <strncmp+0x1e>

08023b64 <strncpy>:
 8023b64:	b510      	push	{r4, lr}
 8023b66:	3901      	subs	r1, #1
 8023b68:	4603      	mov	r3, r0
 8023b6a:	b132      	cbz	r2, 8023b7a <strncpy+0x16>
 8023b6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023b70:	f803 4b01 	strb.w	r4, [r3], #1
 8023b74:	3a01      	subs	r2, #1
 8023b76:	2c00      	cmp	r4, #0
 8023b78:	d1f7      	bne.n	8023b6a <strncpy+0x6>
 8023b7a:	441a      	add	r2, r3
 8023b7c:	2100      	movs	r1, #0
 8023b7e:	4293      	cmp	r3, r2
 8023b80:	d100      	bne.n	8023b84 <strncpy+0x20>
 8023b82:	bd10      	pop	{r4, pc}
 8023b84:	f803 1b01 	strb.w	r1, [r3], #1
 8023b88:	e7f9      	b.n	8023b7e <strncpy+0x1a>
	...

08023b8c <_close_r>:
 8023b8c:	b538      	push	{r3, r4, r5, lr}
 8023b8e:	4d06      	ldr	r5, [pc, #24]	@ (8023ba8 <_close_r+0x1c>)
 8023b90:	2300      	movs	r3, #0
 8023b92:	4604      	mov	r4, r0
 8023b94:	4608      	mov	r0, r1
 8023b96:	602b      	str	r3, [r5, #0]
 8023b98:	f7df fae8 	bl	800316c <_close>
 8023b9c:	1c43      	adds	r3, r0, #1
 8023b9e:	d102      	bne.n	8023ba6 <_close_r+0x1a>
 8023ba0:	682b      	ldr	r3, [r5, #0]
 8023ba2:	b103      	cbz	r3, 8023ba6 <_close_r+0x1a>
 8023ba4:	6023      	str	r3, [r4, #0]
 8023ba6:	bd38      	pop	{r3, r4, r5, pc}
 8023ba8:	20002878 	.word	0x20002878

08023bac <_lseek_r>:
 8023bac:	b538      	push	{r3, r4, r5, lr}
 8023bae:	4d07      	ldr	r5, [pc, #28]	@ (8023bcc <_lseek_r+0x20>)
 8023bb0:	4604      	mov	r4, r0
 8023bb2:	4608      	mov	r0, r1
 8023bb4:	4611      	mov	r1, r2
 8023bb6:	2200      	movs	r2, #0
 8023bb8:	602a      	str	r2, [r5, #0]
 8023bba:	461a      	mov	r2, r3
 8023bbc:	f7df fafd 	bl	80031ba <_lseek>
 8023bc0:	1c43      	adds	r3, r0, #1
 8023bc2:	d102      	bne.n	8023bca <_lseek_r+0x1e>
 8023bc4:	682b      	ldr	r3, [r5, #0]
 8023bc6:	b103      	cbz	r3, 8023bca <_lseek_r+0x1e>
 8023bc8:	6023      	str	r3, [r4, #0]
 8023bca:	bd38      	pop	{r3, r4, r5, pc}
 8023bcc:	20002878 	.word	0x20002878

08023bd0 <_read_r>:
 8023bd0:	b538      	push	{r3, r4, r5, lr}
 8023bd2:	4d07      	ldr	r5, [pc, #28]	@ (8023bf0 <_read_r+0x20>)
 8023bd4:	4604      	mov	r4, r0
 8023bd6:	4608      	mov	r0, r1
 8023bd8:	4611      	mov	r1, r2
 8023bda:	2200      	movs	r2, #0
 8023bdc:	602a      	str	r2, [r5, #0]
 8023bde:	461a      	mov	r2, r3
 8023be0:	f7df fa8b 	bl	80030fa <_read>
 8023be4:	1c43      	adds	r3, r0, #1
 8023be6:	d102      	bne.n	8023bee <_read_r+0x1e>
 8023be8:	682b      	ldr	r3, [r5, #0]
 8023bea:	b103      	cbz	r3, 8023bee <_read_r+0x1e>
 8023bec:	6023      	str	r3, [r4, #0]
 8023bee:	bd38      	pop	{r3, r4, r5, pc}
 8023bf0:	20002878 	.word	0x20002878

08023bf4 <_write_r>:
 8023bf4:	b538      	push	{r3, r4, r5, lr}
 8023bf6:	4d07      	ldr	r5, [pc, #28]	@ (8023c14 <_write_r+0x20>)
 8023bf8:	4604      	mov	r4, r0
 8023bfa:	4608      	mov	r0, r1
 8023bfc:	4611      	mov	r1, r2
 8023bfe:	2200      	movs	r2, #0
 8023c00:	602a      	str	r2, [r5, #0]
 8023c02:	461a      	mov	r2, r3
 8023c04:	f7df fa96 	bl	8003134 <_write>
 8023c08:	1c43      	adds	r3, r0, #1
 8023c0a:	d102      	bne.n	8023c12 <_write_r+0x1e>
 8023c0c:	682b      	ldr	r3, [r5, #0]
 8023c0e:	b103      	cbz	r3, 8023c12 <_write_r+0x1e>
 8023c10:	6023      	str	r3, [r4, #0]
 8023c12:	bd38      	pop	{r3, r4, r5, pc}
 8023c14:	20002878 	.word	0x20002878

08023c18 <__errno>:
 8023c18:	4b01      	ldr	r3, [pc, #4]	@ (8023c20 <__errno+0x8>)
 8023c1a:	6818      	ldr	r0, [r3, #0]
 8023c1c:	4770      	bx	lr
 8023c1e:	bf00      	nop
 8023c20:	20000038 	.word	0x20000038

08023c24 <__libc_init_array>:
 8023c24:	b570      	push	{r4, r5, r6, lr}
 8023c26:	4d0d      	ldr	r5, [pc, #52]	@ (8023c5c <__libc_init_array+0x38>)
 8023c28:	4c0d      	ldr	r4, [pc, #52]	@ (8023c60 <__libc_init_array+0x3c>)
 8023c2a:	1b64      	subs	r4, r4, r5
 8023c2c:	10a4      	asrs	r4, r4, #2
 8023c2e:	2600      	movs	r6, #0
 8023c30:	42a6      	cmp	r6, r4
 8023c32:	d109      	bne.n	8023c48 <__libc_init_array+0x24>
 8023c34:	4d0b      	ldr	r5, [pc, #44]	@ (8023c64 <__libc_init_array+0x40>)
 8023c36:	4c0c      	ldr	r4, [pc, #48]	@ (8023c68 <__libc_init_array+0x44>)
 8023c38:	f000 fe3a 	bl	80248b0 <_init>
 8023c3c:	1b64      	subs	r4, r4, r5
 8023c3e:	10a4      	asrs	r4, r4, #2
 8023c40:	2600      	movs	r6, #0
 8023c42:	42a6      	cmp	r6, r4
 8023c44:	d105      	bne.n	8023c52 <__libc_init_array+0x2e>
 8023c46:	bd70      	pop	{r4, r5, r6, pc}
 8023c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8023c4c:	4798      	blx	r3
 8023c4e:	3601      	adds	r6, #1
 8023c50:	e7ee      	b.n	8023c30 <__libc_init_array+0xc>
 8023c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8023c56:	4798      	blx	r3
 8023c58:	3601      	adds	r6, #1
 8023c5a:	e7f2      	b.n	8023c42 <__libc_init_array+0x1e>
 8023c5c:	080281e8 	.word	0x080281e8
 8023c60:	080281e8 	.word	0x080281e8
 8023c64:	080281e8 	.word	0x080281e8
 8023c68:	080281ec 	.word	0x080281ec

08023c6c <__retarget_lock_init_recursive>:
 8023c6c:	4770      	bx	lr

08023c6e <__retarget_lock_acquire_recursive>:
 8023c6e:	4770      	bx	lr

08023c70 <__retarget_lock_release_recursive>:
 8023c70:	4770      	bx	lr
	...

08023c74 <__assert_func>:
 8023c74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8023c76:	4614      	mov	r4, r2
 8023c78:	461a      	mov	r2, r3
 8023c7a:	4b09      	ldr	r3, [pc, #36]	@ (8023ca0 <__assert_func+0x2c>)
 8023c7c:	681b      	ldr	r3, [r3, #0]
 8023c7e:	4605      	mov	r5, r0
 8023c80:	68d8      	ldr	r0, [r3, #12]
 8023c82:	b954      	cbnz	r4, 8023c9a <__assert_func+0x26>
 8023c84:	4b07      	ldr	r3, [pc, #28]	@ (8023ca4 <__assert_func+0x30>)
 8023c86:	461c      	mov	r4, r3
 8023c88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8023c8c:	9100      	str	r1, [sp, #0]
 8023c8e:	462b      	mov	r3, r5
 8023c90:	4905      	ldr	r1, [pc, #20]	@ (8023ca8 <__assert_func+0x34>)
 8023c92:	f000 f9b9 	bl	8024008 <fiprintf>
 8023c96:	f000 f9d9 	bl	802404c <abort>
 8023c9a:	4b04      	ldr	r3, [pc, #16]	@ (8023cac <__assert_func+0x38>)
 8023c9c:	e7f4      	b.n	8023c88 <__assert_func+0x14>
 8023c9e:	bf00      	nop
 8023ca0:	20000038 	.word	0x20000038
 8023ca4:	080280aa 	.word	0x080280aa
 8023ca8:	0802807c 	.word	0x0802807c
 8023cac:	0802806f 	.word	0x0802806f

08023cb0 <_free_r>:
 8023cb0:	b538      	push	{r3, r4, r5, lr}
 8023cb2:	4605      	mov	r5, r0
 8023cb4:	2900      	cmp	r1, #0
 8023cb6:	d041      	beq.n	8023d3c <_free_r+0x8c>
 8023cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023cbc:	1f0c      	subs	r4, r1, #4
 8023cbe:	2b00      	cmp	r3, #0
 8023cc0:	bfb8      	it	lt
 8023cc2:	18e4      	addlt	r4, r4, r3
 8023cc4:	f000 f8e8 	bl	8023e98 <__malloc_lock>
 8023cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8023d40 <_free_r+0x90>)
 8023cca:	6813      	ldr	r3, [r2, #0]
 8023ccc:	b933      	cbnz	r3, 8023cdc <_free_r+0x2c>
 8023cce:	6063      	str	r3, [r4, #4]
 8023cd0:	6014      	str	r4, [r2, #0]
 8023cd2:	4628      	mov	r0, r5
 8023cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023cd8:	f000 b8e4 	b.w	8023ea4 <__malloc_unlock>
 8023cdc:	42a3      	cmp	r3, r4
 8023cde:	d908      	bls.n	8023cf2 <_free_r+0x42>
 8023ce0:	6820      	ldr	r0, [r4, #0]
 8023ce2:	1821      	adds	r1, r4, r0
 8023ce4:	428b      	cmp	r3, r1
 8023ce6:	bf01      	itttt	eq
 8023ce8:	6819      	ldreq	r1, [r3, #0]
 8023cea:	685b      	ldreq	r3, [r3, #4]
 8023cec:	1809      	addeq	r1, r1, r0
 8023cee:	6021      	streq	r1, [r4, #0]
 8023cf0:	e7ed      	b.n	8023cce <_free_r+0x1e>
 8023cf2:	461a      	mov	r2, r3
 8023cf4:	685b      	ldr	r3, [r3, #4]
 8023cf6:	b10b      	cbz	r3, 8023cfc <_free_r+0x4c>
 8023cf8:	42a3      	cmp	r3, r4
 8023cfa:	d9fa      	bls.n	8023cf2 <_free_r+0x42>
 8023cfc:	6811      	ldr	r1, [r2, #0]
 8023cfe:	1850      	adds	r0, r2, r1
 8023d00:	42a0      	cmp	r0, r4
 8023d02:	d10b      	bne.n	8023d1c <_free_r+0x6c>
 8023d04:	6820      	ldr	r0, [r4, #0]
 8023d06:	4401      	add	r1, r0
 8023d08:	1850      	adds	r0, r2, r1
 8023d0a:	4283      	cmp	r3, r0
 8023d0c:	6011      	str	r1, [r2, #0]
 8023d0e:	d1e0      	bne.n	8023cd2 <_free_r+0x22>
 8023d10:	6818      	ldr	r0, [r3, #0]
 8023d12:	685b      	ldr	r3, [r3, #4]
 8023d14:	6053      	str	r3, [r2, #4]
 8023d16:	4408      	add	r0, r1
 8023d18:	6010      	str	r0, [r2, #0]
 8023d1a:	e7da      	b.n	8023cd2 <_free_r+0x22>
 8023d1c:	d902      	bls.n	8023d24 <_free_r+0x74>
 8023d1e:	230c      	movs	r3, #12
 8023d20:	602b      	str	r3, [r5, #0]
 8023d22:	e7d6      	b.n	8023cd2 <_free_r+0x22>
 8023d24:	6820      	ldr	r0, [r4, #0]
 8023d26:	1821      	adds	r1, r4, r0
 8023d28:	428b      	cmp	r3, r1
 8023d2a:	bf04      	itt	eq
 8023d2c:	6819      	ldreq	r1, [r3, #0]
 8023d2e:	685b      	ldreq	r3, [r3, #4]
 8023d30:	6063      	str	r3, [r4, #4]
 8023d32:	bf04      	itt	eq
 8023d34:	1809      	addeq	r1, r1, r0
 8023d36:	6021      	streq	r1, [r4, #0]
 8023d38:	6054      	str	r4, [r2, #4]
 8023d3a:	e7ca      	b.n	8023cd2 <_free_r+0x22>
 8023d3c:	bd38      	pop	{r3, r4, r5, pc}
 8023d3e:	bf00      	nop
 8023d40:	20002884 	.word	0x20002884

08023d44 <malloc>:
 8023d44:	4b02      	ldr	r3, [pc, #8]	@ (8023d50 <malloc+0xc>)
 8023d46:	4601      	mov	r1, r0
 8023d48:	6818      	ldr	r0, [r3, #0]
 8023d4a:	f000 b825 	b.w	8023d98 <_malloc_r>
 8023d4e:	bf00      	nop
 8023d50:	20000038 	.word	0x20000038

08023d54 <sbrk_aligned>:
 8023d54:	b570      	push	{r4, r5, r6, lr}
 8023d56:	4e0f      	ldr	r6, [pc, #60]	@ (8023d94 <sbrk_aligned+0x40>)
 8023d58:	460c      	mov	r4, r1
 8023d5a:	6831      	ldr	r1, [r6, #0]
 8023d5c:	4605      	mov	r5, r0
 8023d5e:	b911      	cbnz	r1, 8023d66 <sbrk_aligned+0x12>
 8023d60:	f000 f964 	bl	802402c <_sbrk_r>
 8023d64:	6030      	str	r0, [r6, #0]
 8023d66:	4621      	mov	r1, r4
 8023d68:	4628      	mov	r0, r5
 8023d6a:	f000 f95f 	bl	802402c <_sbrk_r>
 8023d6e:	1c43      	adds	r3, r0, #1
 8023d70:	d103      	bne.n	8023d7a <sbrk_aligned+0x26>
 8023d72:	f04f 34ff 	mov.w	r4, #4294967295
 8023d76:	4620      	mov	r0, r4
 8023d78:	bd70      	pop	{r4, r5, r6, pc}
 8023d7a:	1cc4      	adds	r4, r0, #3
 8023d7c:	f024 0403 	bic.w	r4, r4, #3
 8023d80:	42a0      	cmp	r0, r4
 8023d82:	d0f8      	beq.n	8023d76 <sbrk_aligned+0x22>
 8023d84:	1a21      	subs	r1, r4, r0
 8023d86:	4628      	mov	r0, r5
 8023d88:	f000 f950 	bl	802402c <_sbrk_r>
 8023d8c:	3001      	adds	r0, #1
 8023d8e:	d1f2      	bne.n	8023d76 <sbrk_aligned+0x22>
 8023d90:	e7ef      	b.n	8023d72 <sbrk_aligned+0x1e>
 8023d92:	bf00      	nop
 8023d94:	20002880 	.word	0x20002880

08023d98 <_malloc_r>:
 8023d98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023d9c:	1ccd      	adds	r5, r1, #3
 8023d9e:	f025 0503 	bic.w	r5, r5, #3
 8023da2:	3508      	adds	r5, #8
 8023da4:	2d0c      	cmp	r5, #12
 8023da6:	bf38      	it	cc
 8023da8:	250c      	movcc	r5, #12
 8023daa:	2d00      	cmp	r5, #0
 8023dac:	4606      	mov	r6, r0
 8023dae:	db01      	blt.n	8023db4 <_malloc_r+0x1c>
 8023db0:	42a9      	cmp	r1, r5
 8023db2:	d904      	bls.n	8023dbe <_malloc_r+0x26>
 8023db4:	230c      	movs	r3, #12
 8023db6:	6033      	str	r3, [r6, #0]
 8023db8:	2000      	movs	r0, #0
 8023dba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023dbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023e94 <_malloc_r+0xfc>
 8023dc2:	f000 f869 	bl	8023e98 <__malloc_lock>
 8023dc6:	f8d8 3000 	ldr.w	r3, [r8]
 8023dca:	461c      	mov	r4, r3
 8023dcc:	bb44      	cbnz	r4, 8023e20 <_malloc_r+0x88>
 8023dce:	4629      	mov	r1, r5
 8023dd0:	4630      	mov	r0, r6
 8023dd2:	f7ff ffbf 	bl	8023d54 <sbrk_aligned>
 8023dd6:	1c43      	adds	r3, r0, #1
 8023dd8:	4604      	mov	r4, r0
 8023dda:	d158      	bne.n	8023e8e <_malloc_r+0xf6>
 8023ddc:	f8d8 4000 	ldr.w	r4, [r8]
 8023de0:	4627      	mov	r7, r4
 8023de2:	2f00      	cmp	r7, #0
 8023de4:	d143      	bne.n	8023e6e <_malloc_r+0xd6>
 8023de6:	2c00      	cmp	r4, #0
 8023de8:	d04b      	beq.n	8023e82 <_malloc_r+0xea>
 8023dea:	6823      	ldr	r3, [r4, #0]
 8023dec:	4639      	mov	r1, r7
 8023dee:	4630      	mov	r0, r6
 8023df0:	eb04 0903 	add.w	r9, r4, r3
 8023df4:	f000 f91a 	bl	802402c <_sbrk_r>
 8023df8:	4581      	cmp	r9, r0
 8023dfa:	d142      	bne.n	8023e82 <_malloc_r+0xea>
 8023dfc:	6821      	ldr	r1, [r4, #0]
 8023dfe:	1a6d      	subs	r5, r5, r1
 8023e00:	4629      	mov	r1, r5
 8023e02:	4630      	mov	r0, r6
 8023e04:	f7ff ffa6 	bl	8023d54 <sbrk_aligned>
 8023e08:	3001      	adds	r0, #1
 8023e0a:	d03a      	beq.n	8023e82 <_malloc_r+0xea>
 8023e0c:	6823      	ldr	r3, [r4, #0]
 8023e0e:	442b      	add	r3, r5
 8023e10:	6023      	str	r3, [r4, #0]
 8023e12:	f8d8 3000 	ldr.w	r3, [r8]
 8023e16:	685a      	ldr	r2, [r3, #4]
 8023e18:	bb62      	cbnz	r2, 8023e74 <_malloc_r+0xdc>
 8023e1a:	f8c8 7000 	str.w	r7, [r8]
 8023e1e:	e00f      	b.n	8023e40 <_malloc_r+0xa8>
 8023e20:	6822      	ldr	r2, [r4, #0]
 8023e22:	1b52      	subs	r2, r2, r5
 8023e24:	d420      	bmi.n	8023e68 <_malloc_r+0xd0>
 8023e26:	2a0b      	cmp	r2, #11
 8023e28:	d917      	bls.n	8023e5a <_malloc_r+0xc2>
 8023e2a:	1961      	adds	r1, r4, r5
 8023e2c:	42a3      	cmp	r3, r4
 8023e2e:	6025      	str	r5, [r4, #0]
 8023e30:	bf18      	it	ne
 8023e32:	6059      	strne	r1, [r3, #4]
 8023e34:	6863      	ldr	r3, [r4, #4]
 8023e36:	bf08      	it	eq
 8023e38:	f8c8 1000 	streq.w	r1, [r8]
 8023e3c:	5162      	str	r2, [r4, r5]
 8023e3e:	604b      	str	r3, [r1, #4]
 8023e40:	4630      	mov	r0, r6
 8023e42:	f000 f82f 	bl	8023ea4 <__malloc_unlock>
 8023e46:	f104 000b 	add.w	r0, r4, #11
 8023e4a:	1d23      	adds	r3, r4, #4
 8023e4c:	f020 0007 	bic.w	r0, r0, #7
 8023e50:	1ac2      	subs	r2, r0, r3
 8023e52:	bf1c      	itt	ne
 8023e54:	1a1b      	subne	r3, r3, r0
 8023e56:	50a3      	strne	r3, [r4, r2]
 8023e58:	e7af      	b.n	8023dba <_malloc_r+0x22>
 8023e5a:	6862      	ldr	r2, [r4, #4]
 8023e5c:	42a3      	cmp	r3, r4
 8023e5e:	bf0c      	ite	eq
 8023e60:	f8c8 2000 	streq.w	r2, [r8]
 8023e64:	605a      	strne	r2, [r3, #4]
 8023e66:	e7eb      	b.n	8023e40 <_malloc_r+0xa8>
 8023e68:	4623      	mov	r3, r4
 8023e6a:	6864      	ldr	r4, [r4, #4]
 8023e6c:	e7ae      	b.n	8023dcc <_malloc_r+0x34>
 8023e6e:	463c      	mov	r4, r7
 8023e70:	687f      	ldr	r7, [r7, #4]
 8023e72:	e7b6      	b.n	8023de2 <_malloc_r+0x4a>
 8023e74:	461a      	mov	r2, r3
 8023e76:	685b      	ldr	r3, [r3, #4]
 8023e78:	42a3      	cmp	r3, r4
 8023e7a:	d1fb      	bne.n	8023e74 <_malloc_r+0xdc>
 8023e7c:	2300      	movs	r3, #0
 8023e7e:	6053      	str	r3, [r2, #4]
 8023e80:	e7de      	b.n	8023e40 <_malloc_r+0xa8>
 8023e82:	230c      	movs	r3, #12
 8023e84:	6033      	str	r3, [r6, #0]
 8023e86:	4630      	mov	r0, r6
 8023e88:	f000 f80c 	bl	8023ea4 <__malloc_unlock>
 8023e8c:	e794      	b.n	8023db8 <_malloc_r+0x20>
 8023e8e:	6005      	str	r5, [r0, #0]
 8023e90:	e7d6      	b.n	8023e40 <_malloc_r+0xa8>
 8023e92:	bf00      	nop
 8023e94:	20002884 	.word	0x20002884

08023e98 <__malloc_lock>:
 8023e98:	4801      	ldr	r0, [pc, #4]	@ (8023ea0 <__malloc_lock+0x8>)
 8023e9a:	f7ff bee8 	b.w	8023c6e <__retarget_lock_acquire_recursive>
 8023e9e:	bf00      	nop
 8023ea0:	2000287c 	.word	0x2000287c

08023ea4 <__malloc_unlock>:
 8023ea4:	4801      	ldr	r0, [pc, #4]	@ (8023eac <__malloc_unlock+0x8>)
 8023ea6:	f7ff bee3 	b.w	8023c70 <__retarget_lock_release_recursive>
 8023eaa:	bf00      	nop
 8023eac:	2000287c 	.word	0x2000287c

08023eb0 <__sflush_r>:
 8023eb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023eb8:	0716      	lsls	r6, r2, #28
 8023eba:	4605      	mov	r5, r0
 8023ebc:	460c      	mov	r4, r1
 8023ebe:	d454      	bmi.n	8023f6a <__sflush_r+0xba>
 8023ec0:	684b      	ldr	r3, [r1, #4]
 8023ec2:	2b00      	cmp	r3, #0
 8023ec4:	dc02      	bgt.n	8023ecc <__sflush_r+0x1c>
 8023ec6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	dd48      	ble.n	8023f5e <__sflush_r+0xae>
 8023ecc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023ece:	2e00      	cmp	r6, #0
 8023ed0:	d045      	beq.n	8023f5e <__sflush_r+0xae>
 8023ed2:	2300      	movs	r3, #0
 8023ed4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023ed8:	682f      	ldr	r7, [r5, #0]
 8023eda:	6a21      	ldr	r1, [r4, #32]
 8023edc:	602b      	str	r3, [r5, #0]
 8023ede:	d030      	beq.n	8023f42 <__sflush_r+0x92>
 8023ee0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023ee2:	89a3      	ldrh	r3, [r4, #12]
 8023ee4:	0759      	lsls	r1, r3, #29
 8023ee6:	d505      	bpl.n	8023ef4 <__sflush_r+0x44>
 8023ee8:	6863      	ldr	r3, [r4, #4]
 8023eea:	1ad2      	subs	r2, r2, r3
 8023eec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8023eee:	b10b      	cbz	r3, 8023ef4 <__sflush_r+0x44>
 8023ef0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023ef2:	1ad2      	subs	r2, r2, r3
 8023ef4:	2300      	movs	r3, #0
 8023ef6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023ef8:	6a21      	ldr	r1, [r4, #32]
 8023efa:	4628      	mov	r0, r5
 8023efc:	47b0      	blx	r6
 8023efe:	1c43      	adds	r3, r0, #1
 8023f00:	89a3      	ldrh	r3, [r4, #12]
 8023f02:	d106      	bne.n	8023f12 <__sflush_r+0x62>
 8023f04:	6829      	ldr	r1, [r5, #0]
 8023f06:	291d      	cmp	r1, #29
 8023f08:	d82b      	bhi.n	8023f62 <__sflush_r+0xb2>
 8023f0a:	4a2a      	ldr	r2, [pc, #168]	@ (8023fb4 <__sflush_r+0x104>)
 8023f0c:	410a      	asrs	r2, r1
 8023f0e:	07d6      	lsls	r6, r2, #31
 8023f10:	d427      	bmi.n	8023f62 <__sflush_r+0xb2>
 8023f12:	2200      	movs	r2, #0
 8023f14:	6062      	str	r2, [r4, #4]
 8023f16:	04d9      	lsls	r1, r3, #19
 8023f18:	6922      	ldr	r2, [r4, #16]
 8023f1a:	6022      	str	r2, [r4, #0]
 8023f1c:	d504      	bpl.n	8023f28 <__sflush_r+0x78>
 8023f1e:	1c42      	adds	r2, r0, #1
 8023f20:	d101      	bne.n	8023f26 <__sflush_r+0x76>
 8023f22:	682b      	ldr	r3, [r5, #0]
 8023f24:	b903      	cbnz	r3, 8023f28 <__sflush_r+0x78>
 8023f26:	6560      	str	r0, [r4, #84]	@ 0x54
 8023f28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023f2a:	602f      	str	r7, [r5, #0]
 8023f2c:	b1b9      	cbz	r1, 8023f5e <__sflush_r+0xae>
 8023f2e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023f32:	4299      	cmp	r1, r3
 8023f34:	d002      	beq.n	8023f3c <__sflush_r+0x8c>
 8023f36:	4628      	mov	r0, r5
 8023f38:	f7ff feba 	bl	8023cb0 <_free_r>
 8023f3c:	2300      	movs	r3, #0
 8023f3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8023f40:	e00d      	b.n	8023f5e <__sflush_r+0xae>
 8023f42:	2301      	movs	r3, #1
 8023f44:	4628      	mov	r0, r5
 8023f46:	47b0      	blx	r6
 8023f48:	4602      	mov	r2, r0
 8023f4a:	1c50      	adds	r0, r2, #1
 8023f4c:	d1c9      	bne.n	8023ee2 <__sflush_r+0x32>
 8023f4e:	682b      	ldr	r3, [r5, #0]
 8023f50:	2b00      	cmp	r3, #0
 8023f52:	d0c6      	beq.n	8023ee2 <__sflush_r+0x32>
 8023f54:	2b1d      	cmp	r3, #29
 8023f56:	d001      	beq.n	8023f5c <__sflush_r+0xac>
 8023f58:	2b16      	cmp	r3, #22
 8023f5a:	d11e      	bne.n	8023f9a <__sflush_r+0xea>
 8023f5c:	602f      	str	r7, [r5, #0]
 8023f5e:	2000      	movs	r0, #0
 8023f60:	e022      	b.n	8023fa8 <__sflush_r+0xf8>
 8023f62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023f66:	b21b      	sxth	r3, r3
 8023f68:	e01b      	b.n	8023fa2 <__sflush_r+0xf2>
 8023f6a:	690f      	ldr	r7, [r1, #16]
 8023f6c:	2f00      	cmp	r7, #0
 8023f6e:	d0f6      	beq.n	8023f5e <__sflush_r+0xae>
 8023f70:	0793      	lsls	r3, r2, #30
 8023f72:	680e      	ldr	r6, [r1, #0]
 8023f74:	bf08      	it	eq
 8023f76:	694b      	ldreq	r3, [r1, #20]
 8023f78:	600f      	str	r7, [r1, #0]
 8023f7a:	bf18      	it	ne
 8023f7c:	2300      	movne	r3, #0
 8023f7e:	eba6 0807 	sub.w	r8, r6, r7
 8023f82:	608b      	str	r3, [r1, #8]
 8023f84:	f1b8 0f00 	cmp.w	r8, #0
 8023f88:	dde9      	ble.n	8023f5e <__sflush_r+0xae>
 8023f8a:	6a21      	ldr	r1, [r4, #32]
 8023f8c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8023f8e:	4643      	mov	r3, r8
 8023f90:	463a      	mov	r2, r7
 8023f92:	4628      	mov	r0, r5
 8023f94:	47b0      	blx	r6
 8023f96:	2800      	cmp	r0, #0
 8023f98:	dc08      	bgt.n	8023fac <__sflush_r+0xfc>
 8023f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023f9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023fa2:	81a3      	strh	r3, [r4, #12]
 8023fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8023fa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023fac:	4407      	add	r7, r0
 8023fae:	eba8 0800 	sub.w	r8, r8, r0
 8023fb2:	e7e7      	b.n	8023f84 <__sflush_r+0xd4>
 8023fb4:	dfbffffe 	.word	0xdfbffffe

08023fb8 <_fflush_r>:
 8023fb8:	b538      	push	{r3, r4, r5, lr}
 8023fba:	690b      	ldr	r3, [r1, #16]
 8023fbc:	4605      	mov	r5, r0
 8023fbe:	460c      	mov	r4, r1
 8023fc0:	b913      	cbnz	r3, 8023fc8 <_fflush_r+0x10>
 8023fc2:	2500      	movs	r5, #0
 8023fc4:	4628      	mov	r0, r5
 8023fc6:	bd38      	pop	{r3, r4, r5, pc}
 8023fc8:	b118      	cbz	r0, 8023fd2 <_fflush_r+0x1a>
 8023fca:	6a03      	ldr	r3, [r0, #32]
 8023fcc:	b90b      	cbnz	r3, 8023fd2 <_fflush_r+0x1a>
 8023fce:	f7ff fcf9 	bl	80239c4 <__sinit>
 8023fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023fd6:	2b00      	cmp	r3, #0
 8023fd8:	d0f3      	beq.n	8023fc2 <_fflush_r+0xa>
 8023fda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023fdc:	07d0      	lsls	r0, r2, #31
 8023fde:	d404      	bmi.n	8023fea <_fflush_r+0x32>
 8023fe0:	0599      	lsls	r1, r3, #22
 8023fe2:	d402      	bmi.n	8023fea <_fflush_r+0x32>
 8023fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023fe6:	f7ff fe42 	bl	8023c6e <__retarget_lock_acquire_recursive>
 8023fea:	4628      	mov	r0, r5
 8023fec:	4621      	mov	r1, r4
 8023fee:	f7ff ff5f 	bl	8023eb0 <__sflush_r>
 8023ff2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023ff4:	07da      	lsls	r2, r3, #31
 8023ff6:	4605      	mov	r5, r0
 8023ff8:	d4e4      	bmi.n	8023fc4 <_fflush_r+0xc>
 8023ffa:	89a3      	ldrh	r3, [r4, #12]
 8023ffc:	059b      	lsls	r3, r3, #22
 8023ffe:	d4e1      	bmi.n	8023fc4 <_fflush_r+0xc>
 8024000:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8024002:	f7ff fe35 	bl	8023c70 <__retarget_lock_release_recursive>
 8024006:	e7dd      	b.n	8023fc4 <_fflush_r+0xc>

08024008 <fiprintf>:
 8024008:	b40e      	push	{r1, r2, r3}
 802400a:	b503      	push	{r0, r1, lr}
 802400c:	4601      	mov	r1, r0
 802400e:	ab03      	add	r3, sp, #12
 8024010:	4805      	ldr	r0, [pc, #20]	@ (8024028 <fiprintf+0x20>)
 8024012:	f853 2b04 	ldr.w	r2, [r3], #4
 8024016:	6800      	ldr	r0, [r0, #0]
 8024018:	9301      	str	r3, [sp, #4]
 802401a:	f000 f847 	bl	80240ac <_vfiprintf_r>
 802401e:	b002      	add	sp, #8
 8024020:	f85d eb04 	ldr.w	lr, [sp], #4
 8024024:	b003      	add	sp, #12
 8024026:	4770      	bx	lr
 8024028:	20000038 	.word	0x20000038

0802402c <_sbrk_r>:
 802402c:	b538      	push	{r3, r4, r5, lr}
 802402e:	4d06      	ldr	r5, [pc, #24]	@ (8024048 <_sbrk_r+0x1c>)
 8024030:	2300      	movs	r3, #0
 8024032:	4604      	mov	r4, r0
 8024034:	4608      	mov	r0, r1
 8024036:	602b      	str	r3, [r5, #0]
 8024038:	f7df f8cc 	bl	80031d4 <_sbrk>
 802403c:	1c43      	adds	r3, r0, #1
 802403e:	d102      	bne.n	8024046 <_sbrk_r+0x1a>
 8024040:	682b      	ldr	r3, [r5, #0]
 8024042:	b103      	cbz	r3, 8024046 <_sbrk_r+0x1a>
 8024044:	6023      	str	r3, [r4, #0]
 8024046:	bd38      	pop	{r3, r4, r5, pc}
 8024048:	20002878 	.word	0x20002878

0802404c <abort>:
 802404c:	b508      	push	{r3, lr}
 802404e:	2006      	movs	r0, #6
 8024050:	f000 fb8e 	bl	8024770 <raise>
 8024054:	2001      	movs	r0, #1
 8024056:	f7df f845 	bl	80030e4 <_exit>

0802405a <__sfputc_r>:
 802405a:	6893      	ldr	r3, [r2, #8]
 802405c:	3b01      	subs	r3, #1
 802405e:	2b00      	cmp	r3, #0
 8024060:	b410      	push	{r4}
 8024062:	6093      	str	r3, [r2, #8]
 8024064:	da08      	bge.n	8024078 <__sfputc_r+0x1e>
 8024066:	6994      	ldr	r4, [r2, #24]
 8024068:	42a3      	cmp	r3, r4
 802406a:	db01      	blt.n	8024070 <__sfputc_r+0x16>
 802406c:	290a      	cmp	r1, #10
 802406e:	d103      	bne.n	8024078 <__sfputc_r+0x1e>
 8024070:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024074:	f000 bac0 	b.w	80245f8 <__swbuf_r>
 8024078:	6813      	ldr	r3, [r2, #0]
 802407a:	1c58      	adds	r0, r3, #1
 802407c:	6010      	str	r0, [r2, #0]
 802407e:	7019      	strb	r1, [r3, #0]
 8024080:	4608      	mov	r0, r1
 8024082:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024086:	4770      	bx	lr

08024088 <__sfputs_r>:
 8024088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802408a:	4606      	mov	r6, r0
 802408c:	460f      	mov	r7, r1
 802408e:	4614      	mov	r4, r2
 8024090:	18d5      	adds	r5, r2, r3
 8024092:	42ac      	cmp	r4, r5
 8024094:	d101      	bne.n	802409a <__sfputs_r+0x12>
 8024096:	2000      	movs	r0, #0
 8024098:	e007      	b.n	80240aa <__sfputs_r+0x22>
 802409a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802409e:	463a      	mov	r2, r7
 80240a0:	4630      	mov	r0, r6
 80240a2:	f7ff ffda 	bl	802405a <__sfputc_r>
 80240a6:	1c43      	adds	r3, r0, #1
 80240a8:	d1f3      	bne.n	8024092 <__sfputs_r+0xa>
 80240aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080240ac <_vfiprintf_r>:
 80240ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240b0:	460d      	mov	r5, r1
 80240b2:	b09d      	sub	sp, #116	@ 0x74
 80240b4:	4614      	mov	r4, r2
 80240b6:	4698      	mov	r8, r3
 80240b8:	4606      	mov	r6, r0
 80240ba:	b118      	cbz	r0, 80240c4 <_vfiprintf_r+0x18>
 80240bc:	6a03      	ldr	r3, [r0, #32]
 80240be:	b90b      	cbnz	r3, 80240c4 <_vfiprintf_r+0x18>
 80240c0:	f7ff fc80 	bl	80239c4 <__sinit>
 80240c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80240c6:	07d9      	lsls	r1, r3, #31
 80240c8:	d405      	bmi.n	80240d6 <_vfiprintf_r+0x2a>
 80240ca:	89ab      	ldrh	r3, [r5, #12]
 80240cc:	059a      	lsls	r2, r3, #22
 80240ce:	d402      	bmi.n	80240d6 <_vfiprintf_r+0x2a>
 80240d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80240d2:	f7ff fdcc 	bl	8023c6e <__retarget_lock_acquire_recursive>
 80240d6:	89ab      	ldrh	r3, [r5, #12]
 80240d8:	071b      	lsls	r3, r3, #28
 80240da:	d501      	bpl.n	80240e0 <_vfiprintf_r+0x34>
 80240dc:	692b      	ldr	r3, [r5, #16]
 80240de:	b99b      	cbnz	r3, 8024108 <_vfiprintf_r+0x5c>
 80240e0:	4629      	mov	r1, r5
 80240e2:	4630      	mov	r0, r6
 80240e4:	f000 fac6 	bl	8024674 <__swsetup_r>
 80240e8:	b170      	cbz	r0, 8024108 <_vfiprintf_r+0x5c>
 80240ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80240ec:	07dc      	lsls	r4, r3, #31
 80240ee:	d504      	bpl.n	80240fa <_vfiprintf_r+0x4e>
 80240f0:	f04f 30ff 	mov.w	r0, #4294967295
 80240f4:	b01d      	add	sp, #116	@ 0x74
 80240f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240fa:	89ab      	ldrh	r3, [r5, #12]
 80240fc:	0598      	lsls	r0, r3, #22
 80240fe:	d4f7      	bmi.n	80240f0 <_vfiprintf_r+0x44>
 8024100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8024102:	f7ff fdb5 	bl	8023c70 <__retarget_lock_release_recursive>
 8024106:	e7f3      	b.n	80240f0 <_vfiprintf_r+0x44>
 8024108:	2300      	movs	r3, #0
 802410a:	9309      	str	r3, [sp, #36]	@ 0x24
 802410c:	2320      	movs	r3, #32
 802410e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8024112:	f8cd 800c 	str.w	r8, [sp, #12]
 8024116:	2330      	movs	r3, #48	@ 0x30
 8024118:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80242c8 <_vfiprintf_r+0x21c>
 802411c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8024120:	f04f 0901 	mov.w	r9, #1
 8024124:	4623      	mov	r3, r4
 8024126:	469a      	mov	sl, r3
 8024128:	f813 2b01 	ldrb.w	r2, [r3], #1
 802412c:	b10a      	cbz	r2, 8024132 <_vfiprintf_r+0x86>
 802412e:	2a25      	cmp	r2, #37	@ 0x25
 8024130:	d1f9      	bne.n	8024126 <_vfiprintf_r+0x7a>
 8024132:	ebba 0b04 	subs.w	fp, sl, r4
 8024136:	d00b      	beq.n	8024150 <_vfiprintf_r+0xa4>
 8024138:	465b      	mov	r3, fp
 802413a:	4622      	mov	r2, r4
 802413c:	4629      	mov	r1, r5
 802413e:	4630      	mov	r0, r6
 8024140:	f7ff ffa2 	bl	8024088 <__sfputs_r>
 8024144:	3001      	adds	r0, #1
 8024146:	f000 80a7 	beq.w	8024298 <_vfiprintf_r+0x1ec>
 802414a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802414c:	445a      	add	r2, fp
 802414e:	9209      	str	r2, [sp, #36]	@ 0x24
 8024150:	f89a 3000 	ldrb.w	r3, [sl]
 8024154:	2b00      	cmp	r3, #0
 8024156:	f000 809f 	beq.w	8024298 <_vfiprintf_r+0x1ec>
 802415a:	2300      	movs	r3, #0
 802415c:	f04f 32ff 	mov.w	r2, #4294967295
 8024160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024164:	f10a 0a01 	add.w	sl, sl, #1
 8024168:	9304      	str	r3, [sp, #16]
 802416a:	9307      	str	r3, [sp, #28]
 802416c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8024170:	931a      	str	r3, [sp, #104]	@ 0x68
 8024172:	4654      	mov	r4, sl
 8024174:	2205      	movs	r2, #5
 8024176:	f814 1b01 	ldrb.w	r1, [r4], #1
 802417a:	4853      	ldr	r0, [pc, #332]	@ (80242c8 <_vfiprintf_r+0x21c>)
 802417c:	f7dc f8c8 	bl	8000310 <memchr>
 8024180:	9a04      	ldr	r2, [sp, #16]
 8024182:	b9d8      	cbnz	r0, 80241bc <_vfiprintf_r+0x110>
 8024184:	06d1      	lsls	r1, r2, #27
 8024186:	bf44      	itt	mi
 8024188:	2320      	movmi	r3, #32
 802418a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802418e:	0713      	lsls	r3, r2, #28
 8024190:	bf44      	itt	mi
 8024192:	232b      	movmi	r3, #43	@ 0x2b
 8024194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8024198:	f89a 3000 	ldrb.w	r3, [sl]
 802419c:	2b2a      	cmp	r3, #42	@ 0x2a
 802419e:	d015      	beq.n	80241cc <_vfiprintf_r+0x120>
 80241a0:	9a07      	ldr	r2, [sp, #28]
 80241a2:	4654      	mov	r4, sl
 80241a4:	2000      	movs	r0, #0
 80241a6:	f04f 0c0a 	mov.w	ip, #10
 80241aa:	4621      	mov	r1, r4
 80241ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80241b0:	3b30      	subs	r3, #48	@ 0x30
 80241b2:	2b09      	cmp	r3, #9
 80241b4:	d94b      	bls.n	802424e <_vfiprintf_r+0x1a2>
 80241b6:	b1b0      	cbz	r0, 80241e6 <_vfiprintf_r+0x13a>
 80241b8:	9207      	str	r2, [sp, #28]
 80241ba:	e014      	b.n	80241e6 <_vfiprintf_r+0x13a>
 80241bc:	eba0 0308 	sub.w	r3, r0, r8
 80241c0:	fa09 f303 	lsl.w	r3, r9, r3
 80241c4:	4313      	orrs	r3, r2
 80241c6:	9304      	str	r3, [sp, #16]
 80241c8:	46a2      	mov	sl, r4
 80241ca:	e7d2      	b.n	8024172 <_vfiprintf_r+0xc6>
 80241cc:	9b03      	ldr	r3, [sp, #12]
 80241ce:	1d19      	adds	r1, r3, #4
 80241d0:	681b      	ldr	r3, [r3, #0]
 80241d2:	9103      	str	r1, [sp, #12]
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	bfbb      	ittet	lt
 80241d8:	425b      	neglt	r3, r3
 80241da:	f042 0202 	orrlt.w	r2, r2, #2
 80241de:	9307      	strge	r3, [sp, #28]
 80241e0:	9307      	strlt	r3, [sp, #28]
 80241e2:	bfb8      	it	lt
 80241e4:	9204      	strlt	r2, [sp, #16]
 80241e6:	7823      	ldrb	r3, [r4, #0]
 80241e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80241ea:	d10a      	bne.n	8024202 <_vfiprintf_r+0x156>
 80241ec:	7863      	ldrb	r3, [r4, #1]
 80241ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80241f0:	d132      	bne.n	8024258 <_vfiprintf_r+0x1ac>
 80241f2:	9b03      	ldr	r3, [sp, #12]
 80241f4:	1d1a      	adds	r2, r3, #4
 80241f6:	681b      	ldr	r3, [r3, #0]
 80241f8:	9203      	str	r2, [sp, #12]
 80241fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80241fe:	3402      	adds	r4, #2
 8024200:	9305      	str	r3, [sp, #20]
 8024202:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80242d8 <_vfiprintf_r+0x22c>
 8024206:	7821      	ldrb	r1, [r4, #0]
 8024208:	2203      	movs	r2, #3
 802420a:	4650      	mov	r0, sl
 802420c:	f7dc f880 	bl	8000310 <memchr>
 8024210:	b138      	cbz	r0, 8024222 <_vfiprintf_r+0x176>
 8024212:	9b04      	ldr	r3, [sp, #16]
 8024214:	eba0 000a 	sub.w	r0, r0, sl
 8024218:	2240      	movs	r2, #64	@ 0x40
 802421a:	4082      	lsls	r2, r0
 802421c:	4313      	orrs	r3, r2
 802421e:	3401      	adds	r4, #1
 8024220:	9304      	str	r3, [sp, #16]
 8024222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024226:	4829      	ldr	r0, [pc, #164]	@ (80242cc <_vfiprintf_r+0x220>)
 8024228:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802422c:	2206      	movs	r2, #6
 802422e:	f7dc f86f 	bl	8000310 <memchr>
 8024232:	2800      	cmp	r0, #0
 8024234:	d03f      	beq.n	80242b6 <_vfiprintf_r+0x20a>
 8024236:	4b26      	ldr	r3, [pc, #152]	@ (80242d0 <_vfiprintf_r+0x224>)
 8024238:	bb1b      	cbnz	r3, 8024282 <_vfiprintf_r+0x1d6>
 802423a:	9b03      	ldr	r3, [sp, #12]
 802423c:	3307      	adds	r3, #7
 802423e:	f023 0307 	bic.w	r3, r3, #7
 8024242:	3308      	adds	r3, #8
 8024244:	9303      	str	r3, [sp, #12]
 8024246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024248:	443b      	add	r3, r7
 802424a:	9309      	str	r3, [sp, #36]	@ 0x24
 802424c:	e76a      	b.n	8024124 <_vfiprintf_r+0x78>
 802424e:	fb0c 3202 	mla	r2, ip, r2, r3
 8024252:	460c      	mov	r4, r1
 8024254:	2001      	movs	r0, #1
 8024256:	e7a8      	b.n	80241aa <_vfiprintf_r+0xfe>
 8024258:	2300      	movs	r3, #0
 802425a:	3401      	adds	r4, #1
 802425c:	9305      	str	r3, [sp, #20]
 802425e:	4619      	mov	r1, r3
 8024260:	f04f 0c0a 	mov.w	ip, #10
 8024264:	4620      	mov	r0, r4
 8024266:	f810 2b01 	ldrb.w	r2, [r0], #1
 802426a:	3a30      	subs	r2, #48	@ 0x30
 802426c:	2a09      	cmp	r2, #9
 802426e:	d903      	bls.n	8024278 <_vfiprintf_r+0x1cc>
 8024270:	2b00      	cmp	r3, #0
 8024272:	d0c6      	beq.n	8024202 <_vfiprintf_r+0x156>
 8024274:	9105      	str	r1, [sp, #20]
 8024276:	e7c4      	b.n	8024202 <_vfiprintf_r+0x156>
 8024278:	fb0c 2101 	mla	r1, ip, r1, r2
 802427c:	4604      	mov	r4, r0
 802427e:	2301      	movs	r3, #1
 8024280:	e7f0      	b.n	8024264 <_vfiprintf_r+0x1b8>
 8024282:	ab03      	add	r3, sp, #12
 8024284:	9300      	str	r3, [sp, #0]
 8024286:	462a      	mov	r2, r5
 8024288:	4b12      	ldr	r3, [pc, #72]	@ (80242d4 <_vfiprintf_r+0x228>)
 802428a:	a904      	add	r1, sp, #16
 802428c:	4630      	mov	r0, r6
 802428e:	f3af 8000 	nop.w
 8024292:	4607      	mov	r7, r0
 8024294:	1c78      	adds	r0, r7, #1
 8024296:	d1d6      	bne.n	8024246 <_vfiprintf_r+0x19a>
 8024298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802429a:	07d9      	lsls	r1, r3, #31
 802429c:	d405      	bmi.n	80242aa <_vfiprintf_r+0x1fe>
 802429e:	89ab      	ldrh	r3, [r5, #12]
 80242a0:	059a      	lsls	r2, r3, #22
 80242a2:	d402      	bmi.n	80242aa <_vfiprintf_r+0x1fe>
 80242a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80242a6:	f7ff fce3 	bl	8023c70 <__retarget_lock_release_recursive>
 80242aa:	89ab      	ldrh	r3, [r5, #12]
 80242ac:	065b      	lsls	r3, r3, #25
 80242ae:	f53f af1f 	bmi.w	80240f0 <_vfiprintf_r+0x44>
 80242b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80242b4:	e71e      	b.n	80240f4 <_vfiprintf_r+0x48>
 80242b6:	ab03      	add	r3, sp, #12
 80242b8:	9300      	str	r3, [sp, #0]
 80242ba:	462a      	mov	r2, r5
 80242bc:	4b05      	ldr	r3, [pc, #20]	@ (80242d4 <_vfiprintf_r+0x228>)
 80242be:	a904      	add	r1, sp, #16
 80242c0:	4630      	mov	r0, r6
 80242c2:	f000 f879 	bl	80243b8 <_printf_i>
 80242c6:	e7e4      	b.n	8024292 <_vfiprintf_r+0x1e6>
 80242c8:	080281ac 	.word	0x080281ac
 80242cc:	080281b6 	.word	0x080281b6
 80242d0:	00000000 	.word	0x00000000
 80242d4:	08024089 	.word	0x08024089
 80242d8:	080281b2 	.word	0x080281b2

080242dc <_printf_common>:
 80242dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80242e0:	4616      	mov	r6, r2
 80242e2:	4698      	mov	r8, r3
 80242e4:	688a      	ldr	r2, [r1, #8]
 80242e6:	690b      	ldr	r3, [r1, #16]
 80242e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80242ec:	4293      	cmp	r3, r2
 80242ee:	bfb8      	it	lt
 80242f0:	4613      	movlt	r3, r2
 80242f2:	6033      	str	r3, [r6, #0]
 80242f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80242f8:	4607      	mov	r7, r0
 80242fa:	460c      	mov	r4, r1
 80242fc:	b10a      	cbz	r2, 8024302 <_printf_common+0x26>
 80242fe:	3301      	adds	r3, #1
 8024300:	6033      	str	r3, [r6, #0]
 8024302:	6823      	ldr	r3, [r4, #0]
 8024304:	0699      	lsls	r1, r3, #26
 8024306:	bf42      	ittt	mi
 8024308:	6833      	ldrmi	r3, [r6, #0]
 802430a:	3302      	addmi	r3, #2
 802430c:	6033      	strmi	r3, [r6, #0]
 802430e:	6825      	ldr	r5, [r4, #0]
 8024310:	f015 0506 	ands.w	r5, r5, #6
 8024314:	d106      	bne.n	8024324 <_printf_common+0x48>
 8024316:	f104 0a19 	add.w	sl, r4, #25
 802431a:	68e3      	ldr	r3, [r4, #12]
 802431c:	6832      	ldr	r2, [r6, #0]
 802431e:	1a9b      	subs	r3, r3, r2
 8024320:	42ab      	cmp	r3, r5
 8024322:	dc26      	bgt.n	8024372 <_printf_common+0x96>
 8024324:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8024328:	6822      	ldr	r2, [r4, #0]
 802432a:	3b00      	subs	r3, #0
 802432c:	bf18      	it	ne
 802432e:	2301      	movne	r3, #1
 8024330:	0692      	lsls	r2, r2, #26
 8024332:	d42b      	bmi.n	802438c <_printf_common+0xb0>
 8024334:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8024338:	4641      	mov	r1, r8
 802433a:	4638      	mov	r0, r7
 802433c:	47c8      	blx	r9
 802433e:	3001      	adds	r0, #1
 8024340:	d01e      	beq.n	8024380 <_printf_common+0xa4>
 8024342:	6823      	ldr	r3, [r4, #0]
 8024344:	6922      	ldr	r2, [r4, #16]
 8024346:	f003 0306 	and.w	r3, r3, #6
 802434a:	2b04      	cmp	r3, #4
 802434c:	bf02      	ittt	eq
 802434e:	68e5      	ldreq	r5, [r4, #12]
 8024350:	6833      	ldreq	r3, [r6, #0]
 8024352:	1aed      	subeq	r5, r5, r3
 8024354:	68a3      	ldr	r3, [r4, #8]
 8024356:	bf0c      	ite	eq
 8024358:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802435c:	2500      	movne	r5, #0
 802435e:	4293      	cmp	r3, r2
 8024360:	bfc4      	itt	gt
 8024362:	1a9b      	subgt	r3, r3, r2
 8024364:	18ed      	addgt	r5, r5, r3
 8024366:	2600      	movs	r6, #0
 8024368:	341a      	adds	r4, #26
 802436a:	42b5      	cmp	r5, r6
 802436c:	d11a      	bne.n	80243a4 <_printf_common+0xc8>
 802436e:	2000      	movs	r0, #0
 8024370:	e008      	b.n	8024384 <_printf_common+0xa8>
 8024372:	2301      	movs	r3, #1
 8024374:	4652      	mov	r2, sl
 8024376:	4641      	mov	r1, r8
 8024378:	4638      	mov	r0, r7
 802437a:	47c8      	blx	r9
 802437c:	3001      	adds	r0, #1
 802437e:	d103      	bne.n	8024388 <_printf_common+0xac>
 8024380:	f04f 30ff 	mov.w	r0, #4294967295
 8024384:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024388:	3501      	adds	r5, #1
 802438a:	e7c6      	b.n	802431a <_printf_common+0x3e>
 802438c:	18e1      	adds	r1, r4, r3
 802438e:	1c5a      	adds	r2, r3, #1
 8024390:	2030      	movs	r0, #48	@ 0x30
 8024392:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8024396:	4422      	add	r2, r4
 8024398:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802439c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80243a0:	3302      	adds	r3, #2
 80243a2:	e7c7      	b.n	8024334 <_printf_common+0x58>
 80243a4:	2301      	movs	r3, #1
 80243a6:	4622      	mov	r2, r4
 80243a8:	4641      	mov	r1, r8
 80243aa:	4638      	mov	r0, r7
 80243ac:	47c8      	blx	r9
 80243ae:	3001      	adds	r0, #1
 80243b0:	d0e6      	beq.n	8024380 <_printf_common+0xa4>
 80243b2:	3601      	adds	r6, #1
 80243b4:	e7d9      	b.n	802436a <_printf_common+0x8e>
	...

080243b8 <_printf_i>:
 80243b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80243bc:	7e0f      	ldrb	r7, [r1, #24]
 80243be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80243c0:	2f78      	cmp	r7, #120	@ 0x78
 80243c2:	4691      	mov	r9, r2
 80243c4:	4680      	mov	r8, r0
 80243c6:	460c      	mov	r4, r1
 80243c8:	469a      	mov	sl, r3
 80243ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80243ce:	d807      	bhi.n	80243e0 <_printf_i+0x28>
 80243d0:	2f62      	cmp	r7, #98	@ 0x62
 80243d2:	d80a      	bhi.n	80243ea <_printf_i+0x32>
 80243d4:	2f00      	cmp	r7, #0
 80243d6:	f000 80d2 	beq.w	802457e <_printf_i+0x1c6>
 80243da:	2f58      	cmp	r7, #88	@ 0x58
 80243dc:	f000 80b9 	beq.w	8024552 <_printf_i+0x19a>
 80243e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80243e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80243e8:	e03a      	b.n	8024460 <_printf_i+0xa8>
 80243ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80243ee:	2b15      	cmp	r3, #21
 80243f0:	d8f6      	bhi.n	80243e0 <_printf_i+0x28>
 80243f2:	a101      	add	r1, pc, #4	@ (adr r1, 80243f8 <_printf_i+0x40>)
 80243f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80243f8:	08024451 	.word	0x08024451
 80243fc:	08024465 	.word	0x08024465
 8024400:	080243e1 	.word	0x080243e1
 8024404:	080243e1 	.word	0x080243e1
 8024408:	080243e1 	.word	0x080243e1
 802440c:	080243e1 	.word	0x080243e1
 8024410:	08024465 	.word	0x08024465
 8024414:	080243e1 	.word	0x080243e1
 8024418:	080243e1 	.word	0x080243e1
 802441c:	080243e1 	.word	0x080243e1
 8024420:	080243e1 	.word	0x080243e1
 8024424:	08024565 	.word	0x08024565
 8024428:	0802448f 	.word	0x0802448f
 802442c:	0802451f 	.word	0x0802451f
 8024430:	080243e1 	.word	0x080243e1
 8024434:	080243e1 	.word	0x080243e1
 8024438:	08024587 	.word	0x08024587
 802443c:	080243e1 	.word	0x080243e1
 8024440:	0802448f 	.word	0x0802448f
 8024444:	080243e1 	.word	0x080243e1
 8024448:	080243e1 	.word	0x080243e1
 802444c:	08024527 	.word	0x08024527
 8024450:	6833      	ldr	r3, [r6, #0]
 8024452:	1d1a      	adds	r2, r3, #4
 8024454:	681b      	ldr	r3, [r3, #0]
 8024456:	6032      	str	r2, [r6, #0]
 8024458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802445c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8024460:	2301      	movs	r3, #1
 8024462:	e09d      	b.n	80245a0 <_printf_i+0x1e8>
 8024464:	6833      	ldr	r3, [r6, #0]
 8024466:	6820      	ldr	r0, [r4, #0]
 8024468:	1d19      	adds	r1, r3, #4
 802446a:	6031      	str	r1, [r6, #0]
 802446c:	0606      	lsls	r6, r0, #24
 802446e:	d501      	bpl.n	8024474 <_printf_i+0xbc>
 8024470:	681d      	ldr	r5, [r3, #0]
 8024472:	e003      	b.n	802447c <_printf_i+0xc4>
 8024474:	0645      	lsls	r5, r0, #25
 8024476:	d5fb      	bpl.n	8024470 <_printf_i+0xb8>
 8024478:	f9b3 5000 	ldrsh.w	r5, [r3]
 802447c:	2d00      	cmp	r5, #0
 802447e:	da03      	bge.n	8024488 <_printf_i+0xd0>
 8024480:	232d      	movs	r3, #45	@ 0x2d
 8024482:	426d      	negs	r5, r5
 8024484:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8024488:	4859      	ldr	r0, [pc, #356]	@ (80245f0 <_printf_i+0x238>)
 802448a:	230a      	movs	r3, #10
 802448c:	e011      	b.n	80244b2 <_printf_i+0xfa>
 802448e:	6821      	ldr	r1, [r4, #0]
 8024490:	6833      	ldr	r3, [r6, #0]
 8024492:	0608      	lsls	r0, r1, #24
 8024494:	f853 5b04 	ldr.w	r5, [r3], #4
 8024498:	d402      	bmi.n	80244a0 <_printf_i+0xe8>
 802449a:	0649      	lsls	r1, r1, #25
 802449c:	bf48      	it	mi
 802449e:	b2ad      	uxthmi	r5, r5
 80244a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80244a2:	4853      	ldr	r0, [pc, #332]	@ (80245f0 <_printf_i+0x238>)
 80244a4:	6033      	str	r3, [r6, #0]
 80244a6:	bf14      	ite	ne
 80244a8:	230a      	movne	r3, #10
 80244aa:	2308      	moveq	r3, #8
 80244ac:	2100      	movs	r1, #0
 80244ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80244b2:	6866      	ldr	r6, [r4, #4]
 80244b4:	60a6      	str	r6, [r4, #8]
 80244b6:	2e00      	cmp	r6, #0
 80244b8:	bfa2      	ittt	ge
 80244ba:	6821      	ldrge	r1, [r4, #0]
 80244bc:	f021 0104 	bicge.w	r1, r1, #4
 80244c0:	6021      	strge	r1, [r4, #0]
 80244c2:	b90d      	cbnz	r5, 80244c8 <_printf_i+0x110>
 80244c4:	2e00      	cmp	r6, #0
 80244c6:	d04b      	beq.n	8024560 <_printf_i+0x1a8>
 80244c8:	4616      	mov	r6, r2
 80244ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80244ce:	fb03 5711 	mls	r7, r3, r1, r5
 80244d2:	5dc7      	ldrb	r7, [r0, r7]
 80244d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80244d8:	462f      	mov	r7, r5
 80244da:	42bb      	cmp	r3, r7
 80244dc:	460d      	mov	r5, r1
 80244de:	d9f4      	bls.n	80244ca <_printf_i+0x112>
 80244e0:	2b08      	cmp	r3, #8
 80244e2:	d10b      	bne.n	80244fc <_printf_i+0x144>
 80244e4:	6823      	ldr	r3, [r4, #0]
 80244e6:	07df      	lsls	r7, r3, #31
 80244e8:	d508      	bpl.n	80244fc <_printf_i+0x144>
 80244ea:	6923      	ldr	r3, [r4, #16]
 80244ec:	6861      	ldr	r1, [r4, #4]
 80244ee:	4299      	cmp	r1, r3
 80244f0:	bfde      	ittt	le
 80244f2:	2330      	movle	r3, #48	@ 0x30
 80244f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80244f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80244fc:	1b92      	subs	r2, r2, r6
 80244fe:	6122      	str	r2, [r4, #16]
 8024500:	f8cd a000 	str.w	sl, [sp]
 8024504:	464b      	mov	r3, r9
 8024506:	aa03      	add	r2, sp, #12
 8024508:	4621      	mov	r1, r4
 802450a:	4640      	mov	r0, r8
 802450c:	f7ff fee6 	bl	80242dc <_printf_common>
 8024510:	3001      	adds	r0, #1
 8024512:	d14a      	bne.n	80245aa <_printf_i+0x1f2>
 8024514:	f04f 30ff 	mov.w	r0, #4294967295
 8024518:	b004      	add	sp, #16
 802451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802451e:	6823      	ldr	r3, [r4, #0]
 8024520:	f043 0320 	orr.w	r3, r3, #32
 8024524:	6023      	str	r3, [r4, #0]
 8024526:	4833      	ldr	r0, [pc, #204]	@ (80245f4 <_printf_i+0x23c>)
 8024528:	2778      	movs	r7, #120	@ 0x78
 802452a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802452e:	6823      	ldr	r3, [r4, #0]
 8024530:	6831      	ldr	r1, [r6, #0]
 8024532:	061f      	lsls	r7, r3, #24
 8024534:	f851 5b04 	ldr.w	r5, [r1], #4
 8024538:	d402      	bmi.n	8024540 <_printf_i+0x188>
 802453a:	065f      	lsls	r7, r3, #25
 802453c:	bf48      	it	mi
 802453e:	b2ad      	uxthmi	r5, r5
 8024540:	6031      	str	r1, [r6, #0]
 8024542:	07d9      	lsls	r1, r3, #31
 8024544:	bf44      	itt	mi
 8024546:	f043 0320 	orrmi.w	r3, r3, #32
 802454a:	6023      	strmi	r3, [r4, #0]
 802454c:	b11d      	cbz	r5, 8024556 <_printf_i+0x19e>
 802454e:	2310      	movs	r3, #16
 8024550:	e7ac      	b.n	80244ac <_printf_i+0xf4>
 8024552:	4827      	ldr	r0, [pc, #156]	@ (80245f0 <_printf_i+0x238>)
 8024554:	e7e9      	b.n	802452a <_printf_i+0x172>
 8024556:	6823      	ldr	r3, [r4, #0]
 8024558:	f023 0320 	bic.w	r3, r3, #32
 802455c:	6023      	str	r3, [r4, #0]
 802455e:	e7f6      	b.n	802454e <_printf_i+0x196>
 8024560:	4616      	mov	r6, r2
 8024562:	e7bd      	b.n	80244e0 <_printf_i+0x128>
 8024564:	6833      	ldr	r3, [r6, #0]
 8024566:	6825      	ldr	r5, [r4, #0]
 8024568:	6961      	ldr	r1, [r4, #20]
 802456a:	1d18      	adds	r0, r3, #4
 802456c:	6030      	str	r0, [r6, #0]
 802456e:	062e      	lsls	r6, r5, #24
 8024570:	681b      	ldr	r3, [r3, #0]
 8024572:	d501      	bpl.n	8024578 <_printf_i+0x1c0>
 8024574:	6019      	str	r1, [r3, #0]
 8024576:	e002      	b.n	802457e <_printf_i+0x1c6>
 8024578:	0668      	lsls	r0, r5, #25
 802457a:	d5fb      	bpl.n	8024574 <_printf_i+0x1bc>
 802457c:	8019      	strh	r1, [r3, #0]
 802457e:	2300      	movs	r3, #0
 8024580:	6123      	str	r3, [r4, #16]
 8024582:	4616      	mov	r6, r2
 8024584:	e7bc      	b.n	8024500 <_printf_i+0x148>
 8024586:	6833      	ldr	r3, [r6, #0]
 8024588:	1d1a      	adds	r2, r3, #4
 802458a:	6032      	str	r2, [r6, #0]
 802458c:	681e      	ldr	r6, [r3, #0]
 802458e:	6862      	ldr	r2, [r4, #4]
 8024590:	2100      	movs	r1, #0
 8024592:	4630      	mov	r0, r6
 8024594:	f7db febc 	bl	8000310 <memchr>
 8024598:	b108      	cbz	r0, 802459e <_printf_i+0x1e6>
 802459a:	1b80      	subs	r0, r0, r6
 802459c:	6060      	str	r0, [r4, #4]
 802459e:	6863      	ldr	r3, [r4, #4]
 80245a0:	6123      	str	r3, [r4, #16]
 80245a2:	2300      	movs	r3, #0
 80245a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80245a8:	e7aa      	b.n	8024500 <_printf_i+0x148>
 80245aa:	6923      	ldr	r3, [r4, #16]
 80245ac:	4632      	mov	r2, r6
 80245ae:	4649      	mov	r1, r9
 80245b0:	4640      	mov	r0, r8
 80245b2:	47d0      	blx	sl
 80245b4:	3001      	adds	r0, #1
 80245b6:	d0ad      	beq.n	8024514 <_printf_i+0x15c>
 80245b8:	6823      	ldr	r3, [r4, #0]
 80245ba:	079b      	lsls	r3, r3, #30
 80245bc:	d413      	bmi.n	80245e6 <_printf_i+0x22e>
 80245be:	68e0      	ldr	r0, [r4, #12]
 80245c0:	9b03      	ldr	r3, [sp, #12]
 80245c2:	4298      	cmp	r0, r3
 80245c4:	bfb8      	it	lt
 80245c6:	4618      	movlt	r0, r3
 80245c8:	e7a6      	b.n	8024518 <_printf_i+0x160>
 80245ca:	2301      	movs	r3, #1
 80245cc:	4632      	mov	r2, r6
 80245ce:	4649      	mov	r1, r9
 80245d0:	4640      	mov	r0, r8
 80245d2:	47d0      	blx	sl
 80245d4:	3001      	adds	r0, #1
 80245d6:	d09d      	beq.n	8024514 <_printf_i+0x15c>
 80245d8:	3501      	adds	r5, #1
 80245da:	68e3      	ldr	r3, [r4, #12]
 80245dc:	9903      	ldr	r1, [sp, #12]
 80245de:	1a5b      	subs	r3, r3, r1
 80245e0:	42ab      	cmp	r3, r5
 80245e2:	dcf2      	bgt.n	80245ca <_printf_i+0x212>
 80245e4:	e7eb      	b.n	80245be <_printf_i+0x206>
 80245e6:	2500      	movs	r5, #0
 80245e8:	f104 0619 	add.w	r6, r4, #25
 80245ec:	e7f5      	b.n	80245da <_printf_i+0x222>
 80245ee:	bf00      	nop
 80245f0:	080281bd 	.word	0x080281bd
 80245f4:	080281ce 	.word	0x080281ce

080245f8 <__swbuf_r>:
 80245f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80245fa:	460e      	mov	r6, r1
 80245fc:	4614      	mov	r4, r2
 80245fe:	4605      	mov	r5, r0
 8024600:	b118      	cbz	r0, 802460a <__swbuf_r+0x12>
 8024602:	6a03      	ldr	r3, [r0, #32]
 8024604:	b90b      	cbnz	r3, 802460a <__swbuf_r+0x12>
 8024606:	f7ff f9dd 	bl	80239c4 <__sinit>
 802460a:	69a3      	ldr	r3, [r4, #24]
 802460c:	60a3      	str	r3, [r4, #8]
 802460e:	89a3      	ldrh	r3, [r4, #12]
 8024610:	071a      	lsls	r2, r3, #28
 8024612:	d501      	bpl.n	8024618 <__swbuf_r+0x20>
 8024614:	6923      	ldr	r3, [r4, #16]
 8024616:	b943      	cbnz	r3, 802462a <__swbuf_r+0x32>
 8024618:	4621      	mov	r1, r4
 802461a:	4628      	mov	r0, r5
 802461c:	f000 f82a 	bl	8024674 <__swsetup_r>
 8024620:	b118      	cbz	r0, 802462a <__swbuf_r+0x32>
 8024622:	f04f 37ff 	mov.w	r7, #4294967295
 8024626:	4638      	mov	r0, r7
 8024628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802462a:	6823      	ldr	r3, [r4, #0]
 802462c:	6922      	ldr	r2, [r4, #16]
 802462e:	1a98      	subs	r0, r3, r2
 8024630:	6963      	ldr	r3, [r4, #20]
 8024632:	b2f6      	uxtb	r6, r6
 8024634:	4283      	cmp	r3, r0
 8024636:	4637      	mov	r7, r6
 8024638:	dc05      	bgt.n	8024646 <__swbuf_r+0x4e>
 802463a:	4621      	mov	r1, r4
 802463c:	4628      	mov	r0, r5
 802463e:	f7ff fcbb 	bl	8023fb8 <_fflush_r>
 8024642:	2800      	cmp	r0, #0
 8024644:	d1ed      	bne.n	8024622 <__swbuf_r+0x2a>
 8024646:	68a3      	ldr	r3, [r4, #8]
 8024648:	3b01      	subs	r3, #1
 802464a:	60a3      	str	r3, [r4, #8]
 802464c:	6823      	ldr	r3, [r4, #0]
 802464e:	1c5a      	adds	r2, r3, #1
 8024650:	6022      	str	r2, [r4, #0]
 8024652:	701e      	strb	r6, [r3, #0]
 8024654:	6962      	ldr	r2, [r4, #20]
 8024656:	1c43      	adds	r3, r0, #1
 8024658:	429a      	cmp	r2, r3
 802465a:	d004      	beq.n	8024666 <__swbuf_r+0x6e>
 802465c:	89a3      	ldrh	r3, [r4, #12]
 802465e:	07db      	lsls	r3, r3, #31
 8024660:	d5e1      	bpl.n	8024626 <__swbuf_r+0x2e>
 8024662:	2e0a      	cmp	r6, #10
 8024664:	d1df      	bne.n	8024626 <__swbuf_r+0x2e>
 8024666:	4621      	mov	r1, r4
 8024668:	4628      	mov	r0, r5
 802466a:	f7ff fca5 	bl	8023fb8 <_fflush_r>
 802466e:	2800      	cmp	r0, #0
 8024670:	d0d9      	beq.n	8024626 <__swbuf_r+0x2e>
 8024672:	e7d6      	b.n	8024622 <__swbuf_r+0x2a>

08024674 <__swsetup_r>:
 8024674:	b538      	push	{r3, r4, r5, lr}
 8024676:	4b29      	ldr	r3, [pc, #164]	@ (802471c <__swsetup_r+0xa8>)
 8024678:	4605      	mov	r5, r0
 802467a:	6818      	ldr	r0, [r3, #0]
 802467c:	460c      	mov	r4, r1
 802467e:	b118      	cbz	r0, 8024688 <__swsetup_r+0x14>
 8024680:	6a03      	ldr	r3, [r0, #32]
 8024682:	b90b      	cbnz	r3, 8024688 <__swsetup_r+0x14>
 8024684:	f7ff f99e 	bl	80239c4 <__sinit>
 8024688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802468c:	0719      	lsls	r1, r3, #28
 802468e:	d422      	bmi.n	80246d6 <__swsetup_r+0x62>
 8024690:	06da      	lsls	r2, r3, #27
 8024692:	d407      	bmi.n	80246a4 <__swsetup_r+0x30>
 8024694:	2209      	movs	r2, #9
 8024696:	602a      	str	r2, [r5, #0]
 8024698:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802469c:	81a3      	strh	r3, [r4, #12]
 802469e:	f04f 30ff 	mov.w	r0, #4294967295
 80246a2:	e033      	b.n	802470c <__swsetup_r+0x98>
 80246a4:	0758      	lsls	r0, r3, #29
 80246a6:	d512      	bpl.n	80246ce <__swsetup_r+0x5a>
 80246a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80246aa:	b141      	cbz	r1, 80246be <__swsetup_r+0x4a>
 80246ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80246b0:	4299      	cmp	r1, r3
 80246b2:	d002      	beq.n	80246ba <__swsetup_r+0x46>
 80246b4:	4628      	mov	r0, r5
 80246b6:	f7ff fafb 	bl	8023cb0 <_free_r>
 80246ba:	2300      	movs	r3, #0
 80246bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80246be:	89a3      	ldrh	r3, [r4, #12]
 80246c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80246c4:	81a3      	strh	r3, [r4, #12]
 80246c6:	2300      	movs	r3, #0
 80246c8:	6063      	str	r3, [r4, #4]
 80246ca:	6923      	ldr	r3, [r4, #16]
 80246cc:	6023      	str	r3, [r4, #0]
 80246ce:	89a3      	ldrh	r3, [r4, #12]
 80246d0:	f043 0308 	orr.w	r3, r3, #8
 80246d4:	81a3      	strh	r3, [r4, #12]
 80246d6:	6923      	ldr	r3, [r4, #16]
 80246d8:	b94b      	cbnz	r3, 80246ee <__swsetup_r+0x7a>
 80246da:	89a3      	ldrh	r3, [r4, #12]
 80246dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80246e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80246e4:	d003      	beq.n	80246ee <__swsetup_r+0x7a>
 80246e6:	4621      	mov	r1, r4
 80246e8:	4628      	mov	r0, r5
 80246ea:	f000 f883 	bl	80247f4 <__smakebuf_r>
 80246ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80246f2:	f013 0201 	ands.w	r2, r3, #1
 80246f6:	d00a      	beq.n	802470e <__swsetup_r+0x9a>
 80246f8:	2200      	movs	r2, #0
 80246fa:	60a2      	str	r2, [r4, #8]
 80246fc:	6962      	ldr	r2, [r4, #20]
 80246fe:	4252      	negs	r2, r2
 8024700:	61a2      	str	r2, [r4, #24]
 8024702:	6922      	ldr	r2, [r4, #16]
 8024704:	b942      	cbnz	r2, 8024718 <__swsetup_r+0xa4>
 8024706:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802470a:	d1c5      	bne.n	8024698 <__swsetup_r+0x24>
 802470c:	bd38      	pop	{r3, r4, r5, pc}
 802470e:	0799      	lsls	r1, r3, #30
 8024710:	bf58      	it	pl
 8024712:	6962      	ldrpl	r2, [r4, #20]
 8024714:	60a2      	str	r2, [r4, #8]
 8024716:	e7f4      	b.n	8024702 <__swsetup_r+0x8e>
 8024718:	2000      	movs	r0, #0
 802471a:	e7f7      	b.n	802470c <__swsetup_r+0x98>
 802471c:	20000038 	.word	0x20000038

08024720 <_raise_r>:
 8024720:	291f      	cmp	r1, #31
 8024722:	b538      	push	{r3, r4, r5, lr}
 8024724:	4605      	mov	r5, r0
 8024726:	460c      	mov	r4, r1
 8024728:	d904      	bls.n	8024734 <_raise_r+0x14>
 802472a:	2316      	movs	r3, #22
 802472c:	6003      	str	r3, [r0, #0]
 802472e:	f04f 30ff 	mov.w	r0, #4294967295
 8024732:	bd38      	pop	{r3, r4, r5, pc}
 8024734:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8024736:	b112      	cbz	r2, 802473e <_raise_r+0x1e>
 8024738:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802473c:	b94b      	cbnz	r3, 8024752 <_raise_r+0x32>
 802473e:	4628      	mov	r0, r5
 8024740:	f000 f830 	bl	80247a4 <_getpid_r>
 8024744:	4622      	mov	r2, r4
 8024746:	4601      	mov	r1, r0
 8024748:	4628      	mov	r0, r5
 802474a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802474e:	f000 b817 	b.w	8024780 <_kill_r>
 8024752:	2b01      	cmp	r3, #1
 8024754:	d00a      	beq.n	802476c <_raise_r+0x4c>
 8024756:	1c59      	adds	r1, r3, #1
 8024758:	d103      	bne.n	8024762 <_raise_r+0x42>
 802475a:	2316      	movs	r3, #22
 802475c:	6003      	str	r3, [r0, #0]
 802475e:	2001      	movs	r0, #1
 8024760:	e7e7      	b.n	8024732 <_raise_r+0x12>
 8024762:	2100      	movs	r1, #0
 8024764:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8024768:	4620      	mov	r0, r4
 802476a:	4798      	blx	r3
 802476c:	2000      	movs	r0, #0
 802476e:	e7e0      	b.n	8024732 <_raise_r+0x12>

08024770 <raise>:
 8024770:	4b02      	ldr	r3, [pc, #8]	@ (802477c <raise+0xc>)
 8024772:	4601      	mov	r1, r0
 8024774:	6818      	ldr	r0, [r3, #0]
 8024776:	f7ff bfd3 	b.w	8024720 <_raise_r>
 802477a:	bf00      	nop
 802477c:	20000038 	.word	0x20000038

08024780 <_kill_r>:
 8024780:	b538      	push	{r3, r4, r5, lr}
 8024782:	4d07      	ldr	r5, [pc, #28]	@ (80247a0 <_kill_r+0x20>)
 8024784:	2300      	movs	r3, #0
 8024786:	4604      	mov	r4, r0
 8024788:	4608      	mov	r0, r1
 802478a:	4611      	mov	r1, r2
 802478c:	602b      	str	r3, [r5, #0]
 802478e:	f7de fc99 	bl	80030c4 <_kill>
 8024792:	1c43      	adds	r3, r0, #1
 8024794:	d102      	bne.n	802479c <_kill_r+0x1c>
 8024796:	682b      	ldr	r3, [r5, #0]
 8024798:	b103      	cbz	r3, 802479c <_kill_r+0x1c>
 802479a:	6023      	str	r3, [r4, #0]
 802479c:	bd38      	pop	{r3, r4, r5, pc}
 802479e:	bf00      	nop
 80247a0:	20002878 	.word	0x20002878

080247a4 <_getpid_r>:
 80247a4:	f7de bc86 	b.w	80030b4 <_getpid>

080247a8 <__swhatbuf_r>:
 80247a8:	b570      	push	{r4, r5, r6, lr}
 80247aa:	460c      	mov	r4, r1
 80247ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80247b0:	2900      	cmp	r1, #0
 80247b2:	b096      	sub	sp, #88	@ 0x58
 80247b4:	4615      	mov	r5, r2
 80247b6:	461e      	mov	r6, r3
 80247b8:	da0d      	bge.n	80247d6 <__swhatbuf_r+0x2e>
 80247ba:	89a3      	ldrh	r3, [r4, #12]
 80247bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80247c0:	f04f 0100 	mov.w	r1, #0
 80247c4:	bf14      	ite	ne
 80247c6:	2340      	movne	r3, #64	@ 0x40
 80247c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80247cc:	2000      	movs	r0, #0
 80247ce:	6031      	str	r1, [r6, #0]
 80247d0:	602b      	str	r3, [r5, #0]
 80247d2:	b016      	add	sp, #88	@ 0x58
 80247d4:	bd70      	pop	{r4, r5, r6, pc}
 80247d6:	466a      	mov	r2, sp
 80247d8:	f000 f848 	bl	802486c <_fstat_r>
 80247dc:	2800      	cmp	r0, #0
 80247de:	dbec      	blt.n	80247ba <__swhatbuf_r+0x12>
 80247e0:	9901      	ldr	r1, [sp, #4]
 80247e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80247e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80247ea:	4259      	negs	r1, r3
 80247ec:	4159      	adcs	r1, r3
 80247ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80247f2:	e7eb      	b.n	80247cc <__swhatbuf_r+0x24>

080247f4 <__smakebuf_r>:
 80247f4:	898b      	ldrh	r3, [r1, #12]
 80247f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80247f8:	079d      	lsls	r5, r3, #30
 80247fa:	4606      	mov	r6, r0
 80247fc:	460c      	mov	r4, r1
 80247fe:	d507      	bpl.n	8024810 <__smakebuf_r+0x1c>
 8024800:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8024804:	6023      	str	r3, [r4, #0]
 8024806:	6123      	str	r3, [r4, #16]
 8024808:	2301      	movs	r3, #1
 802480a:	6163      	str	r3, [r4, #20]
 802480c:	b003      	add	sp, #12
 802480e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024810:	ab01      	add	r3, sp, #4
 8024812:	466a      	mov	r2, sp
 8024814:	f7ff ffc8 	bl	80247a8 <__swhatbuf_r>
 8024818:	9f00      	ldr	r7, [sp, #0]
 802481a:	4605      	mov	r5, r0
 802481c:	4639      	mov	r1, r7
 802481e:	4630      	mov	r0, r6
 8024820:	f7ff faba 	bl	8023d98 <_malloc_r>
 8024824:	b948      	cbnz	r0, 802483a <__smakebuf_r+0x46>
 8024826:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802482a:	059a      	lsls	r2, r3, #22
 802482c:	d4ee      	bmi.n	802480c <__smakebuf_r+0x18>
 802482e:	f023 0303 	bic.w	r3, r3, #3
 8024832:	f043 0302 	orr.w	r3, r3, #2
 8024836:	81a3      	strh	r3, [r4, #12]
 8024838:	e7e2      	b.n	8024800 <__smakebuf_r+0xc>
 802483a:	89a3      	ldrh	r3, [r4, #12]
 802483c:	6020      	str	r0, [r4, #0]
 802483e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8024842:	81a3      	strh	r3, [r4, #12]
 8024844:	9b01      	ldr	r3, [sp, #4]
 8024846:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802484a:	b15b      	cbz	r3, 8024864 <__smakebuf_r+0x70>
 802484c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024850:	4630      	mov	r0, r6
 8024852:	f000 f81d 	bl	8024890 <_isatty_r>
 8024856:	b128      	cbz	r0, 8024864 <__smakebuf_r+0x70>
 8024858:	89a3      	ldrh	r3, [r4, #12]
 802485a:	f023 0303 	bic.w	r3, r3, #3
 802485e:	f043 0301 	orr.w	r3, r3, #1
 8024862:	81a3      	strh	r3, [r4, #12]
 8024864:	89a3      	ldrh	r3, [r4, #12]
 8024866:	431d      	orrs	r5, r3
 8024868:	81a5      	strh	r5, [r4, #12]
 802486a:	e7cf      	b.n	802480c <__smakebuf_r+0x18>

0802486c <_fstat_r>:
 802486c:	b538      	push	{r3, r4, r5, lr}
 802486e:	4d07      	ldr	r5, [pc, #28]	@ (802488c <_fstat_r+0x20>)
 8024870:	2300      	movs	r3, #0
 8024872:	4604      	mov	r4, r0
 8024874:	4608      	mov	r0, r1
 8024876:	4611      	mov	r1, r2
 8024878:	602b      	str	r3, [r5, #0]
 802487a:	f7de fc83 	bl	8003184 <_fstat>
 802487e:	1c43      	adds	r3, r0, #1
 8024880:	d102      	bne.n	8024888 <_fstat_r+0x1c>
 8024882:	682b      	ldr	r3, [r5, #0]
 8024884:	b103      	cbz	r3, 8024888 <_fstat_r+0x1c>
 8024886:	6023      	str	r3, [r4, #0]
 8024888:	bd38      	pop	{r3, r4, r5, pc}
 802488a:	bf00      	nop
 802488c:	20002878 	.word	0x20002878

08024890 <_isatty_r>:
 8024890:	b538      	push	{r3, r4, r5, lr}
 8024892:	4d06      	ldr	r5, [pc, #24]	@ (80248ac <_isatty_r+0x1c>)
 8024894:	2300      	movs	r3, #0
 8024896:	4604      	mov	r4, r0
 8024898:	4608      	mov	r0, r1
 802489a:	602b      	str	r3, [r5, #0]
 802489c:	f7de fc82 	bl	80031a4 <_isatty>
 80248a0:	1c43      	adds	r3, r0, #1
 80248a2:	d102      	bne.n	80248aa <_isatty_r+0x1a>
 80248a4:	682b      	ldr	r3, [r5, #0]
 80248a6:	b103      	cbz	r3, 80248aa <_isatty_r+0x1a>
 80248a8:	6023      	str	r3, [r4, #0]
 80248aa:	bd38      	pop	{r3, r4, r5, pc}
 80248ac:	20002878 	.word	0x20002878

080248b0 <_init>:
 80248b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248b2:	bf00      	nop
 80248b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80248b6:	bc08      	pop	{r3}
 80248b8:	469e      	mov	lr, r3
 80248ba:	4770      	bx	lr

080248bc <_fini>:
 80248bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80248be:	bf00      	nop
 80248c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80248c2:	bc08      	pop	{r3}
 80248c4:	469e      	mov	lr, r3
 80248c6:	4770      	bx	lr
