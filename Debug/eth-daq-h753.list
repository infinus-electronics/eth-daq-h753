
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023da8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003860  08024048  08024048  00025048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080278a8  080278a8  000288a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080278b0  080278b0  000288b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080278b4  080278b4  000288b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  080278b8  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002778  20000088  08027940  00029088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002800  08027940  00029800  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002e00  08027940  00029e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00042000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00030110  30000000  30000000  0009b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008000  38000000  38000000  000cc000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000d4000  2**0
                  CONTENTS, READONLY
 14 .debug_info   000632df  00000000  00000000  000d402e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c01b  00000000  00000000  0013730d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003198  00000000  00000000  00143328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000027bd  00000000  00000000  001464c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f652  00000000  00000000  00148c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005ca17  00000000  00000000  001982cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191efd  00000000  00000000  001f4ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00386be3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d7bc  00000000  00000000  00386c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  003943e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08024030 	.word	0x08024030

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08024030 	.word	0x08024030

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b08a      	sub	sp, #40	@ 0x28
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 fc0b 	bl	8001ec0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	617b      	str	r3, [r7, #20]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	613b      	str	r3, [r7, #16]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	697b      	ldr	r3, [r7, #20]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	60fb      	str	r3, [r7, #12]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	68fa      	ldr	r2, [r7, #12]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	60fa      	str	r2, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	613a      	str	r2, [r7, #16]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f019 fb29 	bl	8019dcc <HAL_Init>

  /* USER CODE BEGIN Init */
  usZero = 0;
 800077a:	4ba7      	ldr	r3, [pc, #668]	@ (8000a18 <main+0x378>)
 800077c:	2200      	movs	r2, #0
 800077e:	801a      	strh	r2, [r3, #0]

  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 8000780:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000784:	2141      	movs	r1, #65	@ 0x41
 8000786:	48a5      	ldr	r0, [pc, #660]	@ (8000a1c <main+0x37c>)
 8000788:	f021 fedf 	bl	802254a <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 800078c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000790:	2142      	movs	r1, #66	@ 0x42
 8000792:	48a3      	ldr	r0, [pc, #652]	@ (8000a20 <main+0x380>)
 8000794:	f021 fed9 	bl	802254a <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000798:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800079c:	2143      	movs	r1, #67	@ 0x43
 800079e:	48a1      	ldr	r0, [pc, #644]	@ (8000a24 <main+0x384>)
 80007a0:	f021 fed3 	bl	802254a <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 80007a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80007a8:	2144      	movs	r1, #68	@ 0x44
 80007aa:	489f      	ldr	r0, [pc, #636]	@ (8000a28 <main+0x388>)
 80007ac:	f021 fecd 	bl	802254a <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007b0:	f3bf 8f4f 	dsb	sy
}
 80007b4:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 fb8b 	bl	8000ed0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ba:	f000 fc37 	bl	800102c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007be:	f001 f89d 	bl	80018fc <vHeapInit>
  vStartHighResolutionTimer();
 80007c2:	f021 fce1 	bl	8022188 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 ffc1 	bl	800174c <MX_GPIO_Init>
  MX_DMA_Init();
 80007ca:	f000 ff67 	bl	800169c <MX_DMA_Init>
//  MX_ETH_Init();
  MX_USART3_UART_Init();
 80007ce:	f000 ff19 	bl	8001604 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007d2:	f000 fc9b 	bl	800110c <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d6:	f000 fcf1 	bl	80011bc <MX_SPI2_Init>
  MX_SPI3_Init();
 80007da:	f000 fd45 	bl	8001268 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007de:	f000 fd9b 	bl	8001318 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007e2:	f000 fdeb 	bl	80013bc <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e6:	f000 fc51 	bl	800108c <MX_I2C4_Init>
  MX_TIM4_Init();
 80007ea:	f000 fe35 	bl	8001458 <MX_TIM4_Init>
  MX_TIM5_Init();
 80007ee:	f000 feb9 	bl	8001564 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  //7 Segment Setup
  //TIM4 CH1
  DMA1_Stream4->M0AR = &ulSevenSegD1;
 80007f2:	4b8e      	ldr	r3, [pc, #568]	@ (8000a2c <main+0x38c>)
 80007f4:	4a8e      	ldr	r2, [pc, #568]	@ (8000a30 <main+0x390>)
 80007f6:	60da      	str	r2, [r3, #12]
  DMA1_Stream4->PAR = &(GPIOD->BSRR); //top 16 bits are reset, bottom 16 bits are set, set has priority if both bits set
 80007f8:	4b8c      	ldr	r3, [pc, #560]	@ (8000a2c <main+0x38c>)
 80007fa:	4a8e      	ldr	r2, [pc, #568]	@ (8000a34 <main+0x394>)
 80007fc:	609a      	str	r2, [r3, #8]
  DMA1_Stream4->NDTR = 1;
 80007fe:	4b8b      	ldr	r3, [pc, #556]	@ (8000a2c <main+0x38c>)
 8000800:	2201      	movs	r2, #1
 8000802:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000804:	f3bf 8f4f 	dsb	sy
}
 8000808:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream4->CR |= DMA_SxCR_EN;
 800080a:	4b88      	ldr	r3, [pc, #544]	@ (8000a2c <main+0x38c>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a87      	ldr	r2, [pc, #540]	@ (8000a2c <main+0x38c>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6013      	str	r3, [r2, #0]
  //TIM4 UP
  DMA1_Stream5->M0AR = &ulSevenSegD2;
 8000816:	4b88      	ldr	r3, [pc, #544]	@ (8000a38 <main+0x398>)
 8000818:	4a88      	ldr	r2, [pc, #544]	@ (8000a3c <main+0x39c>)
 800081a:	60da      	str	r2, [r3, #12]
  DMA1_Stream5->PAR = &(GPIOD->BSRR);
 800081c:	4b86      	ldr	r3, [pc, #536]	@ (8000a38 <main+0x398>)
 800081e:	4a85      	ldr	r2, [pc, #532]	@ (8000a34 <main+0x394>)
 8000820:	609a      	str	r2, [r3, #8]
  DMA1_Stream5->NDTR = 1;
 8000822:	4b85      	ldr	r3, [pc, #532]	@ (8000a38 <main+0x398>)
 8000824:	2201      	movs	r2, #1
 8000826:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000828:	f3bf 8f4f 	dsb	sy
}
 800082c:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream5->CR |= DMA_SxCR_EN;
 800082e:	4b82      	ldr	r3, [pc, #520]	@ (8000a38 <main+0x398>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a81      	ldr	r2, [pc, #516]	@ (8000a38 <main+0x398>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6013      	str	r3, [r2, #0]
  //??? initializing the vars in the top just doesn't work???
  ulSevenSegD2 = 0x00FF00FF;
 800083a:	4b80      	ldr	r3, [pc, #512]	@ (8000a3c <main+0x39c>)
 800083c:	f04f 12ff 	mov.w	r2, #16711935	@ 0xff00ff
 8000840:	601a      	str	r2, [r3, #0]
  ulSevenSegD1 = 0x00FF000F;
 8000842:	4b7b      	ldr	r3, [pc, #492]	@ (8000a30 <main+0x390>)
 8000844:	4a7e      	ldr	r2, [pc, #504]	@ (8000a40 <main+0x3a0>)
 8000846:	601a      	str	r2, [r3, #0]
  //TIM4 drives multiplexing
  TIM4->CR1 |= TIM_CR1_URS;
 8000848:	4b7e      	ldr	r3, [pc, #504]	@ (8000a44 <main+0x3a4>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a7d      	ldr	r2, [pc, #500]	@ (8000a44 <main+0x3a4>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6013      	str	r3, [r2, #0]
  TIM4->CR1 &= ~TIM_CR1_UDIS;
 8000854:	4b7b      	ldr	r3, [pc, #492]	@ (8000a44 <main+0x3a4>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a7a      	ldr	r2, [pc, #488]	@ (8000a44 <main+0x3a4>)
 800085a:	f023 0302 	bic.w	r3, r3, #2
 800085e:	6013      	str	r3, [r2, #0]
  TIM4->CR2 &= ~TIM_CR2_CCDS;
 8000860:	4b78      	ldr	r3, [pc, #480]	@ (8000a44 <main+0x3a4>)
 8000862:	685b      	ldr	r3, [r3, #4]
 8000864:	4a77      	ldr	r2, [pc, #476]	@ (8000a44 <main+0x3a4>)
 8000866:	f023 0308 	bic.w	r3, r3, #8
 800086a:	6053      	str	r3, [r2, #4]
  TIM4->DIER |= TIM_DIER_UDE | TIM_DIER_CC1DE;
 800086c:	4b75      	ldr	r3, [pc, #468]	@ (8000a44 <main+0x3a4>)
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	4a74      	ldr	r2, [pc, #464]	@ (8000a44 <main+0x3a4>)
 8000872:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000876:	60d3      	str	r3, [r2, #12]
  TIM4->CCER |= TIM_CCER_CC1E | TIM_CCER_CC2E;
 8000878:	4b72      	ldr	r3, [pc, #456]	@ (8000a44 <main+0x3a4>)
 800087a:	6a1b      	ldr	r3, [r3, #32]
 800087c:	4a71      	ldr	r2, [pc, #452]	@ (8000a44 <main+0x3a4>)
 800087e:	f043 0311 	orr.w	r3, r3, #17
 8000882:	6213      	str	r3, [r2, #32]
  TIM4->EGR |= TIM_EGR_UG | TIM_EGR_CC1G;
 8000884:	4b6f      	ldr	r3, [pc, #444]	@ (8000a44 <main+0x3a4>)
 8000886:	695b      	ldr	r3, [r3, #20]
 8000888:	4a6e      	ldr	r2, [pc, #440]	@ (8000a44 <main+0x3a4>)
 800088a:	f043 0303 	orr.w	r3, r3, #3
 800088e:	6153      	str	r3, [r2, #20]
  TIM4->CR1 |= TIM_CR1_CEN;
 8000890:	4b6c      	ldr	r3, [pc, #432]	@ (8000a44 <main+0x3a4>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a6b      	ldr	r2, [pc, #428]	@ (8000a44 <main+0x3a4>)
 8000896:	f043 0301 	orr.w	r3, r3, #1
 800089a:	6013      	str	r3, [r2, #0]

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 800089c:	2200      	movs	r2, #0
 800089e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008a2:	4869      	ldr	r0, [pc, #420]	@ (8000a48 <main+0x3a8>)
 80008a4:	f01b fda8 	bl	801c3f8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80008a8:	2200      	movs	r2, #0
 80008aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80008ae:	4866      	ldr	r0, [pc, #408]	@ (8000a48 <main+0x3a8>)
 80008b0:	f01b fda2 	bl	801c3f8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008b4:	2032      	movs	r0, #50	@ 0x32
 80008b6:	f019 fb1b 	bl	8019ef0 <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80008c0:	4861      	ldr	r0, [pc, #388]	@ (8000a48 <main+0x3a8>)
 80008c2:	f01b fd99 	bl	801c3f8 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80008c6:	2032      	movs	r0, #50	@ 0x32
 80008c8:	f019 fb12 	bl	8019ef0 <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 80008cc:	4b5f      	ldr	r3, [pc, #380]	@ (8000a4c <main+0x3ac>)
 80008ce:	4a60      	ldr	r2, [pc, #384]	@ (8000a50 <main+0x3b0>)
 80008d0:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 80008d2:	bf00      	nop
 80008d4:	4b5d      	ldr	r3, [pc, #372]	@ (8000a4c <main+0x3ac>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0312 	and.w	r3, r3, #18
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d0f9      	beq.n	80008d4 <main+0x234>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 80008e0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a4c <main+0x3ac>)
 80008e2:	2239      	movs	r2, #57	@ 0x39
 80008e4:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008e6:	bf00      	nop
 80008e8:	4b58      	ldr	r3, [pc, #352]	@ (8000a4c <main+0x3ac>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0302 	and.w	r3, r3, #2
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d0f9      	beq.n	80008e8 <main+0x248>
  I2C4->TXDR = 0; //MSB
 80008f4:	4b55      	ldr	r3, [pc, #340]	@ (8000a4c <main+0x3ac>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 80008fa:	bf00      	nop
 80008fc:	4b53      	ldr	r3, [pc, #332]	@ (8000a4c <main+0x3ac>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f003 0302 	and.w	r3, r3, #2
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f9      	beq.n	80008fc <main+0x25c>
  I2C4->TXDR = 4; //LSB
 8000908:	4b50      	ldr	r3, [pc, #320]	@ (8000a4c <main+0x3ac>)
 800090a:	2204      	movs	r2, #4
 800090c:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 800090e:	bf00      	nop
 8000910:	4b4e      	ldr	r3, [pc, #312]	@ (8000a4c <main+0x3ac>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	2b00      	cmp	r3, #0
 800091a:	d0f9      	beq.n	8000910 <main+0x270>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 800091c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a4c <main+0x3ac>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f003 0310 	and.w	r3, r3, #16
 8000924:	2b00      	cmp	r3, #0
 8000926:	d005      	beq.n	8000934 <main+0x294>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000928:	4b48      	ldr	r3, [pc, #288]	@ (8000a4c <main+0x3ac>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a47      	ldr	r2, [pc, #284]	@ (8000a4c <main+0x3ac>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 8000934:	4b47      	ldr	r3, [pc, #284]	@ (8000a54 <main+0x3b4>)
 8000936:	4a39      	ldr	r2, [pc, #228]	@ (8000a1c <main+0x37c>)
 8000938:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 800093a:	4b46      	ldr	r3, [pc, #280]	@ (8000a54 <main+0x3b4>)
 800093c:	4a38      	ldr	r2, [pc, #224]	@ (8000a20 <main+0x380>)
 800093e:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 8000940:	4b44      	ldr	r3, [pc, #272]	@ (8000a54 <main+0x3b4>)
 8000942:	4a45      	ldr	r2, [pc, #276]	@ (8000a58 <main+0x3b8>)
 8000944:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 8000946:	4b43      	ldr	r3, [pc, #268]	@ (8000a54 <main+0x3b4>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a42      	ldr	r2, [pc, #264]	@ (8000a54 <main+0x3b4>)
 800094c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000950:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 8000952:	4b40      	ldr	r3, [pc, #256]	@ (8000a54 <main+0x3b4>)
 8000954:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000958:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 800095a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a54 <main+0x3b4>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a3d      	ldr	r2, [pc, #244]	@ (8000a54 <main+0x3b4>)
 8000960:	f043 0310 	orr.w	r3, r3, #16
 8000964:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000966:	f3bf 8f4f 	dsb	sy
}
 800096a:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 800096c:	4b39      	ldr	r3, [pc, #228]	@ (8000a54 <main+0x3b4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a38      	ldr	r2, [pc, #224]	@ (8000a54 <main+0x3b4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000978:	4b38      	ldr	r3, [pc, #224]	@ (8000a5c <main+0x3bc>)
 800097a:	4a2a      	ldr	r2, [pc, #168]	@ (8000a24 <main+0x384>)
 800097c:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800097e:	4b37      	ldr	r3, [pc, #220]	@ (8000a5c <main+0x3bc>)
 8000980:	4a29      	ldr	r2, [pc, #164]	@ (8000a28 <main+0x388>)
 8000982:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000984:	4b35      	ldr	r3, [pc, #212]	@ (8000a5c <main+0x3bc>)
 8000986:	4a36      	ldr	r2, [pc, #216]	@ (8000a60 <main+0x3c0>)
 8000988:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 800098a:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <main+0x3bc>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a33      	ldr	r2, [pc, #204]	@ (8000a5c <main+0x3bc>)
 8000990:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000994:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000996:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <main+0x3bc>)
 8000998:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800099c:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800099e:	4b2f      	ldr	r3, [pc, #188]	@ (8000a5c <main+0x3bc>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a5c <main+0x3bc>)
 80009a4:	f043 0310 	orr.w	r3, r3, #16
 80009a8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80009aa:	f3bf 8f4f 	dsb	sy
}
 80009ae:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80009b0:	4b2a      	ldr	r3, [pc, #168]	@ (8000a5c <main+0x3bc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a29      	ldr	r2, [pc, #164]	@ (8000a5c <main+0x3bc>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <main+0x3c4>)
 80009be:	4a16      	ldr	r2, [pc, #88]	@ (8000a18 <main+0x378>)
 80009c0:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <main+0x3c4>)
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <main+0x3c8>)
 80009c6:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 80009c8:	4b26      	ldr	r3, [pc, #152]	@ (8000a64 <main+0x3c4>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009ce:	f3bf 8f4f 	dsb	sy
}
 80009d2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 80009d4:	4b23      	ldr	r3, [pc, #140]	@ (8000a64 <main+0x3c4>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a22      	ldr	r2, [pc, #136]	@ (8000a64 <main+0x3c4>)
 80009da:	f043 0301 	orr.w	r3, r3, #1
 80009de:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <main+0x3cc>)
 80009e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000a18 <main+0x378>)
 80009e4:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 80009e6:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <main+0x3cc>)
 80009e8:	4a21      	ldr	r2, [pc, #132]	@ (8000a70 <main+0x3d0>)
 80009ea:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 80009ec:	4b1f      	ldr	r3, [pc, #124]	@ (8000a6c <main+0x3cc>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80009f2:	f3bf 8f4f 	dsb	sy
}
 80009f6:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80009f8:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <main+0x3cc>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1b      	ldr	r2, [pc, #108]	@ (8000a6c <main+0x3cc>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR2 = 0; //reinitialize tsize
 8000a04:	4b1b      	ldr	r3, [pc, #108]	@ (8000a74 <main+0x3d4>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	605a      	str	r2, [r3, #4]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000a0a:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <main+0x3d4>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a19      	ldr	r2, [pc, #100]	@ (8000a74 <main+0x3d4>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	e030      	b.n	8000a78 <main+0x3d8>
 8000a16:	bf00      	nop
 8000a18:	30000000 	.word	0x30000000
 8000a1c:	30000004 	.word	0x30000004
 8000a20:	30010004 	.word	0x30010004
 8000a24:	30020004 	.word	0x30020004
 8000a28:	30028004 	.word	0x30028004
 8000a2c:	40020070 	.word	0x40020070
 8000a30:	30030108 	.word	0x30030108
 8000a34:	58020c18 	.word	0x58020c18
 8000a38:	40020088 	.word	0x40020088
 8000a3c:	3003010c 	.word	0x3003010c
 8000a40:	00ff000f 	.word	0x00ff000f
 8000a44:	40000800 	.word	0x40000800
 8000a48:	58020c00 	.word	0x58020c00
 8000a4c:	58001c00 	.word	0x58001c00
 8000a50:	02032018 	.word	0x02032018
 8000a54:	40020010 	.word	0x40020010
 8000a58:	40013030 	.word	0x40013030
 8000a5c:	40020028 	.word	0x40020028
 8000a60:	40003830 	.word	0x40003830
 8000a64:	40020040 	.word	0x40020040
 8000a68:	40013020 	.word	0x40013020
 8000a6c:	40020058 	.word	0x40020058
 8000a70:	40003820 	.word	0x40003820
 8000a74:	40013000 	.word	0x40013000
 8000a78:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000a7a:	4ba3      	ldr	r3, [pc, #652]	@ (8000d08 <main+0x668>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	4aa2      	ldr	r2, [pc, #648]	@ (8000d08 <main+0x668>)
 8000a80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a84:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8c:	489f      	ldr	r0, [pc, #636]	@ (8000d0c <main+0x66c>)
 8000a8e:	f01b fcb3 	bl	801c3f8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000a92:	2064      	movs	r0, #100	@ 0x64
 8000a94:	f019 fa2c 	bl	8019ef0 <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a9e:	489b      	ldr	r0, [pc, #620]	@ (8000d0c <main+0x66c>)
 8000aa0:	f01b fcaa 	bl	801c3f8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	@ 0x64
 8000aa6:	f019 fa23 	bl	8019ef0 <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000aaa:	f248 531b 	movw	r3, #34075	@ 0x851b
 8000aae:	813b      	strh	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ab0:	7a7b      	ldrb	r3, [r7, #9]
 8000ab2:	021b      	lsls	r3, r3, #8
 8000ab4:	7a3a      	ldrb	r2, [r7, #8]
 8000ab6:	431a      	orrs	r2, r3
 8000ab8:	4b93      	ldr	r3, [pc, #588]	@ (8000d08 <main+0x668>)
 8000aba:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000abc:	bf00      	nop
 8000abe:	4b92      	ldr	r3, [pc, #584]	@ (8000d08 <main+0x668>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d0f9      	beq.n	8000abe <main+0x41e>
  spi_data[1]++;
 8000aca:	7a7b      	ldrb	r3, [r7, #9]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00010000; //sync control mode
 8000ad2:	2310      	movs	r3, #16
 8000ad4:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000ad6:	7a7b      	ldrb	r3, [r7, #9]
 8000ad8:	021b      	lsls	r3, r3, #8
 8000ada:	7a3a      	ldrb	r2, [r7, #8]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	4b8a      	ldr	r3, [pc, #552]	@ (8000d08 <main+0x668>)
 8000ae0:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000ae2:	bf00      	nop
 8000ae4:	4b88      	ldr	r3, [pc, #544]	@ (8000d08 <main+0x668>)
 8000ae6:	695b      	ldr	r3, [r3, #20]
 8000ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d0f9      	beq.n	8000ae4 <main+0x444>
  spi_data[1]++;
 8000af0:	7a7b      	ldrb	r3, [r7, #9]
 8000af2:	3301      	adds	r3, #1
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	727b      	strb	r3, [r7, #9]
  spi_data[0] = 0b00001001; //sinc4 osr16
 8000af8:	2309      	movs	r3, #9
 8000afa:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000afc:	7a7b      	ldrb	r3, [r7, #9]
 8000afe:	021b      	lsls	r3, r3, #8
 8000b00:	7a3a      	ldrb	r2, [r7, #8]
 8000b02:	431a      	orrs	r2, r3
 8000b04:	4b80      	ldr	r3, [pc, #512]	@ (8000d08 <main+0x668>)
 8000b06:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b08:	bf00      	nop
 8000b0a:	4b7f      	ldr	r3, [pc, #508]	@ (8000d08 <main+0x668>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0f9      	beq.n	8000b0a <main+0x46a>
  spi_data[1]++;
 8000b16:	7a7b      	ldrb	r3, [r7, #9]
 8000b18:	3301      	adds	r3, #1
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b10000000; //external clock
 8000b1e:	2380      	movs	r3, #128	@ 0x80
 8000b20:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b22:	7a7b      	ldrb	r3, [r7, #9]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	7a3a      	ldrb	r2, [r7, #8]
 8000b28:	431a      	orrs	r2, r3
 8000b2a:	4b77      	ldr	r3, [pc, #476]	@ (8000d08 <main+0x668>)
 8000b2c:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b2e:	bf00      	nop
 8000b30:	4b75      	ldr	r3, [pc, #468]	@ (8000d08 <main+0x668>)
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d0f9      	beq.n	8000b30 <main+0x490>
  spi_data[1]=0x80+0x03; //start conversion
 8000b3c:	2383      	movs	r3, #131	@ 0x83
 8000b3e:	727b      	strb	r3, [r7, #9]
  spi_data[0]=0b00000010;
 8000b40:	2302      	movs	r3, #2
 8000b42:	723b      	strb	r3, [r7, #8]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000b44:	7a7b      	ldrb	r3, [r7, #9]
 8000b46:	021b      	lsls	r3, r3, #8
 8000b48:	7a3a      	ldrb	r2, [r7, #8]
 8000b4a:	431a      	orrs	r2, r3
 8000b4c:	4b6e      	ldr	r3, [pc, #440]	@ (8000d08 <main+0x668>)
 8000b4e:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000b50:	bf00      	nop
 8000b52:	4b6d      	ldr	r3, [pc, #436]	@ (8000d08 <main+0x668>)
 8000b54:	695b      	ldr	r3, [r3, #20]
 8000b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d0f9      	beq.n	8000b52 <main+0x4b2>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000b5e:	4b6a      	ldr	r3, [pc, #424]	@ (8000d08 <main+0x668>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a69      	ldr	r2, [pc, #420]	@ (8000d08 <main+0x668>)
 8000b64:	f023 0301 	bic.w	r3, r3, #1
 8000b68:	6013      	str	r3, [r2, #0]

  //GADC Setup
  SPI2->CR2 = 0; //reinitialize tsize
 8000b6a:	4b69      	ldr	r3, [pc, #420]	@ (8000d10 <main+0x670>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= 0b11111; //use 32 bit mode for config
 8000b70:	4b67      	ldr	r3, [pc, #412]	@ (8000d10 <main+0x670>)
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	4a66      	ldr	r2, [pc, #408]	@ (8000d10 <main+0x670>)
 8000b76:	f043 031f 	orr.w	r3, r3, #31
 8000b7a:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000b7c:	4b64      	ldr	r3, [pc, #400]	@ (8000d10 <main+0x670>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a63      	ldr	r2, [pc, #396]	@ (8000d10 <main+0x670>)
 8000b82:	f043 0301 	orr.w	r3, r3, #1
 8000b86:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000b88:	4b61      	ldr	r3, [pc, #388]	@ (8000d10 <main+0x670>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a60      	ldr	r2, [pc, #384]	@ (8000d10 <main+0x670>)
 8000b8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b92:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b9a:	485e      	ldr	r0, [pc, #376]	@ (8000d14 <main+0x674>)
 8000b9c:	f01b fc2c 	bl	801c3f8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ba0:	2064      	movs	r0, #100	@ 0x64
 8000ba2:	f019 f9a5 	bl	8019ef0 <HAL_Delay>
  HAL_GPIO_WritePin(GADC_RESET_GPIO_Port, GADC_RESET_Pin, GPIO_PIN_SET);
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000bac:	4859      	ldr	r0, [pc, #356]	@ (8000d14 <main+0x674>)
 8000bae:	f01b fc23 	bl	801c3f8 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000bb2:	2064      	movs	r0, #100	@ 0x64
 8000bb4:	f019 f99c 	bl	8019ef0 <HAL_Delay>
  uint16_t ucGADCSPIData[2] = {0b1101000000000100, (1<<5) | (1<<4)}; //disable alarms
 8000bb8:	4b57      	ldr	r3, [pc, #348]	@ (8000d18 <main+0x678>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	607b      	str	r3, [r7, #4]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	88fa      	ldrh	r2, [r7, #6]
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4b52      	ldr	r3, [pc, #328]	@ (8000d10 <main+0x670>)
 8000bc8:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000bca:	bf00      	nop
 8000bcc:	4b50      	ldr	r3, [pc, #320]	@ (8000d10 <main+0x670>)
 8000bce:	695b      	ldr	r3, [r3, #20]
 8000bd0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d0f9      	beq.n	8000bcc <main+0x52c>
  ucGADCSPIData[0] = 0b1101000000010100; //14h
 8000bd8:	f24d 0314 	movw	r3, #53268	@ 0xd014
 8000bdc:	80bb      	strh	r3, [r7, #4]
  ucGADCSPIData[1] = 0b10; //range select +-1.5x VREF
 8000bde:	2302      	movs	r3, #2
 8000be0:	80fb      	strh	r3, [r7, #6]
  SPI2->TXDR = ((ucGADCSPIData[0] << 16) | ucGADCSPIData[1]);
 8000be2:	88bb      	ldrh	r3, [r7, #4]
 8000be4:	041b      	lsls	r3, r3, #16
 8000be6:	88fa      	ldrh	r2, [r7, #6]
 8000be8:	431a      	orrs	r2, r3
 8000bea:	4b49      	ldr	r3, [pc, #292]	@ (8000d10 <main+0x670>)
 8000bec:	621a      	str	r2, [r3, #32]
  while((SPI2->SR & SPI_SR_TXC) == 0){};
 8000bee:	bf00      	nop
 8000bf0:	4b47      	ldr	r3, [pc, #284]	@ (8000d10 <main+0x670>)
 8000bf2:	695b      	ldr	r3, [r3, #20]
 8000bf4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d0f9      	beq.n	8000bf0 <main+0x550>
  SPI2->CR1 &= ~SPI_CR1_SPE;
 8000bfc:	4b44      	ldr	r3, [pc, #272]	@ (8000d10 <main+0x670>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a43      	ldr	r2, [pc, #268]	@ (8000d10 <main+0x670>)
 8000c02:	f023 0301 	bic.w	r3, r3, #1
 8000c06:	6013      	str	r3, [r2, #0]
  SPI2->CFG1 &= ~0b11111;
 8000c08:	4b41      	ldr	r3, [pc, #260]	@ (8000d10 <main+0x670>)
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	4a40      	ldr	r2, [pc, #256]	@ (8000d10 <main+0x670>)
 8000c0e:	f023 031f 	bic.w	r3, r3, #31
 8000c12:	6093      	str	r3, [r2, #8]
  SPI2->CFG1 |= 0b1111; //switch back to 16 bit transfers
 8000c14:	4b3e      	ldr	r3, [pc, #248]	@ (8000d10 <main+0x670>)
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	4a3d      	ldr	r2, [pc, #244]	@ (8000d10 <main+0x670>)
 8000c1a:	f043 030f 	orr.w	r3, r3, #15
 8000c1e:	6093      	str	r3, [r2, #8]

  //TC ADC SETUP
  //interleave temp sensor and internal ADC
  usTCADCConfig[0] = 0b1000101110001010; //FSR 0.256mV, 128SPS, Single Conversion, Start Conversion, Default Inputs
 8000c20:	4b3e      	ldr	r3, [pc, #248]	@ (8000d1c <main+0x67c>)
 8000c22:	f648 328a 	movw	r2, #35722	@ 0x8b8a
 8000c26:	801a      	strh	r2, [r3, #0]
  usTCADCConfig[1] = 0b1000101110011010; //same as above, use internal temp sensor
 8000c28:	4b3c      	ldr	r3, [pc, #240]	@ (8000d1c <main+0x67c>)
 8000c2a:	f648 329a 	movw	r2, #35738	@ 0x8b9a
 8000c2e:	805a      	strh	r2, [r3, #2]
  //TIM5 UP
  DMA1_Stream6->M0AR = usTCADCConfig;
 8000c30:	4b3b      	ldr	r3, [pc, #236]	@ (8000d20 <main+0x680>)
 8000c32:	4a3a      	ldr	r2, [pc, #232]	@ (8000d1c <main+0x67c>)
 8000c34:	60da      	str	r2, [r3, #12]
  DMA1_Stream6->PAR = &(SPI3->TXDR);
 8000c36:	4b3a      	ldr	r3, [pc, #232]	@ (8000d20 <main+0x680>)
 8000c38:	4a3a      	ldr	r2, [pc, #232]	@ (8000d24 <main+0x684>)
 8000c3a:	609a      	str	r2, [r3, #8]
  DMA1_Stream6->NDTR = 2;
 8000c3c:	4b38      	ldr	r3, [pc, #224]	@ (8000d20 <main+0x680>)
 8000c3e:	2202      	movs	r2, #2
 8000c40:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c42:	f3bf 8f4f 	dsb	sy
}
 8000c46:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream6->CR |= DMA_SxCR_EN;
 8000c48:	4b35      	ldr	r3, [pc, #212]	@ (8000d20 <main+0x680>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a34      	ldr	r2, [pc, #208]	@ (8000d20 <main+0x680>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	6013      	str	r3, [r2, #0]
  //SPI3 RX Stream
  DMA1_Stream7->M0AR = usTCADCData0;
 8000c54:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <main+0x688>)
 8000c56:	4a35      	ldr	r2, [pc, #212]	@ (8000d2c <main+0x68c>)
 8000c58:	60da      	str	r2, [r3, #12]
  DMA1_Stream7->M1AR = usTCADCData1;
 8000c5a:	4b33      	ldr	r3, [pc, #204]	@ (8000d28 <main+0x688>)
 8000c5c:	4a34      	ldr	r2, [pc, #208]	@ (8000d30 <main+0x690>)
 8000c5e:	611a      	str	r2, [r3, #16]
  DMA1_Stream7->PAR = &(SPI3->RXDR);
 8000c60:	4b31      	ldr	r3, [pc, #196]	@ (8000d28 <main+0x688>)
 8000c62:	4a34      	ldr	r2, [pc, #208]	@ (8000d34 <main+0x694>)
 8000c64:	609a      	str	r2, [r3, #8]
  DMA1_Stream7->CR |= DMA_DOUBLE_BUFFER_M0;
 8000c66:	4b30      	ldr	r3, [pc, #192]	@ (8000d28 <main+0x688>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000d28 <main+0x688>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
  DMA1_Stream7->NDTR = TC_ADC_BUFFER_HALF_SIZE;
 8000c72:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <main+0x688>)
 8000c74:	2240      	movs	r2, #64	@ 0x40
 8000c76:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream7->CR |= DMA_SxCR_TCIE;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	@ (8000d28 <main+0x688>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a2a      	ldr	r2, [pc, #168]	@ (8000d28 <main+0x688>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c84:	f3bf 8f4f 	dsb	sy
}
 8000c88:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream7->CR |= DMA_SxCR_EN;
 8000c8a:	4b27      	ldr	r3, [pc, #156]	@ (8000d28 <main+0x688>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a26      	ldr	r2, [pc, #152]	@ (8000d28 <main+0x688>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	6013      	str	r3, [r2, #0]
  //SPI3 Config
  SPI3->CR2 = 0; //reinitialize tsize
 8000c96:	4b28      	ldr	r3, [pc, #160]	@ (8000d38 <main+0x698>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	605a      	str	r2, [r3, #4]
  SPI3->CFG1 |= SPI_CFG1_RXDMAEN;
 8000c9c:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <main+0x698>)
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	4a25      	ldr	r2, [pc, #148]	@ (8000d38 <main+0x698>)
 8000ca2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca6:	6093      	str	r3, [r2, #8]
  SPI3->CR1 |= SPI_CR1_SPE;
 8000ca8:	4b23      	ldr	r3, [pc, #140]	@ (8000d38 <main+0x698>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a22      	ldr	r2, [pc, #136]	@ (8000d38 <main+0x698>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	6013      	str	r3, [r2, #0]
  SPI3->CR1 |= SPI_CR1_CSTART;
 8000cb4:	4b20      	ldr	r3, [pc, #128]	@ (8000d38 <main+0x698>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d38 <main+0x698>)
 8000cba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000cbe:	6013      	str	r3, [r2, #0]
  //enable TIM5 (SPI3 TX)
  TIM5->CR1 |= TIM_CR1_URS;
 8000cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d3c <main+0x69c>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d3c <main+0x69c>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	6013      	str	r3, [r2, #0]
  TIM5->CR1 &= ~TIM_CR1_UDIS;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d3c <main+0x69c>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000d3c <main+0x69c>)
 8000cd2:	f023 0302 	bic.w	r3, r3, #2
 8000cd6:	6013      	str	r3, [r2, #0]
  TIM5->DIER |= TIM_DMA_UPDATE;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	@ (8000d3c <main+0x69c>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	4a17      	ldr	r2, [pc, #92]	@ (8000d3c <main+0x69c>)
 8000cde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ce2:	60d3      	str	r3, [r2, #12]
  TIM5->EGR |= TIM_EGR_UG;
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <main+0x69c>)
 8000ce6:	695b      	ldr	r3, [r3, #20]
 8000ce8:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <main+0x69c>)
 8000cea:	f043 0301 	orr.w	r3, r3, #1
 8000cee:	6153      	str	r3, [r2, #20]
  TIM5->CR1 |= TIM_CR1_CEN;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <main+0x69c>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a11      	ldr	r2, [pc, #68]	@ (8000d3c <main+0x69c>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6013      	str	r3, [r2, #0]

  HAL_GPIO_WritePin(DUT_GATE_SEL_GPIO_Port, DUT_GATE_SEL_Pin, GPIO_PIN_SET);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2120      	movs	r1, #32
 8000d00:	480f      	ldr	r0, [pc, #60]	@ (8000d40 <main+0x6a0>)
 8000d02:	f01b fb79 	bl	801c3f8 <HAL_GPIO_WritePin>
 8000d06:	e01d      	b.n	8000d44 <main+0x6a4>
 8000d08:	40013000 	.word	0x40013000
 8000d0c:	58020000 	.word	0x58020000
 8000d10:	40003800 	.word	0x40003800
 8000d14:	58020c00 	.word	0x58020c00
 8000d18:	08024064 	.word	0x08024064
 8000d1c:	30030004 	.word	0x30030004
 8000d20:	400200a0 	.word	0x400200a0
 8000d24:	40003c20 	.word	0x40003c20
 8000d28:	400200b8 	.word	0x400200b8
 8000d2c:	30030008 	.word	0x30030008
 8000d30:	30030088 	.word	0x30030088
 8000d34:	40003c30 	.word	0x40003c30
 8000d38:	40003c00 	.word	0x40003c00
 8000d3c:	40000c00 	.word	0x40000c00
 8000d40:	58021000 	.word	0x58021000

  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000d44:	4b4e      	ldr	r3, [pc, #312]	@ (8000e80 <main+0x7e0>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000e80 <main+0x7e0>)
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	4a4c      	ldr	r2, [pc, #304]	@ (8000e80 <main+0x7e0>)
 8000d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d54:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000d56:	4b4a      	ldr	r3, [pc, #296]	@ (8000e80 <main+0x7e0>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a49      	ldr	r2, [pc, #292]	@ (8000e80 <main+0x7e0>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000d62:	4b47      	ldr	r3, [pc, #284]	@ (8000e80 <main+0x7e0>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a46      	ldr	r2, [pc, #280]	@ (8000e80 <main+0x7e0>)
 8000d68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6c:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CR2 = 0; //reinitialize tsize
 8000d6e:	4b45      	ldr	r3, [pc, #276]	@ (8000e84 <main+0x7e4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	605a      	str	r2, [r3, #4]
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000d74:	4b43      	ldr	r3, [pc, #268]	@ (8000e84 <main+0x7e4>)
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	4a42      	ldr	r2, [pc, #264]	@ (8000e84 <main+0x7e4>)
 8000d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d7e:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000d80:	4b40      	ldr	r3, [pc, #256]	@ (8000e84 <main+0x7e4>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a3f      	ldr	r2, [pc, #252]	@ (8000e84 <main+0x7e4>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e84 <main+0x7e4>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a3c      	ldr	r2, [pc, #240]	@ (8000e84 <main+0x7e4>)
 8000d92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d96:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000d98:	4b3b      	ldr	r3, [pc, #236]	@ (8000e88 <main+0x7e8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8000e88 <main+0x7e8>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000da4:	4b38      	ldr	r3, [pc, #224]	@ (8000e88 <main+0x7e8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a37      	ldr	r2, [pc, #220]	@ (8000e88 <main+0x7e8>)
 8000daa:	f023 0302 	bic.w	r3, r3, #2
 8000dae:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000db0:	4b35      	ldr	r3, [pc, #212]	@ (8000e88 <main+0x7e8>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	4a34      	ldr	r2, [pc, #208]	@ (8000e88 <main+0x7e8>)
 8000db6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dba:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000dbc:	4b32      	ldr	r3, [pc, #200]	@ (8000e88 <main+0x7e8>)
 8000dbe:	695b      	ldr	r3, [r3, #20]
 8000dc0:	4a31      	ldr	r2, [pc, #196]	@ (8000e88 <main+0x7e8>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8000e88 <main+0x7e8>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e88 <main+0x7e8>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000dd4:	4b2d      	ldr	r3, [pc, #180]	@ (8000e8c <main+0x7ec>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8000e8c <main+0x7ec>)
 8000dda:	f043 0304 	orr.w	r3, r3, #4
 8000dde:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000de0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e8c <main+0x7ec>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a29      	ldr	r2, [pc, #164]	@ (8000e8c <main+0x7ec>)
 8000de6:	f023 0302 	bic.w	r3, r3, #2
 8000dea:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000dec:	4b27      	ldr	r3, [pc, #156]	@ (8000e8c <main+0x7ec>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <main+0x7ec>)
 8000df2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000df6:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <main+0x7ec>)
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <main+0x7ec>)
 8000dfe:	f043 0301 	orr.w	r3, r3, #1
 8000e02:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <main+0x7ec>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <main+0x7ec>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	6013      	str	r3, [r2, #0]


  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000e10:	491f      	ldr	r1, [pc, #124]	@ (8000e90 <main+0x7f0>)
 8000e12:	2000      	movs	r0, #0
 8000e14:	f017 f90e 	bl	8018034 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000e18:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <main+0x7f4>)
 8000e1a:	9302      	str	r3, [sp, #8]
 8000e1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <main+0x7f8>)
 8000e1e:	9301      	str	r3, [sp, #4]
 8000e20:	4b1e      	ldr	r3, [pc, #120]	@ (8000e9c <main+0x7fc>)
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea0 <main+0x800>)
 8000e26:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea4 <main+0x804>)
 8000e28:	491f      	ldr	r1, [pc, #124]	@ (8000ea8 <main+0x808>)
 8000e2a:	4819      	ldr	r0, [pc, #100]	@ (8000e90 <main+0x7f0>)
 8000e2c:	f00c f9e0 	bl	800d1f0 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000e30:	f008 fb2e 	bl	8009490 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000e34:	4b1d      	ldr	r3, [pc, #116]	@ (8000eac <main+0x80c>)
 8000e36:	9301      	str	r3, [sp, #4]
 8000e38:	2300      	movs	r3, #0
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e42:	491b      	ldr	r1, [pc, #108]	@ (8000eb0 <main+0x810>)
 8000e44:	481b      	ldr	r0, [pc, #108]	@ (8000eb4 <main+0x814>)
 8000e46:	f003 f8ff 	bl	8004048 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <main+0x818>)
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	2301      	movs	r3, #1
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	2300      	movs	r3, #0
 8000e54:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e58:	4918      	ldr	r1, [pc, #96]	@ (8000ebc <main+0x81c>)
 8000e5a:	4819      	ldr	r0, [pc, #100]	@ (8000ec0 <main+0x820>)
 8000e5c:	f003 f8f4 	bl	8004048 <xTaskCreate>
      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
 8000e60:	4b18      	ldr	r3, [pc, #96]	@ (8000ec4 <main+0x824>)
 8000e62:	9301      	str	r3, [sp, #4]
 8000e64:	2301      	movs	r3, #1
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2300      	movs	r3, #0
 8000e6a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000e6e:	4916      	ldr	r1, [pc, #88]	@ (8000ec8 <main+0x828>)
 8000e70:	4816      	ldr	r0, [pc, #88]	@ (8000ecc <main+0x82c>)
 8000e72:	f003 f8e9 	bl	8004048 <xTaskCreate>
      vTaskStartScheduler();
 8000e76:	f003 faa3 	bl	80043c0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e7a:	bf00      	nop
 8000e7c:	e7fd      	b.n	8000e7a <main+0x7da>
 8000e7e:	bf00      	nop
 8000e80:	40013000 	.word	0x40013000
 8000e84:	40003800 	.word	0x40003800
 8000e88:	40010000 	.word	0x40010000
 8000e8c:	40000400 	.word	0x40000400
 8000e90:	20000860 	.word	0x20000860
 8000e94:	0802754c 	.word	0x0802754c
 8000e98:	08027548 	.word	0x08027548
 8000e9c:	08027544 	.word	0x08027544
 8000ea0:	08027540 	.word	0x08027540
 8000ea4:	0802753c 	.word	0x0802753c
 8000ea8:	20000888 	.word	0x20000888
 8000eac:	20000d30 	.word	0x20000d30
 8000eb0:	08024048 	.word	0x08024048
 8000eb4:	08001b29 	.word	0x08001b29
 8000eb8:	20000d34 	.word	0x20000d34
 8000ebc:	08024050 	.word	0x08024050
 8000ec0:	08001b51 	.word	0x08001b51
 8000ec4:	20000d38 	.word	0x20000d38
 8000ec8:	08024058 	.word	0x08024058
 8000ecc:	08001d09 	.word	0x08001d09

08000ed0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b09e      	sub	sp, #120	@ 0x78
 8000ed4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ed6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000eda:	224c      	movs	r2, #76	@ 0x4c
 8000edc:	2100      	movs	r1, #0
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f021 fb33 	bl	802254a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2220      	movs	r2, #32
 8000eea:	2100      	movs	r1, #0
 8000eec:	4618      	mov	r0, r3
 8000eee:	f021 fb2c 	bl	802254a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ef2:	2002      	movs	r0, #2
 8000ef4:	f01b fbce 	bl	801c694 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
 8000efc:	4b48      	ldr	r3, [pc, #288]	@ (8001020 <SystemClock_Config+0x150>)
 8000efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f00:	4a47      	ldr	r2, [pc, #284]	@ (8001020 <SystemClock_Config+0x150>)
 8000f02:	f023 0301 	bic.w	r3, r3, #1
 8000f06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f08:	4b45      	ldr	r3, [pc, #276]	@ (8001020 <SystemClock_Config+0x150>)
 8000f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f0c:	f003 0301 	and.w	r3, r3, #1
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	4b44      	ldr	r3, [pc, #272]	@ (8001024 <SystemClock_Config+0x154>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	4a43      	ldr	r2, [pc, #268]	@ (8001024 <SystemClock_Config+0x154>)
 8000f18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f1c:	6193      	str	r3, [r2, #24]
 8000f1e:	4b41      	ldr	r3, [pc, #260]	@ (8001024 <SystemClock_Config+0x154>)
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f26:	60bb      	str	r3, [r7, #8]
 8000f28:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f2a:	bf00      	nop
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <SystemClock_Config+0x154>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f38:	d1f8      	bne.n	8000f2c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	@ (8001028 <SystemClock_Config+0x158>)
 8000f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f40:	4a39      	ldr	r2, [pc, #228]	@ (8001028 <SystemClock_Config+0x158>)
 8000f42:	f043 0302 	orr.w	r3, r3, #2
 8000f46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f4a:	4b37      	ldr	r3, [pc, #220]	@ (8001028 <SystemClock_Config+0x158>)
 8000f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	607b      	str	r3, [r7, #4]
 8000f56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f58:	2300      	movs	r3, #0
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	4b31      	ldr	r3, [pc, #196]	@ (8001024 <SystemClock_Config+0x154>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	4a30      	ldr	r2, [pc, #192]	@ (8001024 <SystemClock_Config+0x154>)
 8000f62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f66:	6193      	str	r3, [r2, #24]
 8000f68:	4b2e      	ldr	r3, [pc, #184]	@ (8001024 <SystemClock_Config+0x154>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f70:	603b      	str	r3, [r7, #0]
 8000f72:	4b2b      	ldr	r3, [pc, #172]	@ (8001020 <SystemClock_Config+0x150>)
 8000f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f76:	4a2a      	ldr	r2, [pc, #168]	@ (8001020 <SystemClock_Config+0x150>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f7e:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <SystemClock_Config+0x150>)
 8000f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f8a:	bf00      	nop
 8000f8c:	4b25      	ldr	r3, [pc, #148]	@ (8001024 <SystemClock_Config+0x154>)
 8000f8e:	699b      	ldr	r3, [r3, #24]
 8000f90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000f98:	d1f8      	bne.n	8000f8c <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f9e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000fa2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000fb0:	2340      	movs	r3, #64	@ 0x40
 8000fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fc0:	230c      	movs	r3, #12
 8000fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fcc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f01b fb99 	bl	801c708 <HAL_RCC_OscConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000fdc:	f000 ffa6 	bl	8001f2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe0:	233f      	movs	r3, #63	@ 0x3f
 8000fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fec:	2308      	movs	r3, #8
 8000fee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ff0:	2340      	movs	r3, #64	@ 0x40
 8000ff2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ff4:	2340      	movs	r3, #64	@ 0x40
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ff8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ffc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ffe:	2340      	movs	r3, #64	@ 0x40
 8001000:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001002:	f107 030c 	add.w	r3, r7, #12
 8001006:	2102      	movs	r1, #2
 8001008:	4618      	mov	r0, r3
 800100a:	f01b ffd7 	bl	801cfbc <HAL_RCC_ClockConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8001014:	f000 ff8a 	bl	8001f2c <Error_Handler>
  }
}
 8001018:	bf00      	nop
 800101a:	3778      	adds	r7, #120	@ 0x78
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	58000400 	.word	0x58000400
 8001024:	58024800 	.word	0x58024800
 8001028:	58024400 	.word	0x58024400

0800102c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b0b0      	sub	sp, #192	@ 0xc0
 8001030:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001032:	463b      	mov	r3, r7
 8001034:	22c0      	movs	r2, #192	@ 0xc0
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f021 fa86 	bl	802254a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 800103e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001042:	f04f 0300 	mov.w	r3, #0
 8001046:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 800104a:	2308      	movs	r3, #8
 800104c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 800104e:	2340      	movs	r3, #64	@ 0x40
 8001050:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001052:	2302      	movs	r3, #2
 8001054:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001056:	2302      	movs	r3, #2
 8001058:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800105a:	2302      	movs	r3, #2
 800105c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 800105e:	2340      	movs	r3, #64	@ 0x40
 8001060:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001062:	2300      	movs	r3, #0
 8001064:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800106a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800106e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4618      	mov	r0, r3
 8001074:	f01c fb2e 	bl	801d6d4 <HAL_RCCEx_PeriphCLKConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800107e:	f000 ff55 	bl	8001f2c <Error_Handler>
  }
}
 8001082:	bf00      	nop
 8001084:	37c0      	adds	r7, #192	@ 0xc0
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
	...

0800108c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001090:	4b1b      	ldr	r3, [pc, #108]	@ (8001100 <MX_I2C4_Init+0x74>)
 8001092:	4a1c      	ldr	r2, [pc, #112]	@ (8001104 <MX_I2C4_Init+0x78>)
 8001094:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8001096:	4b1a      	ldr	r3, [pc, #104]	@ (8001100 <MX_I2C4_Init+0x74>)
 8001098:	4a1b      	ldr	r2, [pc, #108]	@ (8001108 <MX_I2C4_Init+0x7c>)
 800109a:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 800109c:	4b18      	ldr	r3, [pc, #96]	@ (8001100 <MX_I2C4_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010a2:	4b17      	ldr	r3, [pc, #92]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a8:	4b15      	ldr	r3, [pc, #84]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010ae:	4b14      	ldr	r3, [pc, #80]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b4:	4b12      	ldr	r3, [pc, #72]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ba:	4b11      	ldr	r3, [pc, #68]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80010c6:	480e      	ldr	r0, [pc, #56]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010c8:	f01b f9b0 	bl	801c42c <HAL_I2C_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80010d2:	f000 ff2b 	bl	8001f2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4809      	ldr	r0, [pc, #36]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010da:	f01b fa43 	bl	801c564 <HAL_I2CEx_ConfigAnalogFilter>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80010e4:	f000 ff22 	bl	8001f2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80010e8:	2100      	movs	r1, #0
 80010ea:	4805      	ldr	r0, [pc, #20]	@ (8001100 <MX_I2C4_Init+0x74>)
 80010ec:	f01b fa85 	bl	801c5fa <HAL_I2CEx_ConfigDigitalFilter>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80010f6:	f000 ff19 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000a4 	.word	0x200000a4
 8001104:	58001c00 	.word	0x58001c00
 8001108:	10c0ecff 	.word	0x10c0ecff

0800110c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001112:	4a29      	ldr	r2, [pc, #164]	@ (80011b8 <MX_SPI1_Init+0xac>)
 8001114:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001116:	4b27      	ldr	r3, [pc, #156]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001118:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800111c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001124:	4b23      	ldr	r3, [pc, #140]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001126:	220f      	movs	r2, #15
 8001128:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800112a:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001130:	4b20      	ldr	r3, [pc, #128]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001132:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001136:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001138:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800113a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800113e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001140:	4b1c      	ldr	r3, [pc, #112]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001142:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001146:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001148:	4b1a      	ldr	r3, [pc, #104]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800114a:	2200      	movs	r2, #0
 800114c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800114e:	4b19      	ldr	r3, [pc, #100]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001150:	2200      	movs	r2, #0
 8001152:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001156:	2200      	movs	r2, #0
 8001158:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800115a:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800115c:	2200      	movs	r2, #0
 800115e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001162:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001166:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001168:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800116a:	2200      	movs	r2, #0
 800116c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001174:	4b0f      	ldr	r3, [pc, #60]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001176:	2200      	movs	r2, #0
 8001178:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800117c:	2200      	movs	r2, #0
 800117e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8001180:	4b0c      	ldr	r3, [pc, #48]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001182:	2203      	movs	r2, #3
 8001184:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001188:	2230      	movs	r2, #48	@ 0x30
 800118a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800118c:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800118e:	2200      	movs	r2, #0
 8001190:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001192:	4b08      	ldr	r3, [pc, #32]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 8001194:	2200      	movs	r2, #0
 8001196:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001198:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 800119a:	2200      	movs	r2, #0
 800119c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	@ (80011b4 <MX_SPI1_Init+0xa8>)
 80011a0:	f01e f8c4 	bl	801f32c <HAL_SPI_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80011aa:	f000 febf 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000f8 	.word	0x200000f8
 80011b8:	40013000 	.word	0x40013000

080011bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011c0:	4b27      	ldr	r3, [pc, #156]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011c2:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <MX_SPI2_Init+0xa8>)
 80011c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011c6:	4b26      	ldr	r3, [pc, #152]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011c8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80011cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80011d4:	4b22      	ldr	r3, [pc, #136]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011d6:	220f      	movs	r2, #15
 80011d8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011da:	4b21      	ldr	r3, [pc, #132]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011e8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011ec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80011ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011f0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80011f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011fc:	4b18      	ldr	r3, [pc, #96]	@ (8001260 <MX_SPI2_Init+0xa4>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001202:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001204:	2200      	movs	r2, #0
 8001206:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001208:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800120a:	2200      	movs	r2, #0
 800120c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120e:	4b14      	ldr	r3, [pc, #80]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001210:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001214:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001216:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001218:	2200      	movs	r2, #0
 800121a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800121c:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800121e:	2200      	movs	r2, #0
 8001220:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001224:	2200      	movs	r2, #0
 8001226:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001228:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800122a:	2200      	movs	r2, #0
 800122c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 800122e:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001230:	2203      	movs	r2, #3
 8001232:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001236:	2230      	movs	r2, #48	@ 0x30
 8001238:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001242:	2200      	movs	r2, #0
 8001244:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_SPI2_Init+0xa4>)
 8001248:	2200      	movs	r2, #0
 800124a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_SPI2_Init+0xa4>)
 800124e:	f01e f86d 	bl	801f32c <HAL_SPI_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001258:	f000 fe68 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000180 	.word	0x20000180
 8001264:	40003800 	.word	0x40003800

08001268 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <MX_SPI3_Init+0xa8>)
 800126e:	4a29      	ldr	r2, [pc, #164]	@ (8001314 <MX_SPI3_Init+0xac>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <MX_SPI3_Init+0xa8>)
 8001274:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001278:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <MX_SPI3_Init+0xa8>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001280:	4b23      	ldr	r3, [pc, #140]	@ (8001310 <MX_SPI3_Init+0xa8>)
 8001282:	220f      	movs	r2, #15
 8001284:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b22      	ldr	r3, [pc, #136]	@ (8001310 <MX_SPI3_Init+0xa8>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800128c:	4b20      	ldr	r3, [pc, #128]	@ (8001310 <MX_SPI3_Init+0xa8>)
 800128e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001292:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001294:	4b1e      	ldr	r3, [pc, #120]	@ (8001310 <MX_SPI3_Init+0xa8>)
 8001296:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800129a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800129c:	4b1c      	ldr	r3, [pc, #112]	@ (8001310 <MX_SPI3_Init+0xa8>)
 800129e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80012aa:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012b0:	4b17      	ldr	r3, [pc, #92]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80012b6:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012c2:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80012c4:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80012ca:	4b11      	ldr	r3, [pc, #68]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_02CYCLE;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012de:	2202      	movs	r2, #2
 80012e0:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_02CYCLE;
 80012e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012e4:	2220      	movs	r2, #32
 80012e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80012e8:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80012ee:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80012f4:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012fa:	4805      	ldr	r0, [pc, #20]	@ (8001310 <MX_SPI3_Init+0xa8>)
 80012fc:	f01e f816 	bl	801f32c <HAL_SPI_Init>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001306:	f000 fe11 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000208 	.word	0x20000208
 8001314:	40003c00 	.word	0x40003c00

08001318 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b088      	sub	sp, #32
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
 8001328:	609a      	str	r2, [r3, #8]
 800132a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]
 8001334:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001336:	4b1f      	ldr	r3, [pc, #124]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 8001338:	4a1f      	ldr	r2, [pc, #124]	@ (80013b8 <MX_TIM1_Init+0xa0>)
 800133a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800133c:	4b1d      	ldr	r3, [pc, #116]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 800133e:	2200      	movs	r2, #0
 8001340:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001342:	4b1c      	ldr	r3, [pc, #112]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001348:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 800134a:	22ff      	movs	r2, #255	@ 0xff
 800134c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b19      	ldr	r3, [pc, #100]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001354:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 8001356:	2200      	movs	r2, #0
 8001358:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800135a:	4b16      	ldr	r3, [pc, #88]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 800135c:	2200      	movs	r2, #0
 800135e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001360:	4814      	ldr	r0, [pc, #80]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 8001362:	f01e fbdc 	bl	801fb1e <HAL_TIM_Base_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800136c:	f000 fdde 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001370:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001374:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001376:	f107 0310 	add.w	r3, r7, #16
 800137a:	4619      	mov	r1, r3
 800137c:	480d      	ldr	r0, [pc, #52]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 800137e:	f01e fe13 	bl	801ffa8 <HAL_TIM_ConfigClockSource>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001388:	f000 fdd0 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800138c:	2320      	movs	r3, #32
 800138e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001398:	1d3b      	adds	r3, r7, #4
 800139a:	4619      	mov	r1, r3
 800139c:	4805      	ldr	r0, [pc, #20]	@ (80013b4 <MX_TIM1_Init+0x9c>)
 800139e:	f01f fb15 	bl	80209cc <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80013a8:	f000 fdc0 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ac:	bf00      	nop
 80013ae:	3720      	adds	r7, #32
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200003f8 	.word	0x200003f8
 80013b8:	40010000 	.word	0x40010000

080013bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b088      	sub	sp, #32
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0310 	add.w	r3, r7, #16
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013da:	4b1d      	ldr	r3, [pc, #116]	@ (8001450 <MX_TIM3_Init+0x94>)
 80013dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001454 <MX_TIM3_Init+0x98>)
 80013de:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001450 <MX_TIM3_Init+0x94>)
 80013e2:	22c7      	movs	r2, #199	@ 0xc7
 80013e4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001450 <MX_TIM3_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 80013ec:	4b18      	ldr	r3, [pc, #96]	@ (8001450 <MX_TIM3_Init+0x94>)
 80013ee:	2209      	movs	r2, #9
 80013f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <MX_TIM3_Init+0x94>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <MX_TIM3_Init+0x94>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013fe:	4814      	ldr	r0, [pc, #80]	@ (8001450 <MX_TIM3_Init+0x94>)
 8001400:	f01e fb8d 	bl	801fb1e <HAL_TIM_Base_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800140a:	f000 fd8f 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001412:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001414:	f107 0310 	add.w	r3, r7, #16
 8001418:	4619      	mov	r1, r3
 800141a:	480d      	ldr	r0, [pc, #52]	@ (8001450 <MX_TIM3_Init+0x94>)
 800141c:	f01e fdc4 	bl	801ffa8 <HAL_TIM_ConfigClockSource>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001426:	f000 fd81 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142a:	2300      	movs	r3, #0
 800142c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4806      	ldr	r0, [pc, #24]	@ (8001450 <MX_TIM3_Init+0x94>)
 8001438:	f01f fac8 	bl	80209cc <HAL_TIMEx_MasterConfigSynchronization>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001442:	f000 fd73 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001446:	bf00      	nop
 8001448:	3720      	adds	r7, #32
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000490 	.word	0x20000490
 8001454:	40000400 	.word	0x40000400

08001458 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08e      	sub	sp, #56	@ 0x38
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001478:	463b      	mov	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	605a      	str	r2, [r3, #4]
 8001480:	609a      	str	r2, [r3, #8]
 8001482:	60da      	str	r2, [r3, #12]
 8001484:	611a      	str	r2, [r3, #16]
 8001486:	615a      	str	r2, [r3, #20]
 8001488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800148a:	4b34      	ldr	r3, [pc, #208]	@ (800155c <MX_TIM4_Init+0x104>)
 800148c:	4a34      	ldr	r2, [pc, #208]	@ (8001560 <MX_TIM4_Init+0x108>)
 800148e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 999;
 8001490:	4b32      	ldr	r3, [pc, #200]	@ (800155c <MX_TIM4_Init+0x104>)
 8001492:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001496:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001498:	4b30      	ldr	r3, [pc, #192]	@ (800155c <MX_TIM4_Init+0x104>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 800149e:	4b2f      	ldr	r3, [pc, #188]	@ (800155c <MX_TIM4_Init+0x104>)
 80014a0:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80014a4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a6:	4b2d      	ldr	r3, [pc, #180]	@ (800155c <MX_TIM4_Init+0x104>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	4b2b      	ldr	r3, [pc, #172]	@ (800155c <MX_TIM4_Init+0x104>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014b2:	482a      	ldr	r0, [pc, #168]	@ (800155c <MX_TIM4_Init+0x104>)
 80014b4:	f01e fb33 	bl	801fb1e <HAL_TIM_Base_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 80014be:	f000 fd35 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014cc:	4619      	mov	r1, r3
 80014ce:	4823      	ldr	r0, [pc, #140]	@ (800155c <MX_TIM4_Init+0x104>)
 80014d0:	f01e fd6a 	bl	801ffa8 <HAL_TIM_ConfigClockSource>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 80014da:	f000 fd27 	bl	8001f2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014de:	481f      	ldr	r0, [pc, #124]	@ (800155c <MX_TIM4_Init+0x104>)
 80014e0:	f01e fbec 	bl	801fcbc <HAL_TIM_PWM_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 80014ea:	f000 fd1f 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4817      	ldr	r0, [pc, #92]	@ (800155c <MX_TIM4_Init+0x104>)
 80014fe:	f01f fa65 	bl	80209cc <HAL_TIMEx_MasterConfigSynchronization>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001508:	f000 fd10 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800150c:	2360      	movs	r3, #96	@ 0x60
 800150e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 999;
 8001510:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001514:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	2200      	movs	r2, #0
 8001522:	4619      	mov	r1, r3
 8001524:	480d      	ldr	r0, [pc, #52]	@ (800155c <MX_TIM4_Init+0x104>)
 8001526:	f01e fc2b 	bl	801fd80 <HAL_TIM_PWM_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001530:	f000 fcfc 	bl	8001f2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001534:	2370      	movs	r3, #112	@ 0x70
 8001536:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001538:	463b      	mov	r3, r7
 800153a:	2204      	movs	r2, #4
 800153c:	4619      	mov	r1, r3
 800153e:	4807      	ldr	r0, [pc, #28]	@ (800155c <MX_TIM4_Init+0x104>)
 8001540:	f01e fc1e 	bl	801fd80 <HAL_TIM_PWM_ConfigChannel>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM4_Init+0xf6>
  {
    Error_Handler();
 800154a:	f000 fcef 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800154e:	4803      	ldr	r0, [pc, #12]	@ (800155c <MX_TIM4_Init+0x104>)
 8001550:	f001 f99c 	bl	800288c <HAL_TIM_MspPostInit>

}
 8001554:	bf00      	nop
 8001556:	3738      	adds	r7, #56	@ 0x38
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200004dc 	.word	0x200004dc
 8001560:	40000800 	.word	0x40000800

08001564 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b088      	sub	sp, #32
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0310 	add.w	r3, r7, #16
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001582:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <MX_TIM5_Init+0x98>)
 8001584:	4a1e      	ldr	r2, [pc, #120]	@ (8001600 <MX_TIM5_Init+0x9c>)
 8001586:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 999;
 8001588:	4b1c      	ldr	r3, [pc, #112]	@ (80015fc <MX_TIM5_Init+0x98>)
 800158a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800158e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001590:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_TIM5_Init+0x98>)
 8001592:	2200      	movs	r2, #0
 8001594:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 3124;
 8001596:	4b19      	ldr	r3, [pc, #100]	@ (80015fc <MX_TIM5_Init+0x98>)
 8001598:	f640 4234 	movw	r2, #3124	@ 0xc34
 800159c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <MX_TIM5_Init+0x98>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a4:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_TIM5_Init+0x98>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015aa:	4814      	ldr	r0, [pc, #80]	@ (80015fc <MX_TIM5_Init+0x98>)
 80015ac:	f01e fab7 	bl	801fb1e <HAL_TIM_Base_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80015b6:	f000 fcb9 	bl	8001f2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015c0:	f107 0310 	add.w	r3, r7, #16
 80015c4:	4619      	mov	r1, r3
 80015c6:	480d      	ldr	r0, [pc, #52]	@ (80015fc <MX_TIM5_Init+0x98>)
 80015c8:	f01e fcee 	bl	801ffa8 <HAL_TIM_ConfigClockSource>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80015d2:	f000 fcab 	bl	8001f2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	@ (80015fc <MX_TIM5_Init+0x98>)
 80015e4:	f01f f9f2 	bl	80209cc <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80015ee:	f000 fc9d 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000528 	.word	0x20000528
 8001600:	40000c00 	.word	0x40000c00

08001604 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001608:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 800160a:	4a23      	ldr	r2, [pc, #140]	@ (8001698 <MX_USART3_UART_Init+0x94>)
 800160c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001610:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001614:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001616:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800161c:	4b1d      	ldr	r3, [pc, #116]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 800161e:	2200      	movs	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001622:	4b1c      	ldr	r3, [pc, #112]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001628:	4b1a      	ldr	r3, [pc, #104]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 800162a:	220c      	movs	r2, #12
 800162c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800162e:	4b19      	ldr	r3, [pc, #100]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001636:	2200      	movs	r2, #0
 8001638:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800163a:	4b16      	ldr	r3, [pc, #88]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 800163c:	2200      	movs	r2, #0
 800163e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001640:	4b14      	ldr	r3, [pc, #80]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001642:	2200      	movs	r2, #0
 8001644:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001646:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001648:	2200      	movs	r2, #0
 800164a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800164c:	4811      	ldr	r0, [pc, #68]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 800164e:	f01f fa4b 	bl	8020ae8 <HAL_UART_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001658:	f000 fc68 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165c:	2100      	movs	r1, #0
 800165e:	480d      	ldr	r0, [pc, #52]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001660:	f020 fa53 	bl	8021b0a <HAL_UARTEx_SetTxFifoThreshold>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800166a:	f000 fc5f 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800166e:	2100      	movs	r1, #0
 8001670:	4808      	ldr	r0, [pc, #32]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001672:	f020 fa88 	bl	8021b86 <HAL_UARTEx_SetRxFifoThreshold>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800167c:	f000 fc56 	bl	8001f2c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001680:	4804      	ldr	r0, [pc, #16]	@ (8001694 <MX_USART3_UART_Init+0x90>)
 8001682:	f020 fa09 	bl	8021a98 <HAL_UARTEx_DisableFifoMode>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800168c:	f000 fc4e 	bl	8001f2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001690:	bf00      	nop
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200007cc 	.word	0x200007cc
 8001698:	40004800 	.word	0x40004800

0800169c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016a2:	4b29      	ldr	r3, [pc, #164]	@ (8001748 <MX_DMA_Init+0xac>)
 80016a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016a8:	4a27      	ldr	r2, [pc, #156]	@ (8001748 <MX_DMA_Init+0xac>)
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80016b2:	4b25      	ldr	r3, [pc, #148]	@ (8001748 <MX_DMA_Init+0xac>)
 80016b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80016b8:	f003 0301 	and.w	r3, r3, #1
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2106      	movs	r1, #6
 80016c4:	200b      	movs	r0, #11
 80016c6:	f018 fd32 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80016ca:	200b      	movs	r0, #11
 80016cc:	f018 fd49 	bl	801a162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2106      	movs	r1, #6
 80016d4:	200c      	movs	r0, #12
 80016d6:	f018 fd2a 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016da:	200c      	movs	r0, #12
 80016dc:	f018 fd41 	bl	801a162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 80016e0:	2200      	movs	r2, #0
 80016e2:	2107      	movs	r1, #7
 80016e4:	200d      	movs	r0, #13
 80016e6:	f018 fd22 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80016ea:	200d      	movs	r0, #13
 80016ec:	f018 fd39 	bl	801a162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2107      	movs	r1, #7
 80016f4:	200e      	movs	r0, #14
 80016f6:	f018 fd1a 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80016fa:	200e      	movs	r0, #14
 80016fc:	f018 fd31 	bl	801a162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2107      	movs	r1, #7
 8001704:	200f      	movs	r0, #15
 8001706:	f018 fd12 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800170a:	200f      	movs	r0, #15
 800170c:	f018 fd29 	bl	801a162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 7, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2107      	movs	r1, #7
 8001714:	2010      	movs	r0, #16
 8001716:	f018 fd0a 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800171a:	2010      	movs	r0, #16
 800171c:	f018 fd21 	bl	801a162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 7, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2107      	movs	r1, #7
 8001724:	2011      	movs	r0, #17
 8001726:	f018 fd02 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800172a:	2011      	movs	r0, #17
 800172c:	f018 fd19 	bl	801a162 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 7, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	2107      	movs	r1, #7
 8001734:	202f      	movs	r0, #47	@ 0x2f
 8001736:	f018 fcfa 	bl	801a12e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800173a:	202f      	movs	r0, #47	@ 0x2f
 800173c:	f018 fd11 	bl	801a162 <HAL_NVIC_EnableIRQ>

}
 8001740:	bf00      	nop
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	58024400 	.word	0x58024400

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	@ 0x30
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 031c 	add.w	r3, r7, #28
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001762:	4b61      	ldr	r3, [pc, #388]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001768:	4a5f      	ldr	r2, [pc, #380]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 800176a:	f043 0310 	orr.w	r3, r3, #16
 800176e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001772:	4b5d      	ldr	r3, [pc, #372]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 8001774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001780:	4b59      	ldr	r3, [pc, #356]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 8001782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001786:	4a58      	ldr	r2, [pc, #352]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 8001788:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800178c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001790:	4b55      	ldr	r3, [pc, #340]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 8001792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800179e:	4b52      	ldr	r3, [pc, #328]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017a4:	4a50      	ldr	r2, [pc, #320]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017a6:	f043 0304 	orr.w	r3, r3, #4
 80017aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ae:	4b4e      	ldr	r3, [pc, #312]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b4a      	ldr	r3, [pc, #296]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017c2:	4a49      	ldr	r2, [pc, #292]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017cc:	4b46      	ldr	r3, [pc, #280]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b43      	ldr	r3, [pc, #268]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e0:	4a41      	ldr	r2, [pc, #260]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017e2:	f043 0302 	orr.w	r3, r3, #2
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ea:	4b3f      	ldr	r3, [pc, #252]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60bb      	str	r3, [r7, #8]
 80017f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f8:	4b3b      	ldr	r3, [pc, #236]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 80017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fe:	4a3a      	ldr	r2, [pc, #232]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 8001800:	f043 0308 	orr.w	r3, r3, #8
 8001804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001808:	4b37      	ldr	r3, [pc, #220]	@ (80018e8 <MX_GPIO_Init+0x19c>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 8001816:	2200      	movs	r2, #0
 8001818:	213c      	movs	r1, #60	@ 0x3c
 800181a:	4834      	ldr	r0, [pc, #208]	@ (80018ec <MX_GPIO_Init+0x1a0>)
 800181c:	f01a fdec 	bl	801c3f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001820:	2200      	movs	r2, #0
 8001822:	f24c 41ff 	movw	r1, #50431	@ 0xc4ff
 8001826:	4832      	ldr	r0, [pc, #200]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001828:	f01a fde6 	bl	801c3f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 800182c:	2200      	movs	r2, #0
 800182e:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001832:	4830      	ldr	r0, [pc, #192]	@ (80018f4 <MX_GPIO_Init+0x1a8>)
 8001834:	f01a fde0 	bl	801c3f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 8001838:	233c      	movs	r3, #60	@ 0x3c
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001848:	f107 031c 	add.w	r3, r7, #28
 800184c:	4619      	mov	r1, r3
 800184e:	4827      	ldr	r0, [pc, #156]	@ (80018ec <MX_GPIO_Init+0x1a0>)
 8001850:	f01a fc22 	bl	801c098 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin PD0
                           PD1 PD2 PD3 PD4
                           PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin|GPIO_PIN_0
 8001854:	f24c 43ff 	movw	r3, #50431	@ 0xc4ff
 8001858:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800185a:	2301      	movs	r3, #1
 800185c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001862:	2300      	movs	r3, #0
 8001864:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	4619      	mov	r1, r3
 800186c:	4820      	ldr	r0, [pc, #128]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 800186e:	f01a fc13 	bl	801c098 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 8001872:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 031c 	add.w	r3, r7, #28
 8001884:	4619      	mov	r1, r3
 8001886:	481a      	ldr	r0, [pc, #104]	@ (80018f0 <MX_GPIO_Init+0x1a4>)
 8001888:	f01a fc06 	bl	801c098 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 800188c:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	4813      	ldr	r0, [pc, #76]	@ (80018f4 <MX_GPIO_Init+0x1a8>)
 80018a6:	f01a fbf7 	bl	801c098 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80018aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b0:	2300      	movs	r3, #0
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	@ (80018f4 <MX_GPIO_Init+0x1a8>)
 80018c0:	f01a fbea 	bl	801c098 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 80018c4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ca:	2300      	movs	r3, #0
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 031c 	add.w	r3, r7, #28
 80018d6:	4619      	mov	r1, r3
 80018d8:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <MX_GPIO_Init+0x1ac>)
 80018da:	f01a fbdd 	bl	801c098 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018de:	bf00      	nop
 80018e0:	3730      	adds	r7, #48	@ 0x30
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	58024400 	.word	0x58024400
 80018ec:	58021000 	.word	0x58021000
 80018f0:	58020c00 	.word	0x58020c00
 80018f4:	58020000 	.word	0x58020000
 80018f8:	58020400 	.word	0x58020400

080018fc <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 80018fc:	b5b0      	push	{r4, r5, r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 8001902:	4b08      	ldr	r3, [pc, #32]	@ (8001924 <vHeapInit+0x28>)
 8001904:	463c      	mov	r4, r7
 8001906:	461d      	mov	r5, r3
 8001908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800190a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800190c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001910:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 8001914:	463b      	mov	r3, r7
 8001916:	4618      	mov	r0, r3
 8001918:	f004 fea4 	bl	8006664 <vPortDefineHeapRegions>
}
 800191c:	bf00      	nop
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bdb0      	pop	{r4, r5, r7, pc}
 8001924:	08024068 	.word	0x08024068

08001928 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	return 0U;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b084      	sub	sp, #16
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 8001946:	f004 fbf3 	bl	8006130 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 800194a:	e000      	b.n	800194e <vAssertCalled+0x16>
		{
			__NOP();
 800194c:	bf00      	nop
		while( ul == 0 )
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0fb      	beq.n	800194c <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 8001954:	f004 fc18 	bl	8006188 <vPortExitCritical>
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 8001964:	f44f 61a2 	mov.w	r1, #1296	@ 0x510
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <vApplicationMallocFailedHook+0x14>)
 800196a:	f7ff ffe5 	bl	8001938 <vAssertCalled>
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	08024088 	.word	0x08024088

08001978 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	461a      	mov	r2, r3
 8001984:	460b      	mov	r3, r1
 8001986:	817b      	strh	r3, [r7, #10]
 8001988:	4613      	mov	r3, r2
 800198a:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f89b 	bl	8001acc <xApplicationGetRandomNumber>

	return ulReturn;
 8001996:	697b      	ldr	r3, [r7, #20]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b08a      	sub	sp, #40	@ 0x28
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d147      	bne.n	8001a40 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80019b0:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <vApplicationIPNetworkEventHook+0xa8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d105      	bne.n	80019c4 <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80019b8:	4b23      	ldr	r3, [pc, #140]	@ (8001a48 <vApplicationIPNetworkEventHook+0xa8>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80019be:	4b23      	ldr	r3, [pc, #140]	@ (8001a4c <vApplicationIPNetworkEventHook+0xac>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80019c4:	f107 0318 	add.w	r3, r7, #24
 80019c8:	f107 021c 	add.w	r2, r7, #28
 80019cc:	f107 0120 	add.w	r1, r7, #32
 80019d0:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80019d4:	f007 fdf4 	bl	80095c0 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 80019d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019da:	f107 0208 	add.w	r2, r7, #8
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00d fbf1 	bl	800f1c8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 80019e6:	f107 0308 	add.w	r3, r7, #8
 80019ea:	4619      	mov	r1, r3
 80019ec:	4818      	ldr	r0, [pc, #96]	@ (8001a50 <vApplicationIPNetworkEventHook+0xb0>)
 80019ee:	f020 fa83 	bl	8021ef8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	f107 0208 	add.w	r2, r7, #8
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f00d fbe4 	bl	800f1c8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001a00:	f107 0308 	add.w	r3, r7, #8
 8001a04:	4619      	mov	r1, r3
 8001a06:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <vApplicationIPNetworkEventHook+0xb4>)
 8001a08:	f020 fa76 	bl	8021ef8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f107 0208 	add.w	r2, r7, #8
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00d fbd7 	bl	800f1c8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <vApplicationIPNetworkEventHook+0xb8>)
 8001a22:	f020 fa69 	bl	8021ef8 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	f107 0208 	add.w	r2, r7, #8
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f00d fbca 	bl	800f1c8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4808      	ldr	r0, [pc, #32]	@ (8001a5c <vApplicationIPNetworkEventHook+0xbc>)
 8001a3c:	f020 fa5c 	bl	8021ef8 <lUDPLoggingPrintf>
	}
}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	@ 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000d28 	.word	0x20000d28
 8001a4c:	20000d2c 	.word	0x20000d2c
 8001a50:	0802409c 	.word	0x0802409c
 8001a54:	080240ac 	.word	0x080240ac
 8001a58:	080240c0 	.word	0x080240c0
 8001a5c:	080240d8 	.word	0x080240d8

08001a60 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8001a6c:	f000 f810 	bl	8001a90 <pcApplicationHostnameHook>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4619      	mov	r1, r3
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f021 fc1b 	bl	80232b0 <strcasecmp>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001a80:	2301      	movs	r3, #1
 8001a82:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 8001a84:	68fb      	ldr	r3, [r7, #12]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 8001a94:	4b02      	ldr	r3, [pc, #8]	@ (8001aa0 <pcApplicationHostnameHook+0x10>)
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	080240f0 	.word	0x080240f0

08001aa4 <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 8001ab4:	88bb      	ldrh	r3, [r7, #4]
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4803      	ldr	r0, [pc, #12]	@ (8001ac8 <vApplicationPingReplyHook+0x24>)
 8001aba:	f020 fa1d 	bl	8021ef8 <lUDPLoggingPrintf>
	}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	080240f8 	.word	0x080240f8

08001acc <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 8001ad4:	f021 fa7e 	bl	8022fd4 <rand>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	461a      	mov	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001ae0:	2301      	movs	r3, #1
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001af8:	4a01      	ldr	r2, [pc, #4]	@ (8001b00 <prvGetRegistersFromStack+0x14>)
 8001afa:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001afc:	bf00      	nop
 8001afe:	e7fd      	b.n	8001afc <prvGetRegistersFromStack+0x10>
 8001b00:	20000d3c 	.word	0x20000d3c

08001b04 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
	__asm volatile
 8001b08:	f01e 0f04 	tst.w	lr, #4
 8001b0c:	bf0c      	ite	eq
 8001b0e:	f3ef 8008 	mrseq	r0, MSP
 8001b12:	f3ef 8009 	mrsne	r0, PSP
 8001b16:	6981      	ldr	r1, [r0, #24]
 8001b18:	f7ff ffe8 	bl	8001aec <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001b30:	200a      	movs	r0, #10
 8001b32:	f002 fbc9 	bl	80042c8 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 8001b36:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <prvServerWorkTask+0x24>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f8      	beq.n	8001b30 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001b3e:	4b03      	ldr	r3, [pc, #12]	@ (8001b4c <prvServerWorkTask+0x24>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 8001b44:	f020 f9f4 	bl	8021f30 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001b48:	e7f2      	b.n	8001b30 <prvServerWorkTask+0x8>
 8001b4a:	bf00      	nop
 8001b4c:	20000d2c 	.word	0x20000d2c

08001b50 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b098      	sub	sp, #96	@ 0x60
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001b58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b62:	2218      	movs	r2, #24
 8001b64:	2100      	movs	r1, #0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f020 fcef 	bl	802254a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001b6c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001b70:	021b      	lsls	r3, r3, #8
 8001b72:	b21a      	sxth	r2, r3
 8001b74:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	b21b      	sxth	r3, r3
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001b86:	2303      	movs	r3, #3
 8001b88:	061a      	lsls	r2, r3, #24
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	041b      	lsls	r3, r3, #16
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	23a8      	movs	r3, #168	@ 0xa8
 8001b92:	021b      	lsls	r3, r3, #8
 8001b94:	4313      	orrs	r3, r2
 8001b96:	22c0      	movs	r2, #192	@ 0xc0
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001ba2:	2206      	movs	r2, #6
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2002      	movs	r0, #2
 8001ba8:	f00c fa02 	bl	800dfb0 <FreeRTOS_socket>
 8001bac:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f020 fcc7 	bl	802254a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001bbc:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001bc0:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001bc2:	230c      	movs	r3, #12
 8001bc4:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001bc6:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001bca:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001bcc:	230c      	movs	r3, #12
 8001bce:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	4b48      	ldr	r3, [pc, #288]	@ (8001cf8 <vADCTCPTask+0x1a8>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2100      	movs	r1, #0
 8001bda:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bdc:	f00d f9a2 	bl	800ef24 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001be0:	2304      	movs	r3, #4
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	4b44      	ldr	r3, [pc, #272]	@ (8001cf8 <vADCTCPTask+0x1a8>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	2100      	movs	r1, #0
 8001bea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bec:	f00d f99a 	bl	800ef24 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	9200      	str	r2, [sp, #0]
 8001bf8:	220d      	movs	r2, #13
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bfe:	f00d f991 	bl	800ef24 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001c02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c08:	d104      	bne.n	8001c14 <vADCTCPTask+0xc4>
 8001c0a:	f44f 61c7 	mov.w	r1, #1592	@ 0x638
 8001c0e:	483b      	ldr	r0, [pc, #236]	@ (8001cfc <vADCTCPTask+0x1ac>)
 8001c10:	f7ff fe92 	bl	8001938 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001c14:	f107 0320 	add.w	r3, r7, #32
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	9200      	str	r2, [sp, #0]
 8001c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c22:	2100      	movs	r1, #0
 8001c24:	2000      	movs	r0, #0
 8001c26:	f003 fcd9 	bl	80055dc <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d002      	beq.n	8001c3a <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 8001c34:	4b32      	ldr	r3, [pc, #200]	@ (8001d00 <vADCTCPTask+0x1b0>)
 8001c36:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c38:	e001      	b.n	8001c3e <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001c3a:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <vADCTCPTask+0x1b4>)
 8001c3c:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4a:	2218      	movs	r2, #24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c50:	f00d fd06 	bl	800f660 <FreeRTOS_connect>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d139      	bne.n	8001cce <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001c5a:	e030      	b.n	8001cbe <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001c6c:	f00d fee1 	bl	800fa32 <FreeRTOS_get_tx_head>
 8001c70:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d027      	beq.n	8001cc8 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001c78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c7a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d902      	bls.n	8001c8a <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c88:	e003      	b.n	8001c92 <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001c8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001c92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c94:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001c96:	4413      	add	r3, r2
 8001c98:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001c9e:	f020 fb47 	bl	8022330 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001ca2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	2100      	movs	r1, #0
 8001ca8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001caa:	f00d ffcd 	bl	800fc48 <FreeRTOS_send>
 8001cae:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001cb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	db0a      	blt.n	8001ccc <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001cb6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cba:	4413      	add	r3, r2
 8001cbc:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001cbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d8ca      	bhi.n	8001c5c <vADCTCPTask+0x10c>
 8001cc6:	e002      	b.n	8001cce <vADCTCPTask+0x17e>
                        break;
 8001cc8:	bf00      	nop
 8001cca:	e000      	b.n	8001cce <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001ccc:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001cce:	2102      	movs	r1, #2
 8001cd0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cd2:	f00e f868 	bl	800fda6 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001cd6:	e002      	b.n	8001cde <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001cd8:	2001      	movs	r0, #1
 8001cda:	f002 faf5 	bl	80042c8 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ce2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001ce4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001ce6:	f00d fe0f 	bl	800f908 <FreeRTOS_recv>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	daf3      	bge.n	8001cd8 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001cf0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001cf2:	f00c fd21 	bl	800e738 <FreeRTOS_closesocket>
    for(;;) {
 8001cf6:	e754      	b.n	8001ba2 <vADCTCPTask+0x52>
 8001cf8:	08027554 	.word	0x08027554
 8001cfc:	08024088 	.word	0x08024088
 8001d00:	30010004 	.word	0x30010004
 8001d04:	30000004 	.word	0x30000004

08001d08 <vAuxADCTCPTask>:
//        FreeRTOS_printf(("End Mock Transmission \n"));
    }
}

static void vAuxADCTCPTask(void *pvParameters) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b098      	sub	sp, #96	@ 0x60
 8001d0c:	af02      	add	r7, sp, #8
 8001d0e:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usAuxADCDataMock0);
 8001d10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001d14:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001d16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1a:	2218      	movs	r2, #24
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f020 fc13 	bl	802254a <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usAuxADCPort);
 8001d24:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f241 53b4 	movw	r3, #5556	@ 0x15b4
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	4313      	orrs	r3, r2
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 8001d3e:	2303      	movs	r3, #3
 8001d40:	061a      	lsls	r2, r3, #24
 8001d42:	2301      	movs	r3, #1
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	431a      	orrs	r2, r3
 8001d48:	23a8      	movs	r3, #168	@ 0xa8
 8001d4a:	021b      	lsls	r3, r3, #8
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	22c0      	movs	r2, #192	@ 0xc0
 8001d50:	4313      	orrs	r3, r2
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001d54:	2302      	movs	r3, #2
 8001d56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 8001d5a:	2206      	movs	r2, #6
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f00c f926 	bl	800dfb0 <FreeRTOS_socket>
 8001d64:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 8001d66:	f107 0310 	add.w	r3, r7, #16
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f020 fbeb 	bl	802254a <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 8001d74:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001d78:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 8001d7a:	230c      	movs	r3, #12
 8001d7c:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 8001d7e:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001d82:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001d84:	230c      	movs	r3, #12
 8001d86:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001d88:	2304      	movs	r3, #4
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	4b48      	ldr	r3, [pc, #288]	@ (8001eb0 <vAuxADCTCPTask+0x1a8>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2100      	movs	r1, #0
 8001d92:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d94:	f00d f8c6 	bl	800ef24 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001d98:	2304      	movs	r3, #4
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	4b44      	ldr	r3, [pc, #272]	@ (8001eb0 <vAuxADCTCPTask+0x1a8>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	2100      	movs	r1, #0
 8001da2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001da4:	f00d f8be 	bl	800ef24 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001da8:	f107 0310 	add.w	r3, r7, #16
 8001dac:	2210      	movs	r2, #16
 8001dae:	9200      	str	r2, [sp, #0]
 8001db0:	220d      	movs	r2, #13
 8001db2:	2100      	movs	r1, #0
 8001db4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001db6:	f00d f8b5 	bl	800ef24 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 8001dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dc0:	d104      	bne.n	8001dcc <vAuxADCTCPTask+0xc4>
 8001dc2:	f240 61c2 	movw	r1, #1730	@ 0x6c2
 8001dc6:	483b      	ldr	r0, [pc, #236]	@ (8001eb4 <vAuxADCTCPTask+0x1ac>)
 8001dc8:	f7ff fdb6 	bl	8001938 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 8001dcc:	f107 0320 	add.w	r3, r7, #32
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	9200      	str	r2, [sp, #0]
 8001dd6:	f04f 32ff 	mov.w	r2, #4294967295
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f003 fbfd 	bl	80055dc <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <vAuxADCTCPTask+0xea>
	    pcBufferToTransmit = usAuxADCDataMock1;
 8001dec:	4b32      	ldr	r3, [pc, #200]	@ (8001eb8 <vAuxADCTCPTask+0x1b0>)
 8001dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8001df0:	e001      	b.n	8001df6 <vAuxADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usAuxADCDataMock0;
 8001df2:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <vAuxADCTCPTask+0x1b4>)
 8001df4:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
        xAlreadyTransmitted = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 8001dfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e02:	2218      	movs	r2, #24
 8001e04:	4619      	mov	r1, r3
 8001e06:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e08:	f00d fc2a 	bl	800f660 <FreeRTOS_connect>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d139      	bne.n	8001e86 <vAuxADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001e12:	e030      	b.n	8001e76 <vAuxADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	4619      	mov	r1, r3
 8001e22:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e24:	f00d fe05 	bl	800fa32 <FreeRTOS_get_tx_head>
 8001e28:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 8001e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d027      	beq.n	8001e80 <vAuxADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d902      	bls.n	8001e42 <vAuxADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e40:	e003      	b.n	8001e4a <vAuxADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001e42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 8001e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e4c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001e4e:	4413      	add	r3, r2
 8001e50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e52:	4619      	mov	r1, r3
 8001e54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001e56:	f020 fa6b 	bl	8022330 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 8001e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e62:	f00d fef1 	bl	800fc48 <FreeRTOS_send>
 8001e66:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 8001e68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	db0a      	blt.n	8001e84 <vAuxADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 8001e6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e72:	4413      	add	r3, r2
 8001e74:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001e76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d8ca      	bhi.n	8001e14 <vAuxADCTCPTask+0x10c>
 8001e7e:	e002      	b.n	8001e86 <vAuxADCTCPTask+0x17e>
                        break;
 8001e80:	bf00      	nop
 8001e82:	e000      	b.n	8001e86 <vAuxADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001e84:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001e86:	2102      	movs	r1, #2
 8001e88:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e8a:	f00d ff8c 	bl	800fda6 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001e8e:	e002      	b.n	8001e96 <vAuxADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001e90:	2001      	movs	r0, #1
 8001e92:	f002 fa19 	bl	80042c8 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001e96:	2300      	movs	r3, #0
 8001e98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e9a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001e9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001e9e:	f00d fd33 	bl	800f908 <FreeRTOS_recv>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	daf3      	bge.n	8001e90 <vAuxADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001ea8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001eaa:	f00c fc45 	bl	800e738 <FreeRTOS_closesocket>
    for(;;) {
 8001eae:	e754      	b.n	8001d5a <vAuxADCTCPTask+0x52>
 8001eb0:	08027558 	.word	0x08027558
 8001eb4:	08024088 	.word	0x08024088
 8001eb8:	30028004 	.word	0x30028004
 8001ebc:	30020004 	.word	0x30020004

08001ec0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001ed2:	f018 f961 	bl	801a198 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001eda:	2300      	movs	r3, #0
 8001edc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 8001ede:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001ee2:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001ee4:	2312      	movs	r3, #18
 8001ee6:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001efc:	2300      	movs	r3, #0
 8001efe:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f04:	463b      	mov	r3, r7
 8001f06:	4618      	mov	r0, r3
 8001f08:	f018 f97e 	bl	801a208 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001f10:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001f14:	607b      	str	r3, [r7, #4]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001f16:	463b      	mov	r3, r7
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f018 f975 	bl	801a208 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001f1e:	2004      	movs	r0, #4
 8001f20:	f018 f952 	bl	801a1c8 <HAL_MPU_Enable>

}
 8001f24:	bf00      	nop
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001f30:	b672      	cpsid	i
}
 8001f32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <Error_Handler+0x8>

08001f38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f68 <HAL_MspInit+0x30>)
 8001f40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f44:	4a08      	ldr	r2, [pc, #32]	@ (8001f68 <HAL_MspInit+0x30>)
 8001f46:	f043 0302 	orr.w	r3, r3, #2
 8001f4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f4e:	4b06      	ldr	r3, [pc, #24]	@ (8001f68 <HAL_MspInit+0x30>)
 8001f50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	607b      	str	r3, [r7, #4]
 8001f5a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	58024400 	.word	0x58024400

08001f6c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b08e      	sub	sp, #56	@ 0x38
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f78:	2200      	movs	r2, #0
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	605a      	str	r2, [r3, #4]
 8001f7e:	609a      	str	r2, [r3, #8]
 8001f80:	60da      	str	r2, [r3, #12]
 8001f82:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a61      	ldr	r2, [pc, #388]	@ (8002110 <HAL_ETH_MspInit+0x1a4>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	f040 80bb 	bne.w	8002106 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001f90:	4b60      	ldr	r3, [pc, #384]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001f92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001f96:	4a5f      	ldr	r2, [pc, #380]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001f98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f9c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fa0:	4b5c      	ldr	r3, [pc, #368]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fa6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001faa:	623b      	str	r3, [r7, #32]
 8001fac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001fae:	4b59      	ldr	r3, [pc, #356]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fb4:	4a57      	ldr	r2, [pc, #348]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fbe:	4b55      	ldr	r3, [pc, #340]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001fcc:	4b51      	ldr	r3, [pc, #324]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fd2:	4a50      	ldr	r2, [pc, #320]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001fe2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe6:	61bb      	str	r3, [r7, #24]
 8001fe8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fea:	4b4a      	ldr	r3, [pc, #296]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff0:	4a48      	ldr	r2, [pc, #288]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001ff2:	f043 0304 	orr.w	r3, r3, #4
 8001ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ffa:	4b46      	ldr	r3, [pc, #280]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8001ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002008:	4b42      	ldr	r3, [pc, #264]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200e:	4a41      	ldr	r2, [pc, #260]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8002010:	f043 0301 	orr.w	r3, r3, #1
 8002014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002018:	4b3e      	ldr	r3, [pc, #248]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	f003 0301 	and.w	r3, r3, #1
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002026:	4b3b      	ldr	r3, [pc, #236]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8002028:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202c:	4a39      	ldr	r2, [pc, #228]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002036:	4b37      	ldr	r3, [pc, #220]	@ (8002114 <HAL_ETH_MspInit+0x1a8>)
 8002038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002044:	2302      	movs	r3, #2
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002048:	2302      	movs	r3, #2
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002050:	2303      	movs	r3, #3
 8002052:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002054:	230b      	movs	r3, #11
 8002056:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800205c:	4619      	mov	r1, r3
 800205e:	482e      	ldr	r0, [pc, #184]	@ (8002118 <HAL_ETH_MspInit+0x1ac>)
 8002060:	f01a f81a 	bl	801c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002064:	2306      	movs	r3, #6
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002074:	230b      	movs	r3, #11
 8002076:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800207c:	4619      	mov	r1, r3
 800207e:	4827      	ldr	r0, [pc, #156]	@ (800211c <HAL_ETH_MspInit+0x1b0>)
 8002080:	f01a f80a 	bl	801c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002084:	2380      	movs	r3, #128	@ 0x80
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002088:	2302      	movs	r3, #2
 800208a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002090:	2300      	movs	r3, #0
 8002092:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002094:	230b      	movs	r3, #11
 8002096:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002098:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800209c:	4619      	mov	r1, r3
 800209e:	481f      	ldr	r0, [pc, #124]	@ (800211c <HAL_ETH_MspInit+0x1b0>)
 80020a0:	f019 fffa 	bl	801c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020a4:	2330      	movs	r3, #48	@ 0x30
 80020a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a8:	2302      	movs	r3, #2
 80020aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ac:	2300      	movs	r3, #0
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b0:	2300      	movs	r3, #0
 80020b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020b4:	230b      	movs	r3, #11
 80020b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020bc:	4619      	mov	r1, r3
 80020be:	4816      	ldr	r0, [pc, #88]	@ (8002118 <HAL_ETH_MspInit+0x1ac>)
 80020c0:	f019 ffea 	bl	801c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80020c4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80020c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d2:	2303      	movs	r3, #3
 80020d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80020d6:	230b      	movs	r3, #11
 80020d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020de:	4619      	mov	r1, r3
 80020e0:	480f      	ldr	r0, [pc, #60]	@ (8002120 <HAL_ETH_MspInit+0x1b4>)
 80020e2:	f019 ffd9 	bl	801c098 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80020e6:	2200      	movs	r2, #0
 80020e8:	2105      	movs	r1, #5
 80020ea:	203d      	movs	r0, #61	@ 0x3d
 80020ec:	f018 f81f 	bl	801a12e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80020f0:	203d      	movs	r0, #61	@ 0x3d
 80020f2:	f018 f836 	bl	801a162 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2105      	movs	r1, #5
 80020fa:	203e      	movs	r0, #62	@ 0x3e
 80020fc:	f018 f817 	bl	801a12e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8002100:	203e      	movs	r0, #62	@ 0x3e
 8002102:	f018 f82e 	bl	801a162 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002106:	bf00      	nop
 8002108:	3738      	adds	r7, #56	@ 0x38
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40028000 	.word	0x40028000
 8002114:	58024400 	.word	0x58024400
 8002118:	58020800 	.word	0x58020800
 800211c:	58020000 	.word	0x58020000
 8002120:	58020400 	.word	0x58020400

08002124 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b0ba      	sub	sp, #232	@ 0xe8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800213c:	f107 0310 	add.w	r3, r7, #16
 8002140:	22c0      	movs	r2, #192	@ 0xc0
 8002142:	2100      	movs	r1, #0
 8002144:	4618      	mov	r0, r3
 8002146:	f020 fa00 	bl	802254a <memset>
  if(hi2c->Instance==I2C4)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a27      	ldr	r2, [pc, #156]	@ (80021ec <HAL_I2C_MspInit+0xc8>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d146      	bne.n	80021e2 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8002154:	f04f 0210 	mov.w	r2, #16
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8002160:	2300      	movs	r3, #0
 8002162:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002166:	f107 0310 	add.w	r3, r7, #16
 800216a:	4618      	mov	r0, r3
 800216c:	f01b fab2 	bl	801d6d4 <HAL_RCCEx_PeriphCLKConfig>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002176:	f7ff fed9 	bl	8001f2c <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800217a:	4b1d      	ldr	r3, [pc, #116]	@ (80021f0 <HAL_I2C_MspInit+0xcc>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002180:	4a1b      	ldr	r2, [pc, #108]	@ (80021f0 <HAL_I2C_MspInit+0xcc>)
 8002182:	f043 0308 	orr.w	r3, r3, #8
 8002186:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800218a:	4b19      	ldr	r3, [pc, #100]	@ (80021f0 <HAL_I2C_MspInit+0xcc>)
 800218c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8002198:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800219c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a0:	2312      	movs	r3, #18
 80021a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80021b2:	2304      	movs	r3, #4
 80021b4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021b8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80021bc:	4619      	mov	r1, r3
 80021be:	480d      	ldr	r0, [pc, #52]	@ (80021f4 <HAL_I2C_MspInit+0xd0>)
 80021c0:	f019 ff6a 	bl	801c098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <HAL_I2C_MspInit+0xcc>)
 80021c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021ca:	4a09      	ldr	r2, [pc, #36]	@ (80021f0 <HAL_I2C_MspInit+0xcc>)
 80021cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <HAL_I2C_MspInit+0xcc>)
 80021d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80021da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 80021e2:	bf00      	nop
 80021e4:	37e8      	adds	r7, #232	@ 0xe8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	58001c00 	.word	0x58001c00
 80021f0:	58024400 	.word	0x58024400
 80021f4:	58020c00 	.word	0x58020c00

080021f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b090      	sub	sp, #64	@ 0x40
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002200:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	605a      	str	r2, [r3, #4]
 800220a:	609a      	str	r2, [r3, #8]
 800220c:	60da      	str	r2, [r3, #12]
 800220e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a88      	ldr	r2, [pc, #544]	@ (8002438 <HAL_SPI_MspInit+0x240>)
 8002216:	4293      	cmp	r3, r2
 8002218:	f040 8083 	bne.w	8002322 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800221c:	4b87      	ldr	r3, [pc, #540]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800221e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002222:	4a86      	ldr	r2, [pc, #536]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002224:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002228:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800222c:	4b83      	ldr	r3, [pc, #524]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800222e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002232:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4b80      	ldr	r3, [pc, #512]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800223c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002240:	4a7e      	ldr	r2, [pc, #504]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800224a:	4b7c      	ldr	r3, [pc, #496]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800224c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002258:	4b78      	ldr	r3, [pc, #480]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800225a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800225e:	4a77      	ldr	r2, [pc, #476]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002260:	f043 0302 	orr.w	r3, r3, #2
 8002264:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002268:	4b74      	ldr	r3, [pc, #464]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8002276:	2370      	movs	r3, #112	@ 0x70
 8002278:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002286:	2305      	movs	r3, #5
 8002288:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800228a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800228e:	4619      	mov	r1, r3
 8002290:	486b      	ldr	r0, [pc, #428]	@ (8002440 <HAL_SPI_MspInit+0x248>)
 8002292:	f019 ff01 	bl	801c098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002296:	2320      	movs	r3, #32
 8002298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800229a:	2302      	movs	r3, #2
 800229c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80022a6:	2305      	movs	r3, #5
 80022a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80022ae:	4619      	mov	r1, r3
 80022b0:	4864      	ldr	r0, [pc, #400]	@ (8002444 <HAL_SPI_MspInit+0x24c>)
 80022b2:	f019 fef1 	bl	801c098 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 80022b6:	4b64      	ldr	r3, [pc, #400]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022b8:	4a64      	ldr	r2, [pc, #400]	@ (800244c <HAL_SPI_MspInit+0x254>)
 80022ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 80022bc:	4b62      	ldr	r3, [pc, #392]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022be:	2225      	movs	r2, #37	@ 0x25
 80022c0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80022c2:	4b61      	ldr	r3, [pc, #388]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80022ce:	4b5e      	ldr	r3, [pc, #376]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022d4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022d6:	4b5c      	ldr	r3, [pc, #368]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022d8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022de:	4b5a      	ldr	r3, [pc, #360]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022e0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022e4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80022e6:	4b58      	ldr	r3, [pc, #352]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022ec:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80022ee:	4b56      	ldr	r3, [pc, #344]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022f4:	4b54      	ldr	r3, [pc, #336]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80022fa:	4853      	ldr	r0, [pc, #332]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 80022fc:	f017 ffc4 	bl	801a288 <HAL_DMA_Init>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8002306:	f7ff fe11 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4e      	ldr	r2, [pc, #312]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 800230e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002310:	4a4d      	ldr	r2, [pc, #308]	@ (8002448 <HAL_SPI_MspInit+0x250>)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2023      	movs	r0, #35	@ 0x23
 800231c:	f017 ff07 	bl	801a12e <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002320:	e126      	b.n	8002570 <HAL_SPI_MspInit+0x378>
  else if(hspi->Instance==SPI2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a4a      	ldr	r2, [pc, #296]	@ (8002450 <HAL_SPI_MspInit+0x258>)
 8002328:	4293      	cmp	r3, r2
 800232a:	f040 8097 	bne.w	800245c <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800232e:	4b43      	ldr	r3, [pc, #268]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002330:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002334:	4a41      	ldr	r2, [pc, #260]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002336:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800233e:	4b3f      	ldr	r3, [pc, #252]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002340:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234c:	4b3b      	ldr	r3, [pc, #236]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002352:	4a3a      	ldr	r2, [pc, #232]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002354:	f043 0302 	orr.w	r3, r3, #2
 8002358:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800235c:	4b37      	ldr	r3, [pc, #220]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800235e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002362:	f003 0302 	and.w	r3, r3, #2
 8002366:	61bb      	str	r3, [r7, #24]
 8002368:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800236a:	4b34      	ldr	r3, [pc, #208]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002370:	4a32      	ldr	r2, [pc, #200]	@ (800243c <HAL_SPI_MspInit+0x244>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800237a:	4b30      	ldr	r3, [pc, #192]	@ (800243c <HAL_SPI_MspInit+0x244>)
 800237c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	617b      	str	r3, [r7, #20]
 8002386:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8002388:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800238c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238e:	2302      	movs	r3, #2
 8002390:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800239a:	2305      	movs	r3, #5
 800239c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023a2:	4619      	mov	r1, r3
 80023a4:	4827      	ldr	r0, [pc, #156]	@ (8002444 <HAL_SPI_MspInit+0x24c>)
 80023a6:	f019 fe77 	bl	801c098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80023aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b0:	2302      	movs	r3, #2
 80023b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b8:	2300      	movs	r3, #0
 80023ba:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023bc:	2305      	movs	r3, #5
 80023be:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80023c4:	4619      	mov	r1, r3
 80023c6:	481e      	ldr	r0, [pc, #120]	@ (8002440 <HAL_SPI_MspInit+0x248>)
 80023c8:	f019 fe66 	bl	801c098 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 80023cc:	4b21      	ldr	r3, [pc, #132]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023ce:	4a22      	ldr	r2, [pc, #136]	@ (8002458 <HAL_SPI_MspInit+0x260>)
 80023d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 80023d2:	4b20      	ldr	r3, [pc, #128]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023d4:	2227      	movs	r2, #39	@ 0x27
 80023d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023de:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023ea:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023ec:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023f2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023f4:	4b17      	ldr	r3, [pc, #92]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023f6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023fa:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80023fc:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 80023fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002402:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002404:	4b13      	ldr	r3, [pc, #76]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 8002406:	2200      	movs	r2, #0
 8002408:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800240a:	4b12      	ldr	r3, [pc, #72]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 800240c:	2200      	movs	r2, #0
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8002410:	4810      	ldr	r0, [pc, #64]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 8002412:	f017 ff39 	bl	801a288 <HAL_DMA_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 800241c:	f7ff fd86 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	4a0c      	ldr	r2, [pc, #48]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 8002424:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002426:	4a0b      	ldr	r2, [pc, #44]	@ (8002454 <HAL_SPI_MspInit+0x25c>)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800242c:	2200      	movs	r2, #0
 800242e:	2100      	movs	r1, #0
 8002430:	2024      	movs	r0, #36	@ 0x24
 8002432:	f017 fe7c 	bl	801a12e <HAL_NVIC_SetPriority>
}
 8002436:	e09b      	b.n	8002570 <HAL_SPI_MspInit+0x378>
 8002438:	40013000 	.word	0x40013000
 800243c:	58024400 	.word	0x58024400
 8002440:	58020000 	.word	0x58020000
 8002444:	58020400 	.word	0x58020400
 8002448:	20000290 	.word	0x20000290
 800244c:	40020010 	.word	0x40020010
 8002450:	40003800 	.word	0x40003800
 8002454:	20000308 	.word	0x20000308
 8002458:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a45      	ldr	r2, [pc, #276]	@ (8002578 <HAL_SPI_MspInit+0x380>)
 8002462:	4293      	cmp	r3, r2
 8002464:	f040 8084 	bne.w	8002570 <HAL_SPI_MspInit+0x378>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002468:	4b44      	ldr	r3, [pc, #272]	@ (800257c <HAL_SPI_MspInit+0x384>)
 800246a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800246e:	4a43      	ldr	r2, [pc, #268]	@ (800257c <HAL_SPI_MspInit+0x384>)
 8002470:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002474:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002478:	4b40      	ldr	r3, [pc, #256]	@ (800257c <HAL_SPI_MspInit+0x384>)
 800247a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800247e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002482:	613b      	str	r3, [r7, #16]
 8002484:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002486:	4b3d      	ldr	r3, [pc, #244]	@ (800257c <HAL_SPI_MspInit+0x384>)
 8002488:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248c:	4a3b      	ldr	r2, [pc, #236]	@ (800257c <HAL_SPI_MspInit+0x384>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002496:	4b39      	ldr	r3, [pc, #228]	@ (800257c <HAL_SPI_MspInit+0x384>)
 8002498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a4:	4b35      	ldr	r3, [pc, #212]	@ (800257c <HAL_SPI_MspInit+0x384>)
 80024a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024aa:	4a34      	ldr	r2, [pc, #208]	@ (800257c <HAL_SPI_MspInit+0x384>)
 80024ac:	f043 0304 	orr.w	r3, r3, #4
 80024b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024b4:	4b31      	ldr	r3, [pc, #196]	@ (800257c <HAL_SPI_MspInit+0x384>)
 80024b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	60bb      	str	r3, [r7, #8]
 80024c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80024c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024d4:	2306      	movs	r3, #6
 80024d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024dc:	4619      	mov	r1, r3
 80024de:	4828      	ldr	r0, [pc, #160]	@ (8002580 <HAL_SPI_MspInit+0x388>)
 80024e0:	f019 fdda 	bl	801c098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80024e4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80024e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80024f6:	2306      	movs	r3, #6
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80024fe:	4619      	mov	r1, r3
 8002500:	4820      	ldr	r0, [pc, #128]	@ (8002584 <HAL_SPI_MspInit+0x38c>)
 8002502:	f019 fdc9 	bl	801c098 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream7;
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002508:	4a20      	ldr	r2, [pc, #128]	@ (800258c <HAL_SPI_MspInit+0x394>)
 800250a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 800250c:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 800250e:	223d      	movs	r2, #61	@ 0x3d
 8002510:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002512:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002518:	4b1b      	ldr	r3, [pc, #108]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 800251a:	2200      	movs	r2, #0
 800251c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800251e:	4b1a      	ldr	r3, [pc, #104]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002520:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002524:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002526:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002528:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800252c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800252e:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002530:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002534:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8002536:	4b14      	ldr	r3, [pc, #80]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002538:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800253c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800253e:	4b12      	ldr	r3, [pc, #72]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002540:	2200      	movs	r2, #0
 8002542:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002544:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002546:	2200      	movs	r2, #0
 8002548:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800254a:	480f      	ldr	r0, [pc, #60]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 800254c:	f017 fe9c 	bl	801a288 <HAL_DMA_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_SPI_MspInit+0x362>
      Error_Handler();
 8002556:	f7ff fce9 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a0a      	ldr	r2, [pc, #40]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 800255e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002560:	4a09      	ldr	r2, [pc, #36]	@ (8002588 <HAL_SPI_MspInit+0x390>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8002566:	2200      	movs	r2, #0
 8002568:	2100      	movs	r1, #0
 800256a:	2033      	movs	r0, #51	@ 0x33
 800256c:	f017 fddf 	bl	801a12e <HAL_NVIC_SetPriority>
}
 8002570:	bf00      	nop
 8002572:	3740      	adds	r7, #64	@ 0x40
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40003c00 	.word	0x40003c00
 800257c:	58024400 	.word	0x58024400
 8002580:	58020000 	.word	0x58020000
 8002584:	58020800 	.word	0x58020800
 8002588:	20000380 	.word	0x20000380
 800258c:	400200b8 	.word	0x400200b8

08002590 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b088      	sub	sp, #32
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a87      	ldr	r2, [pc, #540]	@ (80027bc <HAL_TIM_Base_MspInit+0x22c>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d13e      	bne.n	8002620 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80025a2:	4b87      	ldr	r3, [pc, #540]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 80025a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025a8:	4a85      	ldr	r2, [pc, #532]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80025b2:	4b83      	ldr	r3, [pc, #524]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 80025b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80025b8:	f003 0301 	and.w	r3, r3, #1
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 80025c0:	4b80      	ldr	r3, [pc, #512]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025c2:	4a81      	ldr	r2, [pc, #516]	@ (80027c8 <HAL_TIM_Base_MspInit+0x238>)
 80025c4:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 80025c6:	4b7f      	ldr	r3, [pc, #508]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025c8:	220f      	movs	r2, #15
 80025ca:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025cc:	4b7d      	ldr	r3, [pc, #500]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025ce:	2240      	movs	r2, #64	@ 0x40
 80025d0:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d2:	4b7c      	ldr	r3, [pc, #496]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 80025d8:	4b7a      	ldr	r3, [pc, #488]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80025de:	4b79      	ldr	r3, [pc, #484]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025e4:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80025e6:	4b77      	ldr	r3, [pc, #476]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025e8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025ec:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 80025ee:	4b75      	ldr	r3, [pc, #468]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025f4:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 80025f6:	4b73      	ldr	r3, [pc, #460]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025fc:	4b71      	ldr	r3, [pc, #452]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8002602:	4870      	ldr	r0, [pc, #448]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 8002604:	f017 fe40 	bl	801a288 <HAL_DMA_Init>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800260e:	f7ff fc8d 	bl	8001f2c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a6b      	ldr	r2, [pc, #428]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 8002616:	621a      	str	r2, [r3, #32]
 8002618:	4a6a      	ldr	r2, [pc, #424]	@ (80027c4 <HAL_TIM_Base_MspInit+0x234>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800261e:	e129      	b.n	8002874 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002628:	d10f      	bne.n	800264a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800262a:	4b65      	ldr	r3, [pc, #404]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 800262c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002630:	4a63      	ldr	r2, [pc, #396]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800263a:	4b61      	ldr	r3, [pc, #388]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 800263c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
 8002646:	69bb      	ldr	r3, [r7, #24]
}
 8002648:	e114      	b.n	8002874 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a5f      	ldr	r2, [pc, #380]	@ (80027cc <HAL_TIM_Base_MspInit+0x23c>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d13e      	bne.n	80026d2 <HAL_TIM_Base_MspInit+0x142>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002654:	4b5a      	ldr	r3, [pc, #360]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 8002656:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800265a:	4a59      	ldr	r2, [pc, #356]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002664:	4b56      	ldr	r3, [pc, #344]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 8002666:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	697b      	ldr	r3, [r7, #20]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8002672:	4b57      	ldr	r3, [pc, #348]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 8002674:	4a57      	ldr	r2, [pc, #348]	@ (80027d4 <HAL_TIM_Base_MspInit+0x244>)
 8002676:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8002678:	4b55      	ldr	r3, [pc, #340]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 800267a:	221b      	movs	r2, #27
 800267c:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800267e:	4b54      	ldr	r3, [pc, #336]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 8002680:	2240      	movs	r2, #64	@ 0x40
 8002682:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002684:	4b52      	ldr	r3, [pc, #328]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 800268a:	4b51      	ldr	r3, [pc, #324]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002690:	4b4f      	ldr	r3, [pc, #316]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 8002692:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002696:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002698:	4b4d      	ldr	r3, [pc, #308]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 800269a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800269e:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 80026a0:	4b4b      	ldr	r3, [pc, #300]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 80026a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026a6:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 80026a8:	4b49      	ldr	r3, [pc, #292]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ae:	4b48      	ldr	r3, [pc, #288]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 80026b4:	4846      	ldr	r0, [pc, #280]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 80026b6:	f017 fde7 	bl	801a288 <HAL_DMA_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 80026c0:	f7ff fc34 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a42      	ldr	r2, [pc, #264]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 80026c8:	621a      	str	r2, [r3, #32]
 80026ca:	4a41      	ldr	r2, [pc, #260]	@ (80027d0 <HAL_TIM_Base_MspInit+0x240>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80026d0:	e0d0      	b.n	8002874 <HAL_TIM_Base_MspInit+0x2e4>
  else if(htim_base->Instance==TIM4)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a40      	ldr	r2, [pc, #256]	@ (80027d8 <HAL_TIM_Base_MspInit+0x248>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	f040 8087 	bne.w	80027ec <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80026de:	4b38      	ldr	r3, [pc, #224]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 80026e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026e4:	4a36      	ldr	r2, [pc, #216]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 80026e6:	f043 0304 	orr.w	r3, r3, #4
 80026ea:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80026ee:	4b34      	ldr	r3, [pc, #208]	@ (80027c0 <HAL_TIM_Base_MspInit+0x230>)
 80026f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream4;
 80026fc:	4b37      	ldr	r3, [pc, #220]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 80026fe:	4a38      	ldr	r2, [pc, #224]	@ (80027e0 <HAL_TIM_Base_MspInit+0x250>)
 8002700:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8002702:	4b36      	ldr	r3, [pc, #216]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002704:	221d      	movs	r2, #29
 8002706:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002708:	4b34      	ldr	r3, [pc, #208]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 800270a:	2240      	movs	r2, #64	@ 0x40
 800270c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800270e:	4b33      	ldr	r3, [pc, #204]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002710:	2200      	movs	r2, #0
 8002712:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_DISABLE;
 8002714:	4b31      	ldr	r3, [pc, #196]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800271a:	4b30      	ldr	r3, [pc, #192]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 800271c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002720:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002722:	4b2e      	ldr	r3, [pc, #184]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002724:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002728:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 800272a:	4b2c      	ldr	r3, [pc, #176]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 800272c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002730:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002732:	4b2a      	ldr	r3, [pc, #168]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002734:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002738:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800273a:	4b28      	ldr	r3, [pc, #160]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 800273c:	2200      	movs	r2, #0
 800273e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002740:	4826      	ldr	r0, [pc, #152]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002742:	f017 fda1 	bl	801a288 <HAL_DMA_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <HAL_TIM_Base_MspInit+0x1c0>
      Error_Handler();
 800274c:	f7ff fbee 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a22      	ldr	r2, [pc, #136]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002754:	625a      	str	r2, [r3, #36]	@ 0x24
 8002756:	4a21      	ldr	r2, [pc, #132]	@ (80027dc <HAL_TIM_Base_MspInit+0x24c>)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim4_up.Instance = DMA1_Stream5;
 800275c:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 800275e:	4a22      	ldr	r2, [pc, #136]	@ (80027e8 <HAL_TIM_Base_MspInit+0x258>)
 8002760:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Request = DMA_REQUEST_TIM4_UP;
 8002762:	4b20      	ldr	r3, [pc, #128]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 8002764:	2220      	movs	r2, #32
 8002766:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002768:	4b1e      	ldr	r3, [pc, #120]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 800276a:	2240      	movs	r2, #64	@ 0x40
 800276c:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 800276e:	4b1d      	ldr	r3, [pc, #116]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 8002770:	2200      	movs	r2, #0
 8002772:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_DISABLE;
 8002774:	4b1b      	ldr	r3, [pc, #108]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800277a:	4b1a      	ldr	r3, [pc, #104]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 800277c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002780:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002782:	4b18      	ldr	r3, [pc, #96]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 8002784:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002788:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_CIRCULAR;
 800278a:	4b16      	ldr	r3, [pc, #88]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 800278c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002790:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8002792:	4b14      	ldr	r3, [pc, #80]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 8002794:	2200      	movs	r2, #0
 8002796:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002798:	4b12      	ldr	r3, [pc, #72]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 800279e:	4811      	ldr	r0, [pc, #68]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 80027a0:	f017 fd72 	bl	801a288 <HAL_DMA_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_TIM_Base_MspInit+0x21e>
      Error_Handler();
 80027aa:	f7ff fbbf 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 80027b2:	621a      	str	r2, [r3, #32]
 80027b4:	4a0b      	ldr	r2, [pc, #44]	@ (80027e4 <HAL_TIM_Base_MspInit+0x254>)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80027ba:	e05b      	b.n	8002874 <HAL_TIM_Base_MspInit+0x2e4>
 80027bc:	40010000 	.word	0x40010000
 80027c0:	58024400 	.word	0x58024400
 80027c4:	20000574 	.word	0x20000574
 80027c8:	40020040 	.word	0x40020040
 80027cc:	40000400 	.word	0x40000400
 80027d0:	200005ec 	.word	0x200005ec
 80027d4:	40020058 	.word	0x40020058
 80027d8:	40000800 	.word	0x40000800
 80027dc:	20000664 	.word	0x20000664
 80027e0:	40020070 	.word	0x40020070
 80027e4:	200006dc 	.word	0x200006dc
 80027e8:	40020088 	.word	0x40020088
  else if(htim_base->Instance==TIM5)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a22      	ldr	r2, [pc, #136]	@ (800287c <HAL_TIM_Base_MspInit+0x2ec>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d13e      	bne.n	8002874 <HAL_TIM_Base_MspInit+0x2e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80027f6:	4b22      	ldr	r3, [pc, #136]	@ (8002880 <HAL_TIM_Base_MspInit+0x2f0>)
 80027f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027fc:	4a20      	ldr	r2, [pc, #128]	@ (8002880 <HAL_TIM_Base_MspInit+0x2f0>)
 80027fe:	f043 0308 	orr.w	r3, r3, #8
 8002802:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002806:	4b1e      	ldr	r3, [pc, #120]	@ (8002880 <HAL_TIM_Base_MspInit+0x2f0>)
 8002808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280c:	f003 0308 	and.w	r3, r3, #8
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    hdma_tim5_up.Instance = DMA1_Stream6;
 8002814:	4b1b      	ldr	r3, [pc, #108]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 8002816:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_TIM_Base_MspInit+0x2f8>)
 8002818:	601a      	str	r2, [r3, #0]
    hdma_tim5_up.Init.Request = DMA_REQUEST_TIM5_UP;
 800281a:	4b1a      	ldr	r3, [pc, #104]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 800281c:	223b      	movs	r2, #59	@ 0x3b
 800281e:	605a      	str	r2, [r3, #4]
    hdma_tim5_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002820:	4b18      	ldr	r3, [pc, #96]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 8002822:	2240      	movs	r2, #64	@ 0x40
 8002824:	609a      	str	r2, [r3, #8]
    hdma_tim5_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002826:	4b17      	ldr	r3, [pc, #92]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 8002828:	2200      	movs	r2, #0
 800282a:	60da      	str	r2, [r3, #12]
    hdma_tim5_up.Init.MemInc = DMA_MINC_ENABLE;
 800282c:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 800282e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002832:	611a      	str	r2, [r3, #16]
    hdma_tim5_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 8002836:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800283a:	615a      	str	r2, [r3, #20]
    hdma_tim5_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 800283e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002842:	619a      	str	r2, [r3, #24]
    hdma_tim5_up.Init.Mode = DMA_CIRCULAR;
 8002844:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 8002846:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800284a:	61da      	str	r2, [r3, #28]
    hdma_tim5_up.Init.Priority = DMA_PRIORITY_LOW;
 800284c:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 800284e:	2200      	movs	r2, #0
 8002850:	621a      	str	r2, [r3, #32]
    hdma_tim5_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002852:	4b0c      	ldr	r3, [pc, #48]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 8002854:	2200      	movs	r2, #0
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_up) != HAL_OK)
 8002858:	480a      	ldr	r0, [pc, #40]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 800285a:	f017 fd15 	bl	801a288 <HAL_DMA_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_TIM_Base_MspInit+0x2d8>
      Error_Handler();
 8002864:	f7ff fb62 	bl	8001f2c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim5_up);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a06      	ldr	r2, [pc, #24]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 800286c:	621a      	str	r2, [r3, #32]
 800286e:	4a05      	ldr	r2, [pc, #20]	@ (8002884 <HAL_TIM_Base_MspInit+0x2f4>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002874:	bf00      	nop
 8002876:	3720      	adds	r7, #32
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40000c00 	.word	0x40000c00
 8002880:	58024400 	.word	0x58024400
 8002884:	20000754 	.word	0x20000754
 8002888:	400200a0 	.word	0x400200a0

0800288c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	2200      	movs	r2, #0
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	605a      	str	r2, [r3, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	60da      	str	r2, [r3, #12]
 80028a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a12      	ldr	r2, [pc, #72]	@ (80028f4 <HAL_TIM_MspPostInit+0x68>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d11e      	bne.n	80028ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ae:	4b12      	ldr	r3, [pc, #72]	@ (80028f8 <HAL_TIM_MspPostInit+0x6c>)
 80028b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028b4:	4a10      	ldr	r2, [pc, #64]	@ (80028f8 <HAL_TIM_MspPostInit+0x6c>)
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80028be:	4b0e      	ldr	r3, [pc, #56]	@ (80028f8 <HAL_TIM_MspPostInit+0x6c>)
 80028c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80028c4:	f003 0302 	and.w	r3, r3, #2
 80028c8:	60bb      	str	r3, [r7, #8]
 80028ca:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028cc:	23c0      	movs	r3, #192	@ 0xc0
 80028ce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d8:	2300      	movs	r3, #0
 80028da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028dc:	2302      	movs	r3, #2
 80028de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 030c 	add.w	r3, r7, #12
 80028e4:	4619      	mov	r1, r3
 80028e6:	4805      	ldr	r0, [pc, #20]	@ (80028fc <HAL_TIM_MspPostInit+0x70>)
 80028e8:	f019 fbd6 	bl	801c098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80028ec:	bf00      	nop
 80028ee:	3720      	adds	r7, #32
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40000800 	.word	0x40000800
 80028f8:	58024400 	.word	0x58024400
 80028fc:	58020400 	.word	0x58020400

08002900 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b0ba      	sub	sp, #232	@ 0xe8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002918:	f107 0310 	add.w	r3, r7, #16
 800291c:	22c0      	movs	r2, #192	@ 0xc0
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f01f fe12 	bl	802254a <memset>
  if(huart->Instance==USART3)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a27      	ldr	r2, [pc, #156]	@ (80029c8 <HAL_UART_MspInit+0xc8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d146      	bne.n	80029be <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002930:	f04f 0202 	mov.w	r2, #2
 8002934:	f04f 0300 	mov.w	r3, #0
 8002938:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800293c:	2300      	movs	r3, #0
 800293e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002942:	f107 0310 	add.w	r3, r7, #16
 8002946:	4618      	mov	r0, r3
 8002948:	f01a fec4 	bl	801d6d4 <HAL_RCCEx_PeriphCLKConfig>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002952:	f7ff faeb 	bl	8001f2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002956:	4b1d      	ldr	r3, [pc, #116]	@ (80029cc <HAL_UART_MspInit+0xcc>)
 8002958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800295c:	4a1b      	ldr	r2, [pc, #108]	@ (80029cc <HAL_UART_MspInit+0xcc>)
 800295e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002962:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002966:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_UART_MspInit+0xcc>)
 8002968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800296c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002974:	4b15      	ldr	r3, [pc, #84]	@ (80029cc <HAL_UART_MspInit+0xcc>)
 8002976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800297a:	4a14      	ldr	r2, [pc, #80]	@ (80029cc <HAL_UART_MspInit+0xcc>)
 800297c:	f043 0308 	orr.w	r3, r3, #8
 8002980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002984:	4b11      	ldr	r3, [pc, #68]	@ (80029cc <HAL_UART_MspInit+0xcc>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800298a:	f003 0308 	and.w	r3, r3, #8
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002992:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299a:	2302      	movs	r3, #2
 800299c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80029ac:	2307      	movs	r3, #7
 80029ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80029b6:	4619      	mov	r1, r3
 80029b8:	4805      	ldr	r0, [pc, #20]	@ (80029d0 <HAL_UART_MspInit+0xd0>)
 80029ba:	f019 fb6d 	bl	801c098 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80029be:	bf00      	nop
 80029c0:	37e8      	adds	r7, #232	@ 0xe8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40004800 	.word	0x40004800
 80029cc:	58024400 	.word	0x58024400
 80029d0:	58020c00 	.word	0x58020c00

080029d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029d8:	bf00      	nop
 80029da:	e7fd      	b.n	80029d8 <NMI_Handler+0x4>

080029dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <MemManage_Handler+0x4>

080029e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e8:	bf00      	nop
 80029ea:	e7fd      	b.n	80029e8 <BusFault_Handler+0x4>

080029ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029f0:	bf00      	nop
 80029f2:	e7fd      	b.n	80029f0 <UsageFault_Handler+0x4>

080029f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a06:	f017 fa53 	bl	8019eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002a0a:	f002 fb33 	bl	8005074 <xTaskGetSchedulerState>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d101      	bne.n	8002a18 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002a14:	f003 fc10 	bl	8006238 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b086      	sub	sp, #24
 8002a20:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002a26:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <DMA1_Stream0_IRQHandler+0x70>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00c      	beq.n	8002a4c <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002a32:	4b17      	ldr	r3, [pc, #92]	@ (8002a90 <DMA1_Stream0_IRQHandler+0x74>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e001      	b.n	8002a4c <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002a4c:	4811      	ldr	r0, [pc, #68]	@ (8002a94 <DMA1_Stream0_IRQHandler+0x78>)
 8002a4e:	f018 f9bd 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <DMA1_Stream0_IRQHandler+0x7c>)
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	1d3b      	adds	r3, r7, #4
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2300      	movs	r3, #0
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2301      	movs	r3, #1
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	2100      	movs	r1, #0
 8002a68:	f002 ff5c 	bl	8005924 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <DMA1_Stream0_IRQHandler+0x66>
 8002a72:	4b0a      	ldr	r3, [pc, #40]	@ (8002a9c <DMA1_Stream0_IRQHandler+0x80>)
 8002a74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40020000 	.word	0x40020000
 8002a90:	40020010 	.word	0x40020010
 8002a94:	20000290 	.word	0x20000290
 8002a98:	20000d34 	.word	0x20000d34
 8002a9c:	e000ed04 	.word	0xe000ed04

08002aa0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF1_5){
 8002aaa:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <DMA1_Stream1_IRQHandler+0x70>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00c      	beq.n	8002ad0 <DMA1_Stream1_IRQHandler+0x30>
      uint32_t status = DMA1_Stream1->CR;
 8002ab6:	4b17      	ldr	r3, [pc, #92]	@ (8002b14 <DMA1_Stream1_IRQHandler+0x74>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	60bb      	str	r3, [r7, #8]
	if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <DMA1_Stream1_IRQHandler+0x2c>
	ulCurrBuf = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	60fb      	str	r3, [r7, #12]
 8002aca:	e001      	b.n	8002ad0 <DMA1_Stream1_IRQHandler+0x30>
	} else {
	ulCurrBuf = 1;
 8002acc:	2301      	movs	r3, #1
 8002ace:	60fb      	str	r3, [r7, #12]
	}

    }
  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002ad0:	4811      	ldr	r0, [pc, #68]	@ (8002b18 <DMA1_Stream1_IRQHandler+0x78>)
 8002ad2:	f018 f97b 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
       xTaskNotifyFromISR() unblocks the handling task, and the priority of
       the handling task is higher than the priority of the currently running task,
       then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
    xHigherPriorityTaskWoken = pdFALSE;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	607b      	str	r3, [r7, #4]
    /* Unblock the handling task so the task can perform any processing necessitated
       by the interrupt. xHandlingTask is the task's handle, which was obtained
       when the task was created. The handling task's 0th notification value
       is bitwise ORed with the interrupt status - ensuring bits that are already
       set are not overwritten. */
    xTaskNotifyFromISR( vAuxADCTCPTaskHandle,
 8002ada:	4b10      	ldr	r3, [pc, #64]	@ (8002b1c <DMA1_Stream1_IRQHandler+0x7c>)
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	1d3b      	adds	r3, r7, #4
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	2100      	movs	r1, #0
 8002aec:	f002 ff1a 	bl	8005924 <xTaskGenericNotifyFromISR>
  			     &xHigherPriorityTaskWoken );

    /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
       The macro used to do this is dependent on the port and may be called
       portEND_SWITCHING_ISR. */
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d007      	beq.n	8002b06 <DMA1_Stream1_IRQHandler+0x66>
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <DMA1_Stream1_IRQHandler+0x80>)
 8002af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002afc:	601a      	str	r2, [r3, #0]
 8002afe:	f3bf 8f4f 	dsb	sy
 8002b02:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40020000 	.word	0x40020000
 8002b14:	40020028 	.word	0x40020028
 8002b18:	20000308 	.word	0x20000308
 8002b1c:	20000d38 	.word	0x20000d38
 8002b20:	e000ed04 	.word	0xe000ed04

08002b24 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8002b28:	4802      	ldr	r0, [pc, #8]	@ (8002b34 <DMA1_Stream2_IRQHandler+0x10>)
 8002b2a:	f018 f94f 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002b2e:	bf00      	nop
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	20000574 	.word	0x20000574

08002b38 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8002b3c:	4802      	ldr	r0, [pc, #8]	@ (8002b48 <DMA1_Stream3_IRQHandler+0x10>)
 8002b3e:	f018 f945 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002b42:	bf00      	nop
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	200005ec 	.word	0x200005ec

08002b4c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002b50:	4802      	ldr	r0, [pc, #8]	@ (8002b5c <DMA1_Stream4_IRQHandler+0x10>)
 8002b52:	f018 f93b 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002b56:	bf00      	nop
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000664 	.word	0x20000664

08002b60 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8002b64:	4802      	ldr	r0, [pc, #8]	@ (8002b70 <DMA1_Stream5_IRQHandler+0x10>)
 8002b66:	f018 f931 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	200006dc 	.word	0x200006dc

08002b74 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_up);
 8002b78:	4802      	ldr	r0, [pc, #8]	@ (8002b84 <DMA1_Stream6_IRQHandler+0x10>)
 8002b7a:	f018 f927 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20000754 	.word	0x20000754

08002b88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <SPI1_IRQHandler+0x10>)
 8002b8e:	f01c fcf1 	bl	801f574 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	200000f8 	.word	0x200000f8

08002b9c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002ba0:	4802      	ldr	r0, [pc, #8]	@ (8002bac <SPI2_IRQHandler+0x10>)
 8002ba2:	f01c fce7 	bl	801f574 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	20000180 	.word	0x20000180

08002bb0 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8002bb4:	4802      	ldr	r0, [pc, #8]	@ (8002bc0 <DMA1_Stream7_IRQHandler+0x10>)
 8002bb6:	f018 f909 	bl	801adcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002bba:	bf00      	nop
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	20000380 	.word	0x20000380

08002bc4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8002bc8:	4802      	ldr	r0, [pc, #8]	@ (8002bd4 <SPI3_IRQHandler+0x10>)
 8002bca:	f01c fcd3 	bl	801f574 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	20000208 	.word	0x20000208

08002bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return 1;
 8002bdc:	2301      	movs	r3, #1
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_kill>:

int _kill(int pid, int sig)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
 8002bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bf2:	f020 fbd1 	bl	8023398 <__errno>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2216      	movs	r2, #22
 8002bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8002bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <_exit>:

void _exit (int status)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002c10:	f04f 31ff 	mov.w	r1, #4294967295
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff ffe7 	bl	8002be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c1a:	bf00      	nop
 8002c1c:	e7fd      	b.n	8002c1a <_exit+0x12>

08002c1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	e00a      	b.n	8002c46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c30:	f3af 8000 	nop.w
 8002c34:	4601      	mov	r1, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	60ba      	str	r2, [r7, #8]
 8002c3c:	b2ca      	uxtb	r2, r1
 8002c3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	dbf0      	blt.n	8002c30 <_read+0x12>
  }

  return len;
 8002c4e:	687b      	ldr	r3, [r7, #4]
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3718      	adds	r7, #24
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	617b      	str	r3, [r7, #20]
 8002c68:	e009      	b.n	8002c7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1c5a      	adds	r2, r3, #1
 8002c6e:	60ba      	str	r2, [r7, #8]
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	dbf1      	blt.n	8002c6a <_write+0x12>
  }
  return len;
 8002c86:	687b      	ldr	r3, [r7, #4]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3718      	adds	r7, #24
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <_close>:

int _close(int file)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002cb8:	605a      	str	r2, [r3, #4]
  return 0;
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <_isatty>:

int _isatty(int file)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cd0:	2301      	movs	r3, #1
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	370c      	adds	r7, #12
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr

08002cde <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cde:	b480      	push	{r7}
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d00:	4a14      	ldr	r2, [pc, #80]	@ (8002d54 <_sbrk+0x5c>)
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <_sbrk+0x60>)
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d0c:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <_sbrk+0x64>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d102      	bne.n	8002d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d14:	4b11      	ldr	r3, [pc, #68]	@ (8002d5c <_sbrk+0x64>)
 8002d16:	4a12      	ldr	r2, [pc, #72]	@ (8002d60 <_sbrk+0x68>)
 8002d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1a:	4b10      	ldr	r3, [pc, #64]	@ (8002d5c <_sbrk+0x64>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4413      	add	r3, r2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d207      	bcs.n	8002d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d28:	f020 fb36 	bl	8023398 <__errno>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	220c      	movs	r2, #12
 8002d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
 8002d36:	e009      	b.n	8002d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d38:	4b08      	ldr	r3, [pc, #32]	@ (8002d5c <_sbrk+0x64>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d3e:	4b07      	ldr	r3, [pc, #28]	@ (8002d5c <_sbrk+0x64>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4413      	add	r3, r2
 8002d46:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <_sbrk+0x64>)
 8002d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	24080000 	.word	0x24080000
 8002d58:	00000400 	.word	0x00000400
 8002d5c:	20000d40 	.word	0x20000d40
 8002d60:	20002800 	.word	0x20002800

08002d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002d6a:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <SystemInit+0x104>)
 8002d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d70:	4a3d      	ldr	r2, [pc, #244]	@ (8002e68 <SystemInit+0x104>)
 8002d72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d76:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e6c <SystemInit+0x108>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	2b06      	cmp	r3, #6
 8002d84:	d807      	bhi.n	8002d96 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d86:	4b39      	ldr	r3, [pc, #228]	@ (8002e6c <SystemInit+0x108>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 030f 	bic.w	r3, r3, #15
 8002d8e:	4a37      	ldr	r2, [pc, #220]	@ (8002e6c <SystemInit+0x108>)
 8002d90:	f043 0307 	orr.w	r3, r3, #7
 8002d94:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d96:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <SystemInit+0x10c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a35      	ldr	r2, [pc, #212]	@ (8002e70 <SystemInit+0x10c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002da2:	4b33      	ldr	r3, [pc, #204]	@ (8002e70 <SystemInit+0x10c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002da8:	4b31      	ldr	r3, [pc, #196]	@ (8002e70 <SystemInit+0x10c>)
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	4930      	ldr	r1, [pc, #192]	@ (8002e70 <SystemInit+0x10c>)
 8002dae:	4b31      	ldr	r3, [pc, #196]	@ (8002e74 <SystemInit+0x110>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002db4:	4b2d      	ldr	r3, [pc, #180]	@ (8002e6c <SystemInit+0x108>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0308 	and.w	r3, r3, #8
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d007      	beq.n	8002dd0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8002e6c <SystemInit+0x108>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f023 030f 	bic.w	r3, r3, #15
 8002dc8:	4a28      	ldr	r2, [pc, #160]	@ (8002e6c <SystemInit+0x108>)
 8002dca:	f043 0307 	orr.w	r3, r3, #7
 8002dce:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002dd0:	4b27      	ldr	r3, [pc, #156]	@ (8002e70 <SystemInit+0x10c>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002dd6:	4b26      	ldr	r3, [pc, #152]	@ (8002e70 <SystemInit+0x10c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002ddc:	4b24      	ldr	r3, [pc, #144]	@ (8002e70 <SystemInit+0x10c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002de2:	4b23      	ldr	r3, [pc, #140]	@ (8002e70 <SystemInit+0x10c>)
 8002de4:	4a24      	ldr	r2, [pc, #144]	@ (8002e78 <SystemInit+0x114>)
 8002de6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002de8:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <SystemInit+0x10c>)
 8002dea:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <SystemInit+0x118>)
 8002dec:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002dee:	4b20      	ldr	r3, [pc, #128]	@ (8002e70 <SystemInit+0x10c>)
 8002df0:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <SystemInit+0x11c>)
 8002df2:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002df4:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <SystemInit+0x10c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8002e70 <SystemInit+0x10c>)
 8002dfc:	4a20      	ldr	r2, [pc, #128]	@ (8002e80 <SystemInit+0x11c>)
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002e00:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <SystemInit+0x10c>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002e06:	4b1a      	ldr	r3, [pc, #104]	@ (8002e70 <SystemInit+0x10c>)
 8002e08:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <SystemInit+0x11c>)
 8002e0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002e0c:	4b18      	ldr	r3, [pc, #96]	@ (8002e70 <SystemInit+0x10c>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002e12:	4b17      	ldr	r3, [pc, #92]	@ (8002e70 <SystemInit+0x10c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a16      	ldr	r2, [pc, #88]	@ (8002e70 <SystemInit+0x10c>)
 8002e18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e1e:	4b14      	ldr	r3, [pc, #80]	@ (8002e70 <SystemInit+0x10c>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002e24:	4b17      	ldr	r3, [pc, #92]	@ (8002e84 <SystemInit+0x120>)
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	4b17      	ldr	r3, [pc, #92]	@ (8002e88 <SystemInit+0x124>)
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e30:	d202      	bcs.n	8002e38 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002e32:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <SystemInit+0x128>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8002e38:	4b0d      	ldr	r3, [pc, #52]	@ (8002e70 <SystemInit+0x10c>)
 8002e3a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e70 <SystemInit+0x10c>)
 8002e40:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8002e44:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8002e48:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <SystemInit+0x10c>)
 8002e4a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002e4e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8002e50:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002e52:	4b0f      	ldr	r3, [pc, #60]	@ (8002e90 <SystemInit+0x12c>)
 8002e54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002e58:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000ed00 	.word	0xe000ed00
 8002e6c:	52002000 	.word	0x52002000
 8002e70:	58024400 	.word	0x58024400
 8002e74:	eaf6ed7f 	.word	0xeaf6ed7f
 8002e78:	02020200 	.word	0x02020200
 8002e7c:	01ff0000 	.word	0x01ff0000
 8002e80:	01010280 	.word	0x01010280
 8002e84:	5c001000 	.word	0x5c001000
 8002e88:	ffff0000 	.word	0xffff0000
 8002e8c:	51008108 	.word	0x51008108
 8002e90:	52004000 	.word	0x52004000

08002e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ecc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e98:	f7ff ff64 	bl	8002d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e9c:	480c      	ldr	r0, [pc, #48]	@ (8002ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e9e:	490d      	ldr	r1, [pc, #52]	@ (8002ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea4:	e002      	b.n	8002eac <LoopCopyDataInit>

08002ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eaa:	3304      	adds	r3, #4

08002eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb0:	d3f9      	bcc.n	8002ea6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb8:	e001      	b.n	8002ebe <LoopFillZerobss>

08002eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ebc:	3204      	adds	r2, #4

08002ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec0:	d3fb      	bcc.n	8002eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f020 fa6f 	bl	80233a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ec6:	f7fd fbeb 	bl	80006a0 <main>
  bx  lr
 8002eca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ecc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002ed8:	080278b8 	.word	0x080278b8
  ldr r2, =_sbss
 8002edc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002ee0:	20002800 	.word	0x20002800

08002ee4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee4:	e7fe      	b.n	8002ee4 <ADC3_IRQHandler>

08002ee6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002eec:	201c      	movs	r0, #28
 8002eee:	f003 fa21 	bl	8006334 <pvPortMalloc>
 8002ef2:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d007      	beq.n	8002f0a <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3304      	adds	r3, #4
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 f9c3 	bl	8003290 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8002f0a:	687b      	ldr	r3, [r7, #4]
        }
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b08c      	sub	sp, #48	@ 0x30
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d104      	bne.n	8002f3e <xEventGroupWaitBits+0x2a>
 8002f34:	f240 1147 	movw	r1, #327	@ 0x147
 8002f38:	4850      	ldr	r0, [pc, #320]	@ (800307c <xEventGroupWaitBits+0x168>)
 8002f3a:	f7fe fcfd 	bl	8001938 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f44:	d304      	bcc.n	8002f50 <xEventGroupWaitBits+0x3c>
 8002f46:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8002f4a:	484c      	ldr	r0, [pc, #304]	@ (800307c <xEventGroupWaitBits+0x168>)
 8002f4c:	f7fe fcf4 	bl	8001938 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d104      	bne.n	8002f60 <xEventGroupWaitBits+0x4c>
 8002f56:	f240 1149 	movw	r1, #329	@ 0x149
 8002f5a:	4848      	ldr	r0, [pc, #288]	@ (800307c <xEventGroupWaitBits+0x168>)
 8002f5c:	f7fe fcec 	bl	8001938 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f60:	f002 f888 	bl	8005074 <xTaskGetSchedulerState>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <xEventGroupWaitBits+0x5c>
 8002f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <xEventGroupWaitBits+0x60>
 8002f70:	2301      	movs	r3, #1
 8002f72:	e000      	b.n	8002f76 <xEventGroupWaitBits+0x62>
 8002f74:	2300      	movs	r3, #0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d104      	bne.n	8002f84 <xEventGroupWaitBits+0x70>
 8002f7a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002f7e:	483f      	ldr	r0, [pc, #252]	@ (800307c <xEventGroupWaitBits+0x168>)
 8002f80:	f7fe fcda 	bl	8001938 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 8002f84:	f001 fa58 	bl	8004438 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	69f8      	ldr	r0, [r7, #28]
 8002f94:	f000 f95a 	bl	800324c <prvTestWaitCondition>
 8002f98:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00e      	beq.n	8002fbe <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d028      	beq.n	8003000 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	43db      	mvns	r3, r3
 8002fb6:	401a      	ands	r2, r3
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e020      	b.n	8003000 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 8002fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d104      	bne.n	8002fce <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	623b      	str	r3, [r7, #32]
 8002fcc:	e018      	b.n	8003000 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	1d18      	adds	r0, r3, #4
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	f001 fd06 	bl	8004a08 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003000:	f001 fa28 	bl	8004454 <xTaskResumeAll>
 8003004:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 8003006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003008:	2b00      	cmp	r3, #0
 800300a:	d031      	beq.n	8003070 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 8003012:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <xEventGroupWaitBits+0x16c>)
 8003014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	f3bf 8f4f 	dsb	sy
 800301e:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 8003022:	f002 fa31 	bl	8005488 <uxTaskResetEventItemValue>
 8003026:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8003028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800302a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d11a      	bne.n	8003068 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 8003032:	f003 f87d 	bl	8006130 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003042:	f000 f903 	bl	800324c <prvTestWaitCondition>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d006      	beq.n	8003060 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	43db      	mvns	r3, r3
 800305a:	401a      	ands	r2, r3
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8003060:	2301      	movs	r3, #1
 8003062:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8003064:	f003 f890 	bl	8006188 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800306e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8003070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8003072:	4618      	mov	r0, r3
 8003074:	3730      	adds	r7, #48	@ 0x30
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	08024110 	.word	0x08024110
 8003080:	e000ed04 	.word	0xe000ed04

08003084 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d104      	bne.n	80030a2 <xEventGroupClearBits+0x1e>
 8003098:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 800309c:	480f      	ldr	r0, [pc, #60]	@ (80030dc <xEventGroupClearBits+0x58>)
 800309e:	f7fe fc4b 	bl	8001938 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a8:	d304      	bcc.n	80030b4 <xEventGroupClearBits+0x30>
 80030aa:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80030ae:	480b      	ldr	r0, [pc, #44]	@ (80030dc <xEventGroupClearBits+0x58>)
 80030b0:	f7fe fc42 	bl	8001938 <vAssertCalled>

        taskENTER_CRITICAL();
 80030b4:	f003 f83c 	bl	8006130 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	401a      	ands	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80030cc:	f003 f85c 	bl	8006188 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 80030d0:	68bb      	ldr	r3, [r7, #8]
    }
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	08024110 	.word	0x08024110

080030e0 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08c      	sub	sp, #48	@ 0x30
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80030ea:	2300      	movs	r3, #0
 80030ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 80030f2:	2300      	movs	r3, #0
 80030f4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d104      	bne.n	8003106 <xEventGroupSetBits+0x26>
 80030fc:	f240 2132 	movw	r1, #562	@ 0x232
 8003100:	4836      	ldr	r0, [pc, #216]	@ (80031dc <xEventGroupSetBits+0xfc>)
 8003102:	f7fe fc19 	bl	8001938 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800310c:	d304      	bcc.n	8003118 <xEventGroupSetBits+0x38>
 800310e:	f240 2133 	movw	r1, #563	@ 0x233
 8003112:	4832      	ldr	r0, [pc, #200]	@ (80031dc <xEventGroupSetBits+0xfc>)
 8003114:	f7fe fc10 	bl	8001938 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	3304      	adds	r3, #4
 800311c:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3308      	adds	r3, #8
 8003122:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8003124:	f001 f988 	bl	8004438 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	431a      	orrs	r2, r3
 8003136:	6a3b      	ldr	r3, [r7, #32]
 8003138:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 800313a:	e03c      	b.n	80031b6 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 800313c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8003142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8003148:	2300      	movs	r3, #0
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003152:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800315a:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d108      	bne.n	8003178 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4013      	ands	r3, r2
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 8003172:	2301      	movs	r3, #1
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
 8003176:	e008      	b.n	800318a <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8003178:	6a3b      	ldr	r3, [r7, #32]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	429a      	cmp	r2, r3
 8003184:	d101      	bne.n	800318a <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 8003186:	2301      	movs	r3, #1
 8003188:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 800318a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318c:	2b00      	cmp	r3, #0
 800318e:	d010      	beq.n	80031b2 <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 800319a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4313      	orrs	r3, r2
 80031a0:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80031aa:	4619      	mov	r1, r3
 80031ac:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80031ae:	f001 fd49 	bl	8004c44 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 80031b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d1be      	bne.n	800313c <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80031be:	6a3b      	ldr	r3, [r7, #32]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c4:	43db      	mvns	r3, r3
 80031c6:	401a      	ands	r2, r3
 80031c8:	6a3b      	ldr	r3, [r7, #32]
 80031ca:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 80031cc:	f001 f942 	bl	8004454 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	681b      	ldr	r3, [r3, #0]
    }
 80031d4:	4618      	mov	r0, r3
 80031d6:	3730      	adds	r7, #48	@ 0x30
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	08024110 	.word	0x08024110

080031e0 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d104      	bne.n	80031fc <vEventGroupDelete+0x1c>
 80031f2:	f240 218e 	movw	r1, #654	@ 0x28e
 80031f6:	4814      	ldr	r0, [pc, #80]	@ (8003248 <vEventGroupDelete+0x68>)
 80031f8:	f7fe fb9e 	bl	8001938 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	3304      	adds	r3, #4
 8003200:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 8003202:	f001 f919 	bl	8004438 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8003206:	e011      	b.n	800322c <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	3308      	adds	r3, #8
 8003210:	429a      	cmp	r2, r3
 8003212:	d104      	bne.n	800321e <vEventGroupDelete+0x3e>
 8003214:	f240 219a 	movw	r1, #666	@ 0x29a
 8003218:	480b      	ldr	r0, [pc, #44]	@ (8003248 <vEventGroupDelete+0x68>)
 800321a:	f7fe fb8d 	bl	8001938 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003226:	4618      	mov	r0, r3
 8003228:	f001 fd0c 	bl	8004c44 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1e9      	bne.n	8003208 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8003234:	f001 f90e 	bl	8004454 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8003238:	68f8      	ldr	r0, [r7, #12]
 800323a:	f003 f94f 	bl	80064dc <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 800323e:	bf00      	nop
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	08024110 	.word	0x08024110

0800324c <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 800324c:	b480      	push	{r7}
 800324e:	b087      	sub	sp, #28
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d107      	bne.n	8003272 <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8003262:	68fa      	ldr	r2, [r7, #12]
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800326c:	2301      	movs	r3, #1
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	e007      	b.n	8003282 <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	4013      	ands	r3, r2
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d101      	bne.n	8003282 <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800327e:	2301      	movs	r3, #1
 8003280:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 8003282:	697b      	ldr	r3, [r7, #20]
    }
 8003284:	4618      	mov	r0, r3
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f103 0208 	add.w	r2, r3, #8
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f04f 32ff 	mov.w	r2, #4294967295
 80032a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f103 0208 	add.w	r2, r3, #8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f103 0208 	add.w	r2, r3, #8
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80032de:	bf00      	nop
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
 80032f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	683a      	ldr	r2, [r7, #0]
 8003314:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8003326:	bf00      	nop
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d103      	bne.n	8003352 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	e00c      	b.n	800336c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	3308      	adds	r3, #8
 8003356:	60fb      	str	r3, [r7, #12]
 8003358:	e002      	b.n	8003360 <vListInsert+0x2e>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	429a      	cmp	r2, r3
 800336a:	d2f6      	bcs.n	800335a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	683a      	ldr	r2, [r7, #0]
 8003386:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	1c5a      	adds	r2, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 8003398:	bf00      	nop
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6892      	ldr	r2, [r2, #8]
 80033ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6852      	ldr	r2, [r2, #4]
 80033c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d103      	bne.n	80033d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	1e5a      	subs	r2, r3, #1
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003402:	2301      	movs	r3, #1
 8003404:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d104      	bne.n	800341a <xQueueGenericReset+0x22>
 8003410:	f240 1137 	movw	r1, #311	@ 0x137
 8003414:	4839      	ldr	r0, [pc, #228]	@ (80034fc <xQueueGenericReset+0x104>)
 8003416:	f7fe fa8f 	bl	8001938 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05d      	beq.n	80034dc <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8003424:	2b00      	cmp	r3, #0
 8003426:	d059      	beq.n	80034dc <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003430:	2100      	movs	r1, #0
 8003432:	fba3 2302 	umull	r2, r3, r3, r2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d000      	beq.n	800343c <xQueueGenericReset+0x44>
 800343a:	2101      	movs	r1, #1
 800343c:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800343e:	2b00      	cmp	r3, #0
 8003440:	d14c      	bne.n	80034dc <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8003442:	f002 fe75 	bl	8006130 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800344e:	68b9      	ldr	r1, [r7, #8]
 8003450:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003452:	fb01 f303 	mul.w	r3, r1, r3
 8003456:	441a      	add	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	2200      	movs	r2, #0
 8003460:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003472:	3b01      	subs	r3, #1
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003478:	fb01 f303 	mul.w	r3, r1, r3
 800347c:	441a      	add	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	22ff      	movs	r2, #255	@ 0xff
 8003486:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	22ff      	movs	r2, #255	@ 0xff
 800348e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d114      	bne.n	80034c2 <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	691b      	ldr	r3, [r3, #16]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d01a      	beq.n	80034d6 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	3310      	adds	r3, #16
 80034a4:	4618      	mov	r0, r3
 80034a6:	f001 fafb 	bl	8004aa0 <xTaskRemoveFromEventList>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d012      	beq.n	80034d6 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80034b0:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <xQueueGenericReset+0x108>)
 80034b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	f3bf 8f6f 	isb	sy
 80034c0:	e009      	b.n	80034d6 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	3310      	adds	r3, #16
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fee2 	bl	8003290 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	3324      	adds	r3, #36	@ 0x24
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fedd 	bl	8003290 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80034d6:	f002 fe57 	bl	8006188 <vPortExitCritical>
 80034da:	e001      	b.n	80034e0 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 80034dc:	2300      	movs	r3, #0
 80034de:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d104      	bne.n	80034f0 <xQueueGenericReset+0xf8>
 80034e6:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80034ea:	4804      	ldr	r0, [pc, #16]	@ (80034fc <xQueueGenericReset+0x104>)
 80034ec:	f7fe fa24 	bl	8001938 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80034f0:	68fb      	ldr	r3, [r7, #12]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	0802413c 	.word	0x0802413c
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003504:	b580      	push	{r7, lr}
 8003506:	b08a      	sub	sp, #40	@ 0x28
 8003508:	af02      	add	r7, sp, #8
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	60b9      	str	r1, [r7, #8]
 800350e:	4613      	mov	r3, r2
 8003510:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02e      	beq.n	800357a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800351c:	2100      	movs	r1, #0
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	fba3 2302 	umull	r2, r3, r3, r2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d000      	beq.n	800352c <xQueueGenericCreate+0x28>
 800352a:	2101      	movs	r1, #1
 800352c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800352e:	2b00      	cmp	r3, #0
 8003530:	d123      	bne.n	800357a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800353a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800353e:	d81c      	bhi.n	800357a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	fb02 f303 	mul.w	r3, r2, r3
 8003548:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	3350      	adds	r3, #80	@ 0x50
 800354e:	4618      	mov	r0, r3
 8003550:	f002 fef0 	bl	8006334 <pvPortMalloc>
 8003554:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d016      	beq.n	800358a <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	3350      	adds	r3, #80	@ 0x50
 8003564:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003566:	79fa      	ldrb	r2, [r7, #7]
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	9300      	str	r3, [sp, #0]
 800356c:	4613      	mov	r3, r2
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f810 	bl	8003598 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003578:	e007      	b.n	800358a <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <xQueueGenericCreate+0x86>
 8003580:	f240 212a 	movw	r1, #554	@ 0x22a
 8003584:	4803      	ldr	r0, [pc, #12]	@ (8003594 <xQueueGenericCreate+0x90>)
 8003586:	f7fe f9d7 	bl	8001938 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 800358a:	69fb      	ldr	r3, [r7, #28]
    }
 800358c:	4618      	mov	r0, r3
 800358e:	3720      	adds	r7, #32
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	0802413c 	.word	0x0802413c

08003598 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	60f8      	str	r0, [r7, #12]
 80035a0:	60b9      	str	r1, [r7, #8]
 80035a2:	607a      	str	r2, [r7, #4]
 80035a4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	e002      	b.n	80035ba <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	68fa      	ldr	r2, [r7, #12]
 80035be:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	68ba      	ldr	r2, [r7, #8]
 80035c4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80035c6:	2101      	movs	r1, #1
 80035c8:	69b8      	ldr	r0, [r7, #24]
 80035ca:	f7ff ff15 	bl	80033f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80035d6:	bf00      	nop
 80035d8:	3710      	adds	r7, #16
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00e      	beq.n	800360a <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80035fe:	2300      	movs	r3, #0
 8003600:	2200      	movs	r2, #0
 8003602:	2100      	movs	r1, #0
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f000 f847 	bl	8003698 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800361c:	2301      	movs	r3, #1
 800361e:	617b      	str	r3, [r7, #20]
 8003620:	2300      	movs	r3, #0
 8003622:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	461a      	mov	r2, r3
 8003628:	6939      	ldr	r1, [r7, #16]
 800362a:	6978      	ldr	r0, [r7, #20]
 800362c:	f7ff ff6a 	bl	8003504 <xQueueGenericCreate>
 8003630:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff ffd3 	bl	80035de <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8003638:	68fb      	ldr	r3, [r7, #12]
    }
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <xQueueCreateCountingSemaphore+0x36>
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d80c      	bhi.n	800367a <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003660:	2202      	movs	r2, #2
 8003662:	2100      	movs	r1, #0
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff4d 	bl	8003504 <xQueueGenericCreate>
 800366a:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d00b      	beq.n	800368a <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8003678:	e007      	b.n	800368a <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <xQueueCreateCountingSemaphore+0x46>
 8003680:	f240 319f 	movw	r1, #927	@ 0x39f
 8003684:	4803      	ldr	r0, [pc, #12]	@ (8003694 <xQueueCreateCountingSemaphore+0x50>)
 8003686:	f7fe f957 	bl	8001938 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 800368a:	68fb      	ldr	r3, [r7, #12]
    }
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	0802413c 	.word	0x0802413c

08003698 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08a      	sub	sp, #40	@ 0x28
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	607a      	str	r2, [r7, #4]
 80036a4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036a6:	2300      	movs	r3, #0
 80036a8:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80036ae:	6a3b      	ldr	r3, [r7, #32]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <xQueueGenericSend+0x26>
 80036b4:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80036b8:	4869      	ldr	r0, [pc, #420]	@ (8003860 <xQueueGenericSend+0x1c8>)
 80036ba:	f7fe f93d 	bl	8001938 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d103      	bne.n	80036cc <xQueueGenericSend+0x34>
 80036c4:	6a3b      	ldr	r3, [r7, #32]
 80036c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <xQueueGenericSend+0x38>
 80036cc:	2301      	movs	r3, #1
 80036ce:	e000      	b.n	80036d2 <xQueueGenericSend+0x3a>
 80036d0:	2300      	movs	r3, #0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d104      	bne.n	80036e0 <xQueueGenericSend+0x48>
 80036d6:	f240 31b7 	movw	r1, #951	@ 0x3b7
 80036da:	4861      	ldr	r0, [pc, #388]	@ (8003860 <xQueueGenericSend+0x1c8>)
 80036dc:	f7fe f92c 	bl	8001938 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d103      	bne.n	80036ee <xQueueGenericSend+0x56>
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d101      	bne.n	80036f2 <xQueueGenericSend+0x5a>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <xQueueGenericSend+0x5c>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d104      	bne.n	8003702 <xQueueGenericSend+0x6a>
 80036f8:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 80036fc:	4858      	ldr	r0, [pc, #352]	@ (8003860 <xQueueGenericSend+0x1c8>)
 80036fe:	f7fe f91b 	bl	8001938 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003702:	f001 fcb7 	bl	8005074 <xTaskGetSchedulerState>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <xQueueGenericSend+0x7a>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <xQueueGenericSend+0x7e>
 8003712:	2301      	movs	r3, #1
 8003714:	e000      	b.n	8003718 <xQueueGenericSend+0x80>
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d104      	bne.n	8003726 <xQueueGenericSend+0x8e>
 800371c:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8003720:	484f      	ldr	r0, [pc, #316]	@ (8003860 <xQueueGenericSend+0x1c8>)
 8003722:	f7fe f909 	bl	8001938 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003726:	f002 fd03 	bl	8006130 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003732:	429a      	cmp	r2, r3
 8003734:	d302      	bcc.n	800373c <xQueueGenericSend+0xa4>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d129      	bne.n	8003790 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	68b9      	ldr	r1, [r7, #8]
 8003740:	6a38      	ldr	r0, [r7, #32]
 8003742:	f000 fabb 	bl	8003cbc <prvCopyDataToQueue>
 8003746:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374c:	2b00      	cmp	r3, #0
 800374e:	d010      	beq.n	8003772 <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	3324      	adds	r3, #36	@ 0x24
 8003754:	4618      	mov	r0, r3
 8003756:	f001 f9a3 	bl	8004aa0 <xTaskRemoveFromEventList>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003760:	4b40      	ldr	r3, [pc, #256]	@ (8003864 <xQueueGenericSend+0x1cc>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	e00a      	b.n	8003788 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8003778:	4b3a      	ldr	r3, [pc, #232]	@ (8003864 <xQueueGenericSend+0x1cc>)
 800377a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003788:	f002 fcfe 	bl	8006188 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 800378c:	2301      	movs	r3, #1
 800378e:	e063      	b.n	8003858 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d103      	bne.n	800379e <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003796:	f002 fcf7 	bl	8006188 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 800379a:	2300      	movs	r3, #0
 800379c:	e05c      	b.n	8003858 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d106      	bne.n	80037b2 <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80037a4:	f107 0314 	add.w	r3, r7, #20
 80037a8:	4618      	mov	r0, r3
 80037aa:	f001 fb23 	bl	8004df4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80037b2:	f002 fce9 	bl	8006188 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80037b6:	f000 fe3f 	bl	8004438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80037ba:	f002 fcb9 	bl	8006130 <vPortEnterCritical>
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037c4:	b25b      	sxtb	r3, r3
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	d103      	bne.n	80037d4 <xQueueGenericSend+0x13c>
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80037da:	b25b      	sxtb	r3, r3
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d103      	bne.n	80037ea <xQueueGenericSend+0x152>
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ea:	f002 fccd 	bl	8006188 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037ee:	1d3a      	adds	r2, r7, #4
 80037f0:	f107 0314 	add.w	r3, r7, #20
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 fb12 	bl	8004e20 <xTaskCheckForTimeOut>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d124      	bne.n	800384c <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003802:	6a38      	ldr	r0, [r7, #32]
 8003804:	f000 fb52 	bl	8003eac <prvIsQueueFull>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d018      	beq.n	8003840 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800380e:	6a3b      	ldr	r3, [r7, #32]
 8003810:	3310      	adds	r3, #16
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f001 f8d6 	bl	80049c8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800381c:	6a38      	ldr	r0, [r7, #32]
 800381e:	f000 fadd 	bl	8003ddc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003822:	f000 fe17 	bl	8004454 <xTaskResumeAll>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	f47f af7c 	bne.w	8003726 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 800382e:	4b0d      	ldr	r3, [pc, #52]	@ (8003864 <xQueueGenericSend+0x1cc>)
 8003830:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	f3bf 8f6f 	isb	sy
 800383e:	e772      	b.n	8003726 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003840:	6a38      	ldr	r0, [r7, #32]
 8003842:	f000 facb 	bl	8003ddc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003846:	f000 fe05 	bl	8004454 <xTaskResumeAll>
 800384a:	e76c      	b.n	8003726 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800384c:	6a38      	ldr	r0, [r7, #32]
 800384e:	f000 fac5 	bl	8003ddc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003852:	f000 fdff 	bl	8004454 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8003856:	2300      	movs	r3, #0
        }
    }
}
 8003858:	4618      	mov	r0, r3
 800385a:	3728      	adds	r7, #40	@ 0x28
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	0802413c 	.word	0x0802413c
 8003864:	e000ed04 	.word	0xe000ed04

08003868 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b08a      	sub	sp, #40	@ 0x28
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800387c:	6a3b      	ldr	r3, [r7, #32]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <xQueueReceive+0x24>
 8003882:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8003886:	485e      	ldr	r0, [pc, #376]	@ (8003a00 <xQueueReceive+0x198>)
 8003888:	f7fe f856 	bl	8001938 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <xQueueReceive+0x32>
 8003892:	6a3b      	ldr	r3, [r7, #32]
 8003894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d101      	bne.n	800389e <xQueueReceive+0x36>
 800389a:	2301      	movs	r3, #1
 800389c:	e000      	b.n	80038a0 <xQueueReceive+0x38>
 800389e:	2300      	movs	r3, #0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <xQueueReceive+0x46>
 80038a4:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 80038a8:	4855      	ldr	r0, [pc, #340]	@ (8003a00 <xQueueReceive+0x198>)
 80038aa:	f7fe f845 	bl	8001938 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ae:	f001 fbe1 	bl	8005074 <xTaskGetSchedulerState>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xQueueReceive+0x56>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <xQueueReceive+0x5a>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueReceive+0x5c>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d104      	bne.n	80038d2 <xQueueReceive+0x6a>
 80038c8:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 80038cc:	484c      	ldr	r0, [pc, #304]	@ (8003a00 <xQueueReceive+0x198>)
 80038ce:	f7fe f833 	bl	8001938 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80038d2:	f002 fc2d 	bl	8006130 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038da:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d01f      	beq.n	8003922 <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038e2:	68b9      	ldr	r1, [r7, #8]
 80038e4:	6a38      	ldr	r0, [r7, #32]
 80038e6:	f000 fa53 	bl	8003d90 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	1e5a      	subs	r2, r3, #1
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038f2:	6a3b      	ldr	r3, [r7, #32]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00f      	beq.n	800391a <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	3310      	adds	r3, #16
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 f8ce 	bl	8004aa0 <xTaskRemoveFromEventList>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d007      	beq.n	800391a <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800390a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a04 <xQueueReceive+0x19c>)
 800390c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	f3bf 8f4f 	dsb	sy
 8003916:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800391a:	f002 fc35 	bl	8006188 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 800391e:	2301      	movs	r3, #1
 8003920:	e069      	b.n	80039f6 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d103      	bne.n	8003930 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003928:	f002 fc2e 	bl	8006188 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 800392c:	2300      	movs	r3, #0
 800392e:	e062      	b.n	80039f6 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	2b00      	cmp	r3, #0
 8003934:	d106      	bne.n	8003944 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003936:	f107 0314 	add.w	r3, r7, #20
 800393a:	4618      	mov	r0, r3
 800393c:	f001 fa5a 	bl	8004df4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003940:	2301      	movs	r3, #1
 8003942:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003944:	f002 fc20 	bl	8006188 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003948:	f000 fd76 	bl	8004438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800394c:	f002 fbf0 	bl	8006130 <vPortEnterCritical>
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003956:	b25b      	sxtb	r3, r3
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d103      	bne.n	8003966 <xQueueReceive+0xfe>
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003966:	6a3b      	ldr	r3, [r7, #32]
 8003968:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800396c:	b25b      	sxtb	r3, r3
 800396e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003972:	d103      	bne.n	800397c <xQueueReceive+0x114>
 8003974:	6a3b      	ldr	r3, [r7, #32]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800397c:	f002 fc04 	bl	8006188 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003980:	1d3a      	adds	r2, r7, #4
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fa49 	bl	8004e20 <xTaskCheckForTimeOut>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d123      	bne.n	80039dc <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003994:	6a38      	ldr	r0, [r7, #32]
 8003996:	f000 fa73 	bl	8003e80 <prvIsQueueEmpty>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d017      	beq.n	80039d0 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	3324      	adds	r3, #36	@ 0x24
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	4611      	mov	r1, r2
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 f80d 	bl	80049c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80039ae:	6a38      	ldr	r0, [r7, #32]
 80039b0:	f000 fa14 	bl	8003ddc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80039b4:	f000 fd4e 	bl	8004454 <xTaskResumeAll>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d189      	bne.n	80038d2 <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 80039be:	4b11      	ldr	r3, [pc, #68]	@ (8003a04 <xQueueReceive+0x19c>)
 80039c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	f3bf 8f6f 	isb	sy
 80039ce:	e780      	b.n	80038d2 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80039d0:	6a38      	ldr	r0, [r7, #32]
 80039d2:	f000 fa03 	bl	8003ddc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80039d6:	f000 fd3d 	bl	8004454 <xTaskResumeAll>
 80039da:	e77a      	b.n	80038d2 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80039dc:	6a38      	ldr	r0, [r7, #32]
 80039de:	f000 f9fd 	bl	8003ddc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80039e2:	f000 fd37 	bl	8004454 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80039e6:	6a38      	ldr	r0, [r7, #32]
 80039e8:	f000 fa4a 	bl	8003e80 <prvIsQueueEmpty>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f43f af6f 	beq.w	80038d2 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80039f4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3728      	adds	r7, #40	@ 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	0802413c 	.word	0x0802413c
 8003a04:	e000ed04 	.word	0xe000ed04

08003a08 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b08a      	sub	sp, #40	@ 0x28
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d104      	bne.n	8003a2e <xQueueSemaphoreTake+0x26>
 8003a24:	f240 6182 	movw	r1, #1666	@ 0x682
 8003a28:	486c      	ldr	r0, [pc, #432]	@ (8003bdc <xQueueSemaphoreTake+0x1d4>)
 8003a2a:	f7fd ff85 	bl	8001938 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d004      	beq.n	8003a40 <xQueueSemaphoreTake+0x38>
 8003a36:	f240 6186 	movw	r1, #1670	@ 0x686
 8003a3a:	4868      	ldr	r0, [pc, #416]	@ (8003bdc <xQueueSemaphoreTake+0x1d4>)
 8003a3c:	f7fd ff7c 	bl	8001938 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a40:	f001 fb18 	bl	8005074 <xTaskGetSchedulerState>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <xQueueSemaphoreTake+0x48>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <xQueueSemaphoreTake+0x4c>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <xQueueSemaphoreTake+0x4e>
 8003a54:	2300      	movs	r3, #0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d104      	bne.n	8003a64 <xQueueSemaphoreTake+0x5c>
 8003a5a:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003a5e:	485f      	ldr	r0, [pc, #380]	@ (8003bdc <xQueueSemaphoreTake+0x1d4>)
 8003a60:	f7fd ff6a 	bl	8001938 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a64:	f002 fb64 	bl	8006130 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6c:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d024      	beq.n	8003abe <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	1e5a      	subs	r2, r3, #1
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d104      	bne.n	8003a8e <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003a84:	f001 fd18 	bl	80054b8 <pvTaskIncrementMutexHeldCount>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00f      	beq.n	8003ab6 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	3310      	adds	r3, #16
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f001 f800 	bl	8004aa0 <xTaskRemoveFromEventList>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d007      	beq.n	8003ab6 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8003be0 <xQueueSemaphoreTake+0x1d8>)
 8003aa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003ab6:	f002 fb67 	bl	8006188 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e089      	b.n	8003bd2 <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8003ac4:	f002 fb60 	bl	8006188 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e082      	b.n	8003bd2 <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ad2:	f107 030c 	add.w	r3, r7, #12
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f001 f98c 	bl	8004df4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ae0:	f002 fb52 	bl	8006188 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003ae4:	f000 fca8 	bl	8004438 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003ae8:	f002 fb22 	bl	8006130 <vPortEnterCritical>
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003af2:	b25b      	sxtb	r3, r3
 8003af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af8:	d103      	bne.n	8003b02 <xQueueSemaphoreTake+0xfa>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b08:	b25b      	sxtb	r3, r3
 8003b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0e:	d103      	bne.n	8003b18 <xQueueSemaphoreTake+0x110>
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b18:	f002 fb36 	bl	8006188 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b1c:	463a      	mov	r2, r7
 8003b1e:	f107 030c 	add.w	r3, r7, #12
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f001 f97b 	bl	8004e20 <xTaskCheckForTimeOut>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d132      	bne.n	8003b96 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b30:	69f8      	ldr	r0, [r7, #28]
 8003b32:	f000 f9a5 	bl	8003e80 <prvIsQueueEmpty>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d026      	beq.n	8003b8a <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d109      	bne.n	8003b58 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8003b44:	f002 faf4 	bl	8006130 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f001 faaf 	bl	80050b0 <xTaskPriorityInherit>
 8003b52:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8003b54:	f002 fb18 	bl	8006188 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	3324      	adds	r3, #36	@ 0x24
 8003b5c:	683a      	ldr	r2, [r7, #0]
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 ff31 	bl	80049c8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003b66:	69f8      	ldr	r0, [r7, #28]
 8003b68:	f000 f938 	bl	8003ddc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003b6c:	f000 fc72 	bl	8004454 <xTaskResumeAll>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f47f af76 	bne.w	8003a64 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003b78:	4b19      	ldr	r3, [pc, #100]	@ (8003be0 <xQueueSemaphoreTake+0x1d8>)
 8003b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	f3bf 8f6f 	isb	sy
 8003b88:	e76c      	b.n	8003a64 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8003b8a:	69f8      	ldr	r0, [r7, #28]
 8003b8c:	f000 f926 	bl	8003ddc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b90:	f000 fc60 	bl	8004454 <xTaskResumeAll>
 8003b94:	e766      	b.n	8003a64 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8003b96:	69f8      	ldr	r0, [r7, #28]
 8003b98:	f000 f920 	bl	8003ddc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b9c:	f000 fc5a 	bl	8004454 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ba0:	69f8      	ldr	r0, [r7, #28]
 8003ba2:	f000 f96d 	bl	8003e80 <prvIsQueueEmpty>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	f43f af5b 	beq.w	8003a64 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00d      	beq.n	8003bd0 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8003bb4:	f002 fabc 	bl	8006130 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003bb8:	69f8      	ldr	r0, [r7, #28]
 8003bba:	f000 f867 	bl	8003c8c <prvGetDisinheritPriorityAfterTimeout>
 8003bbe:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	6979      	ldr	r1, [r7, #20]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fbae 	bl	8005328 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8003bcc:	f002 fadc 	bl	8006188 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003bd0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3728      	adds	r7, #40	@ 0x28
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	0802413c 	.word	0x0802413c
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <uxQueueMessagesWaiting+0x18>
 8003bf2:	f640 019b 	movw	r1, #2203	@ 0x89b
 8003bf6:	4807      	ldr	r0, [pc, #28]	@ (8003c14 <uxQueueMessagesWaiting+0x30>)
 8003bf8:	f7fd fe9e 	bl	8001938 <vAssertCalled>

    taskENTER_CRITICAL();
 8003bfc:	f002 fa98 	bl	8006130 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c04:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003c06:	f002 fabf 	bl	8006188 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3710      	adds	r7, #16
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	0802413c 	.word	0x0802413c

08003c18 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <uxQueueSpacesAvailable+0x1c>
 8003c2a:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 8003c2e:	4809      	ldr	r0, [pc, #36]	@ (8003c54 <uxQueueSpacesAvailable+0x3c>)
 8003c30:	f7fd fe82 	bl	8001938 <vAssertCalled>

    taskENTER_CRITICAL();
 8003c34:	f002 fa7c 	bl	8006130 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8003c44:	f002 faa0 	bl	8006188 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8003c48:	68bb      	ldr	r3, [r7, #8]
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	0802413c 	.word	0x0802413c

08003c58 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d104      	bne.n	8003c74 <vQueueDelete+0x1c>
 8003c6a:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 8003c6e:	4806      	ldr	r0, [pc, #24]	@ (8003c88 <vQueueDelete+0x30>)
 8003c70:	f7fd fe62 	bl	8001938 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f979 	bl	8003f6c <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f002 fc2e 	bl	80064dc <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8003c80:	bf00      	nop
 8003c82:	3710      	adds	r7, #16
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	0802413c 	.word	0x0802413c

08003c8c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1c3 0307 	rsb	r3, r3, #7
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	e001      	b.n	8003cae <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8003cae:	68fb      	ldr	r3, [r7, #12]
    }
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10d      	bne.n	8003cf6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d14d      	bne.n	8003d7e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fa82 	bl	80051f0 <xTaskPriorityDisinherit>
 8003cec:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	e043      	b.n	8003d7e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d119      	bne.n	8003d30 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6858      	ldr	r0, [r3, #4]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d04:	461a      	mov	r2, r3
 8003d06:	68b9      	ldr	r1, [r7, #8]
 8003d08:	f01e fb12 	bl	8022330 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d14:	441a      	add	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d32b      	bcc.n	8003d7e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	605a      	str	r2, [r3, #4]
 8003d2e:	e026      	b.n	8003d7e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68d8      	ldr	r0, [r3, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	461a      	mov	r2, r3
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	f01e faf8 	bl	8022330 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	68da      	ldr	r2, [r3, #12]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d48:	425b      	negs	r3, r3
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	68da      	ldr	r2, [r3, #12]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d207      	bcs.n	8003d6c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d64:	425b      	negs	r3, r3
 8003d66:	441a      	add	r2, r3
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d105      	bne.n	8003d7e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	3b01      	subs	r3, #1
 8003d7c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1c5a      	adds	r2, r3, #1
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003d86:	697b      	ldr	r3, [r7, #20]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d018      	beq.n	8003dd4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003daa:	441a      	add	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68da      	ldr	r2, [r3, #12]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d303      	bcc.n	8003dc4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68d9      	ldr	r1, [r3, #12]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dcc:	461a      	mov	r2, r3
 8003dce:	6838      	ldr	r0, [r7, #0]
 8003dd0:	f01e faae 	bl	8022330 <memcpy>
    }
}
 8003dd4:	bf00      	nop
 8003dd6:	3708      	adds	r7, #8
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b084      	sub	sp, #16
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003de4:	f002 f9a4 	bl	8006130 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003df0:	e011      	b.n	8003e16 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	3324      	adds	r3, #36	@ 0x24
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f000 fe4e 	bl	8004aa0 <xTaskRemoveFromEventList>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003e0a:	f001 f865 	bl	8004ed8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	dce9      	bgt.n	8003df2 <prvUnlockQueue+0x16>
 8003e1e:	e000      	b.n	8003e22 <prvUnlockQueue+0x46>
                    break;
 8003e20:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	22ff      	movs	r2, #255	@ 0xff
 8003e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003e2a:	f002 f9ad 	bl	8006188 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003e2e:	f002 f97f 	bl	8006130 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e38:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e3a:	e011      	b.n	8003e60 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d012      	beq.n	8003e6a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3310      	adds	r3, #16
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 fe29 	bl	8004aa0 <xTaskRemoveFromEventList>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003e54:	f001 f840 	bl	8004ed8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003e58:	7bbb      	ldrb	r3, [r7, #14]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dce9      	bgt.n	8003e3c <prvUnlockQueue+0x60>
 8003e68:	e000      	b.n	8003e6c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003e6a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	22ff      	movs	r2, #255	@ 0xff
 8003e70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003e74:	f002 f988 	bl	8006188 <vPortExitCritical>
}
 8003e78:	bf00      	nop
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003e88:	f002 f952 	bl	8006130 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d102      	bne.n	8003e9a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8003e94:	2301      	movs	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e001      	b.n	8003e9e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003e9e:	f002 f973 	bl	8006188 <vPortExitCritical>

    return xReturn;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003eb4:	f002 f93c 	bl	8006130 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d102      	bne.n	8003eca <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	60fb      	str	r3, [r7, #12]
 8003ec8:	e001      	b.n	8003ece <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8003ece:	f002 f95b 	bl	8006188 <vPortExitCritical>

    return xReturn;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d104      	bne.n	8003efa <vQueueAddToRegistry+0x1e>
 8003ef0:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8003ef4:	481b      	ldr	r0, [pc, #108]	@ (8003f64 <vQueueAddToRegistry+0x88>)
 8003ef6:	f7fd fd1f 	bl	8001938 <vAssertCalled>

        if( pcQueueName != NULL )
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d024      	beq.n	8003f4a <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e01e      	b.n	8003f44 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003f06:	4a18      	ldr	r2, [pc, #96]	@ (8003f68 <vQueueAddToRegistry+0x8c>)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	00db      	lsls	r3, r3, #3
 8003f0c:	4413      	add	r3, r2
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d105      	bne.n	8003f22 <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4a13      	ldr	r2, [pc, #76]	@ (8003f68 <vQueueAddToRegistry+0x8c>)
 8003f1c:	4413      	add	r3, r2
 8003f1e:	60bb      	str	r3, [r7, #8]
                    break;
 8003f20:	e013      	b.n	8003f4a <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10a      	bne.n	8003f3e <vQueueAddToRegistry+0x62>
 8003f28:	4a0f      	ldr	r2, [pc, #60]	@ (8003f68 <vQueueAddToRegistry+0x8c>)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d104      	bne.n	8003f3e <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	4a0b      	ldr	r2, [pc, #44]	@ (8003f68 <vQueueAddToRegistry+0x8c>)
 8003f3a:	4413      	add	r3, r2
 8003f3c:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	3301      	adds	r3, #1
 8003f42:	60fb      	str	r3, [r7, #12]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2b07      	cmp	r3, #7
 8003f48:	d9dd      	bls.n	8003f06 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d005      	beq.n	8003f5c <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	683a      	ldr	r2, [r7, #0]
 8003f54:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	0802413c 	.word	0x0802413c
 8003f68:	20000d44 	.word	0x20000d44

08003f6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d104      	bne.n	8003f84 <vQueueUnregisterQueue+0x18>
 8003f7a:	f640 411d 	movw	r1, #3101	@ 0xc1d
 8003f7e:	4812      	ldr	r0, [pc, #72]	@ (8003fc8 <vQueueUnregisterQueue+0x5c>)
 8003f80:	f7fd fcda 	bl	8001938 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
 8003f88:	e016      	b.n	8003fb8 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003f8a:	4a10      	ldr	r2, [pc, #64]	@ (8003fcc <vQueueUnregisterQueue+0x60>)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d10b      	bne.n	8003fb2 <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 8003f9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003fcc <vQueueUnregisterQueue+0x60>)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003fa4:	4a09      	ldr	r2, [pc, #36]	@ (8003fcc <vQueueUnregisterQueue+0x60>)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	4413      	add	r3, r2
 8003fac:	2200      	movs	r2, #0
 8003fae:	605a      	str	r2, [r3, #4]
                break;
 8003fb0:	e006      	b.n	8003fc0 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b07      	cmp	r3, #7
 8003fbc:	d9e5      	bls.n	8003f8a <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 8003fbe:	bf00      	nop
 8003fc0:	bf00      	nop
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	0802413c 	.word	0x0802413c
 8003fcc:	20000d44 	.word	0x20000d44

08003fd0 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	@ 0x28
 8003fd4:	af04      	add	r7, sp, #16
 8003fd6:	60f8      	str	r0, [r7, #12]
 8003fd8:	60b9      	str	r1, [r7, #8]
 8003fda:	607a      	str	r2, [r7, #4]
 8003fdc:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f002 f9a6 	bl	8006334 <pvPortMalloc>
 8003fe8:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d013      	beq.n	8004018 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003ff0:	206c      	movs	r0, #108	@ 0x6c
 8003ff2:	f002 f99f 	bl	8006334 <pvPortMalloc>
 8003ff6:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d008      	beq.n	8004010 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003ffe:	226c      	movs	r2, #108	@ 0x6c
 8004000:	2100      	movs	r1, #0
 8004002:	6978      	ldr	r0, [r7, #20]
 8004004:	f01e faa1 	bl	802254a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	693a      	ldr	r2, [r7, #16]
 800400c:	631a      	str	r2, [r3, #48]	@ 0x30
 800400e:	e005      	b.n	800401c <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8004010:	6938      	ldr	r0, [r7, #16]
 8004012:	f002 fa63 	bl	80064dc <vPortFree>
 8004016:	e001      	b.n	800401c <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00d      	beq.n	800403e <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004022:	2300      	movs	r3, #0
 8004024:	9303      	str	r3, [sp, #12]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	9302      	str	r3, [sp, #8]
 800402a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800402c:	9301      	str	r3, [sp, #4]
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	68b9      	ldr	r1, [r7, #8]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f829 	bl	8004090 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800403e:	697b      	ldr	r3, [r7, #20]
    }
 8004040:	4618      	mov	r0, r3
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004048:	b580      	push	{r7, lr}
 800404a:	b088      	sub	sp, #32
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	9301      	str	r3, [sp, #4]
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68b9      	ldr	r1, [r7, #8]
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f7ff ffb3 	bl	8003fd0 <prvCreateTask>
 800406a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d005      	beq.n	800407e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8004072:	6938      	ldr	r0, [r7, #16]
 8004074:	f000 f890 	bl	8004198 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004078:	2301      	movs	r3, #1
 800407a:	617b      	str	r3, [r7, #20]
 800407c:	e002      	b.n	8004084 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 8004084:	697b      	ldr	r3, [r7, #20]
    }
 8004086:	4618      	mov	r0, r3
 8004088:	3718      	adds	r7, #24
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
	...

08004090 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800409e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	461a      	mov	r2, r3
 80040a8:	21a5      	movs	r1, #165	@ 0xa5
 80040aa:	f01e fa4e 	bl	802254a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80040b8:	440b      	add	r3, r1
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	f023 0307 	bic.w	r3, r3, #7
 80040c6:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <prvInitialiseNewTask+0x4c>
 80040d2:	f240 712e 	movw	r1, #1838	@ 0x72e
 80040d6:	482f      	ldr	r0, [pc, #188]	@ (8004194 <prvInitialiseNewTask+0x104>)
 80040d8:	f7fd fc2e 	bl	8001938 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01e      	beq.n	8004120 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
 80040e6:	e012      	b.n	800410e <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	7819      	ldrb	r1, [r3, #0]
 80040f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	4413      	add	r3, r2
 80040f6:	3334      	adds	r3, #52	@ 0x34
 80040f8:	460a      	mov	r2, r1
 80040fa:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	4413      	add	r3, r2
 8004102:	781b      	ldrb	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d006      	beq.n	8004116 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	3301      	adds	r3, #1
 800410c:	617b      	str	r3, [r7, #20]
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2b0f      	cmp	r3, #15
 8004112:	d9e9      	bls.n	80040e8 <prvInitialiseNewTask+0x58>
 8004114:	e000      	b.n	8004118 <prvInitialiseNewTask+0x88>
            {
                break;
 8004116:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	2200      	movs	r2, #0
 800411c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004120:	6a3b      	ldr	r3, [r7, #32]
 8004122:	2b06      	cmp	r3, #6
 8004124:	d904      	bls.n	8004130 <prvInitialiseNewTask+0xa0>
 8004126:	f240 7164 	movw	r1, #1892	@ 0x764
 800412a:	481a      	ldr	r0, [pc, #104]	@ (8004194 <prvInitialiseNewTask+0x104>)
 800412c:	f7fd fc04 	bl	8001938 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004130:	6a3b      	ldr	r3, [r7, #32]
 8004132:	2b06      	cmp	r3, #6
 8004134:	d901      	bls.n	800413a <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004136:	2306      	movs	r3, #6
 8004138:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800413a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	6a3a      	ldr	r2, [r7, #32]
 8004144:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004148:	3304      	adds	r3, #4
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff f8c0 	bl	80032d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004152:	3318      	adds	r3, #24
 8004154:	4618      	mov	r0, r3
 8004156:	f7ff f8bb 	bl	80032d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800415a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800415e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	f1c3 0207 	rsb	r2, r3, #7
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800416a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800416c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800416e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	68f9      	ldr	r1, [r7, #12]
 8004174:	6938      	ldr	r0, [r7, #16]
 8004176:	f001 fea5 	bl	8005ec4 <pxPortInitialiseStack>
 800417a:	4602      	mov	r2, r0
 800417c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800417e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8004180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004188:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800418a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800418c:	bf00      	nop
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	08024160 	.word	0x08024160

08004198 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80041a0:	f001 ffc6 	bl	8006130 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80041a4:	4b41      	ldr	r3, [pc, #260]	@ (80042ac <prvAddNewTaskToReadyList+0x114>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3301      	adds	r3, #1
 80041aa:	4a40      	ldr	r2, [pc, #256]	@ (80042ac <prvAddNewTaskToReadyList+0x114>)
 80041ac:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80041ae:	4b40      	ldr	r3, [pc, #256]	@ (80042b0 <prvAddNewTaskToReadyList+0x118>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d109      	bne.n	80041ca <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80041b6:	4a3e      	ldr	r2, [pc, #248]	@ (80042b0 <prvAddNewTaskToReadyList+0x118>)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80041bc:	4b3b      	ldr	r3, [pc, #236]	@ (80042ac <prvAddNewTaskToReadyList+0x114>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d110      	bne.n	80041e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80041c4:	f000 feac 	bl	8004f20 <prvInitialiseTaskLists>
 80041c8:	e00d      	b.n	80041e6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80041ca:	4b3a      	ldr	r3, [pc, #232]	@ (80042b4 <prvAddNewTaskToReadyList+0x11c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d109      	bne.n	80041e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041d2:	4b37      	ldr	r3, [pc, #220]	@ (80042b0 <prvAddNewTaskToReadyList+0x118>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041dc:	429a      	cmp	r2, r3
 80041de:	d802      	bhi.n	80041e6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80041e0:	4a33      	ldr	r2, [pc, #204]	@ (80042b0 <prvAddNewTaskToReadyList+0x118>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80041e6:	4b34      	ldr	r3, [pc, #208]	@ (80042b8 <prvAddNewTaskToReadyList+0x120>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3301      	adds	r3, #1
 80041ec:	4a32      	ldr	r2, [pc, #200]	@ (80042b8 <prvAddNewTaskToReadyList+0x120>)
 80041ee:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80041f0:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <prvAddNewTaskToReadyList+0x120>)
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	4b2e      	ldr	r3, [pc, #184]	@ (80042bc <prvAddNewTaskToReadyList+0x124>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	4a2d      	ldr	r2, [pc, #180]	@ (80042bc <prvAddNewTaskToReadyList+0x124>)
 8004208:	6013      	str	r3, [r2, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800420e:	492c      	ldr	r1, [pc, #176]	@ (80042c0 <prvAddNewTaskToReadyList+0x128>)
 8004210:	4613      	mov	r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	440b      	add	r3, r1
 800421a:	3304      	adds	r3, #4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	60fb      	str	r3, [r7, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	609a      	str	r2, [r3, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	60da      	str	r2, [r3, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	3204      	adds	r2, #4
 8004236:	605a      	str	r2, [r3, #4]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	1d1a      	adds	r2, r3, #4
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	609a      	str	r2, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004244:	4613      	mov	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4a1c      	ldr	r2, [pc, #112]	@ (80042c0 <prvAddNewTaskToReadyList+0x128>)
 800424e:	441a      	add	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	615a      	str	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004258:	4919      	ldr	r1, [pc, #100]	@ (80042c0 <prvAddNewTaskToReadyList+0x128>)
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800426a:	1c59      	adds	r1, r3, #1
 800426c:	4814      	ldr	r0, [pc, #80]	@ (80042c0 <prvAddNewTaskToReadyList+0x128>)
 800426e:	4613      	mov	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4403      	add	r3, r0
 8004278:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800427a:	f001 ff85 	bl	8006188 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <prvAddNewTaskToReadyList+0x11c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00e      	beq.n	80042a4 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8004286:	4b0a      	ldr	r3, [pc, #40]	@ (80042b0 <prvAddNewTaskToReadyList+0x118>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004290:	429a      	cmp	r2, r3
 8004292:	d207      	bcs.n	80042a4 <prvAddNewTaskToReadyList+0x10c>
 8004294:	4b0b      	ldr	r3, [pc, #44]	@ (80042c4 <prvAddNewTaskToReadyList+0x12c>)
 8004296:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80042a4:	bf00      	nop
 80042a6:	3710      	adds	r7, #16
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	20000e84 	.word	0x20000e84
 80042b0:	20000d84 	.word	0x20000d84
 80042b4:	20000e90 	.word	0x20000e90
 80042b8:	20000ea0 	.word	0x20000ea0
 80042bc:	20000e8c 	.word	0x20000e8c
 80042c0:	20000d88 	.word	0x20000d88
 80042c4:	e000ed04 	.word	0xe000ed04

080042c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d011      	beq.n	80042fe <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 80042da:	f000 f8ad 	bl	8004438 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80042de:	4b0f      	ldr	r3, [pc, #60]	@ (800431c <vTaskDelay+0x54>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d004      	beq.n	80042f0 <vTaskDelay+0x28>
 80042e6:	f640 118e 	movw	r1, #2446	@ 0x98e
 80042ea:	480d      	ldr	r0, [pc, #52]	@ (8004320 <vTaskDelay+0x58>)
 80042ec:	f7fd fb24 	bl	8001938 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80042f0:	2100      	movs	r1, #0
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f001 fd64 	bl	8005dc0 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80042f8:	f000 f8ac 	bl	8004454 <xTaskResumeAll>
 80042fc:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8004304:	4b07      	ldr	r3, [pc, #28]	@ (8004324 <vTaskDelay+0x5c>)
 8004306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000eac 	.word	0x20000eac
 8004320:	08024160 	.word	0x08024160
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08a      	sub	sp, #40	@ 0x28
 800432c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800432e:	2301      	movs	r3, #1
 8004330:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8004336:	2300      	movs	r3, #0
 8004338:	617b      	str	r3, [r7, #20]
 800433a:	e011      	b.n	8004360 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800433c:	4a1d      	ldr	r2, [pc, #116]	@ (80043b4 <prvCreateIdleTasks+0x8c>)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	4413      	add	r3, r2
 8004342:	7819      	ldrb	r1, [r3, #0]
 8004344:	463a      	mov	r2, r7
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4413      	add	r3, r2
 800434a:	460a      	mov	r2, r1
 800434c:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800434e:	463a      	mov	r2, r7
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	4413      	add	r3, r2
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d006      	beq.n	8004368 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	3301      	adds	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	2b0f      	cmp	r3, #15
 8004364:	ddea      	ble.n	800433c <prvCreateIdleTasks+0x14>
 8004366:	e000      	b.n	800436a <prvCreateIdleTasks+0x42>
        {
            break;
 8004368:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800436a:	2300      	movs	r3, #0
 800436c:	61bb      	str	r3, [r7, #24]
 800436e:	e016      	b.n	800439e <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8004370:	4b11      	ldr	r3, [pc, #68]	@ (80043b8 <prvCreateIdleTasks+0x90>)
 8004372:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	4a10      	ldr	r2, [pc, #64]	@ (80043bc <prvCreateIdleTasks+0x94>)
 800437a:	4413      	add	r3, r2
 800437c:	4639      	mov	r1, r7
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	2300      	movs	r3, #0
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	2300      	movs	r3, #0
 8004386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800438a:	6938      	ldr	r0, [r7, #16]
 800438c:	f7ff fe5c 	bl	8004048 <xTaskCreate>
 8004390:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d006      	beq.n	80043a6 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	3301      	adds	r3, #1
 800439c:	61bb      	str	r3, [r7, #24]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	dde5      	ble.n	8004370 <prvCreateIdleTasks+0x48>
 80043a4:	e000      	b.n	80043a8 <prvCreateIdleTasks+0x80>
        {
            break;
 80043a6:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80043a8:	69fb      	ldr	r3, [r7, #28]
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	3720      	adds	r7, #32
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	08024184 	.word	0x08024184
 80043b8:	08004ef1 	.word	0x08004ef1
 80043bc:	20000ea8 	.word	0x20000ea8

080043c0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80043c6:	f7ff ffaf 	bl	8004328 <prvCreateIdleTasks>
 80043ca:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d118      	bne.n	8004404 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80043d2:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043d6:	b672      	cpsid	i
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	b662      	cpsie	i
 80043e6:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80043e8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80043ea:	4b0e      	ldr	r3, [pc, #56]	@ (8004424 <vTaskStartScheduler+0x64>)
 80043ec:	f04f 32ff 	mov.w	r2, #4294967295
 80043f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80043f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004428 <vTaskStartScheduler+0x68>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043f8:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <vTaskStartScheduler+0x6c>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80043fe:	f001 fde9 	bl	8005fd4 <xPortStartScheduler>
 8004402:	e008      	b.n	8004416 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440a:	d104      	bne.n	8004416 <vTaskStartScheduler+0x56>
 800440c:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8004410:	4807      	ldr	r0, [pc, #28]	@ (8004430 <vTaskStartScheduler+0x70>)
 8004412:	f7fd fa91 	bl	8001938 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004416:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <vTaskStartScheduler+0x74>)
 8004418:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	20000ea4 	.word	0x20000ea4
 8004428:	20000e90 	.word	0x20000e90
 800442c:	20000e88 	.word	0x20000e88
 8004430:	08024160 	.word	0x08024160
 8004434:	20000008 	.word	0x20000008

08004438 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800443c:	4b04      	ldr	r3, [pc, #16]	@ (8004450 <vTaskSuspendAll+0x18>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	3301      	adds	r3, #1
 8004442:	4a03      	ldr	r2, [pc, #12]	@ (8004450 <vTaskSuspendAll+0x18>)
 8004444:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8004446:	bf00      	nop
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	20000eac 	.word	0x20000eac

08004454 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8004462:	f001 fe65 	bl	8006130 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8004466:	2300      	movs	r3, #0
 8004468:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800446a:	4b72      	ldr	r3, [pc, #456]	@ (8004634 <xTaskResumeAll+0x1e0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <xTaskResumeAll+0x28>
 8004472:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8004476:	4870      	ldr	r0, [pc, #448]	@ (8004638 <xTaskResumeAll+0x1e4>)
 8004478:	f7fd fa5e 	bl	8001938 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 800447c:	4b6d      	ldr	r3, [pc, #436]	@ (8004634 <xTaskResumeAll+0x1e0>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	3b01      	subs	r3, #1
 8004482:	4a6c      	ldr	r2, [pc, #432]	@ (8004634 <xTaskResumeAll+0x1e0>)
 8004484:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004486:	4b6b      	ldr	r3, [pc, #428]	@ (8004634 <xTaskResumeAll+0x1e0>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f040 80ca 	bne.w	8004624 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004490:	4b6a      	ldr	r3, [pc, #424]	@ (800463c <xTaskResumeAll+0x1e8>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 80c5 	beq.w	8004624 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800449a:	e08e      	b.n	80045ba <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800449c:	4b68      	ldr	r3, [pc, #416]	@ (8004640 <xTaskResumeAll+0x1ec>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a8:	60fb      	str	r3, [r7, #12]
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	6a12      	ldr	r2, [r2, #32]
 80044b2:	609a      	str	r2, [r3, #8]
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	69d2      	ldr	r2, [r2, #28]
 80044bc:	605a      	str	r2, [r3, #4]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	3318      	adds	r3, #24
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d103      	bne.n	80044d2 <xTaskResumeAll+0x7e>
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	6a1a      	ldr	r2, [r3, #32]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2200      	movs	r2, #0
 80044d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	1e5a      	subs	r2, r3, #1
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	60bb      	str	r3, [r7, #8]
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	68d2      	ldr	r2, [r2, #12]
 80044f0:	609a      	str	r2, [r3, #8]
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	6892      	ldr	r2, [r2, #8]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	3304      	adds	r3, #4
 8004504:	429a      	cmp	r2, r3
 8004506:	d103      	bne.n	8004510 <xTaskResumeAll+0xbc>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2200      	movs	r2, #0
 8004514:	615a      	str	r2, [r3, #20]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	1e5a      	subs	r2, r3, #1
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	2201      	movs	r2, #1
 8004526:	409a      	lsls	r2, r3
 8004528:	4b46      	ldr	r3, [pc, #280]	@ (8004644 <xTaskResumeAll+0x1f0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4313      	orrs	r3, r2
 800452e:	4a45      	ldr	r2, [pc, #276]	@ (8004644 <xTaskResumeAll+0x1f0>)
 8004530:	6013      	str	r3, [r2, #0]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004536:	4944      	ldr	r1, [pc, #272]	@ (8004648 <xTaskResumeAll+0x1f4>)
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	3304      	adds	r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	607b      	str	r3, [r7, #4]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	609a      	str	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	689a      	ldr	r2, [r3, #8]
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	60da      	str	r2, [r3, #12]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	69fa      	ldr	r2, [r7, #28]
 800455c:	3204      	adds	r2, #4
 800455e:	605a      	str	r2, [r3, #4]
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	1d1a      	adds	r2, r3, #4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
 8004568:	69fb      	ldr	r3, [r7, #28]
 800456a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456c:	4613      	mov	r3, r2
 800456e:	009b      	lsls	r3, r3, #2
 8004570:	4413      	add	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4a34      	ldr	r2, [pc, #208]	@ (8004648 <xTaskResumeAll+0x1f4>)
 8004576:	441a      	add	r2, r3
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	615a      	str	r2, [r3, #20]
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004580:	4931      	ldr	r1, [pc, #196]	@ (8004648 <xTaskResumeAll+0x1f4>)
 8004582:	4613      	mov	r3, r2
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	4413      	add	r3, r2
 8004588:	009b      	lsls	r3, r3, #2
 800458a:	440b      	add	r3, r1
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	482c      	ldr	r0, [pc, #176]	@ (8004648 <xTaskResumeAll+0x1f4>)
 8004596:	4613      	mov	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4403      	add	r3, r0
 80045a0:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045a6:	4b29      	ldr	r3, [pc, #164]	@ (800464c <xTaskResumeAll+0x1f8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d904      	bls.n	80045ba <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80045b0:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <xTaskResumeAll+0x1fc>)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2101      	movs	r1, #1
 80045b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045ba:	4b21      	ldr	r3, [pc, #132]	@ (8004640 <xTaskResumeAll+0x1ec>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f47f af6c 	bne.w	800449c <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80045ca:	f000 fd27 	bl	800501c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045ce:	4b21      	ldr	r3, [pc, #132]	@ (8004654 <xTaskResumeAll+0x200>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d012      	beq.n	8004600 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80045da:	f000 f86d 	bl	80046b8 <xTaskIncrementTick>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d004      	beq.n	80045ee <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80045e4:	4a1a      	ldr	r2, [pc, #104]	@ (8004650 <xTaskResumeAll+0x1fc>)
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2101      	movs	r1, #1
 80045ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	3b01      	subs	r3, #1
 80045f2:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1ef      	bne.n	80045da <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 80045fa:	4b16      	ldr	r3, [pc, #88]	@ (8004654 <xTaskResumeAll+0x200>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8004600:	4a13      	ldr	r2, [pc, #76]	@ (8004650 <xTaskResumeAll+0x1fc>)
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00b      	beq.n	8004624 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8004610:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <xTaskResumeAll+0x1f8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4b10      	ldr	r3, [pc, #64]	@ (8004658 <xTaskResumeAll+0x204>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004624:	f001 fdb0 	bl	8006188 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8004628:	69bb      	ldr	r3, [r7, #24]
}
 800462a:	4618      	mov	r0, r3
 800462c:	3720      	adds	r7, #32
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000eac 	.word	0x20000eac
 8004638:	08024160 	.word	0x08024160
 800463c:	20000e84 	.word	0x20000e84
 8004640:	20000e44 	.word	0x20000e44
 8004644:	20000e8c 	.word	0x20000e8c
 8004648:	20000d88 	.word	0x20000d88
 800464c:	20000d84 	.word	0x20000d84
 8004650:	20000e98 	.word	0x20000e98
 8004654:	20000e94 	.word	0x20000e94
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <xTaskGetTickCount+0x1c>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8004668:	687b      	ldr	r3, [r7, #4]
}
 800466a:	4618      	mov	r0, r3
 800466c:	370c      	adds	r7, #12
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000e88 	.word	0x20000e88

0800467c <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <pcTaskGetName+0x14>
 800468a:	4b09      	ldr	r3, [pc, #36]	@ (80046b0 <pcTaskGetName+0x34>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	e000      	b.n	8004692 <pcTaskGetName+0x16>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d104      	bne.n	80046a4 <pcTaskGetName+0x28>
 800469a:	f241 0155 	movw	r1, #4181	@ 0x1055
 800469e:	4805      	ldr	r0, [pc, #20]	@ (80046b4 <pcTaskGetName+0x38>)
 80046a0:	f7fd f94a 	bl	8001938 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	3334      	adds	r3, #52	@ 0x34
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	20000d84 	.word	0x20000d84
 80046b4:	08024160 	.word	0x08024160

080046b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80046c2:	4b7b      	ldr	r3, [pc, #492]	@ (80048b0 <xTaskIncrementTick+0x1f8>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 80e8 	bne.w	800489c <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80046cc:	4b79      	ldr	r3, [pc, #484]	@ (80048b4 <xTaskIncrementTick+0x1fc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3301      	adds	r3, #1
 80046d2:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80046d4:	4a77      	ldr	r2, [pc, #476]	@ (80048b4 <xTaskIncrementTick+0x1fc>)
 80046d6:	69bb      	ldr	r3, [r7, #24]
 80046d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d11a      	bne.n	8004716 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 80046e0:	4b75      	ldr	r3, [pc, #468]	@ (80048b8 <xTaskIncrementTick+0x200>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d004      	beq.n	80046f4 <xTaskIncrementTick+0x3c>
 80046ea:	f241 215f 	movw	r1, #4703	@ 0x125f
 80046ee:	4873      	ldr	r0, [pc, #460]	@ (80048bc <xTaskIncrementTick+0x204>)
 80046f0:	f7fd f922 	bl	8001938 <vAssertCalled>
 80046f4:	4b70      	ldr	r3, [pc, #448]	@ (80048b8 <xTaskIncrementTick+0x200>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	4b71      	ldr	r3, [pc, #452]	@ (80048c0 <xTaskIncrementTick+0x208>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a6e      	ldr	r2, [pc, #440]	@ (80048b8 <xTaskIncrementTick+0x200>)
 8004700:	6013      	str	r3, [r2, #0]
 8004702:	4a6f      	ldr	r2, [pc, #444]	@ (80048c0 <xTaskIncrementTick+0x208>)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	4b6e      	ldr	r3, [pc, #440]	@ (80048c4 <xTaskIncrementTick+0x20c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	3301      	adds	r3, #1
 800470e:	4a6d      	ldr	r2, [pc, #436]	@ (80048c4 <xTaskIncrementTick+0x20c>)
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	f000 fc83 	bl	800501c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004716:	4b6c      	ldr	r3, [pc, #432]	@ (80048c8 <xTaskIncrementTick+0x210>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	429a      	cmp	r2, r3
 800471e:	f0c0 80a8 	bcc.w	8004872 <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004722:	4b65      	ldr	r3, [pc, #404]	@ (80048b8 <xTaskIncrementTick+0x200>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800472c:	4b66      	ldr	r3, [pc, #408]	@ (80048c8 <xTaskIncrementTick+0x210>)
 800472e:	f04f 32ff 	mov.w	r2, #4294967295
 8004732:	601a      	str	r2, [r3, #0]
                    break;
 8004734:	e09d      	b.n	8004872 <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004736:	4b60      	ldr	r3, [pc, #384]	@ (80048b8 <xTaskIncrementTick+0x200>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	429a      	cmp	r2, r3
 800474c:	d203      	bcs.n	8004756 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800474e:	4a5e      	ldr	r2, [pc, #376]	@ (80048c8 <xTaskIncrementTick+0x210>)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6013      	str	r3, [r2, #0]
                        break;
 8004754:	e08d      	b.n	8004872 <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	60bb      	str	r3, [r7, #8]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	68d2      	ldr	r2, [r2, #12]
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	6892      	ldr	r2, [r2, #8]
 800476e:	605a      	str	r2, [r3, #4]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	685a      	ldr	r2, [r3, #4]
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	3304      	adds	r3, #4
 8004778:	429a      	cmp	r2, r3
 800477a:	d103      	bne.n	8004784 <xTaskIncrementTick+0xcc>
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	605a      	str	r2, [r3, #4]
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2200      	movs	r2, #0
 8004788:	615a      	str	r2, [r3, #20]
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	1e5a      	subs	r2, r3, #1
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d01e      	beq.n	80047da <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	6a12      	ldr	r2, [r2, #32]
 80047aa:	609a      	str	r2, [r3, #8]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6a1b      	ldr	r3, [r3, #32]
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	69d2      	ldr	r2, [r2, #28]
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	3318      	adds	r3, #24
 80047be:	429a      	cmp	r2, r3
 80047c0:	d103      	bne.n	80047ca <xTaskIncrementTick+0x112>
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6a1a      	ldr	r2, [r3, #32]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2200      	movs	r2, #0
 80047ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	1e5a      	subs	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047de:	2201      	movs	r2, #1
 80047e0:	409a      	lsls	r2, r3
 80047e2:	4b3a      	ldr	r3, [pc, #232]	@ (80048cc <xTaskIncrementTick+0x214>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	4a38      	ldr	r2, [pc, #224]	@ (80048cc <xTaskIncrementTick+0x214>)
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f0:	4937      	ldr	r1, [pc, #220]	@ (80048d0 <xTaskIncrementTick+0x218>)
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	440b      	add	r3, r1
 80047fc:	3304      	adds	r3, #4
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	603b      	str	r3, [r7, #0]
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	3204      	adds	r2, #4
 8004818:	605a      	str	r2, [r3, #4]
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1d1a      	adds	r2, r3, #4
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	609a      	str	r2, [r3, #8]
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4a28      	ldr	r2, [pc, #160]	@ (80048d0 <xTaskIncrementTick+0x218>)
 8004830:	441a      	add	r2, r3
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	615a      	str	r2, [r3, #20]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483a:	4925      	ldr	r1, [pc, #148]	@ (80048d0 <xTaskIncrementTick+0x218>)
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800484c:	1c59      	adds	r1, r3, #1
 800484e:	4820      	ldr	r0, [pc, #128]	@ (80048d0 <xTaskIncrementTick+0x218>)
 8004850:	4613      	mov	r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4403      	add	r3, r0
 800485a:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004860:	4b1c      	ldr	r3, [pc, #112]	@ (80048d4 <xTaskIncrementTick+0x21c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004866:	429a      	cmp	r2, r3
 8004868:	f67f af5b 	bls.w	8004722 <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 800486c:	2301      	movs	r3, #1
 800486e:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004870:	e757      	b.n	8004722 <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8004872:	4b18      	ldr	r3, [pc, #96]	@ (80048d4 <xTaskIncrementTick+0x21c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004878:	4915      	ldr	r1, [pc, #84]	@ (80048d0 <xTaskIncrementTick+0x218>)
 800487a:	4613      	mov	r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	4413      	add	r3, r2
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	440b      	add	r3, r1
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b01      	cmp	r3, #1
 8004888:	d901      	bls.n	800488e <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 800488a:	2301      	movs	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800488e:	4b12      	ldr	r3, [pc, #72]	@ (80048d8 <xTaskIncrementTick+0x220>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d007      	beq.n	80048a6 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8004896:	2301      	movs	r3, #1
 8004898:	61fb      	str	r3, [r7, #28]
 800489a:	e004      	b.n	80048a6 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800489c:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <xTaskIncrementTick+0x224>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	3301      	adds	r3, #1
 80048a2:	4a0e      	ldr	r2, [pc, #56]	@ (80048dc <xTaskIncrementTick+0x224>)
 80048a4:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 80048a6:	69fb      	ldr	r3, [r7, #28]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	20000eac 	.word	0x20000eac
 80048b4:	20000e88 	.word	0x20000e88
 80048b8:	20000e3c 	.word	0x20000e3c
 80048bc:	08024160 	.word	0x08024160
 80048c0:	20000e40 	.word	0x20000e40
 80048c4:	20000e9c 	.word	0x20000e9c
 80048c8:	20000ea4 	.word	0x20000ea4
 80048cc:	20000e8c 	.word	0x20000e8c
 80048d0:	20000d88 	.word	0x20000d88
 80048d4:	20000d84 	.word	0x20000d84
 80048d8:	20000e98 	.word	0x20000e98
 80048dc:	20000e94 	.word	0x20000e94

080048e0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80048e6:	4b30      	ldr	r3, [pc, #192]	@ (80049a8 <vTaskSwitchContext+0xc8>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d003      	beq.n	80048f6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80048ee:	4b2f      	ldr	r3, [pc, #188]	@ (80049ac <vTaskSwitchContext+0xcc>)
 80048f0:	2201      	movs	r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80048f4:	e053      	b.n	800499e <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 80048f6:	4b2d      	ldr	r3, [pc, #180]	@ (80049ac <vTaskSwitchContext+0xcc>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 80048fc:	f7fd f814 	bl	8001928 <ulGetRunTimeCounterValue>
 8004900:	4603      	mov	r3, r0
 8004902:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <vTaskSwitchContext+0xd0>)
 8004904:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8004906:	4b2a      	ldr	r3, [pc, #168]	@ (80049b0 <vTaskSwitchContext+0xd0>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	4b2a      	ldr	r3, [pc, #168]	@ (80049b4 <vTaskSwitchContext+0xd4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	429a      	cmp	r2, r3
 8004910:	d909      	bls.n	8004926 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8004912:	4b27      	ldr	r3, [pc, #156]	@ (80049b0 <vTaskSwitchContext+0xd0>)
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	4b27      	ldr	r3, [pc, #156]	@ (80049b4 <vTaskSwitchContext+0xd4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1ad1      	subs	r1, r2, r3
 800491c:	4b26      	ldr	r3, [pc, #152]	@ (80049b8 <vTaskSwitchContext+0xd8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004922:	440a      	add	r2, r1
 8004924:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8004926:	4b22      	ldr	r3, [pc, #136]	@ (80049b0 <vTaskSwitchContext+0xd0>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a22      	ldr	r2, [pc, #136]	@ (80049b4 <vTaskSwitchContext+0xd4>)
 800492c:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800492e:	4b23      	ldr	r3, [pc, #140]	@ (80049bc <vTaskSwitchContext+0xdc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	f1c3 031f 	rsb	r3, r3, #31
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	491e      	ldr	r1, [pc, #120]	@ (80049c0 <vTaskSwitchContext+0xe0>)
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <vTaskSwitchContext+0x82>
 8004958:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 800495c:	4819      	ldr	r0, [pc, #100]	@ (80049c4 <vTaskSwitchContext+0xe4>)
 800495e:	f7fc ffeb 	bl	8001938 <vAssertCalled>
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4613      	mov	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <vTaskSwitchContext+0xe0>)
 800496e:	4413      	add	r3, r2
 8004970:	60bb      	str	r3, [r7, #8]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	605a      	str	r2, [r3, #4]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	685a      	ldr	r2, [r3, #4]
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	3308      	adds	r3, #8
 8004984:	429a      	cmp	r2, r3
 8004986:	d103      	bne.n	8004990 <vTaskSwitchContext+0xb0>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	68da      	ldr	r2, [r3, #12]
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	605a      	str	r2, [r3, #4]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	4a08      	ldr	r2, [pc, #32]	@ (80049b8 <vTaskSwitchContext+0xd8>)
 8004998:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800499a:	4b07      	ldr	r3, [pc, #28]	@ (80049b8 <vTaskSwitchContext+0xd8>)
 800499c:	681b      	ldr	r3, [r3, #0]
    }
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000eac 	.word	0x20000eac
 80049ac:	20000e98 	.word	0x20000e98
 80049b0:	20000eb4 	.word	0x20000eb4
 80049b4:	20000eb0 	.word	0x20000eb0
 80049b8:	20000d84 	.word	0x20000d84
 80049bc:	20000e8c 	.word	0x20000e8c
 80049c0:	20000d88 	.word	0x20000d88
 80049c4:	08024160 	.word	0x08024160

080049c8 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
 80049d0:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d104      	bne.n	80049e2 <vTaskPlaceOnEventList+0x1a>
 80049d8:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 80049dc:	4808      	ldr	r0, [pc, #32]	@ (8004a00 <vTaskPlaceOnEventList+0x38>)
 80049de:	f7fc ffab 	bl	8001938 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80049e2:	4b08      	ldr	r3, [pc, #32]	@ (8004a04 <vTaskPlaceOnEventList+0x3c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3318      	adds	r3, #24
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7fe fca1 	bl	8003332 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80049f0:	2101      	movs	r1, #1
 80049f2:	6838      	ldr	r0, [r7, #0]
 80049f4:	f001 f9e4 	bl	8005dc0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 80049f8:	bf00      	nop
 80049fa:	3708      	adds	r7, #8
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	08024160 	.word	0x08024160
 8004a04:	20000d84 	.word	0x20000d84

08004a08 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d104      	bne.n	8004a24 <vTaskPlaceOnUnorderedEventList+0x1c>
 8004a1a:	f241 419e 	movw	r1, #5278	@ 0x149e
 8004a1e:	481d      	ldr	r0, [pc, #116]	@ (8004a94 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8004a20:	f7fc ff8a 	bl	8001938 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004a24:	4b1c      	ldr	r3, [pc, #112]	@ (8004a98 <vTaskPlaceOnUnorderedEventList+0x90>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d104      	bne.n	8004a36 <vTaskPlaceOnUnorderedEventList+0x2e>
 8004a2c:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 8004a30:	4818      	ldr	r0, [pc, #96]	@ (8004a94 <vTaskPlaceOnUnorderedEventList+0x8c>)
 8004a32:	f7fc ff81 	bl	8001938 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004a36:	4b19      	ldr	r3, [pc, #100]	@ (8004a9c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8004a40:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	617b      	str	r3, [r7, #20]
 8004a48:	4b14      	ldr	r3, [pc, #80]	@ (8004a9c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	61da      	str	r2, [r3, #28]
 8004a50:	4b12      	ldr	r3, [pc, #72]	@ (8004a9c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	697a      	ldr	r2, [r7, #20]
 8004a56:	6892      	ldr	r2, [r2, #8]
 8004a58:	621a      	str	r2, [r3, #32]
 8004a5a:	4b10      	ldr	r3, [pc, #64]	@ (8004a9c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	3218      	adds	r2, #24
 8004a64:	605a      	str	r2, [r3, #4]
 8004a66:	4b0d      	ldr	r3, [pc, #52]	@ (8004a9c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f103 0218 	add.w	r2, r3, #24
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	609a      	str	r2, [r3, #8]
 8004a72:	4b0a      	ldr	r3, [pc, #40]	@ (8004a9c <vTaskPlaceOnUnorderedEventList+0x94>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a84:	2101      	movs	r1, #1
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 f99a 	bl	8005dc0 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8004a8c:	bf00      	nop
 8004a8e:	3718      	adds	r7, #24
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	08024160 	.word	0x08024160
 8004a98:	20000eac 	.word	0x20000eac
 8004a9c:	20000d84 	.word	0x20000d84

08004aa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b088      	sub	sp, #32
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <xTaskRemoveFromEventList+0x20>
 8004ab6:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8004aba:	485b      	ldr	r0, [pc, #364]	@ (8004c28 <xTaskRemoveFromEventList+0x188>)
 8004abc:	f7fc ff3c 	bl	8001938 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	69db      	ldr	r3, [r3, #28]
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	6a12      	ldr	r2, [r2, #32]
 8004ace:	609a      	str	r2, [r3, #8]
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	69d2      	ldr	r2, [r2, #28]
 8004ad8:	605a      	str	r2, [r3, #4]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	3318      	adds	r3, #24
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d103      	bne.n	8004aee <xTaskRemoveFromEventList+0x4e>
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6a1a      	ldr	r2, [r3, #32]
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	605a      	str	r2, [r3, #4]
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2200      	movs	r2, #0
 8004af2:	629a      	str	r2, [r3, #40]	@ 0x28
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	1e5a      	subs	r2, r3, #1
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004afe:	4b4b      	ldr	r3, [pc, #300]	@ (8004c2c <xTaskRemoveFromEventList+0x18c>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d160      	bne.n	8004bc8 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	68d2      	ldr	r2, [r2, #12]
 8004b14:	609a      	str	r2, [r3, #8]
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	69ba      	ldr	r2, [r7, #24]
 8004b1c:	6892      	ldr	r2, [r2, #8]
 8004b1e:	605a      	str	r2, [r3, #4]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	3304      	adds	r3, #4
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d103      	bne.n	8004b34 <xTaskRemoveFromEventList+0x94>
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	68da      	ldr	r2, [r3, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	605a      	str	r2, [r3, #4]
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2200      	movs	r2, #0
 8004b38:	615a      	str	r2, [r3, #20]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	1e5a      	subs	r2, r3, #1
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	2201      	movs	r2, #1
 8004b4a:	409a      	lsls	r2, r3
 8004b4c:	4b38      	ldr	r3, [pc, #224]	@ (8004c30 <xTaskRemoveFromEventList+0x190>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	4a37      	ldr	r2, [pc, #220]	@ (8004c30 <xTaskRemoveFromEventList+0x190>)
 8004b54:	6013      	str	r3, [r2, #0]
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b5a:	4936      	ldr	r1, [pc, #216]	@ (8004c34 <xTaskRemoveFromEventList+0x194>)
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	3304      	adds	r3, #4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	60bb      	str	r3, [r7, #8]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	609a      	str	r2, [r3, #8]
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	60da      	str	r2, [r3, #12]
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	3204      	adds	r2, #4
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	1d1a      	adds	r2, r3, #4
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4a26      	ldr	r2, [pc, #152]	@ (8004c34 <xTaskRemoveFromEventList+0x194>)
 8004b9a:	441a      	add	r2, r3
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	615a      	str	r2, [r3, #20]
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba4:	4923      	ldr	r1, [pc, #140]	@ (8004c34 <xTaskRemoveFromEventList+0x194>)
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bb6:	1c59      	adds	r1, r3, #1
 8004bb8:	481e      	ldr	r0, [pc, #120]	@ (8004c34 <xTaskRemoveFromEventList+0x194>)
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4403      	add	r3, r0
 8004bc4:	6019      	str	r1, [r3, #0]
 8004bc6:	e01b      	b.n	8004c00 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c38 <xTaskRemoveFromEventList+0x198>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	613b      	str	r3, [r7, #16]
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	61da      	str	r2, [r3, #28]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	621a      	str	r2, [r3, #32]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	3218      	adds	r2, #24
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f103 0218 	add.w	r2, r3, #24
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	4a11      	ldr	r2, [pc, #68]	@ (8004c38 <xTaskRemoveFromEventList+0x198>)
 8004bf4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bf6:	4b10      	ldr	r3, [pc, #64]	@ (8004c38 <xTaskRemoveFromEventList+0x198>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8004c38 <xTaskRemoveFromEventList+0x198>)
 8004bfe:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c04:	4b0d      	ldr	r3, [pc, #52]	@ (8004c3c <xTaskRemoveFromEventList+0x19c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d905      	bls.n	8004c1a <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004c12:	4b0b      	ldr	r3, [pc, #44]	@ (8004c40 <xTaskRemoveFromEventList+0x1a0>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	e001      	b.n	8004c1e <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8004c1e:	69fb      	ldr	r3, [r7, #28]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3720      	adds	r7, #32
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	08024160 	.word	0x08024160
 8004c2c:	20000eac 	.word	0x20000eac
 8004c30:	20000e8c 	.word	0x20000e8c
 8004c34:	20000d88 	.word	0x20000d88
 8004c38:	20000e44 	.word	0x20000e44
 8004c3c:	20000d84 	.word	0x20000d84
 8004c40:	20000e98 	.word	0x20000e98

08004c44 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b086      	sub	sp, #24
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004c4e:	4b52      	ldr	r3, [pc, #328]	@ (8004d98 <vTaskRemoveFromUnorderedEventList+0x154>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d104      	bne.n	8004c60 <vTaskRemoveFromUnorderedEventList+0x1c>
 8004c56:	f241 5143 	movw	r1, #5443	@ 0x1543
 8004c5a:	4850      	ldr	r0, [pc, #320]	@ (8004d9c <vTaskRemoveFromUnorderedEventList+0x158>)
 8004c5c:	f7fc fe6c 	bl	8001938 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d104      	bne.n	8004c80 <vTaskRemoveFromUnorderedEventList+0x3c>
 8004c76:	f241 514e 	movw	r1, #5454	@ 0x154e
 8004c7a:	4848      	ldr	r0, [pc, #288]	@ (8004d9c <vTaskRemoveFromUnorderedEventList+0x158>)
 8004c7c:	f7fc fe5c 	bl	8001938 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6892      	ldr	r2, [r2, #8]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6852      	ldr	r2, [r2, #4]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d103      	bne.n	8004cac <vTaskRemoveFromUnorderedEventList+0x68>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689a      	ldr	r2, [r3, #8]
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	611a      	str	r2, [r3, #16]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1e5a      	subs	r2, r3, #1
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	697a      	ldr	r2, [r7, #20]
 8004cc8:	68d2      	ldr	r2, [r2, #12]
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	6892      	ldr	r2, [r2, #8]
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	685a      	ldr	r2, [r3, #4]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d103      	bne.n	8004cea <vTaskRemoveFromUnorderedEventList+0xa6>
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	605a      	str	r2, [r3, #4]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2200      	movs	r2, #0
 8004cee:	615a      	str	r2, [r3, #20]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	1e5a      	subs	r2, r3, #1
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cfe:	2201      	movs	r2, #1
 8004d00:	409a      	lsls	r2, r3
 8004d02:	4b27      	ldr	r3, [pc, #156]	@ (8004da0 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	4a25      	ldr	r2, [pc, #148]	@ (8004da0 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d10:	4924      	ldr	r1, [pc, #144]	@ (8004da4 <vTaskRemoveFromUnorderedEventList+0x160>)
 8004d12:	4613      	mov	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	4413      	add	r3, r2
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	609a      	str	r2, [r3, #8]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	60da      	str	r2, [r3, #12]
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	3204      	adds	r2, #4
 8004d38:	605a      	str	r2, [r3, #4]
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	1d1a      	adds	r2, r3, #4
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	609a      	str	r2, [r3, #8]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4a15      	ldr	r2, [pc, #84]	@ (8004da4 <vTaskRemoveFromUnorderedEventList+0x160>)
 8004d50:	441a      	add	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	615a      	str	r2, [r3, #20]
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d5a:	4912      	ldr	r1, [pc, #72]	@ (8004da4 <vTaskRemoveFromUnorderedEventList+0x160>)
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	440b      	add	r3, r1
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d6c:	1c59      	adds	r1, r3, #1
 8004d6e:	480d      	ldr	r0, [pc, #52]	@ (8004da4 <vTaskRemoveFromUnorderedEventList+0x160>)
 8004d70:	4613      	mov	r3, r2
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	4403      	add	r3, r0
 8004d7a:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d80:	4b09      	ldr	r3, [pc, #36]	@ (8004da8 <vTaskRemoveFromUnorderedEventList+0x164>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d902      	bls.n	8004d90 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8004d8a:	4b08      	ldr	r3, [pc, #32]	@ (8004dac <vTaskRemoveFromUnorderedEventList+0x168>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8004d90:	bf00      	nop
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	20000eac 	.word	0x20000eac
 8004d9c:	08024160 	.word	0x08024160
 8004da0:	20000e8c 	.word	0x20000e8c
 8004da4:	20000d88 	.word	0x20000d88
 8004da8:	20000d84 	.word	0x20000d84
 8004dac:	20000e98 	.word	0x20000e98

08004db0 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b082      	sub	sp, #8
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d104      	bne.n	8004dc8 <vTaskSetTimeOutState+0x18>
 8004dbe:	f241 5186 	movw	r1, #5510	@ 0x1586
 8004dc2:	4809      	ldr	r0, [pc, #36]	@ (8004de8 <vTaskSetTimeOutState+0x38>)
 8004dc4:	f7fc fdb8 	bl	8001938 <vAssertCalled>
    taskENTER_CRITICAL();
 8004dc8:	f001 f9b2 	bl	8006130 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dcc:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <vTaskSetTimeOutState+0x3c>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <vTaskSetTimeOutState+0x40>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8004ddc:	f001 f9d4 	bl	8006188 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	08024160 	.word	0x08024160
 8004dec:	20000e9c 	.word	0x20000e9c
 8004df0:	20000e88 	.word	0x20000e88

08004df4 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dfc:	4b06      	ldr	r3, [pc, #24]	@ (8004e18 <vTaskInternalSetTimeOutState+0x24>)
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004e04:	4b05      	ldr	r3, [pc, #20]	@ (8004e1c <vTaskInternalSetTimeOutState+0x28>)
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	20000e9c 	.word	0x20000e9c
 8004e1c:	20000e88 	.word	0x20000e88

08004e20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <xTaskCheckForTimeOut+0x1a>
 8004e30:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8004e34:	4825      	ldr	r0, [pc, #148]	@ (8004ecc <xTaskCheckForTimeOut+0xac>)
 8004e36:	f7fc fd7f 	bl	8001938 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d104      	bne.n	8004e4a <xTaskCheckForTimeOut+0x2a>
 8004e40:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8004e44:	4821      	ldr	r0, [pc, #132]	@ (8004ecc <xTaskCheckForTimeOut+0xac>)
 8004e46:	f7fc fd77 	bl	8001938 <vAssertCalled>

    taskENTER_CRITICAL();
 8004e4a:	f001 f971 	bl	8006130 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004e4e:	4b20      	ldr	r3, [pc, #128]	@ (8004ed0 <xTaskCheckForTimeOut+0xb0>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e66:	d102      	bne.n	8004e6e <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e026      	b.n	8004ebc <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	4b18      	ldr	r3, [pc, #96]	@ (8004ed4 <xTaskCheckForTimeOut+0xb4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d00a      	beq.n	8004e90 <xTaskCheckForTimeOut+0x70>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d305      	bcc.n	8004e90 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004e84:	2301      	movs	r3, #1
 8004e86:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e015      	b.n	8004ebc <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d20b      	bcs.n	8004eb2 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad2      	subs	r2, r2, r3
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff ffa4 	bl	8004df4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e004      	b.n	8004ebc <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8004ebc:	f001 f964 	bl	8006188 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 8004ec0:	697b      	ldr	r3, [r7, #20]
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	08024160 	.word	0x08024160
 8004ed0:	20000e88 	.word	0x20000e88
 8004ed4:	20000e9c 	.word	0x20000e9c

08004ed8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004edc:	4b03      	ldr	r3, [pc, #12]	@ (8004eec <vTaskMissedYield+0x14>)
 8004ede:	2201      	movs	r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 8004ee2:	bf00      	nop
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eea:	4770      	bx	lr
 8004eec:	20000e98 	.word	0x20000e98

08004ef0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004ef8:	f000 f852 	bl	8004fa0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004efc:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <prvIdleTask+0x28>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d9f9      	bls.n	8004ef8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004f04:	4b05      	ldr	r3, [pc, #20]	@ (8004f1c <prvIdleTask+0x2c>)
 8004f06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004f14:	e7f0      	b.n	8004ef8 <prvIdleTask+0x8>
 8004f16:	bf00      	nop
 8004f18:	20000d88 	.word	0x20000d88
 8004f1c:	e000ed04 	.word	0xe000ed04

08004f20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f26:	2300      	movs	r3, #0
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	e00c      	b.n	8004f46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	4a12      	ldr	r2, [pc, #72]	@ (8004f80 <prvInitialiseTaskLists+0x60>)
 8004f38:	4413      	add	r3, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7fe f9a8 	bl	8003290 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	3301      	adds	r3, #1
 8004f44:	607b      	str	r3, [r7, #4]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b06      	cmp	r3, #6
 8004f4a:	d9ef      	bls.n	8004f2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004f4c:	480d      	ldr	r0, [pc, #52]	@ (8004f84 <prvInitialiseTaskLists+0x64>)
 8004f4e:	f7fe f99f 	bl	8003290 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004f52:	480d      	ldr	r0, [pc, #52]	@ (8004f88 <prvInitialiseTaskLists+0x68>)
 8004f54:	f7fe f99c 	bl	8003290 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004f58:	480c      	ldr	r0, [pc, #48]	@ (8004f8c <prvInitialiseTaskLists+0x6c>)
 8004f5a:	f7fe f999 	bl	8003290 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004f5e:	480c      	ldr	r0, [pc, #48]	@ (8004f90 <prvInitialiseTaskLists+0x70>)
 8004f60:	f7fe f996 	bl	8003290 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004f64:	480b      	ldr	r0, [pc, #44]	@ (8004f94 <prvInitialiseTaskLists+0x74>)
 8004f66:	f7fe f993 	bl	8003290 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <prvInitialiseTaskLists+0x78>)
 8004f6c:	4a05      	ldr	r2, [pc, #20]	@ (8004f84 <prvInitialiseTaskLists+0x64>)
 8004f6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f70:	4b0a      	ldr	r3, [pc, #40]	@ (8004f9c <prvInitialiseTaskLists+0x7c>)
 8004f72:	4a05      	ldr	r2, [pc, #20]	@ (8004f88 <prvInitialiseTaskLists+0x68>)
 8004f74:	601a      	str	r2, [r3, #0]
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	20000d88 	.word	0x20000d88
 8004f84:	20000e14 	.word	0x20000e14
 8004f88:	20000e28 	.word	0x20000e28
 8004f8c:	20000e44 	.word	0x20000e44
 8004f90:	20000e58 	.word	0x20000e58
 8004f94:	20000e70 	.word	0x20000e70
 8004f98:	20000e3c 	.word	0x20000e3c
 8004f9c:	20000e40 	.word	0x20000e40

08004fa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fa6:	e019      	b.n	8004fdc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004fa8:	f001 f8c2 	bl	8006130 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004fac:	4b10      	ldr	r3, [pc, #64]	@ (8004ff0 <prvCheckTasksWaitingTermination+0x50>)
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fe f9f3 	bl	80033a4 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <prvCheckTasksWaitingTermination+0x54>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff4 <prvCheckTasksWaitingTermination+0x54>)
 8004fc6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff8 <prvCheckTasksWaitingTermination+0x58>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	3b01      	subs	r3, #1
 8004fce:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff8 <prvCheckTasksWaitingTermination+0x58>)
 8004fd0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8004fd2:	f001 f8d9 	bl	8006188 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 f810 	bl	8004ffc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fdc:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <prvCheckTasksWaitingTermination+0x58>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1e1      	bne.n	8004fa8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000e58 	.word	0x20000e58
 8004ff4:	20000e84 	.word	0x20000e84
 8004ff8:	20000e6c 	.word	0x20000e6c

08004ffc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005008:	4618      	mov	r0, r3
 800500a:	f001 fa67 	bl	80064dc <vPortFree>
            vPortFree( pxTCB );
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 fa64 	bl	80064dc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005020:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <prvResetNextTaskUnblockTime+0x30>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d104      	bne.n	8005034 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800502a:	4b09      	ldr	r3, [pc, #36]	@ (8005050 <prvResetNextTaskUnblockTime+0x34>)
 800502c:	f04f 32ff 	mov.w	r2, #4294967295
 8005030:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005032:	e005      	b.n	8005040 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005034:	4b05      	ldr	r3, [pc, #20]	@ (800504c <prvResetNextTaskUnblockTime+0x30>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a04      	ldr	r2, [pc, #16]	@ (8005050 <prvResetNextTaskUnblockTime+0x34>)
 800503e:	6013      	str	r3, [r2, #0]
}
 8005040:	bf00      	nop
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	20000e3c 	.word	0x20000e3c
 8005050:	20000ea4 	.word	0x20000ea4

08005054 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 800505a:	4b05      	ldr	r3, [pc, #20]	@ (8005070 <xTaskGetCurrentTaskHandle+0x1c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8005060:	687b      	ldr	r3, [r7, #4]
        }
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	20000d84 	.word	0x20000d84

08005074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800507a:	4b0b      	ldr	r3, [pc, #44]	@ (80050a8 <xTaskGetSchedulerState+0x34>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005082:	2301      	movs	r3, #1
 8005084:	607b      	str	r3, [r7, #4]
 8005086:	e008      	b.n	800509a <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005088:	4b08      	ldr	r3, [pc, #32]	@ (80050ac <xTaskGetSchedulerState+0x38>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8005090:	2302      	movs	r3, #2
 8005092:	607b      	str	r3, [r7, #4]
 8005094:	e001      	b.n	800509a <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8005096:	2300      	movs	r3, #0
 8005098:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 800509a:	687b      	ldr	r3, [r7, #4]
    }
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	20000e90 	.word	0x20000e90
 80050ac:	20000eac 	.word	0x20000eac

080050b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80050bc:	2300      	movs	r3, #0
 80050be:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 8089 	beq.w	80051da <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050cc:	4b45      	ldr	r3, [pc, #276]	@ (80051e4 <xTaskPriorityInherit+0x134>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d278      	bcs.n	80051c8 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	db06      	blt.n	80050ec <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80050de:	4b41      	ldr	r3, [pc, #260]	@ (80051e4 <xTaskPriorityInherit+0x134>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f1c3 0207 	rsb	r2, r3, #7
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	6959      	ldr	r1, [r3, #20]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050f4:	4613      	mov	r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	4413      	add	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4a3a      	ldr	r2, [pc, #232]	@ (80051e8 <xTaskPriorityInherit+0x138>)
 80050fe:	4413      	add	r3, r2
 8005100:	4299      	cmp	r1, r3
 8005102:	d159      	bne.n	80051b8 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3304      	adds	r3, #4
 8005108:	4618      	mov	r0, r3
 800510a:	f7fe f94b 	bl	80033a4 <uxListRemove>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005118:	2201      	movs	r2, #1
 800511a:	fa02 f303 	lsl.w	r3, r2, r3
 800511e:	43da      	mvns	r2, r3
 8005120:	4b32      	ldr	r3, [pc, #200]	@ (80051ec <xTaskPriorityInherit+0x13c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4013      	ands	r3, r2
 8005126:	4a31      	ldr	r2, [pc, #196]	@ (80051ec <xTaskPriorityInherit+0x13c>)
 8005128:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800512a:	4b2e      	ldr	r3, [pc, #184]	@ (80051e4 <xTaskPriorityInherit+0x134>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005138:	2201      	movs	r2, #1
 800513a:	409a      	lsls	r2, r3
 800513c:	4b2b      	ldr	r3, [pc, #172]	@ (80051ec <xTaskPriorityInherit+0x13c>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4313      	orrs	r3, r2
 8005142:	4a2a      	ldr	r2, [pc, #168]	@ (80051ec <xTaskPriorityInherit+0x13c>)
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800514a:	4927      	ldr	r1, [pc, #156]	@ (80051e8 <xTaskPriorityInherit+0x138>)
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	3304      	adds	r3, #4
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	68fa      	ldr	r2, [r7, #12]
 8005160:	609a      	str	r2, [r3, #8]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	60da      	str	r2, [r3, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	3204      	adds	r2, #4
 8005172:	605a      	str	r2, [r3, #4]
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1d1a      	adds	r2, r3, #4
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4a17      	ldr	r2, [pc, #92]	@ (80051e8 <xTaskPriorityInherit+0x138>)
 800518a:	441a      	add	r2, r3
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	615a      	str	r2, [r3, #20]
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005194:	4914      	ldr	r1, [pc, #80]	@ (80051e8 <xTaskPriorityInherit+0x138>)
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80051a6:	1c59      	adds	r1, r3, #1
 80051a8:	480f      	ldr	r0, [pc, #60]	@ (80051e8 <xTaskPriorityInherit+0x138>)
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4403      	add	r3, r0
 80051b4:	6019      	str	r1, [r3, #0]
 80051b6:	e004      	b.n	80051c2 <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80051b8:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <xTaskPriorityInherit+0x134>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	617b      	str	r3, [r7, #20]
 80051c6:	e008      	b.n	80051da <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80051cc:	4b05      	ldr	r3, [pc, #20]	@ (80051e4 <xTaskPriorityInherit+0x134>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d201      	bcs.n	80051da <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80051d6:	2301      	movs	r3, #1
 80051d8:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80051da:	697b      	ldr	r3, [r7, #20]
    }
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000d84 	.word	0x20000d84
 80051e8:	20000d88 	.word	0x20000d88
 80051ec:	20000e8c 	.word	0x20000e8c

080051f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b086      	sub	sp, #24
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80051fc:	2300      	movs	r3, #0
 80051fe:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8082 	beq.w	800530c <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005208:	4b43      	ldr	r3, [pc, #268]	@ (8005318 <xTaskPriorityDisinherit+0x128>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	429a      	cmp	r2, r3
 8005210:	d004      	beq.n	800521c <xTaskPriorityDisinherit+0x2c>
 8005212:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8005216:	4841      	ldr	r0, [pc, #260]	@ (800531c <xTaskPriorityDisinherit+0x12c>)
 8005218:	f7fc fb8e 	bl	8001938 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005220:	2b00      	cmp	r3, #0
 8005222:	d104      	bne.n	800522e <xTaskPriorityDisinherit+0x3e>
 8005224:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8005228:	483c      	ldr	r0, [pc, #240]	@ (800531c <xTaskPriorityDisinherit+0x12c>)
 800522a:	f7fc fb85 	bl	8001938 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005232:	1e5a      	subs	r2, r3, #1
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005240:	429a      	cmp	r2, r3
 8005242:	d063      	beq.n	800530c <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005248:	2b00      	cmp	r3, #0
 800524a:	d15f      	bne.n	800530c <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe f8a7 	bl	80033a4 <uxListRemove>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d10a      	bne.n	8005272 <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005260:	2201      	movs	r2, #1
 8005262:	fa02 f303 	lsl.w	r3, r2, r3
 8005266:	43da      	mvns	r2, r3
 8005268:	4b2d      	ldr	r3, [pc, #180]	@ (8005320 <xTaskPriorityDisinherit+0x130>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4013      	ands	r3, r2
 800526e:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <xTaskPriorityDisinherit+0x130>)
 8005270:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527e:	f1c3 0207 	rsb	r2, r3, #7
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	2201      	movs	r2, #1
 800528c:	409a      	lsls	r2, r3
 800528e:	4b24      	ldr	r3, [pc, #144]	@ (8005320 <xTaskPriorityDisinherit+0x130>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4313      	orrs	r3, r2
 8005294:	4a22      	ldr	r2, [pc, #136]	@ (8005320 <xTaskPriorityDisinherit+0x130>)
 8005296:	6013      	str	r3, [r2, #0]
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529c:	4921      	ldr	r1, [pc, #132]	@ (8005324 <xTaskPriorityDisinherit+0x134>)
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	3304      	adds	r3, #4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	60da      	str	r2, [r3, #12]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	3204      	adds	r2, #4
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1d1a      	adds	r2, r3, #4
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	609a      	str	r2, [r3, #8]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052d2:	4613      	mov	r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4a12      	ldr	r2, [pc, #72]	@ (8005324 <xTaskPriorityDisinherit+0x134>)
 80052dc:	441a      	add	r2, r3
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	615a      	str	r2, [r3, #20]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e6:	490f      	ldr	r1, [pc, #60]	@ (8005324 <xTaskPriorityDisinherit+0x134>)
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80052f8:	1c59      	adds	r1, r3, #1
 80052fa:	480a      	ldr	r0, [pc, #40]	@ (8005324 <xTaskPriorityDisinherit+0x134>)
 80052fc:	4613      	mov	r3, r2
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	009b      	lsls	r3, r3, #2
 8005304:	4403      	add	r3, r0
 8005306:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005308:	2301      	movs	r3, #1
 800530a:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 800530c:	697b      	ldr	r3, [r7, #20]
    }
 800530e:	4618      	mov	r0, r3
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	20000d84 	.word	0x20000d84
 800531c:	08024160 	.word	0x08024160
 8005320:	20000e8c 	.word	0x20000e8c
 8005324:	20000d88 	.word	0x20000d88

08005328 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005336:	2301      	movs	r3, #1
 8005338:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8096 	beq.w	800546e <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 800534a:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800534e:	484a      	ldr	r0, [pc, #296]	@ (8005478 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8005350:	f7fc faf2 	bl	8001938 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d902      	bls.n	8005364 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	61fb      	str	r3, [r7, #28]
 8005362:	e002      	b.n	800536a <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005368:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800536e:	69fa      	ldr	r2, [r7, #28]
 8005370:	429a      	cmp	r2, r3
 8005372:	d07c      	beq.n	800546e <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	429a      	cmp	r2, r3
 800537c:	d177      	bne.n	800546e <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800537e:	4b3f      	ldr	r3, [pc, #252]	@ (800547c <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	429a      	cmp	r2, r3
 8005386:	d104      	bne.n	8005392 <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8005388:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 800538c:	483a      	ldr	r0, [pc, #232]	@ (8005478 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800538e:	f7fc fad3 	bl	8001938 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005396:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	db04      	blt.n	80053b0 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	f1c3 0207 	rsb	r2, r3, #7
 80053ac:	69bb      	ldr	r3, [r7, #24]
 80053ae:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	6959      	ldr	r1, [r3, #20]
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	4613      	mov	r3, r2
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4a30      	ldr	r2, [pc, #192]	@ (8005480 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80053c0:	4413      	add	r3, r2
 80053c2:	4299      	cmp	r1, r3
 80053c4:	d153      	bne.n	800546e <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fd ffea 	bl	80033a4 <uxListRemove>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053da:	2201      	movs	r2, #1
 80053dc:	fa02 f303 	lsl.w	r3, r2, r3
 80053e0:	43da      	mvns	r2, r3
 80053e2:	4b28      	ldr	r3, [pc, #160]	@ (8005484 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4013      	ands	r3, r2
 80053e8:	4a26      	ldr	r2, [pc, #152]	@ (8005484 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80053ea:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053f0:	2201      	movs	r2, #1
 80053f2:	409a      	lsls	r2, r3
 80053f4:	4b23      	ldr	r3, [pc, #140]	@ (8005484 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	4a22      	ldr	r2, [pc, #136]	@ (8005484 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80053fc:	6013      	str	r3, [r2, #0]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005402:	491f      	ldr	r1, [pc, #124]	@ (8005480 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	3304      	adds	r3, #4
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	3204      	adds	r2, #4
 800542a:	605a      	str	r2, [r3, #4]
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005438:	4613      	mov	r3, r2
 800543a:	009b      	lsls	r3, r3, #2
 800543c:	4413      	add	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4a0f      	ldr	r2, [pc, #60]	@ (8005480 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005442:	441a      	add	r2, r3
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	615a      	str	r2, [r3, #20]
 8005448:	69bb      	ldr	r3, [r7, #24]
 800544a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800544c:	490c      	ldr	r1, [pc, #48]	@ (8005480 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800544e:	4613      	mov	r3, r2
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	440b      	add	r3, r1
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	69ba      	ldr	r2, [r7, #24]
 800545c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800545e:	1c59      	adds	r1, r3, #1
 8005460:	4807      	ldr	r0, [pc, #28]	@ (8005480 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4403      	add	r3, r0
 800546c:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 800546e:	bf00      	nop
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	08024160 	.word	0x08024160
 800547c:	20000d84 	.word	0x20000d84
 8005480:	20000d88 	.word	0x20000d88
 8005484:	20000e8c 	.word	0x20000e8c

08005488 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800548e:	4b09      	ldr	r3, [pc, #36]	@ (80054b4 <uxTaskResetEventItemValue+0x2c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8005496:	4b07      	ldr	r3, [pc, #28]	@ (80054b4 <uxTaskResetEventItemValue+0x2c>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800549c:	4b05      	ldr	r3, [pc, #20]	@ (80054b4 <uxTaskResetEventItemValue+0x2c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f1c2 0207 	rsb	r2, r2, #7
 80054a4:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 80054a6:	687b      	ldr	r3, [r7, #4]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000d84 	.word	0x20000d84

080054b8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80054be:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <pvTaskIncrementMutexHeldCount+0x2c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d004      	beq.n	80054d4 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ce:	1c5a      	adds	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80054d4:	687b      	ldr	r3, [r7, #4]
    }
 80054d6:	4618      	mov	r0, r3
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000d84 	.word	0x20000d84

080054e8 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d004      	beq.n	8005508 <ulTaskGenericNotifyTake+0x20>
 80054fe:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8005502:	4833      	ldr	r0, [pc, #204]	@ (80055d0 <ulTaskGenericNotifyTake+0xe8>)
 8005504:	f7fc fa18 	bl	8001938 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8005508:	f7fe ff96 	bl	8004438 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 800550c:	f000 fe10 	bl	8006130 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8005510:	4b30      	ldr	r3, [pc, #192]	@ (80055d4 <ulTaskGenericNotifyTake+0xec>)
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	3318      	adds	r3, #24
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005522:	4b2c      	ldr	r3, [pc, #176]	@ (80055d4 <ulTaskGenericNotifyTake+0xec>)
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4413      	add	r3, r2
 800552a:	3368      	adds	r3, #104	@ 0x68
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800553a:	f000 fe25 	bl	8006188 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b01      	cmp	r3, #1
 8005542:	d103      	bne.n	800554c <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005544:	2101      	movs	r1, #1
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fc3a 	bl	8005dc0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800554c:	f7fe ff82 	bl	8004454 <xTaskResumeAll>
 8005550:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10a      	bne.n	800556e <ulTaskGenericNotifyTake+0x86>
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d107      	bne.n	800556e <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <ulTaskGenericNotifyTake+0xf0>)
 8005560:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800556e:	f000 fddf 	bl	8006130 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8005572:	4b18      	ldr	r3, [pc, #96]	@ (80055d4 <ulTaskGenericNotifyTake+0xec>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3318      	adds	r3, #24
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	4413      	add	r3, r2
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d014      	beq.n	80055b2 <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d008      	beq.n	80055a0 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 800558e:	4b11      	ldr	r3, [pc, #68]	@ (80055d4 <ulTaskGenericNotifyTake+0xec>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3318      	adds	r3, #24
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	4413      	add	r3, r2
 800559a:	2200      	movs	r2, #0
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	e008      	b.n	80055b2 <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 80055a0:	4b0c      	ldr	r3, [pc, #48]	@ (80055d4 <ulTaskGenericNotifyTake+0xec>)
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	1e5a      	subs	r2, r3, #1
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3318      	adds	r3, #24
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80055b2:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <ulTaskGenericNotifyTake+0xec>)
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	4413      	add	r3, r2
 80055ba:	3368      	adds	r3, #104	@ 0x68
 80055bc:	2200      	movs	r2, #0
 80055be:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80055c0:	f000 fde2 	bl	8006188 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 80055c4:	697b      	ldr	r3, [r7, #20]
    }
 80055c6:	4618      	mov	r0, r3
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	08024160 	.word	0x08024160
 80055d4:	20000d84 	.word	0x20000d84
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <xTaskGenericNotifyWait+0x22>
 80055f4:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 80055f8:	483e      	ldr	r0, [pc, #248]	@ (80056f4 <xTaskGenericNotifyWait+0x118>)
 80055fa:	f7fc f99d 	bl	8001938 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80055fe:	f7fe ff1b 	bl	8004438 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8005602:	f000 fd95 	bl	8006130 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8005606:	4b3c      	ldr	r3, [pc, #240]	@ (80056f8 <xTaskGenericNotifyWait+0x11c>)
 8005608:	681a      	ldr	r2, [r3, #0]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4413      	add	r3, r2
 800560e:	3368      	adds	r3, #104	@ 0x68
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d01a      	beq.n	800564e <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8005618:	4b37      	ldr	r3, [pc, #220]	@ (80056f8 <xTaskGenericNotifyWait+0x11c>)
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3318      	adds	r3, #24
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	6859      	ldr	r1, [r3, #4]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	43db      	mvns	r3, r3
 800562a:	4019      	ands	r1, r3
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	3318      	adds	r3, #24
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4413      	add	r3, r2
 8005634:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8005636:	4b30      	ldr	r3, [pc, #192]	@ (80056f8 <xTaskGenericNotifyWait+0x11c>)
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	3368      	adds	r3, #104	@ 0x68
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 800564a:	2301      	movs	r3, #1
 800564c:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 800564e:	f000 fd9b 	bl	8006188 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	2b01      	cmp	r3, #1
 8005656:	d103      	bne.n	8005660 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005658:	2101      	movs	r1, #1
 800565a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800565c:	f000 fbb0 	bl	8005dc0 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8005660:	f7fe fef8 	bl	8004454 <xTaskResumeAll>
 8005664:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d10a      	bne.n	8005682 <xTaskGenericNotifyWait+0xa6>
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d107      	bne.n	8005682 <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8005672:	4b22      	ldr	r3, [pc, #136]	@ (80056fc <xTaskGenericNotifyWait+0x120>)
 8005674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005678:	601a      	str	r2, [r3, #0]
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8005682:	f000 fd55 	bl	8006130 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800568c:	4b1a      	ldr	r3, [pc, #104]	@ (80056f8 <xTaskGenericNotifyWait+0x11c>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3318      	adds	r3, #24
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800569e:	4b16      	ldr	r3, [pc, #88]	@ (80056f8 <xTaskGenericNotifyWait+0x11c>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4413      	add	r3, r2
 80056a6:	3368      	adds	r3, #104	@ 0x68
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d002      	beq.n	80056b6 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e010      	b.n	80056d8 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80056b6:	4b10      	ldr	r3, [pc, #64]	@ (80056f8 <xTaskGenericNotifyWait+0x11c>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3318      	adds	r3, #24
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	4413      	add	r3, r2
 80056c2:	6859      	ldr	r1, [r3, #4]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	43db      	mvns	r3, r3
 80056c8:	4019      	ands	r1, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3318      	adds	r3, #24
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80056d8:	4b07      	ldr	r3, [pc, #28]	@ (80056f8 <xTaskGenericNotifyWait+0x11c>)
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4413      	add	r3, r2
 80056e0:	3368      	adds	r3, #104	@ 0x68
 80056e2:	2200      	movs	r2, #0
 80056e4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80056e6:	f000 fd4f 	bl	8006188 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80056ea:	69fb      	ldr	r3, [r7, #28]
    }
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	08024160 	.word	0x08024160
 80056f8:	20000d84 	.word	0x20000d84
 80056fc:	e000ed04 	.word	0xe000ed04

08005700 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005700:	b580      	push	{r7, lr}
 8005702:	b08a      	sub	sp, #40	@ 0x28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800570e:	2301      	movs	r3, #1
 8005710:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <xTaskGenericNotify+0x22>
 8005718:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 800571c:	487b      	ldr	r0, [pc, #492]	@ (800590c <xTaskGenericNotify+0x20c>)
 800571e:	f7fc f90b 	bl	8001938 <vAssertCalled>
        configASSERT( xTaskToNotify );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <xTaskGenericNotify+0x32>
 8005728:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 800572c:	4877      	ldr	r0, [pc, #476]	@ (800590c <xTaskGenericNotify+0x20c>)
 800572e:	f7fc f903 	bl	8001938 <vAssertCalled>
        pxTCB = xTaskToNotify;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8005736:	f000 fcfb 	bl	8006130 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800573a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573c:	2b00      	cmp	r3, #0
 800573e:	d007      	beq.n	8005750 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	3318      	adds	r3, #24
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	685a      	ldr	r2, [r3, #4]
 800574c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800574e:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005750:	6a3a      	ldr	r2, [r7, #32]
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4413      	add	r3, r2
 8005756:	3368      	adds	r3, #104	@ 0x68
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4413      	add	r3, r2
 8005762:	3368      	adds	r3, #104	@ 0x68
 8005764:	2202      	movs	r2, #2
 8005766:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005768:	78fb      	ldrb	r3, [r7, #3]
 800576a:	2b04      	cmp	r3, #4
 800576c:	d83f      	bhi.n	80057ee <xTaskGenericNotify+0xee>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <xTaskGenericNotify+0x74>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005803 	.word	0x08005803
 8005778:	08005789 	.word	0x08005789
 800577c:	080057a7 	.word	0x080057a7
 8005780:	080057c3 	.word	0x080057c3
 8005784:	080057d3 	.word	0x080057d3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005788:	6a3a      	ldr	r2, [r7, #32]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3318      	adds	r3, #24
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	685a      	ldr	r2, [r3, #4]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	431a      	orrs	r2, r3
 8005798:	6a39      	ldr	r1, [r7, #32]
 800579a:	68bb      	ldr	r3, [r7, #8]
 800579c:	3318      	adds	r3, #24
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	605a      	str	r2, [r3, #4]
                    break;
 80057a4:	e030      	b.n	8005808 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	3318      	adds	r3, #24
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	4413      	add	r3, r2
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	6a39      	ldr	r1, [r7, #32]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	3318      	adds	r3, #24
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	440b      	add	r3, r1
 80057be:	605a      	str	r2, [r3, #4]
                    break;
 80057c0:	e022      	b.n	8005808 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80057c2:	6a3a      	ldr	r2, [r7, #32]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	3318      	adds	r3, #24
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	4413      	add	r3, r2
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]
                    break;
 80057d0:	e01a      	b.n	8005808 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80057d2:	7ffb      	ldrb	r3, [r7, #31]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d007      	beq.n	80057e8 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80057d8:	6a3a      	ldr	r2, [r7, #32]
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	3318      	adds	r3, #24
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	4413      	add	r3, r2
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80057e6:	e00f      	b.n	8005808 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80057ec:	e00c      	b.n	8005808 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80057ee:	4b48      	ldr	r3, [pc, #288]	@ (8005910 <xTaskGenericNotify+0x210>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <xTaskGenericNotify+0x106>
 80057f6:	f641 61da 	movw	r1, #7898	@ 0x1eda
 80057fa:	4844      	ldr	r0, [pc, #272]	@ (800590c <xTaskGenericNotify+0x20c>)
 80057fc:	f7fc f89c 	bl	8001938 <vAssertCalled>

                    break;
 8005800:	e001      	b.n	8005806 <xTaskGenericNotify+0x106>
                    break;
 8005802:	bf00      	nop
 8005804:	e000      	b.n	8005808 <xTaskGenericNotify+0x108>
                    break;
 8005806:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005808:	7ffb      	ldrb	r3, [r7, #31]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d177      	bne.n	80058fe <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800580e:	6a3b      	ldr	r3, [r7, #32]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	61bb      	str	r3, [r7, #24]
 8005814:	6a3b      	ldr	r3, [r7, #32]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	6a3a      	ldr	r2, [r7, #32]
 800581a:	68d2      	ldr	r2, [r2, #12]
 800581c:	609a      	str	r2, [r3, #8]
 800581e:	6a3b      	ldr	r3, [r7, #32]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	6892      	ldr	r2, [r2, #8]
 8005826:	605a      	str	r2, [r3, #4]
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	3304      	adds	r3, #4
 8005830:	429a      	cmp	r2, r3
 8005832:	d103      	bne.n	800583c <xTaskGenericNotify+0x13c>
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	68da      	ldr	r2, [r3, #12]
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	605a      	str	r2, [r3, #4]
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	2200      	movs	r2, #0
 8005840:	615a      	str	r2, [r3, #20]
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	1e5a      	subs	r2, r3, #1
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005850:	2201      	movs	r2, #1
 8005852:	409a      	lsls	r2, r3
 8005854:	4b2f      	ldr	r3, [pc, #188]	@ (8005914 <xTaskGenericNotify+0x214>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4313      	orrs	r3, r2
 800585a:	4a2e      	ldr	r2, [pc, #184]	@ (8005914 <xTaskGenericNotify+0x214>)
 800585c:	6013      	str	r3, [r2, #0]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005862:	492d      	ldr	r1, [pc, #180]	@ (8005918 <xTaskGenericNotify+0x218>)
 8005864:	4613      	mov	r3, r2
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	3304      	adds	r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	609a      	str	r2, [r3, #8]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	689a      	ldr	r2, [r3, #8]
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	60da      	str	r2, [r3, #12]
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	3204      	adds	r2, #4
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	609a      	str	r2, [r3, #8]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <xTaskGenericNotify+0x218>)
 80058a2:	441a      	add	r2, r3
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	615a      	str	r2, [r3, #20]
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058ac:	491a      	ldr	r1, [pc, #104]	@ (8005918 <xTaskGenericNotify+0x218>)
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	009b      	lsls	r3, r3, #2
 80058b6:	440b      	add	r3, r1
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	6a3a      	ldr	r2, [r7, #32]
 80058bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	4815      	ldr	r0, [pc, #84]	@ (8005918 <xTaskGenericNotify+0x218>)
 80058c2:	4613      	mov	r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	4413      	add	r3, r2
 80058c8:	009b      	lsls	r3, r3, #2
 80058ca:	4403      	add	r3, r0
 80058cc:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <xTaskGenericNotify+0x1e0>
 80058d6:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 80058da:	480c      	ldr	r0, [pc, #48]	@ (800590c <xTaskGenericNotify+0x20c>)
 80058dc:	f7fc f82c 	bl	8001938 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80058e0:	4b0e      	ldr	r3, [pc, #56]	@ (800591c <xTaskGenericNotify+0x21c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ea:	429a      	cmp	r2, r3
 80058ec:	d207      	bcs.n	80058fe <xTaskGenericNotify+0x1fe>
 80058ee:	4b0c      	ldr	r3, [pc, #48]	@ (8005920 <xTaskGenericNotify+0x220>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80058fe:	f000 fc43 	bl	8006188 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8005902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005904:	4618      	mov	r0, r3
 8005906:	3728      	adds	r7, #40	@ 0x28
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	08024160 	.word	0x08024160
 8005910:	20000e88 	.word	0x20000e88
 8005914:	20000e8c 	.word	0x20000e8c
 8005918:	20000d88 	.word	0x20000d88
 800591c:	20000d84 	.word	0x20000d84
 8005920:	e000ed04 	.word	0xe000ed04

08005924 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005924:	b580      	push	{r7, lr}
 8005926:	b08e      	sub	sp, #56	@ 0x38
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005932:	2301      	movs	r3, #1
 8005934:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d104      	bne.n	8005946 <xTaskGenericNotifyFromISR+0x22>
 800593c:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8005940:	4899      	ldr	r0, [pc, #612]	@ (8005ba8 <xTaskGenericNotifyFromISR+0x284>)
 8005942:	f7fb fff9 	bl	8001938 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d004      	beq.n	8005956 <xTaskGenericNotifyFromISR+0x32>
 800594c:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8005950:	4895      	ldr	r0, [pc, #596]	@ (8005ba8 <xTaskGenericNotifyFromISR+0x284>)
 8005952:	f7fb fff1 	bl	8001938 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005956:	f000 fcb9 	bl	80062cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 800595e:	f3ef 8211 	mrs	r2, BASEPRI
 8005962:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005966:	b672      	cpsid	i
 8005968:	f383 8811 	msr	BASEPRI, r3
 800596c:	f3bf 8f6f 	isb	sy
 8005970:	f3bf 8f4f 	dsb	sy
 8005974:	b662      	cpsie	i
 8005976:	61ba      	str	r2, [r7, #24]
 8005978:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 800597a:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 800597c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 800597e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d007      	beq.n	8005994 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	3318      	adds	r3, #24
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005992:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4413      	add	r3, r2
 800599a:	3368      	adds	r3, #104	@ 0x68
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80059a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4413      	add	r3, r2
 80059a8:	3368      	adds	r3, #104	@ 0x68
 80059aa:	2202      	movs	r2, #2
 80059ac:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80059ae:	78fb      	ldrb	r3, [r7, #3]
 80059b0:	2b04      	cmp	r3, #4
 80059b2:	d841      	bhi.n	8005a38 <xTaskGenericNotifyFromISR+0x114>
 80059b4:	a201      	add	r2, pc, #4	@ (adr r2, 80059bc <xTaskGenericNotifyFromISR+0x98>)
 80059b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ba:	bf00      	nop
 80059bc:	08005a4d 	.word	0x08005a4d
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059ef 	.word	0x080059ef
 80059c8:	08005a0b 	.word	0x08005a0b
 80059cc:	08005a1b 	.word	0x08005a1b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80059d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	3318      	adds	r3, #24
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	685a      	ldr	r2, [r3, #4]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	431a      	orrs	r2, r3
 80059e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	3318      	adds	r3, #24
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	440b      	add	r3, r1
 80059ea:	605a      	str	r2, [r3, #4]
                    break;
 80059ec:	e031      	b.n	8005a52 <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80059ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	3318      	adds	r3, #24
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	1c5a      	adds	r2, r3, #1
 80059fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	3318      	adds	r3, #24
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	605a      	str	r2, [r3, #4]
                    break;
 8005a08:	e023      	b.n	8005a52 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	3318      	adds	r3, #24
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	4413      	add	r3, r2
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	605a      	str	r2, [r3, #4]
                    break;
 8005a18:	e01b      	b.n	8005a52 <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d007      	beq.n	8005a32 <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005a22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	3318      	adds	r3, #24
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	4413      	add	r3, r2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005a30:	e00f      	b.n	8005a52 <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 8005a32:	2300      	movs	r3, #0
 8005a34:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8005a36:	e00c      	b.n	8005a52 <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005a38:	4b5c      	ldr	r3, [pc, #368]	@ (8005bac <xTaskGenericNotifyFromISR+0x288>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d007      	beq.n	8005a50 <xTaskGenericNotifyFromISR+0x12c>
 8005a40:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8005a44:	4858      	ldr	r0, [pc, #352]	@ (8005ba8 <xTaskGenericNotifyFromISR+0x284>)
 8005a46:	f7fb ff77 	bl	8001938 <vAssertCalled>
                    break;
 8005a4a:	e001      	b.n	8005a50 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8005a4c:	bf00      	nop
 8005a4e:	e000      	b.n	8005a52 <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8005a50:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005a52:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	f040 809a 	bne.w	8005b90 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <xTaskGenericNotifyFromISR+0x14a>
 8005a64:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005a68:	484f      	ldr	r0, [pc, #316]	@ (8005ba8 <xTaskGenericNotifyFromISR+0x284>)
 8005a6a:	f7fb ff65 	bl	8001938 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005a6e:	4b50      	ldr	r3, [pc, #320]	@ (8005bb0 <xTaskGenericNotifyFromISR+0x28c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d160      	bne.n	8005b38 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	623b      	str	r3, [r7, #32]
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a82:	68d2      	ldr	r2, [r2, #12]
 8005a84:	609a      	str	r2, [r3, #8]
 8005a86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a8c:	6892      	ldr	r2, [r2, #8]
 8005a8e:	605a      	str	r2, [r3, #4]
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a96:	3304      	adds	r3, #4
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d103      	bne.n	8005aa4 <xTaskGenericNotifyFromISR+0x180>
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9e:	68da      	ldr	r2, [r3, #12]
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	605a      	str	r2, [r3, #4]
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	615a      	str	r2, [r3, #20]
 8005aaa:	6a3b      	ldr	r3, [r7, #32]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab8:	2201      	movs	r2, #1
 8005aba:	409a      	lsls	r2, r3
 8005abc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bb4 <xTaskGenericNotifyFromISR+0x290>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4313      	orrs	r3, r2
 8005ac2:	4a3c      	ldr	r2, [pc, #240]	@ (8005bb4 <xTaskGenericNotifyFromISR+0x290>)
 8005ac4:	6013      	str	r3, [r2, #0]
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005aca:	493b      	ldr	r1, [pc, #236]	@ (8005bb8 <xTaskGenericNotifyFromISR+0x294>)
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	3304      	adds	r3, #4
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	609a      	str	r2, [r3, #8]
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	689a      	ldr	r2, [r3, #8]
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae8:	60da      	str	r2, [r3, #12]
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005af0:	3204      	adds	r2, #4
 8005af2:	605a      	str	r2, [r3, #4]
 8005af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	69fb      	ldr	r3, [r7, #28]
 8005afa:	609a      	str	r2, [r3, #8]
 8005afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4a2b      	ldr	r2, [pc, #172]	@ (8005bb8 <xTaskGenericNotifyFromISR+0x294>)
 8005b0a:	441a      	add	r2, r3
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b0e:	615a      	str	r2, [r3, #20]
 8005b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b14:	4928      	ldr	r1, [pc, #160]	@ (8005bb8 <xTaskGenericNotifyFromISR+0x294>)
 8005b16:	4613      	mov	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	4413      	add	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	440b      	add	r3, r1
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005b26:	1c59      	adds	r1, r3, #1
 8005b28:	4823      	ldr	r0, [pc, #140]	@ (8005bb8 <xTaskGenericNotifyFromISR+0x294>)
 8005b2a:	4613      	mov	r3, r2
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	4413      	add	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4403      	add	r3, r0
 8005b34:	6019      	str	r1, [r3, #0]
 8005b36:	e01b      	b.n	8005b70 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005b38:	4b20      	ldr	r3, [pc, #128]	@ (8005bbc <xTaskGenericNotifyFromISR+0x298>)
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b42:	61da      	str	r2, [r3, #28]
 8005b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b46:	689a      	ldr	r2, [r3, #8]
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	621a      	str	r2, [r3, #32]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b52:	3218      	adds	r2, #24
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	f103 0218 	add.w	r2, r3, #24
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	609a      	str	r2, [r3, #8]
 8005b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b62:	4a16      	ldr	r2, [pc, #88]	@ (8005bbc <xTaskGenericNotifyFromISR+0x298>)
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b66:	4b15      	ldr	r3, [pc, #84]	@ (8005bbc <xTaskGenericNotifyFromISR+0x298>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	4a13      	ldr	r2, [pc, #76]	@ (8005bbc <xTaskGenericNotifyFromISR+0x298>)
 8005b6e:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b74:	4b12      	ldr	r3, [pc, #72]	@ (8005bc0 <xTaskGenericNotifyFromISR+0x29c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	d908      	bls.n	8005b90 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d002      	beq.n	8005b8a <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b86:	2201      	movs	r2, #1
 8005b88:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc4 <xTaskGenericNotifyFromISR+0x2a0>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b92:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005b94:	693b      	ldr	r3, [r7, #16]
 8005b96:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005b9a:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8005b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3738      	adds	r7, #56	@ 0x38
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	08024160 	.word	0x08024160
 8005bac:	20000e88 	.word	0x20000e88
 8005bb0:	20000eac 	.word	0x20000eac
 8005bb4:	20000e8c 	.word	0x20000e8c
 8005bb8:	20000d88 	.word	0x20000d88
 8005bbc:	20000e44 	.word	0x20000e44
 8005bc0:	20000d84 	.word	0x20000d84
 8005bc4:	20000e98 	.word	0x20000e98

08005bc8 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08e      	sub	sp, #56	@ 0x38
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d104      	bne.n	8005be4 <vTaskGenericNotifyGiveFromISR+0x1c>
 8005bda:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 8005bde:	4871      	ldr	r0, [pc, #452]	@ (8005da4 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005be0:	f7fb feaa 	bl	8001938 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d004      	beq.n	8005bf4 <vTaskGenericNotifyGiveFromISR+0x2c>
 8005bea:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 8005bee:	486d      	ldr	r0, [pc, #436]	@ (8005da4 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005bf0:	f7fb fea2 	bl	8001938 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf4:	f000 fb6a 	bl	80062cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8005bfc:	f3ef 8211 	mrs	r2, BASEPRI
 8005c00:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005c04:	b672      	cpsid	i
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	b662      	cpsie	i
 8005c14:	61fa      	str	r2, [r7, #28]
 8005c16:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8005c18:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005c1a:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005c1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	4413      	add	r3, r2
 8005c22:	3368      	adds	r3, #104	@ 0x68
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005c2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3368      	adds	r3, #104	@ 0x68
 8005c32:	2202      	movs	r2, #2
 8005c34:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005c36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	3318      	adds	r3, #24
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	1c5a      	adds	r2, r3, #1
 8005c44:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	3318      	adds	r3, #24
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005c50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	f040 809a 	bne.w	8005d8e <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d004      	beq.n	8005c6c <vTaskGenericNotifyGiveFromISR+0xa4>
 8005c62:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8005c66:	484f      	ldr	r0, [pc, #316]	@ (8005da4 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005c68:	f7fb fe66 	bl	8001938 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005c6c:	4b4e      	ldr	r3, [pc, #312]	@ (8005da8 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d160      	bne.n	8005d36 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c80:	68d2      	ldr	r2, [r2, #12]
 8005c82:	609a      	str	r2, [r3, #8]
 8005c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c8a:	6892      	ldr	r2, [r2, #8]
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c94:	3304      	adds	r3, #4
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d103      	bne.n	8005ca2 <vTaskGenericNotifyGiveFromISR+0xda>
 8005c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	615a      	str	r2, [r3, #20]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	1e5a      	subs	r2, r3, #1
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	4b3c      	ldr	r3, [pc, #240]	@ (8005dac <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	4a3a      	ldr	r2, [pc, #232]	@ (8005dac <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cc8:	4939      	ldr	r1, [pc, #228]	@ (8005db0 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	440b      	add	r3, r1
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	623b      	str	r3, [r7, #32]
 8005cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cdc:	6a3a      	ldr	r2, [r7, #32]
 8005cde:	609a      	str	r2, [r3, #8]
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	689a      	ldr	r2, [r3, #8]
 8005ce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ce6:	60da      	str	r2, [r3, #12]
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cee:	3204      	adds	r2, #4
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf4:	1d1a      	adds	r2, r3, #4
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cfe:	4613      	mov	r3, r2
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	4a2a      	ldr	r2, [pc, #168]	@ (8005db0 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005d08:	441a      	add	r2, r3
 8005d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d0c:	615a      	str	r2, [r3, #20]
 8005d0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d12:	4927      	ldr	r1, [pc, #156]	@ (8005db0 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005d14:	4613      	mov	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d22:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d24:	1c59      	adds	r1, r3, #1
 8005d26:	4822      	ldr	r0, [pc, #136]	@ (8005db0 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4403      	add	r3, r0
 8005d32:	6019      	str	r1, [r3, #0]
 8005d34:	e01b      	b.n	8005d6e <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005d36:	4b1f      	ldr	r3, [pc, #124]	@ (8005db4 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d40:	61da      	str	r2, [r3, #28]
 8005d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d44:	689a      	ldr	r2, [r3, #8]
 8005d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d48:	621a      	str	r2, [r3, #32]
 8005d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d50:	3218      	adds	r2, #24
 8005d52:	605a      	str	r2, [r3, #4]
 8005d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d56:	f103 0218 	add.w	r2, r3, #24
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	609a      	str	r2, [r3, #8]
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d60:	4a14      	ldr	r2, [pc, #80]	@ (8005db4 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005d62:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d64:	4b13      	ldr	r3, [pc, #76]	@ (8005db4 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	4a12      	ldr	r2, [pc, #72]	@ (8005db4 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005d6c:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d72:	4b11      	ldr	r3, [pc, #68]	@ (8005db8 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d908      	bls.n	8005d8e <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8005d88:	4b0c      	ldr	r3, [pc, #48]	@ (8005dbc <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d90:	617b      	str	r3, [r7, #20]
    __asm volatile
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f383 8811 	msr	BASEPRI, r3
}
 8005d98:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8005d9a:	bf00      	nop
 8005d9c:	3738      	adds	r7, #56	@ 0x38
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	08024160 	.word	0x08024160
 8005da8:	20000eac 	.word	0x20000eac
 8005dac:	20000e8c 	.word	0x20000e8c
 8005db0:	20000d88 	.word	0x20000d88
 8005db4:	20000e44 	.word	0x20000e44
 8005db8:	20000d84 	.word	0x20000d84
 8005dbc:	20000e98 	.word	0x20000e98

08005dc0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005dca:	4b37      	ldr	r3, [pc, #220]	@ (8005ea8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8005dd0:	4b36      	ldr	r3, [pc, #216]	@ (8005eac <prvAddCurrentTaskToDelayedList+0xec>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8005dd6:	4b36      	ldr	r3, [pc, #216]	@ (8005eb0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ddc:	4b35      	ldr	r3, [pc, #212]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3304      	adds	r3, #4
 8005de2:	4618      	mov	r0, r3
 8005de4:	f7fd fade 	bl	80033a4 <uxListRemove>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d10b      	bne.n	8005e06 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005dee:	4b31      	ldr	r3, [pc, #196]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005df4:	2201      	movs	r2, #1
 8005df6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfa:	43da      	mvns	r2, r3
 8005dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8005eb8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4013      	ands	r3, r2
 8005e02:	4a2d      	ldr	r2, [pc, #180]	@ (8005eb8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005e04:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d124      	bne.n	8005e58 <prvAddCurrentTaskToDelayedList+0x98>
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d021      	beq.n	8005e58 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e14:	4b29      	ldr	r3, [pc, #164]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0xfc>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	613b      	str	r3, [r7, #16]
 8005e1a:	4b26      	ldr	r3, [pc, #152]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	609a      	str	r2, [r3, #8]
 8005e22:	4b24      	ldr	r3, [pc, #144]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	693a      	ldr	r2, [r7, #16]
 8005e28:	6892      	ldr	r2, [r2, #8]
 8005e2a:	60da      	str	r2, [r3, #12]
 8005e2c:	4b21      	ldr	r3, [pc, #132]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	3204      	adds	r2, #4
 8005e36:	605a      	str	r2, [r3, #4]
 8005e38:	4b1e      	ldr	r3, [pc, #120]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	1d1a      	adds	r2, r3, #4
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	609a      	str	r2, [r3, #8]
 8005e42:	4b1c      	ldr	r3, [pc, #112]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a1d      	ldr	r2, [pc, #116]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0xfc>)
 8005e48:	615a      	str	r2, [r3, #20]
 8005e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0xfc>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	4a1a      	ldr	r2, [pc, #104]	@ (8005ebc <prvAddCurrentTaskToDelayedList+0xfc>)
 8005e52:	6013      	str	r3, [r2, #0]
 8005e54:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005e56:	e022      	b.n	8005e9e <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005e58:	69fa      	ldr	r2, [r7, #28]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e60:	4b14      	ldr	r3, [pc, #80]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005e68:	68fa      	ldr	r2, [r7, #12]
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d207      	bcs.n	8005e80 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005e70:	4b10      	ldr	r3, [pc, #64]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3304      	adds	r3, #4
 8005e76:	4619      	mov	r1, r3
 8005e78:	6978      	ldr	r0, [r7, #20]
 8005e7a:	f7fd fa5a 	bl	8003332 <vListInsert>
}
 8005e7e:	e00e      	b.n	8005e9e <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005e80:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4619      	mov	r1, r3
 8005e88:	69b8      	ldr	r0, [r7, #24]
 8005e8a:	f7fd fa52 	bl	8003332 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x100>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d202      	bcs.n	8005e9e <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8005e98:	4a09      	ldr	r2, [pc, #36]	@ (8005ec0 <prvAddCurrentTaskToDelayedList+0x100>)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6013      	str	r3, [r2, #0]
}
 8005e9e:	bf00      	nop
 8005ea0:	3720      	adds	r7, #32
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000e88 	.word	0x20000e88
 8005eac:	20000e3c 	.word	0x20000e3c
 8005eb0:	20000e40 	.word	0x20000e40
 8005eb4:	20000d84 	.word	0x20000d84
 8005eb8:	20000e8c 	.word	0x20000e8c
 8005ebc:	20000e70 	.word	0x20000e70
 8005ec0:	20000ea4 	.word	0x20000ea4

08005ec4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b085      	sub	sp, #20
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	3b04      	subs	r3, #4
 8005ed4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005edc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	3b04      	subs	r3, #4
 8005ee2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	f023 0201 	bic.w	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	3b04      	subs	r3, #4
 8005ef2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005ef4:	4a0c      	ldr	r2, [pc, #48]	@ (8005f28 <pxPortInitialiseStack+0x64>)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3b14      	subs	r3, #20
 8005efe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3b04      	subs	r3, #4
 8005f0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f06f 0202 	mvn.w	r2, #2
 8005f12:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	3b20      	subs	r3, #32
 8005f18:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3714      	adds	r7, #20
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	08005f2d 	.word	0x08005f2d

08005f2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005f36:	4b0f      	ldr	r3, [pc, #60]	@ (8005f74 <prvTaskExitError+0x48>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3e:	d003      	beq.n	8005f48 <prvTaskExitError+0x1c>
 8005f40:	21ee      	movs	r1, #238	@ 0xee
 8005f42:	480d      	ldr	r0, [pc, #52]	@ (8005f78 <prvTaskExitError+0x4c>)
 8005f44:	f7fb fcf8 	bl	8001938 <vAssertCalled>
    __asm volatile
 8005f48:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005f4c:	b672      	cpsid	i
 8005f4e:	f383 8811 	msr	BASEPRI, r3
 8005f52:	f3bf 8f6f 	isb	sy
 8005f56:	f3bf 8f4f 	dsb	sy
 8005f5a:	b662      	cpsie	i
 8005f5c:	607b      	str	r3, [r7, #4]
}
 8005f5e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005f60:	bf00      	nop
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d0fc      	beq.n	8005f62 <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	2000000c 	.word	0x2000000c
 8005f78:	0802418c 	.word	0x0802418c
 8005f7c:	00000000 	.word	0x00000000

08005f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005f80:	4b07      	ldr	r3, [pc, #28]	@ (8005fa0 <pxCurrentTCBConst2>)
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	6808      	ldr	r0, [r1, #0]
 8005f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8a:	f380 8809 	msr	PSP, r0
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f04f 0000 	mov.w	r0, #0
 8005f96:	f380 8811 	msr	BASEPRI, r0
 8005f9a:	4770      	bx	lr
 8005f9c:	f3af 8000 	nop.w

08005fa0 <pxCurrentTCBConst2>:
 8005fa0:	20000d84 	.word	0x20000d84
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop

08005fa8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005fa8:	4808      	ldr	r0, [pc, #32]	@ (8005fcc <prvPortStartFirstTask+0x24>)
 8005faa:	6800      	ldr	r0, [r0, #0]
 8005fac:	6800      	ldr	r0, [r0, #0]
 8005fae:	f380 8808 	msr	MSP, r0
 8005fb2:	f04f 0000 	mov.w	r0, #0
 8005fb6:	f380 8814 	msr	CONTROL, r0
 8005fba:	b662      	cpsie	i
 8005fbc:	b661      	cpsie	f
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	df00      	svc	0
 8005fc8:	bf00      	nop
 8005fca:	0000      	.short	0x0000
 8005fcc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop

08005fd4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8005fda:	4b4a      	ldr	r3, [pc, #296]	@ (8006104 <xPortStartScheduler+0x130>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	332c      	adds	r3, #44	@ 0x2c
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a48      	ldr	r2, [pc, #288]	@ (8006108 <xPortStartScheduler+0x134>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d004      	beq.n	8005ff6 <xPortStartScheduler+0x22>
 8005fec:	f240 114b 	movw	r1, #331	@ 0x14b
 8005ff0:	4846      	ldr	r0, [pc, #280]	@ (800610c <xPortStartScheduler+0x138>)
 8005ff2:	f7fb fca1 	bl	8001938 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3338      	adds	r3, #56	@ 0x38
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a44      	ldr	r2, [pc, #272]	@ (8006110 <xPortStartScheduler+0x13c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d004      	beq.n	800600c <xPortStartScheduler+0x38>
 8006002:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8006006:	4841      	ldr	r0, [pc, #260]	@ (800610c <xPortStartScheduler+0x138>)
 8006008:	f7fb fc96 	bl	8001938 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006010:	4b40      	ldr	r3, [pc, #256]	@ (8006114 <xPortStartScheduler+0x140>)
 8006012:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	b2db      	uxtb	r3, r3
 800601a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	22ff      	movs	r2, #255	@ 0xff
 8006020:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	b2db      	uxtb	r3, r3
 8006028:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800602a:	79fb      	ldrb	r3, [r7, #7]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006032:	b2da      	uxtb	r2, r3
 8006034:	4b38      	ldr	r3, [pc, #224]	@ (8006118 <xPortStartScheduler+0x144>)
 8006036:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8006038:	4b37      	ldr	r3, [pc, #220]	@ (8006118 <xPortStartScheduler+0x144>)
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d104      	bne.n	800604a <xPortStartScheduler+0x76>
 8006040:	f240 116f 	movw	r1, #367	@ 0x16f
 8006044:	4831      	ldr	r0, [pc, #196]	@ (800610c <xPortStartScheduler+0x138>)
 8006046:	f7fb fc77 	bl	8001938 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800604a:	79fb      	ldrb	r3, [r7, #7]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	43db      	mvns	r3, r3
 8006050:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00d      	beq.n	8006074 <xPortStartScheduler+0xa0>
 8006058:	f240 1173 	movw	r1, #371	@ 0x173
 800605c:	482b      	ldr	r0, [pc, #172]	@ (800610c <xPortStartScheduler+0x138>)
 800605e:	f7fb fc6b 	bl	8001938 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006062:	e007      	b.n	8006074 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	3301      	adds	r3, #1
 8006068:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	b2db      	uxtb	r3, r3
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	b2db      	uxtb	r3, r3
 8006072:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006074:	79fb      	ldrb	r3, [r7, #7]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800607c:	2b80      	cmp	r3, #128	@ 0x80
 800607e:	d0f1      	beq.n	8006064 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2b08      	cmp	r3, #8
 8006084:	d103      	bne.n	800608e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8006086:	4b25      	ldr	r3, [pc, #148]	@ (800611c <xPortStartScheduler+0x148>)
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	e004      	b.n	8006098 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f1c3 0307 	rsb	r3, r3, #7
 8006094:	4a21      	ldr	r2, [pc, #132]	@ (800611c <xPortStartScheduler+0x148>)
 8006096:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006098:	4b20      	ldr	r3, [pc, #128]	@ (800611c <xPortStartScheduler+0x148>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	021b      	lsls	r3, r3, #8
 800609e:	4a1f      	ldr	r2, [pc, #124]	@ (800611c <xPortStartScheduler+0x148>)
 80060a0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80060a2:	4b1e      	ldr	r3, [pc, #120]	@ (800611c <xPortStartScheduler+0x148>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80060aa:	4a1c      	ldr	r2, [pc, #112]	@ (800611c <xPortStartScheduler+0x148>)
 80060ac:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80060b6:	4b1a      	ldr	r3, [pc, #104]	@ (8006120 <xPortStartScheduler+0x14c>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a19      	ldr	r2, [pc, #100]	@ (8006120 <xPortStartScheduler+0x14c>)
 80060bc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80060c2:	4b17      	ldr	r3, [pc, #92]	@ (8006120 <xPortStartScheduler+0x14c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a16      	ldr	r2, [pc, #88]	@ (8006120 <xPortStartScheduler+0x14c>)
 80060c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060cc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80060ce:	4b15      	ldr	r3, [pc, #84]	@ (8006124 <xPortStartScheduler+0x150>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80060d4:	f000 f8d4 	bl	8006280 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80060d8:	4b13      	ldr	r3, [pc, #76]	@ (8006128 <xPortStartScheduler+0x154>)
 80060da:	2200      	movs	r2, #0
 80060dc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80060de:	f000 f8e9 	bl	80062b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80060e2:	4b12      	ldr	r3, [pc, #72]	@ (800612c <xPortStartScheduler+0x158>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a11      	ldr	r2, [pc, #68]	@ (800612c <xPortStartScheduler+0x158>)
 80060e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80060ec:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80060ee:	f7ff ff5b 	bl	8005fa8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80060f2:	f7fe fbf5 	bl	80048e0 <vTaskSwitchContext>
    prvTaskExitError();
 80060f6:	f7ff ff19 	bl	8005f2c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	e000ed08 	.word	0xe000ed08
 8006108:	08005f81 	.word	0x08005f81
 800610c:	0802418c 	.word	0x0802418c
 8006110:	080061d1 	.word	0x080061d1
 8006114:	e000e400 	.word	0xe000e400
 8006118:	20000eb8 	.word	0x20000eb8
 800611c:	20000ebc 	.word	0x20000ebc
 8006120:	e000ed20 	.word	0xe000ed20
 8006124:	e000ed1c 	.word	0xe000ed1c
 8006128:	2000000c 	.word	0x2000000c
 800612c:	e000ef34 	.word	0xe000ef34

08006130 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b082      	sub	sp, #8
 8006134:	af00      	add	r7, sp, #0
    __asm volatile
 8006136:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800613a:	b672      	cpsid	i
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	b662      	cpsie	i
 800614a:	607b      	str	r3, [r7, #4]
}
 800614c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800614e:	4b0b      	ldr	r3, [pc, #44]	@ (800617c <vPortEnterCritical+0x4c>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3301      	adds	r3, #1
 8006154:	4a09      	ldr	r2, [pc, #36]	@ (800617c <vPortEnterCritical+0x4c>)
 8006156:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006158:	4b08      	ldr	r3, [pc, #32]	@ (800617c <vPortEnterCritical+0x4c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d109      	bne.n	8006174 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006160:	4b07      	ldr	r3, [pc, #28]	@ (8006180 <vPortEnterCritical+0x50>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <vPortEnterCritical+0x44>
 800616a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800616e:	4805      	ldr	r0, [pc, #20]	@ (8006184 <vPortEnterCritical+0x54>)
 8006170:	f7fb fbe2 	bl	8001938 <vAssertCalled>
    }
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	2000000c 	.word	0x2000000c
 8006180:	e000ed04 	.word	0xe000ed04
 8006184:	0802418c 	.word	0x0802418c

08006188 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800618e:	4b0e      	ldr	r3, [pc, #56]	@ (80061c8 <vPortExitCritical+0x40>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <vPortExitCritical+0x18>
 8006196:	f240 11e3 	movw	r1, #483	@ 0x1e3
 800619a:	480c      	ldr	r0, [pc, #48]	@ (80061cc <vPortExitCritical+0x44>)
 800619c:	f7fb fbcc 	bl	8001938 <vAssertCalled>
    uxCriticalNesting--;
 80061a0:	4b09      	ldr	r3, [pc, #36]	@ (80061c8 <vPortExitCritical+0x40>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	3b01      	subs	r3, #1
 80061a6:	4a08      	ldr	r2, [pc, #32]	@ (80061c8 <vPortExitCritical+0x40>)
 80061a8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80061aa:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <vPortExitCritical+0x40>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d105      	bne.n	80061be <vPortExitCritical+0x36>
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
    __asm volatile
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f383 8811 	msr	BASEPRI, r3
}
 80061bc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80061be:	bf00      	nop
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	2000000c 	.word	0x2000000c
 80061cc:	0802418c 	.word	0x0802418c

080061d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80061d0:	f3ef 8009 	mrs	r0, PSP
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <pxCurrentTCBConst>)
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	f01e 0f10 	tst.w	lr, #16
 80061e0:	bf08      	it	eq
 80061e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80061e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ea:	6010      	str	r0, [r2, #0]
 80061ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80061f0:	f04f 0040 	mov.w	r0, #64	@ 0x40
 80061f4:	b672      	cpsid	i
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	f3bf 8f4f 	dsb	sy
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	b662      	cpsie	i
 8006204:	f7fe fb6c 	bl	80048e0 <vTaskSwitchContext>
 8006208:	f04f 0000 	mov.w	r0, #0
 800620c:	f380 8811 	msr	BASEPRI, r0
 8006210:	bc09      	pop	{r0, r3}
 8006212:	6819      	ldr	r1, [r3, #0]
 8006214:	6808      	ldr	r0, [r1, #0]
 8006216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621a:	f01e 0f10 	tst.w	lr, #16
 800621e:	bf08      	it	eq
 8006220:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006224:	f380 8809 	msr	PSP, r0
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop

08006230 <pxCurrentTCBConst>:
 8006230:	20000d84 	.word	0x20000d84
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop

08006238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
    __asm volatile
 800623e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8006242:	b672      	cpsid	i
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	b662      	cpsie	i
 8006252:	607b      	str	r3, [r7, #4]
}
 8006254:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006256:	f7fe fa2f 	bl	80046b8 <xTaskIncrementTick>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d003      	beq.n	8006268 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006260:	4b06      	ldr	r3, [pc, #24]	@ (800627c <xPortSysTickHandler+0x44>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	2300      	movs	r3, #0
 800626a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	f383 8811 	msr	BASEPRI, r3
}
 8006272:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	e000ed04 	.word	0xe000ed04

08006280 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006284:	4b08      	ldr	r3, [pc, #32]	@ (80062a8 <vPortSetupTimerInterrupt+0x28>)
 8006286:	2200      	movs	r2, #0
 8006288:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800628a:	4b08      	ldr	r3, [pc, #32]	@ (80062ac <vPortSetupTimerInterrupt+0x2c>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006290:	4b07      	ldr	r3, [pc, #28]	@ (80062b0 <vPortSetupTimerInterrupt+0x30>)
 8006292:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8006296:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006298:	4b03      	ldr	r3, [pc, #12]	@ (80062a8 <vPortSetupTimerInterrupt+0x28>)
 800629a:	2203      	movs	r2, #3
 800629c:	601a      	str	r2, [r3, #0]
}
 800629e:	bf00      	nop
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	e000e010 	.word	0xe000e010
 80062ac:	e000e018 	.word	0xe000e018
 80062b0:	e000e014 	.word	0xe000e014

080062b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80062b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80062c4 <vPortEnableVFP+0x10>
 80062b8:	6801      	ldr	r1, [r0, #0]
 80062ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80062be:	6001      	str	r1, [r0, #0]
 80062c0:	4770      	bx	lr
 80062c2:	0000      	.short	0x0000
 80062c4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop

080062cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b082      	sub	sp, #8
 80062d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80062d2:	f3ef 8305 	mrs	r3, IPSR
 80062d6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2b0f      	cmp	r3, #15
 80062dc:	d90e      	bls.n	80062fc <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80062de:	4a10      	ldr	r2, [pc, #64]	@ (8006320 <vPortValidateInterruptPriority+0x54>)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	4413      	add	r3, r2
 80062e4:	781b      	ldrb	r3, [r3, #0]
 80062e6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80062e8:	4b0e      	ldr	r3, [pc, #56]	@ (8006324 <vPortValidateInterruptPriority+0x58>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	429a      	cmp	r2, r3
 80062f0:	d204      	bcs.n	80062fc <vPortValidateInterruptPriority+0x30>
 80062f2:	f44f 715c 	mov.w	r1, #880	@ 0x370
 80062f6:	480c      	ldr	r0, [pc, #48]	@ (8006328 <vPortValidateInterruptPriority+0x5c>)
 80062f8:	f7fb fb1e 	bl	8001938 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80062fc:	4b0b      	ldr	r3, [pc, #44]	@ (800632c <vPortValidateInterruptPriority+0x60>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006304:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <vPortValidateInterruptPriority+0x64>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	429a      	cmp	r2, r3
 800630a:	d904      	bls.n	8006316 <vPortValidateInterruptPriority+0x4a>
 800630c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8006310:	4805      	ldr	r0, [pc, #20]	@ (8006328 <vPortValidateInterruptPriority+0x5c>)
 8006312:	f7fb fb11 	bl	8001938 <vAssertCalled>
    }
 8006316:	bf00      	nop
 8006318:	3708      	adds	r7, #8
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	e000e3f0 	.word	0xe000e3f0
 8006324:	20000eb8 	.word	0x20000eb8
 8006328:	0802418c 	.word	0x0802418c
 800632c:	e000ed0c 	.word	0xe000ed0c
 8006330:	20000ebc 	.word	0x20000ebc

08006334 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8006340:	4b60      	ldr	r3, [pc, #384]	@ (80064c4 <pvPortMalloc+0x190>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d103      	bne.n	8006350 <pvPortMalloc+0x1c>
 8006348:	21da      	movs	r1, #218	@ 0xda
 800634a:	485f      	ldr	r0, [pc, #380]	@ (80064c8 <pvPortMalloc+0x194>)
 800634c:	f7fb faf4 	bl	8001938 <vAssertCalled>

    if( xWantedSize > 0 )
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d022      	beq.n	800639c <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8006356:	2308      	movs	r3, #8
 8006358:	43db      	mvns	r3, r3
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	d81b      	bhi.n	8006398 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8006360:	2208      	movs	r2, #8
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4413      	add	r3, r2
 8006366:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	2b00      	cmp	r3, #0
 8006370:	d014      	beq.n	800639c <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f003 0307 	and.w	r3, r3, #7
 8006378:	f1c3 0308 	rsb	r3, r3, #8
 800637c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	43db      	mvns	r3, r3
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	429a      	cmp	r2, r3
 8006386:	d804      	bhi.n	8006392 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4413      	add	r3, r2
 800638e:	607b      	str	r3, [r7, #4]
 8006390:	e004      	b.n	800639c <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 8006392:	2300      	movs	r3, #0
 8006394:	607b      	str	r3, [r7, #4]
 8006396:	e001      	b.n	800639c <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8006398:	2300      	movs	r3, #0
 800639a:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 800639c:	f7fe f84c 	bl	8004438 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	db78      	blt.n	8006498 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d075      	beq.n	8006498 <pvPortMalloc+0x164>
 80063ac:	4b47      	ldr	r3, [pc, #284]	@ (80064cc <pvPortMalloc+0x198>)
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d870      	bhi.n	8006498 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80063b6:	4b46      	ldr	r3, [pc, #280]	@ (80064d0 <pvPortMalloc+0x19c>)
 80063b8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80063ba:	4b45      	ldr	r3, [pc, #276]	@ (80064d0 <pvPortMalloc+0x19c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80063c0:	e004      	b.n	80063cc <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d903      	bls.n	80063de <pvPortMalloc+0xaa>
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f1      	bne.n	80063c2 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80063de:	4b39      	ldr	r3, [pc, #228]	@ (80064c4 <pvPortMalloc+0x190>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d057      	beq.n	8006498 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2208      	movs	r2, #8
 80063ee:	4413      	add	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	681a      	ldr	r2, [r3, #0]
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	429a      	cmp	r2, r3
 8006402:	d904      	bls.n	800640e <pvPortMalloc+0xda>
 8006404:	f240 1129 	movw	r1, #297	@ 0x129
 8006408:	482f      	ldr	r0, [pc, #188]	@ (80064c8 <pvPortMalloc+0x194>)
 800640a:	f7fb fa95 	bl	8001938 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	685a      	ldr	r2, [r3, #4]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	1ad2      	subs	r2, r2, r3
 8006416:	2308      	movs	r3, #8
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	d91d      	bls.n	800645a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800641e:	69fa      	ldr	r2, [r7, #28]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	4413      	add	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0307 	and.w	r3, r3, #7
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <pvPortMalloc+0x106>
 8006430:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8006434:	4824      	ldr	r0, [pc, #144]	@ (80064c8 <pvPortMalloc+0x194>)
 8006436:	f7fb fa7f 	bl	8001938 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	685a      	ldr	r2, [r3, #4]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	1ad2      	subs	r2, r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006446:	69fb      	ldr	r3, [r7, #28]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800645a:	4b1c      	ldr	r3, [pc, #112]	@ (80064cc <pvPortMalloc+0x198>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	4a19      	ldr	r2, [pc, #100]	@ (80064cc <pvPortMalloc+0x198>)
 8006466:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006468:	4b18      	ldr	r3, [pc, #96]	@ (80064cc <pvPortMalloc+0x198>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b19      	ldr	r3, [pc, #100]	@ (80064d4 <pvPortMalloc+0x1a0>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	429a      	cmp	r2, r3
 8006472:	d203      	bcs.n	800647c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006474:	4b15      	ldr	r3, [pc, #84]	@ (80064cc <pvPortMalloc+0x198>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a16      	ldr	r2, [pc, #88]	@ (80064d4 <pvPortMalloc+0x1a0>)
 800647a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006488:	69fb      	ldr	r3, [r7, #28]
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800648e:	4b12      	ldr	r3, [pc, #72]	@ (80064d8 <pvPortMalloc+0x1a4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	4a10      	ldr	r2, [pc, #64]	@ (80064d8 <pvPortMalloc+0x1a4>)
 8006496:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006498:	f7fd ffdc 	bl	8004454 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d101      	bne.n	80064a6 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 80064a2:	f7fb fa5d 	bl	8001960 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d004      	beq.n	80064ba <pvPortMalloc+0x186>
 80064b0:	f240 1173 	movw	r1, #371	@ 0x173
 80064b4:	4804      	ldr	r0, [pc, #16]	@ (80064c8 <pvPortMalloc+0x194>)
 80064b6:	f7fb fa3f 	bl	8001938 <vAssertCalled>
    return pvReturn;
 80064ba:	697b      	ldr	r3, [r7, #20]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	20000ec8 	.word	0x20000ec8
 80064c8:	080241c8 	.word	0x080241c8
 80064cc:	20000ecc 	.word	0x20000ecc
 80064d0:	20000ec0 	.word	0x20000ec0
 80064d4:	20000ed0 	.word	0x20000ed0
 80064d8:	20000ed4 	.word	0x20000ed4

080064dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d03d      	beq.n	800656a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80064ee:	2308      	movs	r3, #8
 80064f0:	425b      	negs	r3, r3
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	4413      	add	r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	2b00      	cmp	r3, #0
 8006502:	db04      	blt.n	800650e <vPortFree+0x32>
 8006504:	f240 1187 	movw	r1, #391	@ 0x187
 8006508:	481a      	ldr	r0, [pc, #104]	@ (8006574 <vPortFree+0x98>)
 800650a:	f7fb fa15 	bl	8001938 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d004      	beq.n	8006520 <vPortFree+0x44>
 8006516:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800651a:	4816      	ldr	r0, [pc, #88]	@ (8006574 <vPortFree+0x98>)
 800651c:	f7fb fa0c 	bl	8001938 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	0fdb      	lsrs	r3, r3, #31
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	b2db      	uxtb	r3, r3
 800652c:	2b00      	cmp	r3, #0
 800652e:	d01c      	beq.n	800656a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d118      	bne.n	800656a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8006544:	f7fd ff78 	bl	8004438 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	4b0a      	ldr	r3, [pc, #40]	@ (8006578 <vPortFree+0x9c>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4413      	add	r3, r2
 8006552:	4a09      	ldr	r2, [pc, #36]	@ (8006578 <vPortFree+0x9c>)
 8006554:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006556:	68b8      	ldr	r0, [r7, #8]
 8006558:	f000 f82a 	bl	80065b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800655c:	4b07      	ldr	r3, [pc, #28]	@ (800657c <vPortFree+0xa0>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	3301      	adds	r3, #1
 8006562:	4a06      	ldr	r2, [pc, #24]	@ (800657c <vPortFree+0xa0>)
 8006564:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8006566:	f7fd ff75 	bl	8004454 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800656a:	bf00      	nop
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	080241c8 	.word	0x080241c8
 8006578:	20000ecc 	.word	0x20000ecc
 800657c:	20000ed8 	.word	0x20000ed8

08006580 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8006580:	b480      	push	{r7}
 8006582:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8006584:	4b03      	ldr	r3, [pc, #12]	@ (8006594 <xPortGetFreeHeapSize+0x14>)
 8006586:	681b      	ldr	r3, [r3, #0]
}
 8006588:	4618      	mov	r0, r3
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	20000ecc 	.word	0x20000ecc

08006598 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 800659c:	4b03      	ldr	r3, [pc, #12]	@ (80065ac <xPortGetMinimumEverFreeHeapSize+0x14>)
 800659e:	681b      	ldr	r3, [r3, #0]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	20000ed0 	.word	0x20000ed0

080065b0 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80065b8:	4b28      	ldr	r3, [pc, #160]	@ (800665c <prvInsertBlockIntoFreeList+0xac>)
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e002      	b.n	80065c4 <prvInsertBlockIntoFreeList+0x14>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d8f7      	bhi.n	80065be <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	4413      	add	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d108      	bne.n	80065f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	441a      	add	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	441a      	add	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d118      	bne.n	8006638 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <prvInsertBlockIntoFreeList+0xb0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d00d      	beq.n	800662e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e008      	b.n	8006640 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800662e:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <prvInsertBlockIntoFreeList+0xb0>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e003      	b.n	8006640 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d002      	beq.n	800664e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000ec0 	.word	0x20000ec0
 8006660:	20000ec8 	.word	0x20000ec8

08006664 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b08a      	sub	sp, #40	@ 0x28
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8006670:	2300      	movs	r3, #0
 8006672:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8006678:	4b4b      	ldr	r3, [pc, #300]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <vPortDefineHeapRegions+0x26>
 8006680:	f240 2121 	movw	r1, #545	@ 0x221
 8006684:	4849      	ldr	r0, [pc, #292]	@ (80067ac <vPortDefineHeapRegions+0x148>)
 8006686:	f7fb f957 	bl	8001938 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	4413      	add	r3, r2
 8006692:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8006694:	e071      	b.n	800677a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	f003 0307 	and.w	r3, r3, #7
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00e      	beq.n	80066ca <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	3307      	adds	r3, #7
 80066b0:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 80066b2:	69bb      	ldr	r3, [r7, #24]
 80066b4:	f023 0307 	bic.w	r3, r3, #7
 80066b8:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	461a      	mov	r2, r3
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066c6:	4413      	add	r3, r2
 80066c8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4a36      	ldr	r2, [pc, #216]	@ (80067b0 <vPortDefineHeapRegions+0x14c>)
 80066d8:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 80066da:	4b35      	ldr	r3, [pc, #212]	@ (80067b0 <vPortDefineHeapRegions+0x14c>)
 80066dc:	2200      	movs	r2, #0
 80066de:	605a      	str	r2, [r3, #4]
 80066e0:	e013      	b.n	800670a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 80066e2:	4b31      	ldr	r3, [pc, #196]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d104      	bne.n	80066f4 <vPortDefineHeapRegions+0x90>
 80066ea:	f240 2149 	movw	r1, #585	@ 0x249
 80066ee:	482f      	ldr	r0, [pc, #188]	@ (80067ac <vPortDefineHeapRegions+0x148>)
 80066f0:	f7fb f922 	bl	8001938 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 80066f4:	4b2c      	ldr	r3, [pc, #176]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	461a      	mov	r2, r3
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d804      	bhi.n	800670a <vPortDefineHeapRegions+0xa6>
 8006700:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8006704:	4829      	ldr	r0, [pc, #164]	@ (80067ac <vPortDefineHeapRegions+0x148>)
 8006706:	f7fb f917 	bl	8001938 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 800670a:	4b27      	ldr	r3, [pc, #156]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006714:	4413      	add	r3, r2
 8006716:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8006718:	2208      	movs	r2, #8
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f023 0307 	bic.w	r3, r3, #7
 8006726:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	4a1f      	ldr	r2, [pc, #124]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 800672c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 800672e:	4b1e      	ldr	r3, [pc, #120]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	2200      	movs	r2, #0
 8006734:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8006736:	4b1c      	ldr	r3, [pc, #112]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	69ba      	ldr	r2, [r7, #24]
 8006746:	1ad2      	subs	r2, r2, r3
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800674c:	4b16      	ldr	r3, [pc, #88]	@ (80067a8 <vPortDefineHeapRegions+0x144>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d002      	beq.n	8006760 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	693a      	ldr	r2, [r7, #16]
 800675e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	6a3a      	ldr	r2, [r7, #32]
 8006766:	4413      	add	r3, r2
 8006768:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	3301      	adds	r3, #1
 800676e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	687a      	ldr	r2, [r7, #4]
 8006776:	4413      	add	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d189      	bne.n	8006696 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8006782:	4a0c      	ldr	r2, [pc, #48]	@ (80067b4 <vPortDefineHeapRegions+0x150>)
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8006788:	4a0b      	ldr	r2, [pc, #44]	@ (80067b8 <vPortDefineHeapRegions+0x154>)
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 800678e:	6a3b      	ldr	r3, [r7, #32]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d104      	bne.n	800679e <vPortDefineHeapRegions+0x13a>
 8006794:	f240 2189 	movw	r1, #649	@ 0x289
 8006798:	4804      	ldr	r0, [pc, #16]	@ (80067ac <vPortDefineHeapRegions+0x148>)
 800679a:	f7fb f8cd 	bl	8001938 <vAssertCalled>
}
 800679e:	bf00      	nop
 80067a0:	3728      	adds	r7, #40	@ 0x28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000ec8 	.word	0x20000ec8
 80067ac:	080241c8 	.word	0x080241c8
 80067b0:	20000ec0 	.word	0x20000ec0
 80067b4:	20000ed0 	.word	0x20000ed0
 80067b8:	20000ecc 	.word	0x20000ecc

080067bc <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80067bc:	b580      	push	{r7, lr}
 80067be:	b090      	sub	sp, #64	@ 0x40
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c8:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80067ca:	2300      	movs	r3, #0
 80067cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067d4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 80067d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067d8:	330e      	adds	r3, #14
 80067da:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80067dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067de:	881b      	ldrh	r3, [r3, #0]
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067e6:	f040 81bb 	bne.w	8006b60 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80067ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ec:	885b      	ldrh	r3, [r3, #2]
 80067ee:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80067f0:	2b08      	cmp	r3, #8
 80067f2:	f040 81b5 	bne.w	8006b60 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80067fa:	2b06      	cmp	r3, #6
 80067fc:	f040 81b0 	bne.w	8006b60 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8006804:	2b04      	cmp	r3, #4
 8006806:	f040 81ab 	bne.w	8006b60 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 800680a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800680c:	330e      	adds	r3, #14
 800680e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8006810:	f107 0320 	add.w	r3, r7, #32
 8006814:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8006816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	461a      	mov	r2, r3
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	699b      	ldr	r3, [r3, #24]
 8006824:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8006826:	4b9c      	ldr	r3, [pc, #624]	@ (8006a98 <eARPProcessPacket+0x2dc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 800682e:	499b      	ldr	r1, [pc, #620]	@ (8006a9c <eARPProcessPacket+0x2e0>)
 8006830:	489b      	ldr	r0, [pc, #620]	@ (8006aa0 <eARPProcessPacket+0x2e4>)
 8006832:	f7fe faf5 	bl	8004e20 <xTaskCheckForTimeOut>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d102      	bne.n	8006842 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 800683c:	4b96      	ldr	r3, [pc, #600]	@ (8006a98 <eARPProcessPacket+0x2dc>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	7a1b      	ldrb	r3, [r3, #8]
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	2b00      	cmp	r3, #0
 800684c:	f040 8188 	bne.w	8006b60 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006850:	6a3b      	ldr	r3, [r7, #32]
 8006852:	061a      	lsls	r2, r3, #24
 8006854:	6a3b      	ldr	r3, [r7, #32]
 8006856:	021b      	lsls	r3, r3, #8
 8006858:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800685c:	431a      	orrs	r2, r3
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	0a1b      	lsrs	r3, r3, #8
 8006862:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006866:	431a      	orrs	r2, r3
 8006868:	6a3b      	ldr	r3, [r7, #32]
 800686a:	0e1b      	lsrs	r3, r3, #24
 800686c:	4313      	orrs	r3, r2
 800686e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006872:	d311      	bcc.n	8006898 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8006874:	6a3b      	ldr	r3, [r7, #32]
 8006876:	061a      	lsls	r2, r3, #24
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	021b      	lsls	r3, r3, #8
 800687c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006880:	431a      	orrs	r2, r3
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	0a1b      	lsrs	r3, r3, #8
 8006886:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800688a:	431a      	orrs	r2, r3
 800688c:	6a3b      	ldr	r3, [r7, #32]
 800688e:	0e1b      	lsrs	r3, r3, #24
 8006890:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8006892:	2b00      	cmp	r3, #0
 8006894:	f280 8164 	bge.w	8006b60 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8006898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800689a:	2b00      	cmp	r3, #0
 800689c:	d021      	beq.n	80068e2 <eARPProcessPacket+0x126>
 800689e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d11c      	bne.n	80068e2 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80068a8:	4b7b      	ldr	r3, [pc, #492]	@ (8006a98 <eARPProcessPacket+0x2dc>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f040 8157 	bne.w	8006b60 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 80068b2:	4b79      	ldr	r3, [pc, #484]	@ (8006a98 <eARPProcessPacket+0x2dc>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3301      	adds	r3, #1
 80068b8:	4a77      	ldr	r2, [pc, #476]	@ (8006a98 <eARPProcessPacket+0x2dc>)
 80068ba:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80068bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4619      	mov	r1, r3
 80068c2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80068c4:	f000 fe32 	bl	800752c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 80068c8:	f7fd fec8 	bl	800465c <xTaskGetTickCount>
 80068cc:	4603      	mov	r3, r0
 80068ce:	4a75      	ldr	r2, [pc, #468]	@ (8006aa4 <eARPProcessPacket+0x2e8>)
 80068d0:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 80068d2:	4873      	ldr	r0, [pc, #460]	@ (8006aa0 <eARPProcessPacket+0x2e4>)
 80068d4:	f7fe fa6c 	bl	8004db0 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 80068d8:	4b70      	ldr	r3, [pc, #448]	@ (8006a9c <eARPProcessPacket+0x2e0>)
 80068da:	f242 7210 	movw	r2, #10000	@ 0x2710
 80068de:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 80068e0:	e13e      	b.n	8006b60 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 80068e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e4:	88db      	ldrh	r3, [r3, #6]
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068ec:	d14a      	bne.n	8006984 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	061a      	lsls	r2, r3, #24
 80068f2:	6a3b      	ldr	r3, [r7, #32]
 80068f4:	021b      	lsls	r3, r3, #8
 80068f6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068fa:	431a      	orrs	r2, r3
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	0a1b      	lsrs	r3, r3, #8
 8006900:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006904:	431a      	orrs	r2, r3
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	0e1b      	lsrs	r3, r3, #24
 800690a:	ea42 0103 	orr.w	r1, r2, r3
 800690e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006910:	061a      	lsls	r2, r3, #24
 8006912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006914:	021b      	lsls	r3, r3, #8
 8006916:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800691a:	431a      	orrs	r2, r3
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	0a1b      	lsrs	r3, r3, #8
 8006920:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006924:	431a      	orrs	r2, r3
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006928:	0e1b      	lsrs	r3, r3, #24
 800692a:	ea42 0003 	orr.w	r0, r2, r3
 800692e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <eARPProcessPacket+0x180>
 8006934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	061a      	lsls	r2, r3, #24
 800693a:	e000      	b.n	800693e <eARPProcessPacket+0x182>
 800693c:	2200      	movs	r2, #0
 800693e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006940:	2b00      	cmp	r3, #0
 8006942:	d005      	beq.n	8006950 <eARPProcessPacket+0x194>
 8006944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800694e:	e000      	b.n	8006952 <eARPProcessPacket+0x196>
 8006950:	2300      	movs	r3, #0
 8006952:	431a      	orrs	r2, r3
 8006954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <eARPProcessPacket+0x1aa>
 800695a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	0a1b      	lsrs	r3, r3, #8
 8006960:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006964:	e000      	b.n	8006968 <eARPProcessPacket+0x1ac>
 8006966:	2300      	movs	r3, #0
 8006968:	431a      	orrs	r2, r3
 800696a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800696c:	2b00      	cmp	r3, #0
 800696e:	d003      	beq.n	8006978 <eARPProcessPacket+0x1bc>
 8006970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	0e1b      	lsrs	r3, r3, #24
 8006976:	e000      	b.n	800697a <eARPProcessPacket+0x1be>
 8006978:	2300      	movs	r3, #0
 800697a:	4313      	orrs	r3, r2
 800697c:	4602      	mov	r2, r0
 800697e:	484a      	ldr	r0, [pc, #296]	@ (8006aa8 <eARPProcessPacket+0x2ec>)
 8006980:	f01b faba 	bl	8021ef8 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006986:	88db      	ldrh	r3, [r3, #6]
 8006988:	b29b      	uxth	r3, r3
 800698a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800698e:	d151      	bne.n	8006a34 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006990:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8006992:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006994:	429a      	cmp	r2, r3
 8006996:	d04d      	beq.n	8006a34 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8006998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800699a:	2b00      	cmp	r3, #0
 800699c:	d04a      	beq.n	8006a34 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	061a      	lsls	r2, r3, #24
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	021b      	lsls	r3, r3, #8
 80069a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069aa:	431a      	orrs	r2, r3
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	0a1b      	lsrs	r3, r3, #8
 80069b0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80069b4:	431a      	orrs	r2, r3
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	0e1b      	lsrs	r3, r3, #24
 80069ba:	ea42 0103 	orr.w	r1, r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c0:	061a      	lsls	r2, r3, #24
 80069c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069ca:	431a      	orrs	r2, r3
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	0a1b      	lsrs	r3, r3, #8
 80069d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80069d4:	431a      	orrs	r2, r3
 80069d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d8:	0e1b      	lsrs	r3, r3, #24
 80069da:	ea42 0003 	orr.w	r0, r2, r3
 80069de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <eARPProcessPacket+0x230>
 80069e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	061a      	lsls	r2, r3, #24
 80069ea:	e000      	b.n	80069ee <eARPProcessPacket+0x232>
 80069ec:	2200      	movs	r2, #0
 80069ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <eARPProcessPacket+0x244>
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	021b      	lsls	r3, r3, #8
 80069fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069fe:	e000      	b.n	8006a02 <eARPProcessPacket+0x246>
 8006a00:	2300      	movs	r3, #0
 8006a02:	431a      	orrs	r2, r3
 8006a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <eARPProcessPacket+0x25a>
 8006a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	0a1b      	lsrs	r3, r3, #8
 8006a10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006a14:	e000      	b.n	8006a18 <eARPProcessPacket+0x25c>
 8006a16:	2300      	movs	r3, #0
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <eARPProcessPacket+0x26c>
 8006a20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	0e1b      	lsrs	r3, r3, #24
 8006a26:	e000      	b.n	8006a2a <eARPProcessPacket+0x26e>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	481f      	ldr	r0, [pc, #124]	@ (8006aac <eARPProcessPacket+0x2f0>)
 8006a30:	f01b fa62 	bl	8021ef8 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8006a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 8092 	beq.w	8006b60 <eARPProcessPacket+0x3a4>
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a3e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8089 	beq.w	8006b60 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 8006a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a50:	88db      	ldrh	r3, [r3, #6]
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006a58:	d003      	beq.n	8006a62 <eARPProcessPacket+0x2a6>
 8006a5a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006a5e:	d077      	beq.n	8006b50 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006a60:	e07e      	b.n	8006b60 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d121      	bne.n	8006ab0 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006a6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006a76:	2206      	movs	r2, #6
 8006a78:	4619      	mov	r1, r3
 8006a7a:	f01c fbee 	bl	802325a <memcmp>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d06c      	beq.n	8006b5e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	461a      	mov	r2, r3
 8006a88:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006a8a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006a8c:	f000 f872 	bl	8006b74 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8006a90:	2302      	movs	r3, #2
 8006a92:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8006a96:	e062      	b.n	8006b5e <eARPProcessPacket+0x3a2>
 8006a98:	20000f40 	.word	0x20000f40
 8006a9c:	20000010 	.word	0x20000010
 8006aa0:	20000f44 	.word	0x20000f44
 8006aa4:	20000f3c 	.word	0x20000f3c
 8006aa8:	08024200 	.word	0x08024200
 8006aac:	08024230 	.word	0x08024230
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006ab0:	6a3b      	ldr	r3, [r7, #32]
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d152      	bne.n	8006b5e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	405a      	eors	r2, r3
 8006ac0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d149      	bne.n	8006b5e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 8006aca:	4a28      	ldr	r2, [pc, #160]	@ (8006b6c <eARPProcessPacket+0x3b0>)
 8006acc:	f107 0318 	add.w	r3, r7, #24
 8006ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ad4:	6018      	str	r0, [r3, #0]
 8006ad6:	3304      	adds	r3, #4
 8006ad8:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	3312      	adds	r3, #18
 8006ade:	2206      	movs	r2, #6
 8006ae0:	4923      	ldr	r1, [pc, #140]	@ (8006b70 <eARPProcessPacket+0x3b4>)
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f01c fbb9 	bl	802325a <memcmp>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d00a      	beq.n	8006b04 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8006aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af0:	3312      	adds	r3, #18
 8006af2:	f107 0118 	add.w	r1, r7, #24
 8006af6:	2206      	movs	r2, #6
 8006af8:	4618      	mov	r0, r3
 8006afa:	f01c fbae 	bl	802325a <memcmp>
 8006afe:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d12c      	bne.n	8006b5e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8006b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b06:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b0c:	3308      	adds	r3, #8
 8006b0e:	2206      	movs	r2, #6
 8006b10:	4619      	mov	r1, r3
 8006b12:	f01c fba2 	bl	802325a <memcmp>
 8006b16:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d020      	beq.n	8006b5e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8006b20:	f107 020c 	add.w	r2, r7, #12
 8006b24:	f107 0110 	add.w	r1, r7, #16
 8006b28:	f107 0320 	add.w	r3, r7, #32
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fb11 	bl	8007154 <eARPGetCacheEntry>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d112      	bne.n	8006b5e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d10e      	bne.n	8006b5e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b42:	3308      	adds	r3, #8
 8006b44:	6a39      	ldr	r1, [r7, #32]
 8006b46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b48:	4618      	mov	r0, r3
 8006b4a:	f000 f9ef 	bl	8006f2c <vARPRefreshCacheEntry>
                            break;
 8006b4e:	e006      	b.n	8006b5e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006b50:	6a3b      	ldr	r3, [r7, #32]
 8006b52:	461a      	mov	r2, r3
 8006b54:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006b56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b58:	f000 f84a 	bl	8006bf0 <vARPProcessPacketReply>
                            break;
 8006b5c:	e000      	b.n	8006b60 <eARPProcessPacket+0x3a4>
                            break;
 8006b5e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8006b60:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8006b64:	4618      	mov	r0, r3
 8006b66:	3740      	adds	r7, #64	@ 0x40
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	08024260 	.word	0x08024260
 8006b70:	080275a4 	.word	0x080275a4

08006b74 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b088      	sub	sp, #32
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	60f8      	str	r0, [r7, #12]
 8006b7c:	60b9      	str	r1, [r7, #8]
 8006b7e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	330e      	adds	r3, #14
 8006b84:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006b86:	69fb      	ldr	r3, [r7, #28]
 8006b88:	3308      	adds	r3, #8
 8006b8a:	68ba      	ldr	r2, [r7, #8]
 8006b8c:	6879      	ldr	r1, [r7, #4]
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f000 f9cc 	bl	8006f2c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	2200      	movs	r2, #0
 8006b98:	719a      	strb	r2, [r3, #6]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f042 0202 	orr.w	r2, r2, #2
 8006ba0:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	3308      	adds	r3, #8
 8006ba6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	3312      	adds	r3, #18
 8006bac:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8006bae:	2206      	movs	r2, #6
 8006bb0:	69b9      	ldr	r1, [r7, #24]
 8006bb2:	6978      	ldr	r0, [r7, #20]
 8006bb4:	f01b fbbc 	bl	8022330 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	687a      	ldr	r2, [r7, #4]
 8006bbc:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	33e8      	adds	r3, #232	@ 0xe8
 8006bc2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	3308      	adds	r3, #8
 8006bc8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8006bca:	2206      	movs	r2, #6
 8006bcc:	69b9      	ldr	r1, [r7, #24]
 8006bce:	6978      	ldr	r0, [r7, #20]
 8006bd0:	f01b fbae 	bl	8022330 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	330e      	adds	r3, #14
 8006bdc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	601a      	str	r2, [r3, #0]
    }
 8006be8:	bf00      	nop
 8006bea:	3720      	adds	r7, #32
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b08c      	sub	sp, #48	@ 0x30
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	330e      	adds	r3, #14
 8006c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006c02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d005      	beq.n	8006c1e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f844 	bl	8006ca0 <xIsIPInARPCache>
 8006c18:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d106      	bne.n	8006c2c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c20:	3308      	adds	r3, #8
 8006c22:	68ba      	ldr	r2, [r7, #8]
 8006c24:	6879      	ldr	r1, [r7, #4]
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f980 	bl	8006f2c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006c9c <vARPProcessPacketReply+0xac>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02e      	beq.n	8006c92 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8006c34:	4b19      	ldr	r3, [pc, #100]	@ (8006c9c <vARPProcessPacketReply+0xac>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f003 f8a5 	bl	8009d88 <uxIPHeaderSizePacket>
 8006c3e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8006c40:	2b14      	cmp	r3, #20
 8006c42:	d126      	bne.n	8006c92 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8006c44:	4b15      	ldr	r3, [pc, #84]	@ (8006c9c <vARPProcessPacketReply+0xac>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	330e      	adds	r3, #14
 8006c50:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	687a      	ldr	r2, [r7, #4]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d11a      	bne.n	8006c92 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8006c60:	2301      	movs	r3, #1
 8006c62:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8006c64:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <vARPProcessPacketReply+0xac>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 8006c6a:	f107 0314 	add.w	r3, r7, #20
 8006c6e:	69f9      	ldr	r1, [r7, #28]
 8006c70:	4618      	mov	r0, r3
 8006c72:	f002 fcd5 	bl	8009620 <xSendEventStructToIPTask>
 8006c76:	4603      	mov	r3, r0
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d004      	beq.n	8006c86 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8006c7c:	4b07      	ldr	r3, [pc, #28]	@ (8006c9c <vARPProcessPacketReply+0xac>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f010 fa91 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8006c86:	4b05      	ldr	r3, [pc, #20]	@ (8006c9c <vARPProcessPacketReply+0xac>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f003 fabd 	bl	800a20c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8006c92:	bf00      	nop
 8006c94:	3730      	adds	r7, #48	@ 0x30
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	20001114 	.word	0x20001114

08006ca0 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006cac:	2300      	movs	r3, #0
 8006cae:	60fb      	str	r3, [r7, #12]
 8006cb0:	e017      	b.n	8006ce2 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8006cb2:	4a12      	ldr	r2, [pc, #72]	@ (8006cfc <xIsIPInARPCache+0x5c>)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	4413      	add	r3, r2
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d10c      	bne.n	8006cdc <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006cc6:	4a0d      	ldr	r2, [pc, #52]	@ (8006cfc <xIsIPInARPCache+0x5c>)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	011b      	lsls	r3, r3, #4
 8006ccc:	4413      	add	r3, r2
 8006cce:	330b      	adds	r3, #11
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d109      	bne.n	8006cea <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]
            }

            break;
 8006cda:	e006      	b.n	8006cea <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	60fb      	str	r3, [r7, #12]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2b05      	cmp	r3, #5
 8006ce6:	dde4      	ble.n	8006cb2 <xIsIPInARPCache+0x12>
 8006ce8:	e000      	b.n	8006cec <xIsIPInARPCache+0x4c>
            break;
 8006cea:	bf00      	nop
        }
    }

    return xReturn;
 8006cec:	68bb      	ldr	r3, [r7, #8]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	20000edc 	.word	0x20000edc

08006d00 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b0a5      	sub	sp, #148	@ 0x94
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	f003 f83a 	bl	8009d88 <uxIPHeaderSizePacket>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b14      	cmp	r3, #20
 8006d18:	d002      	beq.n	8006d20 <xCheckRequiresARPResolution+0x20>
 8006d1a:	2b28      	cmp	r3, #40	@ 0x28
 8006d1c:	d029      	beq.n	8006d72 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 8006d1e:	e0b6      	b.n	8006e8e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d24:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006d26:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d28:	330e      	adds	r3, #14
 8006d2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d30:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8006d32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d34:	68da      	ldr	r2, [r3, #12]
 8006d36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	405a      	eors	r2, r3
 8006d3c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f040 80a0 	bne.w	8006e88 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8006d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff ffa7 	bl	8006ca0 <xIsIPInARPCache>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f040 8097 	bne.w	8006e88 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	4619      	mov	r1, r3
 8006d64:	4610      	mov	r0, r2
 8006d66:	f000 fbe1 	bl	800752c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006d70:	e08a      	b.n	8006e88 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d76:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006d7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006d7e:	330e      	adds	r3, #14
 8006d80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8006d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d88:	3308      	adds	r3, #8
 8006d8a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 8006d8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006d92:	799b      	ldrb	r3, [r3, #6]
 8006d94:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8006d98:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006d9c:	2b06      	cmp	r3, #6
 8006d9e:	d003      	beq.n	8006da8 <xCheckRequiresARPResolution+0xa8>
 8006da0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8006da4:	2b11      	cmp	r3, #17
 8006da6:	d171      	bne.n	8006e8c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8006da8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006dac:	f006 ff68 	bl	800dc80 <xIPv6_GetIPType>
 8006db0:	4603      	mov	r3, r0
 8006db2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8006db6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8006dba:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <xCheckRequiresARPResolution+0xde>
 8006dc2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d007      	beq.n	8006dda <xCheckRequiresARPResolution+0xda>
 8006dca:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	d101      	bne.n	8006dd6 <xCheckRequiresARPResolution+0xd6>
 8006dd2:	4b32      	ldr	r3, [pc, #200]	@ (8006e9c <xCheckRequiresARPResolution+0x19c>)
 8006dd4:	e004      	b.n	8006de0 <xCheckRequiresARPResolution+0xe0>
 8006dd6:	4b32      	ldr	r3, [pc, #200]	@ (8006ea0 <xCheckRequiresARPResolution+0x1a0>)
 8006dd8:	e002      	b.n	8006de0 <xCheckRequiresARPResolution+0xe0>
 8006dda:	4b32      	ldr	r3, [pc, #200]	@ (8006ea4 <xCheckRequiresARPResolution+0x1a4>)
 8006ddc:	e000      	b.n	8006de0 <xCheckRequiresARPResolution+0xe0>
 8006dde:	4b32      	ldr	r3, [pc, #200]	@ (8006ea8 <xCheckRequiresARPResolution+0x1a8>)
 8006de0:	461a      	mov	r2, r3
 8006de2:	4832      	ldr	r0, [pc, #200]	@ (8006eac <xCheckRequiresARPResolution+0x1ac>)
 8006de4:	f01b f888 	bl	8021ef8 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8006de8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d14d      	bne.n	8006e8c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8006df0:	f107 030c 	add.w	r3, r7, #12
 8006df4:	2250      	movs	r2, #80	@ 0x50
 8006df6:	2100      	movs	r1, #0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f01b fba6 	bl	802254a <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 8006dfe:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8006e02:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006e06:	4619      	mov	r1, r3
 8006e08:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8006e0c:	f004 fe0e 	bl	800ba2c <eNDGetCacheEntry>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8006e16:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d007      	beq.n	8006e2e <xCheckRequiresARPResolution+0x12e>
 8006e1e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d101      	bne.n	8006e2a <xCheckRequiresARPResolution+0x12a>
 8006e26:	4c22      	ldr	r4, [pc, #136]	@ (8006eb0 <xCheckRequiresARPResolution+0x1b0>)
 8006e28:	e002      	b.n	8006e30 <xCheckRequiresARPResolution+0x130>
 8006e2a:	4c22      	ldr	r4, [pc, #136]	@ (8006eb4 <xCheckRequiresARPResolution+0x1b4>)
 8006e2c:	e000      	b.n	8006e30 <xCheckRequiresARPResolution+0x130>
 8006e2e:	4c22      	ldr	r4, [pc, #136]	@ (8006eb8 <xCheckRequiresARPResolution+0x1b8>)
 8006e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e32:	f107 010c 	add.w	r1, r7, #12
 8006e36:	2250      	movs	r2, #80	@ 0x50
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f006 ff79 	bl	800dd30 <pcEndpointName>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	461a      	mov	r2, r3
 8006e42:	4621      	mov	r1, r4
 8006e44:	481d      	ldr	r0, [pc, #116]	@ (8006ebc <xCheckRequiresARPResolution+0x1bc>)
 8006e46:	f01b f857 	bl	8021ef8 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 8006e4a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d11c      	bne.n	8006e8c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8006e52:	2356      	movs	r3, #86	@ 0x56
 8006e54:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8006e56:	2100      	movs	r1, #0
 8006e58:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 8006e5a:	f010 f93d 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 8006e5e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006e60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00c      	beq.n	8006e80 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e6c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e74:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006e76:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8006e7a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8006e7c:	f005 f842 	bl	800bf04 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006e86:	e001      	b.n	8006e8c <xCheckRequiresARPResolution+0x18c>
                   break;
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <xCheckRequiresARPResolution+0x18e>
                   break;
 8006e8c:	bf00      	nop
    }

    return xNeedsARPResolution;
 8006e8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3794      	adds	r7, #148	@ 0x94
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd90      	pop	{r4, r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	08024268 	.word	0x08024268
 8006ea0:	08024274 	.word	0x08024274
 8006ea4:	0802427c 	.word	0x0802427c
 8006ea8:	08024288 	.word	0x08024288
 8006eac:	08024290 	.word	0x08024290
 8006eb0:	080242bc 	.word	0x080242bc
 8006eb4:	080242c0 	.word	0x080242c0
 8006eb8:	080242c8 	.word	0x080242c8
 8006ebc:	080242d0 	.word	0x080242d0

08006ec0 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d026      	beq.n	8006f1e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e020      	b.n	8006f18 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 8006ed6:	4a14      	ldr	r2, [pc, #80]	@ (8006f28 <vARPRefreshCacheEntryAge+0x68>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	011b      	lsls	r3, r3, #4
 8006edc:	4413      	add	r3, r2
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d115      	bne.n	8006f12 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	011b      	lsls	r3, r3, #4
 8006eea:	4a0f      	ldr	r2, [pc, #60]	@ (8006f28 <vARPRefreshCacheEntryAge+0x68>)
 8006eec:	4413      	add	r3, r2
 8006eee:	3304      	adds	r3, #4
 8006ef0:	6879      	ldr	r1, [r7, #4]
 8006ef2:	2206      	movs	r2, #6
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f01c f9b0 	bl	802325a <memcmp>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d108      	bne.n	8006f12 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006f00:	4a09      	ldr	r2, [pc, #36]	@ (8006f28 <vARPRefreshCacheEntryAge+0x68>)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	011b      	lsls	r3, r3, #4
 8006f06:	4413      	add	r3, r2
 8006f08:	330a      	adds	r3, #10
 8006f0a:	2296      	movs	r2, #150	@ 0x96
 8006f0c:	701a      	strb	r2, [r3, #0]
                    break;
 8006f0e:	bf00      	nop
                }
            }
        }
    }
}
 8006f10:	e005      	b.n	8006f1e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	dddb      	ble.n	8006ed6 <vARPRefreshCacheEntryAge+0x16>
}
 8006f1e:	bf00      	nop
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}
 8006f26:	bf00      	nop
 8006f28:	20000edc 	.word	0x20000edc

08006f2c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b088      	sub	sp, #32
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8006f38:	f107 0310 	add.w	r3, r7, #16
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f85b 	bl	8006ffc <prvFindCacheEntry>
 8006f46:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d150      	bne.n	8006ff0 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	db0e      	blt.n	8006f72 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	db0e      	blt.n	8006f7c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	011b      	lsls	r3, r3, #4
 8006f62:	4a25      	ldr	r2, [pc, #148]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006f64:	4413      	add	r3, r2
 8006f66:	2210      	movs	r2, #16
 8006f68:	2100      	movs	r1, #0
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f01b faed 	bl	802254a <memset>
 8006f70:	e004      	b.n	8006f7c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db01      	blt.n	8006f7c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	4413      	add	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d01f      	beq.n	8006fce <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	4a19      	ldr	r2, [pc, #100]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006f94:	4413      	add	r3, r2
 8006f96:	3304      	adds	r3, #4
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	2206      	movs	r2, #6
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f01b f9c7 	bl	8022330 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	4a14      	ldr	r2, [pc, #80]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006fa6:	011b      	lsls	r3, r3, #4
 8006fa8:	4413      	add	r3, r2
 8006faa:	330a      	adds	r3, #10
 8006fac:	2296      	movs	r2, #150	@ 0x96
 8006fae:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	4a11      	ldr	r2, [pc, #68]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	4413      	add	r3, r2
 8006fb8:	330b      	adds	r3, #11
 8006fba:	2201      	movs	r2, #1
 8006fbc:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	330c      	adds	r3, #12
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 8006fcc:	e010      	b.n	8006ff0 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	da0d      	bge.n	8006ff0 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	4a08      	ldr	r2, [pc, #32]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	4413      	add	r3, r2
 8006fdc:	330a      	adds	r3, #10
 8006fde:	2205      	movs	r2, #5
 8006fe0:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	4a04      	ldr	r2, [pc, #16]	@ (8006ff8 <vARPRefreshCacheEntry+0xcc>)
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	4413      	add	r3, r2
 8006fea:	330b      	adds	r3, #11
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
}
 8006ff0:	bf00      	nop
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000edc 	.word	0x20000edc

08006ffc <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08a      	sub	sp, #40	@ 0x28
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800700e:	2300      	movs	r3, #0
 8007010:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8007014:	2300      	movs	r3, #0
 8007016:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8007018:	2102      	movs	r1, #2
 800701a:	68b8      	ldr	r0, [r7, #8]
 800701c:	f006 fb24 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	bf14      	ite	ne
 8007026:	2301      	movne	r3, #1
 8007028:	2300      	moveq	r3, #0
 800702a:	b2db      	uxtb	r3, r3
 800702c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800702e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007032:	3b01      	subs	r3, #1
 8007034:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	f04f 32ff 	mov.w	r2, #4294967295
 8007046:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2200      	movs	r2, #0
 800704c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800704e:	2300      	movs	r3, #0
 8007050:	627b      	str	r3, [r7, #36]	@ 0x24
 8007052:	e074      	b.n	800713e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8007054:	2300      	movs	r3, #0
 8007056:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	011b      	lsls	r3, r3, #4
 8007062:	4a3b      	ldr	r2, [pc, #236]	@ (8007150 <prvFindCacheEntry+0x154>)
 8007064:	4413      	add	r3, r2
 8007066:	3304      	adds	r3, #4
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	2206      	movs	r2, #6
 800706c:	4618      	mov	r0, r3
 800706e:	f01c f8f4 	bl	802325a <memcmp>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d101      	bne.n	800707c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8007078:	2301      	movs	r3, #1
 800707a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800707c:	4a34      	ldr	r2, [pc, #208]	@ (8007150 <prvFindCacheEntry+0x154>)
 800707e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007080:	011b      	lsls	r3, r3, #4
 8007082:	4413      	add	r3, r2
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	429a      	cmp	r2, r3
 800708a:	d125      	bne.n	80070d8 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d103      	bne.n	800709a <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007096:	601a      	str	r2, [r3, #0]
                break;
 8007098:	e054      	b.n	8007144 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d017      	beq.n	80070d0 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80070a0:	4a2b      	ldr	r2, [pc, #172]	@ (8007150 <prvFindCacheEntry+0x154>)
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4413      	add	r3, r2
 80070a8:	330a      	adds	r3, #10
 80070aa:	2296      	movs	r2, #150	@ 0x96
 80070ac:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80070ae:	4a28      	ldr	r2, [pc, #160]	@ (8007150 <prvFindCacheEntry+0x154>)
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	4413      	add	r3, r2
 80070b6:	330b      	adds	r3, #11
 80070b8:	2201      	movs	r2, #1
 80070ba:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 80070bc:	4a24      	ldr	r2, [pc, #144]	@ (8007150 <prvFindCacheEntry+0x154>)
 80070be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c0:	011b      	lsls	r3, r3, #4
 80070c2:	4413      	add	r3, r2
 80070c4:	330c      	adds	r3, #12
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
                break;
 80070ce:	e039      	b.n	8007144 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e02f      	b.n	8007138 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d017      	beq.n	800710e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80070de:	4a1c      	ldr	r2, [pc, #112]	@ (8007150 <prvFindCacheEntry+0x154>)
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	011b      	lsls	r3, r3, #4
 80070e4:	4413      	add	r3, r2
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2103      	movs	r1, #3
 80070ea:	4618      	mov	r0, r3
 80070ec:	f006 fabc 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	2300      	moveq	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	429a      	cmp	r2, r3
 8007104:	d118      	bne.n	8007138 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800710a:	605a      	str	r2, [r3, #4]
 800710c:	e014      	b.n	8007138 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800710e:	4a10      	ldr	r2, [pc, #64]	@ (8007150 <prvFindCacheEntry+0x154>)
 8007110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	4413      	add	r3, r2
 8007116:	330a      	adds	r3, #10
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800711e:	429a      	cmp	r2, r3
 8007120:	d90a      	bls.n	8007138 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8007122:	4a0b      	ldr	r2, [pc, #44]	@ (8007150 <prvFindCacheEntry+0x154>)
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	011b      	lsls	r3, r3, #4
 8007128:	4413      	add	r3, r2
 800712a:	330a      	adds	r3, #10
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007136:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	3301      	adds	r3, #1
 800713c:	627b      	str	r3, [r7, #36]	@ 0x24
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	2b05      	cmp	r3, #5
 8007142:	dd87      	ble.n	8007054 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8007144:	69fb      	ldr	r3, [r7, #28]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3728      	adds	r7, #40	@ 0x28
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	20000edc 	.word	0x20000edc

08007154 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007154:	b580      	push	{r7, lr}
 8007156:	b088      	sub	sp, #32
 8007158:	af00      	add	r7, sp, #0
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d104      	bne.n	8007174 <eARPGetCacheEntry+0x20>
 800716a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 800716e:	483c      	ldr	r0, [pc, #240]	@ (8007260 <eARPGetCacheEntry+0x10c>)
 8007170:	f7fa fbe2 	bl	8001938 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d104      	bne.n	8007184 <eARPGetCacheEntry+0x30>
 800717a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800717e:	4838      	ldr	r0, [pc, #224]	@ (8007260 <eARPGetCacheEntry+0x10c>)
 8007180:	f7fa fbda 	bl	8001938 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <eARPGetCacheEntry+0x40>
 800718a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 800718e:	4834      	ldr	r0, [pc, #208]	@ (8007260 <eARPGetCacheEntry+0x10c>)
 8007190:	f7fa fbd2 	bl	8001938 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 80071a0:	2100      	movs	r1, #0
 80071a2:	6978      	ldr	r0, [r7, #20]
 80071a4:	f006 f9d4 	bl	800d550 <FreeRTOS_FindEndPointOnIP_IPv4>
 80071a8:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80071aa:	6978      	ldr	r0, [r7, #20]
 80071ac:	f003 fc3c 	bl	800aa28 <xIsIPv4Multicast>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d021      	beq.n	80071fa <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 80071b6:	68b9      	ldr	r1, [r7, #8]
 80071b8:	6978      	ldr	r0, [r7, #20]
 80071ba:	f003 fd63 	bl	800ac84 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 80071be:	2302      	movs	r3, #2
 80071c0:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80071c2:	2000      	movs	r0, #0
 80071c4:	f006 f978 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 80071c8:	61b8      	str	r0, [r7, #24]

            for( ;
 80071ca:	e012      	b.n	80071f2 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 80071cc:	69bb      	ldr	r3, [r7, #24]
 80071ce:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80071d2:	f003 0304 	and.w	r3, r3, #4
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d105      	bne.n	80071e8 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80071e2:	2301      	movs	r3, #1
 80071e4:	77fb      	strb	r3, [r7, #31]
                    break;
 80071e6:	e035      	b.n	8007254 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 80071e8:	69b9      	ldr	r1, [r7, #24]
 80071ea:	2000      	movs	r0, #0
 80071ec:	f006 f986 	bl	800d4fc <FreeRTOS_NextEndPoint>
 80071f0:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e9      	bne.n	80071cc <eARPGetCacheEntry+0x78>
 80071f8:	e02c      	b.n	8007254 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	061a      	lsls	r2, r3, #24
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007206:	431a      	orrs	r2, r3
 8007208:	697b      	ldr	r3, [r7, #20]
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007210:	431a      	orrs	r2, r3
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	0e1b      	lsrs	r3, r3, #24
 8007216:	4313      	orrs	r3, r2
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2bff      	cmp	r3, #255	@ 0xff
 800721c:	d113      	bne.n	8007246 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	4a10      	ldr	r2, [pc, #64]	@ (8007264 <eARPGetCacheEntry+0x110>)
 8007222:	6811      	ldr	r1, [r2, #0]
 8007224:	6019      	str	r1, [r3, #0]
 8007226:	8892      	ldrh	r2, [r2, #4]
 8007228:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 800722a:	2104      	movs	r1, #4
 800722c:	6978      	ldr	r0, [r7, #20]
 800722e:	f006 fa1b 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 8007232:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8007234:	69bb      	ldr	r3, [r7, #24]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8007240:	2301      	movs	r3, #1
 8007242:	77fb      	strb	r3, [r7, #31]
 8007244:	e006      	b.n	8007254 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	68b9      	ldr	r1, [r7, #8]
 800724a:	68f8      	ldr	r0, [r7, #12]
 800724c:	f000 f80c 	bl	8007268 <eARPGetCacheEntryGateWay>
 8007250:	4603      	mov	r3, r0
 8007252:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8007254:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007256:	4618      	mov	r0, r3
 8007258:	3720      	adds	r7, #32
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	08024304 	.word	0x08024304
 8007264:	080275a4 	.word	0x080275a4

08007268 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007274:	2300      	movs	r3, #0
 8007276:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8007284:	2104      	movs	r1, #4
 8007286:	69b8      	ldr	r0, [r7, #24]
 8007288:	f006 f9ee 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 800728c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d11b      	bne.n	80072cc <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 8007294:	687a      	ldr	r2, [r7, #4]
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	69b8      	ldr	r0, [r7, #24]
 800729a:	f000 f86b 	bl	8007374 <prvCacheLookup>
 800729e:	4603      	mov	r3, r0
 80072a0:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 80072a2:	7ffb      	ldrb	r3, [r7, #31]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d017      	beq.n	80072d8 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 80072a8:	2040      	movs	r0, #64	@ 0x40
 80072aa:	f006 fca9 	bl	800dc00 <FreeRTOS_FindGateWay>
 80072ae:	4602      	mov	r2, r0
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d004      	beq.n	80072c6 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	61bb      	str	r3, [r7, #24]
 80072c4:	e008      	b.n	80072d8 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 80072c6:	2300      	movs	r3, #0
 80072c8:	61bb      	str	r3, [r7, #24]
 80072ca:	e005      	b.n	80072d8 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 80072d8:	7ffb      	ldrb	r3, [r7, #31]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d13f      	bne.n	800735e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 80072de:	69bb      	ldr	r3, [r7, #24]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d102      	bne.n	80072ea <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 80072e4:	2302      	movs	r3, #2
 80072e6:	77fb      	strb	r3, [r7, #31]
 80072e8:	e039      	b.n	800735e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	69b8      	ldr	r0, [r7, #24]
 80072f0:	f000 f840 	bl	8007374 <prvCacheLookup>
 80072f4:	4603      	mov	r3, r0
 80072f6:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 80072f8:	7ffb      	ldrb	r3, [r7, #31]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d103      	bne.n	8007306 <eARPGetCacheEntryGateWay+0x9e>
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	69bb      	ldr	r3, [r7, #24]
 8007302:	429a      	cmp	r2, r3
 8007304:	d028      	beq.n	8007358 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	061a      	lsls	r2, r3, #24
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	021b      	lsls	r3, r3, #8
 800730e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007312:	431a      	orrs	r2, r3
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	0a1b      	lsrs	r3, r3, #8
 8007318:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800731c:	431a      	orrs	r2, r3
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	0e1b      	lsrs	r3, r3, #24
 8007322:	ea42 0103 	orr.w	r1, r2, r3
 8007326:	7ffb      	ldrb	r3, [r7, #31]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <eARPGetCacheEntryGateWay+0xc8>
 800732c:	480e      	ldr	r0, [pc, #56]	@ (8007368 <eARPGetCacheEntryGateWay+0x100>)
 800732e:	e000      	b.n	8007332 <eARPGetCacheEntryGateWay+0xca>
 8007330:	480e      	ldr	r0, [pc, #56]	@ (800736c <eARPGetCacheEntryGateWay+0x104>)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	061a      	lsls	r2, r3, #24
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	021b      	lsls	r3, r3, #8
 800733a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800733e:	431a      	orrs	r2, r3
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	0a1b      	lsrs	r3, r3, #8
 8007344:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007348:	431a      	orrs	r2, r3
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	0e1b      	lsrs	r3, r3, #24
 800734e:	4313      	orrs	r3, r2
 8007350:	4602      	mov	r2, r0
 8007352:	4807      	ldr	r0, [pc, #28]	@ (8007370 <eARPGetCacheEntryGateWay+0x108>)
 8007354:	f01a fdd0 	bl	8021ef8 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800735e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8007360:	4618      	mov	r0, r3
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	08024330 	.word	0x08024330
 800736c:	08024334 	.word	0x08024334
 8007370:	0802433c 	.word	0x0802433c

08007374 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8007380:	2300      	movs	r3, #0
 8007382:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007384:	2300      	movs	r3, #0
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e02a      	b.n	80073e0 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800738a:	4a19      	ldr	r2, [pc, #100]	@ (80073f0 <prvCacheLookup+0x7c>)
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	011b      	lsls	r3, r3, #4
 8007390:	4413      	add	r3, r2
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68fa      	ldr	r2, [r7, #12]
 8007396:	429a      	cmp	r2, r3
 8007398:	d11f      	bne.n	80073da <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800739a:	4a15      	ldr	r2, [pc, #84]	@ (80073f0 <prvCacheLookup+0x7c>)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	011b      	lsls	r3, r3, #4
 80073a0:	4413      	add	r3, r2
 80073a2:	330b      	adds	r3, #11
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d102      	bne.n	80073b0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 80073aa:	2302      	movs	r3, #2
 80073ac:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 80073ae:	e01a      	b.n	80073e6 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80073b0:	68b8      	ldr	r0, [r7, #8]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	011b      	lsls	r3, r3, #4
 80073b6:	4a0e      	ldr	r2, [pc, #56]	@ (80073f0 <prvCacheLookup+0x7c>)
 80073b8:	4413      	add	r3, r2
 80073ba:	3304      	adds	r3, #4
 80073bc:	2206      	movs	r2, #6
 80073be:	4619      	mov	r1, r3
 80073c0:	f01a ffb6 	bl	8022330 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 80073c4:	4a0a      	ldr	r2, [pc, #40]	@ (80073f0 <prvCacheLookup+0x7c>)
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4413      	add	r3, r2
 80073cc:	330c      	adds	r3, #12
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80073d4:	2301      	movs	r3, #1
 80073d6:	74fb      	strb	r3, [r7, #19]
                break;
 80073d8:	e005      	b.n	80073e6 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	3301      	adds	r3, #1
 80073de:	617b      	str	r3, [r7, #20]
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	2b05      	cmp	r3, #5
 80073e4:	ddd1      	ble.n	800738a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 80073e6:	7cfb      	ldrb	r3, [r7, #19]
    }
 80073e8:	4618      	mov	r0, r3
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20000edc 	.word	0x20000edc

080073f4 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	e048      	b.n	8007492 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8007400:	4a47      	ldr	r2, [pc, #284]	@ (8007520 <vARPAgeCache+0x12c>)
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	011b      	lsls	r3, r3, #4
 8007406:	4413      	add	r3, r2
 8007408:	330a      	adds	r3, #10
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d03d      	beq.n	800748c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8007410:	4a43      	ldr	r2, [pc, #268]	@ (8007520 <vARPAgeCache+0x12c>)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	011b      	lsls	r3, r3, #4
 8007416:	4413      	add	r3, r2
 8007418:	330a      	adds	r3, #10
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	3b01      	subs	r3, #1
 800741e:	b2d9      	uxtb	r1, r3
 8007420:	4a3f      	ldr	r2, [pc, #252]	@ (8007520 <vARPAgeCache+0x12c>)
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	011b      	lsls	r3, r3, #4
 8007426:	4413      	add	r3, r2
 8007428:	330a      	adds	r3, #10
 800742a:	460a      	mov	r2, r1
 800742c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800742e:	4a3c      	ldr	r2, [pc, #240]	@ (8007520 <vARPAgeCache+0x12c>)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	4413      	add	r3, r2
 8007436:	330b      	adds	r3, #11
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d108      	bne.n	8007450 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800743e:	4a38      	ldr	r2, [pc, #224]	@ (8007520 <vARPAgeCache+0x12c>)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	011b      	lsls	r3, r3, #4
 8007444:	4413      	add	r3, r2
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4618      	mov	r0, r3
 800744a:	f000 f8d7 	bl	80075fc <FreeRTOS_OutputARPRequest>
 800744e:	e00f      	b.n	8007470 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8007450:	4a33      	ldr	r2, [pc, #204]	@ (8007520 <vARPAgeCache+0x12c>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	011b      	lsls	r3, r3, #4
 8007456:	4413      	add	r3, r2
 8007458:	330a      	adds	r3, #10
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b03      	cmp	r3, #3
 800745e:	d807      	bhi.n	8007470 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8007460:	4a2f      	ldr	r2, [pc, #188]	@ (8007520 <vARPAgeCache+0x12c>)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	011b      	lsls	r3, r3, #4
 8007466:	4413      	add	r3, r2
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f000 f8c6 	bl	80075fc <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8007470:	4a2b      	ldr	r2, [pc, #172]	@ (8007520 <vARPAgeCache+0x12c>)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	011b      	lsls	r3, r3, #4
 8007476:	4413      	add	r3, r2
 8007478:	330a      	adds	r3, #10
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8007480:	4a27      	ldr	r2, [pc, #156]	@ (8007520 <vARPAgeCache+0x12c>)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2b05      	cmp	r3, #5
 8007496:	ddb3      	ble.n	8007400 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8007498:	f7fd f8e0 	bl	800465c <xTaskGetTickCount>
 800749c:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 800749e:	4b21      	ldr	r3, [pc, #132]	@ (8007524 <vARPAgeCache+0x130>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d007      	beq.n	80074b6 <vARPAgeCache+0xc2>
 80074a6:	4b1f      	ldr	r3, [pc, #124]	@ (8007524 <vARPAgeCache+0x130>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	1ad3      	subs	r3, r2, r3
 80074ae:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d92f      	bls.n	8007516 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80074b6:	4b1c      	ldr	r3, [pc, #112]	@ (8007528 <vARPAgeCache+0x134>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 80074bc:	e025      	b.n	800750a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80074c4:	f003 0310 	and.w	r3, r3, #16
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d019      	beq.n	8007502 <vARPAgeCache+0x10e>
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d015      	beq.n	8007502 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80074dc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <vARPAgeCache+0xf8>
 80074e6:	2b01      	cmp	r3, #1
 80074e8:	d007      	beq.n	80074fa <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 80074ea:	e00a      	b.n	8007502 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4619      	mov	r1, r3
 80074f2:	68b8      	ldr	r0, [r7, #8]
 80074f4:	f000 f81a 	bl	800752c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 80074f8:	e003      	b.n	8007502 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 80074fa:	68b8      	ldr	r0, [r7, #8]
 80074fc:	f005 f822 	bl	800c544 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8007500:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8007508:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1d6      	bne.n	80074be <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8007510:	4a04      	ldr	r2, [pc, #16]	@ (8007524 <vARPAgeCache+0x130>)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6013      	str	r3, [r2, #0]
        }
    }
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	20000edc 	.word	0x20000edc
 8007524:	20000f3c 	.word	0x20000f3c
 8007528:	200014a0 	.word	0x200014a0

0800752c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d156      	bne.n	80075f4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 800754a:	2b00      	cmp	r3, #0
 800754c:	d052      	beq.n	80075f4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800754e:	2100      	movs	r1, #0
 8007550:	202a      	movs	r0, #42	@ 0x2a
 8007552:	f00f fdc1 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 8007556:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d04a      	beq.n	80075f4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	683a      	ldr	r2, [r7, #0]
 8007562:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8007570:	693b      	ldr	r3, [r7, #16]
 8007572:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8007574:	6938      	ldr	r0, [r7, #16]
 8007576:	f000 f855 	bl	8007624 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	2b3b      	cmp	r3, #59	@ 0x3b
 8007580:	d812      	bhi.n	80075a8 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e008      	b.n	800759c <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	4413      	add	r3, r2
 8007592:	2200      	movs	r2, #0
 8007594:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	3301      	adds	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b3b      	cmp	r3, #59	@ 0x3b
 80075a0:	ddf3      	ble.n	800758a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	223c      	movs	r2, #60	@ 0x3c
 80075a6:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 80075a8:	f002 ff7c 	bl	800a4a4 <xIsCallingFromIPTask>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00f      	beq.n	80075d2 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d01b      	beq.n	80075f4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 80075ca:	2201      	movs	r2, #1
 80075cc:	6939      	ldr	r1, [r7, #16]
 80075ce:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 80075d0:	e010      	b.n	80075f4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 80075d2:	2302      	movs	r3, #2
 80075d4:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80075da:	f107 0308 	add.w	r3, r7, #8
 80075de:	f04f 31ff 	mov.w	r1, #4294967295
 80075e2:	4618      	mov	r0, r3
 80075e4:	f002 f81c 	bl	8009620 <xSendEventStructToIPTask>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d102      	bne.n	80075f4 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80075ee:	6938      	ldr	r0, [r7, #16]
 80075f0:	f00f fdda 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
    }
 80075f4:	bf00      	nop
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8007604:	210c      	movs	r1, #12
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f006 f82e 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 800760c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d003      	beq.n	800761c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff ff88 	bl	800752c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <vARPGenerateRequestPacket+0x18>
 8007632:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8007636:	4828      	ldr	r0, [pc, #160]	@ (80076d8 <vARPGenerateRequestPacket+0xb4>)
 8007638:	f7fa f97e 	bl	8001938 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007640:	2b29      	cmp	r3, #41	@ 0x29
 8007642:	d804      	bhi.n	800764e <vARPGenerateRequestPacket+0x2a>
 8007644:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8007648:	4823      	ldr	r0, [pc, #140]	@ (80076d8 <vARPGenerateRequestPacket+0xb4>)
 800764a:	f7fa f975 	bl	8001938 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007652:	2b00      	cmp	r3, #0
 8007654:	d104      	bne.n	8007660 <vARPGenerateRequestPacket+0x3c>
 8007656:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 800765a:	481f      	ldr	r0, [pc, #124]	@ (80076d8 <vARPGenerateRequestPacket+0xb4>)
 800765c:	f7fa f96c 	bl	8001938 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007664:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8007666:	4b1d      	ldr	r3, [pc, #116]	@ (80076dc <vARPGenerateRequestPacket+0xb8>)
 8007668:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800766e:	2226      	movs	r2, #38	@ 0x26
 8007670:	6939      	ldr	r1, [r7, #16]
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f01a fe5c 	bl	8022330 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767c:	33e8      	adds	r3, #232	@ 0xe8
 800767e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8007680:	697b      	ldr	r3, [r7, #20]
 8007682:	3306      	adds	r3, #6
 8007684:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8007686:	2206      	movs	r2, #6
 8007688:	6939      	ldr	r1, [r7, #16]
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f01a fe50 	bl	8022330 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007694:	33e8      	adds	r3, #232	@ 0xe8
 8007696:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	3316      	adds	r3, #22
 800769c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 800769e:	2206      	movs	r2, #6
 80076a0:	6939      	ldr	r1, [r7, #16]
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f01a fe44 	bl	8022330 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ac:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	331c      	adds	r3, #28
 80076b2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	461a      	mov	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	222a      	movs	r2, #42	@ 0x2a
 80076cc:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 80076ce:	bf00      	nop
 80076d0:	3718      	adds	r7, #24
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	08024304 	.word	0x08024304
 80076dc:	0802756c 	.word	0x0802756c

080076e0 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d01b      	beq.n	8007726 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	e014      	b.n	800771e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 80076f4:	4a10      	ldr	r2, [pc, #64]	@ (8007738 <FreeRTOS_ClearARP+0x58>)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	011b      	lsls	r3, r3, #4
 80076fa:	4413      	add	r3, r2
 80076fc:	330c      	adds	r3, #12
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	687a      	ldr	r2, [r7, #4]
 8007702:	429a      	cmp	r2, r3
 8007704:	d108      	bne.n	8007718 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	4a0b      	ldr	r2, [pc, #44]	@ (8007738 <FreeRTOS_ClearARP+0x58>)
 800770c:	4413      	add	r3, r2
 800770e:	2210      	movs	r2, #16
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f01a ff19 	bl	802254a <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	3301      	adds	r3, #1
 800771c:	60fb      	str	r3, [r7, #12]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	2b05      	cmp	r3, #5
 8007722:	dde7      	ble.n	80076f4 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8007724:	e004      	b.n	8007730 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8007726:	2260      	movs	r2, #96	@ 0x60
 8007728:	2100      	movs	r1, #0
 800772a:	4803      	ldr	r0, [pc, #12]	@ (8007738 <FreeRTOS_ClearARP+0x58>)
 800772c:	f01a ff0d 	bl	802254a <memset>
}
 8007730:	bf00      	nop
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	20000edc 	.word	0x20000edc

0800773c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 800773c:	b580      	push	{r7, lr}
 800773e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8007740:	f000 fc8a 	bl	8008058 <vDNSCallbackInitialise>
        }
 8007744:	bf00      	nop
 8007746:	bd80      	pop	{r7, pc}

08007748 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af00      	add	r7, sp, #0
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8007754:	2300      	movs	r3, #0
 8007756:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8007758:	2048      	movs	r0, #72	@ 0x48
 800775a:	f7fe fdeb 	bl	8006334 <pvPortMalloc>
 800775e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d057      	beq.n	8007816 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800776a:	2248      	movs	r2, #72	@ 0x48
 800776c:	2100      	movs	r1, #0
 800776e:	69f8      	ldr	r0, [r7, #28]
 8007770:	f01a feeb 	bl	802254a <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	3338      	adds	r3, #56	@ 0x38
 8007782:	220f      	movs	r2, #15
 8007784:	68f9      	ldr	r1, [r7, #12]
 8007786:	4618      	mov	r0, r3
 8007788:	f01b fdac 	bl	80232e4 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2200      	movs	r2, #0
 8007790:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f103 0220 	add.w	r2, r3, #32
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d003      	beq.n	80077ac <pxNew_AddrInfo+0x64>
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	2b0a      	cmp	r3, #10
 80077a8:	d01e      	beq.n	80077e8 <pxNew_AddrInfo+0xa0>
 80077aa:	e02b      	b.n	8007804 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f003 f87d 	bl	800a8ac <ulChar2u32>
 80077b2:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	061a      	lsls	r2, r3, #24
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	021b      	lsls	r3, r3, #8
 80077bc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80077c0:	431a      	orrs	r2, r3
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	0a1b      	lsrs	r3, r3, #8
 80077c6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80077ca:	ea42 0103 	orr.w	r1, r2, r3
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	0e1a      	lsrs	r2, r3, #24
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	695b      	ldr	r3, [r3, #20]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	2202      	movs	r2, #2
 80077de:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 80077e0:	69fb      	ldr	r3, [r7, #28]
 80077e2:	2204      	movs	r2, #4
 80077e4:	611a      	str	r2, [r3, #16]
                       }
                       break;
 80077e6:	e016      	b.n	8007816 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	220a      	movs	r2, #10
 80077ec:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	2210      	movs	r2, #16
 80077f2:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	3328      	adds	r3, #40	@ 0x28
 80077f8:	2210      	movs	r2, #16
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4618      	mov	r0, r3
 80077fe:	f01a fd97 	bl	8022330 <memcpy>
                        break;
 8007802:	e008      	b.n	8007816 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8007804:	4806      	ldr	r0, [pc, #24]	@ (8007820 <pxNew_AddrInfo+0xd8>)
 8007806:	f01a fb77 	bl	8021ef8 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 800780a:	69b8      	ldr	r0, [r7, #24]
 800780c:	f7fe fe66 	bl	80064dc <vPortFree>
                    pxAddrInfo = NULL;
 8007810:	2300      	movs	r3, #0
 8007812:	61fb      	str	r3, [r7, #28]

                    break;
 8007814:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8007816:	69fb      	ldr	r3, [r7, #28]
    }
 8007818:	4618      	mov	r0, r3
 800781a:	3720      	adds	r7, #32
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	080243a8 	.word	0x080243a8

08007824 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00b      	beq.n	800784e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8007836:	e007      	b.n	8007848 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	69db      	ldr	r3, [r3, #28]
 800783c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f7fe fe4c 	bl	80064dc <vPortFree>
                pxIterator = pxNext;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f4      	bne.n	8007838 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8007856:	b580      	push	{r7, lr}
 8007858:	b088      	sub	sp, #32
 800785a:	af02      	add	r7, sp, #8
 800785c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f002 fa92 	bl	8009d88 <uxIPHeaderSizePacket>
 8007864:	4603      	mov	r3, r0
 8007866:	3316      	adds	r3, #22
 8007868:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786e:	697a      	ldr	r2, [r7, #20]
 8007870:	429a      	cmp	r2, r3
 8007872:	d829      	bhi.n	80078c8 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	2b0b      	cmp	r3, #11
 8007882:	d921      	bls.n	80078c8 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	b21a      	sxth	r2, r3
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 800789e:	0a1b      	lsrs	r3, r3, #8
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	b21b      	sxth	r3, r3
 80078a4:	4313      	orrs	r3, r2
 80078a6:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	f107 0208 	add.w	r2, r7, #8
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	2300      	movs	r3, #0
 80078b2:	6939      	ldr	r1, [r7, #16]
 80078b4:	68f8      	ldr	r0, [r7, #12]
 80078b6:	f000 fcb5 	bl	8008224 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d003      	beq.n	80078c8 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7ff ffae 	bl	8007824 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 80078c8:	2300      	movs	r3, #0
    }
 80078ca:	4618      	mov	r0, r3
 80078cc:	3718      	adds	r7, #24
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b086      	sub	sp, #24
 80078d6:	af02      	add	r7, sp, #8
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	607a      	str	r2, [r7, #4]
 80078de:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	687a      	ldr	r2, [r7, #4]
 80078e8:	68b9      	ldr	r1, [r7, #8]
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f818 	bl	8007920 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 80078f0:	2301      	movs	r3, #1
    }
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8007900:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8007904:	2100      	movs	r1, #0
 8007906:	4804      	ldr	r0, [pc, #16]	@ (8007918 <FreeRTOS_dnsclear+0x1c>)
 8007908:	f01a fe1f 	bl	802254a <memset>
        uxFreeEntry = 0U;
 800790c:	4b03      	ldr	r3, [pc, #12]	@ (800791c <FreeRTOS_dnsclear+0x20>)
 800790e:	2200      	movs	r2, #0
 8007910:	601a      	str	r2, [r3, #0]
    }
 8007912:	bf00      	nop
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000f4c 	.word	0x20000f4c
 800791c:	200010fc 	.word	0x200010fc

08007920 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007920:	b590      	push	{r4, r7, lr}
 8007922:	b09b      	sub	sp, #108	@ 0x6c
 8007924:	af02      	add	r7, sp, #8
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 800792e:	f7fc fe95 	bl	800465c <xTaskGetTickCount>
 8007932:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d103      	bne.n	8007942 <FreeRTOS_ProcessDNSCache+0x22>
 800793a:	21d8      	movs	r1, #216	@ 0xd8
 800793c:	4841      	ldr	r0, [pc, #260]	@ (8007a44 <FreeRTOS_ProcessDNSCache+0x124>)
 800793e:	f7f9 fffb 	bl	8001938 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d002      	beq.n	800794e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 800794e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007950:	4a3d      	ldr	r2, [pc, #244]	@ (8007a48 <FreeRTOS_ProcessDNSCache+0x128>)
 8007952:	fba2 2303 	umull	r2, r3, r2, r3
 8007956:	099b      	lsrs	r3, r3, #6
 8007958:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 800795a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800795e:	461a      	mov	r2, r3
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f87a 	bl	8007a5c <prvFindEntryIndex>
 8007968:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 800796a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800796c:	2b01      	cmp	r3, #1
 800796e:	d110      	bne.n	8007992 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d106      	bne.n	8007984 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8007976:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007978:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800797a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800797c:	68b9      	ldr	r1, [r7, #8]
 800797e:	f000 f8b1 	bl	8007ae4 <prvGetCacheIPEntry>
 8007982:	e013      	b.n	80079ac <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8007984:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8007986:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	f000 f94a 	bl	8007c24 <prvUpdateCacheEntry>
 8007990:	e00c      	b.n	80079ac <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d103      	bne.n	80079a0 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	2200      	movs	r2, #0
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	e005      	b.n	80079ac <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 80079a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	6879      	ldr	r1, [r7, #4]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f994 	bl	8007cd4 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <FreeRTOS_ProcessDNSCache+0x9a>
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d03f      	beq.n	8007a3a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 80079ba:	2302      	movs	r3, #2
 80079bc:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 80079be:	68bb      	ldr	r3, [r7, #8]
 80079c0:	691b      	ldr	r3, [r3, #16]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d00c      	beq.n	80079e0 <FreeRTOS_ProcessDNSCache+0xc0>
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d10e      	bne.n	80079e8 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80079d0:	6818      	ldr	r0, [r3, #0]
 80079d2:	6859      	ldr	r1, [r3, #4]
 80079d4:	689a      	ldr	r2, [r3, #8]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 80079da:	230a      	movs	r3, #10
 80079dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 80079de:	e007      	b.n	80079f0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 80079e6:	e003      	b.n	80079f0 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 80079e8:	4818      	ldr	r0, [pc, #96]	@ (8007a4c <FreeRTOS_ProcessDNSCache+0x12c>)
 80079ea:	f01a fa85 	bl	8021ef8 <lUDPLoggingPrintf>
                        break;
 80079ee:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 80079f0:	f107 0214 	add.w	r2, r7, #20
 80079f4:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80079f8:	2328      	movs	r3, #40	@ 0x28
 80079fa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80079fc:	f007 fc62 	bl	800f2c4 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d001      	beq.n	8007a0a <FreeRTOS_ProcessDNSCache+0xea>
 8007a06:	4912      	ldr	r1, [pc, #72]	@ (8007a50 <FreeRTOS_ProcessDNSCache+0x130>)
 8007a08:	e000      	b.n	8007a0c <FreeRTOS_ProcessDNSCache+0xec>
 8007a0a:	4912      	ldr	r1, [pc, #72]	@ (8007a54 <FreeRTOS_ProcessDNSCache+0x134>)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	061a      	lsls	r2, r3, #24
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	021b      	lsls	r3, r3, #8
 8007a14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	0a1b      	lsrs	r3, r3, #8
 8007a1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a22:	431a      	orrs	r2, r3
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	0e1b      	lsrs	r3, r3, #24
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f107 0214 	add.w	r2, r7, #20
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	4613      	mov	r3, r2
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4808      	ldr	r0, [pc, #32]	@ (8007a58 <FreeRTOS_ProcessDNSCache+0x138>)
 8007a36:	f01a fa5f 	bl	8021ef8 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3764      	adds	r7, #100	@ 0x64
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd90      	pop	{r4, r7, pc}
 8007a44:	08024624 	.word	0x08024624
 8007a48:	10624dd3 	.word	0x10624dd3
 8007a4c:	08024658 	.word	0x08024658
 8007a50:	08024688 	.word	0x08024688
 8007a54:	08024690 	.word	0x08024690
 8007a58:	08024694 	.word	0x08024694

08007a5c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	613b      	str	r3, [r7, #16]
 8007a70:	e02d      	b.n	8007ace <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007a72:	4a1b      	ldr	r2, [pc, #108]	@ (8007ae0 <prvFindEntryIndex+0x84>)
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	216c      	movs	r1, #108	@ 0x6c
 8007a78:	fb01 f303 	mul.w	r3, r1, r3
 8007a7c:	4413      	add	r3, r2
 8007a7e:	3350      	adds	r3, #80	@ 0x50
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01f      	beq.n	8007ac6 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8007a86:	693b      	ldr	r3, [r7, #16]
 8007a88:	226c      	movs	r2, #108	@ 0x6c
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	3350      	adds	r3, #80	@ 0x50
 8007a90:	4a13      	ldr	r2, [pc, #76]	@ (8007ae0 <prvFindEntryIndex+0x84>)
 8007a92:	4413      	add	r3, r2
 8007a94:	68f9      	ldr	r1, [r7, #12]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f7f8 fc22 	bl	80002e0 <strcmp>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d112      	bne.n	8007ac8 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	490e      	ldr	r1, [pc, #56]	@ (8007ae0 <prvFindEntryIndex+0x84>)
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	206c      	movs	r0, #108	@ 0x6c
 8007aac:	fb00 f303 	mul.w	r3, r0, r3
 8007ab0:	440b      	add	r3, r1
 8007ab2:	3310      	adds	r3, #16
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d106      	bne.n	8007ac8 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 8007aba:	2301      	movs	r3, #1
 8007abc:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	601a      	str	r2, [r3, #0]
                    break;
 8007ac4:	e006      	b.n	8007ad4 <prvFindEntryIndex+0x78>
                continue;
 8007ac6:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	3301      	adds	r3, #1
 8007acc:	613b      	str	r3, [r7, #16]
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d9ce      	bls.n	8007a72 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8007ad4:	697b      	ldr	r3, [r7, #20]
    }
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	20000f4c 	.word	0x20000f4c

08007ae4 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	607a      	str	r2, [r7, #4]
 8007af0:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8007af6:	4a4a      	ldr	r2, [pc, #296]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	216c      	movs	r1, #108	@ 0x6c
 8007afc:	fb01 f303 	mul.w	r3, r1, r3
 8007b00:	4413      	add	r3, r2
 8007b02:	3364      	adds	r3, #100	@ 0x64
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 8007b0c:	4a44      	ldr	r2, [pc, #272]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	216c      	movs	r1, #108	@ 0x6c
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	4413      	add	r3, r2
 8007b18:	3360      	adds	r3, #96	@ 0x60
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	061a      	lsls	r2, r3, #24
 8007b1e:	4940      	ldr	r1, [pc, #256]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	206c      	movs	r0, #108	@ 0x6c
 8007b24:	fb00 f303 	mul.w	r3, r0, r3
 8007b28:	440b      	add	r3, r1
 8007b2a:	3360      	adds	r3, #96	@ 0x60
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	021b      	lsls	r3, r3, #8
 8007b30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b34:	431a      	orrs	r2, r3
 8007b36:	493a      	ldr	r1, [pc, #232]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	206c      	movs	r0, #108	@ 0x6c
 8007b3c:	fb00 f303 	mul.w	r3, r0, r3
 8007b40:	440b      	add	r3, r1
 8007b42:	3360      	adds	r3, #96	@ 0x60
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	0a1b      	lsrs	r3, r3, #8
 8007b48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	4934      	ldr	r1, [pc, #208]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	206c      	movs	r0, #108	@ 0x6c
 8007b54:	fb00 f303 	mul.w	r3, r0, r3
 8007b58:	440b      	add	r3, r1
 8007b5a:	3360      	adds	r3, #96	@ 0x60
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	0e1b      	lsrs	r3, r3, #24
 8007b60:	4313      	orrs	r3, r2
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d24a      	bcs.n	8007bfe <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007b68:	4a2d      	ldr	r2, [pc, #180]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	216c      	movs	r1, #108	@ 0x6c
 8007b6e:	fb01 f303 	mul.w	r3, r1, r3
 8007b72:	4413      	add	r3, r2
 8007b74:	3369      	adds	r3, #105	@ 0x69
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	4929      	ldr	r1, [pc, #164]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	206c      	movs	r0, #108	@ 0x6c
 8007b7e:	fb00 f202 	mul.w	r2, r0, r2
 8007b82:	440a      	add	r2, r1
 8007b84:	3268      	adds	r2, #104	@ 0x68
 8007b86:	7812      	ldrb	r2, [r2, #0]
 8007b88:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b8c:	fb01 f202 	mul.w	r2, r1, r2
 8007b90:	1a9b      	subs	r3, r3, r2
 8007b92:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007b94:	7cfb      	ldrb	r3, [r7, #19]
 8007b96:	f003 0303 	and.w	r3, r3, #3
 8007b9a:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 8007b9c:	7cfb      	ldrb	r3, [r7, #19]
 8007b9e:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8007ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	216c      	movs	r1, #108	@ 0x6c
 8007ba6:	fb01 f303 	mul.w	r3, r1, r3
 8007baa:	4413      	add	r3, r2
 8007bac:	3369      	adds	r3, #105	@ 0x69
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	b2d8      	uxtb	r0, r3
 8007bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	216c      	movs	r1, #108	@ 0x6c
 8007bba:	fb01 f303 	mul.w	r3, r1, r3
 8007bbe:	4413      	add	r3, r2
 8007bc0:	3369      	adds	r3, #105	@ 0x69
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	4613      	mov	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	4413      	add	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	216c      	movs	r1, #108	@ 0x6c
 8007bd4:	fb01 f202 	mul.w	r2, r1, r2
 8007bd8:	4413      	add	r3, r2
 8007bda:	4a11      	ldr	r2, [pc, #68]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007bdc:	4413      	add	r3, r2
 8007bde:	2214      	movs	r2, #20
 8007be0:	4619      	mov	r1, r3
 8007be2:	68b8      	ldr	r0, [r7, #8]
 8007be4:	f01a fba4 	bl	8022330 <memcpy>
            isRead = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d010      	beq.n	8007c14 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	6839      	ldr	r1, [r7, #0]
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f8dc 	bl	8007db4 <prvReadDNSCache>
 8007bfc:	e00a      	b.n	8007c14 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 8007bfe:	4a08      	ldr	r2, [pc, #32]	@ (8007c20 <prvGetCacheIPEntry+0x13c>)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	216c      	movs	r1, #108	@ 0x6c
 8007c04:	fb01 f303 	mul.w	r3, r1, r3
 8007c08:	4413      	add	r3, r2
 8007c0a:	3350      	adds	r3, #80	@ 0x50
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8007c10:	2300      	movs	r3, #0
 8007c12:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8007c14:	69fb      	ldr	r3, [r7, #28]
    }
 8007c16:	4618      	mov	r0, r3
 8007c18:	3720      	adds	r7, #32
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000f4c 	.word	0x20000f4c

08007c24 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8007c36:	4a26      	ldr	r2, [pc, #152]	@ (8007cd0 <prvUpdateCacheEntry+0xac>)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	216c      	movs	r1, #108	@ 0x6c
 8007c3c:	fb01 f303 	mul.w	r3, r1, r3
 8007c40:	4413      	add	r3, r2
 8007c42:	3368      	adds	r3, #104	@ 0x68
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	2b03      	cmp	r3, #3
 8007c48:	d81b      	bhi.n	8007c82 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007c4a:	4a21      	ldr	r2, [pc, #132]	@ (8007cd0 <prvUpdateCacheEntry+0xac>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	216c      	movs	r1, #108	@ 0x6c
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	3368      	adds	r3, #104	@ 0x68
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 8007c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8007cd0 <prvUpdateCacheEntry+0xac>)
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	216c      	movs	r1, #108	@ 0x6c
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	3368      	adds	r3, #104	@ 0x68
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	b2d8      	uxtb	r0, r3
 8007c70:	4a17      	ldr	r2, [pc, #92]	@ (8007cd0 <prvUpdateCacheEntry+0xac>)
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	216c      	movs	r1, #108	@ 0x6c
 8007c76:	fb01 f303 	mul.w	r3, r1, r3
 8007c7a:	4413      	add	r3, r2
 8007c7c:	3368      	adds	r3, #104	@ 0x68
 8007c7e:	4602      	mov	r2, r0
 8007c80:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8007c82:	697a      	ldr	r2, [r7, #20]
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	68fa      	ldr	r2, [r7, #12]
 8007c8e:	216c      	movs	r1, #108	@ 0x6c
 8007c90:	fb01 f202 	mul.w	r2, r1, r2
 8007c94:	4413      	add	r3, r2
 8007c96:	4a0e      	ldr	r2, [pc, #56]	@ (8007cd0 <prvUpdateCacheEntry+0xac>)
 8007c98:	4413      	add	r3, r2
 8007c9a:	2214      	movs	r2, #20
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f01a fb46 	bl	8022330 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8007ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8007cd0 <prvUpdateCacheEntry+0xac>)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	216c      	movs	r1, #108	@ 0x6c
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	4413      	add	r3, r2
 8007cb0:	3360      	adds	r3, #96	@ 0x60
 8007cb2:	68ba      	ldr	r2, [r7, #8]
 8007cb4:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007cb6:	4a06      	ldr	r2, [pc, #24]	@ (8007cd0 <prvUpdateCacheEntry+0xac>)
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	216c      	movs	r1, #108	@ 0x6c
 8007cbc:	fb01 f303 	mul.w	r3, r1, r3
 8007cc0:	4413      	add	r3, r2
 8007cc2:	3364      	adds	r3, #100	@ 0x64
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	601a      	str	r2, [r3, #0]
    }
 8007cc8:	bf00      	nop
 8007cca:	3718      	adds	r7, #24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	20000f4c 	.word	0x20000f4c

08007cd4 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	f7f8 fb06 	bl	80002f4 <strlen>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b0f      	cmp	r3, #15
 8007cec:	d859      	bhi.n	8007da2 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 8007cee:	4b2f      	ldr	r3, [pc, #188]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	226c      	movs	r2, #108	@ 0x6c
 8007cf4:	fb02 f303 	mul.w	r3, r2, r3
 8007cf8:	3350      	adds	r3, #80	@ 0x50
 8007cfa:	4a2d      	ldr	r2, [pc, #180]	@ (8007db0 <prvInsertCacheEntry+0xdc>)
 8007cfc:	4413      	add	r3, r2
 8007cfe:	2210      	movs	r2, #16
 8007d00:	68f9      	ldr	r1, [r7, #12]
 8007d02:	4618      	mov	r0, r3
 8007d04:	f01b faee 	bl	80232e4 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8007d08:	4b28      	ldr	r3, [pc, #160]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	226c      	movs	r2, #108	@ 0x6c
 8007d0e:	fb02 f303 	mul.w	r3, r2, r3
 8007d12:	4a27      	ldr	r2, [pc, #156]	@ (8007db0 <prvInsertCacheEntry+0xdc>)
 8007d14:	4413      	add	r3, r2
 8007d16:	2214      	movs	r2, #20
 8007d18:	6879      	ldr	r1, [r7, #4]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f01a fb08 	bl	8022330 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8007d20:	4b22      	ldr	r3, [pc, #136]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a22      	ldr	r2, [pc, #136]	@ (8007db0 <prvInsertCacheEntry+0xdc>)
 8007d26:	216c      	movs	r1, #108	@ 0x6c
 8007d28:	fb01 f303 	mul.w	r3, r1, r3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	3360      	adds	r3, #96	@ 0x60
 8007d30:	68ba      	ldr	r2, [r7, #8]
 8007d32:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007d34:	4b1d      	ldr	r3, [pc, #116]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a1d      	ldr	r2, [pc, #116]	@ (8007db0 <prvInsertCacheEntry+0xdc>)
 8007d3a:	216c      	movs	r1, #108	@ 0x6c
 8007d3c:	fb01 f303 	mul.w	r3, r1, r3
 8007d40:	4413      	add	r3, r2
 8007d42:	3364      	adds	r3, #100	@ 0x64
 8007d44:	683a      	ldr	r2, [r7, #0]
 8007d46:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8007d48:	4b18      	ldr	r3, [pc, #96]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a18      	ldr	r2, [pc, #96]	@ (8007db0 <prvInsertCacheEntry+0xdc>)
 8007d4e:	216c      	movs	r1, #108	@ 0x6c
 8007d50:	fb01 f303 	mul.w	r3, r1, r3
 8007d54:	4413      	add	r3, r2
 8007d56:	3368      	adds	r3, #104	@ 0x68
 8007d58:	2201      	movs	r2, #1
 8007d5a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 8007d5c:	4b13      	ldr	r3, [pc, #76]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a13      	ldr	r2, [pc, #76]	@ (8007db0 <prvInsertCacheEntry+0xdc>)
 8007d62:	216c      	movs	r1, #108	@ 0x6c
 8007d64:	fb01 f303 	mul.w	r3, r1, r3
 8007d68:	4413      	add	r3, r2
 8007d6a:	3369      	adds	r3, #105	@ 0x69
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8007d70:	4b0e      	ldr	r3, [pc, #56]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	226c      	movs	r2, #108	@ 0x6c
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	3314      	adds	r3, #20
 8007d7c:	4a0c      	ldr	r2, [pc, #48]	@ (8007db0 <prvInsertCacheEntry+0xdc>)
 8007d7e:	4413      	add	r3, r2
 8007d80:	223c      	movs	r2, #60	@ 0x3c
 8007d82:	2100      	movs	r1, #0
 8007d84:	4618      	mov	r0, r3
 8007d86:	f01a fbe0 	bl	802254a <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 8007d8a:	4b08      	ldr	r3, [pc, #32]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3301      	adds	r3, #1
 8007d90:	4a06      	ldr	r2, [pc, #24]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d92:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8007d94:	4b05      	ldr	r3, [pc, #20]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b04      	cmp	r3, #4
 8007d9a:	d102      	bne.n	8007da2 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 8007d9c:	4b03      	ldr	r3, [pc, #12]	@ (8007dac <prvInsertCacheEntry+0xd8>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8007da2:	bf00      	nop
 8007da4:	3710      	adds	r7, #16
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200010fc 	.word	0x200010fc
 8007db0:	20000f4c 	.word	0x20000f4c

08007db4 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007dca:	4a2e      	ldr	r2, [pc, #184]	@ (8007e84 <prvReadDNSCache+0xd0>)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	216c      	movs	r1, #108	@ 0x6c
 8007dd0:	fb01 f303 	mul.w	r3, r1, r3
 8007dd4:	4413      	add	r3, r2
 8007dd6:	3368      	adds	r3, #104	@ 0x68
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	2b04      	cmp	r3, #4
 8007de0:	d901      	bls.n	8007de6 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007de2:	2304      	movs	r3, #4
 8007de4:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
 8007dea:	e041      	b.n	8007e70 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 8007dec:	69fa      	ldr	r2, [r7, #28]
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	216c      	movs	r1, #108	@ 0x6c
 8007dfa:	fb01 f202 	mul.w	r2, r1, r2
 8007dfe:	4413      	add	r3, r2
 8007e00:	4a20      	ldr	r2, [pc, #128]	@ (8007e84 <prvReadDNSCache+0xd0>)
 8007e02:	4413      	add	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d002      	beq.n	8007e14 <prvReadDNSCache+0x60>
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d010      	beq.n	8007e34 <prvReadDNSCache+0x80>
 8007e12:	e01d      	b.n	8007e50 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	226c      	movs	r2, #108	@ 0x6c
 8007e1c:	fb02 f303 	mul.w	r3, r2, r3
 8007e20:	3350      	adds	r3, #80	@ 0x50
 8007e22:	4a18      	ldr	r2, [pc, #96]	@ (8007e84 <prvReadDNSCache+0xd0>)
 8007e24:	4413      	add	r3, r2
 8007e26:	68ba      	ldr	r2, [r7, #8]
 8007e28:	2102      	movs	r1, #2
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7ff fc8c 	bl	8007748 <pxNew_AddrInfo>
 8007e30:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8007e32:	e011      	b.n	8007e58 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	226c      	movs	r2, #108	@ 0x6c
 8007e38:	fb02 f303 	mul.w	r3, r2, r3
 8007e3c:	3350      	adds	r3, #80	@ 0x50
 8007e3e:	4a11      	ldr	r2, [pc, #68]	@ (8007e84 <prvReadDNSCache+0xd0>)
 8007e40:	4413      	add	r3, r2
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	210a      	movs	r1, #10
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7ff fc7e 	bl	8007748 <pxNew_AddrInfo>
 8007e4c:	6178      	str	r0, [r7, #20]
                        break;
 8007e4e:	e003      	b.n	8007e58 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8007e50:	480d      	ldr	r0, [pc, #52]	@ (8007e88 <prvReadDNSCache+0xd4>)
 8007e52:	f01a f851 	bl	8021ef8 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8007e56:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00d      	beq.n	8007e7a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	331c      	adds	r3, #28
 8007e68:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	69fa      	ldr	r2, [r7, #28]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	429a      	cmp	r2, r3
 8007e76:	d3b9      	bcc.n	8007dec <prvReadDNSCache+0x38>
        }
    }
 8007e78:	e000      	b.n	8007e7c <prvReadDNSCache+0xc8>
                break;
 8007e7a:	bf00      	nop
    }
 8007e7c:	bf00      	nop
 8007e7e:	3720      	adds	r7, #32
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	20000f4c 	.word	0x20000f4c
 8007e88:	080246c8 	.word	0x080246c8

08007e8c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b08a      	sub	sp, #40	@ 0x28
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8007e96:	2300      	movs	r3, #0
 8007e98:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 8007e9a:	4b28      	ldr	r3, [pc, #160]	@ (8007f3c <xDNSDoCallback+0xb0>)
 8007e9c:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	881b      	ldrh	r3, [r3, #0]
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 8007eac:	2300      	movs	r3, #0
 8007eae:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 8007eb0:	f7fc fac2 	bl	8004438 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	623b      	str	r3, [r7, #32]
 8007eba:	e029      	b.n	8007f10 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 8007ec2:	6a3b      	ldr	r3, [r7, #32]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d101      	bne.n	8007ed0 <xDNSDoCallback+0x44>
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e000      	b.n	8007ed2 <xDNSDoCallback+0x46>
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d117      	bne.n	8007f0a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	3314      	adds	r3, #20
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7fb fa5a 	bl	80033a4 <uxListRemove>
                    vPortFree( pxCallback );
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	f7fe faf3 	bl	80064dc <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007ef6:	4b12      	ldr	r3, [pc, #72]	@ (8007f40 <xDNSDoCallback+0xb4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 8007efe:	2000      	movs	r0, #0
 8007f00:	f002 f9ca 	bl	800a298 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8007f04:	2301      	movs	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8007f08:	e006      	b.n	8007f18 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8007f10:	6a3a      	ldr	r2, [r7, #32]
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d1d1      	bne.n	8007ebc <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8007f18:	f7fc fa9c 	bl	8004454 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 8007f1c:	69fb      	ldr	r3, [r7, #28]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d006      	beq.n	8007f30 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	683a      	ldr	r2, [r7, #0]
 8007f2c:	69b9      	ldr	r1, [r7, #24]
 8007f2e:	4798      	blx	r3
        }

        return xResult;
 8007f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007f32:	4618      	mov	r0, r3
 8007f34:	3728      	adds	r7, #40	@ 0x28
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20001108 	.word	0x20001108
 8007f40:	20001100 	.word	0x20001100

08007f44 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b08c      	sub	sp, #48	@ 0x30
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 8007f4c:	4b40      	ldr	r3, [pc, #256]	@ (8008050 <vDNSCheckCallBack+0x10c>)
 8007f4e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8007f50:	f107 030c 	add.w	r3, r7, #12
 8007f54:	4618      	mov	r0, r3
 8007f56:	f7fb f99b 	bl	8003290 <vListInitialise>

        vTaskSuspendAll();
 8007f5a:	f7fc fa6d 	bl	8004438 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f60:	685b      	ldr	r3, [r3, #4]
 8007f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f64:	e02e      	b.n	8007fc4 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f68:	68db      	ldr	r3, [r3, #12]
 8007f6a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8007f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d00d      	beq.n	8007f94 <vDNSCheckCallBack+0x50>
 8007f78:	6a3b      	ldr	r3, [r7, #32]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d108      	bne.n	8007f94 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007f82:	6a3b      	ldr	r3, [r7, #32]
 8007f84:	3314      	adds	r3, #20
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7fb fa0c 	bl	80033a4 <uxListRemove>
                    vPortFree( pxCallback );
 8007f8c:	6a38      	ldr	r0, [r7, #32]
 8007f8e:	f7fe faa5 	bl	80064dc <vPortFree>
 8007f92:	e017      	b.n	8007fc4 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	3308      	adds	r3, #8
 8007f98:	6a3a      	ldr	r2, [r7, #32]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fc ff3f 	bl	8004e20 <xTaskCheckForTimeOut>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d00d      	beq.n	8007fc4 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007fa8:	6a3b      	ldr	r3, [r7, #32]
 8007faa:	3314      	adds	r3, #20
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fb f9f9 	bl	80033a4 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 8007fb2:	6a3b      	ldr	r3, [r7, #32]
 8007fb4:	f103 0214 	add.w	r2, r3, #20
 8007fb8:	f107 030c 	add.w	r3, r7, #12
 8007fbc:	4611      	mov	r1, r2
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7fb f993 	bl	80032ea <vListInsertEnd>
                 pxIterator != xEnd; )
 8007fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d1cc      	bne.n	8007f66 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 8007fcc:	f7fc fa42 	bl	8004454 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d030      	beq.n	8008038 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	3308      	adds	r3, #8
 8007fdc:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 8007fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fe4:	e024      	b.n	8008030 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8007fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d009      	beq.n	800800e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 8007ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008000:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008006:	6911      	ldr	r1, [r2, #16]
 8008008:	2200      	movs	r2, #0
 800800a:	4798      	blx	r3
 800800c:	e008      	b.n	8008020 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800800e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008014:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8008018:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800801a:	6911      	ldr	r1, [r2, #16]
 800801c:	2200      	movs	r2, #0
 800801e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8008020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008022:	3314      	adds	r3, #20
 8008024:	4618      	mov	r0, r3
 8008026:	f7fb f9bd 	bl	80033a4 <uxListRemove>
                vPortFree( pxCallback );
 800802a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800802c:	f7fe fa56 	bl	80064dc <vPortFree>
                 pxIterator != xEnd;
 8008030:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	429a      	cmp	r2, r3
 8008036:	d1d6      	bne.n	8007fe6 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8008038:	4b06      	ldr	r3, [pc, #24]	@ (8008054 <vDNSCheckCallBack+0x110>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d102      	bne.n	8008046 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8008040:	2000      	movs	r0, #0
 8008042:	f002 f929 	bl	800a298 <vIPSetDNSTimerEnableState>
        }
    }
 8008046:	bf00      	nop
 8008048:	3730      	adds	r7, #48	@ 0x30
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	bf00      	nop
 8008050:	20001108 	.word	0x20001108
 8008054:	20001100 	.word	0x20001100

08008058 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 800805c:	4802      	ldr	r0, [pc, #8]	@ (8008068 <vDNSCallbackInitialise+0x10>)
 800805e:	f7fb f917 	bl	8003290 <vListInitialise>
    }
 8008062:	bf00      	nop
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20001100 	.word	0x20001100

0800806c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 800806c:	b480      	push	{r7}
 800806e:	b089      	sub	sp, #36	@ 0x24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8008076:	2300      	movs	r3, #0
 8008078:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800807a:	2300      	movs	r3, #0
 800807c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	695b      	ldr	r3, [r3, #20]
 8008082:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68db      	ldr	r3, [r3, #12]
 8008088:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d102      	bne.n	8008096 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 8008090:	2300      	movs	r3, #0
 8008092:	61bb      	str	r3, [r7, #24]
 8008094:	e069      	b.n	800816a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008096:	68fa      	ldr	r2, [r7, #12]
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	4413      	add	r3, r2
 800809c:	781b      	ldrb	r3, [r3, #0]
 800809e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80080a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80080a4:	d144      	bne.n	8008130 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d903      	bls.n	80080b4 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	3302      	adds	r3, #2
 80080b0:	61bb      	str	r3, [r7, #24]
 80080b2:	e05a      	b.n	800816a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 80080b4:	2300      	movs	r3, #0
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	e057      	b.n	800816a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d008      	beq.n	80080d2 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 80080c0:	687a      	ldr	r2, [r7, #4]
 80080c2:	69fb      	ldr	r3, [r7, #28]
 80080c4:	4413      	add	r3, r2
 80080c6:	3334      	adds	r3, #52	@ 0x34
 80080c8:	222e      	movs	r2, #46	@ 0x2e
 80080ca:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	3301      	adds	r3, #1
 80080d0:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	4413      	add	r3, r2
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	3301      	adds	r3, #1
 80080e0:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 80080e2:	69ba      	ldr	r2, [r7, #24]
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4413      	add	r3, r2
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d202      	bcs.n	80080f4 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 80080ee:	2300      	movs	r3, #0
 80080f0:	61bb      	str	r3, [r7, #24]
                    break;
 80080f2:	e027      	b.n	8008144 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	4413      	add	r3, r2
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	429a      	cmp	r2, r3
 80080fe:	d812      	bhi.n	8008126 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
                    break;
 8008104:	e01e      	b.n	8008144 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	4413      	add	r3, r2
 800810c:	7819      	ldrb	r1, [r3, #0]
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	69fb      	ldr	r3, [r7, #28]
 8008112:	4413      	add	r3, r2
 8008114:	3334      	adds	r3, #52	@ 0x34
 8008116:	460a      	mov	r2, r1
 8008118:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800811a:	69fb      	ldr	r3, [r7, #28]
 800811c:	3301      	adds	r3, #1
 800811e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	3301      	adds	r3, #1
 8008124:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	1e5a      	subs	r2, r3, #1
 800812a:	617a      	str	r2, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1ea      	bne.n	8008106 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8008130:	69ba      	ldr	r2, [r7, #24]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	429a      	cmp	r2, r3
 8008136:	d205      	bcs.n	8008144 <DNS_ReadNameField+0xd8>
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	4413      	add	r3, r2
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d1ba      	bne.n	80080ba <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00f      	beq.n	800816a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 800814a:	69ba      	ldr	r2, [r7, #24]
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	429a      	cmp	r2, r3
 8008150:	d209      	bcs.n	8008166 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	4413      	add	r3, r2
 8008158:	3334      	adds	r3, #52	@ 0x34
 800815a:	2200      	movs	r2, #0
 800815c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 800815e:	69bb      	ldr	r3, [r7, #24]
 8008160:	3301      	adds	r3, #1
 8008162:	61bb      	str	r3, [r7, #24]
 8008164:	e001      	b.n	800816a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8008166:	2300      	movs	r3, #0
 8008168:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 800816a:	69bb      	ldr	r3, [r7, #24]
    }
 800816c:	4618      	mov	r0, r3
 800816e:	3724      	adds	r7, #36	@ 0x24
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	613b      	str	r3, [r7, #16]
 8008194:	e03f      	b.n	8008216 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 8008196:	687a      	ldr	r2, [r7, #4]
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	4413      	add	r3, r2
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80081a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80081a4:	d11f      	bne.n	80081e6 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	2b02      	cmp	r3, #2
 80081aa:	d903      	bls.n	80081b4 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	3302      	adds	r3, #2
 80081b0:	613b      	str	r3, [r7, #16]
 80081b2:	e030      	b.n	8008216 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	613b      	str	r3, [r7, #16]
 80081b8:	e02d      	b.n	8008216 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	4413      	add	r3, r2
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	3301      	adds	r3, #1
 80081c4:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 80081c6:	697a      	ldr	r2, [r7, #20]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	429a      	cmp	r2, r3
 80081cc:	d908      	bls.n	80081e0 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 80081ce:	697a      	ldr	r2, [r7, #20]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	1ad3      	subs	r3, r2, r3
 80081d4:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80081d6:	693a      	ldr	r2, [r7, #16]
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	4413      	add	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
 80081de:	e002      	b.n	80081e6 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	613b      	str	r3, [r7, #16]
                    break;
 80081e4:	e008      	b.n	80081f8 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 80081e6:	687a      	ldr	r2, [r7, #4]
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	4413      	add	r3, r2
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d002      	beq.n	80081f8 <DNS_SkipNameField+0x80>
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b01      	cmp	r3, #1
 80081f6:	d8e0      	bhi.n	80081ba <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00b      	beq.n	8008216 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 80081fe:	687a      	ldr	r2, [r7, #4]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	4413      	add	r3, r2
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d103      	bne.n	8008212 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]
 8008210:	e001      	b.n	8008216 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8008216:	693b      	ldr	r3, [r7, #16]
    }
 8008218:	4618      	mov	r0, r3
 800821a:	371c      	adds	r7, #28
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8008224:	b5b0      	push	{r4, r5, r7, lr}
 8008226:	b0f6      	sub	sp, #472	@ 0x1d8
 8008228:	af00      	add	r7, sp, #0
 800822a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800822e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8008232:	6020      	str	r0, [r4, #0]
 8008234:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8008238:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 800823c:	6001      	str	r1, [r0, #0]
 800823e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8008242:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8008246:	600a      	str	r2, [r1, #0]
 8008248:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800824c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8008250:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8008252:	2301      	movs	r3, #1
 8008254:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8008258:	2300      	movs	r3, #0
 800825a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800825e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008262:	224c      	movs	r2, #76	@ 0x4c
 8008264:	2100      	movs	r1, #0
 8008266:	4618      	mov	r0, r3
 8008268:	f01a f96f 	bl	802254a <memset>
        xSet.usPortNumber = usPort;
 800826c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8008270:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8008274:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008278:	3344      	adds	r3, #68	@ 0x44
 800827a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 800827e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008282:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 800828c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008290:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b0b      	cmp	r3, #11
 8008298:	d803      	bhi.n	80082a2 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 800829a:	2300      	movs	r3, #0
 800829c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80082a0:	e35a      	b.n	8008958 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 80082a2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082a6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 80082b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 80082be:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082c2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 80082d2:	2300      	movs	r3, #0
 80082d4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 80082d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082dc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 80082e6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80082ea:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	330c      	adds	r3, #12
 80082f2:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 80082f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80082fa:	3b0c      	subs	r3, #12
 80082fc:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8008300:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008304:	889b      	ldrh	r3, [r3, #4]
 8008306:	b29b      	uxth	r3, r3
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	b21a      	sxth	r2, r3
 800830c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008310:	889b      	ldrh	r3, [r3, #4]
 8008312:	b29b      	uxth	r3, r3
 8008314:	0a1b      	lsrs	r3, r3, #8
 8008316:	b29b      	uxth	r3, r3
 8008318:	b21b      	sxth	r3, r3
 800831a:	4313      	orrs	r3, r2
 800831c:	b21b      	sxth	r3, r3
 800831e:	b29b      	uxth	r3, r3
 8008320:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8008324:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008328:	88db      	ldrh	r3, [r3, #6]
 800832a:	b29b      	uxth	r3, r3
 800832c:	021b      	lsls	r3, r3, #8
 800832e:	b21a      	sxth	r2, r3
 8008330:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008334:	88db      	ldrh	r3, [r3, #6]
 8008336:	b29b      	uxth	r3, r3
 8008338:	0a1b      	lsrs	r3, r3, #8
 800833a:	b29b      	uxth	r3, r3
 800833c:	b21b      	sxth	r3, r3
 800833e:	4313      	orrs	r3, r2
 8008340:	b21b      	sxth	r3, r3
 8008342:	b29b      	uxth	r3, r3
 8008344:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8008348:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800834c:	885b      	ldrh	r3, [r3, #2]
 800834e:	b29b      	uxth	r3, r3
 8008350:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8008354:	2b80      	cmp	r3, #128	@ 0x80
 8008356:	d11b      	bne.n	8008390 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8008358:	2301      	movs	r3, #1
 800835a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 800835e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8008362:	2b00      	cmp	r3, #0
 8008364:	d103      	bne.n	800836e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8008366:	2300      	movs	r3, #0
 8008368:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800836c:	e2f4      	b.n	8008958 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 800836e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008372:	2b00      	cmp	r3, #0
 8008374:	d114      	bne.n	80083a0 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8008376:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800837a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 800837e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008382:	2110      	movs	r1, #16
 8008384:	4618      	mov	r0, r3
 8008386:	f7ff fe71 	bl	800806c <DNS_ReadNameField>
 800838a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 800838e:	e007      	b.n	80083a0 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 8008390:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 8008398:	2300      	movs	r3, #0
 800839a:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800839e:	e2db      	b.n	8008958 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 80083a0:	2300      	movs	r3, #0
 80083a2:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 80083a6:	e064      	b.n	8008472 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 80083a8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d103      	bne.n	80083b8 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80083b0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083b4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 80083b8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d108      	bne.n	80083d2 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 80083c0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80083c4:	2110      	movs	r1, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fe50 	bl	800806c <DNS_ReadNameField>
 80083cc:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80083d0:	e009      	b.n	80083e6 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 80083d2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80083d6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80083da:	4611      	mov	r1, r2
 80083dc:	4618      	mov	r0, r3
 80083de:	f7ff fecb 	bl	8008178 <DNS_SkipNameField>
 80083e2:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 80083e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d103      	bne.n	80083f6 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 80083ee:	2300      	movs	r3, #0
 80083f0:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80083f4:	e043      	b.n	800847e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 80083f6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80083fa:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80083fe:	4413      	add	r3, r2
 8008400:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8008404:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008408:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800840c:	4413      	add	r3, r2
 800840e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8008412:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8008416:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800841a:	1ad3      	subs	r3, r2, r3
 800841c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8008420:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008424:	2b03      	cmp	r3, #3
 8008426:	d91b      	bls.n	8008460 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8008428:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800842c:	4618      	mov	r0, r3
 800842e:	f002 fa58 	bl	800a8e2 <usChar2u16>
 8008432:	4603      	mov	r3, r0
 8008434:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8008438:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800843c:	3302      	adds	r3, #2
 800843e:	4618      	mov	r0, r3
 8008440:	f002 fa4f 	bl	800a8e2 <usChar2u16>
 8008444:	4603      	mov	r3, r0
 8008446:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 800844a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800844e:	3304      	adds	r3, #4
 8008450:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8008454:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8008458:	3b04      	subs	r3, #4
 800845a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800845e:	e003      	b.n	8008468 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8008466:	e00a      	b.n	800847e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8008468:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800846c:	3301      	adds	r3, #1
 800846e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8008472:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8008476:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 800847a:	429a      	cmp	r2, r3
 800847c:	d394      	bcc.n	80083a8 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 800847e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8008482:	2b00      	cmp	r3, #0
 8008484:	f000 8265 	beq.w	8008952 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8008488:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800848c:	2b01      	cmp	r3, #1
 800848e:	d10d      	bne.n	80084ac <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8008490:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8008494:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008498:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800849c:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80084a0:	6819      	ldr	r1, [r3, #0]
 80084a2:	f000 fa73 	bl	800898c <parseDNSAnswer>
 80084a6:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 80084aa:	e255      	b.n	8008958 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80084ac:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d004      	beq.n	80084be <DNS_ParseDNSReply+0x29a>
 80084b4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80084b8:	2b1c      	cmp	r3, #28
 80084ba:	f040 824d 	bne.w	8008958 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 80084be:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	f040 8248 	bne.w	8008958 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 80084c8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80084cc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	f001 ff9f 	bl	800a414 <pxUDPPayloadBuffer_to_NetworkBuffer>
 80084d6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 80084da:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d103      	bne.n	80084ea <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 80084e2:	48c4      	ldr	r0, [pc, #784]	@ (80087f4 <DNS_ParseDNSReply+0x5d0>)
 80084e4:	f019 fd08 	bl	8021ef8 <lUDPLoggingPrintf>
                            break;
 80084e8:	e236      	b.n	8008958 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 80084ea:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80084ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f0:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 80084f4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80084f8:	6812      	ldr	r2, [r2, #0]
 80084fa:	1ad3      	subs	r3, r2, r3
 80084fc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8008500:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008504:	2b2a      	cmp	r3, #42	@ 0x2a
 8008506:	d003      	beq.n	8008510 <DNS_ParseDNSReply+0x2ec>
 8008508:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800850c:	2b3e      	cmp	r3, #62	@ 0x3e
 800850e:	d101      	bne.n	8008514 <DNS_ParseDNSReply+0x2f0>
 8008510:	2301      	movs	r3, #1
 8008512:	e000      	b.n	8008516 <DNS_ParseDNSReply+0x2f2>
 8008514:	2300      	movs	r3, #0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d104      	bne.n	8008524 <DNS_ParseDNSReply+0x300>
 800851a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 800851e:	48b6      	ldr	r0, [pc, #728]	@ (80087f8 <DNS_ParseDNSReply+0x5d4>)
 8008520:	f7f9 fa0a 	bl	8001938 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008524:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 8213 	beq.w	8008956 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008530:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008536:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 800853a:	f107 0314 	add.w	r3, r7, #20
 800853e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8008542:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8008546:	4618      	mov	r0, r3
 8008548:	f019 fef2 	bl	8022330 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 800854c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008550:	461a      	mov	r2, r3
 8008552:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008556:	3334      	adds	r3, #52	@ 0x34
 8008558:	4619      	mov	r1, r3
 800855a:	48a8      	ldr	r0, [pc, #672]	@ (80087fc <DNS_ParseDNSReply+0x5d8>)
 800855c:	f019 fccc 	bl	8021ef8 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8008560:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8008564:	b2da      	uxtb	r2, r3
 8008566:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800856a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800856e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8008572:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8008576:	3334      	adds	r3, #52	@ 0x34
 8008578:	4618      	mov	r0, r3
 800857a:	f7f9 fa71 	bl	8001a60 <xApplicationDNSQueryHook>
 800857e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8008582:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8008586:	2b00      	cmp	r3, #0
 8008588:	d014      	beq.n	80085b4 <DNS_ParseDNSReply+0x390>
 800858a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800858e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008592:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008596:	f003 0304 	and.w	r3, r3, #4
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b00      	cmp	r3, #0
 800859e:	d109      	bne.n	80085b4 <DNS_ParseDNSReply+0x390>
 80085a0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085a4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d102      	bne.n	80085b4 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 80085ae:	2300      	movs	r3, #0
 80085b0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 80085b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 81cd 	beq.w	8008958 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 80085be:	2300      	movs	r3, #0
 80085c0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 80085c4:	2300      	movs	r3, #0
 80085c6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 80085ca:	4b8d      	ldr	r3, [pc, #564]	@ (8008800 <DNS_ParseDNSReply+0x5dc>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d164      	bne.n	800869c <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 80085d2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80085d6:	f001 fbd7 	bl	8009d88 <uxIPHeaderSizePacket>
 80085da:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 80085dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80085e0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 80085e8:	3316      	adds	r3, #22
 80085ea:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 80085ee:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80085f2:	2b1c      	cmp	r3, #28
 80085f4:	d103      	bne.n	80085fe <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 80085f6:	231c      	movs	r3, #28
 80085f8:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80085fc:	e002      	b.n	8008604 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 80085fe:	2310      	movs	r3, #16
 8008600:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8008604:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008608:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800860c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 800860e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008612:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8008616:	4413      	add	r3, r2
 8008618:	4619      	mov	r1, r3
 800861a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800861e:	f001 fe65 	bl	800a2ec <pxDuplicateNetworkBufferWithDescriptor>
 8008622:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8008626:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800862a:	2b00      	cmp	r3, #0
 800862c:	d032      	beq.n	8008694 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 800862e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008632:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008636:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	1ad3      	subs	r3, r2, r3
 800863e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8008642:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8008646:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800864a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8008656:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800865a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800865e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8008662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008664:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8008668:	4413      	add	r3, r2
 800866a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 800866e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008672:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008676:	4413      	add	r3, r2
 8008678:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 800867c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008680:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8008684:	4413      	add	r3, r2
 8008686:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 800868a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800868e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8008692:	e00b      	b.n	80086ac <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8008694:	2300      	movs	r3, #0
 8008696:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800869a:	e007      	b.n	80086ac <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800869c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80086a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086a2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80086a6:	4413      	add	r3, r2
 80086a8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 80086ac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 8151 	beq.w	8008958 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 80086b6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80086ba:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 80086be:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80086c2:	3302      	adds	r3, #2
 80086c4:	2280      	movs	r2, #128	@ 0x80
 80086c6:	701a      	strb	r2, [r3, #0]
 80086c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80086cc:	3303      	adds	r3, #3
 80086ce:	2200      	movs	r2, #0
 80086d0:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 80086d2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80086d6:	3306      	adds	r3, #6
 80086d8:	2200      	movs	r2, #0
 80086da:	701a      	strb	r2, [r3, #0]
 80086dc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80086e0:	3307      	adds	r3, #7
 80086e2:	2201      	movs	r2, #1
 80086e4:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 80086e6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80086ea:	3308      	adds	r3, #8
 80086ec:	2200      	movs	r2, #0
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80086f4:	3309      	adds	r3, #9
 80086f6:	2200      	movs	r2, #0
 80086f8:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 80086fa:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80086fe:	330a      	adds	r3, #10
 8008700:	2200      	movs	r2, #0
 8008702:	701a      	strb	r2, [r3, #0]
 8008704:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8008708:	330b      	adds	r3, #11
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800870e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008712:	22c0      	movs	r2, #192	@ 0xc0
 8008714:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8008716:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800871a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800871e:	1ad3      	subs	r3, r2, r3
 8008720:	b2da      	uxtb	r2, r3
 8008722:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008726:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8008728:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800872c:	0a1b      	lsrs	r3, r3, #8
 800872e:	b29a      	uxth	r2, r3
 8008730:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008734:	3302      	adds	r3, #2
 8008736:	b2d2      	uxtb	r2, r2
 8008738:	701a      	strb	r2, [r3, #0]
 800873a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 800873e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008742:	3303      	adds	r3, #3
 8008744:	b2d2      	uxtb	r2, r2
 8008746:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8008748:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800874c:	3304      	adds	r3, #4
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
 8008752:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008756:	3305      	adds	r3, #5
 8008758:	2201      	movs	r2, #1
 800875a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800875c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008760:	3306      	adds	r3, #6
 8008762:	2200      	movs	r2, #0
 8008764:	701a      	strb	r2, [r3, #0]
 8008766:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800876a:	3307      	adds	r3, #7
 800876c:	2200      	movs	r2, #0
 800876e:	701a      	strb	r2, [r3, #0]
 8008770:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008774:	3308      	adds	r3, #8
 8008776:	2201      	movs	r2, #1
 8008778:	701a      	strb	r2, [r3, #0]
 800877a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800877e:	3309      	adds	r3, #9
 8008780:	222c      	movs	r2, #44	@ 0x2c
 8008782:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8008784:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008788:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	b29b      	uxth	r3, r3
 8008790:	3310      	adds	r3, #16
 8008792:	b29b      	uxth	r3, r3
 8008794:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8008798:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800879c:	2b1c      	cmp	r3, #28
 800879e:	d131      	bne.n	8008804 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 80087a0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80087a4:	330a      	adds	r3, #10
 80087a6:	2200      	movs	r2, #0
 80087a8:	701a      	strb	r2, [r3, #0]
 80087aa:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80087ae:	330b      	adds	r3, #11
 80087b0:	2210      	movs	r2, #16
 80087b2:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80087b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80087b8:	f103 020c 	add.w	r2, r3, #12
 80087bc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80087c0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80087c4:	4615      	mov	r5, r2
 80087c6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80087ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087cc:	6028      	str	r0, [r5, #0]
 80087ce:	6069      	str	r1, [r5, #4]
 80087d0:	60aa      	str	r2, [r5, #8]
 80087d2:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 80087d4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80087d8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80087dc:	1ad3      	subs	r3, r2, r3
 80087de:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 80087e2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80087e6:	b29b      	uxth	r3, r3
 80087e8:	331c      	adds	r3, #28
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 80087f0:	e09a      	b.n	8008928 <DNS_ParseDNSReply+0x704>
 80087f2:	bf00      	nop
 80087f4:	08024770 	.word	0x08024770
 80087f8:	080247a4 	.word	0x080247a4
 80087fc:	080247d8 	.word	0x080247d8
 8008800:	08027690 	.word	0x08027690
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8008804:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008808:	330a      	adds	r3, #10
 800880a:	2200      	movs	r2, #0
 800880c:	701a      	strb	r2, [r3, #0]
 800880e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008812:	330b      	adds	r3, #11
 8008814:	2204      	movs	r2, #4
 8008816:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8008818:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800881c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	061a      	lsls	r2, r3, #24
 8008824:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008828:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	021b      	lsls	r3, r3, #8
 8008830:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008834:	431a      	orrs	r2, r3
 8008836:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800883a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	0a1b      	lsrs	r3, r3, #8
 8008842:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008846:	431a      	orrs	r2, r3
 8008848:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800884c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	0e1b      	lsrs	r3, r3, #24
 8008854:	4313      	orrs	r3, r2
 8008856:	0e1a      	lsrs	r2, r3, #24
 8008858:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800885c:	330c      	adds	r3, #12
 800885e:	b2d2      	uxtb	r2, r2
 8008860:	701a      	strb	r2, [r3, #0]
 8008862:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008866:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	061a      	lsls	r2, r3, #24
 800886e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008872:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	021b      	lsls	r3, r3, #8
 800887a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800887e:	431a      	orrs	r2, r3
 8008880:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008884:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	0a1b      	lsrs	r3, r3, #8
 800888c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008890:	431a      	orrs	r2, r3
 8008892:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8008896:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	0e1b      	lsrs	r3, r3, #24
 800889e:	4313      	orrs	r3, r2
 80088a0:	0c1a      	lsrs	r2, r3, #16
 80088a2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80088a6:	330d      	adds	r3, #13
 80088a8:	b2d2      	uxtb	r2, r2
 80088aa:	701a      	strb	r2, [r3, #0]
 80088ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088b0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	061a      	lsls	r2, r3, #24
 80088b8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088bc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	021b      	lsls	r3, r3, #8
 80088c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80088c8:	431a      	orrs	r2, r3
 80088ca:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088ce:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	0a1b      	lsrs	r3, r3, #8
 80088d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80088da:	431a      	orrs	r2, r3
 80088dc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088e0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	0e1b      	lsrs	r3, r3, #24
 80088e8:	4313      	orrs	r3, r2
 80088ea:	0a1a      	lsrs	r2, r3, #8
 80088ec:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80088f0:	330e      	adds	r3, #14
 80088f2:	b2d2      	uxtb	r2, r2
 80088f4:	701a      	strb	r2, [r3, #0]
 80088f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80088fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	0e1a      	lsrs	r2, r3, #24
 8008902:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008906:	330f      	adds	r3, #15
 8008908:	b2d2      	uxtb	r2, r2
 800890a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 800890c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8008910:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8008914:	1ad3      	subs	r3, r2, r3
 8008916:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 800891a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800891e:	b29b      	uxth	r3, r3
 8008920:	3310      	adds	r3, #16
 8008922:	b29b      	uxth	r3, r3
 8008924:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8008928:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 800892c:	4619      	mov	r1, r3
 800892e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8008932:	f000 fa21 	bl	8008d78 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8008936:	2100      	movs	r1, #0
 8008938:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800893c:	f001 f924 	bl	8009b88 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8008940:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8008944:	2b00      	cmp	r3, #0
 8008946:	d007      	beq.n	8008958 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8008948:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 800894c:	f00e fc2c 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
 8008950:	e002      	b.n	8008958 <DNS_ParseDNSReply+0x734>
                    break;
 8008952:	bf00      	nop
 8008954:	e000      	b.n	8008958 <DNS_ParseDNSReply+0x734>
                            break;
 8008956:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8008958:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8008960:	2300      	movs	r3, #0
 8008962:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8008966:	e009      	b.n	800897c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8008968:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800896c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d102      	bne.n	800897c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8008976:	2300      	movs	r3, #0
 8008978:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 800897c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8008980:	4618      	mov	r0, r3
 8008982:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8008986:	46bd      	mov	sp, r7
 8008988:	bdb0      	pop	{r4, r5, r7, pc}
 800898a:	bf00      	nop

0800898c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b0a7      	sub	sp, #156	@ 0x9c
 8008990:	af02      	add	r7, sp, #8
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8008998:	2300      	movs	r3, #0
 800899a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 800899e:	2304      	movs	r3, #4
 80089a0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 80089a4:	2301      	movs	r3, #1
 80089a6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 80089b0:	2300      	movs	r3, #0
 80089b2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 80089b6:	e1c1      	b.n	8008d3c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 80089b8:	2300      	movs	r3, #0
 80089ba:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80089c0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80089c4:	429a      	cmp	r2, r3
 80089c6:	f240 81c1 	bls.w	8008d4c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	68da      	ldr	r2, [r3, #12]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	695b      	ldr	r3, [r3, #20]
 80089d2:	4619      	mov	r1, r3
 80089d4:	4610      	mov	r0, r2
 80089d6:	f7ff fbcf 	bl	8008178 <DNS_SkipNameField>
 80089da:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 80089dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d103      	bne.n	80089ea <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 80089e2:	2300      	movs	r3, #0
 80089e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 80089e8:	e1b1      	b.n	8008d4e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d005      	beq.n	80089fc <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089f6:	441a      	add	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a02:	441a      	add	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a0e:	1ad2      	subs	r2, r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d803      	bhi.n	8008a24 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008a22:	e194      	b.n	8008d4e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	68db      	ldr	r3, [r3, #12]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	f001 ff5a 	bl	800a8e2 <usChar2u16>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	461a      	mov	r2, r3
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	8b1b      	ldrh	r3, [r3, #24]
 8008a3a:	2b1c      	cmp	r3, #28
 8008a3c:	d10c      	bne.n	8008a58 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2210      	movs	r2, #16
 8008a42:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	695a      	ldr	r2, [r3, #20]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6a1b      	ldr	r3, [r3, #32]
 8008a4c:	330a      	adds	r3, #10
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d323      	bcc.n	8008a9a <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008a52:	2301      	movs	r3, #1
 8008a54:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a56:	e020      	b.n	8008a9a <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	8b1b      	ldrh	r3, [r3, #24]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d11c      	bne.n	8008a9a <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	2204      	movs	r2, #4
 8008a64:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	695a      	ldr	r2, [r3, #20]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	330a      	adds	r3, #10
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d312      	bcc.n	8008a9a <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	330a      	adds	r3, #10
 8008a7a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 8008a7c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8008a80:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	461a      	mov	r2, r3
 8008a88:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8008a8a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008a8c:	f019 fc50 	bl	8022330 <memcpy>

                    if( ulTestAddress != 0U )
 8008a90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8008a96:	2301      	movs	r3, #1
 8008a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8008a9a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 810d 	beq.w	8008cbc <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	68db      	ldr	r3, [r3, #12]
 8008aa6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008aa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008aaa:	891b      	ldrh	r3, [r3, #8]
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	021b      	lsls	r3, r3, #8
 8008ab0:	b21a      	sxth	r2, r3
 8008ab2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ab4:	891b      	ldrh	r3, [r3, #8]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	0a1b      	lsrs	r3, r3, #8
 8008aba:	b29b      	uxth	r3, r3
 8008abc:	b21b      	sxth	r3, r3
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8008ac6:	b21b      	sxth	r3, r3
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	f040 80d0 	bne.w	8008c6e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	2b10      	cmp	r3, #16
 8008ad4:	d11c      	bne.n	8008b10 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8008adc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8008ae0:	6818      	ldr	r0, [r3, #0]
 8008ae2:	6859      	ldr	r1, [r3, #4]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d009      	beq.n	8008b04 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	3334      	adds	r3, #52	@ 0x34
 8008af4:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008af8:	210a      	movs	r1, #10
 8008afa:	4618      	mov	r0, r3
 8008afc:	f7fe fe24 	bl	8007748 <pxNew_AddrInfo>
 8008b00:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8008b04:	2301      	movs	r3, #1
 8008b06:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	61da      	str	r2, [r3, #28]
 8008b0e:	e021      	b.n	8008b54 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	330a      	adds	r3, #10
 8008b16:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	331c      	adds	r3, #28
 8008b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	461a      	mov	r2, r3
 8008b24:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008b26:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8008b28:	f019 fc02 	bl	8022330 <memcpy>

                        if( ppxAddressInfo != NULL )
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	331c      	adds	r3, #28
 8008b36:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3334      	adds	r3, #52	@ 0x34
 8008b3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b3e:	2102      	movs	r1, #2
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe fe01 	bl	8007748 <pxNew_AddrInfo>
 8008b46:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	69db      	ldr	r3, [r3, #28]
 8008b4e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8008b50:	2300      	movs	r3, #0
 8008b52:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8008b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d013      	beq.n	8008b84 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	e004      	b.n	8008b78 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008b76:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8008b78:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008b7c:	f103 021c 	add.w	r2, r3, #28
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <parseDNSAnswer+0x204>
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	e000      	b.n	8008b92 <parseDNSAnswer+0x206>
 8008b90:	2300      	movs	r3, #0
 8008b92:	4619      	mov	r1, r3
 8008b94:	68f8      	ldr	r0, [r7, #12]
 8008b96:	f7ff f979 	bl	8007e8c <xDNSDoCallback>
 8008b9a:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 8008b9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d002      	beq.n	8008ba8 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d011      	beq.n	8008bd4 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8008bb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bb8:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 8008bba:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9300      	str	r3, [sp, #0]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f7fe fe85 	bl	80078d2 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8008bcc:	3301      	adds	r3, #1
 8008bce:	b29a      	uxth	r2, r3
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	8b1b      	ldrh	r3, [r3, #24]
 8008bd8:	2b1c      	cmp	r3, #28
 8008bda:	d11f      	bne.n	8008c1c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 8008bdc:	f107 0214 	add.w	r2, r7, #20
 8008be0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008be4:	2328      	movs	r3, #40	@ 0x28
 8008be6:	200a      	movs	r0, #10
 8008be8:	f006 fb6c 	bl	800f2c4 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	881b      	ldrh	r3, [r3, #0]
 8008bf2:	b29b      	uxth	r3, r3
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <parseDNSAnswer+0x27c>
 8008c04:	4b58      	ldr	r3, [pc, #352]	@ (8008d68 <parseDNSAnswer+0x3dc>)
 8008c06:	e000      	b.n	8008c0a <parseDNSAnswer+0x27e>
 8008c08:	4b58      	ldr	r3, [pc, #352]	@ (8008d6c <parseDNSAnswer+0x3e0>)
 8008c0a:	f107 0114 	add.w	r1, r7, #20
 8008c0e:	9300      	str	r3, [sp, #0]
 8008c10:	460b      	mov	r3, r1
 8008c12:	4601      	mov	r1, r0
 8008c14:	4856      	ldr	r0, [pc, #344]	@ (8008d70 <parseDNSAnswer+0x3e4>)
 8008c16:	f019 f96f 	bl	8021ef8 <lUDPLoggingPrintf>
 8008c1a:	e01f      	b.n	8008c5c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8008c22:	f107 0214 	add.w	r2, r7, #20
 8008c26:	2328      	movs	r3, #40	@ 0x28
 8008c28:	2002      	movs	r0, #2
 8008c2a:	f006 fb4b 	bl	800f2c4 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	881b      	ldrh	r3, [r3, #0]
 8008c34:	b29b      	uxth	r3, r3
 8008c36:	4618      	mov	r0, r3
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <parseDNSAnswer+0x2be>
 8008c46:	4b48      	ldr	r3, [pc, #288]	@ (8008d68 <parseDNSAnswer+0x3dc>)
 8008c48:	e000      	b.n	8008c4c <parseDNSAnswer+0x2c0>
 8008c4a:	4b48      	ldr	r3, [pc, #288]	@ (8008d6c <parseDNSAnswer+0x3e0>)
 8008c4c:	f107 0114 	add.w	r1, r7, #20
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	460b      	mov	r3, r1
 8008c54:	4601      	mov	r1, r0
 8008c56:	4846      	ldr	r0, [pc, #280]	@ (8008d70 <parseDNSAnswer+0x3e4>)
 8008c58:	f019 f94e 	bl	8021ef8 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 8008c5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d119      	bne.n	8008c98 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008c6c:	e014      	b.n	8008c98 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 8008c6e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c70:	891b      	ldrh	r3, [r3, #8]
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	021b      	lsls	r3, r3, #8
 8008c76:	b21a      	sxth	r2, r3
 8008c78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008c7a:	891b      	ldrh	r3, [r3, #8]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	b21b      	sxth	r3, r3
 8008c84:	4313      	orrs	r3, r2
 8008c86:	b21b      	sxth	r3, r3
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	6a1b      	ldr	r3, [r3, #32]
 8008c90:	461a      	mov	r2, r3
 8008c92:	4838      	ldr	r0, [pc, #224]	@ (8008d74 <parseDNSAnswer+0x3e8>)
 8008c94:	f019 f930 	bl	8021ef8 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68da      	ldr	r2, [r3, #12]
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	6a1b      	ldr	r3, [r3, #32]
 8008ca0:	330a      	adds	r3, #10
 8008ca2:	441a      	add	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	695a      	ldr	r2, [r3, #20]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	f1a3 020a 	sub.w	r2, r3, #10
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	615a      	str	r2, [r3, #20]
 8008cba:	e03a      	b.n	8008d32 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	2b09      	cmp	r3, #9
 8008cc2:	d936      	bls.n	8008d32 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	68db      	ldr	r3, [r3, #12]
 8008cce:	f103 020a 	add.w	r2, r3, #10
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	f1a3 020a 	sub.w	r2, r3, #10
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8008ce2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008ce4:	891b      	ldrh	r3, [r3, #8]
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	b21a      	sxth	r2, r3
 8008cec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cee:	891b      	ldrh	r3, [r3, #8]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	0a1b      	lsrs	r3, r3, #8
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	b21b      	sxth	r3, r3
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	b21b      	sxth	r3, r3
 8008cfc:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	695a      	ldr	r2, [r3, #20]
 8008d04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d30e      	bcc.n	8008d2a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	68da      	ldr	r2, [r3, #12]
 8008d10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008d14:	441a      	add	r2, r3
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	695a      	ldr	r2, [r3, #20]
 8008d1e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008d22:	1ad2      	subs	r2, r2, r3
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	615a      	str	r2, [r3, #20]
 8008d28:	e003      	b.n	8008d32 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8008d30:	e00d      	b.n	8008d4e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008d32:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008d36:	3301      	adds	r3, #1
 8008d38:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	88db      	ldrh	r3, [r3, #6]
 8008d40:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008d44:	429a      	cmp	r2, r3
 8008d46:	f4ff ae37 	bcc.w	80089b8 <parseDNSAnswer+0x2c>
 8008d4a:	e000      	b.n	8008d4e <parseDNSAnswer+0x3c2>
                break;
 8008d4c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 8008d4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <parseDNSAnswer+0x3d0>
 8008d56:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d5a:	e000      	b.n	8008d5e <parseDNSAnswer+0x3d2>
 8008d5c:	2300      	movs	r3, #0
    }
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3794      	adds	r7, #148	@ 0x94
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd90      	pop	{r4, r7, pc}
 8008d66:	bf00      	nop
 8008d68:	08024808 	.word	0x08024808
 8008d6c:	0802480c 	.word	0x0802480c
 8008d70:	08024814 	.word	0x08024814
 8008d74:	0802484c 	.word	0x0802484c

08008d78 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b08c      	sub	sp, #48	@ 0x30
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d86:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 fffd 	bl	8009d88 <uxIPHeaderSizePacket>
 8008d8e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8008d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <prepareReplyDNSMessage+0x28>
 8008d96:	f240 319f 	movw	r1, #927	@ 0x39f
 8008d9a:	4865      	ldr	r0, [pc, #404]	@ (8008f30 <prepareReplyDNSMessage+0x1b8>)
 8008d9c:	f7f8 fdcc 	bl	8001938 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008da4:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8008da6:	6a3b      	ldr	r3, [r7, #32]
 8008da8:	330e      	adds	r3, #14
 8008daa:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 8008dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dae:	2b28      	cmp	r3, #40	@ 0x28
 8008db0:	d150      	bne.n	8008e54 <prepareReplyDNSMessage+0xdc>
 8008db2:	69fb      	ldr	r3, [r7, #28]
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008dba:	2b60      	cmp	r3, #96	@ 0x60
 8008dbc:	d14a      	bne.n	8008e54 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dc2:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	330e      	adds	r3, #14
 8008dc8:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 8008dca:	69bb      	ldr	r3, [r7, #24]
 8008dcc:	3336      	adds	r3, #54	@ 0x36
 8008dce:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	b29b      	uxth	r3, r3
 8008dd8:	021b      	lsls	r3, r3, #8
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	3308      	adds	r3, #8
 8008de2:	0a1b      	lsrs	r3, r3, #8
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	4313      	orrs	r3, r2
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f103 0018 	add.w	r0, r3, #24
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	3308      	adds	r3, #8
 8008df8:	2210      	movs	r2, #16
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	f019 fa98 	bl	8022330 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	f103 0008 	add.w	r0, r3, #8
 8008e06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e08:	3338      	adds	r3, #56	@ 0x38
 8008e0a:	2210      	movs	r2, #16
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f019 fa8f 	bl	8022330 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	3308      	adds	r3, #8
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	021b      	lsls	r3, r3, #8
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	b29b      	uxth	r3, r3
 8008e22:	3308      	adds	r3, #8
 8008e24:	0a1b      	lsrs	r3, r3, #8
 8008e26:	b29b      	uxth	r3, r3
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	781a      	ldrb	r2, [r3, #0]
 8008e34:	785b      	ldrb	r3, [r3, #1]
 8008e36:	021b      	lsls	r3, r3, #8
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	81fb      	strh	r3, [r7, #14]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	885b      	ldrh	r3, [r3, #2]
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	89fa      	ldrh	r2, [r7, #14]
 8008e4a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	333e      	adds	r3, #62	@ 0x3e
 8008e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8008e52:	e066      	b.n	8008f22 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	3322      	adds	r3, #34	@ 0x22
 8008e58:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	4413      	add	r3, r2
 8008e64:	b29b      	uxth	r3, r3
 8008e66:	3308      	adds	r3, #8
 8008e68:	b29b      	uxth	r3, r3
 8008e6a:	021b      	lsls	r3, r3, #8
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	4619      	mov	r1, r3
 8008e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e76:	440b      	add	r3, r1
 8008e78:	3308      	adds	r3, #8
 8008e7a:	0a1b      	lsrs	r3, r3, #8
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8008e86:	69fb      	ldr	r3, [r7, #28]
 8008e88:	691b      	ldr	r3, [r3, #16]
 8008e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008f34 <prepareReplyDNSMessage+0x1bc>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d103      	bne.n	8008e98 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	22ff      	movs	r2, #255	@ 0xff
 8008e94:	721a      	strb	r2, [r3, #8]
 8008e96:	e006      	b.n	8008ea6 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	68da      	ldr	r2, [r3, #12]
 8008e9c:	69fb      	ldr	r3, [r7, #28]
 8008e9e:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 8008ea0:	69fb      	ldr	r3, [r7, #28]
 8008ea2:	2280      	movs	r2, #128	@ 0x80
 8008ea4:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	69fb      	ldr	r3, [r7, #28]
 8008eac:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8008eae:	4b22      	ldr	r3, [pc, #136]	@ (8008f38 <prepareReplyDNSMessage+0x1c0>)
 8008eb0:	881b      	ldrh	r3, [r3, #0]
 8008eb2:	021b      	lsls	r3, r3, #8
 8008eb4:	b21a      	sxth	r2, r3
 8008eb6:	4b20      	ldr	r3, [pc, #128]	@ (8008f38 <prepareReplyDNSMessage+0x1c0>)
 8008eb8:	881b      	ldrh	r3, [r3, #0]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	b21b      	sxth	r3, r3
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	b21b      	sxth	r3, r3
 8008ec4:	b29a      	uxth	r2, r3
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	719a      	strb	r2, [r3, #6]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 8008ed4:	4b18      	ldr	r3, [pc, #96]	@ (8008f38 <prepareReplyDNSMessage+0x1c0>)
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b29a      	uxth	r2, r3
 8008edc:	4b16      	ldr	r3, [pc, #88]	@ (8008f38 <prepareReplyDNSMessage+0x1c0>)
 8008ede:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	3308      	adds	r3, #8
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	021b      	lsls	r3, r3, #8
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	3308      	adds	r3, #8
 8008ef0:	0a1b      	lsrs	r3, r3, #8
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	b29a      	uxth	r2, r3
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	781a      	ldrb	r2, [r3, #0]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	021b      	lsls	r3, r3, #8
 8008f04:	4313      	orrs	r3, r2
 8008f06:	81bb      	strh	r3, [r7, #12]
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	885b      	ldrh	r3, [r3, #2]
 8008f0c:	b29a      	uxth	r2, r3
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	801a      	strh	r2, [r3, #0]
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	89ba      	ldrh	r2, [r7, #12]
 8008f16:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	4413      	add	r3, r2
 8008f1e:	3316      	adds	r3, #22
 8008f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f26:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8008f28:	bf00      	nop
 8008f2a:	3730      	adds	r7, #48	@ 0x30
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	080247a4 	.word	0x080247a4
 8008f34:	fb0000e0 	.word	0xfb0000e0
 8008f38:	2000111c 	.word	0x2000111c

08008f3c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f4c:	2b29      	cmp	r3, #41	@ 0x29
 8008f4e:	d803      	bhi.n	8008f58 <ProcessICMPPacket+0x1c>
 8008f50:	2159      	movs	r1, #89	@ 0x59
 8008f52:	4811      	ldr	r0, [pc, #68]	@ (8008f98 <ProcessICMPPacket+0x5c>)
 8008f54:	f7f8 fcf0 	bl	8001938 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f5c:	2b29      	cmp	r3, #41	@ 0x29
 8008f5e:	d915      	bls.n	8008f8c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f64:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d008      	beq.n	8008f82 <ProcessICMPPacket+0x46>
 8008f70:	2b08      	cmp	r3, #8
 8008f72:	d10a      	bne.n	8008f8a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008f74:	6879      	ldr	r1, [r7, #4]
 8008f76:	68b8      	ldr	r0, [r7, #8]
 8008f78:	f000 f810 	bl	8008f9c <prvProcessICMPEchoRequest>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008f80:	e004      	b.n	8008f8c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8008f82:	68b8      	ldr	r0, [r7, #8]
 8008f84:	f000 f836 	bl	8008ff4 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8008f88:	e000      	b.n	8008f8c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 8008f8a:	bf00      	nop
            }
        }

        return eReturn;
 8008f8c:	7bfb      	ldrb	r3, [r7, #15]
    }
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3710      	adds	r7, #16
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	08024870 	.word	0x08024870

08008f9c <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3322      	adds	r3, #34	@ 0x22
 8008faa:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	330e      	adds	r3, #14
 8008fb0:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	68da      	ldr	r2, [r3, #12]
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	2240      	movs	r2, #64	@ 0x40
 8008fd0:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	719a      	strb	r2, [r3, #6]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	2200      	movs	r2, #0
 8008fe0:	709a      	strb	r2, [r3, #2]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8008fe6:	2302      	movs	r3, #2
    }
 8008fe8:	4618      	mov	r0, r3
 8008fea:	371c      	adds	r7, #28
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr

08008ff4 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	7c1a      	ldrb	r2, [r3, #16]
 8009004:	7c5b      	ldrb	r3, [r3, #17]
 8009006:	021b      	lsls	r3, r3, #8
 8009008:	4313      	orrs	r3, r2
 800900a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800900c:	89fb      	ldrh	r3, [r7, #14]
 800900e:	021b      	lsls	r3, r3, #8
 8009010:	b21a      	sxth	r2, r3
 8009012:	89fb      	ldrh	r3, [r7, #14]
 8009014:	0a1b      	lsrs	r3, r3, #8
 8009016:	b29b      	uxth	r3, r3
 8009018:	b21b      	sxth	r3, r3
 800901a:	4313      	orrs	r3, r2
 800901c:	b21b      	sxth	r3, r3
 800901e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8009020:	89fb      	ldrh	r3, [r7, #14]
 8009022:	3b14      	subs	r3, #20
 8009024:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8009026:	89fb      	ldrh	r3, [r7, #14]
 8009028:	3b08      	subs	r3, #8
 800902a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8009030:	693b      	ldr	r3, [r7, #16]
 8009032:	332a      	adds	r3, #42	@ 0x2a
 8009034:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009036:	2300      	movs	r3, #0
 8009038:	82bb      	strh	r3, [r7, #20]
 800903a:	e00c      	b.n	8009056 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	2b78      	cmp	r3, #120	@ 0x78
 8009042:	d002      	beq.n	800904a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8009044:	2302      	movs	r3, #2
 8009046:	75fb      	strb	r3, [r7, #23]
                break;
 8009048:	e009      	b.n	800905e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	3301      	adds	r3, #1
 800904e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8009050:	8abb      	ldrh	r3, [r7, #20]
 8009052:	3301      	adds	r3, #1
 8009054:	82bb      	strh	r3, [r7, #20]
 8009056:	8aba      	ldrh	r2, [r7, #20]
 8009058:	89fb      	ldrh	r3, [r7, #14]
 800905a:	429a      	cmp	r2, r3
 800905c:	d3ee      	bcc.n	800903c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009062:	b29a      	uxth	r2, r3
 8009064:	7dfb      	ldrb	r3, [r7, #23]
 8009066:	4611      	mov	r1, r2
 8009068:	4618      	mov	r0, r3
 800906a:	f7f8 fd1b 	bl	8001aa4 <vApplicationPingReplyHook>
    }
 800906e:	bf00      	nop
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
	...

08009078 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8009080:	f000 f90e 	bl	80092a0 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8009084:	4802      	ldr	r0, [pc, #8]	@ (8009090 <prvIPTask+0x18>)
 8009086:	f018 ff37 	bl	8021ef8 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 800908a:	f000 f803 	bl	8009094 <prvProcessIPEventsAndTimers>
 800908e:	e7fc      	b.n	800908a <prvIPTask+0x12>
 8009090:	080248a0 	.word	0x080248a0

08009094 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 8009094:	b590      	push	{r4, r7, lr}
 8009096:	b08d      	sub	sp, #52	@ 0x34
 8009098:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 800909a:	f000 ff09 	bl	8009eb0 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 800909e:	f000 fea7 	bl	8009df0 <xCalculateSleepTime>
 80090a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80090a4:	4b7c      	ldr	r3, [pc, #496]	@ (8009298 <prvProcessIPEventsAndTimers+0x204>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f107 0118 	add.w	r1, r7, #24
 80090ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090ae:	4618      	mov	r0, r3
 80090b0:	f7fa fbda 	bl	8003868 <xQueueReceive>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d101      	bne.n	80090be <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 80090ba:	23ff      	movs	r3, #255	@ 0xff
 80090bc:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 80090be:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090c6:	d00d      	beq.n	80090e4 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80090c8:	4b73      	ldr	r3, [pc, #460]	@ (8009298 <prvProcessIPEventsAndTimers+0x204>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7fa fda3 	bl	8003c18 <uxQueueSpacesAvailable>
 80090d2:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 80090d4:	4b71      	ldr	r3, [pc, #452]	@ (800929c <prvProcessIPEventsAndTimers+0x208>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090da:	429a      	cmp	r2, r3
 80090dc:	d202      	bcs.n	80090e4 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 80090de:	4a6f      	ldr	r2, [pc, #444]	@ (800929c <prvProcessIPEventsAndTimers+0x208>)
 80090e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e2:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 80090e4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80090e8:	3301      	adds	r3, #1
 80090ea:	2b0e      	cmp	r3, #14
 80090ec:	f200 80ca 	bhi.w	8009284 <prvProcessIPEventsAndTimers+0x1f0>
 80090f0:	a201      	add	r2, pc, #4	@ (adr r2, 80090f8 <prvProcessIPEventsAndTimers+0x64>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	08009285 	.word	0x08009285
 80090fc:	08009135 	.word	0x08009135
 8009100:	0800913f 	.word	0x0800913f
 8009104:	08009149 	.word	0x08009149
 8009108:	08009155 	.word	0x08009155
 800910c:	0800921f 	.word	0x0800921f
 8009110:	08009229 	.word	0x08009229
 8009114:	0800923d 	.word	0x0800923d
 8009118:	08009245 	.word	0x08009245
 800911c:	08009269 	.word	0x08009269
 8009120:	0800915f 	.word	0x0800915f
 8009124:	08009215 	.word	0x08009215
 8009128:	08009233 	.word	0x08009233
 800912c:	08009285 	.word	0x08009285
 8009130:	0800926f 	.word	0x0800926f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	4618      	mov	r0, r3
 8009138:	f001 f9cc 	bl	800a4d4 <prvProcessNetworkDownEvent>
            break;
 800913c:	e0a5      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800913e:	69fb      	ldr	r3, [r7, #28]
 8009140:	4618      	mov	r0, r3
 8009142:	f000 f955 	bl	80093f0 <prvHandleEthernetPacket>
            break;
 8009146:	e0a0      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8009148:	69fb      	ldr	r3, [r7, #28]
 800914a:	2101      	movs	r1, #1
 800914c:	4618      	mov	r0, r3
 800914e:	f000 f95d 	bl	800940c <prvForwardTxPacket>
            break;
 8009152:	e09a      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8009154:	f7fe f94e 	bl	80073f4 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8009158:	f002 fdb6 	bl	800bcc8 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 800915c:	e095      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800915e:	69fb      	ldr	r3, [r7, #28]
 8009160:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8009162:	2318      	movs	r3, #24
 8009164:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	7a1b      	ldrb	r3, [r3, #8]
 800916a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800916e:	b2db      	uxtb	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	d002      	beq.n	800917a <prvProcessIPEventsAndTimers+0xe6>
 8009174:	2b01      	cmp	r3, #1
 8009176:	d01a      	beq.n	80091ae <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009178:	e02c      	b.n	80091d4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800917a:	2302      	movs	r3, #2
 800917c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800917e:	6a3b      	ldr	r3, [r7, #32]
 8009180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009182:	061a      	lsls	r2, r3, #24
 8009184:	6a3b      	ldr	r3, [r7, #32]
 8009186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009188:	021b      	lsls	r3, r3, #8
 800918a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800918e:	431a      	orrs	r2, r3
 8009190:	6a3b      	ldr	r3, [r7, #32]
 8009192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009194:	0a1b      	lsrs	r3, r3, #8
 8009196:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800919a:	431a      	orrs	r2, r3
 800919c:	6a3b      	ldr	r3, [r7, #32]
 800919e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a0:	0e1b      	lsrs	r3, r3, #24
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80091a6:	6a3b      	ldr	r3, [r7, #32]
 80091a8:	2200      	movs	r2, #0
 80091aa:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 80091ac:	e012      	b.n	80091d4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 80091ae:	230a      	movs	r3, #10
 80091b0:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 80091b2:	6a3b      	ldr	r3, [r7, #32]
 80091b4:	3328      	adds	r3, #40	@ 0x28
 80091b6:	f107 0408 	add.w	r4, r7, #8
 80091ba:	6818      	ldr	r0, [r3, #0]
 80091bc:	6859      	ldr	r1, [r3, #4]
 80091be:	689a      	ldr	r2, [r3, #8]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	3328      	adds	r3, #40	@ 0x28
 80091c8:	2210      	movs	r2, #16
 80091ca:	2100      	movs	r1, #0
 80091cc:	4618      	mov	r0, r3
 80091ce:	f019 f9bc 	bl	802254a <memset>
                        break;
 80091d2:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80091d8:	021b      	lsls	r3, r3, #8
 80091da:	b21a      	sxth	r2, r3
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80091e0:	0a1b      	lsrs	r3, r3, #8
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	b21b      	sxth	r3, r3
 80091e6:	4313      	orrs	r3, r2
 80091e8:	b21b      	sxth	r3, r3
 80091ea:	b29b      	uxth	r3, r3
 80091ec:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 80091ee:	6a3b      	ldr	r3, [r7, #32]
 80091f0:	2200      	movs	r2, #0
 80091f2:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 80091f4:	4639      	mov	r1, r7
 80091f6:	2300      	movs	r3, #0
 80091f8:	2218      	movs	r2, #24
 80091fa:	6a38      	ldr	r0, [r7, #32]
 80091fc:	f005 fa32 	bl	800e664 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f043 0210 	orr.w	r2, r3, #16
 8009208:	6a3b      	ldr	r3, [r7, #32]
 800920a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800920c:	6a38      	ldr	r0, [r7, #32]
 800920e:	f006 f8d8 	bl	800f3c2 <vSocketWakeUpUser>
            break;
 8009212:	e03a      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8009214:	69fb      	ldr	r3, [r7, #28]
 8009216:	4618      	mov	r0, r3
 8009218:	f005 fad8 	bl	800e7cc <vSocketClose>
            break;
 800921c:	e035      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4618      	mov	r0, r3
 8009222:	f00d f9b1 	bl	8016588 <vProcessGeneratedUDPPacket>
            break;
 8009226:	e030      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8009228:	69fb      	ldr	r3, [r7, #28]
 800922a:	4618      	mov	r0, r3
 800922c:	f000 f88c 	bl	8009348 <prvCallDHCP_RA_Handler>
            break;
 8009230:	e02b      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	4618      	mov	r0, r3
 8009236:	f007 fab3 	bl	80107a0 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800923a:	e026      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800923c:	2001      	movs	r0, #1
 800923e:	f000 ffab 	bl	800a198 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8009242:	e022      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8009248:	6a38      	ldr	r0, [r7, #32]
 800924a:	f008 fbed 	bl	8011a28 <xTCPCheckNewClient>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d019      	beq.n	8009288 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8009254:	6a3b      	ldr	r3, [r7, #32]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f043 0204 	orr.w	r2, r3, #4
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8009260:	6a38      	ldr	r0, [r7, #32]
 8009262:	f006 f8ae 	bl	800f3c2 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8009266:	e00f      	b.n	8009288 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8009268:	f007 f984 	bl	8010574 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800926c:	e00d      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800926e:	69fb      	ldr	r3, [r7, #28]
 8009270:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f7f9 ffb2 	bl	80031e0 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800927c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800927e:	f7fd f92d 	bl	80064dc <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8009282:	e002      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8009284:	bf00      	nop
 8009286:	e000      	b.n	800928a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8009288:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 800928a:	f000 f833 	bl	80092f4 <prvIPTask_CheckPendingEvents>
}
 800928e:	bf00      	nop
 8009290:	3734      	adds	r7, #52	@ 0x34
 8009292:	46bd      	mov	sp, r7
 8009294:	bd90      	pop	{r4, r7, pc}
 8009296:	bf00      	nop
 8009298:	20001118 	.word	0x20001118
 800929c:	20000014 	.word	0x20000014

080092a0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 80092a0:	b580      	push	{r7, lr}
 80092a2:	b082      	sub	sp, #8
 80092a4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 80092a6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80092aa:	f000 ff2b 	bl	800a104 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80092ae:	4b0f      	ldr	r3, [pc, #60]	@ (80092ec <prvIPTask_Initialise+0x4c>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	607b      	str	r3, [r7, #4]
 80092b4:	e005      	b.n	80092c2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f8be 	bl	8009438 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092c0:	607b      	str	r3, [r7, #4]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1f6      	bne.n	80092b6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 80092c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80092cc:	f000 fee8 	bl	800a0a0 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 80092d0:	2000      	movs	r0, #0
 80092d2:	f000 ff9b 	bl	800a20c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 80092d6:	f7fe fa31 	bl	800773c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 80092da:	f7fe fb0f 	bl	80078fc <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 80092de:	4b04      	ldr	r3, [pc, #16]	@ (80092f0 <prvIPTask_Initialise+0x50>)
 80092e0:	2201      	movs	r2, #1
 80092e2:	601a      	str	r2, [r3, #0]
}
 80092e4:	bf00      	nop
 80092e6:	3708      	adds	r7, #8
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	200014a4 	.word	0x200014a4
 80092f0:	20001128 	.word	0x20001128

080092f4 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 80092fa:	4b12      	ldr	r3, [pc, #72]	@ (8009344 <prvIPTask_CheckPendingEvents+0x50>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d01c      	beq.n	800933c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8009302:	4b10      	ldr	r3, [pc, #64]	@ (8009344 <prvIPTask_CheckPendingEvents+0x50>)
 8009304:	2200      	movs	r2, #0
 8009306:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8009308:	f004 f836 	bl	800d378 <FreeRTOS_FirstNetworkInterface>
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	e012      	b.n	8009336 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	7f1b      	ldrb	r3, [r3, #28]
 8009314:	f003 0302 	and.w	r3, r3, #2
 8009318:	b2db      	uxtb	r3, r3
 800931a:	2b00      	cmp	r3, #0
 800931c:	d007      	beq.n	800932e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	f001 f8d8 	bl	800a4d4 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8009324:	687a      	ldr	r2, [r7, #4]
 8009326:	7f13      	ldrb	r3, [r2, #28]
 8009328:	f36f 0341 	bfc	r3, #1, #1
 800932c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f004 f82e 	bl	800d390 <FreeRTOS_NextNetworkInterface>
 8009334:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d1e9      	bne.n	8009310 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800933c:	bf00      	nop
 800933e:	3708      	adds	r7, #8
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20001120 	.word	0x20001120

08009348 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8009350:	2300      	movs	r3, #0
 8009352:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	b2db      	uxtb	r3, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8009364:	2301      	movs	r3, #1
 8009366:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2b01      	cmp	r3, #1
 800936c:	d10b      	bne.n	8009386 <prvCallDHCP_RA_Handler+0x3e>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009374:	f003 0302 	and.w	r3, r3, #2
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b00      	cmp	r3, #0
 800937c:	d003      	beq.n	8009386 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 800937e:	6879      	ldr	r1, [r7, #4]
 8009380:	2000      	movs	r0, #0
 8009382:	f003 fecd 	bl	800d120 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8009386:	bf00      	nop
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
	...

08009390 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 8009390:	b480      	push	{r7}
 8009392:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 8009394:	4b03      	ldr	r3, [pc, #12]	@ (80093a4 <FreeRTOS_GetIPTaskHandle+0x14>)
 8009396:	681b      	ldr	r3, [r3, #0]
}
 8009398:	4618      	mov	r0, r3
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20001124 	.word	0x20001124

080093a8 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b082      	sub	sp, #8
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80093b6:	f003 0304 	and.w	r3, r3, #4
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d003      	beq.n	80093c8 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 80093c0:	2101      	movs	r1, #1
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f002 fa7e 	bl	800b8c4 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80093ce:	f043 0310 	orr.w	r3, r3, #16
 80093d2:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80093d6:	2000      	movs	r0, #0
 80093d8:	f7f8 fae2 	bl	80019a0 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 80093dc:	f7fe f9ae 	bl	800773c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 80093e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80093e4:	f000 fe6a 	bl	800a0bc <vARPTimerReload>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d002      	beq.n	8009404 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9c8 	bl	8009794 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800941a:	2b00      	cmp	r3, #0
 800941c:	d007      	beq.n	800942e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8009428:	683a      	ldr	r2, [r7, #0]
 800942a:	6879      	ldr	r1, [r7, #4]
 800942c:	4798      	blx	r3
    }
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	7f13      	ldrb	r3, [r2, #28]
 8009448:	f36f 0300 	bfc	r3, #0, #1
 800944c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 800944e:	2300      	movs	r3, #0
 8009450:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8009456:	f107 030c 	add.w	r3, r7, #12
 800945a:	6979      	ldr	r1, [r7, #20]
 800945c:	4618      	mov	r0, r3
 800945e:	f000 f8df 	bl	8009620 <xSendEventStructToIPTask>
 8009462:	4603      	mov	r3, r0
 8009464:	2b01      	cmp	r3, #1
 8009466:	d008      	beq.n	800947a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	7f13      	ldrb	r3, [r2, #28]
 800946c:	f043 0302 	orr.w	r3, r3, #2
 8009470:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8009472:	4b06      	ldr	r3, [pc, #24]	@ (800948c <FreeRTOS_NetworkDown+0x54>)
 8009474:	2201      	movs	r2, #1
 8009476:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8009478:	e004      	b.n	8009484 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 800947a:	687a      	ldr	r2, [r7, #4]
 800947c:	7f13      	ldrb	r3, [r2, #28]
 800947e:	f36f 0341 	bfc	r3, #1, #1
 8009482:	7713      	strb	r3, [r2, #28]
}
 8009484:	bf00      	nop
 8009486:	3718      	adds	r7, #24
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	20001120 	.word	0x20001120

08009490 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8009496:	2300      	movs	r3, #0
 8009498:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 800949a:	f003 ff6d 	bl	800d378 <FreeRTOS_FirstNetworkInterface>
 800949e:	4603      	mov	r3, r0
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <FreeRTOS_IPInit_Multi+0x1e>
 80094a4:	f240 31b5 	movw	r1, #949	@ 0x3b5
 80094a8:	4823      	ldr	r0, [pc, #140]	@ (8009538 <FreeRTOS_IPInit_Multi+0xa8>)
 80094aa:	f7f8 fa45 	bl	8001938 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 80094ae:	f001 f8cb 	bl	800a648 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 80094b2:	2200      	movs	r2, #0
 80094b4:	2108      	movs	r1, #8
 80094b6:	2045      	movs	r0, #69	@ 0x45
 80094b8:	f7fa f824 	bl	8003504 <xQueueGenericCreate>
 80094bc:	4603      	mov	r3, r0
 80094be:	4a1f      	ldr	r2, [pc, #124]	@ (800953c <FreeRTOS_IPInit_Multi+0xac>)
 80094c0:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 80094c2:	4b1e      	ldr	r3, [pc, #120]	@ (800953c <FreeRTOS_IPInit_Multi+0xac>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d104      	bne.n	80094d4 <FreeRTOS_IPInit_Multi+0x44>
 80094ca:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 80094ce:	481a      	ldr	r0, [pc, #104]	@ (8009538 <FreeRTOS_IPInit_Multi+0xa8>)
 80094d0:	f7f8 fa32 	bl	8001938 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 80094d4:	4b19      	ldr	r3, [pc, #100]	@ (800953c <FreeRTOS_IPInit_Multi+0xac>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d025      	beq.n	8009528 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 80094dc:	4b17      	ldr	r3, [pc, #92]	@ (800953c <FreeRTOS_IPInit_Multi+0xac>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	4917      	ldr	r1, [pc, #92]	@ (8009540 <FreeRTOS_IPInit_Multi+0xb0>)
 80094e2:	4618      	mov	r0, r3
 80094e4:	f7fa fcfa 	bl	8003edc <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 80094e8:	f00d fd8c 	bl	8017004 <xNetworkBuffersInitialise>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b01      	cmp	r3, #1
 80094f0:	d10e      	bne.n	8009510 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 80094f2:	f004 fc7f 	bl	800ddf4 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 80094f6:	4b13      	ldr	r3, [pc, #76]	@ (8009544 <FreeRTOS_IPInit_Multi+0xb4>)
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	2304      	movs	r3, #4
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	2300      	movs	r3, #0
 8009500:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8009504:	4910      	ldr	r1, [pc, #64]	@ (8009548 <FreeRTOS_IPInit_Multi+0xb8>)
 8009506:	4811      	ldr	r0, [pc, #68]	@ (800954c <FreeRTOS_IPInit_Multi+0xbc>)
 8009508:	f7fa fd9e 	bl	8004048 <xTaskCreate>
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	e00e      	b.n	800952e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8009510:	480f      	ldr	r0, [pc, #60]	@ (8009550 <FreeRTOS_IPInit_Multi+0xc0>)
 8009512:	f018 fcf1 	bl	8021ef8 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8009516:	4b09      	ldr	r3, [pc, #36]	@ (800953c <FreeRTOS_IPInit_Multi+0xac>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	4618      	mov	r0, r3
 800951c:	f7fa fb9c 	bl	8003c58 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8009520:	4b06      	ldr	r3, [pc, #24]	@ (800953c <FreeRTOS_IPInit_Multi+0xac>)
 8009522:	2200      	movs	r2, #0
 8009524:	601a      	str	r2, [r3, #0]
 8009526:	e002      	b.n	800952e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8009528:	480a      	ldr	r0, [pc, #40]	@ (8009554 <FreeRTOS_IPInit_Multi+0xc4>)
 800952a:	f018 fce5 	bl	8021ef8 <lUDPLoggingPrintf>
    }

    return xReturn;
 800952e:	687b      	ldr	r3, [r7, #4]
}
 8009530:	4618      	mov	r0, r3
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	080248b4 	.word	0x080248b4
 800953c:	20001118 	.word	0x20001118
 8009540:	080248e0 	.word	0x080248e0
 8009544:	20001124 	.word	0x20001124
 8009548:	080248e8 	.word	0x080248e8
 800954c:	08009079 	.word	0x08009079
 8009550:	080248f0 	.word	0x080248f0
 8009554:	0802492c 	.word	0x0802492c

08009558 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
 8009564:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d023      	beq.n	80095b4 <FreeRTOS_GetEndPointConfiguration+0x5c>
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009572:	f003 0304 	and.w	r3, r3, #4
 8009576:	b2db      	uxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	d11b      	bne.n	80095b4 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8009582:	69bb      	ldr	r3, [r7, #24]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d003      	beq.n	8009598 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	685a      	ldr	r2, [r3, #4]
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d003      	beq.n	80095a6 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 80095ac:	69bb      	ldr	r3, [r7, #24]
 80095ae:	68da      	ldr	r2, [r3, #12]
 80095b0:	683b      	ldr	r3, [r7, #0]
 80095b2:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80095b4:	bf00      	nop
 80095b6:	3714      	adds	r7, #20
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b088      	sub	sp, #32
 80095c4:	af02      	add	r7, sp, #8
 80095c6:	60f8      	str	r0, [r7, #12]
 80095c8:	60b9      	str	r1, [r7, #8]
 80095ca:	607a      	str	r2, [r7, #4]
 80095cc:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80095ce:	2000      	movs	r0, #0
 80095d0:	f003 ff72 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 80095d4:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d007      	beq.n	80095ec <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	68b9      	ldr	r1, [r7, #8]
 80095e6:	68f8      	ldr	r0, [r7, #12]
 80095e8:	f7ff ffb6 	bl	8009558 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 80095ec:	bf00      	nop
 80095ee:	3718      	adds	r7, #24
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	4603      	mov	r3, r0
 80095fc:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 80095fe:	2300      	movs	r3, #0
 8009600:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8009602:	79fb      	ldrb	r3, [r7, #7]
 8009604:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8009606:	2300      	movs	r3, #0
 8009608:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800960a:	f107 030c 	add.w	r3, r7, #12
 800960e:	6979      	ldr	r1, [r7, #20]
 8009610:	4618      	mov	r0, r3
 8009612:	f000 f805 	bl	8009620 <xSendEventStructToIPTask>
 8009616:	4603      	mov	r3, r0
}
 8009618:	4618      	mov	r0, r3
 800961a:	3718      	adds	r7, #24
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b086      	sub	sp, #24
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800962e:	f000 fb93 	bl	8009d58 <xIPIsNetworkTaskReady>
 8009632:	4603      	mov	r3, r0
 8009634:	2b00      	cmp	r3, #0
 8009636:	d107      	bne.n	8009648 <xSendEventStructToIPTask+0x28>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f993 3000 	ldrsb.w	r3, [r3]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d002      	beq.n	8009648 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8009642:	2300      	movs	r3, #0
 8009644:	617b      	str	r3, [r7, #20]
 8009646:	e035      	b.n	80096b4 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8009648:	2301      	movs	r3, #1
 800964a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f993 3000 	ldrsb.w	r3, [r3]
 8009652:	2b06      	cmp	r3, #6
 8009654:	d10c      	bne.n	8009670 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8009656:	2001      	movs	r0, #1
 8009658:	f000 fd9e 	bl	800a198 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800965c:	4b18      	ldr	r3, [pc, #96]	@ (80096c0 <xSendEventStructToIPTask+0xa0>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4618      	mov	r0, r3
 8009662:	f7fa fabf 	bl	8003be4 <uxQueueMessagesWaiting>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d01c      	beq.n	80096b0 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8009676:	f000 ff15 	bl	800a4a4 <xIsCallingFromIPTask>
 800967a:	4603      	mov	r3, r0
 800967c:	2b01      	cmp	r3, #1
 800967e:	d104      	bne.n	800968a <xSendEventStructToIPTask+0x6a>
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800968a:	4b0d      	ldr	r3, [pc, #52]	@ (80096c0 <xSendEventStructToIPTask+0xa0>)
 800968c:	6818      	ldr	r0, [r3, #0]
 800968e:	2300      	movs	r3, #0
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	6879      	ldr	r1, [r7, #4]
 8009694:	f7fa f800 	bl	8003698 <xQueueGenericSend>
 8009698:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d109      	bne.n	80096b4 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f993 3000 	ldrsb.w	r3, [r3]
 80096a6:	4619      	mov	r1, r3
 80096a8:	4806      	ldr	r0, [pc, #24]	@ (80096c4 <xSendEventStructToIPTask+0xa4>)
 80096aa:	f018 fc25 	bl	8021ef8 <lUDPLoggingPrintf>
 80096ae:	e001      	b.n	80096b4 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 80096b0:	2301      	movs	r3, #1
 80096b2:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 80096b4:	697b      	ldr	r3, [r7, #20]
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20001118 	.word	0x20001118
 80096c4:	08024970 	.word	0x08024970

080096c8 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b086      	sub	sp, #24
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 80096d0:	2301      	movs	r3, #1
 80096d2:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 80096d4:	2300      	movs	r3, #0
 80096d6:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 80096d8:	2300      	movs	r3, #0
 80096da:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d102      	bne.n	80096e8 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]
 80096e6:	e032      	b.n	800974e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f003 ff81 	bl	800d5f8 <FreeRTOS_FindEndPointOnMAC>
 80096f6:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d002      	beq.n	8009704 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 80096fe:	2301      	movs	r3, #1
 8009700:	75fb      	strb	r3, [r7, #23]
 8009702:	e024      	b.n	800974e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8009704:	693b      	ldr	r3, [r7, #16]
 8009706:	2206      	movs	r2, #6
 8009708:	4619      	mov	r1, r3
 800970a:	4820      	ldr	r0, [pc, #128]	@ (800978c <eConsiderFrameForProcessing+0xc4>)
 800970c:	f019 fda5 	bl	802325a <memcmp>
 8009710:	4603      	mov	r3, r0
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8009716:	2301      	movs	r3, #1
 8009718:	75fb      	strb	r3, [r7, #23]
 800971a:	e018      	b.n	800974e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	2206      	movs	r2, #6
 8009720:	4619      	mov	r1, r3
 8009722:	481b      	ldr	r0, [pc, #108]	@ (8009790 <eConsiderFrameForProcessing+0xc8>)
 8009724:	f019 fd99 	bl	802325a <memcmp>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d102      	bne.n	8009734 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 800972e:	2301      	movs	r3, #1
 8009730:	75fb      	strb	r3, [r7, #23]
 8009732:	e00c      	b.n	800974e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	2b33      	cmp	r3, #51	@ 0x33
 800973a:	d106      	bne.n	800974a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8009740:	2b33      	cmp	r3, #51	@ 0x33
 8009742:	d102      	bne.n	800974a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8009744:	2301      	movs	r3, #1
 8009746:	75fb      	strb	r3, [r7, #23]
 8009748:	e001      	b.n	800974e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 800974a:	2300      	movs	r3, #0
 800974c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 800974e:	7dfb      	ldrb	r3, [r7, #23]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d115      	bne.n	8009780 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	7b1a      	ldrb	r2, [r3, #12]
 8009758:	7b5b      	ldrb	r3, [r3, #13]
 800975a:	021b      	lsls	r3, r3, #8
 800975c:	4313      	orrs	r3, r2
 800975e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8009760:	897b      	ldrh	r3, [r7, #10]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	b21a      	sxth	r2, r3
 8009766:	897b      	ldrh	r3, [r7, #10]
 8009768:	0a1b      	lsrs	r3, r3, #8
 800976a:	b29b      	uxth	r3, r3
 800976c:	b21b      	sxth	r3, r3
 800976e:	4313      	orrs	r3, r2
 8009770:	b21b      	sxth	r3, r3
 8009772:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8009774:	897b      	ldrh	r3, [r7, #10]
 8009776:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800977a:	d801      	bhi.n	8009780 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 800977c:	2300      	movs	r3, #0
 800977e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8009780:	7dfb      	ldrb	r3, [r7, #23]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3718      	adds	r7, #24
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
 800978a:	bf00      	nop
 800978c:	080275a4 	.word	0x080275a4
 8009790:	08027594 	.word	0x08027594

08009794 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b084      	sub	sp, #16
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 800979c:	2300      	movs	r3, #0
 800979e:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d03d      	beq.n	8009824 <prvProcessEthernetPacket+0x90>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d039      	beq.n	8009824 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b4:	2b0d      	cmp	r3, #13
 80097b6:	d934      	bls.n	8009822 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 80097b8:	2301      	movs	r3, #1
 80097ba:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	899b      	ldrh	r3, [r3, #12]
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d015      	beq.n	80097fc <prvProcessEthernetPacket+0x68>
 80097d0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80097d4:	4293      	cmp	r3, r2
 80097d6:	dc21      	bgt.n	800981c <prvProcessEthernetPacket+0x88>
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d00f      	beq.n	80097fc <prvProcessEthernetPacket+0x68>
 80097dc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80097e0:	d11c      	bne.n	800981c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097e6:	2b29      	cmp	r3, #41	@ 0x29
 80097e8:	d905      	bls.n	80097f6 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f7fc ffe6 	bl	80067bc <eARPProcessPacket>
 80097f0:	4603      	mov	r3, r0
 80097f2:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 80097f4:	e016      	b.n	8009824 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 80097f6:	2300      	movs	r3, #0
 80097f8:	73fb      	strb	r3, [r7, #15]
                        break;
 80097fa:	e013      	b.n	8009824 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009800:	2b21      	cmp	r3, #33	@ 0x21
 8009802:	d908      	bls.n	8009816 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009808:	6879      	ldr	r1, [r7, #4]
 800980a:	4618      	mov	r0, r3
 800980c:	f000 f8c6 	bl	800999c <prvProcessIPPacket>
 8009810:	4603      	mov	r3, r0
 8009812:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8009814:	e006      	b.n	8009824 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8009816:	2300      	movs	r3, #0
 8009818:	73fb      	strb	r3, [r7, #15]
                    break;
 800981a:	e003      	b.n	8009824 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8009820:	e000      	b.n	8009824 <prvProcessEthernetPacket+0x90>
            break;
 8009822:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8009824:	7bfb      	ldrb	r3, [r7, #15]
 8009826:	2b04      	cmp	r3, #4
 8009828:	d00b      	beq.n	8009842 <prvProcessEthernetPacket+0xae>
 800982a:	2b04      	cmp	r3, #4
 800982c:	dc19      	bgt.n	8009862 <prvProcessEthernetPacket+0xce>
 800982e:	2b02      	cmp	r3, #2
 8009830:	d002      	beq.n	8009838 <prvProcessEthernetPacket+0xa4>
 8009832:	2b03      	cmp	r3, #3
 8009834:	d019      	beq.n	800986a <prvProcessEthernetPacket+0xd6>
 8009836:	e014      	b.n	8009862 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8009838:	2101      	movs	r1, #1
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 f9a4 	bl	8009b88 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8009840:	e014      	b.n	800986c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8009842:	4b0c      	ldr	r3, [pc, #48]	@ (8009874 <prvProcessEthernetPacket+0xe0>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d107      	bne.n	800985a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 800984a:	4a0a      	ldr	r2, [pc, #40]	@ (8009874 <prvProcessEthernetPacket+0xe0>)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8009850:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009854:	f000 fc06 	bl	800a064 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8009858:	e008      	b.n	800986c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f00d fca4 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009860:	e004      	b.n	800986c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f00d fca0 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8009868:	e000      	b.n	800986c <prvProcessEthernetPacket+0xd8>
            break;
 800986a:	bf00      	nop
    }
}
 800986c:	bf00      	nop
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20001114 	.word	0x20001114

08009878 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8009878:	b5b0      	push	{r4, r5, r7, lr}
 800987a:	b08c      	sub	sp, #48	@ 0x30
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8009880:	2300      	movs	r3, #0
 8009882:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8009886:	2300      	movs	r3, #0
 8009888:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8009890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009892:	3322      	adds	r3, #34	@ 0x22
 8009894:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 fa76 	bl	8009d88 <uxIPHeaderSizePacket>
 800989c:	4603      	mov	r3, r0
 800989e:	3316      	adds	r3, #22
 80098a0:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	899b      	ldrh	r3, [r3, #12]
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d105      	bne.n	80098bc <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098b4:	3336      	adds	r3, #54	@ 0x36
 80098b6:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 80098bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098be:	889b      	ldrh	r3, [r3, #4]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	021b      	lsls	r3, r3, #8
 80098c4:	b21a      	sxth	r2, r3
 80098c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c8:	889b      	ldrh	r3, [r3, #4]
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	0a1b      	lsrs	r3, r3, #8
 80098ce:	b29b      	uxth	r3, r3
 80098d0:	b21b      	sxth	r3, r3
 80098d2:	4313      	orrs	r3, r2
 80098d4:	b21b      	sxth	r3, r3
 80098d6:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 80098d8:	8b7b      	ldrh	r3, [r7, #26]
 80098da:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 80098dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098de:	899b      	ldrh	r3, [r3, #12]
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	2b08      	cmp	r3, #8
 80098e4:	d11a      	bne.n	800991c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 80098e6:	8b7c      	ldrh	r4, [r7, #26]
 80098e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ea:	8a1b      	ldrh	r3, [r3, #16]
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	b21a      	sxth	r2, r3
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	8a1b      	ldrh	r3, [r3, #16]
 80098f6:	b29b      	uxth	r3, r3
 80098f8:	0a1b      	lsrs	r3, r3, #8
 80098fa:	b29b      	uxth	r3, r3
 80098fc:	b21b      	sxth	r3, r3
 80098fe:	4313      	orrs	r3, r2
 8009900:	b21b      	sxth	r3, r3
 8009902:	b29b      	uxth	r3, r3
 8009904:	461d      	mov	r5, r3
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fa3e 	bl	8009d88 <uxIPHeaderSizePacket>
 800990c:	4603      	mov	r3, r0
 800990e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8009910:	429c      	cmp	r4, r3
 8009912:	d903      	bls.n	800991c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8009914:	2300      	movs	r3, #0
 8009916:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800991a:	e038      	b.n	800998e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009920:	6a3a      	ldr	r2, [r7, #32]
 8009922:	429a      	cmp	r2, r3
 8009924:	d833      	bhi.n	800998e <prvProcessUDPPacket+0x116>
 8009926:	697b      	ldr	r3, [r7, #20]
 8009928:	2b07      	cmp	r3, #7
 800992a:	d930      	bls.n	800998e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	3b08      	subs	r3, #8
 800993a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 800993c:	693a      	ldr	r2, [r7, #16]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	429a      	cmp	r2, r3
 8009942:	d904      	bls.n	800994e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	6a3b      	ldr	r3, [r7, #32]
 8009948:	441a      	add	r2, r3
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 800994e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29a      	uxth	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8009958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8009962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009964:	885b      	ldrh	r3, [r3, #2]
 8009966:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8009968:	f107 0208 	add.w	r2, r7, #8
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f00c fe2a 	bl	80165c8 <xProcessReceivedUDPPacket>
 8009974:	4603      	mov	r3, r0
 8009976:	2b01      	cmp	r3, #1
 8009978:	d103      	bne.n	8009982 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 800997a:	2303      	movs	r3, #3
 800997c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009980:	e005      	b.n	800998e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8009982:	68bb      	ldr	r3, [r7, #8]
 8009984:	2b01      	cmp	r3, #1
 8009986:	d102      	bne.n	800998e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8009988:	2304      	movs	r3, #4
 800998a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 800998e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009992:	4618      	mov	r0, r3
 8009994:	3730      	adds	r7, #48	@ 0x30
 8009996:	46bd      	mov	sp, r7
 8009998:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800999c <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b088      	sub	sp, #32
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 80099a6:	2314      	movs	r3, #20
 80099a8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	330e      	adds	r3, #14
 80099b6:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	899b      	ldrh	r3, [r3, #12]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b08      	cmp	r3, #8
 80099c0:	d023      	beq.n	8009a0a <prvProcessIPPacket+0x6e>
 80099c2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d144      	bne.n	8009a54 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099ce:	2b35      	cmp	r3, #53	@ 0x35
 80099d0:	d802      	bhi.n	80099d8 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 80099d2:	2300      	movs	r3, #0
 80099d4:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 80099d6:	e043      	b.n	8009a60 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099dc:	330e      	adds	r3, #14
 80099de:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 80099e0:	2328      	movs	r3, #40	@ 0x28
 80099e2:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	799b      	ldrb	r3, [r3, #6]
 80099e8:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	330e      	adds	r3, #14
 80099ee:	69ba      	ldr	r2, [r7, #24]
 80099f0:	6839      	ldr	r1, [r7, #0]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f001 fb6c 	bl	800b0d0 <prvAllowIPPacketIPv6>
 80099f8:	4603      	mov	r3, r0
 80099fa:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a00:	3b06      	subs	r3, #6
 8009a02:	693a      	ldr	r2, [r7, #16]
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	701a      	strb	r2, [r3, #0]
                break;
 8009a08:	e02a      	b.n	8009a60 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009a18:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a1e:	3b0e      	subs	r3, #14
 8009a20:	69ba      	ldr	r2, [r7, #24]
 8009a22:	429a      	cmp	r2, r3
 8009a24:	d802      	bhi.n	8009a2c <prvProcessIPPacket+0x90>
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	2b13      	cmp	r3, #19
 8009a2a:	d802      	bhi.n	8009a32 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8009a30:	e016      	b.n	8009a60 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	7ddb      	ldrb	r3, [r3, #23]
 8009a36:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009a38:	69ba      	ldr	r2, [r7, #24]
 8009a3a:	6839      	ldr	r1, [r7, #0]
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f001 f81b 	bl	800aa78 <prvAllowIPPacketIPv4>
 8009a42:	4603      	mov	r3, r0
 8009a44:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a4a:	3b06      	subs	r3, #6
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	7812      	ldrb	r2, [r2, #0]
 8009a50:	701a      	strb	r2, [r3, #0]
                   break;
 8009a52:	e005      	b.n	8009a60 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009a54:	2300      	movs	r3, #0
 8009a56:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8009a58:	484a      	ldr	r0, [pc, #296]	@ (8009b84 <prvProcessIPPacket+0x1e8>)
 8009a5a:	f018 fa4d 	bl	8021ef8 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 8009a5e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009a60:	7ffb      	ldrb	r3, [r7, #31]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	f040 8088 	bne.w	8009b78 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	899b      	ldrh	r3, [r3, #12]
 8009a6c:	b29b      	uxth	r3, r3
 8009a6e:	2b08      	cmp	r3, #8
 8009a70:	d004      	beq.n	8009a7c <prvProcessIPPacket+0xe0>
 8009a72:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d009      	beq.n	8009a8e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8009a7a:	e020      	b.n	8009abe <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	2b14      	cmp	r3, #20
 8009a80:	d91a      	bls.n	8009ab8 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8009a82:	6838      	ldr	r0, [r7, #0]
 8009a84:	f001 f852 	bl	800ab2c <prvCheckIP4HeaderOptions>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	77fb      	strb	r3, [r7, #31]
                    break;
 8009a8c:	e014      	b.n	8009ab8 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 8009a8e:	7dfb      	ldrb	r3, [r7, #23]
 8009a90:	2100      	movs	r1, #0
 8009a92:	4618      	mov	r0, r3
 8009a94:	f001 fb3a 	bl	800b10c <xGetExtensionOrder>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	dd0e      	ble.n	8009abc <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 8009a9e:	2101      	movs	r1, #1
 8009aa0:	6838      	ldr	r0, [r7, #0]
 8009aa2:	f001 fb99 	bl	800b1d8 <eHandleIPv6ExtensionHeaders>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 8009aaa:	7ffb      	ldrb	r3, [r7, #31]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d005      	beq.n	8009abc <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	799b      	ldrb	r3, [r3, #6]
 8009ab4:	75fb      	strb	r3, [r7, #23]
                    break;
 8009ab6:	e001      	b.n	8009abc <prvProcessIPPacket+0x120>
                    break;
 8009ab8:	bf00      	nop
 8009aba:	e000      	b.n	8009abe <prvProcessIPPacket+0x122>
                    break;
 8009abc:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 8009abe:	7ffb      	ldrb	r3, [r7, #31]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d059      	beq.n	8009b78 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
 8009ac6:	2b11      	cmp	r3, #17
 8009ac8:	d026      	beq.n	8009b18 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8009aca:	6838      	ldr	r0, [r7, #0]
 8009acc:	f7fd f918 	bl	8006d00 <xCheckRequiresARPResolution>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d102      	bne.n	8009adc <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8009ad6:	2304      	movs	r3, #4
 8009ad8:	77fb      	strb	r3, [r7, #31]
 8009ada:	e01d      	b.n	8009b18 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	899b      	ldrh	r3, [r3, #12]
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b08      	cmp	r3, #8
 8009ae4:	d00e      	beq.n	8009b04 <prvProcessIPPacket+0x168>
 8009ae6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009aea:	4293      	cmp	r3, r2
 8009aec:	d113      	bne.n	8009b16 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	1d98      	adds	r0, r3, #6
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	f103 0108 	add.w	r1, r3, #8
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009afc:	461a      	mov	r2, r3
 8009afe:	f002 f843 	bl	800bb88 <vNDRefreshCacheEntry>
                                break;
 8009b02:	e009      	b.n	8009b18 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	1d9a      	adds	r2, r3, #6
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	68db      	ldr	r3, [r3, #12]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	f7fd f9d6 	bl	8006ec0 <vARPRefreshCacheEntryAge>
                                break;
 8009b14:	e000      	b.n	8009b18 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8009b16:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 8009b18:	7ffb      	ldrb	r3, [r7, #31]
 8009b1a:	2b04      	cmp	r3, #4
 8009b1c:	d02c      	beq.n	8009b78 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 8009b1e:	7dfb      	ldrb	r3, [r7, #23]
 8009b20:	2b3a      	cmp	r3, #58	@ 0x3a
 8009b22:	d010      	beq.n	8009b46 <prvProcessIPPacket+0x1aa>
 8009b24:	2b3a      	cmp	r3, #58	@ 0x3a
 8009b26:	dc23      	bgt.n	8009b70 <prvProcessIPPacket+0x1d4>
 8009b28:	2b11      	cmp	r3, #17
 8009b2a:	d012      	beq.n	8009b52 <prvProcessIPPacket+0x1b6>
 8009b2c:	2b11      	cmp	r3, #17
 8009b2e:	dc1f      	bgt.n	8009b70 <prvProcessIPPacket+0x1d4>
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d002      	beq.n	8009b3a <prvProcessIPPacket+0x19e>
 8009b34:	2b06      	cmp	r3, #6
 8009b36:	d012      	beq.n	8009b5e <prvProcessIPPacket+0x1c2>
 8009b38:	e01a      	b.n	8009b70 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 8009b3a:	6838      	ldr	r0, [r7, #0]
 8009b3c:	f7ff f9fe 	bl	8008f3c <ProcessICMPPacket>
 8009b40:	4603      	mov	r3, r0
 8009b42:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8009b44:	e018      	b.n	8009b78 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 8009b46:	6838      	ldr	r0, [r7, #0]
 8009b48:	f002 fb6e 	bl	800c228 <prvProcessICMPMessage_IPv6>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	77fb      	strb	r3, [r7, #31]
                            break;
 8009b50:	e012      	b.n	8009b78 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8009b52:	6838      	ldr	r0, [r7, #0]
 8009b54:	f7ff fe90 	bl	8009878 <prvProcessUDPPacket>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	77fb      	strb	r3, [r7, #31]
                        break;
 8009b5c:	e00c      	b.n	8009b78 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8009b5e:	6838      	ldr	r0, [r7, #0]
 8009b60:	f007 fda0 	bl	80116a4 <xProcessReceivedTCPPacket>
 8009b64:	4603      	mov	r3, r0
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d105      	bne.n	8009b76 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 8009b6a:	2303      	movs	r3, #3
 8009b6c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 8009b6e:	e002      	b.n	8009b76 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009b70:	2300      	movs	r3, #0
 8009b72:	77fb      	strb	r3, [r7, #31]
                        break;
 8009b74:	e000      	b.n	8009b78 <prvProcessIPPacket+0x1dc>
                                break;
 8009b76:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009b78:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3720      	adds	r7, #32
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	0802499c 	.word	0x0802499c

08009b88 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08e      	sub	sp, #56	@ 0x38
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b96:	2b3b      	cmp	r3, #59	@ 0x3b
 8009b98:	d818      	bhi.n	8009bcc <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	486a      	ldr	r0, [pc, #424]	@ (8009d4c <vReturnEthernetFrame+0x1c4>)
 8009ba2:	f018 f9a9 	bl	8021ef8 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009baa:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bac:	e008      	b.n	8009bc0 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bb4:	4413      	add	r3, r2
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8009bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8009bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bc2:	2b3b      	cmp	r3, #59	@ 0x3b
 8009bc4:	ddf3      	ble.n	8009bae <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	223c      	movs	r2, #60	@ 0x3c
 8009bca:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d111      	bne.n	8009bf6 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fb87 	bl	800a2ec <pxDuplicateNetworkBufferWithDescriptor>
 8009bde:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 8009be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d005      	beq.n	8009bf2 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009be6:	2301      	movs	r3, #1
 8009be8:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf0:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8009bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bf4:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	f000 80a3 	beq.w	8009d44 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c02:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 8009c04:	2300      	movs	r3, #0
 8009c06:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d12f      	bne.n	8009c74 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 8009c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c16:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009c1a:	061a      	lsls	r2, r3, #24
 8009c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c1e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009c22:	021b      	lsls	r3, r3, #8
 8009c24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009c28:	431a      	orrs	r2, r3
 8009c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c2c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009c30:	0a1b      	lsrs	r3, r3, #8
 8009c32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009c36:	431a      	orrs	r2, r3
 8009c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c3a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009c3e:	0e1b      	lsrs	r3, r3, #24
 8009c40:	4313      	orrs	r3, r2
 8009c42:	4619      	mov	r1, r3
 8009c44:	4842      	ldr	r0, [pc, #264]	@ (8009d50 <vReturnEthernetFrame+0x1c8>)
 8009c46:	f018 f957 	bl	8021ef8 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c4e:	899b      	ldrh	r3, [r3, #12]
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b08      	cmp	r3, #8
 8009c54:	d003      	beq.n	8009c5e <vReturnEthernetFrame+0xd6>
 8009c56:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009c5a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8009c5c:	e00a      	b.n	8009c74 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 8009c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c60:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009c64:	2107      	movs	r1, #7
 8009c66:	4618      	mov	r0, r3
 8009c68:	f003 fcfe 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009c72:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d063      	beq.n	8009d44 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c80:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8009c84:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8009c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c88:	899b      	ldrh	r3, [r3, #12]
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	2b08      	cmp	r3, #8
 8009c8e:	d11c      	bne.n	8009cca <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8009c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c92:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009c96:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c9e:	f107 0114 	add.w	r1, r7, #20
 8009ca2:	f107 0310 	add.w	r3, r7, #16
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7fd fa54 	bl	8007154 <eARPGetCacheEntry>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 8009cb2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009cb6:	2b01      	cmp	r3, #1
 8009cb8:	d103      	bne.n	8009cc2 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 8009cba:	f107 0314 	add.w	r3, r7, #20
 8009cbe:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8009cc0:	e007      	b.n	8009cd2 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cc4:	3306      	adds	r3, #6
 8009cc6:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 8009cc8:	e003      	b.n	8009cd2 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ccc:	3306      	adds	r3, #6
 8009cce:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8009cd0:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8009cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cd4:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8009cd6:	2206      	movs	r2, #6
 8009cd8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cda:	69f8      	ldr	r0, [r7, #28]
 8009cdc:	f018 fb28 	bl	8022330 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ce4:	33e8      	adds	r3, #232	@ 0xe8
 8009ce6:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cea:	3306      	adds	r3, #6
 8009cec:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8009cee:	2206      	movs	r2, #6
 8009cf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009cf2:	69f8      	ldr	r0, [r7, #28]
 8009cf4:	f018 fb1c 	bl	8022330 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8009cf8:	f000 fbd4 	bl	800a4a4 <xIsCallingFromIPTask>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d106      	bne.n	8009d10 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	683a      	ldr	r2, [r7, #0]
 8009d08:	6879      	ldr	r1, [r7, #4]
 8009d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009d0c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 8009d0e:	e019      	b.n	8009d44 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d011      	beq.n	8009d3a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 8009d16:	2302      	movs	r3, #2
 8009d18:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8009d1e:	f107 0308 	add.w	r3, r7, #8
 8009d22:	f04f 31ff 	mov.w	r1, #4294967295
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7ff fc7a 	bl	8009620 <xSendEventStructToIPTask>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d108      	bne.n	8009d44 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	f00d fa38 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
}
 8009d38:	e004      	b.n	8009d44 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 8009d3a:	f640 019f 	movw	r1, #2207	@ 0x89f
 8009d3e:	4805      	ldr	r0, [pc, #20]	@ (8009d54 <vReturnEthernetFrame+0x1cc>)
 8009d40:	f7f7 fdfa 	bl	8001938 <vAssertCalled>
}
 8009d44:	bf00      	nop
 8009d46:	3738      	adds	r7, #56	@ 0x38
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	080249c8 	.word	0x080249c8
 8009d50:	080249ec 	.word	0x080249ec
 8009d54:	080248b4 	.word	0x080248b4

08009d58 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009d58:	b480      	push	{r7}
 8009d5a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8009d5c:	4b03      	ldr	r3, [pc, #12]	@ (8009d6c <xIPIsNetworkTaskReady+0x14>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20001128 	.word	0x20001128

08009d70 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8009d70:	b480      	push	{r7}
 8009d72:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8009d74:	4b03      	ldr	r3, [pc, #12]	@ (8009d84 <uxGetMinimumIPQueueSpace+0x14>)
 8009d76:	681b      	ldr	r3, [r3, #0]
    }
 8009d78:	4618      	mov	r0, r3
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20000014 	.word	0x20000014

08009d88 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d94:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	899b      	ldrh	r3, [r3, #12]
 8009d9a:	b29b      	uxth	r3, r3
 8009d9c:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d102      	bne.n	8009daa <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009da4:	2328      	movs	r3, #40	@ 0x28
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	e001      	b.n	8009dae <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009daa:	2314      	movs	r3, #20
 8009dac:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009dae:	68fb      	ldr	r3, [r7, #12]
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr

08009dbc <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b085      	sub	sp, #20
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d009      	beq.n	8009dde <uxIPHeaderSizeSocket+0x22>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7a1b      	ldrb	r3, [r3, #8]
 8009dce:	f003 0301 	and.w	r3, r3, #1
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d002      	beq.n	8009dde <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8009dd8:	2328      	movs	r3, #40	@ 0x28
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	e001      	b.n	8009de2 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8009dde:	2314      	movs	r3, #20
 8009de0:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009de2:	68fb      	ldr	r3, [r7, #12]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3714      	adds	r7, #20
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009df6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009dfa:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 8009dfc:	4b28      	ldr	r3, [pc, #160]	@ (8009ea0 <xCalculateSleepTime+0xb0>)
 8009dfe:	781b      	ldrb	r3, [r3, #0]
 8009e00:	f003 0301 	and.w	r3, r3, #1
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d007      	beq.n	8009e1a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009e0a:	4b25      	ldr	r3, [pc, #148]	@ (8009ea0 <xCalculateSleepTime+0xb0>)
 8009e0c:	68db      	ldr	r3, [r3, #12]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d902      	bls.n	8009e1a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 8009e14:	4b22      	ldr	r3, [pc, #136]	@ (8009ea0 <xCalculateSleepTime+0xb0>)
 8009e16:	68db      	ldr	r3, [r3, #12]
 8009e18:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009e1a:	4b22      	ldr	r3, [pc, #136]	@ (8009ea4 <xCalculateSleepTime+0xb4>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 8009e20:	e015      	b.n	8009e4e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8009e28:	f003 0301 	and.w	r3, r3, #1
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d009      	beq.n	8009e46 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d903      	bls.n	8009e46 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009e44:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8009e4c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 8009e4e:	683b      	ldr	r3, [r7, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1e6      	bne.n	8009e22 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 8009e54:	4b14      	ldr	r3, [pc, #80]	@ (8009ea8 <xCalculateSleepTime+0xb8>)
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	f003 0301 	and.w	r3, r3, #1
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009e62:	4b11      	ldr	r3, [pc, #68]	@ (8009ea8 <xCalculateSleepTime+0xb8>)
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	687a      	ldr	r2, [r7, #4]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d902      	bls.n	8009e72 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 8009e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8009ea8 <xCalculateSleepTime+0xb8>)
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009e72:	4b0e      	ldr	r3, [pc, #56]	@ (8009eac <xCalculateSleepTime+0xbc>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d007      	beq.n	8009e90 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 8009e80:	4b0a      	ldr	r3, [pc, #40]	@ (8009eac <xCalculateSleepTime+0xbc>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d902      	bls.n	8009e90 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 8009e8a:	4b08      	ldr	r3, [pc, #32]	@ (8009eac <xCalculateSleepTime+0xbc>)
 8009e8c:	68db      	ldr	r3, [r3, #12]
 8009e8e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 8009e90:	687b      	ldr	r3, [r7, #4]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	370c      	adds	r7, #12
 8009e96:	46bd      	mov	sp, r7
 8009e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	20001144 	.word	0x20001144
 8009ea4:	200014a0 	.word	0x200014a0
 8009ea8:	20001158 	.word	0x20001158
 8009eac:	2000116c 	.word	0x2000116c

08009eb0 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 8009eb6:	484f      	ldr	r0, [pc, #316]	@ (8009ff4 <vCheckNetworkTimers+0x144>)
 8009eb8:	f000 f932 	bl	800a120 <prvIPTimerCheck>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d002      	beq.n	8009ec8 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 8009ec2:	2003      	movs	r0, #3
 8009ec4:	f7ff fb96 	bl	80095f4 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 8009ec8:	484b      	ldr	r0, [pc, #300]	@ (8009ff8 <vCheckNetworkTimers+0x148>)
 8009eca:	f000 f929 	bl	800a120 <prvIPTimerCheck>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00e      	beq.n	8009ef2 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 8009ed4:	4b49      	ldr	r3, [pc, #292]	@ (8009ffc <vCheckNetworkTimers+0x14c>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00a      	beq.n	8009ef2 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 8009edc:	2000      	movs	r0, #0
 8009ede:	f000 f995 	bl	800a20c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8009ee2:	4b46      	ldr	r3, [pc, #280]	@ (8009ffc <vCheckNetworkTimers+0x14c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	f00d f95e 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 8009eec:	4b43      	ldr	r3, [pc, #268]	@ (8009ffc <vCheckNetworkTimers+0x14c>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009ef2:	4b43      	ldr	r3, [pc, #268]	@ (800a000 <vCheckNetworkTimers+0x150>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 8009ef8:	e01f      	b.n	8009f3a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	33f8      	adds	r3, #248	@ 0xf8
 8009efe:	4618      	mov	r0, r3
 8009f00:	f000 f90e 	bl	800a120 <prvIPTimerCheck>
 8009f04:	4603      	mov	r3, r0
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d013      	beq.n	8009f32 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f10:	f003 0304 	and.w	r3, r3, #4
 8009f14:	b2db      	uxtb	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00b      	beq.n	8009f32 <vCheckNetworkTimers+0x82>
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009f20:	f003 0302 	and.w	r3, r3, #2
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 8009f2a:	6939      	ldr	r1, [r7, #16]
 8009f2c:	2000      	movs	r0, #0
 8009f2e:	f003 f8f7 	bl	800d120 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8009f38:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 8009f3a:	693b      	ldr	r3, [r7, #16]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1dc      	bne.n	8009efa <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009f40:	4830      	ldr	r0, [pc, #192]	@ (800a004 <vCheckNetworkTimers+0x154>)
 8009f42:	f000 f8ed 	bl	800a120 <prvIPTimerCheck>
 8009f46:	4603      	mov	r3, r0
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d002      	beq.n	8009f52 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 8009f4c:	2000      	movs	r0, #0
 8009f4e:	f7fd fff9 	bl	8007f44 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8009f52:	4b2d      	ldr	r3, [pc, #180]	@ (800a008 <vCheckNetworkTimers+0x158>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7f9 fe44 	bl	8003be4 <uxQueueMessagesWaiting>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d102      	bne.n	8009f68 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009f62:	2301      	movs	r3, #1
 8009f64:	60fb      	str	r3, [r7, #12]
 8009f66:	e001      	b.n	8009f6c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 8009f6c:	4827      	ldr	r0, [pc, #156]	@ (800a00c <vCheckNetworkTimers+0x15c>)
 8009f6e:	f000 f8d7 	bl	800a120 <prvIPTimerCheck>
 8009f72:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d001      	beq.n	8009f7e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f005 ff3f 	bl	800fe08 <xTCPTimerCheck>
 8009f8a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	481f      	ldr	r0, [pc, #124]	@ (800a00c <vCheckNetworkTimers+0x15c>)
 8009f90:	f000 f844 	bl	800a01c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 8009f94:	2000      	movs	r0, #0
 8009f96:	f006 fe6f 	bl	8010c78 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f006 fe88 	bl	8010cb0 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 8009fa0:	4b1b      	ldr	r3, [pc, #108]	@ (800a010 <vCheckNetworkTimers+0x160>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d120      	bne.n	8009fea <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 8009fa8:	481a      	ldr	r0, [pc, #104]	@ (800a014 <vCheckNetworkTimers+0x164>)
 8009faa:	f000 f8b9 	bl	800a120 <prvIPTimerCheck>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d01a      	beq.n	8009fea <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009fb8:	4b17      	ldr	r3, [pc, #92]	@ (800a018 <vCheckNetworkTimers+0x168>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	617b      	str	r3, [r7, #20]
 8009fbe:	e00e      	b.n	8009fde <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 8009fc0:	697b      	ldr	r3, [r7, #20]
 8009fc2:	7f1b      	ldrb	r3, [r3, #28]
 8009fc4:	f003 0301 	and.w	r3, r3, #1
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d104      	bne.n	8009fd8 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 8009fd2:	6978      	ldr	r0, [r7, #20]
 8009fd4:	f7ff fa30 	bl	8009438 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fdc:	617b      	str	r3, [r7, #20]
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d1ed      	bne.n	8009fc0 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 f971 	bl	800a2cc <vSetAllNetworksUp>
        }
    }
}
 8009fea:	bf00      	nop
 8009fec:	3718      	adds	r7, #24
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}
 8009ff2:	bf00      	nop
 8009ff4:	20001144 	.word	0x20001144
 8009ff8:	20001130 	.word	0x20001130
 8009ffc:	20001114 	.word	0x20001114
 800a000:	200014a0 	.word	0x200014a0
 800a004:	2000116c 	.word	0x2000116c
 800a008:	20001118 	.word	0x20001118
 800a00c:	20001158 	.word	0x20001158
 800a010:	2000112c 	.word	0x2000112c
 800a014:	20001180 	.word	0x20001180
 800a018:	200014a4 	.word	0x200014a4

0800a01c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	3304      	adds	r3, #4
 800a02a:	4618      	mov	r0, r3
 800a02c:	f7fa fec0 	bl	8004db0 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d105      	bne.n	800a048 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	7813      	ldrb	r3, [r2, #0]
 800a040:	f043 0302 	orr.w	r3, r3, #2
 800a044:	7013      	strb	r3, [r2, #0]
 800a046:	e004      	b.n	800a052 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 800a048:	687a      	ldr	r2, [r7, #4]
 800a04a:	7813      	ldrb	r3, [r2, #0]
 800a04c:	f36f 0341 	bfc	r3, #1, #1
 800a050:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	7813      	ldrb	r3, [r2, #0]
 800a056:	f043 0301 	orr.w	r3, r3, #1
 800a05a:	7013      	strb	r3, [r2, #0]
}
 800a05c:	bf00      	nop
 800a05e:	3708      	adds	r7, #8
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b082      	sub	sp, #8
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800a06c:	6879      	ldr	r1, [r7, #4]
 800a06e:	4803      	ldr	r0, [pc, #12]	@ (800a07c <vIPTimerStartARPResolution+0x18>)
 800a070:	f7ff ffd4 	bl	800a01c <prvIPTimerStart>
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20001130 	.word	0x20001130

0800a080 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	683a      	ldr	r2, [r7, #0]
 800a08e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 800a090:	6839      	ldr	r1, [r7, #0]
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f7ff ffc2 	bl	800a01c <prvIPTimerStart>
}
 800a098:	bf00      	nop
 800a09a:	3708      	adds	r7, #8
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}

0800a0a0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 800a0a8:	6879      	ldr	r1, [r7, #4]
 800a0aa:	4803      	ldr	r0, [pc, #12]	@ (800a0b8 <vTCPTimerReload+0x18>)
 800a0ac:	f7ff ffe8 	bl	800a080 <prvIPTimerReload>
    }
 800a0b0:	bf00      	nop
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20001158 	.word	0x20001158

0800a0bc <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 800a0c4:	6879      	ldr	r1, [r7, #4]
 800a0c6:	4803      	ldr	r0, [pc, #12]	@ (800a0d4 <vARPTimerReload+0x18>)
 800a0c8:	f7ff ffda 	bl	800a080 <prvIPTimerReload>
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	20001144 	.word	0x20001144

0800a0d8 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 800a0e2:	6839      	ldr	r1, [r7, #0]
 800a0e4:	4806      	ldr	r0, [pc, #24]	@ (800a100 <vDHCP_RATimerReload+0x28>)
 800a0e6:	f017 ff07 	bl	8021ef8 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	33f8      	adds	r3, #248	@ 0xf8
 800a0ee:	6839      	ldr	r1, [r7, #0]
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	f7ff ffc5 	bl	800a080 <prvIPTimerReload>
    }
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	08024a20 	.word	0x08024a20

0800a104 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	4803      	ldr	r0, [pc, #12]	@ (800a11c <vNetworkTimerReload+0x18>)
 800a110:	f7ff ffb6 	bl	800a080 <prvIPTimerReload>
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}
 800a11c:	20001180 	.word	0x20001180

0800a120 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	b2db      	uxtb	r3, r3
 800a132:	2b00      	cmp	r3, #0
 800a134:	d102      	bne.n	800a13c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 800a136:	2300      	movs	r3, #0
 800a138:	60fb      	str	r3, [r7, #12]
 800a13a:	e028      	b.n	800a18e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	f003 0302 	and.w	r3, r3, #2
 800a144:	b2db      	uxtb	r3, r3
 800a146:	2b00      	cmp	r3, #0
 800a148:	d10f      	bne.n	800a16a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	1d1a      	adds	r2, r3, #4
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	330c      	adds	r3, #12
 800a152:	4619      	mov	r1, r3
 800a154:	4610      	mov	r0, r2
 800a156:	f7fa fe63 	bl	8004e20 <xTaskCheckForTimeOut>
 800a15a:	4603      	mov	r3, r0
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d004      	beq.n	800a16a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	7813      	ldrb	r3, [r2, #0]
 800a164:	f043 0302 	orr.w	r3, r3, #2
 800a168:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f003 0302 	and.w	r3, r3, #2
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	d008      	beq.n	800a18a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	691b      	ldr	r3, [r3, #16]
 800a17c:	4619      	mov	r1, r3
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f7ff ff4c 	bl	800a01c <prvIPTimerStart>
            xReturn = pdTRUE;
 800a184:	2301      	movs	r3, #1
 800a186:	60fb      	str	r3, [r7, #12]
 800a188:	e001      	b.n	800a18e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800a18e:	68fb      	ldr	r3, [r7, #12]
}
 800a190:	4618      	mov	r0, r3
 800a192:	3710      	adds	r7, #16
 800a194:	46bd      	mov	sp, r7
 800a196:	bd80      	pop	{r7, pc}

0800a198 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 800a1a0:	4a0c      	ldr	r2, [pc, #48]	@ (800a1d4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a1a2:	7813      	ldrb	r3, [r2, #0]
 800a1a4:	f043 0301 	orr.w	r3, r3, #1
 800a1a8:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d005      	beq.n	800a1bc <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 800a1b0:	4a08      	ldr	r2, [pc, #32]	@ (800a1d4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a1b2:	7813      	ldrb	r3, [r2, #0]
 800a1b4:	f043 0302 	orr.w	r3, r3, #2
 800a1b8:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 800a1ba:	e004      	b.n	800a1c6 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 800a1bc:	4a05      	ldr	r2, [pc, #20]	@ (800a1d4 <vIPSetTCPTimerExpiredState+0x3c>)
 800a1be:	7813      	ldrb	r3, [r2, #0]
 800a1c0:	f36f 0341 	bfc	r3, #1, #1
 800a1c4:	7013      	strb	r3, [r2, #0]
    }
 800a1c6:	bf00      	nop
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	20001158 	.word	0x20001158

0800a1d8 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b083      	sub	sp, #12
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d005      	beq.n	800a1f2 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 800a1e6:	4a08      	ldr	r2, [pc, #32]	@ (800a208 <vIPSetARPTimerEnableState+0x30>)
 800a1e8:	7813      	ldrb	r3, [r2, #0]
 800a1ea:	f043 0301 	orr.w	r3, r3, #1
 800a1ee:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a1f0:	e004      	b.n	800a1fc <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 800a1f2:	4a05      	ldr	r2, [pc, #20]	@ (800a208 <vIPSetARPTimerEnableState+0x30>)
 800a1f4:	7813      	ldrb	r3, [r2, #0]
 800a1f6:	f36f 0300 	bfc	r3, #0, #1
 800a1fa:	7013      	strb	r3, [r2, #0]
}
 800a1fc:	bf00      	nop
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	20001144 	.word	0x20001144

0800a20c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d005      	beq.n	800a226 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800a21a:	4a08      	ldr	r2, [pc, #32]	@ (800a23c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a21c:	7813      	ldrb	r3, [r2, #0]
 800a21e:	f043 0301 	orr.w	r3, r3, #1
 800a222:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 800a224:	e004      	b.n	800a230 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 800a226:	4a05      	ldr	r2, [pc, #20]	@ (800a23c <vIPSetARPResolutionTimerEnableState+0x30>)
 800a228:	7813      	ldrb	r3, [r2, #0]
 800a22a:	f36f 0300 	bfc	r3, #0, #1
 800a22e:	7013      	strb	r3, [r2, #0]
}
 800a230:	bf00      	nop
 800a232:	370c      	adds	r7, #12
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	20001130 	.word	0x20001130

0800a240 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <vIPSetDHCP_RATimerEnableState+0x14>
 800a250:	4b0e      	ldr	r3, [pc, #56]	@ (800a28c <vIPSetDHCP_RATimerEnableState+0x4c>)
 800a252:	e000      	b.n	800a256 <vIPSetDHCP_RATimerEnableState+0x16>
 800a254:	4b0e      	ldr	r3, [pc, #56]	@ (800a290 <vIPSetDHCP_RATimerEnableState+0x50>)
 800a256:	4619      	mov	r1, r3
 800a258:	480e      	ldr	r0, [pc, #56]	@ (800a294 <vIPSetDHCP_RATimerEnableState+0x54>)
 800a25a:	f017 fe4d 	bl	8021ef8 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d007      	beq.n	800a274 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a26a:	f043 0301 	orr.w	r3, r3, #1
 800a26e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a272:	e006      	b.n	800a282 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 800a274:	687a      	ldr	r2, [r7, #4]
 800a276:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800a27a:	f36f 0300 	bfc	r3, #0, #1
 800a27e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 800a282:	bf00      	nop
 800a284:	3708      	adds	r7, #8
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	08024a3c 	.word	0x08024a3c
 800a290:	08024a40 	.word	0x08024a40
 800a294:	08024a44 	.word	0x08024a44

0800a298 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d005      	beq.n	800a2b2 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 800a2a6:	4a08      	ldr	r2, [pc, #32]	@ (800a2c8 <vIPSetDNSTimerEnableState+0x30>)
 800a2a8:	7813      	ldrb	r3, [r2, #0]
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 800a2b0:	e004      	b.n	800a2bc <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 800a2b2:	4a05      	ldr	r2, [pc, #20]	@ (800a2c8 <vIPSetDNSTimerEnableState+0x30>)
 800a2b4:	7813      	ldrb	r3, [r2, #0]
 800a2b6:	f36f 0300 	bfc	r3, #0, #1
 800a2ba:	7013      	strb	r3, [r2, #0]
    }
 800a2bc:	bf00      	nop
 800a2be:	370c      	adds	r7, #12
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	2000116c 	.word	0x2000116c

0800a2cc <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 800a2d4:	4a04      	ldr	r2, [pc, #16]	@ (800a2e8 <vSetAllNetworksUp+0x1c>)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6013      	str	r3, [r2, #0]
}
 800a2da:	bf00      	nop
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr
 800a2e6:	bf00      	nop
 800a2e8:	2000112c 	.word	0x2000112c

0800a2ec <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800a2fa:	2100      	movs	r1, #0
 800a2fc:	6838      	ldr	r0, [r7, #0]
 800a2fe:	f00c feeb 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 800a302:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d03e      	beq.n	800a388 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d104      	bne.n	800a31c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 800a312:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800a316:	481f      	ldr	r0, [pc, #124]	@ (800a394 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 800a318:	f7f7 fb0e 	bl	8001938 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	429a      	cmp	r2, r3
 800a324:	d902      	bls.n	800a32c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a32a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800a32c:	68bb      	ldr	r3, [r7, #8]
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	695a      	ldr	r2, [r3, #20]
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a34e:	68bb      	ldr	r3, [r7, #8]
 800a350:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a362:	68fa      	ldr	r2, [r7, #12]
 800a364:	4619      	mov	r1, r3
 800a366:	f017 ffe3 	bl	8022330 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800a36a:	68b8      	ldr	r0, [r7, #8]
 800a36c:	f7ff fd0c 	bl	8009d88 <uxIPHeaderSizePacket>
 800a370:	4603      	mov	r3, r0
 800a372:	2b28      	cmp	r3, #40	@ 0x28
 800a374:	d108      	bne.n	800a388 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f103 0014 	add.w	r0, r3, #20
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3314      	adds	r3, #20
 800a380:	2210      	movs	r2, #16
 800a382:	4619      	mov	r1, r3
 800a384:	f017 ffd4 	bl	8022330 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 800a388:	68bb      	ldr	r3, [r7, #8]
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3710      	adds	r7, #16
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	08024a68 	.word	0x08024a68

0800a398 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d102      	bne.n	800a3ae <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	60fb      	str	r3, [r7, #12]
 800a3ac:	e013      	b.n	800a3d6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f816 	bl	800a3e0 <void_ptr_to_uintptr>
 800a3b4:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 800a3b6:	68ba      	ldr	r2, [r7, #8]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	3b0a      	subs	r3, #10
 800a3be:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f003 0303 	and.w	r3, r3, #3
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d103      	bne.n	800a3d2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]
 800a3d0:	e001      	b.n	800a3d6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
}
 800a3d8:	4618      	mov	r0, r3
 800a3da:	3710      	adds	r7, #16
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b085      	sub	sp, #20
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr

0800a3fa <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 800a402:	2100      	movs	r1, #0
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f7ff ffc7 	bl	800a398 <prvPacketBuffer_to_NetworkBuffer>
 800a40a:	4603      	mov	r3, r0
    }
 800a40c:	4618      	mov	r0, r3
 800a40e:	3708      	adds	r7, #8
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}

0800a414 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 800a414:	b580      	push	{r7, lr}
 800a416:	b088      	sub	sp, #32
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d102      	bne.n	800a428 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 800a422:	2300      	movs	r3, #0
 800a424:	61fb      	str	r3, [r7, #28]
 800a426:	e033      	b.n	800a490 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff ffd9 	bl	800a3e0 <void_ptr_to_uintptr>
 800a42e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	3b30      	subs	r3, #48	@ 0x30
 800a434:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	781b      	ldrb	r3, [r3, #0]
 800a43e:	f023 030f 	bic.w	r3, r3, #15
 800a442:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 800a444:	7bfb      	ldrb	r3, [r7, #15]
 800a446:	2b40      	cmp	r3, #64	@ 0x40
 800a448:	d002      	beq.n	800a450 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800a44a:	7bfb      	ldrb	r3, [r7, #15]
 800a44c:	2b60      	cmp	r3, #96	@ 0x60
 800a44e:	d101      	bne.n	800a454 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 800a450:	2301      	movs	r3, #1
 800a452:	e000      	b.n	800a456 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 800a454:	2300      	movs	r3, #0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d104      	bne.n	800a464 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800a45a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800a45e:	480f      	ldr	r0, [pc, #60]	@ (800a49c <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 800a460:	f7f7 fa6a 	bl	8001938 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 800a464:	7bfb      	ldrb	r3, [r7, #15]
 800a466:	2b40      	cmp	r3, #64	@ 0x40
 800a468:	d004      	beq.n	800a474 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800a46a:	2b60      	cmp	r3, #96	@ 0x60
 800a46c:	d105      	bne.n	800a47a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800a46e:	233e      	movs	r3, #62	@ 0x3e
 800a470:	61bb      	str	r3, [r7, #24]
                    break;
 800a472:	e008      	b.n	800a486 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 800a474:	232a      	movs	r3, #42	@ 0x2a
 800a476:	61bb      	str	r3, [r7, #24]
                    break;
 800a478:	e005      	b.n	800a486 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800a47a:	4809      	ldr	r0, [pc, #36]	@ (800a4a0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800a47c:	f017 fd3c 	bl	8021ef8 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 800a480:	232a      	movs	r3, #42	@ 0x2a
 800a482:	61bb      	str	r3, [r7, #24]
                break;
 800a484:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 800a486:	69b9      	ldr	r1, [r7, #24]
 800a488:	6878      	ldr	r0, [r7, #4]
 800a48a:	f7ff ff85 	bl	800a398 <prvPacketBuffer_to_NetworkBuffer>
 800a48e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 800a490:	69fb      	ldr	r3, [r7, #28]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3720      	adds	r7, #32
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	08024a68 	.word	0x08024a68
 800a4a0:	08024b40 	.word	0x08024b40

0800a4a4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 800a4aa:	f7fa fdd3 	bl	8005054 <xTaskGetCurrentTaskHandle>
 800a4ae:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 800a4b0:	f7fe ff6e 	bl	8009390 <FreeRTOS_GetIPTaskHandle>
 800a4b4:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d102      	bne.n	800a4c4 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	60fb      	str	r3, [r7, #12]
 800a4c2:	e001      	b.n	800a4c8 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3710      	adds	r7, #16
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
	...

0800a4d4 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 800a4d4:	b580      	push	{r7, lr}
 800a4d6:	b084      	sub	sp, #16
 800a4d8:	af00      	add	r7, sp, #0
 800a4da:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d104      	bne.n	800a4ec <prvProcessNetworkDownEvent+0x18>
 800a4e2:	f240 3137 	movw	r1, #823	@ 0x337
 800a4e6:	4857      	ldr	r0, [pc, #348]	@ (800a644 <prvProcessNetworkDownEvent+0x170>)
 800a4e8:	f7f7 fa26 	bl	8001938 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	689b      	ldr	r3, [r3, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d104      	bne.n	800a4fe <prvProcessNetworkDownEvent+0x2a>
 800a4f4:	f44f 714e 	mov.w	r1, #824	@ 0x338
 800a4f8:	4852      	ldr	r0, [pc, #328]	@ (800a644 <prvProcessNetworkDownEvent+0x170>)
 800a4fa:	f7f7 fa1d 	bl	8001938 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800a4fe:	2000      	movs	r0, #0
 800a500:	f7ff fe6a 	bl	800a1d8 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f002 ffd7 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800a50a:	60f8      	str	r0, [r7, #12]
 800a50c:	e041      	b.n	800a592 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800a50e:	68fa      	ldr	r2, [r7, #12]
 800a510:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800a514:	f36f 1304 	bfc	r3, #4, #1
 800a518:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a522:	f003 0304 	and.w	r3, r3, #4
 800a526:	b2db      	uxtb	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d003      	beq.n	800a534 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800a52c:	2100      	movs	r1, #0
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f001 f9c8 	bl	800b8c4 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a53a:	f003 0308 	and.w	r3, r3, #8
 800a53e:	b2db      	uxtb	r3, r3
 800a540:	2b00      	cmp	r3, #0
 800a542:	d003      	beq.n	800a54c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 800a544:	2001      	movs	r0, #1
 800a546:	f7f7 fa2b 	bl	80019a0 <vApplicationIPNetworkEventHook>
 800a54a:	e006      	b.n	800a55a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800a54c:	68fa      	ldr	r2, [r7, #12]
 800a54e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 800a552:	f043 0308 	orr.w	r3, r3, #8
 800a556:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f7fd f8c0 	bl	80076e0 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a566:	f003 0304 	and.w	r3, r3, #4
 800a56a:	b2db      	uxtb	r3, r3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d00b      	beq.n	800a588 <prvProcessNetworkDownEvent+0xb4>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a576:	f003 0302 	and.w	r3, r3, #2
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d003      	beq.n	800a588 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800a580:	2100      	movs	r1, #0
 800a582:	68f8      	ldr	r0, [r7, #12]
 800a584:	f7ff fe5c 	bl	800a240 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a588:	68f9      	ldr	r1, [r7, #12]
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f002 ffb6 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800a590:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2b00      	cmp	r3, #0
 800a596:	d1ba      	bne.n	800a50e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	4798      	blx	r3
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d147      	bne.n	800a636 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	7f13      	ldrb	r3, [r2, #28]
 800a5aa:	f043 0301 	orr.w	r3, r3, #1
 800a5ae:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f002 ff81 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	e039      	b.n	800a62e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a5c0:	f003 0304 	and.w	r3, r3, #4
 800a5c4:	b2db      	uxtb	r3, r3
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <prvProcessNetworkDownEvent+0x110>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a5d0:	f003 0302 	and.w	r3, r3, #2
 800a5d4:	b2db      	uxtb	r3, r3
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d004      	beq.n	800a5e4 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 800a5da:	68f9      	ldr	r1, [r7, #12]
 800a5dc:	2001      	movs	r0, #1
 800a5de:	f002 fd9f 	bl	800d120 <vRAProcess>
 800a5e2:	e01f      	b.n	800a624 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800a5ea:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <prvProcessNetworkDownEvent+0x126>
 800a5f4:	2b01      	cmp	r3, #1
 800a5f6:	d008      	beq.n	800a60a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800a5f8:	e011      	b.n	800a61e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	331c      	adds	r3, #28
 800a600:	221c      	movs	r2, #28
 800a602:	4619      	mov	r1, r3
 800a604:	f017 fe94 	bl	8022330 <memcpy>
                            break;
 800a608:	e009      	b.n	800a61e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	3390      	adds	r3, #144	@ 0x90
 800a614:	2258      	movs	r2, #88	@ 0x58
 800a616:	4619      	mov	r1, r3
 800a618:	f017 fe8a 	bl	8022330 <memcpy>
                            break;
 800a61c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800a61e:	68f8      	ldr	r0, [r7, #12]
 800a620:	f7fe fec2 	bl	80093a8 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800a624:	68f9      	ldr	r1, [r7, #12]
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f002 ff68 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800a62c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d1c2      	bne.n	800a5ba <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 800a634:	e002      	b.n	800a63c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 800a636:	2000      	movs	r0, #0
 800a638:	f7ff fe48 	bl	800a2cc <vSetAllNetworksUp>
}
 800a63c:	bf00      	nop
 800a63e:	3710      	adds	r7, #16
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	08024a68 	.word	0x08024a68

0800a648 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800a64e:	f7ff fb83 	bl	8009d58 <xIPIsNetworkTaskReady>
 800a652:	4603      	mov	r3, r0
 800a654:	2b00      	cmp	r3, #0
 800a656:	d004      	beq.n	800a662 <vPreCheckConfigs+0x1a>
 800a658:	f240 31db 	movw	r1, #987	@ 0x3db
 800a65c:	4831      	ldr	r0, [pc, #196]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a65e:	f7f7 f96b 	bl	8001938 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 800a662:	4b31      	ldr	r3, [pc, #196]	@ (800a728 <vPreCheckConfigs+0xe0>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <vPreCheckConfigs+0x2c>
 800a66a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800a66e:	482d      	ldr	r0, [pc, #180]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a670:	f7f7 f962 	bl	8001938 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 800a674:	f7fe fe8c 	bl	8009390 <FreeRTOS_GetIPTaskHandle>
 800a678:	4603      	mov	r3, r0
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d004      	beq.n	800a688 <vPreCheckConfigs+0x40>
 800a67e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 800a682:	4828      	ldr	r0, [pc, #160]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a684:	f7f7 f958 	bl	8001938 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 800a688:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a68c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	f240 52db 	movw	r2, #1499	@ 0x5db
 800a694:	4293      	cmp	r3, r2
 800a696:	d804      	bhi.n	800a6a2 <vPreCheckConfigs+0x5a>
 800a698:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 800a69c:	4821      	ldr	r0, [pc, #132]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a69e:	f7f7 f94b 	bl	8001938 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 800a6a2:	230e      	movs	r3, #14
 800a6a4:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2b0e      	cmp	r3, #14
 800a6aa:	d004      	beq.n	800a6b6 <vPreCheckConfigs+0x6e>
 800a6ac:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800a6b0:	481c      	ldr	r0, [pc, #112]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a6b2:	f7f7 f941 	bl	8001938 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 800a6b6:	231c      	movs	r3, #28
 800a6b8:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2b1c      	cmp	r3, #28
 800a6be:	d004      	beq.n	800a6ca <vPreCheckConfigs+0x82>
 800a6c0:	f240 4102 	movw	r1, #1026	@ 0x402
 800a6c4:	4817      	ldr	r0, [pc, #92]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a6c6:	f7f7 f937 	bl	8001938 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 800a6ca:	2314      	movs	r3, #20
 800a6cc:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2b14      	cmp	r3, #20
 800a6d2:	d004      	beq.n	800a6de <vPreCheckConfigs+0x96>
 800a6d4:	f240 4105 	movw	r1, #1029	@ 0x405
 800a6d8:	4812      	ldr	r0, [pc, #72]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a6da:	f7f7 f92d 	bl	8001938 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 800a6de:	2308      	movs	r3, #8
 800a6e0:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b08      	cmp	r3, #8
 800a6e6:	d004      	beq.n	800a6f2 <vPreCheckConfigs+0xaa>
 800a6e8:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 800a6ec:	480d      	ldr	r0, [pc, #52]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a6ee:	f7f7 f923 	bl	8001938 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 800a6f2:	2308      	movs	r3, #8
 800a6f4:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b08      	cmp	r3, #8
 800a6fa:	d004      	beq.n	800a706 <vPreCheckConfigs+0xbe>
 800a6fc:	f240 410b 	movw	r1, #1035	@ 0x40b
 800a700:	4808      	ldr	r0, [pc, #32]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a702:	f7f7 f919 	bl	8001938 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 800a706:	2324      	movs	r3, #36	@ 0x24
 800a708:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b24      	cmp	r3, #36	@ 0x24
 800a70e:	d004      	beq.n	800a71a <vPreCheckConfigs+0xd2>
 800a710:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800a714:	4803      	ldr	r0, [pc, #12]	@ (800a724 <vPreCheckConfigs+0xdc>)
 800a716:	f7f7 f90f 	bl	8001938 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800a71a:	bf00      	nop
 800a71c:	3708      	adds	r7, #8
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	08024a68 	.word	0x08024a68
 800a728:	20001118 	.word	0x20001118

0800a72c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 800a732:	f00c fd7f 	bl	8017234 <uxGetMinimumFreeNetworkBuffers>
 800a736:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 800a738:	4b24      	ldr	r3, [pc, #144]	@ (800a7cc <vPrintResourceStats+0xa0>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d20a      	bcs.n	800a758 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 800a742:	4a22      	ldr	r2, [pc, #136]	@ (800a7cc <vPrintResourceStats+0xa0>)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 800a748:	f00c fd80 	bl	801724c <uxGetNumberOfFreeNetworkBuffers>
 800a74c:	4603      	mov	r3, r0
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	4619      	mov	r1, r3
 800a752:	481f      	ldr	r0, [pc, #124]	@ (800a7d0 <vPrintResourceStats+0xa4>)
 800a754:	f017 fbd0 	bl	8021ef8 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 800a758:	f7fb ff1e 	bl	8006598 <xPortGetMinimumEverFreeHeapSize>
 800a75c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800a75e:	4b1d      	ldr	r3, [pc, #116]	@ (800a7d4 <vPrintResourceStats+0xa8>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d103      	bne.n	800a76e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 800a766:	4a1b      	ldr	r2, [pc, #108]	@ (800a7d4 <vPrintResourceStats+0xa8>)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	e019      	b.n	800a7a2 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800a76e:	68bb      	ldr	r3, [r7, #8]
 800a770:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a774:	d215      	bcs.n	800a7a2 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 800a776:	4b17      	ldr	r3, [pc, #92]	@ (800a7d4 <vPrintResourceStats+0xa8>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	225a      	movs	r2, #90	@ 0x5a
 800a77c:	fb03 f202 	mul.w	r2, r3, r2
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2164      	movs	r1, #100	@ 0x64
 800a784:	fb01 f303 	mul.w	r3, r1, r3
 800a788:	429a      	cmp	r2, r3
 800a78a:	d90a      	bls.n	800a7a2 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800a78c:	4a11      	ldr	r2, [pc, #68]	@ (800a7d4 <vPrintResourceStats+0xa8>)
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 800a792:	f7fb fef5 	bl	8006580 <xPortGetFreeHeapSize>
 800a796:	4603      	mov	r3, r0
 800a798:	68ba      	ldr	r2, [r7, #8]
 800a79a:	4619      	mov	r1, r3
 800a79c:	480e      	ldr	r0, [pc, #56]	@ (800a7d8 <vPrintResourceStats+0xac>)
 800a79e:	f017 fbab 	bl	8021ef8 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 800a7a6:	f7ff fae3 	bl	8009d70 <uxGetMinimumIPQueueSpace>
 800a7aa:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 800a7ac:	4b0b      	ldr	r3, [pc, #44]	@ (800a7dc <vPrintResourceStats+0xb0>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d006      	beq.n	800a7c4 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 800a7b6:	4a09      	ldr	r2, [pc, #36]	@ (800a7dc <vPrintResourceStats+0xb0>)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	4808      	ldr	r0, [pc, #32]	@ (800a7e0 <vPrintResourceStats+0xb4>)
 800a7c0:	f017 fb9a 	bl	8021ef8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 800a7c4:	bf00      	nop
 800a7c6:	3710      	adds	r7, #16
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	bd80      	pop	{r7, pc}
 800a7cc:	20000018 	.word	0x20000018
 800a7d0:	08024bd8 	.word	0x08024bd8
 800a7d4:	20001194 	.word	0x20001194
 800a7d8:	08024bfc 	.word	0x08024bfc
 800a7dc:	20001198 	.word	0x20001198
 800a7e0:	08024c18 	.word	0x08024c18

0800a7e4 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	4293      	cmp	r3, r2
 800a7f4:	bf38      	it	cc
 800a7f6:	4613      	movcc	r3, r2
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	370c      	adds	r7, #12
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	4293      	cmp	r3, r2
 800a814:	bfa8      	it	ge
 800a816:	4613      	movge	r3, r2
}
 800a818:	4618      	mov	r0, r3
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a82e:	687a      	ldr	r2, [r7, #4]
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	4293      	cmp	r3, r2
 800a834:	bf28      	it	cs
 800a836:	4613      	movcs	r3, r2
}
 800a838:	4618      	mov	r0, r3
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 800a844:	b480      	push	{r7}
 800a846:	b083      	sub	sp, #12
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	4293      	cmp	r3, r2
 800a854:	bf28      	it	cs
 800a856:	4613      	movcs	r3, r2
}
 800a858:	4618      	mov	r0, r3
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d104      	bne.n	800a882 <FreeRTOS_round_up+0x1e>
 800a878:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 800a87c:	480a      	ldr	r0, [pc, #40]	@ (800a8a8 <FreeRTOS_round_up+0x44>)
 800a87e:	f7f7 f85b 	bl	8001938 <vAssertCalled>

    if( d != 0U )
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d00a      	beq.n	800a89e <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	4413      	add	r3, r2
 800a88e:	1e5a      	subs	r2, r3, #1
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	fbb2 f2f3 	udiv	r2, r2, r3
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	fb02 f303 	mul.w	r3, r2, r3
 800a89c:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 800a89e:	68fb      	ldr	r3, [r7, #12]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3710      	adds	r7, #16
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	08024a68 	.word	0x08024a68

0800a8ac <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	781b      	ldrb	r3, [r3, #0]
 800a8b8:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 800a8c2:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	3302      	adds	r3, #2
 800a8c8:	781b      	ldrb	r3, [r3, #0]
 800a8ca:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 800a8cc:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	3203      	adds	r2, #3
 800a8d2:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 800a8d4:	4313      	orrs	r3, r2
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	781b      	ldrb	r3, [r3, #0]
 800a8ee:	021b      	lsls	r3, r3, #8
 800a8f0:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 800a8f2:	687a      	ldr	r2, [r7, #4]
 800a8f4:	3201      	adds	r2, #1
 800a8f6:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	b29b      	uxth	r3, r3
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a908:	b580      	push	{r7, lr}
 800a90a:	b08a      	sub	sp, #40	@ 0x28
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 800a912:	2300      	movs	r3, #0
 800a914:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a91a:	2300      	movs	r3, #0
 800a91c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	2b21      	cmp	r3, #33	@ 0x21
 800a922:	d802      	bhi.n	800a92a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a924:	2301      	movs	r3, #1
 800a926:	61fb      	str	r3, [r7, #28]
                break;
 800a928:	e06f      	b.n	800aa0a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 800a92a:	69bb      	ldr	r3, [r7, #24]
 800a92c:	7b9b      	ldrb	r3, [r3, #14]
 800a92e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 800a930:	8afb      	ldrh	r3, [r7, #22]
 800a932:	2b44      	cmp	r3, #68	@ 0x44
 800a934:	d902      	bls.n	800a93c <xCheckIPv4SizeFields+0x34>
 800a936:	8afb      	ldrh	r3, [r7, #22]
 800a938:	2b4f      	cmp	r3, #79	@ 0x4f
 800a93a:	d902      	bls.n	800a942 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a93c:	2302      	movs	r3, #2
 800a93e:	61fb      	str	r3, [r7, #28]
                break;
 800a940:	e063      	b.n	800aa0a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 800a942:	8afb      	ldrh	r3, [r7, #22]
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	b29b      	uxth	r3, r3
 800a948:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a94c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 800a94e:	8afb      	ldrh	r3, [r7, #22]
 800a950:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	330e      	adds	r3, #14
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d202      	bcs.n	800a962 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a95c:	2303      	movs	r3, #3
 800a95e:	61fb      	str	r3, [r7, #28]
                break;
 800a960:	e053      	b.n	800aa0a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 800a962:	69bb      	ldr	r3, [r7, #24]
 800a964:	7c1a      	ldrb	r2, [r3, #16]
 800a966:	7c5b      	ldrb	r3, [r3, #17]
 800a968:	021b      	lsls	r3, r3, #8
 800a96a:	4313      	orrs	r3, r2
 800a96c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 800a96e:	89fb      	ldrh	r3, [r7, #14]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	b21a      	sxth	r2, r3
 800a974:	89fb      	ldrh	r3, [r7, #14]
 800a976:	0a1b      	lsrs	r3, r3, #8
 800a978:	b29b      	uxth	r3, r3
 800a97a:	b21b      	sxth	r3, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b21b      	sxth	r3, r3
 800a980:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 800a982:	89fb      	ldrh	r3, [r7, #14]
 800a984:	330e      	adds	r3, #14
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	429a      	cmp	r2, r3
 800a98a:	d202      	bcs.n	800a992 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a98c:	2304      	movs	r3, #4
 800a98e:	61fb      	str	r3, [r7, #28]
                break;
 800a990:	e03b      	b.n	800aa0a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a992:	69bb      	ldr	r3, [r7, #24]
 800a994:	7ddb      	ldrb	r3, [r3, #23]
 800a996:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a998:	7b7b      	ldrb	r3, [r7, #13]
 800a99a:	2b11      	cmp	r3, #17
 800a99c:	d103      	bne.n	800a9a6 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	3316      	adds	r3, #22
 800a9a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9a4:	e013      	b.n	800a9ce <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 800a9a6:	7b7b      	ldrb	r3, [r7, #13]
 800a9a8:	2b06      	cmp	r3, #6
 800a9aa:	d103      	bne.n	800a9b4 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	3322      	adds	r3, #34	@ 0x22
 800a9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9b2:	e00c      	b.n	800a9ce <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 800a9b4:	7b7b      	ldrb	r3, [r7, #13]
 800a9b6:	2b01      	cmp	r3, #1
 800a9b8:	d002      	beq.n	800a9c0 <xCheckIPv4SizeFields+0xb8>
 800a9ba:	7b7b      	ldrb	r3, [r7, #13]
 800a9bc:	2b02      	cmp	r3, #2
 800a9be:	d103      	bne.n	800a9c8 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	3316      	adds	r3, #22
 800a9c4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a9c6:	e002      	b.n	800a9ce <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a9c8:	2305      	movs	r3, #5
 800a9ca:	61fb      	str	r3, [r7, #28]
                break;
 800a9cc:	e01d      	b.n	800aa0a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 800a9ce:	683a      	ldr	r2, [r7, #0]
 800a9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d202      	bcs.n	800a9dc <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a9d6:	2306      	movs	r3, #6
 800a9d8:	61fb      	str	r3, [r7, #28]
                break;
 800a9da:	e016      	b.n	800aa0a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 800a9dc:	89fb      	ldrh	r3, [r7, #14]
 800a9de:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	b29b      	uxth	r3, r3
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	1a9b      	subs	r3, r3, r2
 800a9ea:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	2b07      	cmp	r3, #7
 800a9f0:	d906      	bls.n	800aa00 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a9f8:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a9fa:	68ba      	ldr	r2, [r7, #8]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d902      	bls.n	800aa06 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800aa00:	2307      	movs	r3, #7
 800aa02:	61fb      	str	r3, [r7, #28]
                break;
 800aa04:	e001      	b.n	800aa0a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800aa06:	2301      	movs	r3, #1
 800aa08:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800aa0a:	6a3b      	ldr	r3, [r7, #32]
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d003      	beq.n	800aa18 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800aa10:	69f9      	ldr	r1, [r7, #28]
 800aa12:	4804      	ldr	r0, [pc, #16]	@ (800aa24 <xCheckIPv4SizeFields+0x11c>)
 800aa14:	f017 fa70 	bl	8021ef8 <lUDPLoggingPrintf>
        }

        return xResult;
 800aa18:	6a3b      	ldr	r3, [r7, #32]
    }
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	3728      	adds	r7, #40	@ 0x28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}
 800aa22:	bf00      	nop
 800aa24:	08024ce4 	.word	0x08024ce4

0800aa28 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	061a      	lsls	r2, r3, #24
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	021b      	lsls	r3, r3, #8
 800aa38:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aa3c:	431a      	orrs	r2, r3
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	0a1b      	lsrs	r3, r3, #8
 800aa42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aa46:	431a      	orrs	r2, r3
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	0e1b      	lsrs	r3, r3, #24
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800aa56:	d306      	bcc.n	800aa66 <xIsIPv4Multicast+0x3e>
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800aa5e:	d202      	bcs.n	800aa66 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800aa60:	2301      	movs	r3, #1
 800aa62:	60fb      	str	r3, [r7, #12]
 800aa64:	e001      	b.n	800aa6a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800aa84:	2301      	movs	r3, #1
 800aa86:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800aa88:	7dfb      	ldrb	r3, [r7, #23]
 800aa8a:	2b01      	cmp	r3, #1
 800aa8c:	d10c      	bne.n	800aaa8 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800aa8e:	68bb      	ldr	r3, [r7, #8]
 800aa90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa96:	4619      	mov	r1, r3
 800aa98:	4610      	mov	r0, r2
 800aa9a:	f7ff ff35 	bl	800a908 <xCheckIPv4SizeFields>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	2b01      	cmp	r3, #1
 800aaa2:	d001      	beq.n	800aaa8 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d134      	bne.n	800ab18 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	7ddb      	ldrb	r3, [r3, #23]
 800aab2:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab8:	3322      	adds	r3, #34	@ 0x22
 800aaba:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800aabc:	7dbb      	ldrb	r3, [r7, #22]
 800aabe:	2b11      	cmp	r3, #17
 800aac0:	d12a      	bne.n	800ab18 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	88db      	ldrh	r3, [r3, #6]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d125      	bne.n	800ab18 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800aacc:	4b15      	ldr	r3, [pc, #84]	@ (800ab24 <prvAllowIPPacketIPv4+0xac>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b04      	cmp	r3, #4
 800aad2:	dc1f      	bgt.n	800ab14 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800aada:	061a      	lsls	r2, r3, #24
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800aae2:	021b      	lsls	r3, r3, #8
 800aae4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800aae8:	431a      	orrs	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800aaf0:	0a1b      	lsrs	r3, r3, #8
 800aaf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aaf6:	431a      	orrs	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800aafe:	0e1b      	lsrs	r3, r3, #24
 800ab00:	4313      	orrs	r3, r2
 800ab02:	4619      	mov	r1, r3
 800ab04:	4808      	ldr	r0, [pc, #32]	@ (800ab28 <prvAllowIPPacketIPv4+0xb0>)
 800ab06:	f017 f9f7 	bl	8021ef8 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800ab0a:	4b06      	ldr	r3, [pc, #24]	@ (800ab24 <prvAllowIPPacketIPv4+0xac>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	4a04      	ldr	r2, [pc, #16]	@ (800ab24 <prvAllowIPPacketIPv4+0xac>)
 800ab12:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800ab14:	2300      	movs	r3, #0
 800ab16:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800ab18:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab1a:	4618      	mov	r0, r3
 800ab1c:	3718      	adds	r7, #24
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	bf00      	nop
 800ab24:	2000119c 	.word	0x2000119c
 800ab28:	08024d08 	.word	0x08024d08

0800ab2c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b08a      	sub	sp, #40	@ 0x28
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800ab34:	2301      	movs	r3, #1
 800ab36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab3e:	330e      	adds	r3, #14
 800ab40:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800ab42:	6a3b      	ldr	r3, [r7, #32]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800ab50:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800ab52:	69bb      	ldr	r3, [r7, #24]
 800ab54:	3b14      	subs	r3, #20
 800ab56:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	330e      	adds	r3, #14
 800ab60:	4413      	add	r3, r2
 800ab62:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab68:	3322      	adds	r3, #34	@ 0x22
 800ab6a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab70:	697b      	ldr	r3, [r7, #20]
 800ab72:	1ad3      	subs	r3, r2, r3
 800ab74:	3b22      	subs	r3, #34	@ 0x22
 800ab76:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	6939      	ldr	r1, [r7, #16]
 800ab7c:	68f8      	ldr	r0, [r7, #12]
 800ab7e:	f018 fb7c 	bl	802327a <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	1ad2      	subs	r2, r2, r3
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800ab8e:	6a3b      	ldr	r3, [r7, #32]
 800ab90:	885b      	ldrh	r3, [r3, #2]
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	b21a      	sxth	r2, r3
 800ab98:	6a3b      	ldr	r3, [r7, #32]
 800ab9a:	885b      	ldrh	r3, [r3, #2]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	0a1b      	lsrs	r3, r3, #8
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	b21b      	sxth	r3, r3
 800aba4:	4313      	orrs	r3, r2
 800aba6:	b21b      	sxth	r3, r3
 800aba8:	b29a      	uxth	r2, r3
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	b29b      	uxth	r3, r3
 800abae:	1ad3      	subs	r3, r2, r3
 800abb0:	b29b      	uxth	r3, r3
 800abb2:	021b      	lsls	r3, r3, #8
 800abb4:	b29a      	uxth	r2, r3
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	885b      	ldrh	r3, [r3, #2]
 800abba:	b29b      	uxth	r3, r3
 800abbc:	021b      	lsls	r3, r3, #8
 800abbe:	b219      	sxth	r1, r3
 800abc0:	6a3b      	ldr	r3, [r7, #32]
 800abc2:	885b      	ldrh	r3, [r3, #2]
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	0a1b      	lsrs	r3, r3, #8
 800abc8:	b29b      	uxth	r3, r3
 800abca:	b21b      	sxth	r3, r3
 800abcc:	430b      	orrs	r3, r1
 800abce:	b21b      	sxth	r3, r3
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	4619      	mov	r1, r3
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	1acb      	subs	r3, r1, r3
 800abd8:	0a1b      	lsrs	r3, r3, #8
 800abda:	b29b      	uxth	r3, r3
 800abdc:	4313      	orrs	r3, r2
 800abde:	b29a      	uxth	r2, r3
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800abe4:	6a3b      	ldr	r3, [r7, #32]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	f023 030f 	bic.w	r3, r3, #15
 800abec:	b2db      	uxtb	r3, r3
 800abee:	f043 0305 	orr.w	r3, r3, #5
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800abf8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3728      	adds	r7, #40	@ 0x28
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}

0800ac04 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b088      	sub	sp, #32
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	60b9      	str	r1, [r7, #8]
 800ac0e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b0f      	cmp	r3, #15
 800ac14:	d802      	bhi.n	800ac1c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800ac16:	2300      	movs	r3, #0
 800ac18:	61fb      	str	r3, [r7, #28]
 800ac1a:	e00e      	b.n	800ac3a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800ac1c:	f107 0314 	add.w	r3, r7, #20
 800ac20:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	461a      	mov	r2, r3
 800ac28:	69bb      	ldr	r3, [r7, #24]
 800ac2a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	68b9      	ldr	r1, [r7, #8]
 800ac30:	4618      	mov	r0, r3
 800ac32:	f004 fac9 	bl	800f1c8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800ac3a:	69fb      	ldr	r3, [r7, #28]
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3720      	adds	r7, #32
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800ac44:	b480      	push	{r7}
 800ac46:	b085      	sub	sp, #20
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d010      	beq.n	800ac76 <xSend_UDP_Update_IPv4+0x32>
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d00d      	beq.n	800ac76 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac5e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	689a      	ldr	r2, [r3, #8]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f042 0208 	orr.w	r2, r2, #8
 800ac70:	731a      	strb	r2, [r3, #12]
 800ac72:	2200      	movs	r2, #0
 800ac74:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	061a      	lsls	r2, r3, #24
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	021b      	lsls	r3, r3, #8
 800ac96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ac9a:	431a      	orrs	r2, r3
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	0a1b      	lsrs	r3, r3, #8
 800aca0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800aca4:	431a      	orrs	r2, r3
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	0e1b      	lsrs	r3, r3, #24
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	2201      	movs	r2, #1
 800acb2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	2200      	movs	r2, #0
 800acb8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	225e      	movs	r2, #94	@ 0x5e
 800acbe:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	0c1b      	lsrs	r3, r3, #16
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800acca:	b2da      	uxtb	r2, r3
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	0a1b      	lsrs	r3, r3, #8
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	715a      	strb	r2, [r3, #5]
}
 800ace2:	bf00      	nop
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr
	...

0800acf0 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b08c      	sub	sp, #48	@ 0x30
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800acfa:	2300      	movs	r3, #0
 800acfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800acfe:	2300      	movs	r3, #0
 800ad00:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800ad02:	2300      	movs	r3, #0
 800ad04:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800ad0e:	2300      	movs	r3, #0
 800ad10:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	2b27      	cmp	r3, #39	@ 0x27
 800ad16:	d802      	bhi.n	800ad1e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800ad18:	2301      	movs	r3, #1
 800ad1a:	61fb      	str	r3, [r7, #28]
                break;
 800ad1c:	e098      	b.n	800ae50 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800ad1e:	693b      	ldr	r3, [r7, #16]
 800ad20:	7b9b      	ldrb	r3, [r3, #14]
 800ad22:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800ad24:	89fb      	ldrh	r3, [r7, #14]
 800ad26:	111b      	asrs	r3, r3, #4
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	2b06      	cmp	r3, #6
 800ad2e:	d002      	beq.n	800ad36 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800ad30:	2302      	movs	r3, #2
 800ad32:	61fb      	str	r3, [r7, #28]
                break;
 800ad34:	e08c      	b.n	800ae50 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	2b35      	cmp	r3, #53	@ 0x35
 800ad3a:	d802      	bhi.n	800ad42 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	61fb      	str	r3, [r7, #28]
                break;
 800ad40:	e086      	b.n	800ae50 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	8a5b      	ldrh	r3, [r3, #18]
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	021b      	lsls	r3, r3, #8
 800ad4a:	b21a      	sxth	r2, r3
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	8a5b      	ldrh	r3, [r3, #18]
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	0a1b      	lsrs	r3, r3, #8
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	b21b      	sxth	r3, r3
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	b21b      	sxth	r3, r3
 800ad5c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800ad5e:	89bb      	ldrh	r3, [r7, #12]
 800ad60:	3336      	adds	r3, #54	@ 0x36
 800ad62:	683a      	ldr	r2, [r7, #0]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d002      	beq.n	800ad6e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800ad68:	2304      	movs	r3, #4
 800ad6a:	61fb      	str	r3, [r7, #28]
                break;
 800ad6c:	e070      	b.n	800ae50 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	7d1b      	ldrb	r3, [r3, #20]
 800ad72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800ad76:	e015      	b.n	800ada4 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800ad78:	6a3b      	ldr	r3, [r7, #32]
 800ad7a:	3336      	adds	r3, #54	@ 0x36
 800ad7c:	697a      	ldr	r2, [r7, #20]
 800ad7e:	4413      	add	r3, r2
 800ad80:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	3301      	adds	r3, #1
 800ad88:	00db      	lsls	r3, r3, #3
 800ad8a:	461a      	mov	r2, r3
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	4413      	add	r3, r2
 800ad90:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	3336      	adds	r3, #54	@ 0x36
 800ad9e:	683a      	ldr	r2, [r7, #0]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d908      	bls.n	800adb6 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800ada4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ada8:	4618      	mov	r0, r3
 800adaa:	f000 f85f 	bl	800ae6c <xIsExtHeader>
 800adae:	4603      	mov	r3, r0
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1e1      	bne.n	800ad78 <xCheckIPv6SizeFields+0x88>
 800adb4:	e000      	b.n	800adb8 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800adb6:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800adb8:	6a3b      	ldr	r3, [r7, #32]
 800adba:	3336      	adds	r3, #54	@ 0x36
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	429a      	cmp	r2, r3
 800adc0:	d802      	bhi.n	800adc8 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800adc2:	2307      	movs	r3, #7
 800adc4:	61fb      	str	r3, [r7, #28]
                break;
 800adc6:	e043      	b.n	800ae50 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800adc8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adcc:	2b11      	cmp	r3, #17
 800adce:	d103      	bne.n	800add8 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800add0:	6a3b      	ldr	r3, [r7, #32]
 800add2:	333e      	adds	r3, #62	@ 0x3e
 800add4:	627b      	str	r3, [r7, #36]	@ 0x24
 800add6:	e032      	b.n	800ae3e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800add8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800addc:	2b06      	cmp	r3, #6
 800adde:	d103      	bne.n	800ade8 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800ade0:	6a3b      	ldr	r3, [r7, #32]
 800ade2:	334a      	adds	r3, #74	@ 0x4a
 800ade4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ade6:	e02a      	b.n	800ae3e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800ade8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800adec:	2b3a      	cmp	r3, #58	@ 0x3a
 800adee:	d123      	bne.n	800ae38 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	3336      	adds	r3, #54	@ 0x36
 800adf4:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800adf6:	697a      	ldr	r2, [r7, #20]
 800adf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfa:	4413      	add	r3, r2
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800ae00:	7afb      	ldrb	r3, [r7, #11]
 800ae02:	2b80      	cmp	r3, #128	@ 0x80
 800ae04:	d002      	beq.n	800ae0c <xCheckIPv6SizeFields+0x11c>
 800ae06:	7afb      	ldrb	r3, [r7, #11]
 800ae08:	2b81      	cmp	r3, #129	@ 0x81
 800ae0a:	d103      	bne.n	800ae14 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0e:	3308      	adds	r3, #8
 800ae10:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae12:	e014      	b.n	800ae3e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800ae14:	7afb      	ldrb	r3, [r7, #11]
 800ae16:	2b85      	cmp	r3, #133	@ 0x85
 800ae18:	d103      	bne.n	800ae22 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800ae1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1c:	3308      	adds	r3, #8
 800ae1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae20:	e00d      	b.n	800ae3e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800ae22:	7afb      	ldrb	r3, [r7, #11]
 800ae24:	2b86      	cmp	r3, #134	@ 0x86
 800ae26:	d103      	bne.n	800ae30 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800ae28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2a:	3310      	adds	r3, #16
 800ae2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae2e:	e006      	b.n	800ae3e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800ae30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae32:	3318      	adds	r3, #24
 800ae34:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae36:	e002      	b.n	800ae3e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800ae38:	2305      	movs	r3, #5
 800ae3a:	61fb      	str	r3, [r7, #28]
                break;
 800ae3c:	e008      	b.n	800ae50 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d202      	bcs.n	800ae4c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800ae46:	2306      	movs	r3, #6
 800ae48:	61fb      	str	r3, [r7, #28]
                break;
 800ae4a:	e001      	b.n	800ae50 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800ae50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d003      	beq.n	800ae5e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800ae56:	69f9      	ldr	r1, [r7, #28]
 800ae58:	4803      	ldr	r0, [pc, #12]	@ (800ae68 <xCheckIPv6SizeFields+0x178>)
 800ae5a:	f017 f84d 	bl	8021ef8 <lUDPLoggingPrintf>
        }

        return xResult;
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800ae60:	4618      	mov	r0, r3
 800ae62:	3730      	adds	r7, #48	@ 0x30
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	08024d44 	.word	0x08024d44

0800ae6c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	4603      	mov	r3, r0
 800ae74:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800ae7a:	79fb      	ldrb	r3, [r7, #7]
 800ae7c:	2b87      	cmp	r3, #135	@ 0x87
 800ae7e:	d016      	beq.n	800aeae <xIsExtHeader+0x42>
 800ae80:	2b87      	cmp	r3, #135	@ 0x87
 800ae82:	dc16      	bgt.n	800aeb2 <xIsExtHeader+0x46>
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d012      	beq.n	800aeae <xIsExtHeader+0x42>
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	db12      	blt.n	800aeb2 <xIsExtHeader+0x46>
 800ae8c:	2b3c      	cmp	r3, #60	@ 0x3c
 800ae8e:	dc10      	bgt.n	800aeb2 <xIsExtHeader+0x46>
 800ae90:	2b2b      	cmp	r3, #43	@ 0x2b
 800ae92:	db0e      	blt.n	800aeb2 <xIsExtHeader+0x46>
 800ae94:	3b2b      	subs	r3, #43	@ 0x2b
 800ae96:	4a0a      	ldr	r2, [pc, #40]	@ (800aec0 <xIsExtHeader+0x54>)
 800ae98:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9c:	f003 0301 	and.w	r3, r3, #1
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	bf14      	ite	ne
 800aea4:	2301      	movne	r3, #1
 800aea6:	2300      	moveq	r3, #0
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d001      	beq.n	800aeb2 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
    }
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3714      	adds	r7, #20
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	00020183 	.word	0x00020183

0800aec4 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800aec4:	b580      	push	{r7, lr}
 800aec6:	b082      	sub	sp, #8
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
 800aecc:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d104      	bne.n	800aede <xGetIPv6MulticastGroupID+0x1a>
 800aed4:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800aed8:	480e      	ldr	r0, [pc, #56]	@ (800af14 <xGetIPv6MulticastGroupID+0x50>)
 800aeda:	f7f6 fd2d 	bl	8001938 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d104      	bne.n	800aeee <xGetIPv6MulticastGroupID+0x2a>
 800aee4:	f240 1113 	movw	r1, #275	@ 0x113
 800aee8:	480a      	ldr	r0, [pc, #40]	@ (800af14 <xGetIPv6MulticastGroupID+0x50>)
 800aeea:	f7f6 fd25 	bl	8001938 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	2200      	movs	r2, #0
 800aef2:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800aef4:	683b      	ldr	r3, [r7, #0]
 800aef6:	2200      	movs	r2, #0
 800aef8:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	1c98      	adds	r0, r3, #2
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3302      	adds	r3, #2
 800af02:	220e      	movs	r2, #14
 800af04:	4619      	mov	r1, r3
 800af06:	f017 fa13 	bl	8022330 <memcpy>
}
 800af0a:	bf00      	nop
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	08024d68 	.word	0x08024d68

0800af18 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2210      	movs	r2, #16
 800af28:	4906      	ldr	r1, [pc, #24]	@ (800af44 <xIsIPv6Loopback+0x2c>)
 800af2a:	4618      	mov	r0, r3
 800af2c:	f018 f995 	bl	802325a <memcmp>
 800af30:	4603      	mov	r3, r0
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800af36:	2301      	movs	r3, #1
 800af38:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800af3a:	68fb      	ldr	r3, [r7, #12]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3710      	adds	r7, #16
 800af40:	46bd      	mov	sp, r7
 800af42:	bd80      	pop	{r7, pc}
 800af44:	080275bc 	.word	0x080275bc

0800af48 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800af50:	2300      	movs	r3, #0
 800af52:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	2bff      	cmp	r3, #255	@ 0xff
 800af5a:	d123      	bne.n	800afa4 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800af5c:	f107 030c 	add.w	r3, r7, #12
 800af60:	4619      	mov	r1, r3
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f7ff ffae 	bl	800aec4 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	f003 030f 	and.w	r3, r3, #15
 800af70:	2b00      	cmp	r3, #0
 800af72:	d102      	bne.n	800af7a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800af74:	2300      	movs	r3, #0
 800af76:	61fb      	str	r3, [r7, #28]
 800af78:	e014      	b.n	800afa4 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	785b      	ldrb	r3, [r3, #1]
 800af7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d10c      	bne.n	800afa0 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800af86:	f107 030c 	add.w	r3, r7, #12
 800af8a:	2210      	movs	r2, #16
 800af8c:	4908      	ldr	r1, [pc, #32]	@ (800afb0 <xIsIPv6AllowedMulticast+0x68>)
 800af8e:	4618      	mov	r0, r3
 800af90:	f018 f963 	bl	802325a <memcmp>
 800af94:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800af96:	2b00      	cmp	r3, #0
 800af98:	d102      	bne.n	800afa0 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800af9a:	2300      	movs	r3, #0
 800af9c:	61fb      	str	r3, [r7, #28]
 800af9e:	e001      	b.n	800afa4 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800afa0:	2301      	movs	r3, #1
 800afa2:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800afa4:	69fb      	ldr	r3, [r7, #28]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3720      	adds	r7, #32
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	080275ac 	.word	0x080275ac

0800afb4 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b08a      	sub	sp, #40	@ 0x28
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800afc0:	68bb      	ldr	r3, [r7, #8]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	2bff      	cmp	r3, #255	@ 0xff
 800afc6:	d112      	bne.n	800afee <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800afc8:	68bb      	ldr	r3, [r7, #8]
 800afca:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d10e      	bne.n	800afee <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800afd4:	2bff      	cmp	r3, #255	@ 0xff
 800afd6:	d10a      	bne.n	800afee <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f103 000d 	add.w	r0, r3, #13
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	330d      	adds	r3, #13
 800afe2:	2203      	movs	r2, #3
 800afe4:	4619      	mov	r1, r3
 800afe6:	f018 f938 	bl	802325a <memcmp>
 800afea:	6278      	str	r0, [r7, #36]	@ 0x24
 800afec:	e069      	b.n	800b0c2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	2210      	movs	r2, #16
 800aff2:	4936      	ldr	r1, [pc, #216]	@ (800b0cc <xCompareIPv6_Address+0x118>)
 800aff4:	4618      	mov	r0, r3
 800aff6:	f018 f930 	bl	802325a <memcmp>
 800affa:	4603      	mov	r3, r0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d102      	bne.n	800b006 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800b000:	2300      	movs	r3, #0
 800b002:	627b      	str	r3, [r7, #36]	@ 0x24
 800b004:	e05d      	b.n	800b0c2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b00c:	d10e      	bne.n	800b02c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800b012:	2b80      	cmp	r3, #128	@ 0x80
 800b014:	d10a      	bne.n	800b02c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800b01a:	2bfe      	cmp	r3, #254	@ 0xfe
 800b01c:	d106      	bne.n	800b02c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800b022:	2b80      	cmp	r3, #128	@ 0x80
 800b024:	d102      	bne.n	800b02c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800b026:	2300      	movs	r3, #0
 800b028:	627b      	str	r3, [r7, #36]	@ 0x24
 800b02a:	e04a      	b.n	800b0c2 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d102      	bne.n	800b038 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800b032:	2300      	movs	r3, #0
 800b034:	627b      	str	r3, [r7, #36]	@ 0x24
 800b036:	e044      	b.n	800b0c2 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b80      	cmp	r3, #128	@ 0x80
 800b03c:	d107      	bne.n	800b04e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	68b9      	ldr	r1, [r7, #8]
 800b042:	2210      	movs	r2, #16
 800b044:	4618      	mov	r0, r3
 800b046:	f018 f908 	bl	802325a <memcmp>
 800b04a:	6278      	str	r0, [r7, #36]	@ 0x24
 800b04c:	e039      	b.n	800b0c2 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	08db      	lsrs	r3, r3, #3
 800b052:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800b054:	2300      	movs	r3, #0
 800b056:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800b058:	6a3b      	ldr	r3, [r7, #32]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d006      	beq.n	800b06c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	6a3a      	ldr	r2, [r7, #32]
 800b064:	4618      	mov	r0, r3
 800b066:	f018 f8f8 	bl	802325a <memcmp>
 800b06a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800b06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d127      	bne.n	800b0c2 <xCompareIPv6_Address+0x10e>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d022      	beq.n	800b0c2 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f003 0307 	and.w	r3, r3, #7
 800b082:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	f1c3 0308 	rsb	r3, r3, #8
 800b08a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b08c:	2201      	movs	r2, #1
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	fa02 f303 	lsl.w	r3, r2, r3
 800b094:	3b01      	subs	r3, #1
 800b096:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b098:	697b      	ldr	r3, [r7, #20]
 800b09a:	b2db      	uxtb	r3, r3
 800b09c:	43db      	mvns	r3, r3
 800b09e:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800b0a0:	68fa      	ldr	r2, [r7, #12]
 800b0a2:	6a3b      	ldr	r3, [r7, #32]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	781a      	ldrb	r2, [r3, #0]
 800b0a8:	68b9      	ldr	r1, [r7, #8]
 800b0aa:	6a3b      	ldr	r3, [r7, #32]
 800b0ac:	440b      	add	r3, r1
 800b0ae:	781b      	ldrb	r3, [r3, #0]
 800b0b0:	4053      	eors	r3, r2
 800b0b2:	b2da      	uxtb	r2, r3
 800b0b4:	7cfb      	ldrb	r3, [r7, #19]
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d001      	beq.n	800b0c2 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800b0be:	2301      	movs	r3, #1
 800b0c0:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	3728      	adds	r7, #40	@ 0x28
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	bd80      	pop	{r7, pc}
 800b0cc:	080275cc 	.word	0x080275cc

0800b0d0 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800b0e0:	7dfb      	ldrb	r3, [r7, #23]
 800b0e2:	2b01      	cmp	r3, #1
 800b0e4:	d10c      	bne.n	800b100 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	4610      	mov	r0, r2
 800b0f2:	f7ff fdfd 	bl	800acf0 <xCheckIPv6SizeFields>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b01      	cmp	r3, #1
 800b0fa:	d001      	beq.n	800b100 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800b100:	7dfb      	ldrb	r3, [r7, #23]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
	...

0800b10c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	460a      	mov	r2, r1
 800b116:	71fb      	strb	r3, [r7, #7]
 800b118:	4613      	mov	r3, r2
 800b11a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800b11c:	79fb      	ldrb	r3, [r7, #7]
 800b11e:	2b87      	cmp	r3, #135	@ 0x87
 800b120:	d04b      	beq.n	800b1ba <xGetExtensionOrder+0xae>
 800b122:	2b87      	cmp	r3, #135	@ 0x87
 800b124:	dc4c      	bgt.n	800b1c0 <xGetExtensionOrder+0xb4>
 800b126:	2b00      	cmp	r3, #0
 800b128:	d030      	beq.n	800b18c <xGetExtensionOrder+0x80>
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	db48      	blt.n	800b1c0 <xGetExtensionOrder+0xb4>
 800b12e:	2b3c      	cmp	r3, #60	@ 0x3c
 800b130:	dc46      	bgt.n	800b1c0 <xGetExtensionOrder+0xb4>
 800b132:	2b2b      	cmp	r3, #43	@ 0x2b
 800b134:	db44      	blt.n	800b1c0 <xGetExtensionOrder+0xb4>
 800b136:	3b2b      	subs	r3, #43	@ 0x2b
 800b138:	2b11      	cmp	r3, #17
 800b13a:	d841      	bhi.n	800b1c0 <xGetExtensionOrder+0xb4>
 800b13c:	a201      	add	r2, pc, #4	@ (adr r2, 800b144 <xGetExtensionOrder+0x38>)
 800b13e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b142:	bf00      	nop
 800b144:	0800b1a3 	.word	0x0800b1a3
 800b148:	0800b1a9 	.word	0x0800b1a9
 800b14c:	0800b1c1 	.word	0x0800b1c1
 800b150:	0800b1c1 	.word	0x0800b1c1
 800b154:	0800b1c1 	.word	0x0800b1c1
 800b158:	0800b1c1 	.word	0x0800b1c1
 800b15c:	0800b1c1 	.word	0x0800b1c1
 800b160:	0800b1b5 	.word	0x0800b1b5
 800b164:	0800b1af 	.word	0x0800b1af
 800b168:	0800b1c1 	.word	0x0800b1c1
 800b16c:	0800b1c1 	.word	0x0800b1c1
 800b170:	0800b1c1 	.word	0x0800b1c1
 800b174:	0800b1c1 	.word	0x0800b1c1
 800b178:	0800b1c1 	.word	0x0800b1c1
 800b17c:	0800b1c1 	.word	0x0800b1c1
 800b180:	0800b1c1 	.word	0x0800b1c1
 800b184:	0800b1c1 	.word	0x0800b1c1
 800b188:	0800b193 	.word	0x0800b193
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800b18c:	2301      	movs	r3, #1
 800b18e:	60fb      	str	r3, [r7, #12]
            break;
 800b190:	e01b      	b.n	800b1ca <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800b192:	2307      	movs	r3, #7
 800b194:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800b196:	79bb      	ldrb	r3, [r7, #6]
 800b198:	2b2b      	cmp	r3, #43	@ 0x2b
 800b19a:	d115      	bne.n	800b1c8 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800b19c:	2302      	movs	r3, #2
 800b19e:	60fb      	str	r3, [r7, #12]
            }

            break;
 800b1a0:	e012      	b.n	800b1c8 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	60fb      	str	r3, [r7, #12]
            break;
 800b1a6:	e010      	b.n	800b1ca <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800b1a8:	2304      	movs	r3, #4
 800b1aa:	60fb      	str	r3, [r7, #12]
            break;
 800b1ac:	e00d      	b.n	800b1ca <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800b1ae:	2305      	movs	r3, #5
 800b1b0:	60fb      	str	r3, [r7, #12]
            break;
 800b1b2:	e00a      	b.n	800b1ca <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800b1b4:	2306      	movs	r3, #6
 800b1b6:	60fb      	str	r3, [r7, #12]
            break;
 800b1b8:	e007      	b.n	800b1ca <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800b1ba:	2308      	movs	r3, #8
 800b1bc:	60fb      	str	r3, [r7, #12]
            break;
 800b1be:	e004      	b.n	800b1ca <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800b1c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b1c4:	60fb      	str	r3, [r7, #12]
            break;
 800b1c6:	e000      	b.n	800b1ca <xGetExtensionOrder+0xbe>
            break;
 800b1c8:	bf00      	nop
    }

    return xReturn;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3714      	adds	r7, #20
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr

0800b1d8 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08e      	sub	sp, #56	@ 0x38
 800b1dc:	af02      	add	r7, sp, #8
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ec:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1f2:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800b200:	2300      	movs	r3, #0
 800b202:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b20c:	f107 020b 	add.w	r2, r7, #11
 800b210:	4619      	mov	r1, r3
 800b212:	f000 faa5 	bl	800b760 <usGetExtensionHeaderLength>
 800b216:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800b218:	69fb      	ldr	r3, [r7, #28]
 800b21a:	3336      	adds	r3, #54	@ 0x36
 800b21c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800b21e:	69ba      	ldr	r2, [r7, #24]
 800b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b222:	429a      	cmp	r2, r3
 800b224:	d243      	bcs.n	800b2ae <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	8a5b      	ldrh	r3, [r3, #18]
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	021b      	lsls	r3, r3, #8
 800b22e:	b21a      	sxth	r2, r3
 800b230:	6a3b      	ldr	r3, [r7, #32]
 800b232:	8a5b      	ldrh	r3, [r3, #18]
 800b234:	b29b      	uxth	r3, r3
 800b236:	0a1b      	lsrs	r3, r3, #8
 800b238:	b29b      	uxth	r3, r3
 800b23a:	b21b      	sxth	r3, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	b21b      	sxth	r3, r3
 800b240:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800b242:	8afb      	ldrh	r3, [r7, #22]
 800b244:	69fa      	ldr	r2, [r7, #28]
 800b246:	429a      	cmp	r2, r3
 800b248:	d231      	bcs.n	800b2ae <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800b24a:	683b      	ldr	r3, [r7, #0]
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d12e      	bne.n	800b2ae <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800b250:	7afa      	ldrb	r2, [r7, #11]
 800b252:	6a3b      	ldr	r3, [r7, #32]
 800b254:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b25a:	3336      	adds	r3, #54	@ 0x36
 800b25c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	4413      	add	r3, r2
 800b266:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800b268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	1ad3      	subs	r3, r2, r3
 800b26e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800b270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b272:	68f9      	ldr	r1, [r7, #12]
 800b274:	6938      	ldr	r0, [r7, #16]
 800b276:	f018 f800 	bl	802327a <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b27e:	69fb      	ldr	r3, [r7, #28]
 800b280:	1ad2      	subs	r2, r2, r3
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	b29b      	uxth	r3, r3
 800b28a:	8afa      	ldrh	r2, [r7, #22]
 800b28c:	1ad3      	subs	r3, r2, r3
 800b28e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800b290:	8afb      	ldrh	r3, [r7, #22]
 800b292:	021b      	lsls	r3, r3, #8
 800b294:	b21a      	sxth	r2, r3
 800b296:	8afb      	ldrh	r3, [r7, #22]
 800b298:	0a1b      	lsrs	r3, r3, #8
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	b21b      	sxth	r3, r3
 800b29e:	4313      	orrs	r3, r2
 800b2a0:	b21b      	sxth	r3, r3
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800b2ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	d101      	bne.n	800b2ba <eHandleIPv6ExtensionHeaders+0xe2>
 800b2b6:	4910      	ldr	r1, [pc, #64]	@ (800b2f8 <eHandleIPv6ExtensionHeaders+0x120>)
 800b2b8:	e000      	b.n	800b2bc <eHandleIPv6ExtensionHeaders+0xe4>
 800b2ba:	4910      	ldr	r1, [pc, #64]	@ (800b2fc <eHandleIPv6ExtensionHeaders+0x124>)
 800b2bc:	6a3b      	ldr	r3, [r7, #32]
 800b2be:	8a5b      	ldrh	r3, [r3, #18]
 800b2c0:	b29b      	uxth	r3, r3
 800b2c2:	021b      	lsls	r3, r3, #8
 800b2c4:	b21a      	sxth	r2, r3
 800b2c6:	6a3b      	ldr	r3, [r7, #32]
 800b2c8:	8a5b      	ldrh	r3, [r3, #18]
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	0a1b      	lsrs	r3, r3, #8
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	b21b      	sxth	r3, r3
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	b21b      	sxth	r3, r3
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	461a      	mov	r2, r3
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2de:	9301      	str	r3, [sp, #4]
 800b2e0:	9200      	str	r2, [sp, #0]
 800b2e2:	69fb      	ldr	r3, [r7, #28]
 800b2e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2e6:	4806      	ldr	r0, [pc, #24]	@ (800b300 <eHandleIPv6ExtensionHeaders+0x128>)
 800b2e8:	f016 fe06 	bl	8021ef8 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800b2ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3730      	adds	r7, #48	@ 0x30
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}
 800b2f8:	08024d98 	.word	0x08024d98
 800b2fc:	08024da0 	.word	0x08024da0
 800b300:	08024da4 	.word	0x08024da4

0800b304 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800b30e:	2300      	movs	r3, #0
 800b310:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d026      	beq.n	800b366 <pxTCPSocketLookup_IPv6+0x62>
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d023      	beq.n	800b366 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	7a1b      	ldrb	r3, [r3, #8]
 800b322:	f003 0301 	and.w	r3, r3, #1
 800b326:	b2db      	uxtb	r3, r3
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d010      	beq.n	800b34e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d018      	beq.n	800b366 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	3354      	adds	r3, #84	@ 0x54
 800b338:	6839      	ldr	r1, [r7, #0]
 800b33a:	2210      	movs	r2, #16
 800b33c:	4618      	mov	r0, r3
 800b33e:	f017 ff8c 	bl	802325a <memcmp>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d10e      	bne.n	800b366 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	e00b      	b.n	800b366 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	691b      	ldr	r3, [r3, #16]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d107      	bne.n	800b366 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	429a      	cmp	r2, r3
 800b360:	d101      	bne.n	800b366 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800b366:	68fb      	ldr	r3, [r7, #12]
    }
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b37e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2200      	movs	r2, #0
 800b384:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800b386:	683b      	ldr	r3, [r7, #0]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d103      	bne.n	800b394 <xSend_UDP_Update_IPv6+0x24>
 800b38c:	2173      	movs	r1, #115	@ 0x73
 800b38e:	4811      	ldr	r0, [pc, #68]	@ (800b3d4 <xSend_UDP_Update_IPv6+0x64>)
 800b390:	f7f6 fad2 	bl	8001938 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	3308      	adds	r3, #8
 800b39e:	2210      	movs	r2, #16
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	f016 ffc5 	bl	8022330 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f103 0014 	add.w	r0, r3, #20
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	3308      	adds	r3, #8
 800b3b0:	2210      	movs	r2, #16
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	f016 ffbc 	bl	8022330 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b3c0:	731a      	strb	r2, [r3, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b3c8:	735a      	strb	r2, [r3, #13]

    return NULL;
 800b3ca:	2300      	movs	r3, #0
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	08024dfc 	.word	0x08024dfc

0800b3d8 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b084      	sub	sp, #16
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	4603      	mov	r3, r0
 800b3e0:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800b3e2:	2330      	movs	r3, #48	@ 0x30
 800b3e4:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800b3e6:	88fb      	ldrh	r3, [r7, #6]
 800b3e8:	2b09      	cmp	r3, #9
 800b3ea:	d805      	bhi.n	800b3f8 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800b3ec:	88fb      	ldrh	r3, [r7, #6]
 800b3ee:	b2da      	uxtb	r2, r3
 800b3f0:	7bfb      	ldrb	r3, [r7, #15]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	73fb      	strb	r3, [r7, #15]
 800b3f6:	e010      	b.n	800b41a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	2b0f      	cmp	r3, #15
 800b3fc:	d809      	bhi.n	800b412 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800b3fe:	2361      	movs	r3, #97	@ 0x61
 800b400:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800b402:	88fb      	ldrh	r3, [r7, #6]
 800b404:	b2da      	uxtb	r2, r3
 800b406:	7bfb      	ldrb	r3, [r7, #15]
 800b408:	4413      	add	r3, r2
 800b40a:	b2db      	uxtb	r3, r3
 800b40c:	3b0a      	subs	r3, #10
 800b40e:	73fb      	strb	r3, [r7, #15]
 800b410:	e003      	b.n	800b41a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800b412:	21b3      	movs	r1, #179	@ 0xb3
 800b414:	4803      	ldr	r0, [pc, #12]	@ (800b424 <cHexToChar+0x4c>)
 800b416:	f7f6 fa8f 	bl	8001938 <vAssertCalled>
    }

    return cReturn;
 800b41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41c:	4618      	mov	r0, r3
 800b41e:	3710      	adds	r7, #16
 800b420:	46bd      	mov	sp, r7
 800b422:	bd80      	pop	{r7, pc}
 800b424:	08024dfc 	.word	0x08024dfc

0800b428 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800b428:	b590      	push	{r4, r7, lr}
 800b42a:	b08b      	sub	sp, #44	@ 0x2c
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	60f8      	str	r0, [r7, #12]
 800b430:	60b9      	str	r1, [r7, #8]
 800b432:	4613      	mov	r3, r2
 800b434:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800b436:	2304      	movs	r3, #4
 800b438:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800b43a:	2300      	movs	r3, #0
 800b43c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800b43e:	88fb      	ldrh	r3, [r7, #6]
 800b440:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800b442:	2300      	movs	r3, #0
 800b444:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b446:	2300      	movs	r3, #0
 800b448:	627b      	str	r3, [r7, #36]	@ 0x24
 800b44a:	e026      	b.n	800b49a <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800b44c:	8bfb      	ldrh	r3, [r7, #30]
 800b44e:	0b1b      	lsrs	r3, r3, #12
 800b450:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800b452:	8a7b      	ldrh	r3, [r7, #18]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800b458:	2301      	movs	r3, #1
 800b45a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800b45c:	69bb      	ldr	r3, [r7, #24]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d104      	bne.n	800b46c <uxHexPrintShort+0x44>
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	3b01      	subs	r3, #1
 800b466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b468:	429a      	cmp	r2, r3
 800b46a:	d110      	bne.n	800b48e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	3b01      	subs	r3, #1
 800b470:	6a3a      	ldr	r2, [r7, #32]
 800b472:	429a      	cmp	r2, r3
 800b474:	d216      	bcs.n	800b4a4 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	18d4      	adds	r4, r2, r3
 800b47c:	8a7b      	ldrh	r3, [r7, #18]
 800b47e:	4618      	mov	r0, r3
 800b480:	f7ff ffaa 	bl	800b3d8 <cHexToChar>
 800b484:	4603      	mov	r3, r0
 800b486:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	3301      	adds	r3, #1
 800b48c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800b48e:	8bfb      	ldrh	r3, [r7, #30]
 800b490:	011b      	lsls	r3, r3, #4
 800b492:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800b494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b496:	3301      	adds	r3, #1
 800b498:	627b      	str	r3, [r7, #36]	@ 0x24
 800b49a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d3d4      	bcc.n	800b44c <uxHexPrintShort+0x24>
 800b4a2:	e000      	b.n	800b4a6 <uxHexPrintShort+0x7e>
                break;
 800b4a4:	bf00      	nop
    }

    return uxIndex;
 800b4a6:	6a3b      	ldr	r3, [r7, #32]
}
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	372c      	adds	r7, #44	@ 0x2c
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd90      	pop	{r4, r7, pc}

0800b4b0 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b089      	sub	sp, #36	@ 0x24
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800b4bc:	2300      	movs	r3, #0
 800b4be:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800b4c4:	2308      	movs	r3, #8
 800b4c6:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800b4ce:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800b4d0:	e02c      	b.n	800b52c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	005b      	lsls	r3, r3, #1
 800b4da:	4413      	add	r3, r2
 800b4dc:	881b      	ldrh	r3, [r3, #0]
 800b4de:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800b4e0:	89fb      	ldrh	r3, [r7, #14]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d107      	bne.n	800b4f6 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d101      	bne.n	800b4f0 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	3301      	adds	r3, #1
 800b4f4:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800b4f6:	89fb      	ldrh	r3, [r7, #14]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d104      	bne.n	800b506 <prv_ntop6_search_zeros+0x56>
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	3b01      	subs	r3, #1
 800b500:	69fa      	ldr	r2, [r7, #28]
 800b502:	429a      	cmp	r2, r3
 800b504:	d10f      	bne.n	800b526 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	dd0a      	ble.n	800b522 <prv_ntop6_search_zeros+0x72>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	689b      	ldr	r3, [r3, #8]
 800b510:	697a      	ldr	r2, [r7, #20]
 800b512:	429a      	cmp	r2, r3
 800b514:	dd05      	ble.n	800b522 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	69ba      	ldr	r2, [r7, #24]
 800b520:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800b522:	2300      	movs	r3, #0
 800b524:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800b526:	69fb      	ldr	r3, [r7, #28]
 800b528:	3301      	adds	r3, #1
 800b52a:	61fb      	str	r3, [r7, #28]
 800b52c:	69fa      	ldr	r2, [r7, #28]
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	429a      	cmp	r2, r3
 800b532:	dbce      	blt.n	800b4d2 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800b534:	bf00      	nop
 800b536:	bf00      	nop
 800b538:	3724      	adds	r7, #36	@ 0x24
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800b542:	b480      	push	{r7}
 800b544:	b087      	sub	sp, #28
 800b546:	af00      	add	r7, sp, #0
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800b54e:	2301      	movs	r3, #1
 800b550:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800b552:	2308      	movs	r3, #8
 800b554:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	691a      	ldr	r2, [r3, #16]
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	3b01      	subs	r3, #1
 800b55e:	429a      	cmp	r2, r3
 800b560:	d827      	bhi.n	800b5b2 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	4413      	add	r3, r2
 800b56a:	223a      	movs	r2, #58	@ 0x3a
 800b56c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	691b      	ldr	r3, [r3, #16]
 800b572:	1c5a      	adds	r2, r3, #1
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	68da      	ldr	r2, [r3, #12]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	4413      	add	r3, r2
 800b582:	693a      	ldr	r2, [r7, #16]
 800b584:	429a      	cmp	r2, r3
 800b586:	d116      	bne.n	800b5b6 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	691a      	ldr	r2, [r3, #16]
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	3b01      	subs	r3, #1
 800b590:	429a      	cmp	r2, r3
 800b592:	d80b      	bhi.n	800b5ac <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	4413      	add	r3, r2
 800b59c:	223a      	movs	r2, #58	@ 0x3a
 800b59e:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	1c5a      	adds	r2, r3, #1
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	611a      	str	r2, [r3, #16]
 800b5aa:	e004      	b.n	800b5b6 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	617b      	str	r3, [r7, #20]
 800b5b0:	e001      	b.n	800b5b6 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800b5b6:	697b      	ldr	r3, [r7, #20]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	371c      	adds	r7, #28
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800b5c4:	b590      	push	{r4, r7, lr}
 800b5c6:	b089      	sub	sp, #36	@ 0x24
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800b5d4:	2304      	movs	r3, #4
 800b5d6:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	dd13      	ble.n	800b608 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	691a      	ldr	r2, [r3, #16]
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	3b01      	subs	r3, #1
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d302      	bcc.n	800b5f2 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	61fb      	str	r3, [r7, #28]
 800b5f0:	e00a      	b.n	800b608 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	223a      	movs	r2, #58	@ 0x3a
 800b5fc:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800b608:	69fb      	ldr	r3, [r7, #28]
 800b60a:	2b01      	cmp	r3, #1
 800b60c:	d130      	bne.n	800b670 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	691a      	ldr	r2, [r3, #16]
 800b612:	68b9      	ldr	r1, [r7, #8]
 800b614:	69bb      	ldr	r3, [r7, #24]
 800b616:	1acb      	subs	r3, r1, r3
 800b618:	429a      	cmp	r2, r3
 800b61a:	d827      	bhi.n	800b66c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	18d0      	adds	r0, r2, r3
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	005b      	lsls	r3, r3, #1
 800b632:	4413      	add	r3, r2
 800b634:	881b      	ldrh	r3, [r3, #0]
 800b636:	021b      	lsls	r3, r3, #8
 800b638:	b21a      	sxth	r2, r3
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6819      	ldr	r1, [r3, #0]
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	005b      	lsls	r3, r3, #1
 800b644:	440b      	add	r3, r1
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	0a1b      	lsrs	r3, r3, #8
 800b64a:	b29b      	uxth	r3, r3
 800b64c:	b21b      	sxth	r3, r3
 800b64e:	4313      	orrs	r3, r2
 800b650:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800b652:	b29b      	uxth	r3, r3
 800b654:	461a      	mov	r2, r3
 800b656:	4621      	mov	r1, r4
 800b658:	f7ff fee6 	bl	800b428 <uxHexPrintShort>
 800b65c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	691a      	ldr	r2, [r3, #16]
 800b662:	697b      	ldr	r3, [r7, #20]
 800b664:	441a      	add	r2, r3
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	611a      	str	r2, [r3, #16]
 800b66a:	e001      	b.n	800b670 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800b66c:	2300      	movs	r3, #0
 800b66e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800b670:	69fb      	ldr	r3, [r7, #28]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3724      	adds	r7, #36	@ 0x24
 800b676:	46bd      	mov	sp, r7
 800b678:	bd90      	pop	{r4, r7, pc}

0800b67a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b08a      	sub	sp, #40	@ 0x28
 800b67e:	af00      	add	r7, sp, #0
 800b680:	60f8      	str	r0, [r7, #12]
 800b682:	60b9      	str	r1, [r7, #8]
 800b684:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800b686:	f107 0310 	add.w	r3, r7, #16
 800b68a:	2214      	movs	r2, #20
 800b68c:	2100      	movs	r1, #0
 800b68e:	4618      	mov	r0, r3
 800b690:	f016 ff5b 	bl	802254a <memset>

    xSet.pusAddress = pvSource;
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b02      	cmp	r3, #2
 800b69c:	d92c      	bls.n	800b6f8 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800b69e:	f107 0310 	add.w	r3, r7, #16
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f7ff ff04 	bl	800b4b0 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800b6a8:	e01f      	b.n	800b6ea <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800b6aa:	69fa      	ldr	r2, [r7, #28]
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d10e      	bne.n	800b6d0 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b6b2:	f107 0310 	add.w	r3, r7, #16
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	6879      	ldr	r1, [r7, #4]
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	f7ff ff41 	bl	800b542 <prv_ntop6_write_zeros>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d015      	beq.n	800b6f2 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800b6c6:	69fa      	ldr	r2, [r7, #28]
 800b6c8:	69bb      	ldr	r3, [r7, #24]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	61fb      	str	r3, [r7, #28]
 800b6ce:	e00c      	b.n	800b6ea <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800b6d0:	f107 0310 	add.w	r3, r7, #16
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	6879      	ldr	r1, [r7, #4]
 800b6d8:	68b8      	ldr	r0, [r7, #8]
 800b6da:	f7ff ff73 	bl	800b5c4 <prv_ntop6_write_short>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d008      	beq.n	800b6f6 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	3301      	adds	r3, #1
 800b6e8:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800b6ea:	69fb      	ldr	r3, [r7, #28]
 800b6ec:	2b07      	cmp	r3, #7
 800b6ee:	dddc      	ble.n	800b6aa <FreeRTOS_inet_ntop6+0x30>
 800b6f0:	e002      	b.n	800b6f8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b6f2:	bf00      	nop
 800b6f4:	e000      	b.n	800b6f8 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800b6f6:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800b6f8:	69fb      	ldr	r3, [r7, #28]
 800b6fa:	2b07      	cmp	r3, #7
 800b6fc:	dc02      	bgt.n	800b704 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800b6fe:	2300      	movs	r3, #0
 800b700:	627b      	str	r3, [r7, #36]	@ 0x24
 800b702:	e006      	b.n	800b712 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800b704:	6a3b      	ldr	r3, [r7, #32]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	4413      	add	r3, r2
 800b70a:	2200      	movs	r2, #0
 800b70c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800b712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b714:	4618      	mov	r0, r3
 800b716:	3728      	adds	r7, #40	@ 0x28
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}

0800b71c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	2233      	movs	r2, #51	@ 0x33
 800b72a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	2233      	movs	r2, #51	@ 0x33
 800b730:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	7b1a      	ldrb	r2, [r3, #12]
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	7b5a      	ldrb	r2, [r3, #13]
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	7b9a      	ldrb	r2, [r3, #14]
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	7bda      	ldrb	r2, [r3, #15]
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	715a      	strb	r2, [r3, #5]
}
 800b752:	bf00      	nop
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
	...

0800b760 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b08e      	sub	sp, #56	@ 0x38
 800b764:	af02      	add	r7, sp, #8
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800b76c:	2300      	movs	r3, #0
 800b76e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800b772:	2336      	movs	r3, #54	@ 0x36
 800b774:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800b776:	2300      	movs	r3, #0
 800b778:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800b77e:	2300      	movs	r3, #0
 800b780:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	f000 808c 	beq.w	800b8a6 <usGetExtensionHeaderLength+0x146>
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 8088 	beq.w	800b8a6 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	7d1b      	ldrb	r3, [r3, #20]
 800b79e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800b7a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7a6:	2100      	movs	r1, #0
 800b7a8:	4618      	mov	r0, r3
 800b7aa:	f7ff fcaf 	bl	800b10c <xGetExtensionOrder>
 800b7ae:	4603      	mov	r3, r0
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	dd72      	ble.n	800b89a <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b7b4:	e06b      	b.n	800b88e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800b7b6:	68fa      	ldr	r2, [r7, #12]
 800b7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ba:	4413      	add	r3, r2
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800b7c2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b7c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b7ca:	4611      	mov	r1, r2
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff fc9d 	bl	800b10c <xGetExtensionOrder>
 800b7d2:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800b7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7d6:	3301      	adds	r3, #1
 800b7d8:	68fa      	ldr	r2, [r7, #12]
 800b7da:	4413      	add	r3, r2
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	00db      	lsls	r3, r3, #3
 800b7e6:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800b7e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	4413      	add	r3, r2
 800b7ee:	68ba      	ldr	r2, [r7, #8]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d806      	bhi.n	800b802 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	69fa      	ldr	r2, [r7, #28]
 800b7f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b7fa:	482d      	ldr	r0, [pc, #180]	@ (800b8b0 <usGetExtensionHeaderLength+0x150>)
 800b7fc:	f016 fb7c 	bl	8021ef8 <lUDPLoggingPrintf>
                    break;
 800b800:	e051      	b.n	800b8a6 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800b802:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	4413      	add	r3, r2
 800b808:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800b80a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b80e:	2b06      	cmp	r3, #6
 800b810:	d007      	beq.n	800b822 <usGetExtensionHeaderLength+0xc2>
 800b812:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b816:	2b11      	cmp	r3, #17
 800b818:	d003      	beq.n	800b822 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800b81a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b81e:	2b3a      	cmp	r3, #58	@ 0x3a
 800b820:	d10d      	bne.n	800b83e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800b822:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b826:	4619      	mov	r1, r3
 800b828:	4822      	ldr	r0, [pc, #136]	@ (800b8b4 <usGetExtensionHeaderLength+0x154>)
 800b82a:	f016 fb65 	bl	8021ef8 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800b82e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b830:	3b36      	subs	r3, #54	@ 0x36
 800b832:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b83a:	701a      	strb	r2, [r3, #0]
                    break;
 800b83c:	e033      	b.n	800b8a6 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800b83e:	68fa      	ldr	r2, [r7, #12]
 800b840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b842:	4413      	add	r3, r2
 800b844:	781a      	ldrb	r2, [r3, #0]
 800b846:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b84a:	4611      	mov	r1, r2
 800b84c:	4618      	mov	r0, r3
 800b84e:	f7ff fc5d 	bl	800b10c <xGetExtensionOrder>
 800b852:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800b854:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800b858:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	4613      	mov	r3, r2
 800b862:	69ba      	ldr	r2, [r7, #24]
 800b864:	4814      	ldr	r0, [pc, #80]	@ (800b8b8 <usGetExtensionHeaderLength+0x158>)
 800b866:	f016 fb47 	bl	8021ef8 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d103      	bne.n	800b878 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800b870:	4812      	ldr	r0, [pc, #72]	@ (800b8bc <usGetExtensionHeaderLength+0x15c>)
 800b872:	f016 fb41 	bl	8021ef8 <lUDPLoggingPrintf>
                    break;
 800b876:	e016      	b.n	800b8a6 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	da03      	bge.n	800b886 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800b87e:	4810      	ldr	r0, [pc, #64]	@ (800b8c0 <usGetExtensionHeaderLength+0x160>)
 800b880:	f016 fb3a 	bl	8021ef8 <lUDPLoggingPrintf>
                    break;
 800b884:	e00f      	b.n	800b8a6 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800b886:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800b88a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800b88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b890:	3308      	adds	r3, #8
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	429a      	cmp	r2, r3
 800b896:	d88e      	bhi.n	800b7b6 <usGetExtensionHeaderLength+0x56>
 800b898:	e005      	b.n	800b8a6 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b8a0:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3730      	adds	r7, #48	@ 0x30
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	08024e44 	.word	0x08024e44
 800b8b4:	08024e8c 	.word	0x08024e8c
 800b8b8:	08024ea0 	.word	0x08024ea0
 800b8bc:	08024ec8 	.word	0x08024ec8
 800b8c0:	08024f28 	.word	0x08024f28

0800b8c4 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b084      	sub	sp, #16
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d104      	bne.n	800b8de <vManageSolicitedNodeAddress+0x1a>
 800b8d4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800b8d8:	482d      	ldr	r0, [pc, #180]	@ (800b990 <vManageSolicitedNodeAddress+0xcc>)
 800b8da:	f7f6 f82d 	bl	8001938 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d104      	bne.n	800b8f2 <vManageSolicitedNodeAddress+0x2e>
 800b8e8:	f240 1133 	movw	r1, #307	@ 0x133
 800b8ec:	4828      	ldr	r0, [pc, #160]	@ (800b990 <vManageSolicitedNodeAddress+0xcc>)
 800b8ee:	f7f6 f823 	bl	8001938 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	3338      	adds	r3, #56	@ 0x38
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f002 f9c2 	bl	800dc80 <xIPv6_GetIPType>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800b900:	7bfb      	ldrb	r3, [r7, #15]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d005      	beq.n	800b912 <vManageSolicitedNodeAddress+0x4e>
 800b906:	7bfb      	ldrb	r3, [r7, #15]
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d002      	beq.n	800b912 <vManageSolicitedNodeAddress+0x4e>
 800b90c:	7bfb      	ldrb	r3, [r7, #15]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d138      	bne.n	800b984 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b912:	2333      	movs	r3, #51	@ 0x33
 800b914:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800b916:	2333      	movs	r3, #51	@ 0x33
 800b918:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800b91a:	23ff      	movs	r3, #255	@ 0xff
 800b91c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b924:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800b92c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800b934:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	2b01      	cmp	r3, #1
 800b93a:	d111      	bne.n	800b960 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b942:	695b      	ldr	r3, [r3, #20]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d01e      	beq.n	800b986 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b94e:	695b      	ldr	r3, [r3, #20]
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b956:	f107 0108 	add.w	r1, r7, #8
 800b95a:	4610      	mov	r0, r2
 800b95c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800b95e:	e012      	b.n	800b986 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b966:	699b      	ldr	r3, [r3, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00c      	beq.n	800b986 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800b97a:	f107 0108 	add.w	r1, r7, #8
 800b97e:	4610      	mov	r0, r2
 800b980:	4798      	blx	r3
}
 800b982:	e000      	b.n	800b986 <vManageSolicitedNodeAddress+0xc2>
            break;
 800b984:	bf00      	nop
}
 800b986:	bf00      	nop
 800b988:	3710      	adds	r7, #16
 800b98a:	46bd      	mov	sp, r7
 800b98c:	bd80      	pop	{r7, pc}
 800b98e:	bf00      	nop
 800b990:	08024f4c 	.word	0x08024f4c

0800b994 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b99a:	2000      	movs	r0, #0
 800b99c:	f001 fd8c 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800b9a0:	6078      	str	r0, [r7, #4]
 800b9a2:	e016      	b.n	800b9d2 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b9aa:	f003 0304 	and.w	r3, r3, #4
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d009      	beq.n	800b9c8 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	3338      	adds	r3, #56	@ 0x38
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f002 f961 	bl	800dc80 <xIPv6_GetIPType>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800b9c2:	78fb      	ldrb	r3, [r7, #3]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d008      	beq.n	800b9da <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b9c8:	6879      	ldr	r1, [r7, #4]
 800b9ca:	2000      	movs	r0, #0
 800b9cc:	f001 fd96 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800b9d0:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d1e5      	bne.n	800b9a4 <pxFindLocalEndpoint+0x10>
 800b9d8:	e000      	b.n	800b9dc <pxFindLocalEndpoint+0x48>
                {
                    break;
 800b9da:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800b9dc:	687b      	ldr	r3, [r7, #4]
    }
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3708      	adds	r7, #8
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b086      	sub	sp, #24
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	60f8      	str	r0, [r7, #12]
 800b9ee:	60b9      	str	r1, [r7, #8]
 800b9f0:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800b9f2:	68f8      	ldr	r0, [r7, #12]
 800b9f4:	f7ff faa8 	bl	800af48 <xIsIPv6AllowedMulticast>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00e      	beq.n	800ba1c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800b9fe:	68b9      	ldr	r1, [r7, #8]
 800ba00:	68f8      	ldr	r0, [r7, #12]
 800ba02:	f7ff fe8b 	bl	800b71c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d004      	beq.n	800ba16 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800ba0c:	f7ff ffc2 	bl	800b994 <pxFindLocalEndpoint>
 800ba10:	4602      	mov	r2, r0
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800ba16:	2301      	movs	r3, #1
 800ba18:	75fb      	strb	r3, [r7, #23]
 800ba1a:	e001      	b.n	800ba20 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
    }
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b088      	sub	sp, #32
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	60f8      	str	r0, [r7, #12]
 800ba34:	60b9      	str	r1, [r7, #8]
 800ba36:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800ba38:	687a      	ldr	r2, [r7, #4]
 800ba3a:	68b9      	ldr	r1, [r7, #8]
 800ba3c:	68f8      	ldr	r0, [r7, #12]
 800ba3e:	f7ff ffd2 	bl	800b9e6 <prvMACResolve>
 800ba42:	4603      	mov	r3, r0
 800ba44:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800ba46:	7ffb      	ldrb	r3, [r7, #31]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d106      	bne.n	800ba5a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800ba4c:	687a      	ldr	r2, [r7, #4]
 800ba4e:	68b9      	ldr	r1, [r7, #8]
 800ba50:	68f8      	ldr	r0, [r7, #12]
 800ba52:	f000 f9a9 	bl	800bda8 <prvNDCacheLookup>
 800ba56:	4603      	mov	r3, r0
 800ba58:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800ba5a:	7ffb      	ldrb	r3, [r7, #31]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d104      	bne.n	800ba6a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	4619      	mov	r1, r3
 800ba64:	4840      	ldr	r0, [pc, #256]	@ (800bb68 <eNDGetCacheEntry+0x13c>)
 800ba66:	f016 fa47 	bl	8021ef8 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800ba6a:	7ffb      	ldrb	r3, [r7, #31]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d176      	bne.n	800bb5e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800ba70:	68f8      	ldr	r0, [r7, #12]
 800ba72:	f002 f905 	bl	800dc80 <xIPv6_GetIPType>
 800ba76:	4603      	mov	r3, r0
 800ba78:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800ba7a:	68f8      	ldr	r0, [r7, #12]
 800ba7c:	f001 fdae 	bl	800d5dc <FreeRTOS_FindEndPointOnIP_IPv6>
 800ba80:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800ba82:	69bb      	ldr	r3, [r7, #24]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d00d      	beq.n	800baa4 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d002      	beq.n	800ba94 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	69ba      	ldr	r2, [r7, #24]
 800ba92:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800ba94:	68f9      	ldr	r1, [r7, #12]
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	3338      	adds	r3, #56	@ 0x38
 800ba9a:	461a      	mov	r2, r3
 800ba9c:	4833      	ldr	r0, [pc, #204]	@ (800bb6c <eNDGetCacheEntry+0x140>)
 800ba9e:	f016 fa2b 	bl	8021ef8 <lUDPLoggingPrintf>
 800baa2:	e05c      	b.n	800bb5e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800baa4:	7dfb      	ldrb	r3, [r7, #23]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d12b      	bne.n	800bb02 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800baaa:	2000      	movs	r0, #0
 800baac:	f001 fd04 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800bab0:	61b8      	str	r0, [r7, #24]
 800bab2:	e017      	b.n	800bae4 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	3338      	adds	r3, #56	@ 0x38
 800bab8:	4618      	mov	r0, r3
 800baba:	f002 f8e1 	bl	800dc80 <xIPv6_GetIPType>
 800babe:	4603      	mov	r3, r0
 800bac0:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800bac2:	7dba      	ldrb	r2, [r7, #22]
 800bac4:	7dfb      	ldrb	r3, [r7, #23]
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d107      	bne.n	800bada <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	68b9      	ldr	r1, [r7, #8]
 800bace:	68f8      	ldr	r0, [r7, #12]
 800bad0:	f000 f96a 	bl	800bda8 <prvNDCacheLookup>
 800bad4:	4603      	mov	r3, r0
 800bad6:	77fb      	strb	r3, [r7, #31]
                            break;
 800bad8:	e007      	b.n	800baea <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800bada:	69b9      	ldr	r1, [r7, #24]
 800badc:	2000      	movs	r0, #0
 800bade:	f001 fd0d 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800bae2:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d1e4      	bne.n	800bab4 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	7ffb      	ldrb	r3, [r7, #31]
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d101      	bne.n	800baf6 <eNDGetCacheEntry+0xca>
 800baf2:	4b1f      	ldr	r3, [pc, #124]	@ (800bb70 <eNDGetCacheEntry+0x144>)
 800baf4:	e000      	b.n	800baf8 <eNDGetCacheEntry+0xcc>
 800baf6:	4b1f      	ldr	r3, [pc, #124]	@ (800bb74 <eNDGetCacheEntry+0x148>)
 800baf8:	461a      	mov	r2, r3
 800bafa:	481f      	ldr	r0, [pc, #124]	@ (800bb78 <eNDGetCacheEntry+0x14c>)
 800bafc:	f016 f9fc 	bl	8021ef8 <lUDPLoggingPrintf>
 800bb00:	e02d      	b.n	800bb5e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800bb02:	2060      	movs	r0, #96	@ 0x60
 800bb04:	f002 f87c 	bl	800dc00 <FreeRTOS_FindGateWay>
 800bb08:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800bb0a:	69bb      	ldr	r3, [r7, #24]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d026      	beq.n	800bb5e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bb10:	68f8      	ldr	r0, [r7, #12]
 800bb12:	69bb      	ldr	r3, [r7, #24]
 800bb14:	335c      	adds	r3, #92	@ 0x5c
 800bb16:	2210      	movs	r2, #16
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f016 fc09 	bl	8022330 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	4619      	mov	r1, r3
 800bb22:	4816      	ldr	r0, [pc, #88]	@ (800bb7c <eNDGetCacheEntry+0x150>)
 800bb24:	f016 f9e8 	bl	8021ef8 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	3338      	adds	r3, #56	@ 0x38
 800bb2c:	4619      	mov	r1, r3
 800bb2e:	4814      	ldr	r0, [pc, #80]	@ (800bb80 <eNDGetCacheEntry+0x154>)
 800bb30:	f016 f9e2 	bl	8021ef8 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	68b9      	ldr	r1, [r7, #8]
 800bb38:	68f8      	ldr	r0, [r7, #12]
 800bb3a:	f000 f935 	bl	800bda8 <prvNDCacheLookup>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d006      	beq.n	800bb58 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	3338      	adds	r3, #56	@ 0x38
 800bb50:	4619      	mov	r1, r3
 800bb52:	480c      	ldr	r0, [pc, #48]	@ (800bb84 <eNDGetCacheEntry+0x158>)
 800bb54:	f016 f9d0 	bl	8021ef8 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	69ba      	ldr	r2, [r7, #24]
 800bb5c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800bb5e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800bb60:	4618      	mov	r0, r3
 800bb62:	3720      	adds	r7, #32
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	08024f80 	.word	0x08024f80
 800bb6c:	08024fa4 	.word	0x08024fa4
 800bb70:	08024fe8 	.word	0x08024fe8
 800bb74:	08024fec 	.word	0x08024fec
 800bb78:	08024ff4 	.word	0x08024ff4
 800bb7c:	0802501c 	.word	0x0802501c
 800bb80:	08025040 	.word	0x08025040
 800bb84:	08025064 	.word	0x08025064

0800bb88 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800bb88:	b5b0      	push	{r4, r5, r7, lr}
 800bb8a:	b08e      	sub	sp, #56	@ 0x38
 800bb8c:	af04      	add	r7, sp, #16
 800bb8e:	60f8      	str	r0, [r7, #12]
 800bb90:	60b9      	str	r1, [r7, #8]
 800bb92:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800bb94:	f04f 33ff 	mov.w	r3, #4294967295
 800bb98:	623b      	str	r3, [r7, #32]
 800bb9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bb9e:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800bba0:	2397      	movs	r3, #151	@ 0x97
 800bba2:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800bba4:	2300      	movs	r3, #0
 800bba6:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bba8:	2300      	movs	r3, #0
 800bbaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbac:	e033      	b.n	800bc16 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800bbae:	4a44      	ldr	r2, [pc, #272]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	015b      	lsls	r3, r3, #5
 800bbb4:	4413      	add	r3, r2
 800bbb6:	331d      	adds	r3, #29
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d106      	bne.n	800bbcc <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbc4:	d124      	bne.n	800bc10 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800bbc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbc8:	623b      	str	r3, [r7, #32]
 800bbca:	e021      	b.n	800bc10 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bbcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbce:	015b      	lsls	r3, r3, #5
 800bbd0:	4a3b      	ldr	r2, [pc, #236]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bbd2:	4413      	add	r3, r2
 800bbd4:	68b9      	ldr	r1, [r7, #8]
 800bbd6:	2210      	movs	r2, #16
 800bbd8:	4618      	mov	r0, r3
 800bbda:	f017 fb3e 	bl	802325a <memcmp>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d102      	bne.n	800bbea <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800bbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe6:	61fb      	str	r3, [r7, #28]
                break;
 800bbe8:	e018      	b.n	800bc1c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800bbea:	4a35      	ldr	r2, [pc, #212]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bbec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbee:	015b      	lsls	r3, r3, #5
 800bbf0:	4413      	add	r3, r2
 800bbf2:	331c      	adds	r3, #28
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	8b7b      	ldrh	r3, [r7, #26]
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d908      	bls.n	800bc10 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800bbfe:	4a30      	ldr	r2, [pc, #192]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bc00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc02:	015b      	lsls	r3, r3, #5
 800bc04:	4413      	add	r3, r2
 800bc06:	331c      	adds	r3, #28
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800bc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bc10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc12:	3301      	adds	r3, #1
 800bc14:	627b      	str	r3, [r7, #36]	@ 0x24
 800bc16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc18:	2b17      	cmp	r3, #23
 800bc1a:	ddc8      	ble.n	800bbae <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	da22      	bge.n	800bc68 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800bc22:	6a3b      	ldr	r3, [r7, #32]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	db02      	blt.n	800bc2e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800bc28:	6a3b      	ldr	r3, [r7, #32]
 800bc2a:	61fb      	str	r3, [r7, #28]
 800bc2c:	e01c      	b.n	800bc68 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	461c      	mov	r4, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	785b      	ldrb	r3, [r3, #1]
 800bc3c:	461d      	mov	r5, r3
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	789b      	ldrb	r3, [r3, #2]
 800bc42:	461a      	mov	r2, r3
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	78db      	ldrb	r3, [r3, #3]
 800bc48:	4619      	mov	r1, r3
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	791b      	ldrb	r3, [r3, #4]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	795b      	ldrb	r3, [r3, #5]
 800bc54:	9303      	str	r3, [sp, #12]
 800bc56:	9002      	str	r0, [sp, #8]
 800bc58:	9101      	str	r1, [sp, #4]
 800bc5a:	9200      	str	r2, [sp, #0]
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	4622      	mov	r2, r4
 800bc60:	69f9      	ldr	r1, [r7, #28]
 800bc62:	4818      	ldr	r0, [pc, #96]	@ (800bcc4 <vNDRefreshCacheEntry+0x13c>)
 800bc64:	f016 f948 	bl	8021ef8 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	015b      	lsls	r3, r3, #5
 800bc6c:	4a14      	ldr	r2, [pc, #80]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bc6e:	4413      	add	r3, r2
 800bc70:	68b9      	ldr	r1, [r7, #8]
 800bc72:	2210      	movs	r2, #16
 800bc74:	4618      	mov	r0, r3
 800bc76:	f016 fb5b 	bl	8022330 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	015b      	lsls	r3, r3, #5
 800bc7e:	3310      	adds	r3, #16
 800bc80:	4a0f      	ldr	r2, [pc, #60]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bc82:	4413      	add	r3, r2
 800bc84:	68f9      	ldr	r1, [r7, #12]
 800bc86:	2206      	movs	r2, #6
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f016 fb51 	bl	8022330 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800bc8e:	4a0c      	ldr	r2, [pc, #48]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	015b      	lsls	r3, r3, #5
 800bc94:	4413      	add	r3, r2
 800bc96:	3318      	adds	r3, #24
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800bc9c:	4a08      	ldr	r2, [pc, #32]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bc9e:	69fb      	ldr	r3, [r7, #28]
 800bca0:	015b      	lsls	r3, r3, #5
 800bca2:	4413      	add	r3, r2
 800bca4:	331c      	adds	r3, #28
 800bca6:	2296      	movs	r2, #150	@ 0x96
 800bca8:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800bcaa:	4a05      	ldr	r2, [pc, #20]	@ (800bcc0 <vNDRefreshCacheEntry+0x138>)
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	015b      	lsls	r3, r3, #5
 800bcb0:	4413      	add	r3, r2
 800bcb2:	331d      	adds	r3, #29
 800bcb4:	2201      	movs	r2, #1
 800bcb6:	701a      	strb	r2, [r3, #0]
    }
 800bcb8:	bf00      	nop
 800bcba:	3728      	adds	r7, #40	@ 0x28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	bdb0      	pop	{r4, r5, r7, pc}
 800bcc0:	200011a0 	.word	0x200011a0
 800bcc4:	0802508c 	.word	0x0802508c

0800bcc8 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bcce:	2300      	movs	r3, #0
 800bcd0:	60fb      	str	r3, [r7, #12]
 800bcd2:	e05f      	b.n	800bd94 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800bcd8:	4a32      	ldr	r2, [pc, #200]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	015b      	lsls	r3, r3, #5
 800bcde:	4413      	add	r3, r2
 800bce0:	331c      	adds	r3, #28
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d052      	beq.n	800bd8e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800bce8:	4a2e      	ldr	r2, [pc, #184]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	015b      	lsls	r3, r3, #5
 800bcee:	4413      	add	r3, r2
 800bcf0:	331c      	adds	r3, #28
 800bcf2:	781b      	ldrb	r3, [r3, #0]
 800bcf4:	3b01      	subs	r3, #1
 800bcf6:	b2d9      	uxtb	r1, r3
 800bcf8:	4a2a      	ldr	r2, [pc, #168]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	015b      	lsls	r3, r3, #5
 800bcfe:	4413      	add	r3, r2
 800bd00:	331c      	adds	r3, #28
 800bd02:	460a      	mov	r2, r1
 800bd04:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800bd06:	4a27      	ldr	r2, [pc, #156]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	015b      	lsls	r3, r3, #5
 800bd0c:	4413      	add	r3, r2
 800bd0e:	331c      	adds	r3, #28
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d109      	bne.n	800bd2a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	015b      	lsls	r3, r3, #5
 800bd1a:	4a22      	ldr	r2, [pc, #136]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bd1c:	4413      	add	r3, r2
 800bd1e:	2220      	movs	r2, #32
 800bd20:	2100      	movs	r1, #0
 800bd22:	4618      	mov	r0, r3
 800bd24:	f016 fc11 	bl	802254a <memset>
 800bd28:	e031      	b.n	800bd8e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800bd2a:	4a1e      	ldr	r2, [pc, #120]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	015b      	lsls	r3, r3, #5
 800bd30:	4413      	add	r3, r2
 800bd32:	331d      	adds	r3, #29
 800bd34:	781b      	ldrb	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d102      	bne.n	800bd40 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	60bb      	str	r3, [r7, #8]
 800bd3e:	e009      	b.n	800bd54 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800bd40:	4a18      	ldr	r2, [pc, #96]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	015b      	lsls	r3, r3, #5
 800bd46:	4413      	add	r3, r2
 800bd48:	331c      	adds	r3, #28
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2b03      	cmp	r3, #3
 800bd4e:	d801      	bhi.n	800bd54 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800bd50:	2301      	movs	r3, #1
 800bd52:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d019      	beq.n	800bd8e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800bd5a:	2356      	movs	r3, #86	@ 0x56
 800bd5c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800bd5e:	2100      	movs	r1, #0
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	f00b f9b9 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 800bd66:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00f      	beq.n	800bd8e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800bd6e:	4a0d      	ldr	r2, [pc, #52]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	015b      	lsls	r3, r3, #5
 800bd74:	4413      	add	r3, r2
 800bd76:	3318      	adds	r3, #24
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	015b      	lsls	r3, r3, #5
 800bd82:	4a08      	ldr	r2, [pc, #32]	@ (800bda4 <vNDAgeCache+0xdc>)
 800bd84:	4413      	add	r3, r2
 800bd86:	4619      	mov	r1, r3
 800bd88:	6838      	ldr	r0, [r7, #0]
 800bd8a:	f000 f8bb 	bl	800bf04 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	3301      	adds	r3, #1
 800bd92:	60fb      	str	r3, [r7, #12]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2b17      	cmp	r3, #23
 800bd98:	dd9c      	ble.n	800bcd4 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800bd9a:	bf00      	nop
 800bd9c:	bf00      	nop
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}
 800bda4:	200011a0 	.word	0x200011a0

0800bda8 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800bda8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bdaa:	b08d      	sub	sp, #52	@ 0x34
 800bdac:	af06      	add	r7, sp, #24
 800bdae:	60f8      	str	r0, [r7, #12]
 800bdb0:	60b9      	str	r1, [r7, #8]
 800bdb2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800bdb8:	2300      	movs	r3, #0
 800bdba:	617b      	str	r3, [r7, #20]
 800bdbc:	e04a      	b.n	800be54 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800bdbe:	4a30      	ldr	r2, [pc, #192]	@ (800be80 <prvNDCacheLookup+0xd8>)
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	015b      	lsls	r3, r3, #5
 800bdc4:	4413      	add	r3, r2
 800bdc6:	331d      	adds	r3, #29
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d03f      	beq.n	800be4e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	015b      	lsls	r3, r3, #5
 800bdd2:	4a2b      	ldr	r2, [pc, #172]	@ (800be80 <prvNDCacheLookup+0xd8>)
 800bdd4:	4413      	add	r3, r2
 800bdd6:	68f9      	ldr	r1, [r7, #12]
 800bdd8:	2210      	movs	r2, #16
 800bdda:	4618      	mov	r0, r3
 800bddc:	f017 fa3d 	bl	802325a <memcmp>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d133      	bne.n	800be4e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800bde6:	68b8      	ldr	r0, [r7, #8]
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	015b      	lsls	r3, r3, #5
 800bdec:	3310      	adds	r3, #16
 800bdee:	4a24      	ldr	r2, [pc, #144]	@ (800be80 <prvNDCacheLookup+0xd8>)
 800bdf0:	4413      	add	r3, r2
 800bdf2:	2206      	movs	r2, #6
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	f016 fa9b 	bl	8022330 <memcpy>
                eReturn = eARPCacheHit;
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2b00      	cmp	r3, #0
 800be02:	d007      	beq.n	800be14 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800be04:	4a1e      	ldr	r2, [pc, #120]	@ (800be80 <prvNDCacheLookup+0xd8>)
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	015b      	lsls	r3, r3, #5
 800be0a:	4413      	add	r3, r2
 800be0c:	3318      	adds	r3, #24
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800be14:	68fa      	ldr	r2, [r7, #12]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	461e      	mov	r6, r3
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	785b      	ldrb	r3, [r3, #1]
 800be20:	4619      	mov	r1, r3
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	789b      	ldrb	r3, [r3, #2]
 800be26:	4618      	mov	r0, r3
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	78db      	ldrb	r3, [r3, #3]
 800be2c:	461c      	mov	r4, r3
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	791b      	ldrb	r3, [r3, #4]
 800be32:	461d      	mov	r5, r3
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	795b      	ldrb	r3, [r3, #5]
 800be38:	9304      	str	r3, [sp, #16]
 800be3a:	9503      	str	r5, [sp, #12]
 800be3c:	9402      	str	r4, [sp, #8]
 800be3e:	9001      	str	r0, [sp, #4]
 800be40:	9100      	str	r1, [sp, #0]
 800be42:	4633      	mov	r3, r6
 800be44:	6979      	ldr	r1, [r7, #20]
 800be46:	480f      	ldr	r0, [pc, #60]	@ (800be84 <prvNDCacheLookup+0xdc>)
 800be48:	f016 f856 	bl	8021ef8 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800be4c:	e005      	b.n	800be5a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	3301      	adds	r3, #1
 800be52:	617b      	str	r3, [r7, #20]
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	2b17      	cmp	r3, #23
 800be58:	ddb1      	ble.n	800bdbe <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800be5a:	7cfb      	ldrb	r3, [r7, #19]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10a      	bne.n	800be76 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4619      	mov	r1, r3
 800be64:	4808      	ldr	r0, [pc, #32]	@ (800be88 <prvNDCacheLookup+0xe0>)
 800be66:	f016 f847 	bl	8021ef8 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d002      	beq.n	800be76 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800be76:	7cfb      	ldrb	r3, [r7, #19]
    }
 800be78:	4618      	mov	r0, r3
 800be7a:	371c      	adds	r7, #28
 800be7c:	46bd      	mov	sp, r7
 800be7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be80:	200011a0 	.word	0x200011a0
 800be84:	080250f0 	.word	0x080250f0
 800be88:	08025130 	.word	0x08025130

0800be8c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b084      	sub	sp, #16
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be9a:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bea0:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	3316      	adds	r3, #22
 800beac:	2210      	movs	r2, #16
 800beae:	4619      	mov	r1, r3
 800beb0:	f016 fa3e 	bl	8022330 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	f103 0016 	add.w	r0, r3, #22
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3338      	adds	r3, #56	@ 0x38
 800bebe:	2210      	movs	r2, #16
 800bec0:	4619      	mov	r1, r3
 800bec2:	f016 fa35 	bl	8022330 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	b29b      	uxth	r3, r3
 800beca:	021b      	lsls	r3, r3, #8
 800becc:	b29a      	uxth	r2, r3
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	0a1b      	lsrs	r3, r3, #8
 800bed2:	b29b      	uxth	r3, r3
 800bed4:	4313      	orrs	r3, r2
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	68bb      	ldr	r3, [r7, #8]
 800beda:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	2200      	movs	r2, #0
 800beea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800beee:	2200      	movs	r2, #0
 800bef0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800bef4:	2100      	movs	r1, #0
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7fd fe46 	bl	8009b88 <vReturnEthernetFrame>
    }
 800befc:	bf00      	nop
 800befe:	3710      	adds	r7, #16
 800bf00:	46bd      	mov	sp, r7
 800bf02:	bd80      	pop	{r7, pc}

0800bf04 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b090      	sub	sp, #64	@ 0x40
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf12:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800bf18:	2300      	movs	r3, #0
 800bf1a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800bf20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f000 80c1 	beq.w	800c0aa <vNDSendNeighbourSolicitation+0x1a6>
 800bf28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf2a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bf2e:	f003 0304 	and.w	r3, r3, #4
 800bf32:	b2db      	uxtb	r3, r3
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f000 80b8 	beq.w	800c0aa <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800bf3a:	2356      	movs	r3, #86	@ 0x56
 800bf3c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800bf3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d909      	bls.n	800bf5c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800bf48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf4a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bf4c:	f7fe f9ce 	bl	800a2ec <pxDuplicateNetworkBufferWithDescriptor>
 800bf50:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800bf52:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bf54:	f00b f928 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800bf58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800bf5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	f000 80a3 	beq.w	800c0aa <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800bf64:	2320      	movs	r3, #32
 800bf66:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800bf68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bf6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf70:	3336      	adds	r3, #54	@ 0x36
 800bf72:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800bf74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf78:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800bf7a:	2333      	movs	r3, #51	@ 0x33
 800bf7c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800bf7e:	2333      	movs	r3, #51	@ 0x33
 800bf80:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800bf82:	23ff      	movs	r3, #255	@ 0xff
 800bf84:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	7b5b      	ldrb	r3, [r3, #13]
 800bf8a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	7b9b      	ldrb	r3, [r3, #14]
 800bf90:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	7bdb      	ldrb	r3, [r3, #15]
 800bf96:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9a:	3306      	adds	r3, #6
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	f107 0308 	add.w	r3, r7, #8
 800bfa2:	6818      	ldr	r0, [r3, #0]
 800bfa4:	6010      	str	r0, [r2, #0]
 800bfa6:	889b      	ldrh	r3, [r3, #4]
 800bfa8:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bfaa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bfac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bfae:	33e8      	adds	r3, #232	@ 0xe8
 800bfb0:	2206      	movs	r2, #6
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	f016 f9bc 	bl	8022330 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800bfb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfba:	2200      	movs	r2, #0
 800bfbc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bfc0:	731a      	strb	r2, [r3, #12]
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bfc8:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	2260      	movs	r2, #96	@ 0x60
 800bfce:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800bfd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800bfd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfd8:	2200      	movs	r2, #0
 800bfda:	741a      	strb	r2, [r3, #16]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800bfe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	021b      	lsls	r3, r3, #8
 800bfe6:	b29a      	uxth	r2, r3
 800bfe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfea:	0a1b      	lsrs	r3, r3, #8
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	4313      	orrs	r3, r2
 800bff0:	b29a      	uxth	r2, r3
 800bff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff4:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bff8:	223a      	movs	r2, #58	@ 0x3a
 800bffa:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	22ff      	movs	r2, #255	@ 0xff
 800c000:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c004:	f103 0016 	add.w	r0, r3, #22
 800c008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c00a:	3338      	adds	r3, #56	@ 0x38
 800c00c:	2210      	movs	r2, #16
 800c00e:	4619      	mov	r1, r3
 800c010:	f016 f98e 	bl	8022330 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800c014:	f107 0310 	add.w	r3, r7, #16
 800c018:	2210      	movs	r2, #16
 800c01a:	2100      	movs	r1, #0
 800c01c:	4618      	mov	r0, r3
 800c01e:	f016 fa94 	bl	802254a <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800c022:	23ff      	movs	r3, #255	@ 0xff
 800c024:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800c026:	2302      	movs	r3, #2
 800c028:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800c02a:	2301      	movs	r3, #1
 800c02c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800c02e:	23ff      	movs	r3, #255	@ 0xff
 800c030:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	7b5b      	ldrb	r3, [r3, #13]
 800c036:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	7b9b      	ldrb	r3, [r3, #14]
 800c03c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800c03e:	683b      	ldr	r3, [r7, #0]
 800c040:	7bdb      	ldrb	r3, [r3, #15]
 800c042:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c046:	3326      	adds	r3, #38	@ 0x26
 800c048:	461d      	mov	r5, r3
 800c04a:	f107 0410 	add.w	r4, r7, #16
 800c04e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c050:	6028      	str	r0, [r5, #0]
 800c052:	6069      	str	r1, [r5, #4]
 800c054:	60aa      	str	r2, [r5, #8]
 800c056:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800c058:	2220      	movs	r2, #32
 800c05a:	2100      	movs	r1, #0
 800c05c:	6a38      	ldr	r0, [r7, #32]
 800c05e:	f016 fa74 	bl	802254a <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	2287      	movs	r2, #135	@ 0x87
 800c066:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c068:	6a3b      	ldr	r3, [r7, #32]
 800c06a:	3308      	adds	r3, #8
 800c06c:	6839      	ldr	r1, [r7, #0]
 800c06e:	2210      	movs	r2, #16
 800c070:	4618      	mov	r0, r3
 800c072:	f016 f95d 	bl	8022330 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800c076:	6a3b      	ldr	r3, [r7, #32]
 800c078:	2201      	movs	r2, #1
 800c07a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800c07c:	6a3b      	ldr	r3, [r7, #32]
 800c07e:	2201      	movs	r2, #1
 800c080:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c082:	6a3b      	ldr	r3, [r7, #32]
 800c084:	f103 001a 	add.w	r0, r3, #26
 800c088:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c08a:	33e8      	adds	r3, #232	@ 0xe8
 800c08c:	2206      	movs	r2, #6
 800c08e:	4619      	mov	r1, r3
 800c090:	f016 f94e 	bl	8022330 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800c094:	6a3b      	ldr	r3, [r7, #32]
 800c096:	2200      	movs	r2, #0
 800c098:	709a      	strb	r2, [r3, #2]
 800c09a:	2200      	movs	r2, #0
 800c09c:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c09e:	2101      	movs	r1, #1
 800c0a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c0a2:	f7fd fd71 	bl	8009b88 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800c0aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d005      	beq.n	800c0bc <vNDSendNeighbourSolicitation+0x1b8>
 800c0b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c0b6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c0b8:	f00b f876 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800c0bc:	bf00      	nop
 800c0be:	3740      	adds	r7, #64	@ 0x40
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bdb0      	pop	{r4, r5, r7, pc}

0800c0c4 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	b2db      	uxtb	r3, r3
 800c0d0:	2b04      	cmp	r3, #4
 800c0d2:	dc29      	bgt.n	800c128 <pcMessageType+0x64>
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	dc19      	bgt.n	800c10c <pcMessageType+0x48>
 800c0d8:	e049      	b.n	800c16e <pcMessageType+0xaa>
 800c0da:	3b80      	subs	r3, #128	@ 0x80
 800c0dc:	2b08      	cmp	r3, #8
 800c0de:	d846      	bhi.n	800c16e <pcMessageType+0xaa>
 800c0e0:	a201      	add	r2, pc, #4	@ (adr r2, 800c0e8 <pcMessageType+0x24>)
 800c0e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0e6:	bf00      	nop
 800c0e8:	0800c14b 	.word	0x0800c14b
 800c0ec:	0800c151 	.word	0x0800c151
 800c0f0:	0800c16f 	.word	0x0800c16f
 800c0f4:	0800c16f 	.word	0x0800c16f
 800c0f8:	0800c16f 	.word	0x0800c16f
 800c0fc:	0800c157 	.word	0x0800c157
 800c100:	0800c15d 	.word	0x0800c15d
 800c104:	0800c163 	.word	0x0800c163
 800c108:	0800c169 	.word	0x0800c169
 800c10c:	3b01      	subs	r3, #1
 800c10e:	2b03      	cmp	r3, #3
 800c110:	d82d      	bhi.n	800c16e <pcMessageType+0xaa>
 800c112:	a201      	add	r2, pc, #4	@ (adr r2, 800c118 <pcMessageType+0x54>)
 800c114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c118:	0800c133 	.word	0x0800c133
 800c11c:	0800c139 	.word	0x0800c139
 800c120:	0800c13f 	.word	0x0800c13f
 800c124:	0800c145 	.word	0x0800c145
 800c128:	2b88      	cmp	r3, #136	@ 0x88
 800c12a:	dc20      	bgt.n	800c16e <pcMessageType+0xaa>
 800c12c:	2b80      	cmp	r3, #128	@ 0x80
 800c12e:	dad4      	bge.n	800c0da <pcMessageType+0x16>
 800c130:	e01d      	b.n	800c16e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800c132:	4b14      	ldr	r3, [pc, #80]	@ (800c184 <pcMessageType+0xc0>)
 800c134:	60fb      	str	r3, [r7, #12]
                    break;
 800c136:	e01d      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800c138:	4b13      	ldr	r3, [pc, #76]	@ (800c188 <pcMessageType+0xc4>)
 800c13a:	60fb      	str	r3, [r7, #12]
                    break;
 800c13c:	e01a      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800c13e:	4b13      	ldr	r3, [pc, #76]	@ (800c18c <pcMessageType+0xc8>)
 800c140:	60fb      	str	r3, [r7, #12]
                    break;
 800c142:	e017      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800c144:	4b12      	ldr	r3, [pc, #72]	@ (800c190 <pcMessageType+0xcc>)
 800c146:	60fb      	str	r3, [r7, #12]
                    break;
 800c148:	e014      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800c14a:	4b12      	ldr	r3, [pc, #72]	@ (800c194 <pcMessageType+0xd0>)
 800c14c:	60fb      	str	r3, [r7, #12]
                    break;
 800c14e:	e011      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800c150:	4b11      	ldr	r3, [pc, #68]	@ (800c198 <pcMessageType+0xd4>)
 800c152:	60fb      	str	r3, [r7, #12]
                    break;
 800c154:	e00e      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800c156:	4b11      	ldr	r3, [pc, #68]	@ (800c19c <pcMessageType+0xd8>)
 800c158:	60fb      	str	r3, [r7, #12]
                    break;
 800c15a:	e00b      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800c15c:	4b10      	ldr	r3, [pc, #64]	@ (800c1a0 <pcMessageType+0xdc>)
 800c15e:	60fb      	str	r3, [r7, #12]
                    break;
 800c160:	e008      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800c162:	4b10      	ldr	r3, [pc, #64]	@ (800c1a4 <pcMessageType+0xe0>)
 800c164:	60fb      	str	r3, [r7, #12]
                    break;
 800c166:	e005      	b.n	800c174 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800c168:	4b0f      	ldr	r3, [pc, #60]	@ (800c1a8 <pcMessageType+0xe4>)
 800c16a:	60fb      	str	r3, [r7, #12]
                    break;
 800c16c:	e002      	b.n	800c174 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800c16e:	4b0f      	ldr	r3, [pc, #60]	@ (800c1ac <pcMessageType+0xe8>)
 800c170:	60fb      	str	r3, [r7, #12]
                    break;
 800c172:	bf00      	nop
            }

            return pcReturn;
 800c174:	68fb      	ldr	r3, [r7, #12]
        }
 800c176:	4618      	mov	r0, r3
 800c178:	3714      	adds	r7, #20
 800c17a:	46bd      	mov	sp, r7
 800c17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c180:	4770      	bx	lr
 800c182:	bf00      	nop
 800c184:	080251f8 	.word	0x080251f8
 800c188:	0802520c 	.word	0x0802520c
 800c18c:	0802521c 	.word	0x0802521c
 800c190:	0802522c 	.word	0x0802522c
 800c194:	08025240 	.word	0x08025240
 800c198:	08025250 	.word	0x08025250
 800c19c:	0802525c 	.word	0x0802525c
 800c1a0:	08025268 	.word	0x08025268
 800c1a4:	08025274 	.word	0x08025274
 800c1a8:	08025284 	.word	0x08025284
 800c1ac:	08025294 	.word	0x08025294

0800c1b0 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b088      	sub	sp, #32
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800c1b8:	4b19      	ldr	r3, [pc, #100]	@ (800c220 <prvCheckWaitingBuffer+0x70>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1be:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800c1c0:	69fb      	ldr	r3, [r7, #28]
 800c1c2:	330e      	adds	r3, #14
 800c1c4:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	3308      	adds	r3, #8
 800c1cc:	2210      	movs	r2, #16
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	f017 f843 	bl	802325a <memcmp>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d11d      	bne.n	800c216 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800c1de:	4811      	ldr	r0, [pc, #68]	@ (800c224 <prvCheckWaitingBuffer+0x74>)
 800c1e0:	f015 fe8a 	bl	8021ef8 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800c1e8:	4b0d      	ldr	r3, [pc, #52]	@ (800c220 <prvCheckWaitingBuffer+0x70>)
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800c1ee:	f107 030c 	add.w	r3, r7, #12
 800c1f2:	6979      	ldr	r1, [r7, #20]
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	f7fd fa13 	bl	8009620 <xSendEventStructToIPTask>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d004      	beq.n	800c20a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800c200:	4b07      	ldr	r3, [pc, #28]	@ (800c220 <prvCheckWaitingBuffer+0x70>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	4618      	mov	r0, r3
 800c206:	f00a ffcf 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800c20a:	4b05      	ldr	r3, [pc, #20]	@ (800c220 <prvCheckWaitingBuffer+0x70>)
 800c20c:	2200      	movs	r2, #0
 800c20e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800c210:	2000      	movs	r0, #0
 800c212:	f7fd fffb 	bl	800a20c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800c216:	bf00      	nop
 800c218:	3720      	adds	r7, #32
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}
 800c21e:	bf00      	nop
 800c220:	20001114 	.word	0x20001114
 800c224:	080252a4 	.word	0x080252a4

0800c228 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800c228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c22c:	b09e      	sub	sp, #120	@ 0x78
 800c22e:	af02      	add	r7, sp, #8
 800c230:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c236:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c23a:	3336      	adds	r3, #54	@ 0x36
 800c23c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c242:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800c244:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c246:	781b      	ldrb	r3, [r3, #0]
 800c248:	2b80      	cmp	r3, #128	@ 0x80
 800c24a:	d01e      	beq.n	800c28a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800c24c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c24e:	781b      	ldrb	r3, [r3, #0]
 800c250:	4698      	mov	r8, r3
 800c252:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	4618      	mov	r0, r3
 800c258:	f7ff ff34 	bl	800c0c4 <pcMessageType>
 800c25c:	4606      	mov	r6, r0
 800c25e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c260:	f103 0516 	add.w	r5, r3, #22
 800c264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c266:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800c26a:	f107 030c 	add.w	r3, r7, #12
 800c26e:	2228      	movs	r2, #40	@ 0x28
 800c270:	4619      	mov	r1, r3
 800c272:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800c274:	f001 fd5c 	bl	800dd30 <pcEndpointName>
 800c278:	4603      	mov	r3, r0
 800c27a:	9301      	str	r3, [sp, #4]
 800c27c:	9400      	str	r4, [sp, #0]
 800c27e:	462b      	mov	r3, r5
 800c280:	4632      	mov	r2, r6
 800c282:	4641      	mov	r1, r8
 800c284:	48a7      	ldr	r0, [pc, #668]	@ (800c524 <prvProcessICMPMessage_IPv6+0x2fc>)
 800c286:	f015 fe37 	bl	8021ef8 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c28a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c28c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c290:	f003 0304 	and.w	r3, r3, #4
 800c294:	b2db      	uxtb	r3, r3
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 813e 	beq.w	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c29c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	dc1d      	bgt.n	800c2e0 <prvProcessICMPMessage_IPv6+0xb8>
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f300 8130 	bgt.w	800c50a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800c2aa:	e130      	b.n	800c50e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800c2ac:	3b80      	subs	r3, #128	@ 0x80
 800c2ae:	2b08      	cmp	r3, #8
 800c2b0:	f200 812d 	bhi.w	800c50e <prvProcessICMPMessage_IPv6+0x2e6>
 800c2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800c2bc <prvProcessICMPMessage_IPv6+0x94>)
 800c2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ba:	bf00      	nop
 800c2bc:	0800c2ed 	.word	0x0800c2ed
 800c2c0:	0800c335 	.word	0x0800c335
 800c2c4:	0800c50f 	.word	0x0800c50f
 800c2c8:	0800c50f 	.word	0x0800c50f
 800c2cc:	0800c50f 	.word	0x0800c50f
 800c2d0:	0800c50f 	.word	0x0800c50f
 800c2d4:	0800c503 	.word	0x0800c503
 800c2d8:	0800c3ab 	.word	0x0800c3ab
 800c2dc:	0800c4bb 	.word	0x0800c4bb
 800c2e0:	2b88      	cmp	r3, #136	@ 0x88
 800c2e2:	f300 8114 	bgt.w	800c50e <prvProcessICMPMessage_IPv6+0x2e6>
 800c2e6:	2b80      	cmp	r3, #128	@ 0x80
 800c2e8:	dae0      	bge.n	800c2ac <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800c2ea:	e110      	b.n	800c50e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800c2ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2ee:	8a5b      	ldrh	r3, [r3, #18]
 800c2f0:	b29b      	uxth	r3, r3
 800c2f2:	021b      	lsls	r3, r3, #8
 800c2f4:	b21a      	sxth	r2, r3
 800c2f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c2f8:	8a5b      	ldrh	r3, [r3, #18]
 800c2fa:	b29b      	uxth	r3, r3
 800c2fc:	0a1b      	lsrs	r3, r3, #8
 800c2fe:	b29b      	uxth	r3, r3
 800c300:	b21b      	sxth	r3, r3
 800c302:	4313      	orrs	r3, r2
 800c304:	b21b      	sxth	r3, r3
 800c306:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800c308:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800c30a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c30c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c30e:	3336      	adds	r3, #54	@ 0x36
 800c310:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c316:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c318:	429a      	cmp	r2, r3
 800c31a:	d903      	bls.n	800c324 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c31c:	4882      	ldr	r0, [pc, #520]	@ (800c528 <prvProcessICMPMessage_IPv6+0x300>)
 800c31e:	f015 fdeb 	bl	8021ef8 <lUDPLoggingPrintf>
                           break;
 800c322:	e0f9      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800c324:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c326:	2281      	movs	r2, #129	@ 0x81
 800c328:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c32a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f7ff fdad 	bl	800be8c <prvReturnICMP_IPv6>
                   break;
 800c332:	e0f1      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800c334:	2300      	movs	r3, #0
 800c336:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800c33a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c33c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800c33e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c340:	8a5b      	ldrh	r3, [r3, #18]
 800c342:	b29b      	uxth	r3, r3
 800c344:	021b      	lsls	r3, r3, #8
 800c346:	b21a      	sxth	r2, r3
 800c348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c34a:	8a5b      	ldrh	r3, [r3, #18]
 800c34c:	b29b      	uxth	r3, r3
 800c34e:	0a1b      	lsrs	r3, r3, #8
 800c350:	b29b      	uxth	r3, r3
 800c352:	b21b      	sxth	r3, r3
 800c354:	4313      	orrs	r3, r2
 800c356:	b21b      	sxth	r3, r3
 800c358:	b29b      	uxth	r3, r3
 800c35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800c35c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c35e:	3b08      	subs	r3, #8
 800c360:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800c362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c364:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800c366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c368:	3308      	adds	r3, #8
 800c36a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c36c:	2300      	movs	r3, #0
 800c36e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c370:	e00d      	b.n	800c38e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800c372:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c374:	781b      	ldrb	r3, [r3, #0]
 800c376:	2b78      	cmp	r3, #120	@ 0x78
 800c378:	d003      	beq.n	800c382 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800c37a:	2302      	movs	r3, #2
 800c37c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800c380:	e009      	b.n	800c396 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800c382:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c384:	3301      	adds	r3, #1
 800c386:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800c388:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800c38a:	3301      	adds	r3, #1
 800c38c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c38e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800c390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c392:	429a      	cmp	r2, r3
 800c394:	d3ed      	bcc.n	800c372 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800c396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c398:	889b      	ldrh	r3, [r3, #4]
 800c39a:	b29a      	uxth	r2, r3
 800c39c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800c3a0:	4611      	mov	r1, r2
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f7f5 fb7e 	bl	8001aa4 <vApplicationPingReplyHook>
                           break;
 800c3a8:	e0b6      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800c3aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c3ac:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c3b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3b4:	3308      	adds	r3, #8
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	4610      	mov	r0, r2
 800c3ba:	f001 f9cd 	bl	800d758 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800c3be:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800c3c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800c3c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c3c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800c3ca:	e005      	b.n	800c3d8 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800c3cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3ce:	3308      	adds	r3, #8
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4856      	ldr	r0, [pc, #344]	@ (800c52c <prvProcessICMPMessage_IPv6+0x304>)
 800c3d4:	f015 fd90 	bl	8021ef8 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c3d8:	2320      	movs	r3, #32
 800c3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c3dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c3de:	3336      	adds	r3, #54	@ 0x36
 800c3e0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	d903      	bls.n	800c3f4 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800c3ec:	484e      	ldr	r0, [pc, #312]	@ (800c528 <prvProcessICMPMessage_IPv6+0x300>)
 800c3ee:	f015 fd83 	bl	8021ef8 <lUDPLoggingPrintf>
                           break;
 800c3f2:	e091      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c3f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c3f6:	f103 0008 	add.w	r0, r3, #8
 800c3fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c3fc:	3338      	adds	r3, #56	@ 0x38
 800c3fe:	2210      	movs	r2, #16
 800c400:	4619      	mov	r1, r3
 800c402:	f016 ff2a 	bl	802325a <memcmp>
 800c406:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800c408:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c40a:	f103 0108 	add.w	r1, r3, #8
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c412:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800c416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d101      	bne.n	800c420 <prvProcessICMPMessage_IPv6+0x1f8>
 800c41c:	4b44      	ldr	r3, [pc, #272]	@ (800c530 <prvProcessICMPMessage_IPv6+0x308>)
 800c41e:	e000      	b.n	800c422 <prvProcessICMPMessage_IPv6+0x1fa>
 800c420:	4b44      	ldr	r3, [pc, #272]	@ (800c534 <prvProcessICMPMessage_IPv6+0x30c>)
 800c422:	4845      	ldr	r0, [pc, #276]	@ (800c538 <prvProcessICMPMessage_IPv6+0x310>)
 800c424:	f015 fd68 	bl	8021ef8 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800c428:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d171      	bne.n	800c512 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c42e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c430:	2288      	movs	r2, #136	@ 0x88
 800c432:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800c434:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c436:	2200      	movs	r2, #0
 800c438:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c43a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c43c:	2200      	movs	r2, #0
 800c43e:	711a      	strb	r2, [r3, #4]
 800c440:	2200      	movs	r2, #0
 800c442:	715a      	strb	r2, [r3, #5]
 800c444:	2200      	movs	r2, #0
 800c446:	719a      	strb	r2, [r3, #6]
 800c448:	2200      	movs	r2, #0
 800c44a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c44e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c450:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c452:	685b      	ldr	r3, [r3, #4]
 800c454:	061a      	lsls	r2, r3, #24
 800c456:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	021b      	lsls	r3, r3, #8
 800c45c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c460:	431a      	orrs	r2, r3
 800c462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	0a1b      	lsrs	r3, r3, #8
 800c468:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c46c:	431a      	orrs	r2, r3
 800c46e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c470:	685b      	ldr	r3, [r3, #4]
 800c472:	0e1b      	lsrs	r3, r3, #24
 800c474:	431a      	orrs	r2, r3
 800c476:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c478:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c47a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c47c:	2202      	movs	r2, #2
 800c47e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800c480:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c482:	2201      	movs	r2, #1
 800c484:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c486:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c488:	f103 001a 	add.w	r0, r3, #26
 800c48c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c48e:	33e8      	adds	r3, #232	@ 0xe8
 800c490:	2206      	movs	r2, #6
 800c492:	4619      	mov	r1, r3
 800c494:	f015 ff4c 	bl	8022330 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800c498:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c49a:	22ff      	movs	r2, #255	@ 0xff
 800c49c:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c49e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4a0:	f103 0008 	add.w	r0, r3, #8
 800c4a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c4a6:	3338      	adds	r3, #56	@ 0x38
 800c4a8:	2210      	movs	r2, #16
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f015 ff40 	bl	8022330 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800c4b0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800c4b2:	6878      	ldr	r0, [r7, #4]
 800c4b4:	f7ff fcea 	bl	800be8c <prvReturnICMP_IPv6>
                   break;
 800c4b8:	e02b      	b.n	800c512 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c4ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4bc:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800c4c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4c2:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800c4c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800c4c6:	4619      	mov	r1, r3
 800c4c8:	f7ff fb5e 	bl	800bb88 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800c4cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4ce:	3308      	adds	r3, #8
 800c4d0:	4619      	mov	r1, r3
 800c4d2:	481a      	ldr	r0, [pc, #104]	@ (800c53c <prvProcessICMPMessage_IPv6+0x314>)
 800c4d4:	f015 fd10 	bl	8021ef8 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fa89 	bl	800c9f0 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800c4de:	4b18      	ldr	r3, [pc, #96]	@ (800c540 <prvProcessICMPMessage_IPv6+0x318>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d017      	beq.n	800c516 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800c4e6:	4b16      	ldr	r3, [pc, #88]	@ (800c540 <prvProcessICMPMessage_IPv6+0x318>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7fd fc4c 	bl	8009d88 <uxIPHeaderSizePacket>
 800c4f0:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800c4f2:	2b28      	cmp	r3, #40	@ 0x28
 800c4f4:	d10f      	bne.n	800c516 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800c4f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f7ff fe58 	bl	800c1b0 <prvCheckWaitingBuffer>
                    break;
 800c500:	e009      	b.n	800c516 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fb9a 	bl	800cc3c <vReceiveRA>
                            break;
 800c508:	e006      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c50a:	bf00      	nop
 800c50c:	e004      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c50e:	bf00      	nop
 800c510:	e002      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800c512:	bf00      	nop
 800c514:	e000      	b.n	800c518 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800c516:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800c518:	2300      	movs	r3, #0
    }
 800c51a:	4618      	mov	r0, r3
 800c51c:	3770      	adds	r7, #112	@ 0x70
 800c51e:	46bd      	mov	sp, r7
 800c520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c524:	080252b4 	.word	0x080252b4
 800c528:	080252ec 	.word	0x080252ec
 800c52c:	080252f8 	.word	0x080252f8
 800c530:	08025328 	.word	0x08025328
 800c534:	08025330 	.word	0x08025330
 800c538:	08025338 	.word	0x08025338
 800c53c:	0802535c 	.word	0x0802535c
 800c540:	20001114 	.word	0x20001114

0800c544 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800c544:	b5b0      	push	{r4, r5, r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c54c:	2356      	movs	r3, #86	@ 0x56
 800c54e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800c550:	2100      	movs	r1, #0
 800c552:	69f8      	ldr	r0, [r7, #28]
 800c554:	f00a fdc0 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 800c558:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	f000 80b1 	beq.w	800c6c4 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	3314      	adds	r3, #20
 800c566:	2210      	movs	r2, #16
 800c568:	2100      	movs	r1, #0
 800c56a:	4618      	mov	r0, r3
 800c56c:	f015 ffed 	bl	802254a <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	687a      	ldr	r2, [r7, #4]
 800c574:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c57c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d104      	bne.n	800c58e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800c584:	f240 419e 	movw	r1, #1182	@ 0x49e
 800c588:	4850      	ldr	r0, [pc, #320]	@ (800c6cc <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800c58a:	f7f5 f9d5 	bl	8001938 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c58e:	69bb      	ldr	r3, [r7, #24]
 800c590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c592:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	3336      	adds	r3, #54	@ 0x36
 800c598:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	4a4c      	ldr	r2, [pc, #304]	@ (800c6d0 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800c59e:	6810      	ldr	r0, [r2, #0]
 800c5a0:	6018      	str	r0, [r3, #0]
 800c5a2:	8892      	ldrh	r2, [r2, #4]
 800c5a4:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	1d98      	adds	r0, r3, #6
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	33e8      	adds	r3, #232	@ 0xe8
 800c5ae:	2206      	movs	r2, #6
 800c5b0:	4619      	mov	r1, r3
 800c5b2:	f015 febd 	bl	8022330 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800c5b6:	693b      	ldr	r3, [r7, #16]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c5be:	731a      	strb	r2, [r3, #12]
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c5c6:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	2260      	movs	r2, #96	@ 0x60
 800c5cc:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800c5ce:	693b      	ldr	r3, [r7, #16]
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	2200      	movs	r2, #0
 800c5d8:	741a      	strb	r2, [r3, #16]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	749a      	strb	r2, [r3, #18]
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	f042 0220 	orr.w	r2, r2, #32
 800c5ea:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	223a      	movs	r2, #58	@ 0x3a
 800c5f0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	22ff      	movs	r2, #255	@ 0xff
 800c5f6:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f103 0016 	add.w	r0, r3, #22
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	3338      	adds	r3, #56	@ 0x38
 800c602:	2210      	movs	r2, #16
 800c604:	4619      	mov	r1, r3
 800c606:	f015 fe93 	bl	8022330 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	3326      	adds	r3, #38	@ 0x26
 800c60e:	4a31      	ldr	r2, [pc, #196]	@ (800c6d4 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800c610:	461c      	mov	r4, r3
 800c612:	4615      	mov	r5, r2
 800c614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c616:	6020      	str	r0, [r4, #0]
 800c618:	6061      	str	r1, [r4, #4]
 800c61a:	60a2      	str	r2, [r4, #8]
 800c61c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800c61e:	2320      	movs	r3, #32
 800c620:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	2288      	movs	r2, #136	@ 0x88
 800c626:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2200      	movs	r2, #0
 800c632:	711a      	strb	r2, [r3, #4]
 800c634:	2200      	movs	r2, #0
 800c636:	715a      	strb	r2, [r3, #5]
 800c638:	2200      	movs	r2, #0
 800c63a:	719a      	strb	r2, [r3, #6]
 800c63c:	2200      	movs	r2, #0
 800c63e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800c642:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	685b      	ldr	r3, [r3, #4]
 800c648:	061a      	lsls	r2, r3, #24
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	021b      	lsls	r3, r3, #8
 800c650:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c654:	431a      	orrs	r2, r3
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	685b      	ldr	r3, [r3, #4]
 800c65a:	0a1b      	lsrs	r3, r3, #8
 800c65c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c660:	431a      	orrs	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	685b      	ldr	r3, [r3, #4]
 800c666:	0e1b      	lsrs	r3, r3, #24
 800c668:	431a      	orrs	r2, r3
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2202      	movs	r2, #2
 800c672:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2201      	movs	r2, #1
 800c678:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	f103 001a 	add.w	r0, r3, #26
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	33e8      	adds	r3, #232	@ 0xe8
 800c684:	2206      	movs	r2, #6
 800c686:	4619      	mov	r1, r3
 800c688:	f015 fe52 	bl	8022330 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	22ff      	movs	r2, #255	@ 0xff
 800c690:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	f103 0008 	add.w	r0, r3, #8
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	3338      	adds	r3, #56	@ 0x38
 800c69c:	2210      	movs	r2, #16
 800c69e:	4619      	mov	r1, r3
 800c6a0:	f015 fe46 	bl	8022330 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	709a      	strb	r2, [r3, #2]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	69b9      	ldr	r1, [r7, #24]
 800c6c0:	6978      	ldr	r0, [r7, #20]
 800c6c2:	4798      	blx	r3
        }
    }
 800c6c4:	bf00      	nop
 800c6c6:	3720      	adds	r7, #32
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bdb0      	pop	{r4, r5, r7, pc}
 800c6cc:	08025374 	.word	0x08025374
 800c6d0:	080275ec 	.word	0x080275ec
 800c6d4:	080275dc 	.word	0x080275dc

0800c6d8 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b090      	sub	sp, #64	@ 0x40
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d017      	beq.n	800c720 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6f4:	e010      	b.n	800c718 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800c6f6:	f107 0214 	add.w	r2, r7, #20
 800c6fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	4618      	mov	r0, r3
 800c702:	f7f5 f9e3 	bl	8001acc <xApplicationGetRandomNumber>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d102      	bne.n	800c712 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800c70c:	2300      	movs	r3, #0
 800c70e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800c710:	e00d      	b.n	800c72e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800c712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c714:	3301      	adds	r3, #1
 800c716:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c71a:	2b03      	cmp	r3, #3
 800c71c:	ddeb      	ble.n	800c6f6 <FreeRTOS_CreateIPv6Address+0x1e>
 800c71e:	e006      	b.n	800c72e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800c720:	f107 0314 	add.w	r3, r7, #20
 800c724:	2210      	movs	r2, #16
 800c726:	2100      	movs	r1, #0
 800c728:	4618      	mov	r0, r3
 800c72a:	f015 ff0e 	bl	802254a <memset>
        }

        if( xResult == pdPASS )
 800c72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c730:	2b01      	cmp	r3, #1
 800c732:	d167      	bne.n	800c804 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d004      	beq.n	800c744 <FreeRTOS_CreateIPv6Address+0x6c>
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2b80      	cmp	r3, #128	@ 0x80
 800c73e:	d801      	bhi.n	800c744 <FreeRTOS_CreateIPv6Address+0x6c>
 800c740:	2301      	movs	r3, #1
 800c742:	e000      	b.n	800c746 <FreeRTOS_CreateIPv6Address+0x6e>
 800c744:	2300      	movs	r3, #0
 800c746:	2b00      	cmp	r3, #0
 800c748:	d104      	bne.n	800c754 <FreeRTOS_CreateIPv6Address+0x7c>
 800c74a:	f240 5105 	movw	r1, #1285	@ 0x505
 800c74e:	4830      	ldr	r0, [pc, #192]	@ (800c810 <FreeRTOS_CreateIPv6Address+0x138>)
 800c750:	f7f5 f8f2 	bl	8001938 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2b07      	cmp	r3, #7
 800c758:	d907      	bls.n	800c76a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	68b9      	ldr	r1, [r7, #8]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	3307      	adds	r3, #7
 800c762:	08db      	lsrs	r3, r3, #3
 800c764:	461a      	mov	r2, r3
 800c766:	f015 fde3 	bl	8022330 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800c76a:	f107 0314 	add.w	r3, r7, #20
 800c76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	08db      	lsrs	r3, r3, #3
 800c774:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f003 0307 	and.w	r3, r3, #7
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d034      	beq.n	800c7ea <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	f003 0307 	and.w	r3, r3, #7
 800c786:	f1c3 0308 	rsb	r3, r3, #8
 800c78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800c78c:	2201      	movs	r2, #1
 800c78e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c790:	fa02 f303 	lsl.w	r3, r2, r3
 800c794:	3b01      	subs	r3, #1
 800c796:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800c798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	43db      	mvns	r3, r3
 800c79e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800c7a2:	68fa      	ldr	r2, [r7, #12]
 800c7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7a6:	4413      	add	r3, r2
 800c7a8:	781a      	ldrb	r2, [r3, #0]
 800c7aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	b2d9      	uxtb	r1, r3
 800c7b2:	68fa      	ldr	r2, [r7, #12]
 800c7b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7b6:	4413      	add	r3, r2
 800c7b8:	460a      	mov	r2, r1
 800c7ba:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	4413      	add	r3, r2
 800c7c2:	781a      	ldrb	r2, [r3, #0]
 800c7c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7c6:	7819      	ldrb	r1, [r3, #0]
 800c7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ca:	b2db      	uxtb	r3, r3
 800c7cc:	400b      	ands	r3, r1
 800c7ce:	b2db      	uxtb	r3, r3
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	b2d9      	uxtb	r1, r3
 800c7d4:	68fa      	ldr	r2, [r7, #12]
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d8:	4413      	add	r3, r2
 800c7da:	460a      	mov	r2, r1
 800c7dc:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800c7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800c7e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e6:	3301      	adds	r3, #1
 800c7e8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800c7ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ec:	2b0f      	cmp	r3, #15
 800c7ee:	d809      	bhi.n	800c804 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f4:	18d0      	adds	r0, r2, r3
 800c7f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7f8:	f1c3 0310 	rsb	r3, r3, #16
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c800:	f015 fd96 	bl	8022330 <memcpy>
            }
        }

        return xResult;
 800c804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800c806:	4618      	mov	r0, r3
 800c808:	3740      	adds	r7, #64	@ 0x40
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}
 800c80e:	bf00      	nop
 800c810:	08025374 	.word	0x08025374

0800c814 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
 800c81c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 fe48 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800c828:	60b8      	str	r0, [r7, #8]
 800c82a:	e01a      	b.n	800c862 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800c832:	2bfe      	cmp	r3, #254	@ 0xfe
 800c834:	d110      	bne.n	800c858 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800c83c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800c840:	2b80      	cmp	r3, #128	@ 0x80
 800c842:	d109      	bne.n	800c858 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c844:	6838      	ldr	r0, [r7, #0]
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	3338      	adds	r3, #56	@ 0x38
 800c84a:	2210      	movs	r2, #16
 800c84c:	4619      	mov	r1, r3
 800c84e:	f015 fd6f 	bl	8022330 <memcpy>
                xResult = pdPASS;
 800c852:	2301      	movs	r3, #1
 800c854:	60fb      	str	r3, [r7, #12]
                break;
 800c856:	e007      	b.n	800c868 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800c858:	68b9      	ldr	r1, [r7, #8]
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 fe4e 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800c860:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1e1      	bne.n	800c82c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800c868:	68fb      	ldr	r3, [r7, #12]
    }
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800c874:	b5b0      	push	{r4, r5, r7, lr}
 800c876:	b090      	sub	sp, #64	@ 0x40
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
 800c87c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c882:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c884:	233e      	movs	r3, #62	@ 0x3e
 800c886:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800c88c:	2300      	movs	r3, #0
 800c88e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800c890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c892:	2b00      	cmp	r3, #0
 800c894:	d103      	bne.n	800c89e <vNDSendRouterSolicitation+0x2a>
 800c896:	218f      	movs	r1, #143	@ 0x8f
 800c898:	4852      	ldr	r0, [pc, #328]	@ (800c9e4 <vNDSendRouterSolicitation+0x170>)
 800c89a:	f7f5 f84d 	bl	8001938 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800c89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c8a4:	f003 0304 	and.w	r3, r3, #4
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d103      	bne.n	800c8b6 <vNDSendRouterSolicitation+0x42>
 800c8ae:	2190      	movs	r1, #144	@ 0x90
 800c8b0:	484c      	ldr	r0, [pc, #304]	@ (800c9e4 <vNDSendRouterSolicitation+0x170>)
 800c8b2:	f7f5 f841 	bl	8001938 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8b8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c8bc:	f107 020c 	add.w	r2, r7, #12
 800c8c0:	4611      	mov	r1, r2
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff ffa6 	bl	800c814 <xGetLinkLocalAddress>
 800c8c8:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800c8ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d10a      	bne.n	800c8e6 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800c8d0:	4845      	ldr	r0, [pc, #276]	@ (800c9e8 <vNDSendRouterSolicitation+0x174>)
 800c8d2:	f015 fb11 	bl	8021ef8 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800c8d6:	f107 030c 	add.w	r3, r7, #12
 800c8da:	2210      	movs	r2, #16
 800c8dc:	2100      	movs	r1, #0
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f015 fe33 	bl	802254a <memset>
 800c8e4:	e005      	b.n	800c8f2 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800c8e6:	f107 030c 	add.w	r3, r7, #12
 800c8ea:	4619      	mov	r1, r3
 800c8ec:	483f      	ldr	r0, [pc, #252]	@ (800c9ec <vNDSendRouterSolicitation+0x178>)
 800c8ee:	f015 fb03 	bl	8021ef8 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800c8f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c8f8:	429a      	cmp	r2, r3
 800c8fa:	d909      	bls.n	800c910 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800c8fc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800c8fe:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c900:	f7fd fcf4 	bl	800a2ec <pxDuplicateNetworkBufferWithDescriptor>
 800c904:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800c906:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c908:	f00a fc4e 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800c90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c90e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800c910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c912:	2b00      	cmp	r3, #0
 800c914:	d062      	beq.n	800c9dc <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800c916:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c91a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c91c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c91e:	3336      	adds	r3, #54	@ 0x36
 800c920:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800c922:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c924:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800c926:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800c928:	f107 031c 	add.w	r3, r7, #28
 800c92c:	2200      	movs	r2, #0
 800c92e:	4619      	mov	r1, r3
 800c930:	6838      	ldr	r0, [r7, #0]
 800c932:	f7ff f87b 	bl	800ba2c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c938:	3306      	adds	r3, #6
 800c93a:	461a      	mov	r2, r3
 800c93c:	f107 031c 	add.w	r3, r7, #28
 800c940:	6818      	ldr	r0, [r3, #0]
 800c942:	6010      	str	r0, [r2, #0]
 800c944:	889b      	ldrh	r3, [r3, #4]
 800c946:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800c948:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c94c:	33e8      	adds	r3, #232	@ 0xe8
 800c94e:	2206      	movs	r2, #6
 800c950:	4619      	mov	r1, r3
 800c952:	f015 fced 	bl	8022330 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800c956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c958:	2200      	movs	r2, #0
 800c95a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800c95e:	731a      	strb	r2, [r3, #12]
 800c960:	2200      	movs	r2, #0
 800c962:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800c966:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800c968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96a:	2260      	movs	r2, #96	@ 0x60
 800c96c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800c96e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c970:	2200      	movs	r2, #0
 800c972:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800c974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c976:	2200      	movs	r2, #0
 800c978:	741a      	strb	r2, [r3, #16]
 800c97a:	2200      	movs	r2, #0
 800c97c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800c97e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c980:	2200      	movs	r2, #0
 800c982:	749a      	strb	r2, [r3, #18]
 800c984:	2200      	movs	r2, #0
 800c986:	f042 0208 	orr.w	r2, r2, #8
 800c98a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800c98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c98e:	223a      	movs	r2, #58	@ 0x3a
 800c990:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800c992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c994:	22ff      	movs	r2, #255	@ 0xff
 800c996:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99a:	3316      	adds	r3, #22
 800c99c:	461d      	mov	r5, r3
 800c99e:	f107 040c 	add.w	r4, r7, #12
 800c9a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c9a4:	6028      	str	r0, [r5, #0]
 800c9a6:	6069      	str	r1, [r5, #4]
 800c9a8:	60aa      	str	r2, [r5, #8]
 800c9aa:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c9ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9ae:	3326      	adds	r3, #38	@ 0x26
 800c9b0:	6839      	ldr	r1, [r7, #0]
 800c9b2:	2210      	movs	r2, #16
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	f015 fcbb 	bl	8022330 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800c9ba:	2208      	movs	r2, #8
 800c9bc:	2100      	movs	r1, #0
 800c9be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c9c0:	f015 fdc3 	bl	802254a <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9c6:	2285      	movs	r2, #133	@ 0x85
 800c9c8:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800c9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	709a      	strb	r2, [r3, #2]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800c9d4:	2101      	movs	r1, #1
 800c9d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800c9d8:	f7fd f8d6 	bl	8009b88 <vReturnEthernetFrame>
        }
    }
 800c9dc:	bf00      	nop
 800c9de:	3740      	adds	r7, #64	@ 0x40
 800c9e0:	46bd      	mov	sp, r7
 800c9e2:	bdb0      	pop	{r4, r5, r7, pc}
 800c9e4:	080253a0 	.word	0x080253a0
 800c9e8:	080253cc 	.word	0x080253cc
 800c9ec:	080253f4 	.word	0x080253f4

0800c9f0 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b086      	sub	sp, #24
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fc:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca02:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3336      	adds	r3, #54	@ 0x36
 800ca08:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ca0a:	6938      	ldr	r0, [r7, #16]
 800ca0c:	f000 fd54 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800ca10:	6178      	str	r0, [r7, #20]
 800ca12:	e028      	b.n	800ca66 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ca1a:	f003 0302 	and.w	r3, r3, #2
 800ca1e:	b2db      	uxtb	r3, r3
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d01b      	beq.n	800ca5c <vReceiveNA+0x6c>
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d116      	bne.n	800ca5c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ca34:	68bb      	ldr	r3, [r7, #8]
 800ca36:	3308      	adds	r3, #8
 800ca38:	2210      	movs	r2, #16
 800ca3a:	4619      	mov	r1, r3
 800ca3c:	f016 fc0d 	bl	802325a <memcmp>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10a      	bne.n	800ca5c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800ca46:	697a      	ldr	r2, [r7, #20]
 800ca48:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800ca4c:	f043 0302 	orr.w	r3, r3, #2
 800ca50:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800ca54:	2164      	movs	r1, #100	@ 0x64
 800ca56:	6978      	ldr	r0, [r7, #20]
 800ca58:	f7fd fb3e 	bl	800a0d8 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800ca5c:	6979      	ldr	r1, [r7, #20]
 800ca5e:	6938      	ldr	r0, [r7, #16]
 800ca60:	f000 fd4c 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800ca64:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d1d3      	bne.n	800ca14 <vReceiveNA+0x24>
                }
            }
        }
    }
 800ca6c:	bf00      	nop
 800ca6e:	bf00      	nop
 800ca70:	3718      	adds	r7, #24
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
	...

0800ca78 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca7a:	b091      	sub	sp, #68	@ 0x44
 800ca7c:	af04      	add	r7, sp, #16
 800ca7e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800ca80:	2300      	movs	r3, #0
 800ca82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800ca84:	2310      	movs	r3, #16
 800ca86:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800ca88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca8a:	3336      	adds	r3, #54	@ 0x36
 800ca8c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	1ad3      	subs	r3, r2, r3
 800ca96:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca9c:	6a3b      	ldr	r3, [r7, #32]
 800ca9e:	4413      	add	r3, r2
 800caa0:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800caa2:	2300      	movs	r3, #0
 800caa4:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800caa6:	e0b2      	b.n	800cc0e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800caa8:	69ba      	ldr	r2, [r7, #24]
 800caaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800caac:	4413      	add	r3, r2
 800caae:	781b      	ldrb	r3, [r3, #0]
 800cab0:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800cab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cab4:	3301      	adds	r3, #1
 800cab6:	69ba      	ldr	r2, [r7, #24]
 800cab8:	4413      	add	r3, r2
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	00db      	lsls	r3, r3, #3
 800cac2:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d103      	bne.n	800cad2 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800caca:	4856      	ldr	r0, [pc, #344]	@ (800cc24 <vReceiveRA_ReadReply+0x1ac>)
 800cacc:	f015 fa14 	bl	8021ef8 <lUDPLoggingPrintf>
                break;
 800cad0:	e0a3      	b.n	800cc1a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800cad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	4413      	add	r3, r2
 800cad8:	69fa      	ldr	r2, [r7, #28]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d208      	bcs.n	800caf0 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800cade:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	4413      	add	r3, r2
 800cae4:	69fa      	ldr	r2, [r7, #28]
 800cae6:	4619      	mov	r1, r3
 800cae8:	484f      	ldr	r0, [pc, #316]	@ (800cc28 <vReceiveRA_ReadReply+0x1b0>)
 800caea:	f015 fa05 	bl	8021ef8 <lUDPLoggingPrintf>
                break;
 800caee:	e094      	b.n	800cc1a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800caf0:	7dfb      	ldrb	r3, [r7, #23]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	2b04      	cmp	r3, #4
 800caf6:	d87f      	bhi.n	800cbf8 <vReceiveRA_ReadReply+0x180>
 800caf8:	a201      	add	r2, pc, #4	@ (adr r2, 800cb00 <vReceiveRA_ReadReply+0x88>)
 800cafa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafe:	bf00      	nop
 800cb00:	0800cb15 	.word	0x0800cb15
 800cb04:	0800cc05 	.word	0x0800cc05
 800cb08:	0800cb6f 	.word	0x0800cb6f
 800cb0c:	0800cc05 	.word	0x0800cc05
 800cb10:	0800cbdf 	.word	0x0800cbdf
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800cb14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb16:	3302      	adds	r3, #2
 800cb18:	69ba      	ldr	r2, [r7, #24]
 800cb1a:	4413      	add	r3, r2
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	461c      	mov	r4, r3
 800cb20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb22:	3303      	adds	r3, #3
 800cb24:	69ba      	ldr	r2, [r7, #24]
 800cb26:	4413      	add	r3, r2
 800cb28:	781b      	ldrb	r3, [r3, #0]
 800cb2a:	461d      	mov	r5, r3
 800cb2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb2e:	3304      	adds	r3, #4
 800cb30:	69ba      	ldr	r2, [r7, #24]
 800cb32:	4413      	add	r3, r2
 800cb34:	781b      	ldrb	r3, [r3, #0]
 800cb36:	461e      	mov	r6, r3
 800cb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb3a:	3305      	adds	r3, #5
 800cb3c:	69ba      	ldr	r2, [r7, #24]
 800cb3e:	4413      	add	r3, r2
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	4619      	mov	r1, r3
 800cb44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb46:	3306      	adds	r3, #6
 800cb48:	69ba      	ldr	r2, [r7, #24]
 800cb4a:	4413      	add	r3, r2
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	4618      	mov	r0, r3
 800cb50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb52:	3307      	adds	r3, #7
 800cb54:	69ba      	ldr	r2, [r7, #24]
 800cb56:	4413      	add	r3, r2
 800cb58:	781b      	ldrb	r3, [r3, #0]
 800cb5a:	9302      	str	r3, [sp, #8]
 800cb5c:	9001      	str	r0, [sp, #4]
 800cb5e:	9100      	str	r1, [sp, #0]
 800cb60:	4633      	mov	r3, r6
 800cb62:	462a      	mov	r2, r5
 800cb64:	4621      	mov	r1, r4
 800cb66:	4831      	ldr	r0, [pc, #196]	@ (800cc2c <vReceiveRA_ReadReply+0x1b4>)
 800cb68:	f015 f9c6 	bl	8021ef8 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800cb6c:	e04b      	b.n	800cc06 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800cb6e:	69ba      	ldr	r2, [r7, #24]
 800cb70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cb72:	4413      	add	r3, r2
 800cb74:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800cb76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb78:	789b      	ldrb	r3, [r3, #2]
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	061a      	lsls	r2, r3, #24
 800cb82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	021b      	lsls	r3, r3, #8
 800cb88:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb8c:	431a      	orrs	r2, r3
 800cb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	0a1b      	lsrs	r3, r3, #8
 800cb94:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cb98:	431a      	orrs	r2, r3
 800cb9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9c:	685b      	ldr	r3, [r3, #4]
 800cb9e:	0e1b      	lsrs	r3, r3, #24
 800cba0:	ea42 0103 	orr.w	r1, r2, r3
 800cba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	061a      	lsls	r2, r3, #24
 800cbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	021b      	lsls	r3, r3, #8
 800cbb0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cbb4:	431a      	orrs	r2, r3
 800cbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb8:	689b      	ldr	r3, [r3, #8]
 800cbba:	0a1b      	lsrs	r3, r3, #8
 800cbbc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cbc0:	431a      	orrs	r2, r3
 800cbc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc4:	689b      	ldr	r3, [r3, #8]
 800cbc6:	0e1b      	lsrs	r3, r3, #24
 800cbc8:	431a      	orrs	r2, r3
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	3310      	adds	r3, #16
 800cbce:	9300      	str	r3, [sp, #0]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	460a      	mov	r2, r1
 800cbd4:	4601      	mov	r1, r0
 800cbd6:	4816      	ldr	r0, [pc, #88]	@ (800cc30 <vReceiveRA_ReadReply+0x1b8>)
 800cbd8:	f015 f98e 	bl	8021ef8 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800cbdc:	e013      	b.n	800cc06 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800cbde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbe0:	3304      	adds	r3, #4
 800cbe2:	69ba      	ldr	r2, [r7, #24]
 800cbe4:	4413      	add	r3, r2
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fd fe60 	bl	800a8ac <ulChar2u32>
 800cbec:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800cbee:	68b9      	ldr	r1, [r7, #8]
 800cbf0:	4810      	ldr	r0, [pc, #64]	@ (800cc34 <vReceiveRA_ReadReply+0x1bc>)
 800cbf2:	f015 f981 	bl	8021ef8 <lUDPLoggingPrintf>
                   }
                   break;
 800cbf6:	e006      	b.n	800cc06 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800cbf8:	7dfb      	ldrb	r3, [r7, #23]
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	480e      	ldr	r0, [pc, #56]	@ (800cc38 <vReceiveRA_ReadReply+0x1c0>)
 800cbfe:	f015 f97b 	bl	8021ef8 <lUDPLoggingPrintf>
                    break;
 800cc02:	e000      	b.n	800cc06 <vReceiveRA_ReadReply+0x18e>
                    break;
 800cc04:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800cc06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	4413      	add	r3, r2
 800cc0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800cc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc10:	3301      	adds	r3, #1
 800cc12:	69fa      	ldr	r2, [r7, #28]
 800cc14:	429a      	cmp	r2, r3
 800cc16:	f63f af47 	bhi.w	800caa8 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800cc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3734      	adds	r7, #52	@ 0x34
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc24:	08025408 	.word	0x08025408
 800cc28:	0802543c 	.word	0x0802543c
 800cc2c:	08025460 	.word	0x08025460
 800cc30:	0802548c 	.word	0x0802548c
 800cc34:	080254b4 	.word	0x080254b4
 800cc38:	080254c4 	.word	0x080254c4

0800cc3c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800cc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc3e:	b08d      	sub	sp, #52	@ 0x34
 800cc40:	af04      	add	r7, sp, #16
 800cc42:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc48:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800cc4e:	2310      	movs	r3, #16
 800cc50:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	3336      	adds	r3, #54	@ 0x36
 800cc56:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc5c:	68fa      	ldr	r2, [r7, #12]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	d903      	bls.n	800cc6a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800cc62:	485b      	ldr	r0, [pc, #364]	@ (800cdd0 <vReceiveRA+0x194>)
 800cc64:	f015 f948 	bl	8021ef8 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800cc68:	e0ae      	b.n	800cdc8 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800cc6a:	69bb      	ldr	r3, [r7, #24]
 800cc6c:	3336      	adds	r3, #54	@ 0x36
 800cc6e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	781b      	ldrb	r3, [r3, #0]
 800cc74:	461c      	mov	r4, r3
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	785b      	ldrb	r3, [r3, #1]
 800cc7a:	461d      	mov	r5, r3
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	885b      	ldrh	r3, [r3, #2]
 800cc80:	b29b      	uxth	r3, r3
 800cc82:	021b      	lsls	r3, r3, #8
 800cc84:	b21a      	sxth	r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	885b      	ldrh	r3, [r3, #2]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	0a1b      	lsrs	r3, r3, #8
 800cc8e:	b29b      	uxth	r3, r3
 800cc90:	b21b      	sxth	r3, r3
 800cc92:	4313      	orrs	r3, r2
 800cc94:	b21b      	sxth	r3, r3
 800cc96:	b29b      	uxth	r3, r3
 800cc98:	461e      	mov	r6, r3
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	791b      	ldrb	r3, [r3, #4]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	795b      	ldrb	r3, [r3, #5]
 800cca4:	4618      	mov	r0, r3
 800cca6:	68bb      	ldr	r3, [r7, #8]
 800cca8:	88db      	ldrh	r3, [r3, #6]
 800ccaa:	b29b      	uxth	r3, r3
 800ccac:	021b      	lsls	r3, r3, #8
 800ccae:	b21a      	sxth	r2, r3
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	88db      	ldrh	r3, [r3, #6]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	0a1b      	lsrs	r3, r3, #8
 800ccb8:	b29b      	uxth	r3, r3
 800ccba:	b21b      	sxth	r3, r3
 800ccbc:	4313      	orrs	r3, r2
 800ccbe:	b21b      	sxth	r3, r3
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	9302      	str	r3, [sp, #8]
 800ccc4:	9001      	str	r0, [sp, #4]
 800ccc6:	9100      	str	r1, [sp, #0]
 800ccc8:	4633      	mov	r3, r6
 800ccca:	462a      	mov	r2, r5
 800cccc:	4621      	mov	r1, r4
 800ccce:	4841      	ldr	r0, [pc, #260]	@ (800cdd4 <vReceiveRA+0x198>)
 800ccd0:	f015 f912 	bl	8021ef8 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	88db      	ldrh	r3, [r3, #6]
 800ccd8:	b29b      	uxth	r3, r3
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d074      	beq.n	800cdc8 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff feca 	bl	800ca78 <vReceiveRA_ReadReply>
 800cce4:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d104      	bne.n	800ccf8 <vReceiveRA+0xbc>
 800ccee:	f240 118b 	movw	r1, #395	@ 0x18b
 800ccf2:	4839      	ldr	r0, [pc, #228]	@ (800cdd8 <vReceiveRA+0x19c>)
 800ccf4:	f7f4 fe20 	bl	8001938 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d064      	beq.n	800cdc8 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd02:	4618      	mov	r0, r3
 800cd04:	f000 fbd8 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800cd08:	61f8      	str	r0, [r7, #28]
 800cd0a:	e05a      	b.n	800cdc2 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cd12:	f003 0302 	and.w	r3, r3, #2
 800cd16:	b2db      	uxtb	r3, r3
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d04b      	beq.n	800cdb4 <vReceiveRA+0x178>
 800cd1c:	69fb      	ldr	r3, [r7, #28]
 800cd1e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d146      	bne.n	800cdb4 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	789b      	ldrb	r3, [r3, #2]
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	69fb      	ldr	r3, [r7, #28]
 800cd2e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800cd30:	69fb      	ldr	r3, [r7, #28]
 800cd32:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	3310      	adds	r3, #16
 800cd3a:	2210      	movs	r2, #16
 800cd3c:	4619      	mov	r1, r3
 800cd3e:	f015 faf7 	bl	8022330 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cd42:	69fb      	ldr	r3, [r7, #28]
 800cd44:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800cd48:	69bb      	ldr	r3, [r7, #24]
 800cd4a:	3316      	adds	r3, #22
 800cd4c:	2210      	movs	r2, #16
 800cd4e:	4619      	mov	r1, r3
 800cd50:	f015 faee 	bl	8022330 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800cd54:	69fa      	ldr	r2, [r7, #28]
 800cd56:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cd5a:	f043 0301 	orr.w	r3, r3, #1
 800cd5e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800cd62:	69fb      	ldr	r3, [r7, #28]
 800cd64:	2200      	movs	r2, #0
 800cd66:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800cd6a:	697b      	ldr	r3, [r7, #20]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	061a      	lsls	r2, r3, #24
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	689b      	ldr	r3, [r3, #8]
 800cd74:	021b      	lsls	r3, r3, #8
 800cd76:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd7a:	431a      	orrs	r2, r3
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	689b      	ldr	r3, [r3, #8]
 800cd80:	0a1b      	lsrs	r3, r3, #8
 800cd82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd86:	431a      	orrs	r2, r3
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	689b      	ldr	r3, [r3, #8]
 800cd8c:	0e1b      	lsrs	r3, r3, #24
 800cd8e:	431a      	orrs	r2, r3
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800cd96:	69fa      	ldr	r2, [r7, #28]
 800cd98:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800cd9c:	f043 0302 	orr.w	r3, r3, #2
 800cda0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2202      	movs	r2, #2
 800cda8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800cdac:	69f9      	ldr	r1, [r7, #28]
 800cdae:	2000      	movs	r0, #0
 800cdb0:	f000 f9b6 	bl	800d120 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdb8:	69f9      	ldr	r1, [r7, #28]
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f000 fb9e 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800cdc0:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800cdc2:	69fb      	ldr	r3, [r7, #28]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d1a1      	bne.n	800cd0c <vReceiveRA+0xd0>
    }
 800cdc8:	bf00      	nop
 800cdca:	3724      	adds	r7, #36	@ 0x24
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cdd0:	080254e8 	.word	0x080254e8
 800cdd4:	08025518 	.word	0x08025518
 800cdd8:	080253a0 	.word	0x080253a0

0800cddc <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800cddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cde0:	b088      	sub	sp, #32
 800cde2:	af00      	add	r7, sp, #0
 800cde4:	6178      	str	r0, [r7, #20]
 800cde6:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800cde8:	6939      	ldr	r1, [r7, #16]
 800cdea:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800cdec:	6979      	ldr	r1, [r7, #20]
 800cdee:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800cdf2:	2901      	cmp	r1, #1
 800cdf4:	d133      	bne.n	800ce5e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800cdfc:	1c5a      	adds	r2, r3, #1
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d804      	bhi.n	800ce18 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800ce0e:	697b      	ldr	r3, [r7, #20]
 800ce10:	2200      	movs	r2, #0
 800ce12:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800ce16:	e0bf      	b.n	800cf98 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800ce18:	4862      	ldr	r0, [pc, #392]	@ (800cfa4 <xRAProcess_HandleWaitStates+0x1c8>)
 800ce1a:	f015 f86d 	bl	8021ef8 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800ce24:	697b      	ldr	r3, [r7, #20]
 800ce26:	3390      	adds	r3, #144	@ 0x90
 800ce28:	2258      	movs	r2, #88	@ 0x58
 800ce2a:	4619      	mov	r1, r3
 800ce2c:	f015 fa80 	bl	8022330 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800ce30:	697a      	ldr	r2, [r7, #20]
 800ce32:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800ce36:	f36f 0300 	bfc	r3, #0, #1
 800ce3a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800ce46:	697a      	ldr	r2, [r7, #20]
 800ce48:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800ce4c:	f043 0302 	orr.w	r3, r3, #2
 800ce50:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	2202      	movs	r2, #2
 800ce58:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800ce5c:	e09c      	b.n	800cf98 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800ce5e:	6979      	ldr	r1, [r7, #20]
 800ce60:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800ce64:	2903      	cmp	r1, #3
 800ce66:	f040 8097 	bne.w	800cf98 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800ce6a:	6979      	ldr	r1, [r7, #20]
 800ce6c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800ce70:	f001 0102 	and.w	r1, r1, #2
 800ce74:	b2c9      	uxtb	r1, r1
 800ce76:	2900      	cmp	r1, #0
 800ce78:	d00b      	beq.n	800ce92 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	2200      	movs	r2, #0
 800ce7e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800ce82:	697b      	ldr	r3, [r7, #20]
 800ce84:	2202      	movs	r2, #2
 800ce86:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800ce8a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800ce8e:	61fb      	str	r3, [r7, #28]
 800ce90:	e082      	b.n	800cf98 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800ce92:	6979      	ldr	r1, [r7, #20]
 800ce94:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800ce98:	2902      	cmp	r1, #2
 800ce9a:	d80e      	bhi.n	800ceba <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800ce9c:	697b      	ldr	r3, [r7, #20]
 800ce9e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800cea2:	1c5a      	adds	r2, r3, #1
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	2202      	movs	r2, #2
 800ceae:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800ceb2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800ceb6:	61fb      	str	r3, [r7, #28]
 800ceb8:	e06e      	b.n	800cf98 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800ceba:	6979      	ldr	r1, [r7, #20]
 800cebc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800cec0:	f001 0101 	and.w	r1, r1, #1
 800cec4:	b2c9      	uxtb	r1, r1
 800cec6:	2900      	cmp	r1, #0
 800cec8:	d057      	beq.n	800cf7a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800ceca:	6979      	ldr	r1, [r7, #20]
 800cecc:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800ced0:	2000      	movs	r0, #0
 800ced2:	4688      	mov	r8, r1
 800ced4:	4681      	mov	r9, r0
 800ced6:	4640      	mov	r0, r8
 800ced8:	4649      	mov	r1, r9
 800ceda:	f04f 0a00 	mov.w	sl, #0
 800cede:	f04f 0b00 	mov.w	fp, #0
 800cee2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800cee6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800ceea:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800ceee:	4650      	mov	r0, sl
 800cef0:	4659      	mov	r1, fp
 800cef2:	ebb0 0208 	subs.w	r2, r0, r8
 800cef6:	eb61 0309 	sbc.w	r3, r1, r9
 800cefa:	f04f 0000 	mov.w	r0, #0
 800cefe:	f04f 0100 	mov.w	r1, #0
 800cf02:	0259      	lsls	r1, r3, #9
 800cf04:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800cf08:	0250      	lsls	r0, r2, #9
 800cf0a:	4602      	mov	r2, r0
 800cf0c:	460b      	mov	r3, r1
 800cf0e:	eb12 0408 	adds.w	r4, r2, r8
 800cf12:	eb43 0509 	adc.w	r5, r3, r9
 800cf16:	f04f 0200 	mov.w	r2, #0
 800cf1a:	f04f 0300 	mov.w	r3, #0
 800cf1e:	01ab      	lsls	r3, r5, #6
 800cf20:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800cf24:	01a2      	lsls	r2, r4, #6
 800cf26:	1b11      	subs	r1, r2, r4
 800cf28:	6039      	str	r1, [r7, #0]
 800cf2a:	eb63 0305 	sbc.w	r3, r3, r5
 800cf2e:	607b      	str	r3, [r7, #4]
 800cf30:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cf34:	460b      	mov	r3, r1
 800cf36:	eb13 0308 	adds.w	r3, r3, r8
 800cf3a:	60bb      	str	r3, [r7, #8]
 800cf3c:	4613      	mov	r3, r2
 800cf3e:	eb43 0309 	adc.w	r3, r3, r9
 800cf42:	60fb      	str	r3, [r7, #12]
 800cf44:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800cf48:	f04f 0300 	mov.w	r3, #0
 800cf4c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800cf50:	f7f3 fa2e 	bl	80003b0 <__aeabi_uldivmod>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4613      	mov	r3, r2
 800cf5a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	2204      	movs	r2, #4
 800cf60:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800cf70:	461a      	mov	r2, r3
 800cf72:	480d      	ldr	r0, [pc, #52]	@ (800cfa8 <xRAProcess_HandleWaitStates+0x1cc>)
 800cf74:	f014 ffc0 	bl	8021ef8 <lUDPLoggingPrintf>
 800cf78:	e00b      	b.n	800cf92 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800cf7a:	697b      	ldr	r3, [r7, #20]
 800cf7c:	2206      	movs	r2, #6
 800cf7e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	3338      	adds	r3, #56	@ 0x38
 800cf86:	4619      	mov	r1, r3
 800cf88:	4808      	ldr	r0, [pc, #32]	@ (800cfac <xRAProcess_HandleWaitStates+0x1d0>)
 800cf8a:	f014 ffb5 	bl	8021ef8 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800cf8e:	2300      	movs	r3, #0
 800cf90:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800cf92:	6978      	ldr	r0, [r7, #20]
 800cf94:	f7fc fa08 	bl	80093a8 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800cf98:	69fb      	ldr	r3, [r7, #28]
    }
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	3720      	adds	r7, #32
 800cf9e:	46bd      	mov	sp, r7
 800cfa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cfa4:	0802555c 	.word	0x0802555c
 800cfa8:	08025584 	.word	0x08025584
 800cfac:	080255c4 	.word	0x080255c4

0800cfb0 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b08c      	sub	sp, #48	@ 0x30
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800cfc4:	2b06      	cmp	r3, #6
 800cfc6:	f200 808c 	bhi.w	800d0e2 <xRAProcess_HandleOtherStates+0x132>
 800cfca:	a201      	add	r2, pc, #4	@ (adr r2, 800cfd0 <xRAProcess_HandleOtherStates+0x20>)
 800cfcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd0:	0800cfed 	.word	0x0800cfed
 800cfd4:	0800d0e3 	.word	0x0800d0e3
 800cfd8:	0800d04f 	.word	0x0800d04f
 800cfdc:	0800d0e3 	.word	0x0800d0e3
 800cfe0:	0800d0cb 	.word	0x0800d0cb
 800cfe4:	0800d0d5 	.word	0x0800d0d5
 800cfe8:	0800d0e3 	.word	0x0800d0e3
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800cfec:	f107 030c 	add.w	r3, r7, #12
 800cff0:	2210      	movs	r2, #16
 800cff2:	2100      	movs	r1, #0
 800cff4:	4618      	mov	r0, r3
 800cff6:	f015 faa8 	bl	802254a <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800cffa:	23ff      	movs	r3, #255	@ 0xff
 800cffc:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800cffe:	2302      	movs	r3, #2
 800d000:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800d002:	2302      	movs	r3, #2
 800d004:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800d006:	233e      	movs	r3, #62	@ 0x3e
 800d008:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d00a:	2100      	movs	r1, #0
 800d00c:	6a38      	ldr	r0, [r7, #32]
 800d00e:	f00a f863 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 800d012:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800d014:	69fb      	ldr	r3, [r7, #28]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d008      	beq.n	800d02c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d01a:	69fb      	ldr	r3, [r7, #28]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800d020:	f107 030c 	add.w	r3, r7, #12
 800d024:	4619      	mov	r1, r3
 800d026:	69f8      	ldr	r0, [r7, #28]
 800d028:	f7ff fc24 	bl	800c874 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800d032:	3301      	adds	r3, #1
 800d034:	2203      	movs	r2, #3
 800d036:	4619      	mov	r1, r3
 800d038:	482d      	ldr	r0, [pc, #180]	@ (800d0f0 <xRAProcess_HandleOtherStates+0x140>)
 800d03a:	f014 ff5d 	bl	8021ef8 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800d03e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800d042:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d04c:	e04a      	b.n	800d0e4 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d054:	f003 0302 	and.w	r3, r3, #2
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d014      	beq.n	800d088 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800d064:	f36f 0341 	bfc	r3, #1, #1
 800d068:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d07c:	2301      	movs	r3, #1
 800d07e:	f7ff fb2b 	bl	800c6d8 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800d082:	481c      	ldr	r0, [pc, #112]	@ (800d0f4 <xRAProcess_HandleOtherStates+0x144>)
 800d084:	f014 ff38 	bl	8021ef8 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	3338      	adds	r3, #56	@ 0x38
 800d08c:	4619      	mov	r1, r3
 800d08e:	481a      	ldr	r0, [pc, #104]	@ (800d0f8 <xRAProcess_HandleOtherStates+0x148>)
 800d090:	f014 ff32 	bl	8021ef8 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800d094:	2356      	movs	r3, #86	@ 0x56
 800d096:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800d098:	2100      	movs	r1, #0
 800d09a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d09c:	f00a f81c 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 800d0a0:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800d0a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d008      	beq.n	800d0ba <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800d0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	3338      	adds	r3, #56	@ 0x38
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d0b6:	f7fe ff25 	bl	800bf04 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d0ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d0be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2203      	movs	r2, #3
 800d0c4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800d0c8:	e00c      	b.n	800d0e4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	2205      	movs	r2, #5
 800d0ce:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800d0d2:	e007      	b.n	800d0e4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f811 	bl	800d0fc <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800d0da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800d0de:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800d0e0:	e000      	b.n	800d0e4 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800d0e2:	bf00      	nop
        }

        return uxNewReloadTime;
 800d0e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3730      	adds	r7, #48	@ 0x30
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}
 800d0ee:	bf00      	nop
 800d0f0:	08025600 	.word	0x08025600
 800d0f4:	08025634 	.word	0x08025634
 800d0f8:	08025658 	.word	0x08025658

0800d0fc <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800d0fc:	b480      	push	{r7}
 800d0fe:	b083      	sub	sp, #12
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2200      	movs	r2, #0
 800d110:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800d120:	b590      	push	{r4, r7, lr}
 800d122:	b089      	sub	sp, #36	@ 0x24
 800d124:	af04      	add	r7, sp, #16
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800d12a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d12e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d104      	bne.n	800d140 <vRAProcess+0x20>
 800d136:	f240 2189 	movw	r1, #649	@ 0x289
 800d13a:	4828      	ldr	r0, [pc, #160]	@ (800d1dc <vRAProcess+0xbc>)
 800d13c:	f7f4 fbfc 	bl	8001938 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800d140:	683b      	ldr	r3, [r7, #0]
 800d142:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800d146:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d002      	beq.n	800d154 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800d14e:	6838      	ldr	r0, [r7, #0]
 800d150:	f7ff ffd4 	bl	800d0fc <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800d154:	68f9      	ldr	r1, [r7, #12]
 800d156:	6838      	ldr	r0, [r7, #0]
 800d158:	f7ff fe40 	bl	800cddc <xRAProcess_HandleWaitStates>
 800d15c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800d15e:	68f9      	ldr	r1, [r7, #12]
 800d160:	6838      	ldr	r0, [r7, #0]
 800d162:	f7ff ff25 	bl	800cfb0 <xRAProcess_HandleOtherStates>
 800d166:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d174:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	461c      	mov	r4, r3
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800d182:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800d186:	b2db      	uxtb	r3, r3
 800d188:	4618      	mov	r0, r3
 800d18a:	7afb      	ldrb	r3, [r7, #11]
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800d192:	9202      	str	r2, [sp, #8]
 800d194:	9301      	str	r3, [sp, #4]
 800d196:	9000      	str	r0, [sp, #0]
 800d198:	4623      	mov	r3, r4
 800d19a:	460a      	mov	r2, r1
 800d19c:	6879      	ldr	r1, [r7, #4]
 800d19e:	4810      	ldr	r0, [pc, #64]	@ (800d1e0 <vRAProcess+0xc0>)
 800d1a0:	f014 feaa 	bl	8021ef8 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d00d      	beq.n	800d1c6 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	4a0d      	ldr	r2, [pc, #52]	@ (800d1e4 <vRAProcess+0xc4>)
 800d1ae:	fba2 2303 	umull	r2, r3, r2, r3
 800d1b2:	099b      	lsrs	r3, r3, #6
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	480c      	ldr	r0, [pc, #48]	@ (800d1e8 <vRAProcess+0xc8>)
 800d1b8:	f014 fe9e 	bl	8021ef8 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800d1bc:	68f9      	ldr	r1, [r7, #12]
 800d1be:	6838      	ldr	r0, [r7, #0]
 800d1c0:	f7fc ff8a 	bl	800a0d8 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800d1c4:	e006      	b.n	800d1d4 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800d1c6:	4809      	ldr	r0, [pc, #36]	@ (800d1ec <vRAProcess+0xcc>)
 800d1c8:	f014 fe96 	bl	8021ef8 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800d1cc:	2100      	movs	r1, #0
 800d1ce:	6838      	ldr	r0, [r7, #0]
 800d1d0:	f7fd f836 	bl	800a240 <vIPSetDHCP_RATimerEnableState>
    }
 800d1d4:	bf00      	nop
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd90      	pop	{r4, r7, pc}
 800d1dc:	080253a0 	.word	0x080253a0
 800d1e0:	08025680 	.word	0x08025680
 800d1e4:	10624dd3 	.word	0x10624dd3
 800d1e8:	080256cc 	.word	0x080256cc
 800d1ec:	080256e4 	.word	0x080256e4

0800d1f0 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b086      	sub	sp, #24
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d002      	beq.n	800d20a <FreeRTOS_FillEndPoint+0x1a>
 800d204:	68bb      	ldr	r3, [r7, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d105      	bne.n	800d216 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	68f9      	ldr	r1, [r7, #12]
 800d20e:	483f      	ldr	r0, [pc, #252]	@ (800d30c <FreeRTOS_FillEndPoint+0x11c>)
 800d210:	f014 fe72 	bl	8021ef8 <lUDPLoggingPrintf>
 800d214:	e075      	b.n	800d302 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d21c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800d21e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800d222:	2100      	movs	r1, #0
 800d224:	68b8      	ldr	r0, [r7, #8]
 800d226:	f015 f990 	bl	802254a <memset>
            pxEndPoint->pxNext = pxNext;
 800d22a:	68bb      	ldr	r3, [r7, #8]
 800d22c:	697a      	ldr	r2, [r7, #20]
 800d22e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	3303      	adds	r3, #3
 800d236:	781b      	ldrb	r3, [r3, #0]
 800d238:	061a      	lsls	r2, r3, #24
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3302      	adds	r3, #2
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	041b      	lsls	r3, r3, #16
 800d242:	431a      	orrs	r2, r3
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	3301      	adds	r3, #1
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	021b      	lsls	r3, r3, #8
 800d24c:	4313      	orrs	r3, r2
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	7812      	ldrb	r2, [r2, #0]
 800d252:	4313      	orrs	r3, r2
 800d254:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	3303      	adds	r3, #3
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	061a      	lsls	r2, r3, #24
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	3302      	adds	r3, #2
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	041b      	lsls	r3, r3, #16
 800d266:	431a      	orrs	r2, r3
 800d268:	683b      	ldr	r3, [r7, #0]
 800d26a:	3301      	adds	r3, #1
 800d26c:	781b      	ldrb	r3, [r3, #0]
 800d26e:	021b      	lsls	r3, r3, #8
 800d270:	4313      	orrs	r3, r2
 800d272:	683a      	ldr	r2, [r7, #0]
 800d274:	7812      	ldrb	r2, [r2, #0]
 800d276:	431a      	orrs	r2, r3
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	3303      	adds	r3, #3
 800d280:	781b      	ldrb	r3, [r3, #0]
 800d282:	061a      	lsls	r2, r3, #24
 800d284:	6a3b      	ldr	r3, [r7, #32]
 800d286:	3302      	adds	r3, #2
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	041b      	lsls	r3, r3, #16
 800d28c:	431a      	orrs	r2, r3
 800d28e:	6a3b      	ldr	r3, [r7, #32]
 800d290:	3301      	adds	r3, #1
 800d292:	781b      	ldrb	r3, [r3, #0]
 800d294:	021b      	lsls	r3, r3, #8
 800d296:	4313      	orrs	r3, r2
 800d298:	6a3a      	ldr	r2, [r7, #32]
 800d29a:	7812      	ldrb	r2, [r2, #0]
 800d29c:	431a      	orrs	r2, r3
 800d29e:	68bb      	ldr	r3, [r7, #8]
 800d2a0:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800d2a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2a4:	3303      	adds	r3, #3
 800d2a6:	781b      	ldrb	r3, [r3, #0]
 800d2a8:	061a      	lsls	r2, r3, #24
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ac:	3302      	adds	r3, #2
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	041b      	lsls	r3, r3, #16
 800d2b2:	431a      	orrs	r2, r3
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	781b      	ldrb	r3, [r3, #0]
 800d2ba:	021b      	lsls	r3, r3, #8
 800d2bc:	4313      	orrs	r3, r2
 800d2be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2c0:	7812      	ldrb	r2, [r2, #0]
 800d2c2:	431a      	orrs	r2, r3
 800d2c4:	68bb      	ldr	r3, [r7, #8]
 800d2c6:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800d2c8:	68bb      	ldr	r3, [r7, #8]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	43da      	mvns	r2, r3
 800d2ce:	693b      	ldr	r3, [r7, #16]
 800d2d0:	431a      	orrs	r2, r3
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	331c      	adds	r3, #28
 800d2da:	68b9      	ldr	r1, [r7, #8]
 800d2dc:	221c      	movs	r2, #28
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f015 f826 	bl	8022330 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	693a      	ldr	r2, [r7, #16]
 800d2e8:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	33e8      	adds	r3, #232	@ 0xe8
 800d2ee:	2206      	movs	r2, #6
 800d2f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f015 f81c 	bl	8022330 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800d2f8:	68b9      	ldr	r1, [r7, #8]
 800d2fa:	68f8      	ldr	r0, [r7, #12]
 800d2fc:	f000 f85c 	bl	800d3b8 <FreeRTOS_AddEndPoint>
        }
    }
 800d300:	bf00      	nop
 800d302:	bf00      	nop
 800d304:	3718      	adds	r7, #24
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
 800d30a:	bf00      	nop
 800d30c:	080256fc 	.word	0x080256fc

0800d310 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800d310:	b480      	push	{r7}
 800d312:	b085      	sub	sp, #20
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800d318:	2300      	movs	r3, #0
 800d31a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d021      	beq.n	800d366 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800d322:	4b14      	ldr	r3, [pc, #80]	@ (800d374 <FreeRTOS_AddNetworkInterface+0x64>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d106      	bne.n	800d338 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800d32a:	4a12      	ldr	r2, [pc, #72]	@ (800d374 <FreeRTOS_AddNetworkInterface+0x64>)
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	625a      	str	r2, [r3, #36]	@ 0x24
 800d336:	e016      	b.n	800d366 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800d338:	4b0e      	ldr	r3, [pc, #56]	@ (800d374 <FreeRTOS_AddNetworkInterface+0x64>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	429a      	cmp	r2, r3
 800d344:	d00e      	beq.n	800d364 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d106      	bne.n	800d35c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	687a      	ldr	r2, [r7, #4]
 800d352:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800d35a:	e004      	b.n	800d366 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d360:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800d362:	e7ec      	b.n	800d33e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800d364:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800d366:	687b      	ldr	r3, [r7, #4]
    }
 800d368:	4618      	mov	r0, r3
 800d36a:	3714      	adds	r7, #20
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	200014a4 	.word	0x200014a4

0800d378 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800d378:	b480      	push	{r7}
 800d37a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800d37c:	4b03      	ldr	r3, [pc, #12]	@ (800d38c <FreeRTOS_FirstNetworkInterface+0x14>)
 800d37e:	681b      	ldr	r3, [r3, #0]
    }
 800d380:	4618      	mov	r0, r3
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	200014a4 	.word	0x200014a4

0800d390 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d003      	beq.n	800d3a6 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a2:	60fb      	str	r3, [r7, #12]
 800d3a4:	e001      	b.n	800d3aa <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
    }
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3714      	adds	r7, #20
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr

0800d3b8 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b084      	sub	sp, #16
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
 800d3c0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	687a      	ldr	r2, [r7, #4]
 800d3ca:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6a1b      	ldr	r3, [r3, #32]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d102      	bne.n	800d3dc <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	683a      	ldr	r2, [r7, #0]
 800d3da:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800d3dc:	4b33      	ldr	r3, [pc, #204]	@ (800d4ac <FreeRTOS_AddEndPoint+0xf4>)
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d107      	bne.n	800d3f4 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800d3ec:	4a2f      	ldr	r2, [pc, #188]	@ (800d4ac <FreeRTOS_AddEndPoint+0xf4>)
 800d3ee:	683b      	ldr	r3, [r7, #0]
 800d3f0:	6013      	str	r3, [r2, #0]
 800d3f2:	e01a      	b.n	800d42a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800d3f4:	4b2d      	ldr	r3, [pc, #180]	@ (800d4ac <FreeRTOS_AddEndPoint+0xf4>)
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800d3fa:	68fa      	ldr	r2, [r7, #12]
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	429a      	cmp	r2, r3
 800d400:	d012      	beq.n	800d428 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d108      	bne.n	800d41e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	2200      	movs	r2, #0
 800d410:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800d41c:	e005      	b.n	800d42a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d424:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800d426:	e7e8      	b.n	800d3fa <FreeRTOS_AddEndPoint+0x42>
                    break;
 800d428:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d430:	f003 0304 	and.w	r3, r3, #4
 800d434:	b2db      	uxtb	r3, r3
 800d436:	2b00      	cmp	r3, #0
 800d438:	d00c      	beq.n	800d454 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d440:	4619      	mov	r1, r3
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d448:	461a      	mov	r2, r3
 800d44a:	683b      	ldr	r3, [r7, #0]
 800d44c:	3390      	adds	r3, #144	@ 0x90
 800d44e:	4818      	ldr	r0, [pc, #96]	@ (800d4b0 <FreeRTOS_AddEndPoint+0xf8>)
 800d450:	f014 fd52 	bl	8021ef8 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d45a:	f003 0304 	and.w	r3, r3, #4
 800d45e:	b2db      	uxtb	r3, r3
 800d460:	2b00      	cmp	r3, #0
 800d462:	d11e      	bne.n	800d4a2 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800d46a:	4619      	mov	r1, r3
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800d472:	4618      	mov	r0, r3
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	69db      	ldr	r3, [r3, #28]
 800d478:	061a      	lsls	r2, r3, #24
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	69db      	ldr	r3, [r3, #28]
 800d47e:	021b      	lsls	r3, r3, #8
 800d480:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d484:	431a      	orrs	r2, r3
 800d486:	683b      	ldr	r3, [r7, #0]
 800d488:	69db      	ldr	r3, [r3, #28]
 800d48a:	0a1b      	lsrs	r3, r3, #8
 800d48c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d490:	431a      	orrs	r2, r3
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	69db      	ldr	r3, [r3, #28]
 800d496:	0e1b      	lsrs	r3, r3, #24
 800d498:	4313      	orrs	r3, r2
 800d49a:	4602      	mov	r2, r0
 800d49c:	4805      	ldr	r0, [pc, #20]	@ (800d4b4 <FreeRTOS_AddEndPoint+0xfc>)
 800d49e:	f014 fd2b 	bl	8021ef8 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800d4a2:	683b      	ldr	r3, [r7, #0]
    }
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	200014a0 	.word	0x200014a0
 800d4b0:	0802573c 	.word	0x0802573c
 800d4b4:	08025770 	.word	0x08025770

0800d4b8 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800d4b8:	b480      	push	{r7}
 800d4ba:	b085      	sub	sp, #20
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d4c0:	4b0d      	ldr	r3, [pc, #52]	@ (800d4f8 <FreeRTOS_FirstEndPoint+0x40>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800d4c6:	e00c      	b.n	800d4e2 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d00c      	beq.n	800d4e8 <FreeRTOS_FirstEndPoint+0x30>
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d006      	beq.n	800d4e8 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d4e0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d1ef      	bne.n	800d4c8 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
    }
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3714      	adds	r7, #20
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr
 800d4f6:	bf00      	nop
 800d4f8:	200014a0 	.word	0x200014a0

0800d4fc <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b084      	sub	sp, #16
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
 800d504:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d015      	beq.n	800d53c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d516:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800d518:	e00c      	b.n	800d534 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d011      	beq.n	800d544 <FreeRTOS_NextEndPoint+0x48>
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d526:	687a      	ldr	r2, [r7, #4]
 800d528:	429a      	cmp	r2, r3
 800d52a:	d00b      	beq.n	800d544 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d532:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d1ef      	bne.n	800d51a <FreeRTOS_NextEndPoint+0x1e>
 800d53a:	e003      	b.n	800d544 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800d53c:	6878      	ldr	r0, [r7, #4]
 800d53e:	f7ff ffbb 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800d542:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800d544:	68fb      	ldr	r3, [r7, #12]
    }
 800d546:	4618      	mov	r0, r3
 800d548:	3710      	adds	r7, #16
 800d54a:	46bd      	mov	sp, r7
 800d54c:	bd80      	pop	{r7, pc}
	...

0800d550 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d550:	b480      	push	{r7}
 800d552:	b085      	sub	sp, #20
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
 800d558:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d55a:	4b1e      	ldr	r3, [pc, #120]	@ (800d5d4 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800d560:	2308      	movs	r3, #8
 800d562:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800d564:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3301      	adds	r3, #1
 800d56a:	4a1b      	ldr	r2, [pc, #108]	@ (800d5d8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d56c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800d56e:	683a      	ldr	r2, [r7, #0]
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	429a      	cmp	r2, r3
 800d574:	d223      	bcs.n	800d5be <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800d576:	4a18      	ldr	r2, [pc, #96]	@ (800d5d8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	3312      	adds	r3, #18
 800d57c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d580:	1c5a      	adds	r2, r3, #1
 800d582:	4915      	ldr	r1, [pc, #84]	@ (800d5d8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	3312      	adds	r3, #18
 800d588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800d58c:	e017      	b.n	800d5be <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d594:	f003 0304 	and.w	r3, r3, #4
 800d598:	b2db      	uxtb	r3, r3
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10b      	bne.n	800d5b6 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00f      	beq.n	800d5c4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d00b      	beq.n	800d5c4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	429a      	cmp	r2, r3
 800d5b4:	d006      	beq.n	800d5c4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d5bc:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d1e4      	bne.n	800d58e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
    }
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3714      	adds	r7, #20
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr
 800d5d2:	bf00      	nop
 800d5d4:	200014a0 	.word	0x200014a0
 800d5d8:	200014a8 	.word	0x200014a8

0800d5dc <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800d5e4:	6879      	ldr	r1, [r7, #4]
 800d5e6:	2000      	movs	r0, #0
 800d5e8:	f000 f8b6 	bl	800d758 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800d5ec:	4603      	mov	r3, r0
        }
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	3708      	adds	r7, #8
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	bd80      	pop	{r7, pc}
	...

0800d5f8 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
 800d600:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d602:	4b17      	ldr	r3, [pc, #92]	@ (800d660 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800d608:	4b16      	ldr	r3, [pc, #88]	@ (800d664 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	3301      	adds	r3, #1
 800d60e:	4a15      	ldr	r2, [pc, #84]	@ (800d664 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800d610:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d119      	bne.n	800d64c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800d618:	2300      	movs	r3, #0
 800d61a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800d61c:	e016      	b.n	800d64c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d005      	beq.n	800d630 <FreeRTOS_FindEndPointOnMAC+0x38>
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d62a:	683a      	ldr	r2, [r7, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d109      	bne.n	800d644 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	33e8      	adds	r3, #232	@ 0xe8
 800d634:	6879      	ldr	r1, [r7, #4]
 800d636:	2206      	movs	r2, #6
 800d638:	4618      	mov	r0, r3
 800d63a:	f015 fe0e 	bl	802325a <memcmp>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	d007      	beq.n	800d654 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d64a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d1e5      	bne.n	800d61e <FreeRTOS_FindEndPointOnMAC+0x26>
 800d652:	e000      	b.n	800d656 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800d654:	bf00      	nop
        }

        return pxEndPoint;
 800d656:	68fb      	ldr	r3, [r7, #12]
    }
 800d658:	4618      	mov	r0, r3
 800d65a:	3710      	adds	r7, #16
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	200014a0 	.word	0x200014a0
 800d664:	200014a8 	.word	0x200014a8

0800d668 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800d672:	683a      	ldr	r2, [r7, #0]
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	2000      	movs	r0, #0
 800d678:	f000 f806 	bl	800d688 <FreeRTOS_InterfaceEndPointOnNetMask>
 800d67c:	4603      	mov	r3, r0
    }
 800d67e:	4618      	mov	r0, r3
 800d680:	3708      	adds	r7, #8
 800d682:	46bd      	mov	sp, r7
 800d684:	bd80      	pop	{r7, pc}
	...

0800d688 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800d688:	b580      	push	{r7, lr}
 800d68a:	b086      	sub	sp, #24
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d694:	4b2d      	ldr	r3, [pc, #180]	@ (800d74c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800d69a:	230e      	movs	r3, #14
 800d69c:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800d69e:	4b2c      	ldr	r3, [pc, #176]	@ (800d750 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d6a0:	689b      	ldr	r3, [r3, #8]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	4a2a      	ldr	r2, [pc, #168]	@ (800d750 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d6a6:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800d6a8:	687a      	ldr	r2, [r7, #4]
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d22d      	bcs.n	800d70c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800d6b0:	4a27      	ldr	r2, [pc, #156]	@ (800d750 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6ba:	1c5a      	adds	r2, r3, #1
 800d6bc:	4924      	ldr	r1, [pc, #144]	@ (800d750 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	3304      	adds	r3, #4
 800d6c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800d6c6:	e021      	b.n	800d70c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d005      	beq.n	800d6da <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d6d4:	68fa      	ldr	r2, [r7, #12]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d114      	bne.n	800d704 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800d6da:	697b      	ldr	r3, [r7, #20]
 800d6dc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d6e0:	f003 0304 	and.w	r3, r3, #4
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d10c      	bne.n	800d704 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f0:	d00f      	beq.n	800d712 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	405a      	eors	r2, r3
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	685b      	ldr	r3, [r3, #4]
 800d6fe:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800d700:	2b00      	cmp	r3, #0
 800d702:	d006      	beq.n	800d712 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d70a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d1da      	bne.n	800d6c8 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800d712:	697b      	ldr	r3, [r7, #20]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d113      	bne.n	800d740 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	061a      	lsls	r2, r3, #24
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	021b      	lsls	r3, r3, #8
 800d720:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d724:	431a      	orrs	r2, r3
 800d726:	68bb      	ldr	r3, [r7, #8]
 800d728:	0a1b      	lsrs	r3, r3, #8
 800d72a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d72e:	431a      	orrs	r2, r3
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	0e1b      	lsrs	r3, r3, #24
 800d734:	4313      	orrs	r3, r2
 800d736:	461a      	mov	r2, r3
 800d738:	6879      	ldr	r1, [r7, #4]
 800d73a:	4806      	ldr	r0, [pc, #24]	@ (800d754 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800d73c:	f014 fbdc 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800d740:	697b      	ldr	r3, [r7, #20]
    }
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	200014a0 	.word	0x200014a0
 800d750:	200014a8 	.word	0x200014a8
 800d754:	080257a4 	.word	0x080257a4

0800d758 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d762:	4b17      	ldr	r3, [pc, #92]	@ (800d7c0 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800d768:	e020      	b.n	800d7ac <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d005      	beq.n	800d77c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	429a      	cmp	r2, r3
 800d77a:	d113      	bne.n	800d7a4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d782:	f003 0304 	and.w	r3, r3, #4
 800d786:	b2db      	uxtb	r3, r3
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d00b      	beq.n	800d7a4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d796:	461a      	mov	r2, r3
 800d798:	6839      	ldr	r1, [r7, #0]
 800d79a:	f7fd fc0b 	bl	800afb4 <xCompareIPv6_Address>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d007      	beq.n	800d7b4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d7aa:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d1db      	bne.n	800d76a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800d7b2:	e000      	b.n	800d7b6 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800d7b4:	bf00      	nop
            }

            return pxEndPoint;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
        }
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3710      	adds	r7, #16
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	200014a0 	.word	0x200014a0

0800d7c4 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800d7c4:	b5b0      	push	{r4, r5, r7, lr}
 800d7c6:	b0b0      	sub	sp, #192	@ 0xc0
 800d7c8:	af04      	add	r7, sp, #16
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	607a      	str	r2, [r7, #4]
 800d7ce:	603b      	str	r3, [r7, #0]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800d7da:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
 800d7e2:	605a      	str	r2, [r3, #4]
 800d7e4:	609a      	str	r2, [r3, #8]
 800d7e6:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800d7e8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	601a      	str	r2, [r3, #0]
 800d7f0:	605a      	str	r2, [r3, #4]
 800d7f2:	609a      	str	r2, [r3, #8]
 800d7f4:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800d7f6:	897b      	ldrh	r3, [r7, #10]
 800d7f8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d101      	bne.n	800d804 <pxEasyFit+0x40>
 800d800:	2301      	movs	r3, #1
 800d802:	e000      	b.n	800d806 <pxEasyFit+0x42>
 800d804:	2300      	movs	r3, #0
 800d806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800d80a:	2300      	movs	r3, #0
 800d80c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800d810:	2300      	movs	r3, #0
 800d812:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800d816:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d123      	bne.n	800d866 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	2210      	movs	r2, #16
 800d822:	4619      	mov	r1, r3
 800d824:	4888      	ldr	r0, [pc, #544]	@ (800da48 <pxEasyFit+0x284>)
 800d826:	f015 fd18 	bl	802325a <memcmp>
 800d82a:	4603      	mov	r3, r0
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d101      	bne.n	800d834 <pxEasyFit+0x70>
 800d830:	2301      	movs	r3, #1
 800d832:	e000      	b.n	800d836 <pxEasyFit+0x72>
 800d834:	2300      	movs	r3, #0
 800d836:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800d83a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800d83e:	2b01      	cmp	r3, #1
 800d840:	d105      	bne.n	800d84e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	683a      	ldr	r2, [r7, #0]
 800d846:	4619      	mov	r1, r3
 800d848:	4880      	ldr	r0, [pc, #512]	@ (800da4c <pxEasyFit+0x288>)
 800d84a:	f014 fb55 	bl	8021ef8 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	4618      	mov	r0, r3
 800d852:	f000 fa15 	bl	800dc80 <xIPv6_GetIPType>
 800d856:	4603      	mov	r3, r0
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d101      	bne.n	800d860 <pxEasyFit+0x9c>
 800d85c:	2301      	movs	r3, #1
 800d85e:	e000      	b.n	800d862 <pxEasyFit+0x9e>
 800d860:	2300      	movs	r3, #0
 800d862:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f7ff fe26 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 800d86c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800d870:	e07d      	b.n	800d96e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800d872:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d876:	33e8      	adds	r3, #232	@ 0xe8
 800d878:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800d87c:	2206      	movs	r2, #6
 800d87e:	4618      	mov	r0, r3
 800d880:	f015 fceb 	bl	802325a <memcmp>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <pxEasyFit+0xca>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e000      	b.n	800d890 <pxEasyFit+0xcc>
 800d88e:	2300      	movs	r3, #0
 800d890:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800d894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d898:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d89c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d8a0:	b2db      	uxtb	r3, r3
 800d8a2:	461a      	mov	r2, r3
 800d8a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d159      	bne.n	800d960 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800d8ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800d8b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d8b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d134      	bne.n	800d92a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800d8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8c4:	3338      	adds	r3, #56	@ 0x38
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f000 f9da 	bl	800dc80 <xIPv6_GetIPType>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800d8d2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d8d6:	2b05      	cmp	r3, #5
 800d8d8:	d035      	beq.n	800d946 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800d8da:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d101      	bne.n	800d8e6 <pxEasyFit+0x122>
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	e000      	b.n	800d8e8 <pxEasyFit+0x124>
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800d8ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d8f0:	3338      	adds	r3, #56	@ 0x38
 800d8f2:	6839      	ldr	r1, [r7, #0]
 800d8f4:	2210      	movs	r2, #16
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	f015 fcaf 	bl	802325a <memcmp>
 800d8fc:	4603      	mov	r3, r0
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d106      	bne.n	800d910 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d902:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d906:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800d908:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d90a:	3301      	adds	r3, #1
 800d90c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800d90e:	e01a      	b.n	800d946 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800d910:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800d914:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800d918:	429a      	cmp	r2, r3
 800d91a:	d114      	bne.n	800d946 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800d91c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d920:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800d922:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d924:	3301      	adds	r3, #1
 800d926:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800d928:	e00d      	b.n	800d946 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800d92a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d92e:	681a      	ldr	r2, [r3, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	429a      	cmp	r2, r3
 800d936:	d108      	bne.n	800d94a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800d938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d93c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800d93e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d940:	3301      	adds	r3, #1
 800d942:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800d944:	e001      	b.n	800d94a <pxEasyFit+0x186>
                           break;
 800d946:	bf00      	nop
 800d948:	e000      	b.n	800d94c <pxEasyFit+0x188>
                        break;
 800d94a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800d94c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800d950:	2b01      	cmp	r3, #1
 800d952:	d105      	bne.n	800d960 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800d954:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d956:	3301      	adds	r3, #1
 800d958:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800d95a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d95e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800d960:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800d964:	68f8      	ldr	r0, [r7, #12]
 800d966:	f7ff fdc9 	bl	800d4fc <FreeRTOS_NextEndPoint>
 800d96a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800d96e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800d972:	2b00      	cmp	r3, #0
 800d974:	f47f af7d 	bne.w	800d872 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d978:	2300      	movs	r3, #0
 800d97a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d97e:	e017      	b.n	800d9b0 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800d980:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	33b0      	adds	r3, #176	@ 0xb0
 800d988:	443b      	add	r3, r7
 800d98a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	dd09      	ble.n	800d9a6 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800d992:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	33b0      	adds	r3, #176	@ 0xb0
 800d99a:	443b      	add	r3, r7
 800d99c:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800d9a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800d9a4:	e008      	b.n	800d9b8 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800d9a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d9b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800d9b4:	2b03      	cmp	r3, #3
 800d9b6:	dde3      	ble.n	800d980 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800d9b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d13c      	bne.n	800da3a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800d9c0:	897b      	ldrh	r3, [r7, #10]
 800d9c2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d101      	bne.n	800d9ce <pxEasyFit+0x20a>
 800d9ca:	230a      	movs	r3, #10
 800d9cc:	e000      	b.n	800d9d0 <pxEasyFit+0x20c>
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800d9d4:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800d9d6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d9da:	2328      	movs	r3, #40	@ 0x28
 800d9dc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d9e0:	f001 fc70 	bl	800f2c4 <FreeRTOS_inet_ntop>
 800d9e4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800d9e8:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800d9ea:	f107 0210 	add.w	r2, r7, #16
 800d9ee:	2328      	movs	r3, #40	@ 0x28
 800d9f0:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d9f4:	f001 fc66 	bl	800f2c4 <FreeRTOS_inet_ntop>
 800d9f8:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800d9fc:	8979      	ldrh	r1, [r7, #10]
 800d9fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800da00:	461c      	mov	r4, r3
 800da02:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800da04:	461d      	mov	r5, r3
 800da06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800da08:	4618      	mov	r0, r3
 800da0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <pxEasyFit+0x254>
 800da12:	f107 0310 	add.w	r3, r7, #16
 800da16:	e000      	b.n	800da1a <pxEasyFit+0x256>
 800da18:	4b0d      	ldr	r3, [pc, #52]	@ (800da50 <pxEasyFit+0x28c>)
 800da1a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800da1e:	2a00      	cmp	r2, #0
 800da20:	d002      	beq.n	800da28 <pxEasyFit+0x264>
 800da22:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800da26:	e000      	b.n	800da2a <pxEasyFit+0x266>
 800da28:	4a09      	ldr	r2, [pc, #36]	@ (800da50 <pxEasyFit+0x28c>)
 800da2a:	9202      	str	r2, [sp, #8]
 800da2c:	9301      	str	r3, [sp, #4]
 800da2e:	9000      	str	r0, [sp, #0]
 800da30:	462b      	mov	r3, r5
 800da32:	4622      	mov	r2, r4
 800da34:	4807      	ldr	r0, [pc, #28]	@ (800da54 <pxEasyFit+0x290>)
 800da36:	f014 fa5f 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800da3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800da3e:	4618      	mov	r0, r3
 800da40:	37b0      	adds	r7, #176	@ 0xb0
 800da42:	46bd      	mov	sp, r7
 800da44:	bdb0      	pop	{r4, r5, r7, pc}
 800da46:	bf00      	nop
 800da48:	080275f4 	.word	0x080275f4
 800da4c:	08025840 	.word	0x08025840
 800da50:	0802585c 	.word	0x0802585c
 800da54:	08025864 	.word	0x08025864

0800da58 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800da58:	b590      	push	{r4, r7, lr}
 800da5a:	b097      	sub	sp, #92	@ 0x5c
 800da5c:	af02      	add	r7, sp, #8
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800da62:	2300      	movs	r3, #0
 800da64:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	2b00      	cmp	r3, #0
 800da72:	d104      	bne.n	800da7e <FreeRTOS_MatchingEndpoint+0x26>
 800da74:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800da78:	485e      	ldr	r0, [pc, #376]	@ (800dbf4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800da7a:	f7f3 ff5d 	bl	8001938 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800da82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da84:	3302      	adds	r3, #2
 800da86:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800da88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da8a:	f003 0303 	and.w	r3, r3, #3
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d004      	beq.n	800da9c <FreeRTOS_MatchingEndpoint+0x44>
 800da92:	f240 319b 	movw	r1, #923	@ 0x39b
 800da96:	4857      	ldr	r0, [pc, #348]	@ (800dbf4 <FreeRTOS_MatchingEndpoint+0x19c>)
 800da98:	f7f3 ff4e 	bl	8001938 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800da9c:	4b56      	ldr	r3, [pc, #344]	@ (800dbf8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800da9e:	68db      	ldr	r3, [r3, #12]
 800daa0:	3301      	adds	r3, #1
 800daa2:	4a55      	ldr	r2, [pc, #340]	@ (800dbf8 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800daa4:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800daa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800daa8:	7b1a      	ldrb	r2, [r3, #12]
 800daaa:	7b5b      	ldrb	r3, [r3, #13]
 800daac:	021b      	lsls	r3, r3, #8
 800daae:	4313      	orrs	r3, r2
 800dab0:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800dab2:	2300      	movs	r3, #0
 800dab4:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800dab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800daba:	2210      	movs	r2, #16
 800dabc:	2100      	movs	r1, #0
 800dabe:	4618      	mov	r0, r3
 800dac0:	f014 fd43 	bl	802254a <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800dac4:	f107 0314 	add.w	r3, r7, #20
 800dac8:	2210      	movs	r2, #16
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f014 fd3c 	bl	802254a <memset>

            switch( usFrameType )
 800dad2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800dad4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dad8:	4293      	cmp	r3, r2
 800dada:	d009      	beq.n	800daf0 <FreeRTOS_MatchingEndpoint+0x98>
 800dadc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800dae0:	4293      	cmp	r3, r2
 800dae2:	dc6a      	bgt.n	800dbba <FreeRTOS_MatchingEndpoint+0x162>
 800dae4:	2b08      	cmp	r3, #8
 800dae6:	d05d      	beq.n	800dba4 <FreeRTOS_MatchingEndpoint+0x14c>
 800dae8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800daec:	d015      	beq.n	800db1a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800daee:	e064      	b.n	800dbba <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800daf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800daf2:	3316      	adds	r3, #22
 800daf4:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	6859      	ldr	r1, [r3, #4]
 800dafc:	689a      	ldr	r2, [r3, #8]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800db02:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db04:	3326      	adds	r3, #38	@ 0x26
 800db06:	f107 0414 	add.w	r4, r7, #20
 800db0a:	6818      	ldr	r0, [r3, #0]
 800db0c:	6859      	ldr	r1, [r3, #4]
 800db0e:	689a      	ldr	r2, [r3, #8]
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800db14:	2301      	movs	r3, #1
 800db16:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800db18:	e050      	b.n	800dbbc <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800db1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db20:	8a9b      	ldrh	r3, [r3, #20]
 800db22:	b29b      	uxth	r3, r3
 800db24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db28:	d108      	bne.n	800db3c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800db2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db2c:	331c      	adds	r3, #28
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800db32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db34:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800db38:	617b      	str	r3, [r7, #20]
 800db3a:	e00d      	b.n	800db58 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800db3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800db3e:	8a9b      	ldrh	r3, [r3, #20]
 800db40:	b29b      	uxth	r3, r3
 800db42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db46:	d107      	bne.n	800db58 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800db48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db4a:	331c      	adds	r3, #28
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800db50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800db52:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800db56:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800db58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5a:	061a      	lsls	r2, r3, #24
 800db5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db5e:	021b      	lsls	r3, r3, #8
 800db60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db64:	431a      	orrs	r2, r3
 800db66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db68:	0a1b      	lsrs	r3, r3, #8
 800db6a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db6e:	431a      	orrs	r2, r3
 800db70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db72:	0e1b      	lsrs	r3, r3, #24
 800db74:	ea42 0103 	orr.w	r1, r2, r3
 800db78:	697b      	ldr	r3, [r7, #20]
 800db7a:	061a      	lsls	r2, r3, #24
 800db7c:	697b      	ldr	r3, [r7, #20]
 800db7e:	021b      	lsls	r3, r3, #8
 800db80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800db84:	431a      	orrs	r2, r3
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	0a1b      	lsrs	r3, r3, #8
 800db8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800db8e:	431a      	orrs	r2, r3
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	0e1b      	lsrs	r3, r3, #24
 800db94:	4313      	orrs	r3, r2
 800db96:	461a      	mov	r2, r3
 800db98:	4818      	ldr	r0, [pc, #96]	@ (800dbfc <FreeRTOS_MatchingEndpoint+0x1a4>)
 800db9a:	f014 f9ad 	bl	8021ef8 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800db9e:	2301      	movs	r3, #1
 800dba0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800dba2:	e00b      	b.n	800dbbc <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800dba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dba6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800dbaa:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800dbac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dbae:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800dbb2:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800dbb8:	e000      	b.n	800dbbc <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800dbba:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800dbbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d113      	bne.n	800dbea <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800dbc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dbc4:	f107 030c 	add.w	r3, r7, #12
 800dbc8:	6810      	ldr	r0, [r2, #0]
 800dbca:	6018      	str	r0, [r3, #0]
 800dbcc:	8892      	ldrh	r2, [r2, #4]
 800dbce:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800dbd0:	f107 0014 	add.w	r0, r7, #20
 800dbd4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800dbd8:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800dbda:	f107 030c 	add.w	r3, r7, #12
 800dbde:	9300      	str	r3, [sp, #0]
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	6878      	ldr	r0, [r7, #4]
 800dbe4:	f7ff fdee 	bl	800d7c4 <pxEasyFit>
 800dbe8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800dbea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800dbec:	4618      	mov	r0, r3
 800dbee:	3754      	adds	r7, #84	@ 0x54
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd90      	pop	{r4, r7, pc}
 800dbf4:	0802588c 	.word	0x0802588c
 800dbf8:	200014a8 	.word	0x200014a8
 800dbfc:	080258bc 	.word	0x080258bc

0800dc00 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800dc08:	4b1b      	ldr	r3, [pc, #108]	@ (800dc78 <FreeRTOS_FindGateWay+0x78>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800dc0e:	e028      	b.n	800dc62 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2b60      	cmp	r3, #96	@ 0x60
 800dc14:	d112      	bne.n	800dc3c <FreeRTOS_FindGateWay+0x3c>
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dc1c:	f003 0304 	and.w	r3, r3, #4
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d00a      	beq.n	800dc3c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	335c      	adds	r3, #92	@ 0x5c
 800dc2a:	2210      	movs	r2, #16
 800dc2c:	4619      	mov	r1, r3
 800dc2e:	4813      	ldr	r0, [pc, #76]	@ (800dc7c <FreeRTOS_FindGateWay+0x7c>)
 800dc30:	f015 fb13 	bl	802325a <memcmp>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00f      	beq.n	800dc5a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800dc3a:	e017      	b.n	800dc6c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2b40      	cmp	r3, #64	@ 0x40
 800dc40:	d10b      	bne.n	800dc5a <FreeRTOS_FindGateWay+0x5a>
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dc48:	f003 0304 	and.w	r3, r3, #4
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d103      	bne.n	800dc5a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	689b      	ldr	r3, [r3, #8]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d107      	bne.n	800dc6a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800dc60:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d1d3      	bne.n	800dc10 <FreeRTOS_FindGateWay+0x10>
 800dc68:	e000      	b.n	800dc6c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800dc6a:	bf00      	nop
        }

        return pxEndPoint;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
    }
 800dc6e:	4618      	mov	r0, r3
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}
 800dc76:	bf00      	nop
 800dc78:	200014a0 	.word	0x200014a0
 800dc7c:	080275ac 	.word	0x080275ac

0800dc80 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b086      	sub	sp, #24
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800dc88:	2305      	movs	r3, #5
 800dc8a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d046      	beq.n	800dd20 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800dc92:	2300      	movs	r3, #0
 800dc94:	613b      	str	r3, [r7, #16]
 800dc96:	e040      	b.n	800dd1a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	781b      	ldrb	r3, [r3, #0]
 800dc9c:	021b      	lsls	r3, r3, #8
 800dc9e:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	785b      	ldrb	r3, [r3, #1]
 800dca4:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800dca6:	4313      	orrs	r3, r2
 800dca8:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800dcaa:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800dcac:	491f      	ldr	r1, [pc, #124]	@ (800dd2c <xIPv6_GetIPType+0xac>)
 800dcae:	693a      	ldr	r2, [r7, #16]
 800dcb0:	4613      	mov	r3, r2
 800dcb2:	005b      	lsls	r3, r3, #1
 800dcb4:	4413      	add	r3, r2
 800dcb6:	005b      	lsls	r3, r3, #1
 800dcb8:	440b      	add	r3, r1
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	2b04      	cmp	r3, #4
 800dcbe:	d108      	bne.n	800dcd2 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f7fd f929 	bl	800af18 <xIsIPv6Loopback>
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d002      	beq.n	800dcd2 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800dccc:	2304      	movs	r3, #4
 800dcce:	75fb      	strb	r3, [r7, #23]
                        break;
 800dcd0:	e026      	b.n	800dd20 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800dcd2:	4916      	ldr	r1, [pc, #88]	@ (800dd2c <xIPv6_GetIPType+0xac>)
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	005b      	lsls	r3, r3, #1
 800dcda:	4413      	add	r3, r2
 800dcdc:	005b      	lsls	r3, r3, #1
 800dcde:	440b      	add	r3, r1
 800dce0:	3302      	adds	r3, #2
 800dce2:	881a      	ldrh	r2, [r3, #0]
 800dce4:	89fb      	ldrh	r3, [r7, #14]
 800dce6:	4013      	ands	r3, r2
 800dce8:	b299      	uxth	r1, r3
 800dcea:	4810      	ldr	r0, [pc, #64]	@ (800dd2c <xIPv6_GetIPType+0xac>)
 800dcec:	693a      	ldr	r2, [r7, #16]
 800dcee:	4613      	mov	r3, r2
 800dcf0:	005b      	lsls	r3, r3, #1
 800dcf2:	4413      	add	r3, r2
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	4403      	add	r3, r0
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	881b      	ldrh	r3, [r3, #0]
 800dcfc:	4299      	cmp	r1, r3
 800dcfe:	d109      	bne.n	800dd14 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800dd00:	490a      	ldr	r1, [pc, #40]	@ (800dd2c <xIPv6_GetIPType+0xac>)
 800dd02:	693a      	ldr	r2, [r7, #16]
 800dd04:	4613      	mov	r3, r2
 800dd06:	005b      	lsls	r3, r3, #1
 800dd08:	4413      	add	r3, r2
 800dd0a:	005b      	lsls	r3, r3, #1
 800dd0c:	440b      	add	r3, r1
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	75fb      	strb	r3, [r7, #23]
                    break;
 800dd12:	e005      	b.n	800dd20 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	3301      	adds	r3, #1
 800dd18:	613b      	str	r3, [r7, #16]
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	ddbb      	ble.n	800dc98 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800dd20:	7dfb      	ldrb	r3, [r7, #23]
    }
 800dd22:	4618      	mov	r0, r3
 800dd24:	3718      	adds	r7, #24
 800dd26:	46bd      	mov	sp, r7
 800dd28:	bd80      	pop	{r7, pc}
 800dd2a:	bf00      	nop
 800dd2c:	08027604 	.word	0x08027604

0800dd30 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b084      	sub	sp, #16
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	60f8      	str	r0, [r7, #12]
 800dd38:	60b9      	str	r1, [r7, #8]
 800dd3a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d105      	bne.n	800dd4e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800dd42:	4a16      	ldr	r2, [pc, #88]	@ (800dd9c <pcEndpointName+0x6c>)
 800dd44:	6879      	ldr	r1, [r7, #4]
 800dd46:	68b8      	ldr	r0, [r7, #8]
 800dd48:	f015 f902 	bl	8022f50 <snprintf>
 800dd4c:	e020      	b.n	800dd90 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800dd54:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800dd58:	b2db      	uxtb	r3, r3
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d002      	beq.n	800dd64 <pcEndpointName+0x34>
 800dd5e:	2b01      	cmp	r3, #1
 800dd60:	d007      	beq.n	800dd72 <pcEndpointName+0x42>
 800dd62:	e00f      	b.n	800dd84 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800dd64:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	2002      	movs	r0, #2
 800dd6c:	f001 faaa 	bl	800f2c4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800dd70:	e00e      	b.n	800dd90 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	68ba      	ldr	r2, [r7, #8]
 800dd7c:	200a      	movs	r0, #10
 800dd7e:	f001 faa1 	bl	800f2c4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800dd82:	e005      	b.n	800dd90 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800dd84:	4a05      	ldr	r2, [pc, #20]	@ (800dd9c <pcEndpointName+0x6c>)
 800dd86:	6879      	ldr	r1, [r7, #4]
 800dd88:	68b8      	ldr	r0, [r7, #8]
 800dd8a:	f015 f8e1 	bl	8022f50 <snprintf>
                    break;
 800dd8e:	bf00      	nop
            }
        }

        return pcBuffer;
 800dd90:	68bb      	ldr	r3, [r7, #8]
    }
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	080258dc 	.word	0x080258dc

0800dda0 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b086      	sub	sp, #24
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800ddac:	68f8      	ldr	r0, [r7, #12]
 800ddae:	f002 fb21 	bl	80103f4 <xSocketValid>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d102      	bne.n	800ddbe <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	e015      	b.n	800ddea <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d006      	beq.n	800ddd2 <prvValidSocket+0x32>
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	69db      	ldr	r3, [r3, #28]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d102      	bne.n	800ddd2 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	617b      	str	r3, [r7, #20]
 800ddd0:	e00b      	b.n	800ddea <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d002      	beq.n	800dde6 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800dde0:	2300      	movs	r3, #0
 800dde2:	617b      	str	r3, [r7, #20]
 800dde4:	e001      	b.n	800ddea <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800dde6:	2301      	movs	r3, #1
 800dde8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800ddea:	697b      	ldr	r3, [r7, #20]
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800ddf8:	4803      	ldr	r0, [pc, #12]	@ (800de08 <vNetworkSocketsInit+0x14>)
 800ddfa:	f7f5 fa49 	bl	8003290 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800ddfe:	4803      	ldr	r0, [pc, #12]	@ (800de0c <vNetworkSocketsInit+0x18>)
 800de00:	f7f5 fa46 	bl	8003290 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800de04:	bf00      	nop
 800de06:	bd80      	pop	{r7, pc}
 800de08:	2000156c 	.word	0x2000156c
 800de0c:	20001580 	.word	0x20001580

0800de10 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b086      	sub	sp, #24
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800de1e:	2301      	movs	r3, #1
 800de20:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800de22:	2300      	movs	r3, #0
 800de24:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800de26:	f7fb ff97 	bl	8009d58 <xIPIsNetworkTaskReady>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d102      	bne.n	800de36 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]
 800de34:	e05e      	b.n	800def4 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d004      	beq.n	800de46 <prvDetermineSocketSize+0x36>
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	2b0a      	cmp	r3, #10
 800de40:	d001      	beq.n	800de46 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800de42:	2300      	movs	r3, #0
 800de44:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2b02      	cmp	r3, #2
 800de4a:	d002      	beq.n	800de52 <prvDetermineSocketSize+0x42>
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2b0a      	cmp	r3, #10
 800de50:	d101      	bne.n	800de56 <prvDetermineSocketSize+0x46>
 800de52:	2301      	movs	r3, #1
 800de54:	e000      	b.n	800de58 <prvDetermineSocketSize+0x48>
 800de56:	2300      	movs	r3, #0
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d104      	bne.n	800de66 <prvDetermineSocketSize+0x56>
 800de5c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800de60:	4827      	ldr	r0, [pc, #156]	@ (800df00 <prvDetermineSocketSize+0xf0>)
 800de62:	f7f3 fd69 	bl	8001938 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800de66:	4b27      	ldr	r3, [pc, #156]	@ (800df04 <prvDetermineSocketSize+0xf4>)
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de6e:	d004      	beq.n	800de7a <prvDetermineSocketSize+0x6a>
 800de70:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800de74:	4822      	ldr	r0, [pc, #136]	@ (800df00 <prvDetermineSocketSize+0xf0>)
 800de76:	f7f3 fd5f 	bl	8001938 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800de7a:	4b23      	ldr	r3, [pc, #140]	@ (800df08 <prvDetermineSocketSize+0xf8>)
 800de7c:	689b      	ldr	r3, [r3, #8]
 800de7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de82:	d004      	beq.n	800de8e <prvDetermineSocketSize+0x7e>
 800de84:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800de88:	481d      	ldr	r0, [pc, #116]	@ (800df00 <prvDetermineSocketSize+0xf0>)
 800de8a:	f7f3 fd55 	bl	8001938 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2b11      	cmp	r3, #17
 800de92:	d110      	bne.n	800deb6 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2b02      	cmp	r3, #2
 800de98:	d009      	beq.n	800deae <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d004      	beq.n	800deae <prvDetermineSocketSize+0x9e>
 800dea4:	f240 2106 	movw	r1, #518	@ 0x206
 800dea8:	4815      	ldr	r0, [pc, #84]	@ (800df00 <prvDetermineSocketSize+0xf0>)
 800deaa:	f7f3 fd45 	bl	8001938 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	2270      	movs	r2, #112	@ 0x70
 800deb2:	601a      	str	r2, [r3, #0]
 800deb4:	e01e      	b.n	800def4 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	2b06      	cmp	r3, #6
 800deba:	d111      	bne.n	800dee0 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d009      	beq.n	800ded6 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800dec2:	2300      	movs	r3, #0
 800dec4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	2b01      	cmp	r3, #1
 800deca:	d004      	beq.n	800ded6 <prvDetermineSocketSize+0xc6>
 800decc:	f240 2113 	movw	r1, #531	@ 0x213
 800ded0:	480b      	ldr	r0, [pc, #44]	@ (800df00 <prvDetermineSocketSize+0xf0>)
 800ded2:	f7f3 fd31 	bl	8001938 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800dedc:	601a      	str	r2, [r3, #0]
 800dede:	e009      	b.n	800def4 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800dee0:	2300      	movs	r3, #0
 800dee2:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800dee4:	697b      	ldr	r3, [r7, #20]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d004      	beq.n	800def4 <prvDetermineSocketSize+0xe4>
 800deea:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800deee:	4804      	ldr	r0, [pc, #16]	@ (800df00 <prvDetermineSocketSize+0xf0>)
 800def0:	f7f3 fd22 	bl	8001938 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800def4:	697b      	ldr	r3, [r7, #20]
}
 800def6:	4618      	mov	r0, r3
 800def8:	3718      	adds	r7, #24
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	080258e4 	.word	0x080258e4
 800df04:	2000156c 	.word	0x2000156c
 800df08:	20001580 	.word	0x20001580

0800df0c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800df1c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	7a1b      	ldrb	r3, [r3, #8]
 800df24:	f003 0301 	and.w	r3, r3, #1
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d00a      	beq.n	800df44 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800df2e:	2314      	movs	r3, #20
 800df30:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800df38:	89fb      	ldrh	r3, [r7, #14]
 800df3a:	1ad3      	subs	r3, r2, r3
 800df3c:	b29a      	uxth	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f241 121c 	movw	r2, #4380	@ 0x111c
 800df4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800df4e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800df52:	f640 3068 	movw	r0, #2920	@ 0xb68
 800df56:	f7fc fc85 	bl	800a864 <FreeRTOS_round_up>
 800df5a:	4602      	mov	r2, r0
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800df68:	08db      	lsrs	r3, r3, #3
 800df6a:	4a10      	ldr	r2, [pc, #64]	@ (800dfac <prvInitialiseTCPFields+0xa0>)
 800df6c:	fba2 2303 	umull	r2, r3, r2, r3
 800df70:	099b      	lsrs	r3, r3, #6
 800df72:	4619      	mov	r1, r3
 800df74:	2001      	movs	r0, #1
 800df76:	f7fc fc35 	bl	800a7e4 <FreeRTOS_max_size_t>
 800df7a:	4602      	mov	r2, r0
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800df88:	08db      	lsrs	r3, r3, #3
 800df8a:	4a08      	ldr	r2, [pc, #32]	@ (800dfac <prvInitialiseTCPFields+0xa0>)
 800df8c:	fba2 2303 	umull	r2, r3, r2, r3
 800df90:	099b      	lsrs	r3, r3, #6
 800df92:	4619      	mov	r1, r3
 800df94:	2001      	movs	r0, #1
 800df96:	f7fc fc25 	bl	800a7e4 <FreeRTOS_max_size_t>
 800df9a:	4602      	mov	r2, r0
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800dfa2:	bf00      	nop
 800dfa4:	3710      	adds	r7, #16
 800dfa6:	46bd      	mov	sp, r7
 800dfa8:	bd80      	pop	{r7, pc}
 800dfaa:	bf00      	nop
 800dfac:	2ce33e6d 	.word	0x2ce33e6d

0800dfb0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800dfb0:	b580      	push	{r7, lr}
 800dfb2:	b08a      	sub	sp, #40	@ 0x28
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2b0a      	cmp	r3, #10
 800dfc8:	d002      	beq.n	800dfd0 <FreeRTOS_socket+0x20>
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d101      	bne.n	800dfd4 <FreeRTOS_socket+0x24>
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e000      	b.n	800dfd6 <FreeRTOS_socket+0x26>
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d104      	bne.n	800dfe4 <FreeRTOS_socket+0x34>
 800dfda:	f240 2171 	movw	r1, #625	@ 0x271
 800dfde:	4845      	ldr	r0, [pc, #276]	@ (800e0f4 <FreeRTOS_socket+0x144>)
 800dfe0:	f7f3 fcaa 	bl	8001938 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d10c      	bne.n	800e004 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d005      	beq.n	800dffc <FreeRTOS_socket+0x4c>
 800dff0:	68bb      	ldr	r3, [r7, #8]
 800dff2:	2b02      	cmp	r3, #2
 800dff4:	d105      	bne.n	800e002 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800dff6:	2311      	movs	r3, #17
 800dff8:	623b      	str	r3, [r7, #32]
                    break;
 800dffa:	e003      	b.n	800e004 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800dffc:	2306      	movs	r3, #6
 800dffe:	623b      	str	r3, [r7, #32]
                    break;
 800e000:	e000      	b.n	800e004 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800e002:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800e004:	f107 0314 	add.w	r3, r7, #20
 800e008:	6a3a      	ldr	r2, [r7, #32]
 800e00a:	68b9      	ldr	r1, [r7, #8]
 800e00c:	68f8      	ldr	r0, [r7, #12]
 800e00e:	f7ff feff 	bl	800de10 <prvDetermineSocketSize>
 800e012:	4603      	mov	r3, r0
 800e014:	2b00      	cmp	r3, #0
 800e016:	d103      	bne.n	800e020 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e018:	f04f 33ff 	mov.w	r3, #4294967295
 800e01c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800e01e:	e063      	b.n	800e0e8 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	4618      	mov	r0, r3
 800e024:	f7f8 f986 	bl	8006334 <pvPortMalloc>
 800e028:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800e02a:	69fb      	ldr	r3, [r7, #28]
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d103      	bne.n	800e038 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e030:	f04f 33ff 	mov.w	r3, #4294967295
 800e034:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800e036:	e057      	b.n	800e0e8 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800e038:	f7f4 ff55 	bl	8002ee6 <xEventGroupCreate>
 800e03c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800e03e:	69bb      	ldr	r3, [r7, #24]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d106      	bne.n	800e052 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800e044:	69f8      	ldr	r0, [r7, #28]
 800e046:	f7f8 fa49 	bl	80064dc <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800e04a:	f04f 33ff 	mov.w	r3, #4294967295
 800e04e:	627b      	str	r3, [r7, #36]	@ 0x24
 800e050:	e04a      	b.n	800e0e8 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	461a      	mov	r2, r3
 800e056:	2100      	movs	r1, #0
 800e058:	69f8      	ldr	r0, [r7, #28]
 800e05a:	f014 fa76 	bl	802254a <memset>

            pxSocket->xEventGroup = xEventGroup;
 800e05e:	69fb      	ldr	r3, [r7, #28]
 800e060:	69ba      	ldr	r2, [r7, #24]
 800e062:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2b02      	cmp	r3, #2
 800e068:	d008      	beq.n	800e07c <FreeRTOS_socket+0xcc>
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2b0a      	cmp	r3, #10
 800e06e:	d10b      	bne.n	800e088 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e070:	69fa      	ldr	r2, [r7, #28]
 800e072:	7a13      	ldrb	r3, [r2, #8]
 800e074:	f043 0301 	orr.w	r3, r3, #1
 800e078:	7213      	strb	r3, [r2, #8]
                        break;
 800e07a:	e009      	b.n	800e090 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e07c:	69fa      	ldr	r2, [r7, #28]
 800e07e:	7a13      	ldrb	r3, [r2, #8]
 800e080:	f36f 0300 	bfc	r3, #0, #1
 800e084:	7213      	strb	r3, [r2, #8]
                        break;
 800e086:	e003      	b.n	800e090 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800e088:	481b      	ldr	r0, [pc, #108]	@ (800e0f8 <FreeRTOS_socket+0x148>)
 800e08a:	f013 ff35 	bl	8021ef8 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800e08e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800e090:	6a3b      	ldr	r3, [r7, #32]
 800e092:	2b11      	cmp	r3, #17
 800e094:	d105      	bne.n	800e0a2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	3354      	adds	r3, #84	@ 0x54
 800e09a:	4618      	mov	r0, r3
 800e09c:	f7f5 f8f8 	bl	8003290 <vListInitialise>
 800e0a0:	e007      	b.n	800e0b2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	2b06      	cmp	r3, #6
 800e0a6:	d104      	bne.n	800e0b2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800e0a8:	697b      	ldr	r3, [r7, #20]
 800e0aa:	4619      	mov	r1, r3
 800e0ac:	69f8      	ldr	r0, [r7, #28]
 800e0ae:	f7ff ff2d 	bl	800df0c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	330c      	adds	r3, #12
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f7f5 f90a 	bl	80032d0 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800e0bc:	69fb      	ldr	r3, [r7, #28]
 800e0be:	69fa      	ldr	r2, [r7, #28]
 800e0c0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800e0c2:	69fb      	ldr	r3, [r7, #28]
 800e0c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0c8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800e0ca:	69fb      	ldr	r3, [r7, #28]
 800e0cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e0d0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e0d2:	69fb      	ldr	r3, [r7, #28]
 800e0d4:	2202      	movs	r2, #2
 800e0d6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800e0da:	6a3b      	ldr	r3, [r7, #32]
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	69fb      	ldr	r3, [r7, #28]
 800e0e0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800e0e4:	69fb      	ldr	r3, [r7, #28]
 800e0e6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3728      	adds	r7, #40	@ 0x28
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}
 800e0f2:	bf00      	nop
 800e0f4:	080258e4 	.word	0x080258e4
 800e0f8:	08025914 	.word	0x08025914

0800e0fc <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b084      	sub	sp, #16
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800e104:	2200      	movs	r2, #0
 800e106:	2111      	movs	r1, #17
 800e108:	6878      	ldr	r0, [r7, #4]
 800e10a:	f7ff fe49 	bl	800dda0 <prvValidSocket>
 800e10e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	2b01      	cmp	r3, #1
 800e114:	d10d      	bne.n	800e132 <prvMakeSureSocketIsBound+0x36>
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	69db      	ldr	r3, [r3, #28]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d109      	bne.n	800e132 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800e11e:	2200      	movs	r2, #0
 800e120:	2100      	movs	r1, #0
 800e122:	6878      	ldr	r0, [r7, #4]
 800e124:	f000 f934 	bl	800e390 <FreeRTOS_bind>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800e12e:	2300      	movs	r3, #0
 800e130:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800e132:	68fb      	ldr	r3, [r7, #12]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b088      	sub	sp, #32
 800e140:	af00      	add	r7, sp, #0
 800e142:	60f8      	str	r0, [r7, #12]
 800e144:	60b9      	str	r1, [r7, #8]
 800e146:	607a      	str	r2, [r7, #4]
 800e148:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800e14e:	2304      	movs	r3, #4
 800e150:	753b      	strb	r3, [r7, #20]
 800e152:	2300      	movs	r3, #0
 800e154:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e158:	785b      	ldrb	r3, [r3, #1]
 800e15a:	2b02      	cmp	r3, #2
 800e15c:	d006      	beq.n	800e16c <prvSendUDPPacket+0x30>
 800e15e:	2b0a      	cmp	r3, #10
 800e160:	d109      	bne.n	800e176 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800e162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e164:	68b8      	ldr	r0, [r7, #8]
 800e166:	f7fd f903 	bl	800b370 <xSend_UDP_Update_IPv6>
                break;
 800e16a:	e005      	b.n	800e178 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800e16c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e16e:	68b8      	ldr	r0, [r7, #8]
 800e170:	f7fc fd68 	bl	800ac44 <xSend_UDP_Update_IPv4>
                break;
 800e174:	e000      	b.n	800e178 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e176:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800e178:	687a      	ldr	r2, [r7, #4]
 800e17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17c:	441a      	add	r2, r3
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800e182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e184:	885a      	ldrh	r2, [r3, #2]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	b29a      	uxth	r2, r3
 800e190:	68bb      	ldr	r3, [r7, #8]
 800e192:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e198:	3306      	adds	r3, #6
 800e19a:	68fa      	ldr	r2, [r7, #12]
 800e19c:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800e1a0:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800e1a2:	68bb      	ldr	r3, [r7, #8]
 800e1a4:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800e1a6:	f107 0314 	add.w	r3, r7, #20
 800e1aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	f7fb fa37 	bl	8009620 <xSendEventStructToIPTask>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d10b      	bne.n	800e1d0 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d00d      	beq.n	800e1e0 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e1c8:	6879      	ldr	r1, [r7, #4]
 800e1ca:	68f8      	ldr	r0, [r7, #12]
 800e1cc:	4798      	blx	r3
 800e1ce:	e007      	b.n	800e1e0 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	f003 0301 	and.w	r3, r3, #1
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d102      	bne.n	800e1e0 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e1da:	68b8      	ldr	r0, [r7, #8]
 800e1dc:	f008 ffe4 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800e1e0:	69fb      	ldr	r3, [r7, #28]
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3720      	adds	r7, #32
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}

0800e1ea <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b08e      	sub	sp, #56	@ 0x38
 800e1ee:	af04      	add	r7, sp, #16
 800e1f0:	60f8      	str	r0, [r7, #12]
 800e1f2:	60b9      	str	r1, [r7, #8]
 800e1f4:	607a      	str	r2, [r7, #4]
 800e1f6:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e200:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	f003 0310 	and.w	r3, r3, #16
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d104      	bne.n	800e216 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800e20c:	f7fc f94a 	bl	800a4a4 <xIsCallingFromIPTask>
 800e210:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800e212:	2b00      	cmp	r3, #0
 800e214:	d001      	beq.n	800e21a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800e216:	2300      	movs	r3, #0
 800e218:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	f003 0301 	and.w	r3, r3, #1
 800e220:	2b00      	cmp	r3, #0
 800e222:	d128      	bne.n	800e276 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800e224:	f107 0310 	add.w	r3, r7, #16
 800e228:	4618      	mov	r0, r3
 800e22a:	f7f6 fdc1 	bl	8004db0 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800e22e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	4413      	add	r3, r2
 800e234:	69ba      	ldr	r2, [r7, #24]
 800e236:	4611      	mov	r1, r2
 800e238:	4618      	mov	r0, r3
 800e23a:	f008 ff4d 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 800e23e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800e240:	6a3b      	ldr	r3, [r7, #32]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d01b      	beq.n	800e27e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800e246:	6a3b      	ldr	r3, [r7, #32]
 800e248:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e24a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e24c:	4413      	add	r3, r2
 800e24e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	68b9      	ldr	r1, [r7, #8]
 800e254:	69f8      	ldr	r0, [r7, #28]
 800e256:	f014 f86b 	bl	8022330 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800e25a:	f107 0218 	add.w	r2, r7, #24
 800e25e:	f107 0310 	add.w	r3, r7, #16
 800e262:	4611      	mov	r1, r2
 800e264:	4618      	mov	r0, r3
 800e266:	f7f6 fddb 	bl	8004e20 <xTaskCheckForTimeOut>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d106      	bne.n	800e27e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800e270:	2300      	movs	r3, #0
 800e272:	61bb      	str	r3, [r7, #24]
 800e274:	e003      	b.n	800e27e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800e276:	68b8      	ldr	r0, [r7, #8]
 800e278:	f7fc f8cc 	bl	800a414 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800e27c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800e27e:	6a3b      	ldr	r3, [r7, #32]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d010      	beq.n	800e2a6 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e288:	6a3b      	ldr	r3, [r7, #32]
 800e28a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e290:	9202      	str	r2, [sp, #8]
 800e292:	9301      	str	r3, [sp, #4]
 800e294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	6a39      	ldr	r1, [r7, #32]
 800e29e:	68f8      	ldr	r0, [r7, #12]
 800e2a0:	f7ff ff4c 	bl	800e13c <prvSendUDPPacket>
 800e2a4:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800e2a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3728      	adds	r7, #40	@ 0x28
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}

0800e2b0 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b090      	sub	sp, #64	@ 0x40
 800e2b4:	af02      	add	r7, sp, #8
 800e2b6:	60f8      	str	r0, [r7, #12]
 800e2b8:	60b9      	str	r1, [r7, #8]
 800e2ba:	607a      	str	r2, [r7, #4]
 800e2bc:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800e2ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d013      	beq.n	800e2fc <FreeRTOS_sendto+0x4c>
 800e2d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2d6:	785b      	ldrb	r3, [r3, #1]
 800e2d8:	2b0a      	cmp	r3, #10
 800e2da:	d00f      	beq.n	800e2fc <FreeRTOS_sendto+0x4c>
 800e2dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2de:	785b      	ldrb	r3, [r3, #1]
 800e2e0:	2b02      	cmp	r3, #2
 800e2e2:	d00b      	beq.n	800e2fc <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800e2e4:	f107 0310 	add.w	r3, r7, #16
 800e2e8:	2218      	movs	r2, #24
 800e2ea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f014 f81f 	bl	8022330 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800e2f2:	2302      	movs	r3, #2
 800e2f4:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800e2f6:	f107 0310 	add.w	r3, r7, #16
 800e2fa:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800e2fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d104      	bne.n	800e30c <FreeRTOS_sendto+0x5c>
 800e302:	f240 6143 	movw	r1, #1603	@ 0x643
 800e306:	4820      	ldr	r0, [pc, #128]	@ (800e388 <FreeRTOS_sendto+0xd8>)
 800e308:	f7f3 fb16 	bl	8001938 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d104      	bne.n	800e31c <FreeRTOS_sendto+0x6c>
 800e312:	f240 6144 	movw	r1, #1604	@ 0x644
 800e316:	481c      	ldr	r0, [pc, #112]	@ (800e388 <FreeRTOS_sendto+0xd8>)
 800e318:	f7f3 fb0e 	bl	8001938 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800e31c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e31e:	785b      	ldrb	r3, [r3, #1]
 800e320:	2b02      	cmp	r3, #2
 800e322:	d007      	beq.n	800e334 <FreeRTOS_sendto+0x84>
 800e324:	2b0a      	cmp	r3, #10
 800e326:	d10b      	bne.n	800e340 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800e328:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800e32c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800e32e:	233e      	movs	r3, #62	@ 0x3e
 800e330:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e332:	e00c      	b.n	800e34e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800e334:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800e338:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800e33a:	232a      	movs	r3, #42	@ 0x2a
 800e33c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800e33e:	e006      	b.n	800e34e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800e340:	4812      	ldr	r0, [pc, #72]	@ (800e38c <FreeRTOS_sendto+0xdc>)
 800e342:	f013 fdd9 	bl	8021ef8 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e346:	f06f 0315 	mvn.w	r3, #21
 800e34a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800e34c:	bf00      	nop
    }

    if( lReturn == 0 )
 800e34e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e350:	2b00      	cmp	r3, #0
 800e352:	d114      	bne.n	800e37e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e358:	429a      	cmp	r2, r3
 800e35a:	d810      	bhi.n	800e37e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800e35c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e35e:	f7ff fecd 	bl	800e0fc <prvMakeSureSocketIsBound>
 800e362:	4603      	mov	r3, r0
 800e364:	2b01      	cmp	r3, #1
 800e366:	d10a      	bne.n	800e37e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800e368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e36a:	9301      	str	r3, [sp, #4]
 800e36c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e36e:	9300      	str	r3, [sp, #0]
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	687a      	ldr	r2, [r7, #4]
 800e374:	68b9      	ldr	r1, [r7, #8]
 800e376:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e378:	f7ff ff37 	bl	800e1ea <prvSendTo_ActualSend>
 800e37c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800e37e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e380:	4618      	mov	r0, r3
 800e382:	3738      	adds	r7, #56	@ 0x38
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	080258e4 	.word	0x080258e4
 800e38c:	08025998 	.word	0x08025998

0800e390 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b090      	sub	sp, #64	@ 0x40
 800e394:	af02      	add	r7, sp, #8
 800e396:	60f8      	str	r0, [r7, #12]
 800e398:	60b9      	str	r1, [r7, #8]
 800e39a:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d013      	beq.n	800e3d2 <FreeRTOS_bind+0x42>
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	785b      	ldrb	r3, [r3, #1]
 800e3ae:	2b0a      	cmp	r3, #10
 800e3b0:	d00f      	beq.n	800e3d2 <FreeRTOS_bind+0x42>
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	785b      	ldrb	r3, [r3, #1]
 800e3b6:	2b02      	cmp	r3, #2
 800e3b8:	d00b      	beq.n	800e3d2 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800e3ba:	f107 0310 	add.w	r3, r7, #16
 800e3be:	2218      	movs	r2, #24
 800e3c0:	68b9      	ldr	r1, [r7, #8]
 800e3c2:	4618      	mov	r0, r3
 800e3c4:	f013 ffb4 	bl	8022330 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800e3cc:	f107 0310 	add.w	r3, r7, #16
 800e3d0:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800e3d2:	f7fc f867 	bl	800a4a4 <xIsCallingFromIPTask>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d004      	beq.n	800e3e6 <FreeRTOS_bind+0x56>
 800e3dc:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800e3e0:	484b      	ldr	r0, [pc, #300]	@ (800e510 <FreeRTOS_bind+0x180>)
 800e3e2:	f7f3 faa9 	bl	8001938 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800e3e6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800e3e8:	f002 f804 	bl	80103f4 <xSocketValid>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d103      	bne.n	800e3fa <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e3f2:	f06f 0315 	mvn.w	r3, #21
 800e3f6:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3f8:	e084      	b.n	800e504 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fc:	69db      	ldr	r3, [r3, #28]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d009      	beq.n	800e416 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800e402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e404:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e406:	4619      	mov	r1, r3
 800e408:	4842      	ldr	r0, [pc, #264]	@ (800e514 <FreeRTOS_bind+0x184>)
 800e40a:	f013 fd75 	bl	8021ef8 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e40e:	f06f 0315 	mvn.w	r3, #21
 800e412:	637b      	str	r3, [r7, #52]	@ 0x34
 800e414:	e076      	b.n	800e504 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800e416:	2309      	movs	r3, #9
 800e418:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800e420:	68bb      	ldr	r3, [r7, #8]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d042      	beq.n	800e4ac <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800e426:	68bb      	ldr	r3, [r7, #8]
 800e428:	785b      	ldrb	r3, [r3, #1]
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d010      	beq.n	800e450 <FreeRTOS_bind+0xc0>
 800e42e:	2b0a      	cmp	r3, #10
 800e430:	d129      	bne.n	800e486 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e434:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e438:	68bb      	ldr	r3, [r7, #8]
 800e43a:	3308      	adds	r3, #8
 800e43c:	2210      	movs	r2, #16
 800e43e:	4619      	mov	r1, r3
 800e440:	f013 ff76 	bl	8022330 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e444:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e446:	7a13      	ldrb	r3, [r2, #8]
 800e448:	f043 0301 	orr.w	r3, r3, #1
 800e44c:	7213      	strb	r3, [r2, #8]
                        break;
 800e44e:	e01e      	b.n	800e48e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	689b      	ldr	r3, [r3, #8]
 800e454:	061a      	lsls	r2, r3, #24
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	689b      	ldr	r3, [r3, #8]
 800e45a:	021b      	lsls	r3, r3, #8
 800e45c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e460:	431a      	orrs	r2, r3
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	689b      	ldr	r3, [r3, #8]
 800e466:	0a1b      	lsrs	r3, r3, #8
 800e468:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e46c:	431a      	orrs	r2, r3
 800e46e:	68bb      	ldr	r3, [r7, #8]
 800e470:	689b      	ldr	r3, [r3, #8]
 800e472:	0e1b      	lsrs	r3, r3, #24
 800e474:	431a      	orrs	r2, r3
 800e476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e478:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e47a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e47c:	7a13      	ldrb	r3, [r2, #8]
 800e47e:	f36f 0300 	bfc	r3, #0, #1
 800e482:	7213      	strb	r3, [r2, #8]
                        break;
 800e484:	e003      	b.n	800e48e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800e486:	4824      	ldr	r0, [pc, #144]	@ (800e518 <FreeRTOS_bind+0x188>)
 800e488:	f013 fd36 	bl	8021ef8 <lUDPLoggingPrintf>
                    break;
 800e48c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e48e:	68bb      	ldr	r3, [r7, #8]
 800e490:	885b      	ldrh	r3, [r3, #2]
 800e492:	021b      	lsls	r3, r3, #8
 800e494:	b21a      	sxth	r2, r3
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	885b      	ldrh	r3, [r3, #2]
 800e49a:	0a1b      	lsrs	r3, r3, #8
 800e49c:	b29b      	uxth	r3, r3
 800e49e:	b21b      	sxth	r3, r3
 800e4a0:	4313      	orrs	r3, r2
 800e4a2:	b21b      	sxth	r3, r3
 800e4a4:	b29a      	uxth	r2, r3
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4a8:	871a      	strh	r2, [r3, #56]	@ 0x38
 800e4aa:	e009      	b.n	800e4c0 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800e4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4b4:	3328      	adds	r3, #40	@ 0x28
 800e4b6:	2210      	movs	r2, #16
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f014 f845 	bl	802254a <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e4c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800e4c4:	f04f 31ff 	mov.w	r1, #4294967295
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f7fb f8a9 	bl	8009620 <xSendEventStructToIPTask>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d106      	bne.n	800e4e2 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800e4d4:	4811      	ldr	r0, [pc, #68]	@ (800e51c <FreeRTOS_bind+0x18c>)
 800e4d6:	f013 fd0f 	bl	8021ef8 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800e4da:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800e4de:	637b      	str	r3, [r7, #52]	@ 0x34
 800e4e0:	e010      	b.n	800e504 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800e4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4e4:	6858      	ldr	r0, [r3, #4]
 800e4e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ea:	9300      	str	r3, [sp, #0]
 800e4ec:	2300      	movs	r3, #0
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	2110      	movs	r1, #16
 800e4f2:	f7f4 fd0f 	bl	8002f14 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800e4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f8:	69db      	ldr	r3, [r3, #28]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d102      	bne.n	800e504 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e4fe:	f06f 0315 	mvn.w	r3, #21
 800e502:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800e504:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800e506:	4618      	mov	r0, r3
 800e508:	3738      	adds	r7, #56	@ 0x38
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	080258e4 	.word	0x080258e4
 800e514:	080259c0 	.word	0x080259c0
 800e518:	080259ec 	.word	0x080259ec
 800e51c:	08025a14 	.word	0x08025a14

0800e520 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800e520:	b580      	push	{r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af00      	add	r7, sp, #0
 800e526:	60f8      	str	r0, [r7, #12]
 800e528:	60b9      	str	r1, [r7, #8]
 800e52a:	607a      	str	r2, [r7, #4]
 800e52c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800e52e:	2300      	movs	r3, #0
 800e530:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d004      	beq.n	800e542 <prvSocketBindAdd+0x22>
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e53e:	2b06      	cmp	r3, #6
 800e540:	d024      	beq.n	800e58c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800e542:	68bb      	ldr	r3, [r7, #8]
 800e544:	885b      	ldrh	r3, [r3, #2]
 800e546:	4619      	mov	r1, r3
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f000 fdf1 	bl	800f130 <pxListFindListItemWithValue>
 800e54e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800e550:	2b00      	cmp	r3, #0
 800e552:	d01b      	beq.n	800e58c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e55a:	2b06      	cmp	r3, #6
 800e55c:	d101      	bne.n	800e562 <prvSocketBindAdd+0x42>
 800e55e:	493e      	ldr	r1, [pc, #248]	@ (800e658 <prvSocketBindAdd+0x138>)
 800e560:	e000      	b.n	800e564 <prvSocketBindAdd+0x44>
 800e562:	493e      	ldr	r1, [pc, #248]	@ (800e65c <prvSocketBindAdd+0x13c>)
 800e564:	68bb      	ldr	r3, [r7, #8]
 800e566:	885b      	ldrh	r3, [r3, #2]
 800e568:	021b      	lsls	r3, r3, #8
 800e56a:	b21a      	sxth	r2, r3
 800e56c:	68bb      	ldr	r3, [r7, #8]
 800e56e:	885b      	ldrh	r3, [r3, #2]
 800e570:	0a1b      	lsrs	r3, r3, #8
 800e572:	b29b      	uxth	r3, r3
 800e574:	b21b      	sxth	r3, r3
 800e576:	4313      	orrs	r3, r2
 800e578:	b21b      	sxth	r3, r3
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	461a      	mov	r2, r3
 800e57e:	4838      	ldr	r0, [pc, #224]	@ (800e660 <prvSocketBindAdd+0x140>)
 800e580:	f013 fcba 	bl	8021ef8 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800e584:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800e588:	617b      	str	r3, [r7, #20]
 800e58a:	e060      	b.n	800e64e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	885b      	ldrh	r3, [r3, #2]
 800e590:	461a      	mov	r2, r3
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	885b      	ldrh	r3, [r3, #2]
 800e59a:	021b      	lsls	r3, r3, #8
 800e59c:	b21a      	sxth	r2, r3
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	885b      	ldrh	r3, [r3, #2]
 800e5a2:	0a1b      	lsrs	r3, r3, #8
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	b21b      	sxth	r3, r3
 800e5a8:	4313      	orrs	r3, r2
 800e5aa:	b21b      	sxth	r3, r3
 800e5ac:	b29a      	uxth	r2, r3
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	785b      	ldrb	r3, [r3, #1]
 800e5b6:	2b0a      	cmp	r3, #10
 800e5b8:	d109      	bne.n	800e5ce <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	3308      	adds	r3, #8
 800e5c4:	2210      	movs	r2, #16
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	f013 feb2 	bl	8022330 <memcpy>
 800e5cc:	e00c      	b.n	800e5e8 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	689b      	ldr	r3, [r3, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d008      	beq.n	800e5e8 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	689b      	ldr	r3, [r3, #8]
 800e5da:	2107      	movs	r1, #7
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f7fe ffb7 	bl	800d550 <FreeRTOS_FindEndPointOnIP_IPv4>
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d019      	beq.n	800e624 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	061a      	lsls	r2, r3, #24
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	021b      	lsls	r3, r3, #8
 800e600:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e604:	431a      	orrs	r2, r3
 800e606:	68fb      	ldr	r3, [r7, #12]
 800e608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	0a1b      	lsrs	r3, r3, #8
 800e60e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e612:	431a      	orrs	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	0e1b      	lsrs	r3, r3, #24
 800e61c:	431a      	orrs	r2, r3
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	629a      	str	r2, [r3, #40]	@ 0x28
 800e622:	e00a      	b.n	800e63a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800e624:	68bb      	ldr	r3, [r7, #8]
 800e626:	785b      	ldrb	r3, [r3, #1]
 800e628:	2b0a      	cmp	r3, #10
 800e62a:	d006      	beq.n	800e63a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	3328      	adds	r3, #40	@ 0x28
 800e630:	2210      	movs	r2, #16
 800e632:	2100      	movs	r1, #0
 800e634:	4618      	mov	r0, r3
 800e636:	f013 ff88 	bl	802254a <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800e63a:	f7f5 fefd 	bl	8004438 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	330c      	adds	r3, #12
 800e642:	4619      	mov	r1, r3
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7f4 fe50 	bl	80032ea <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800e64a:	f7f5 ff03 	bl	8004454 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800e64e:	697b      	ldr	r3, [r7, #20]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3718      	adds	r7, #24
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	08025a38 	.word	0x08025a38
 800e65c:	08025a3c 	.word	0x08025a3c
 800e660:	08025a40 	.word	0x08025a40

0800e664 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08e      	sub	sp, #56	@ 0x38
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60f8      	str	r0, [r7, #12]
 800e66c:	60b9      	str	r1, [r7, #8]
 800e66e:	607a      	str	r2, [r7, #4]
 800e670:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800e672:	2300      	movs	r3, #0
 800e674:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800e676:	68bb      	ldr	r3, [r7, #8]
 800e678:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800e67a:	68f8      	ldr	r0, [r7, #12]
 800e67c:	f001 feba 	bl	80103f4 <xSocketValid>
 800e680:	4603      	mov	r3, r0
 800e682:	2b01      	cmp	r3, #1
 800e684:	d004      	beq.n	800e690 <vSocketBind+0x2c>
 800e686:	f240 716f 	movw	r1, #1903	@ 0x76f
 800e68a:	4828      	ldr	r0, [pc, #160]	@ (800e72c <vSocketBind+0xc8>)
 800e68c:	f7f3 f954 	bl	8001938 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e696:	2b06      	cmp	r3, #6
 800e698:	d102      	bne.n	800e6a0 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800e69a:	4b25      	ldr	r3, [pc, #148]	@ (800e730 <vSocketBind+0xcc>)
 800e69c:	633b      	str	r3, [r7, #48]	@ 0x30
 800e69e:	e001      	b.n	800e6a4 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800e6a0:	4b24      	ldr	r3, [pc, #144]	@ (800e734 <vSocketBind+0xd0>)
 800e6a2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800e6a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d115      	bne.n	800e6d6 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800e6aa:	f107 0314 	add.w	r3, r7, #20
 800e6ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800e6b0:	2218      	movs	r2, #24
 800e6b2:	2100      	movs	r1, #0
 800e6b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800e6b6:	f013 ff48 	bl	802254a <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	7a1b      	ldrb	r3, [r3, #8]
 800e6be:	f003 0301 	and.w	r3, r3, #1
 800e6c2:	b2db      	uxtb	r3, r3
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d003      	beq.n	800e6d0 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ca:	220a      	movs	r2, #10
 800e6cc:	705a      	strb	r2, [r3, #1]
 800e6ce:	e002      	b.n	800e6d6 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d2:	2202      	movs	r2, #2
 800e6d4:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800e6d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d104      	bne.n	800e6e6 <vSocketBind+0x82>
 800e6dc:	f240 719b 	movw	r1, #1947	@ 0x79b
 800e6e0:	4812      	ldr	r0, [pc, #72]	@ (800e72c <vSocketBind+0xc8>)
 800e6e2:	f7f3 f929 	bl	8001938 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800e6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6e8:	885b      	ldrh	r3, [r3, #2]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d111      	bne.n	800e712 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f000 fcc3 	bl	800f080 <prvGetPrivatePortNumber>
 800e6fa:	4603      	mov	r3, r0
 800e6fc:	461a      	mov	r2, r3
 800e6fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e700:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800e702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e704:	885b      	ldrh	r3, [r3, #2]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d103      	bne.n	800e712 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800e70a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800e70e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800e710:	e006      	b.n	800e720 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e716:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f7ff ff01 	bl	800e520 <prvSocketBindAdd>
 800e71e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800e720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800e722:	4618      	mov	r0, r3
 800e724:	3738      	adds	r7, #56	@ 0x38
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	080258e4 	.word	0x080258e4
 800e730:	20001580 	.word	0x20001580
 800e734:	2000156c 	.word	0x2000156c

0800e738 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b086      	sub	sp, #24
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800e744:	230a      	movs	r3, #10
 800e746:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800e74c:	6878      	ldr	r0, [r7, #4]
 800e74e:	f001 fe51 	bl	80103f4 <xSocketValid>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	d102      	bne.n	800e75e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800e758:	2300      	movs	r3, #0
 800e75a:	617b      	str	r3, [r7, #20]
 800e75c:	e02f      	b.n	800e7be <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e764:	2b06      	cmp	r3, #6
 800e766:	d10c      	bne.n	800e782 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800e768:	693b      	ldr	r3, [r7, #16]
 800e76a:	2200      	movs	r2, #0
 800e76c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800e770:	693b      	ldr	r3, [r7, #16]
 800e772:	2200      	movs	r2, #0
 800e774:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	2200      	movs	r2, #0
 800e77c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800e780:	e00a      	b.n	800e798 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e782:	693b      	ldr	r3, [r7, #16]
 800e784:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e788:	2b11      	cmp	r3, #17
 800e78a:	d105      	bne.n	800e798 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	2200      	movs	r2, #0
 800e790:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800e792:	693b      	ldr	r3, [r7, #16]
 800e794:	2200      	movs	r2, #0
 800e796:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800e798:	f107 0308 	add.w	r3, r7, #8
 800e79c:	f04f 31ff 	mov.w	r1, #4294967295
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f7fa ff3d 	bl	8009620 <xSendEventStructToIPTask>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d106      	bne.n	800e7ba <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800e7ac:	4806      	ldr	r0, [pc, #24]	@ (800e7c8 <FreeRTOS_closesocket+0x90>)
 800e7ae:	f013 fba3 	bl	8021ef8 <lUDPLoggingPrintf>
            xResult = -1;
 800e7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b6:	617b      	str	r3, [r7, #20]
 800e7b8:	e001      	b.n	800e7be <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800e7ba:	2301      	movs	r3, #1
 800e7bc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800e7be:	697b      	ldr	r3, [r7, #20]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3718      	adds	r7, #24
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}
 800e7c8:	08025a64 	.word	0x08025a64

0800e7cc <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800e7cc:	b590      	push	{r4, r7, lr}
 800e7ce:	b085      	sub	sp, #20
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e7da:	2b06      	cmp	r3, #6
 800e7dc:	d129      	bne.n	800e832 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d005      	beq.n	800e7f4 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f008 fcda 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f006 fee6 	bl	80155cc <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e806:	2b00      	cmp	r3, #0
 800e808:	d005      	beq.n	800e816 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e810:	4618      	mov	r0, r3
 800e812:	f7f7 fe63 	bl	80064dc <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d005      	beq.n	800e82c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e826:	4618      	mov	r0, r3
 800e828:	f7f7 fe58 	bl	80064dc <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800e82c:	6878      	ldr	r0, [r7, #4]
 800e82e:	f000 f8bd 	bl	800e9ac <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	69db      	ldr	r3, [r3, #28]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d008      	beq.n	800e84c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800e83a:	f7f5 fdfd 	bl	8004438 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	330c      	adds	r3, #12
 800e842:	4618      	mov	r0, r3
 800e844:	f7f4 fdae 	bl	80033a4 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800e848:	f7f5 fe04 	bl	8004454 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e852:	2b11      	cmp	r3, #17
 800e854:	d10f      	bne.n	800e876 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e856:	e00a      	b.n	800e86e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	4618      	mov	r0, r3
 800e864:	f7f4 fd9e 	bl	80033a4 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800e868:	68f8      	ldr	r0, [r7, #12]
 800e86a:	f008 fc9d 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e872:	2b00      	cmp	r3, #0
 800e874:	d1f0      	bne.n	800e858 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	685b      	ldr	r3, [r3, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d004      	beq.n	800e888 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	685b      	ldr	r3, [r3, #4]
 800e882:	4618      	mov	r0, r3
 800e884:	f7f4 fcac 	bl	80031e0 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e88e:	2b06      	cmp	r3, #6
 800e890:	d10c      	bne.n	800e8ac <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f816 	bl	800e8c4 <prvSocketProps>
 800e898:	4604      	mov	r4, r0
 800e89a:	f008 fcd7 	bl	801724c <uxGetNumberOfFreeNetworkBuffers>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	4b06      	ldr	r3, [pc, #24]	@ (800e8bc <vSocketClose+0xf0>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	4806      	ldr	r0, [pc, #24]	@ (800e8c0 <vSocketClose+0xf4>)
 800e8a8:	f013 fb26 	bl	8021ef8 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f7f7 fe15 	bl	80064dc <vPortFree>

    return NULL;
 800e8b2:	2300      	movs	r3, #0
} /* Tested */
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3714      	adds	r7, #20
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd90      	pop	{r4, r7, pc}
 800e8bc:	20001580 	.word	0x20001580
 800e8c0:	08025a84 	.word	0x08025a84

0800e8c4 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b086      	sub	sp, #24
 800e8c8:	af04      	add	r7, sp, #16
 800e8ca:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e8d2:	2b06      	cmp	r3, #6
 800e8d4:	d132      	bne.n	800e93c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	7a1b      	ldrb	r3, [r3, #8]
 800e8da:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e8de:	b2db      	uxtb	r3, r3
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d002      	beq.n	800e8ea <prvSocketProps+0x26>
 800e8e4:	2b01      	cmp	r3, #1
 800e8e6:	d014      	beq.n	800e912 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800e8e8:	e050      	b.n	800e98c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e8f2:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e8f8:	687a      	ldr	r2, [r7, #4]
 800e8fa:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800e8fe:	9202      	str	r2, [sp, #8]
 800e900:	9301      	str	r3, [sp, #4]
 800e902:	9000      	str	r0, [sp, #0]
 800e904:	460b      	mov	r3, r1
 800e906:	4a24      	ldr	r2, [pc, #144]	@ (800e998 <prvSocketProps+0xd4>)
 800e908:	215c      	movs	r1, #92	@ 0x5c
 800e90a:	4824      	ldr	r0, [pc, #144]	@ (800e99c <prvSocketProps+0xd8>)
 800e90c:	f014 fb20 	bl	8022f50 <snprintf>
                            break;
 800e910:	e03c      	b.n	800e98c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e91c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800e922:	687a      	ldr	r2, [r7, #4]
 800e924:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800e928:	9202      	str	r2, [sp, #8]
 800e92a:	9301      	str	r3, [sp, #4]
 800e92c:	9000      	str	r0, [sp, #0]
 800e92e:	460b      	mov	r3, r1
 800e930:	4a1b      	ldr	r2, [pc, #108]	@ (800e9a0 <prvSocketProps+0xdc>)
 800e932:	215c      	movs	r1, #92	@ 0x5c
 800e934:	4819      	ldr	r0, [pc, #100]	@ (800e99c <prvSocketProps+0xd8>)
 800e936:	f014 fb0b 	bl	8022f50 <snprintf>
                            break;
 800e93a:	e027      	b.n	800e98c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e942:	2b11      	cmp	r3, #17
 800e944:	d122      	bne.n	800e98c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	7a1b      	ldrb	r3, [r3, #8]
 800e94a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e94e:	b2db      	uxtb	r3, r3
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <prvSocketProps+0x96>
 800e954:	2b01      	cmp	r3, #1
 800e956:	d00c      	beq.n	800e972 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800e958:	e018      	b.n	800e98c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	4613      	mov	r3, r2
 800e966:	4a0f      	ldr	r2, [pc, #60]	@ (800e9a4 <prvSocketProps+0xe0>)
 800e968:	215c      	movs	r1, #92	@ 0x5c
 800e96a:	480c      	ldr	r0, [pc, #48]	@ (800e99c <prvSocketProps+0xd8>)
 800e96c:	f014 faf0 	bl	8022f50 <snprintf>
                        break;
 800e970:	e00c      	b.n	800e98c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800e97c:	9300      	str	r3, [sp, #0]
 800e97e:	4613      	mov	r3, r2
 800e980:	4a09      	ldr	r2, [pc, #36]	@ (800e9a8 <prvSocketProps+0xe4>)
 800e982:	215c      	movs	r1, #92	@ 0x5c
 800e984:	4805      	ldr	r0, [pc, #20]	@ (800e99c <prvSocketProps+0xd8>)
 800e986:	f014 fae3 	bl	8022f50 <snprintf>
                        break;
 800e98a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800e98c:	4b03      	ldr	r3, [pc, #12]	@ (800e99c <prvSocketProps+0xd8>)
    }
 800e98e:	4618      	mov	r0, r3
 800e990:	3708      	adds	r7, #8
 800e992:	46bd      	mov	sp, r7
 800e994:	bd80      	pop	{r7, pc}
 800e996:	bf00      	nop
 800e998:	08025ab8 	.word	0x08025ab8
 800e99c:	20001510 	.word	0x20001510
 800e9a0:	08025ad8 	.word	0x08025ad8
 800e9a4:	08025af8 	.word	0x08025af8
 800e9a8:	08025b08 	.word	0x08025b08

0800e9ac <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b088      	sub	sp, #32
 800e9b0:	af02      	add	r7, sp, #8
 800e9b2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800e9b4:	4b3c      	ldr	r3, [pc, #240]	@ (800eaa8 <prvTCPSetSocketCount+0xfc>)
 800e9b6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e9bc:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	d12b      	bne.n	800ea20 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	685b      	ldr	r3, [r3, #4]
 800e9cc:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800e9ce:	e022      	b.n	800ea16 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e9d0:	697b      	ldr	r3, [r7, #20]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800e9d6:	697b      	ldr	r3, [r7, #20]
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e9dc:	68bb      	ldr	r3, [r7, #8]
 800e9de:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e9e2:	2b01      	cmp	r3, #1
 800e9e4:	d017      	beq.n	800ea16 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e9e6:	68bb      	ldr	r3, [r7, #8]
 800e9e8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e9ea:	89fa      	ldrh	r2, [r7, #14]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d112      	bne.n	800ea16 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e9f0:	68bb      	ldr	r3, [r7, #8]
 800e9f2:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e9f6:	f003 0304 	and.w	r3, r3, #4
 800e9fa:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d107      	bne.n	800ea10 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ea06:	f003 0302 	and.w	r3, r3, #2
 800ea0a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d002      	beq.n	800ea16 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800ea10:	68b8      	ldr	r0, [r7, #8]
 800ea12:	f7ff fedb 	bl	800e7cc <vSocketClose>
            while( pxIterator != pxEnd )
 800ea16:	697a      	ldr	r2, [r7, #20]
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d1d8      	bne.n	800e9d0 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800ea1e:	e03e      	b.n	800ea9e <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800ea20:	693b      	ldr	r3, [r7, #16]
 800ea22:	685b      	ldr	r3, [r3, #4]
 800ea24:	617b      	str	r3, [r7, #20]
 800ea26:	e036      	b.n	800ea96 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ea28:	697b      	ldr	r3, [r7, #20]
 800ea2a:	68db      	ldr	r3, [r3, #12]
 800ea2c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d12b      	bne.n	800ea90 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800ea3c:	89fa      	ldrh	r2, [r7, #14]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	d126      	bne.n	800ea90 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d021      	beq.n	800ea90 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ea52:	3b01      	subs	r3, #1
 800ea54:	b29a      	uxth	r2, r3
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ea60:	4619      	mov	r1, r3
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ea68:	461a      	mov	r2, r3
 800ea6a:	68bb      	ldr	r3, [r7, #8]
 800ea6c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800ea70:	4618      	mov	r0, r3
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d101      	bne.n	800ea80 <prvTCPSetSocketCount+0xd4>
 800ea7c:	4b0b      	ldr	r3, [pc, #44]	@ (800eaac <prvTCPSetSocketCount+0x100>)
 800ea7e:	e000      	b.n	800ea82 <prvTCPSetSocketCount+0xd6>
 800ea80:	4b0b      	ldr	r3, [pc, #44]	@ (800eab0 <prvTCPSetSocketCount+0x104>)
 800ea82:	9300      	str	r3, [sp, #0]
 800ea84:	4603      	mov	r3, r0
 800ea86:	480b      	ldr	r0, [pc, #44]	@ (800eab4 <prvTCPSetSocketCount+0x108>)
 800ea88:	f013 fa36 	bl	8021ef8 <lUDPLoggingPrintf>
                    break;
 800ea8c:	bf00      	nop
    }
 800ea8e:	e006      	b.n	800ea9e <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	693b      	ldr	r3, [r7, #16]
 800ea9a:	429a      	cmp	r2, r3
 800ea9c:	d1c4      	bne.n	800ea28 <prvTCPSetSocketCount+0x7c>
    }
 800ea9e:	bf00      	nop
 800eaa0:	3718      	adds	r7, #24
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	20001588 	.word	0x20001588
 800eaac:	08025b18 	.word	0x08025b18
 800eab0:	08025b1c 	.word	0x08025b1c
 800eab4:	08025b20 	.word	0x08025b20

0800eab8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b086      	sub	sp, #24
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	60f8      	str	r0, [r7, #12]
 800eac0:	60b9      	str	r1, [r7, #8]
 800eac2:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eaca:	2b06      	cmp	r3, #6
 800eacc:	d00d      	beq.n	800eaea <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	2b04      	cmp	r3, #4
 800ead2:	d101      	bne.n	800ead8 <prvSockopt_so_buffer+0x20>
 800ead4:	4b23      	ldr	r3, [pc, #140]	@ (800eb64 <prvSockopt_so_buffer+0xac>)
 800ead6:	e000      	b.n	800eada <prvSockopt_so_buffer+0x22>
 800ead8:	4b23      	ldr	r3, [pc, #140]	@ (800eb68 <prvSockopt_so_buffer+0xb0>)
 800eada:	4619      	mov	r1, r3
 800eadc:	4823      	ldr	r0, [pc, #140]	@ (800eb6c <prvSockopt_so_buffer+0xb4>)
 800eade:	f013 fa0b 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eae2:	f06f 0315 	mvn.w	r3, #21
 800eae6:	617b      	str	r3, [r7, #20]
 800eae8:	e036      	b.n	800eb58 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800eaea:	68bb      	ldr	r3, [r7, #8]
 800eaec:	2b04      	cmp	r3, #4
 800eaee:	d104      	bne.n	800eafa <prvSockopt_so_buffer+0x42>
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d107      	bne.n	800eb0a <prvSockopt_so_buffer+0x52>
 800eafa:	68bb      	ldr	r3, [r7, #8]
 800eafc:	2b05      	cmp	r3, #5
 800eafe:	d112      	bne.n	800eb26 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d00d      	beq.n	800eb26 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b04      	cmp	r3, #4
 800eb0e:	d101      	bne.n	800eb14 <prvSockopt_so_buffer+0x5c>
 800eb10:	4b14      	ldr	r3, [pc, #80]	@ (800eb64 <prvSockopt_so_buffer+0xac>)
 800eb12:	e000      	b.n	800eb16 <prvSockopt_so_buffer+0x5e>
 800eb14:	4b14      	ldr	r3, [pc, #80]	@ (800eb68 <prvSockopt_so_buffer+0xb0>)
 800eb16:	4619      	mov	r1, r3
 800eb18:	4815      	ldr	r0, [pc, #84]	@ (800eb70 <prvSockopt_so_buffer+0xb8>)
 800eb1a:	f013 f9ed 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eb1e:	f06f 0315 	mvn.w	r3, #21
 800eb22:	617b      	str	r3, [r7, #20]
 800eb24:	e018      	b.n	800eb58 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800eb2c:	68bb      	ldr	r3, [r7, #8]
 800eb2e:	2b04      	cmp	r3, #4
 800eb30:	d10c      	bne.n	800eb4c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800eb38:	4619      	mov	r1, r3
 800eb3a:	6938      	ldr	r0, [r7, #16]
 800eb3c:	f7fb fe92 	bl	800a864 <FreeRTOS_round_up>
 800eb40:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	693a      	ldr	r2, [r7, #16]
 800eb46:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800eb4a:	e003      	b.n	800eb54 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	693a      	ldr	r2, [r7, #16]
 800eb50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800eb58:	697b      	ldr	r3, [r7, #20]
    }
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3718      	adds	r7, #24
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}
 800eb62:	bf00      	nop
 800eb64:	08025b4c 	.word	0x08025b4c
 800eb68:	08025b50 	.word	0x08025b50
 800eb6c:	08025b54 	.word	0x08025b54
 800eb70:	08025b78 	.word	0x08025b78

0800eb74 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800eb74:	b480      	push	{r7}
 800eb76:	b087      	sub	sp, #28
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	60f8      	str	r0, [r7, #12]
 800eb7c:	60b9      	str	r1, [r7, #8]
 800eb7e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800eb80:	2300      	movs	r3, #0
 800eb82:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	2b09      	cmp	r3, #9
 800eb88:	d002      	beq.n	800eb90 <prvSetOptionCallback+0x1c>
 800eb8a:	68bb      	ldr	r3, [r7, #8]
 800eb8c:	2b0a      	cmp	r3, #10
 800eb8e:	d102      	bne.n	800eb96 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800eb90:	2311      	movs	r3, #17
 800eb92:	613b      	str	r3, [r7, #16]
 800eb94:	e001      	b.n	800eb9a <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800eb96:	2306      	movs	r3, #6
 800eb98:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800eba0:	693b      	ldr	r3, [r7, #16]
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d002      	beq.n	800ebae <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eba8:	f06f 0315 	mvn.w	r3, #21
 800ebac:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d131      	bne.n	800ec18 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800ebb4:	68bb      	ldr	r3, [r7, #8]
 800ebb6:	3b06      	subs	r3, #6
 800ebb8:	2b04      	cmp	r3, #4
 800ebba:	d829      	bhi.n	800ec10 <prvSetOptionCallback+0x9c>
 800ebbc:	a201      	add	r2, pc, #4	@ (adr r2, 800ebc4 <prvSetOptionCallback+0x50>)
 800ebbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebc2:	bf00      	nop
 800ebc4:	0800ebd9 	.word	0x0800ebd9
 800ebc8:	0800ebe5 	.word	0x0800ebe5
 800ebcc:	0800ebf1 	.word	0x0800ebf1
 800ebd0:	0800ebfd 	.word	0x0800ebfd
 800ebd4:	0800ec07 	.word	0x0800ec07
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800ebe2:	e019      	b.n	800ec18 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	685a      	ldr	r2, [r3, #4]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800ebee:	e013      	b.n	800ec18 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	689a      	ldr	r2, [r3, #8]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800ebfa:	e00d      	b.n	800ec18 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	68da      	ldr	r2, [r3, #12]
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800ec04:	e008      	b.n	800ec18 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	691a      	ldr	r2, [r3, #16]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800ec0e:	e003      	b.n	800ec18 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800ec10:	f06f 0315 	mvn.w	r3, #21
 800ec14:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800ec16:	bf00      	nop
            }
        }

        return xReturn;
 800ec18:	697b      	ldr	r3, [r7, #20]
    }
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	371c      	adds	r7, #28
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop

0800ec28 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b086      	sub	sp, #24
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ec32:	f06f 0315 	mvn.w	r3, #21
 800ec36:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	3354      	adds	r3, #84	@ 0x54
 800ec3c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ec44:	2b06      	cmp	r3, #6
 800ec46:	d003      	beq.n	800ec50 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800ec48:	4825      	ldr	r0, [pc, #148]	@ (800ece0 <prvSetOptionTCPWindows+0xb8>)
 800ec4a:	f013 f955 	bl	8021ef8 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800ec4e:	e042      	b.n	800ecd6 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	461a      	mov	r2, r3
 800ec58:	2104      	movs	r1, #4
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f7ff ff2c 	bl	800eab8 <prvSockopt_so_buffer>
 800ec60:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d133      	bne.n	800ecd0 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	3308      	adds	r3, #8
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	2105      	movs	r1, #5
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff ff21 	bl	800eab8 <prvSockopt_so_buffer>
 800ec76:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d12a      	bne.n	800ecd4 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	68db      	ldr	r3, [r3, #12]
 800ec82:	461a      	mov	r2, r3
 800ec84:	693b      	ldr	r3, [r7, #16]
 800ec86:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	461a      	mov	r2, r3
 800ec90:	693b      	ldr	r3, [r7, #16]
 800ec92:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800ec9c:	f003 0301 	and.w	r3, r3, #1
 800eca0:	b2db      	uxtb	r3, r3
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d017      	beq.n	800ecd6 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800ecac:	693a      	ldr	r2, [r7, #16]
 800ecae:	8bd2      	ldrh	r2, [r2, #30]
 800ecb0:	fb03 f202 	mul.w	r2, r3, r2
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800ecba:	693b      	ldr	r3, [r7, #16]
 800ecbc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ecc0:	693a      	ldr	r2, [r7, #16]
 800ecc2:	8bd2      	ldrh	r2, [r2, #30]
 800ecc4:	fb03 f202 	mul.w	r2, r3, r2
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800ecce:	e002      	b.n	800ecd6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800ecd0:	bf00      	nop
 800ecd2:	e000      	b.n	800ecd6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800ecd4:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800ecd6:	697b      	ldr	r3, [r7, #20]
    }
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3718      	adds	r7, #24
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}
 800ece0:	08025ba0 	.word	0x08025ba0

0800ece4 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b084      	sub	sp, #16
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ecee:	f06f 0315 	mvn.w	r3, #21
 800ecf2:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800ecf4:	683b      	ldr	r3, [r7, #0]
 800ecf6:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ecfe:	2b06      	cmp	r3, #6
 800ed00:	d003      	beq.n	800ed0a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800ed02:	4813      	ldr	r0, [pc, #76]	@ (800ed50 <prvSetOptionLowHighWater+0x6c>)
 800ed04:	f013 f8f8 	bl	8021ef8 <lUDPLoggingPrintf>
 800ed08:	e01c      	b.n	800ed44 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	681a      	ldr	r2, [r3, #0]
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d206      	bcs.n	800ed24 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	685a      	ldr	r2, [r3, #4]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d903      	bls.n	800ed2c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800ed24:	480b      	ldr	r0, [pc, #44]	@ (800ed54 <prvSetOptionLowHighWater+0x70>)
 800ed26:	f013 f8e7 	bl	8021ef8 <lUDPLoggingPrintf>
 800ed2a:	e00b      	b.n	800ed44 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800ed36:	68bb      	ldr	r3, [r7, #8]
 800ed38:	685a      	ldr	r2, [r3, #4]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800ed40:	2300      	movs	r3, #0
 800ed42:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ed44:	68fb      	ldr	r3, [r7, #12]
    }
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	08025bc4 	.word	0x08025bc4
 800ed54:	08025bf8 	.word	0x08025bf8

0800ed58 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	6078      	str	r0, [r7, #4]
 800ed60:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ed62:	f06f 0315 	mvn.w	r3, #21
 800ed66:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ed6e:	2b06      	cmp	r3, #6
 800ed70:	d126      	bne.n	800edc0 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d007      	beq.n	800ed8a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800ed7a:	687a      	ldr	r2, [r7, #4]
 800ed7c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800ed80:	f043 0302 	orr.w	r3, r3, #2
 800ed84:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800ed88:	e006      	b.n	800ed98 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800ed90:	f36f 0341 	bfc	r3, #1, #1
 800ed94:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ed9e:	2b04      	cmp	r3, #4
 800eda0:	d90c      	bls.n	800edbc <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800eda2:	6878      	ldr	r0, [r7, #4]
 800eda4:	f001 faba 	bl	801031c <FreeRTOS_tx_size>
 800eda8:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d006      	beq.n	800edbc <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800edb6:	2006      	movs	r0, #6
 800edb8:	f7fa fc1c 	bl	80095f4 <xSendEventToIPTask>
            }

            xReturn = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800edc0:	68fb      	ldr	r3, [r7, #12]
    }
 800edc2:	4618      	mov	r0, r3
 800edc4:	3710      	adds	r7, #16
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}

0800edca <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800edca:	b580      	push	{r7, lr}
 800edcc:	b084      	sub	sp, #16
 800edce:	af00      	add	r7, sp, #0
 800edd0:	6078      	str	r0, [r7, #4]
 800edd2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800edd4:	f06f 0315 	mvn.w	r3, #21
 800edd8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ede0:	2b06      	cmp	r3, #6
 800ede2:	d122      	bne.n	800ee2a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d007      	beq.n	800edfc <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800edec:	687a      	ldr	r2, [r7, #4]
 800edee:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800edf2:	f043 0304 	orr.w	r3, r3, #4
 800edf6:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800edfa:	e006      	b.n	800ee0a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800ee02:	f36f 0382 	bfc	r3, #2, #1
 800ee06:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800ee0a:	687a      	ldr	r2, [r7, #4]
 800ee0c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800ee10:	f043 0301 	orr.w	r3, r3, #1
 800ee14:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	2201      	movs	r2, #1
 800ee1c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800ee20:	2006      	movs	r0, #6
 800ee22:	f7fa fbe7 	bl	80095f4 <xSendEventToIPTask>
            xReturn = 0;
 800ee26:	2300      	movs	r3, #0
 800ee28:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ee2a:	68fb      	ldr	r3, [r7, #12]
    }
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3710      	adds	r7, #16
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}

0800ee34 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800ee34:	b480      	push	{r7}
 800ee36:	b087      	sub	sp, #28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	60f8      	str	r0, [r7, #12]
 800ee3c:	60b9      	str	r1, [r7, #8]
 800ee3e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800ee40:	68bb      	ldr	r3, [r7, #8]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d110      	bne.n	800ee6e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee52:	2b11      	cmp	r3, #17
 800ee54:	d107      	bne.n	800ee66 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d902      	bls.n	800ee66 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800ee60:	f241 3388 	movw	r3, #5000	@ 0x1388
 800ee64:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	697a      	ldr	r2, [r7, #20]
 800ee6a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800ee6c:	e002      	b.n	800ee74 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	697a      	ldr	r2, [r7, #20]
 800ee72:	621a      	str	r2, [r3, #32]
}
 800ee74:	bf00      	nop
 800ee76:	371c      	adds	r7, #28
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr

0800ee80 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800ee80:	b480      	push	{r7}
 800ee82:	b085      	sub	sp, #20
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
 800ee88:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ee8a:	f06f 0315 	mvn.w	r3, #21
 800ee8e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ee96:	2b06      	cmp	r3, #6
 800ee98:	d114      	bne.n	800eec4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800ee9a:	683b      	ldr	r3, [r7, #0]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d007      	beq.n	800eeb2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800eea2:	687a      	ldr	r2, [r7, #4]
 800eea4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800eea8:	f043 0308 	orr.w	r3, r3, #8
 800eeac:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800eeb0:	e006      	b.n	800eec0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800eeb2:	687a      	ldr	r2, [r7, #4]
 800eeb4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800eeb8:	f36f 03c3 	bfc	r3, #3, #1
 800eebc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800eec0:	2300      	movs	r3, #0
 800eec2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800eec4:	68fb      	ldr	r3, [r7, #12]
    }
 800eec6:	4618      	mov	r0, r3
 800eec8:	3714      	adds	r7, #20
 800eeca:	46bd      	mov	sp, r7
 800eecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed0:	4770      	bx	lr

0800eed2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800eed2:	b480      	push	{r7}
 800eed4:	b085      	sub	sp, #20
 800eed6:	af00      	add	r7, sp, #0
 800eed8:	6078      	str	r0, [r7, #4]
 800eeda:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800eedc:	f06f 0315 	mvn.w	r3, #21
 800eee0:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800eee8:	2b06      	cmp	r3, #6
 800eeea:	d114      	bne.n	800ef16 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d007      	beq.n	800ef04 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800eef4:	687a      	ldr	r2, [r7, #4]
 800eef6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800eefa:	f043 0310 	orr.w	r3, r3, #16
 800eefe:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800ef02:	e006      	b.n	800ef12 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ef0a:	f36f 1304 	bfc	r3, #4, #1
 800ef0e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800ef12:	2300      	movs	r3, #0
 800ef14:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800ef16:	68fb      	ldr	r3, [r7, #12]
    }
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3714      	adds	r7, #20
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef22:	4770      	bx	lr

0800ef24 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b086      	sub	sp, #24
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	60f8      	str	r0, [r7, #12]
 800ef2c:	60b9      	str	r1, [r7, #8]
 800ef2e:	607a      	str	r2, [r7, #4]
 800ef30:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ef32:	f06f 0315 	mvn.w	r3, #21
 800ef36:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800ef3c:	6938      	ldr	r0, [r7, #16]
 800ef3e:	f001 fa59 	bl	80103f4 <xSocketValid>
 800ef42:	4603      	mov	r3, r0
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	f040 8093 	bne.w	800f070 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2b12      	cmp	r3, #18
 800ef4e:	f200 808b 	bhi.w	800f068 <FreeRTOS_setsockopt+0x144>
 800ef52:	a201      	add	r2, pc, #4	@ (adr r2, 800ef58 <FreeRTOS_setsockopt+0x34>)
 800ef54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef58:	0800efa5 	.word	0x0800efa5
 800ef5c:	0800efb5 	.word	0x0800efb5
 800ef60:	0800efc5 	.word	0x0800efc5
 800ef64:	0800f005 	.word	0x0800f005
 800ef68:	0800f01f 	.word	0x0800f01f
 800ef6c:	0800f01f 	.word	0x0800f01f
 800ef70:	0800eff7 	.word	0x0800eff7
 800ef74:	0800eff7 	.word	0x0800eff7
 800ef78:	0800eff7 	.word	0x0800eff7
 800ef7c:	0800eff7 	.word	0x0800eff7
 800ef80:	0800eff7 	.word	0x0800eff7
 800ef84:	0800f039 	.word	0x0800f039
 800ef88:	0800f045 	.word	0x0800f045
 800ef8c:	0800f02d 	.word	0x0800f02d
 800ef90:	0800f051 	.word	0x0800f051
 800ef94:	0800f05d 	.word	0x0800f05d
 800ef98:	0800f069 	.word	0x0800f069
 800ef9c:	0800f069 	.word	0x0800f069
 800efa0:	0800f013 	.word	0x0800f013
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800efa4:	2200      	movs	r2, #0
 800efa6:	6839      	ldr	r1, [r7, #0]
 800efa8:	6938      	ldr	r0, [r7, #16]
 800efaa:	f7ff ff43 	bl	800ee34 <prvSetOptionTimeout>
                xReturn = 0;
 800efae:	2300      	movs	r3, #0
 800efb0:	617b      	str	r3, [r7, #20]
                break;
 800efb2:	e060      	b.n	800f076 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800efb4:	2201      	movs	r2, #1
 800efb6:	6839      	ldr	r1, [r7, #0]
 800efb8:	6938      	ldr	r0, [r7, #16]
 800efba:	f7ff ff3b 	bl	800ee34 <prvSetOptionTimeout>
                xReturn = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	617b      	str	r3, [r7, #20]
                break;
 800efc2:	e058      	b.n	800f076 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d109      	bne.n	800efde <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800efca:	693b      	ldr	r3, [r7, #16]
 800efcc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800efd0:	f023 0302 	bic.w	r3, r3, #2
 800efd4:	b2da      	uxtb	r2, r3
 800efd6:	693b      	ldr	r3, [r7, #16]
 800efd8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800efdc:	e008      	b.n	800eff0 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800efe4:	f043 0302 	orr.w	r3, r3, #2
 800efe8:	b2da      	uxtb	r2, r3
 800efea:	693b      	ldr	r3, [r7, #16]
 800efec:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800eff0:	2300      	movs	r3, #0
 800eff2:	617b      	str	r3, [r7, #20]
                break;
 800eff4:	e03f      	b.n	800f076 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	6879      	ldr	r1, [r7, #4]
 800effa:	6938      	ldr	r0, [r7, #16]
 800effc:	f7ff fdba 	bl	800eb74 <prvSetOptionCallback>
 800f000:	6178      	str	r0, [r7, #20]
                        break;
 800f002:	e038      	b.n	800f076 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	681a      	ldr	r2, [r3, #0]
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800f00c:	2300      	movs	r3, #0
 800f00e:	617b      	str	r3, [r7, #20]
                        break;
 800f010:	e031      	b.n	800f076 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800f012:	6839      	ldr	r1, [r7, #0]
 800f014:	6938      	ldr	r0, [r7, #16]
 800f016:	f7ff fe65 	bl	800ece4 <prvSetOptionLowHighWater>
 800f01a:	6178      	str	r0, [r7, #20]
                        break;
 800f01c:	e02b      	b.n	800f076 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800f01e:	683a      	ldr	r2, [r7, #0]
 800f020:	6879      	ldr	r1, [r7, #4]
 800f022:	6938      	ldr	r0, [r7, #16]
 800f024:	f7ff fd48 	bl	800eab8 <prvSockopt_so_buffer>
 800f028:	6178      	str	r0, [r7, #20]
                        break;
 800f02a:	e024      	b.n	800f076 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6938      	ldr	r0, [r7, #16]
 800f030:	f7ff fdfa 	bl	800ec28 <prvSetOptionTCPWindows>
 800f034:	6178      	str	r0, [r7, #20]
                        break;
 800f036:	e01e      	b.n	800f076 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800f038:	6839      	ldr	r1, [r7, #0]
 800f03a:	6938      	ldr	r0, [r7, #16]
 800f03c:	f7ff ff20 	bl	800ee80 <prvSetOptionReuseListenSocket>
 800f040:	6178      	str	r0, [r7, #20]
                        break;
 800f042:	e018      	b.n	800f076 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800f044:	6839      	ldr	r1, [r7, #0]
 800f046:	6938      	ldr	r0, [r7, #16]
 800f048:	f7ff ff43 	bl	800eed2 <prvSetOptionCloseAfterSend>
 800f04c:	6178      	str	r0, [r7, #20]
                        break;
 800f04e:	e012      	b.n	800f076 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800f050:	6839      	ldr	r1, [r7, #0]
 800f052:	6938      	ldr	r0, [r7, #16]
 800f054:	f7ff fe80 	bl	800ed58 <prvSetOptionSetFullSize>
 800f058:	6178      	str	r0, [r7, #20]
                        break;
 800f05a:	e00c      	b.n	800f076 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800f05c:	6839      	ldr	r1, [r7, #0]
 800f05e:	6938      	ldr	r0, [r7, #16]
 800f060:	f7ff feb3 	bl	800edca <prvSetOptionStopRX>
 800f064:	6178      	str	r0, [r7, #20]
                        break;
 800f066:	e006      	b.n	800f076 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800f068:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800f06c:	617b      	str	r3, [r7, #20]
                break;
 800f06e:	e002      	b.n	800f076 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f070:	f06f 0315 	mvn.w	r3, #21
 800f074:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800f076:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f078:	4618      	mov	r0, r3
 800f07a:	3718      	adds	r7, #24
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b086      	sub	sp, #24
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800f088:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800f08c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800f08e:	89fb      	ldrh	r3, [r7, #14]
 800f090:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800f092:	2300      	movs	r3, #0
 800f094:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800f096:	2300      	movs	r3, #0
 800f098:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	2b06      	cmp	r3, #6
 800f09e:	d102      	bne.n	800f0a6 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800f0a0:	4b21      	ldr	r3, [pc, #132]	@ (800f128 <prvGetPrivatePortNumber+0xa8>)
 800f0a2:	613b      	str	r3, [r7, #16]
 800f0a4:	e001      	b.n	800f0aa <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800f0a6:	4b21      	ldr	r3, [pc, #132]	@ (800f12c <prvGetPrivatePortNumber+0xac>)
 800f0a8:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800f0aa:	f107 0308 	add.w	r3, r7, #8
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7f2 fd0c 	bl	8001acc <xApplicationGetRandomNumber>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d030      	beq.n	800f11c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800f0be:	89fa      	ldrh	r2, [r7, #14]
 800f0c0:	fbb3 f1f2 	udiv	r1, r3, r2
 800f0c4:	fb01 f202 	mul.w	r2, r1, r2
 800f0c8:	1a9b      	subs	r3, r3, r2
 800f0ca:	b29b      	uxth	r3, r3
 800f0cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800f0d0:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800f0d2:	8abb      	ldrh	r3, [r7, #20]
 800f0d4:	021b      	lsls	r3, r3, #8
 800f0d6:	b21a      	sxth	r2, r3
 800f0d8:	8abb      	ldrh	r3, [r7, #20]
 800f0da:	0a1b      	lsrs	r3, r3, #8
 800f0dc:	b29b      	uxth	r3, r3
 800f0de:	b21b      	sxth	r3, r3
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	b21b      	sxth	r3, r3
 800f0e4:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	6938      	ldr	r0, [r7, #16]
 800f0ea:	f000 f821 	bl	800f130 <pxListFindListItemWithValue>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d10a      	bne.n	800f10a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800f0f4:	8abb      	ldrh	r3, [r7, #20]
 800f0f6:	021b      	lsls	r3, r3, #8
 800f0f8:	b21a      	sxth	r2, r3
 800f0fa:	8abb      	ldrh	r3, [r7, #20]
 800f0fc:	0a1b      	lsrs	r3, r3, #8
 800f0fe:	b29b      	uxth	r3, r3
 800f100:	b21b      	sxth	r3, r3
 800f102:	4313      	orrs	r3, r2
 800f104:	b21b      	sxth	r3, r3
 800f106:	82bb      	strh	r3, [r7, #20]
            break;
 800f108:	e009      	b.n	800f11e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800f10a:	2300      	movs	r3, #0
 800f10c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800f10e:	8afb      	ldrh	r3, [r7, #22]
 800f110:	3b01      	subs	r3, #1
 800f112:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800f114:	8afb      	ldrh	r3, [r7, #22]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d1c7      	bne.n	800f0aa <prvGetPrivatePortNumber+0x2a>
 800f11a:	e000      	b.n	800f11e <prvGetPrivatePortNumber+0x9e>
            break;
 800f11c:	bf00      	nop

    return usResult;
 800f11e:	8abb      	ldrh	r3, [r7, #20]
}
 800f120:	4618      	mov	r0, r3
 800f122:	3718      	adds	r7, #24
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	20001580 	.word	0x20001580
 800f12c:	2000156c 	.word	0x2000156c

0800f130 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800f13a:	2300      	movs	r3, #0
 800f13c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800f13e:	f7fa fe0b 	bl	8009d58 <xIPIsNetworkTaskReady>
 800f142:	4603      	mov	r3, r0
 800f144:	2b00      	cmp	r3, #0
 800f146:	d018      	beq.n	800f17a <pxListFindListItemWithValue+0x4a>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d015      	beq.n	800f17a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	3308      	adds	r3, #8
 800f152:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	613b      	str	r3, [r7, #16]
 800f15a:	e00a      	b.n	800f172 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800f15c:	693b      	ldr	r3, [r7, #16]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	429a      	cmp	r2, r3
 800f164:	d102      	bne.n	800f16c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800f166:	693b      	ldr	r3, [r7, #16]
 800f168:	617b      	str	r3, [r7, #20]
                break;
 800f16a:	e006      	b.n	800f17a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f16c:	693b      	ldr	r3, [r7, #16]
 800f16e:	685b      	ldr	r3, [r3, #4]
 800f170:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800f172:	693a      	ldr	r2, [r7, #16]
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	429a      	cmp	r2, r3
 800f178:	d1f0      	bne.n	800f15c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800f17a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800f17c:	4618      	mov	r0, r3
 800f17e:	3718      	adds	r7, #24
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}

0800f184 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b084      	sub	sp, #16
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800f18c:	2300      	movs	r3, #0
 800f18e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800f190:	6879      	ldr	r1, [r7, #4]
 800f192:	480b      	ldr	r0, [pc, #44]	@ (800f1c0 <pxUDPSocketLookup+0x3c>)
 800f194:	f7ff ffcc 	bl	800f130 <pxListFindListItemWithValue>
 800f198:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d00a      	beq.n	800f1b6 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800f1a0:	68bb      	ldr	r3, [r7, #8]
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d104      	bne.n	800f1b6 <pxUDPSocketLookup+0x32>
 800f1ac:	f640 4111 	movw	r1, #3089	@ 0xc11
 800f1b0:	4804      	ldr	r0, [pc, #16]	@ (800f1c4 <pxUDPSocketLookup+0x40>)
 800f1b2:	f7f2 fbc1 	bl	8001938 <vAssertCalled>
    }

    return pxSocket;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3710      	adds	r7, #16
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	2000156c 	.word	0x2000156c
 800f1c4:	080258e4 	.word	0x080258e4

0800f1c8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b08b      	sub	sp, #44	@ 0x2c
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800f1d6:	1d3b      	adds	r3, r7, #4
 800f1d8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800f1da:	683b      	ldr	r3, [r7, #0]
 800f1dc:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f1de:	2300      	movs	r3, #0
 800f1e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800f1e2:	e062      	b.n	800f2aa <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800f1e4:	697a      	ldr	r2, [r7, #20]
 800f1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1e8:	4413      	add	r3, r2
 800f1ea:	781b      	ldrb	r3, [r3, #0]
 800f1ec:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800f1ee:	2302      	movs	r3, #2
 800f1f0:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f1f2:	7ffa      	ldrb	r2, [r7, #31]
 800f1f4:	4b32      	ldr	r3, [pc, #200]	@ (800f2c0 <FreeRTOS_inet_ntoa+0xf8>)
 800f1f6:	fba3 1302 	umull	r1, r3, r3, r2
 800f1fa:	08d9      	lsrs	r1, r3, #3
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	440b      	add	r3, r1
 800f202:	005b      	lsls	r3, r3, #1
 800f204:	1ad3      	subs	r3, r2, r3
 800f206:	b2d9      	uxtb	r1, r3
 800f208:	f107 020c 	add.w	r2, r7, #12
 800f20c:	69bb      	ldr	r3, [r7, #24]
 800f20e:	4413      	add	r3, r2
 800f210:	460a      	mov	r2, r1
 800f212:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800f214:	7ffb      	ldrb	r3, [r7, #31]
 800f216:	4a2a      	ldr	r2, [pc, #168]	@ (800f2c0 <FreeRTOS_inet_ntoa+0xf8>)
 800f218:	fba2 2303 	umull	r2, r3, r2, r3
 800f21c:	08db      	lsrs	r3, r3, #3
 800f21e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800f220:	69bb      	ldr	r3, [r7, #24]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d003      	beq.n	800f22e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800f226:	69bb      	ldr	r3, [r7, #24]
 800f228:	3b01      	subs	r3, #1
 800f22a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800f22c:	e7e1      	b.n	800f1f2 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800f22e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800f230:	7ffb      	ldrb	r3, [r7, #31]
 800f232:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f234:	2300      	movs	r3, #0
 800f236:	61bb      	str	r3, [r7, #24]
 800f238:	e009      	b.n	800f24e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800f23a:	f107 020c 	add.w	r2, r7, #12
 800f23e:	69bb      	ldr	r3, [r7, #24]
 800f240:	4413      	add	r3, r2
 800f242:	781b      	ldrb	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d106      	bne.n	800f256 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800f248:	69bb      	ldr	r3, [r7, #24]
 800f24a:	3301      	adds	r3, #1
 800f24c:	61bb      	str	r3, [r7, #24]
 800f24e:	69bb      	ldr	r3, [r7, #24]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d9f2      	bls.n	800f23a <FreeRTOS_inet_ntoa+0x72>
 800f254:	e012      	b.n	800f27c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800f256:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f258:	e010      	b.n	800f27c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800f25a:	f107 020c 	add.w	r2, r7, #12
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	4413      	add	r3, r2
 800f262:	781a      	ldrb	r2, [r3, #0]
 800f264:	6839      	ldr	r1, [r7, #0]
 800f266:	6a3b      	ldr	r3, [r7, #32]
 800f268:	440b      	add	r3, r1
 800f26a:	3230      	adds	r2, #48	@ 0x30
 800f26c:	b2d2      	uxtb	r2, r2
 800f26e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800f270:	6a3b      	ldr	r3, [r7, #32]
 800f272:	3301      	adds	r3, #1
 800f274:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800f276:	69bb      	ldr	r3, [r7, #24]
 800f278:	3301      	adds	r3, #1
 800f27a:	61bb      	str	r3, [r7, #24]
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	2b02      	cmp	r3, #2
 800f280:	d9eb      	bls.n	800f25a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800f282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f284:	2b02      	cmp	r3, #2
 800f286:	d805      	bhi.n	800f294 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800f288:	683a      	ldr	r2, [r7, #0]
 800f28a:	6a3b      	ldr	r3, [r7, #32]
 800f28c:	4413      	add	r3, r2
 800f28e:	222e      	movs	r2, #46	@ 0x2e
 800f290:	701a      	strb	r2, [r3, #0]
 800f292:	e004      	b.n	800f29e <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800f294:	683a      	ldr	r2, [r7, #0]
 800f296:	6a3b      	ldr	r3, [r7, #32]
 800f298:	4413      	add	r3, r2
 800f29a:	2200      	movs	r2, #0
 800f29c:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800f29e:	6a3b      	ldr	r3, [r7, #32]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800f2a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a6:	3301      	adds	r3, #1
 800f2a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800f2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2ac:	2b03      	cmp	r3, #3
 800f2ae:	d999      	bls.n	800f1e4 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800f2b0:	693b      	ldr	r3, [r7, #16]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	372c      	adds	r7, #44	@ 0x2c
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	cccccccd 	.word	0xcccccccd

0800f2c4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
 800f2d0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	2b02      	cmp	r3, #2
 800f2d6:	d003      	beq.n	800f2e0 <FreeRTOS_inet_ntop+0x1c>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2b0a      	cmp	r3, #10
 800f2dc:	d007      	beq.n	800f2ee <FreeRTOS_inet_ntop+0x2a>
 800f2de:	e00d      	b.n	800f2fc <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800f2e0:	683a      	ldr	r2, [r7, #0]
 800f2e2:	6879      	ldr	r1, [r7, #4]
 800f2e4:	68b8      	ldr	r0, [r7, #8]
 800f2e6:	f7fb fc8d 	bl	800ac04 <FreeRTOS_inet_ntop4>
 800f2ea:	6178      	str	r0, [r7, #20]
                break;
 800f2ec:	e009      	b.n	800f302 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800f2ee:	683a      	ldr	r2, [r7, #0]
 800f2f0:	6879      	ldr	r1, [r7, #4]
 800f2f2:	68b8      	ldr	r0, [r7, #8]
 800f2f4:	f7fc f9c1 	bl	800b67a <FreeRTOS_inet_ntop6>
 800f2f8:	6178      	str	r0, [r7, #20]
                break;
 800f2fa:	e002      	b.n	800f302 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	617b      	str	r3, [r7, #20]
            break;
 800f300:	bf00      	nop
    }

    return pcResult;
 800f302:	697b      	ldr	r3, [r7, #20]
}
 800f304:	4618      	mov	r0, r3
 800f306:	3718      	adds	r7, #24
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b084      	sub	sp, #16
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	7a1b      	ldrb	r3, [r3, #8]
 800f31e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f322:	b2db      	uxtb	r3, r3
 800f324:	2b00      	cmp	r3, #0
 800f326:	d002      	beq.n	800f32e <FreeRTOS_GetLocalAddress+0x22>
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d02a      	beq.n	800f382 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800f32c:	e044      	b.n	800f3b8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	2202      	movs	r2, #2
 800f332:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	2218      	movs	r2, #24
 800f338:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f33e:	061a      	lsls	r2, r3, #24
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f344:	021b      	lsls	r3, r3, #8
 800f346:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f34a:	431a      	orrs	r2, r3
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f350:	0a1b      	lsrs	r3, r3, #8
 800f352:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f356:	431a      	orrs	r2, r3
 800f358:	68fb      	ldr	r3, [r7, #12]
 800f35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f35c:	0e1b      	lsrs	r3, r3, #24
 800f35e:	431a      	orrs	r2, r3
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f368:	021b      	lsls	r3, r3, #8
 800f36a:	b21a      	sxth	r2, r3
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f370:	0a1b      	lsrs	r3, r3, #8
 800f372:	b29b      	uxth	r3, r3
 800f374:	b21b      	sxth	r3, r3
 800f376:	4313      	orrs	r3, r2
 800f378:	b21b      	sxth	r3, r3
 800f37a:	b29a      	uxth	r2, r3
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	805a      	strh	r2, [r3, #2]
                break;
 800f380:	e01a      	b.n	800f3b8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	220a      	movs	r2, #10
 800f386:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	f103 0008 	add.w	r0, r3, #8
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	3328      	adds	r3, #40	@ 0x28
 800f392:	2210      	movs	r2, #16
 800f394:	4619      	mov	r1, r3
 800f396:	f012 ffcb 	bl	8022330 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f39e:	021b      	lsls	r3, r3, #8
 800f3a0:	b21a      	sxth	r2, r3
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f3a6:	0a1b      	lsrs	r3, r3, #8
 800f3a8:	b29b      	uxth	r3, r3
 800f3aa:	b21b      	sxth	r3, r3
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	b21b      	sxth	r3, r3
 800f3b0:	b29a      	uxth	r2, r3
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	805a      	strh	r2, [r3, #2]
                break;
 800f3b6:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800f3b8:	2318      	movs	r3, #24
}
 800f3ba:	4618      	mov	r0, r3
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}

0800f3c2 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800f3c2:	b580      	push	{r7, lr}
 800f3c4:	b084      	sub	sp, #16
 800f3c6:	af00      	add	r7, sp, #0
 800f3c8:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d006      	beq.n	800f3e0 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800f3d6:	2300      	movs	r3, #0
 800f3d8:	2200      	movs	r2, #0
 800f3da:	2100      	movs	r1, #0
 800f3dc:	f7f4 f95c 	bl	8003698 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d015      	beq.n	800f414 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	0a1b      	lsrs	r3, r3, #8
 800f3ee:	f003 030f 	and.w	r3, r3, #15
 800f3f2:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00c      	beq.n	800f414 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f3fe:	68fb      	ldr	r3, [r7, #12]
 800f400:	431a      	orrs	r2, r3
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	68f9      	ldr	r1, [r7, #12]
 800f40e:	4618      	mov	r0, r3
 800f410:	f7f3 fe66 	bl	80030e0 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	681b      	ldr	r3, [r3, #0]
 800f418:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	685b      	ldr	r3, [r3, #4]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d00b      	beq.n	800f440 <vSocketWakeUpUser+0x7e>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d007      	beq.n	800f440 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	685a      	ldr	r2, [r3, #4]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	4619      	mov	r1, r3
 800f43a:	4610      	mov	r0, r2
 800f43c:	f7f3 fe50 	bl	80030e0 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
}
 800f446:	bf00      	nop
 800f448:	3710      	adds	r7, #16
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}

0800f44e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800f44e:	b480      	push	{r7}
 800f450:	b085      	sub	sp, #20
 800f452:	af00      	add	r7, sp, #0
 800f454:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f45c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800f45e:	7afb      	ldrb	r3, [r7, #11]
 800f460:	2b08      	cmp	r3, #8
 800f462:	d006      	beq.n	800f472 <bMayConnect+0x24>
 800f464:	2b08      	cmp	r3, #8
 800f466:	dc0b      	bgt.n	800f480 <bMayConnect+0x32>
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d002      	beq.n	800f472 <bMayConnect+0x24>
 800f46c:	2b02      	cmp	r3, #2
 800f46e:	d003      	beq.n	800f478 <bMayConnect+0x2a>
 800f470:	e006      	b.n	800f480 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800f472:	2300      	movs	r3, #0
 800f474:	60fb      	str	r3, [r7, #12]
                break;
 800f476:	e007      	b.n	800f488 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800f478:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800f47c:	60fb      	str	r3, [r7, #12]
                break;
 800f47e:	e003      	b.n	800f488 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800f480:	f06f 030a 	mvn.w	r3, #10
 800f484:	60fb      	str	r3, [r7, #12]
                break;
 800f486:	bf00      	nop
        }

        return xResult;
 800f488:	68fb      	ldr	r3, [r7, #12]
    }
 800f48a:	4618      	mov	r0, r3
 800f48c:	3714      	adds	r7, #20
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr
	...

0800f498 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800f498:	b580      	push	{r7, lr}
 800f49a:	b084      	sub	sp, #16
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d103      	bne.n	800f4b4 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f4ac:	f06f 0315 	mvn.w	r3, #21
 800f4b0:	60fb      	str	r3, [r7, #12]
 800f4b2:	e01f      	b.n	800f4f4 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	2106      	movs	r1, #6
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	f7fe fc71 	bl	800dda0 <prvValidSocket>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d103      	bne.n	800f4cc <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800f4c4:	f06f 0308 	mvn.w	r3, #8
 800f4c8:	60fb      	str	r3, [r7, #12]
 800f4ca:	e013      	b.n	800f4f4 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f000 ff49 	bl	8010364 <FreeRTOS_issocketconnected>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	dd03      	ble.n	800f4e0 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800f4d8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800f4dc:	60fb      	str	r3, [r7, #12]
 800f4de:	e009      	b.n	800f4f4 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	69db      	ldr	r3, [r3, #28]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d105      	bne.n	800f4f4 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	2100      	movs	r1, #0
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f7fe ff4f 	bl	800e390 <FreeRTOS_bind>
 800f4f2:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	f040 80a6 	bne.w	800f648 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800f4fc:	6878      	ldr	r0, [r7, #4]
 800f4fe:	f7ff ffa6 	bl	800f44e <bMayConnect>
 800f502:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	2b00      	cmp	r3, #0
 800f508:	f040 809e 	bne.w	800f648 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f512:	f36f 03c3 	bfc	r3, #3, #1
 800f516:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	785b      	ldrb	r3, [r3, #1]
 800f526:	2b02      	cmp	r3, #2
 800f528:	d027      	beq.n	800f57a <prvTCPConnectStart+0xe2>
 800f52a:	2b0a      	cmp	r3, #10
 800f52c:	d168      	bne.n	800f600 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800f52e:	687a      	ldr	r2, [r7, #4]
 800f530:	7a13      	ldrb	r3, [r2, #8]
 800f532:	f043 0301 	orr.w	r3, r3, #1
 800f536:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f53c:	4618      	mov	r0, r3
 800f53e:	683b      	ldr	r3, [r7, #0]
 800f540:	f103 0108 	add.w	r1, r3, #8
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	885b      	ldrh	r3, [r3, #2]
 800f548:	021b      	lsls	r3, r3, #8
 800f54a:	b21a      	sxth	r2, r3
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	885b      	ldrh	r3, [r3, #2]
 800f550:	0a1b      	lsrs	r3, r3, #8
 800f552:	b29b      	uxth	r3, r3
 800f554:	b21b      	sxth	r3, r3
 800f556:	4313      	orrs	r3, r2
 800f558:	b21b      	sxth	r3, r3
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	460a      	mov	r2, r1
 800f55e:	4601      	mov	r1, r0
 800f560:	483c      	ldr	r0, [pc, #240]	@ (800f654 <prvTCPConnectStart+0x1bc>)
 800f562:	f012 fcc9 	bl	8021ef8 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800f56c:	683b      	ldr	r3, [r7, #0]
 800f56e:	3308      	adds	r3, #8
 800f570:	2210      	movs	r2, #16
 800f572:	4619      	mov	r1, r3
 800f574:	f012 fedc 	bl	8022330 <memcpy>
                            break;
 800f578:	e046      	b.n	800f608 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	7a13      	ldrb	r3, [r2, #8]
 800f57e:	f36f 0300 	bfc	r3, #0, #1
 800f582:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f588:	4618      	mov	r0, r3
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	061a      	lsls	r2, r3, #24
 800f590:	683b      	ldr	r3, [r7, #0]
 800f592:	689b      	ldr	r3, [r3, #8]
 800f594:	021b      	lsls	r3, r3, #8
 800f596:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f59a:	431a      	orrs	r2, r3
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	689b      	ldr	r3, [r3, #8]
 800f5a0:	0a1b      	lsrs	r3, r3, #8
 800f5a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f5a6:	431a      	orrs	r2, r3
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	689b      	ldr	r3, [r3, #8]
 800f5ac:	0e1b      	lsrs	r3, r3, #24
 800f5ae:	ea42 0103 	orr.w	r1, r2, r3
 800f5b2:	683b      	ldr	r3, [r7, #0]
 800f5b4:	885b      	ldrh	r3, [r3, #2]
 800f5b6:	021b      	lsls	r3, r3, #8
 800f5b8:	b21a      	sxth	r2, r3
 800f5ba:	683b      	ldr	r3, [r7, #0]
 800f5bc:	885b      	ldrh	r3, [r3, #2]
 800f5be:	0a1b      	lsrs	r3, r3, #8
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	b21b      	sxth	r3, r3
 800f5c4:	4313      	orrs	r3, r2
 800f5c6:	b21b      	sxth	r3, r3
 800f5c8:	b29b      	uxth	r3, r3
 800f5ca:	460a      	mov	r2, r1
 800f5cc:	4601      	mov	r1, r0
 800f5ce:	4822      	ldr	r0, [pc, #136]	@ (800f658 <prvTCPConnectStart+0x1c0>)
 800f5d0:	f012 fc92 	bl	8021ef8 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	061a      	lsls	r2, r3, #24
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	689b      	ldr	r3, [r3, #8]
 800f5de:	021b      	lsls	r3, r3, #8
 800f5e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f5e4:	431a      	orrs	r2, r3
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	0a1b      	lsrs	r3, r3, #8
 800f5ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f5f0:	431a      	orrs	r2, r3
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	0e1b      	lsrs	r3, r3, #24
 800f5f8:	431a      	orrs	r2, r3
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800f5fe:	e003      	b.n	800f608 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800f600:	4816      	ldr	r0, [pc, #88]	@ (800f65c <prvTCPConnectStart+0x1c4>)
 800f602:	f012 fc79 	bl	8021ef8 <lUDPLoggingPrintf>
                        break;
 800f606:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800f608:	683b      	ldr	r3, [r7, #0]
 800f60a:	885b      	ldrh	r3, [r3, #2]
 800f60c:	021b      	lsls	r3, r3, #8
 800f60e:	b21a      	sxth	r2, r3
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	885b      	ldrh	r3, [r3, #2]
 800f614:	0a1b      	lsrs	r3, r3, #8
 800f616:	b29b      	uxth	r3, r3
 800f618:	b21b      	sxth	r3, r3
 800f61a:	4313      	orrs	r3, r2
 800f61c:	b21b      	sxth	r3, r3
 800f61e:	b29a      	uxth	r2, r3
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800f626:	2102      	movs	r1, #2
 800f628:	6878      	ldr	r0, [r7, #4]
 800f62a:	f001 fc59 	bl	8010ee0 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	2201      	movs	r2, #1
 800f632:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800f636:	2006      	movs	r0, #6
 800f638:	f7f9 ffdc 	bl	80095f4 <xSendEventToIPTask>
 800f63c:	4603      	mov	r3, r0
 800f63e:	2b01      	cmp	r3, #1
 800f640:	d002      	beq.n	800f648 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800f642:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800f646:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800f648:	68fb      	ldr	r3, [r7, #12]
    }
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}
 800f652:	bf00      	nop
 800f654:	08025c24 	.word	0x08025c24
 800f658:	08025c4c 	.word	0x08025c4c
 800f65c:	08025c70 	.word	0x08025c70

0800f660 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800f660:	b580      	push	{r7, lr}
 800f662:	b094      	sub	sp, #80	@ 0x50
 800f664:	af02      	add	r7, sp, #8
 800f666:	60f8      	str	r0, [r7, #12]
 800f668:	60b9      	str	r1, [r7, #8]
 800f66a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f670:	2300      	movs	r3, #0
 800f672:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f674:	f06f 0315 	mvn.w	r3, #21
 800f678:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800f67a:	68bb      	ldr	r3, [r7, #8]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d013      	beq.n	800f6a8 <FreeRTOS_connect+0x48>
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	785b      	ldrb	r3, [r3, #1]
 800f684:	2b0a      	cmp	r3, #10
 800f686:	d00f      	beq.n	800f6a8 <FreeRTOS_connect+0x48>
 800f688:	68bb      	ldr	r3, [r7, #8]
 800f68a:	785b      	ldrb	r3, [r3, #1]
 800f68c:	2b02      	cmp	r3, #2
 800f68e:	d00b      	beq.n	800f6a8 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800f690:	f107 0314 	add.w	r3, r7, #20
 800f694:	2218      	movs	r2, #24
 800f696:	68b9      	ldr	r1, [r7, #8]
 800f698:	4618      	mov	r0, r3
 800f69a:	f012 fe49 	bl	8022330 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800f69e:	2302      	movs	r3, #2
 800f6a0:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800f6a2:	f107 0314 	add.w	r3, r7, #20
 800f6a6:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800f6a8:	68b9      	ldr	r1, [r7, #8]
 800f6aa:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f6ac:	f7ff fef4 	bl	800f498 <prvTCPConnectStart>
 800f6b0:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800f6b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d146      	bne.n	800f746 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800f6b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d110      	bne.n	800f6e0 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800f6be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f6c0:	6a1b      	ldr	r3, [r3, #32]
 800f6c2:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800f6c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d103      	bne.n	800f6d2 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800f6ca:	f06f 030a 	mvn.w	r3, #10
 800f6ce:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800f6d0:	e039      	b.n	800f746 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800f6d6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f6da:	4618      	mov	r0, r3
 800f6dc:	f7f5 fb68 	bl	8004db0 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800f6e0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f6e2:	f000 fe3f 	bl	8010364 <FreeRTOS_issocketconnected>
 800f6e6:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800f6e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	db2a      	blt.n	800f744 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800f6ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	dd02      	ble.n	800f6fa <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f6f8:	e025      	b.n	800f746 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f6fa:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f6fe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800f702:	4611      	mov	r1, r2
 800f704:	4618      	mov	r0, r3
 800f706:	f7f5 fb8b 	bl	8004e20 <xTaskCheckForTimeOut>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d003      	beq.n	800f718 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800f710:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800f714:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800f716:	e016      	b.n	800f746 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f71a:	6858      	ldr	r0, [r3, #4]
 800f71c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f71e:	9300      	str	r3, [sp, #0]
 800f720:	2300      	movs	r3, #0
 800f722:	2201      	movs	r2, #1
 800f724:	2128      	movs	r1, #40	@ 0x28
 800f726:	f7f3 fbf5 	bl	8002f14 <xEventGroupWaitBits>
 800f72a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800f72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f72e:	f003 0320 	and.w	r3, r3, #32
 800f732:	2b00      	cmp	r3, #0
 800f734:	d0c0      	beq.n	800f6b8 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f736:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f73a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800f73c:	4804      	ldr	r0, [pc, #16]	@ (800f750 <FreeRTOS_connect+0xf0>)
 800f73e:	f012 fbdb 	bl	8021ef8 <lUDPLoggingPrintf>
                    break;
 800f742:	e000      	b.n	800f746 <FreeRTOS_connect+0xe6>
                    break;
 800f744:	bf00      	nop
                }
            }
        }

        return xResult;
 800f746:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800f748:	4618      	mov	r0, r3
 800f74a:	3748      	adds	r7, #72	@ 0x48
 800f74c:	46bd      	mov	sp, r7
 800f74e:	bd80      	pop	{r7, pc}
 800f750:	08025c9c 	.word	0x08025c9c

0800f754 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800f754:	b580      	push	{r7, lr}
 800f756:	b08a      	sub	sp, #40	@ 0x28
 800f758:	af02      	add	r7, sp, #8
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	f003 0301 	and.w	r3, r3, #1
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d13b      	bne.n	800f7e4 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800f76c:	683b      	ldr	r3, [r7, #0]
 800f76e:	089b      	lsrs	r3, r3, #2
 800f770:	f003 0301 	and.w	r3, r3, #1
 800f774:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f77c:	69bb      	ldr	r3, [r7, #24]
 800f77e:	9300      	str	r3, [sp, #0]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	68ba      	ldr	r2, [r7, #8]
 800f784:	2100      	movs	r1, #0
 800f786:	f001 fa04 	bl	8010b92 <uxStreamBufferGet>
 800f78a:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800f78c:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f794:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f798:	b2db      	uxtb	r3, r3
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d02b      	beq.n	800f7f6 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f001 f8c5 	bl	8010934 <uxStreamBufferFrontSpace>
 800f7aa:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f7b2:	697a      	ldr	r2, [r7, #20]
 800f7b4:	429a      	cmp	r2, r3
 800f7b6:	d31e      	bcc.n	800f7f6 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800f7b8:	68fa      	ldr	r2, [r7, #12]
 800f7ba:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f7be:	f36f 13c7 	bfc	r3, #7, #1
 800f7c2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f7c6:	68fa      	ldr	r2, [r7, #12]
 800f7c8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f7cc:	f043 0301 	orr.w	r3, r3, #1
 800f7d0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f7dc:	2006      	movs	r0, #6
 800f7de:	f7f9 ff09 	bl	80095f4 <xSendEventToIPTask>
 800f7e2:	e008      	b.n	800f7f6 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7ea:	68b9      	ldr	r1, [r7, #8]
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	f001 f930 	bl	8010a52 <uxStreamBufferGetPtr>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800f7f6:	69fb      	ldr	r3, [r7, #28]
    }
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3720      	adds	r7, #32
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800f800:	b580      	push	{r7, lr}
 800f802:	b08e      	sub	sp, #56	@ 0x38
 800f804:	af02      	add	r7, sp, #8
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800f80c:	2300      	movs	r3, #0
 800f80e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f810:	2300      	movs	r3, #0
 800f812:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f814:	2300      	movs	r3, #0
 800f816:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d05f      	beq.n	800f8e2 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f828:	4618      	mov	r0, r3
 800f82a:	f001 f894 	bl	8010956 <uxStreamBufferGetSize>
 800f82e:	4603      	mov	r3, r0
 800f830:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800f832:	e056      	b.n	800f8e2 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f83a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800f83e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f842:	2b00      	cmp	r3, #0
 800f844:	d007      	beq.n	800f856 <prvRecvWait+0x56>
 800f846:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f84a:	2b08      	cmp	r3, #8
 800f84c:	d003      	beq.n	800f856 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800f84e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800f852:	2b09      	cmp	r3, #9
 800f854:	d10e      	bne.n	800f874 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800f856:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f85a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f862:	f003 0308 	and.w	r3, r3, #8
 800f866:	b2db      	uxtb	r3, r3
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d03e      	beq.n	800f8ea <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800f86c:	f06f 030b 	mvn.w	r3, #11
 800f870:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800f872:	e03a      	b.n	800f8ea <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800f874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f876:	2b00      	cmp	r3, #0
 800f878:	d111      	bne.n	800f89e <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	6a1b      	ldr	r3, [r3, #32]
 800f87e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d033      	beq.n	800f8ee <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	f003 0310 	and.w	r3, r3, #16
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d130      	bne.n	800f8f2 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f890:	2301      	movs	r3, #1
 800f892:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f894:	f107 0314 	add.w	r3, r7, #20
 800f898:	4618      	mov	r0, r3
 800f89a:	f7f5 fa89 	bl	8004db0 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f89e:	f107 021c 	add.w	r2, r7, #28
 800f8a2:	f107 0314 	add.w	r3, r7, #20
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7f5 fab9 	bl	8004e20 <xTaskCheckForTimeOut>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d120      	bne.n	800f8f6 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	6858      	ldr	r0, [r3, #4]
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	9300      	str	r3, [sp, #0]
 800f8bc:	2300      	movs	r3, #0
 800f8be:	2201      	movs	r2, #1
 800f8c0:	2161      	movs	r1, #97	@ 0x61
 800f8c2:	f7f3 fb27 	bl	8002f14 <xEventGroupWaitBits>
 800f8c6:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d007      	beq.n	800f8e2 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f8d8:	4618      	mov	r0, r3
 800f8da:	f001 f83c 	bl	8010956 <uxStreamBufferGetSize>
 800f8de:	4603      	mov	r3, r0
 800f8e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800f8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d0a5      	beq.n	800f834 <prvRecvWait+0x34>
 800f8e8:	e006      	b.n	800f8f8 <prvRecvWait+0xf8>
                break;
 800f8ea:	bf00      	nop
 800f8ec:	e004      	b.n	800f8f8 <prvRecvWait+0xf8>
                    break;
 800f8ee:	bf00      	nop
 800f8f0:	e002      	b.n	800f8f8 <prvRecvWait+0xf8>
                    break;
 800f8f2:	bf00      	nop
 800f8f4:	e000      	b.n	800f8f8 <prvRecvWait+0xf8>
                break;
 800f8f6:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800f8f8:	68bb      	ldr	r3, [r7, #8]
 800f8fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8fc:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800f8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800f900:	4618      	mov	r0, r3
 800f902:	3730      	adds	r7, #48	@ 0x30
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}

0800f908 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800f908:	b580      	push	{r7, lr}
 800f90a:	b088      	sub	sp, #32
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	60f8      	str	r0, [r7, #12]
 800f910:	60b9      	str	r1, [r7, #8]
 800f912:	607a      	str	r2, [r7, #4]
 800f914:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800f916:	2300      	movs	r3, #0
 800f918:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800f91e:	2300      	movs	r3, #0
 800f920:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f922:	2201      	movs	r2, #1
 800f924:	2106      	movs	r1, #6
 800f926:	69b8      	ldr	r0, [r7, #24]
 800f928:	f7fe fa3a 	bl	800dda0 <prvValidSocket>
 800f92c:	4603      	mov	r3, r0
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d103      	bne.n	800f93a <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f932:	f06f 0315 	mvn.w	r3, #21
 800f936:	61fb      	str	r3, [r7, #28]
 800f938:	e01d      	b.n	800f976 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	f003 0301 	and.w	r3, r3, #1
 800f940:	2b00      	cmp	r3, #0
 800f942:	d006      	beq.n	800f952 <FreeRTOS_recv+0x4a>
 800f944:	68bb      	ldr	r3, [r7, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d103      	bne.n	800f952 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800f94a:	f06f 0315 	mvn.w	r3, #21
 800f94e:	61fb      	str	r3, [r7, #28]
 800f950:	e011      	b.n	800f976 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800f952:	f107 0314 	add.w	r3, r7, #20
 800f956:	683a      	ldr	r2, [r7, #0]
 800f958:	4619      	mov	r1, r3
 800f95a:	69b8      	ldr	r0, [r7, #24]
 800f95c:	f7ff ff50 	bl	800f800 <prvRecvWait>
 800f960:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800f962:	69fb      	ldr	r3, [r7, #28]
 800f964:	2b00      	cmp	r3, #0
 800f966:	dd06      	ble.n	800f976 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	68b9      	ldr	r1, [r7, #8]
 800f96e:	69b8      	ldr	r0, [r7, #24]
 800f970:	f7ff fef0 	bl	800f754 <prvRecvData>
 800f974:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800f976:	69fb      	ldr	r3, [r7, #28]
    }
 800f978:	4618      	mov	r0, r3
 800f97a:	3720      	adds	r7, #32
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bd80      	pop	{r7, pc}

0800f980 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800f980:	b580      	push	{r7, lr}
 800f982:	b084      	sub	sp, #16
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800f98a:	2301      	movs	r3, #1
 800f98c:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f98e:	2201      	movs	r2, #1
 800f990:	2106      	movs	r1, #6
 800f992:	6878      	ldr	r0, [r7, #4]
 800f994:	f7fe fa04 	bl	800dda0 <prvValidSocket>
 800f998:	4603      	mov	r3, r0
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d103      	bne.n	800f9a6 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800f99e:	f06f 0315 	mvn.w	r3, #21
 800f9a2:	60fb      	str	r3, [r7, #12]
 800f9a4:	e040      	b.n	800fa28 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f9ac:	f003 0308 	and.w	r3, r3, #8
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d003      	beq.n	800f9be <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f9b6:	f06f 030b 	mvn.w	r3, #11
 800f9ba:	60fb      	str	r3, [r7, #12]
 800f9bc:	e034      	b.n	800fa28 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d009      	beq.n	800f9dc <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800f9ce:	2b08      	cmp	r3, #8
 800f9d0:	d004      	beq.n	800f9dc <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800f9d8:	2b09      	cmp	r3, #9
 800f9da:	d103      	bne.n	800f9e4 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f9dc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f9e0:	60fb      	str	r3, [r7, #12]
 800f9e2:	e021      	b.n	800fa28 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f9ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f9ee:	b2db      	uxtb	r3, r3
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d002      	beq.n	800f9fa <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	60fb      	str	r3, [r7, #12]
 800f9f8:	e016      	b.n	800fa28 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800f9fa:	683b      	ldr	r3, [r7, #0]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d102      	bne.n	800fa06 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800fa00:	2300      	movs	r3, #0
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e010      	b.n	800fa28 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d10b      	bne.n	800fa28 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800fa10:	2100      	movs	r1, #0
 800fa12:	6878      	ldr	r0, [r7, #4]
 800fa14:	f000 fac6 	bl	800ffa4 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d102      	bne.n	800fa28 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800fa22:	f06f 030b 	mvn.w	r3, #11
 800fa26:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800fa28:	68fb      	ldr	r3, [r7, #12]
    }
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	3710      	adds	r7, #16
 800fa2e:	46bd      	mov	sp, r7
 800fa30:	bd80      	pop	{r7, pc}

0800fa32 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800fa32:	b580      	push	{r7, lr}
 800fa34:	b088      	sub	sp, #32
 800fa36:	af00      	add	r7, sp, #0
 800fa38:	6078      	str	r0, [r7, #4]
 800fa3a:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800fa44:	2300      	movs	r3, #0
 800fa46:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800fa4e:	2200      	movs	r2, #0
 800fa50:	2106      	movs	r1, #6
 800fa52:	6978      	ldr	r0, [r7, #20]
 800fa54:	f7fe f9a4 	bl	800dda0 <prvValidSocket>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	2b01      	cmp	r3, #1
 800fa5c:	d135      	bne.n	800faca <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800fa5e:	697b      	ldr	r3, [r7, #20]
 800fa60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa64:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d10f      	bne.n	800fa8c <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800fa72:	f003 0308 	and.w	r3, r3, #8
 800fa76:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d107      	bne.n	800fa8c <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800fa7c:	2100      	movs	r1, #0
 800fa7e:	6978      	ldr	r0, [r7, #20]
 800fa80:	f000 fa90 	bl	800ffa4 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa8a:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800fa8c:	69bb      	ldr	r3, [r7, #24]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d01b      	beq.n	800faca <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800fa92:	69b8      	ldr	r0, [r7, #24]
 800fa94:	f000 ff3d 	bl	8010912 <uxStreamBufferGetSpace>
 800fa98:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	691a      	ldr	r2, [r3, #16]
 800fa9e:	69bb      	ldr	r3, [r7, #24]
 800faa0:	689b      	ldr	r3, [r3, #8]
 800faa2:	1ad3      	subs	r3, r2, r3
 800faa4:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800faa6:	68fa      	ldr	r2, [r7, #12]
 800faa8:	693b      	ldr	r3, [r7, #16]
 800faaa:	429a      	cmp	r2, r3
 800faac:	d803      	bhi.n	800fab6 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800faae:	68fa      	ldr	r2, [r7, #12]
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	601a      	str	r2, [r3, #0]
 800fab4:	e002      	b.n	800fabc <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800fab6:	693a      	ldr	r2, [r7, #16]
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800fabc:	69bb      	ldr	r3, [r7, #24]
 800fabe:	689b      	ldr	r3, [r3, #8]
 800fac0:	3310      	adds	r3, #16
 800fac2:	69ba      	ldr	r2, [r7, #24]
 800fac4:	4413      	add	r3, r2
 800fac6:	3304      	adds	r3, #4
 800fac8:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800faca:	69fb      	ldr	r3, [r7, #28]
    }
 800facc:	4618      	mov	r0, r3
 800face:	3720      	adds	r7, #32
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}

0800fad4 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800fad4:	b580      	push	{r7, lr}
 800fad6:	b090      	sub	sp, #64	@ 0x40
 800fad8:	af02      	add	r7, sp, #8
 800fada:	60f8      	str	r0, [r7, #12]
 800fadc:	60b9      	str	r1, [r7, #8]
 800fade:	607a      	str	r2, [r7, #4]
 800fae0:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800faf0:	4618      	mov	r0, r3
 800faf2:	f000 ff0e 	bl	8010912 <uxStreamBufferGetSpace>
 800faf6:	4603      	mov	r3, r0
 800faf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800fafa:	2300      	movs	r3, #0
 800fafc:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800fb02:	e08f      	b.n	800fc24 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800fb04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	dd4b      	ble.n	800fba2 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800fb0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb12:	429a      	cmp	r2, r3
 800fb14:	dd01      	ble.n	800fb1a <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800fb16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb18:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fb20:	f003 0310 	and.w	r3, r3, #16
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d00e      	beq.n	800fb48 <prvTCPSendLoop+0x74>
 800fb2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fb2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb2e:	429a      	cmp	r2, r3
 800fb30:	d10a      	bne.n	800fb48 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800fb32:	2301      	movs	r3, #1
 800fb34:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800fb36:	f7f4 fc7f 	bl	8004438 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800fb3a:	68fa      	ldr	r2, [r7, #12]
 800fb3c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fb40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb44:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800fb4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb52:	2100      	movs	r1, #0
 800fb54:	f000 ff9d 	bl	8010a92 <uxStreamBufferAdd>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800fb5c:	6a3b      	ldr	r3, [r7, #32]
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d101      	bne.n	800fb66 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800fb62:	f7f4 fc77 	bl	8004454 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800fb6e:	f7fa fc99 	bl	800a4a4 <xIsCallingFromIPTask>
 800fb72:	4603      	mov	r3, r0
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d102      	bne.n	800fb7e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fb78:	2006      	movs	r0, #6
 800fb7a:	f7f9 fd3b 	bl	80095f4 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800fb7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fb80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb82:	1ad3      	subs	r3, r2, r3
 800fb84:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800fb86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fb88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb8a:	4413      	add	r3, r2
 800fb8c:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800fb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d053      	beq.n	800fc3c <prvTCPSendLoop+0x168>
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d050      	beq.n	800fc3c <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800fb9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb9e:	4413      	add	r3, r2
 800fba0:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800fba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d119      	bne.n	800fbdc <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbac:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800fbae:	f7fa fc79 	bl	800a4a4 <xIsCallingFromIPTask>
 800fbb2:	4603      	mov	r3, r0
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d001      	beq.n	800fbbc <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800fbb8:	2300      	movs	r3, #0
 800fbba:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d035      	beq.n	800fc2e <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	f003 0310 	and.w	r3, r3, #16
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d132      	bne.n	800fc32 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800fbd0:	f107 0314 	add.w	r3, r7, #20
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7f5 f8eb 	bl	8004db0 <vTaskSetTimeOutState>
 800fbda:	e00a      	b.n	800fbf2 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800fbdc:	f107 021c 	add.w	r2, r7, #28
 800fbe0:	f107 0314 	add.w	r3, r7, #20
 800fbe4:	4611      	mov	r1, r2
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	f7f5 f91a 	bl	8004e20 <xTaskCheckForTimeOut>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d121      	bne.n	800fc36 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	6858      	ldr	r0, [r3, #4]
 800fbf6:	69fb      	ldr	r3, [r7, #28]
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	2122      	movs	r1, #34	@ 0x22
 800fc00:	f7f3 f988 	bl	8002f14 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800fc04:	6879      	ldr	r1, [r7, #4]
 800fc06:	68f8      	ldr	r0, [r7, #12]
 800fc08:	f7ff feba 	bl	800f980 <prvTCPSendCheck>
 800fc0c:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800fc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	db12      	blt.n	800fc3a <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800fc14:	68fb      	ldr	r3, [r7, #12]
 800fc16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f000 fe79 	bl	8010912 <uxStreamBufferGetSpace>
 800fc20:	4603      	mov	r3, r0
 800fc22:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800fc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	f73f af6c 	bgt.w	800fb04 <prvTCPSendLoop+0x30>
 800fc2c:	e006      	b.n	800fc3c <prvTCPSendLoop+0x168>
                    break;
 800fc2e:	bf00      	nop
 800fc30:	e004      	b.n	800fc3c <prvTCPSendLoop+0x168>
                    break;
 800fc32:	bf00      	nop
 800fc34:	e002      	b.n	800fc3c <prvTCPSendLoop+0x168>
                    break;
 800fc36:	bf00      	nop
 800fc38:	e000      	b.n	800fc3c <prvTCPSendLoop+0x168>
                break;
 800fc3a:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800fc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3738      	adds	r7, #56	@ 0x38
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
	...

0800fc48 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
 800fc54:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800fc5a:	6879      	ldr	r1, [r7, #4]
 800fc5c:	6938      	ldr	r0, [r7, #16]
 800fc5e:	f7ff fe8f 	bl	800f980 <prvTCPSendCheck>
 800fc62:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800fc64:	697b      	ldr	r3, [r7, #20]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	dd24      	ble.n	800fcb4 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	687a      	ldr	r2, [r7, #4]
 800fc6e:	68b9      	ldr	r1, [r7, #8]
 800fc70:	6938      	ldr	r0, [r7, #16]
 800fc72:	f7ff ff2f 	bl	800fad4 <prvTCPSendLoop>
 800fc76:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d11a      	bne.n	800fcb4 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800fc7e:	693b      	ldr	r3, [r7, #16]
 800fc80:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fc84:	2b05      	cmp	r3, #5
 800fc86:	d903      	bls.n	800fc90 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800fc88:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fc8c:	617b      	str	r3, [r7, #20]
 800fc8e:	e011      	b.n	800fcb4 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800fc90:	693b      	ldr	r3, [r7, #16]
 800fc92:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fc94:	2b17      	cmp	r3, #23
 800fc96:	d00a      	beq.n	800fcae <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800fc98:	693b      	ldr	r3, [r7, #16]
 800fc9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	693b      	ldr	r3, [r7, #16]
 800fca0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fca8:	4805      	ldr	r0, [pc, #20]	@ (800fcc0 <FreeRTOS_send+0x78>)
 800fcaa:	f012 f925 	bl	8021ef8 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800fcae:	f06f 031b 	mvn.w	r3, #27
 800fcb2:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800fcb4:	697b      	ldr	r3, [r7, #20]
    }
 800fcb6:	4618      	mov	r0, r3
 800fcb8:	3718      	adds	r7, #24
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	bd80      	pop	{r7, pc}
 800fcbe:	bf00      	nop
 800fcc0:	08025cf4 	.word	0x08025cf4

0800fcc4 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b084      	sub	sp, #16
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	2106      	movs	r1, #6
 800fcda:	68b8      	ldr	r0, [r7, #8]
 800fcdc:	f7fe f860 	bl	800dda0 <prvValidSocket>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d103      	bne.n	800fcee <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800fce6:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800fcea:	60fb      	str	r3, [r7, #12]
 800fcec:	e056      	b.n	800fd9c <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800fcee:	68bb      	ldr	r3, [r7, #8]
 800fcf0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d008      	beq.n	800fd0a <FreeRTOS_listen+0x46>
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fcfe:	2b08      	cmp	r3, #8
 800fd00:	d003      	beq.n	800fd0a <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800fd02:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800fd06:	60fb      	str	r3, [r7, #12]
 800fd08:	e048      	b.n	800fd9c <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800fd0a:	6839      	ldr	r1, [r7, #0]
 800fd0c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800fd10:	f7fa fd78 	bl	800a804 <FreeRTOS_min_int32>
 800fd14:	4603      	mov	r3, r0
 800fd16:	b29a      	uxth	r2, r3
 800fd18:	68bb      	ldr	r3, [r7, #8]
 800fd1a:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fd24:	f003 0308 	and.w	r3, r3, #8
 800fd28:	b2db      	uxtb	r3, r3
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d032      	beq.n	800fd94 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800fd2e:	68bb      	ldr	r3, [r7, #8]
 800fd30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d005      	beq.n	800fd44 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fd3e:	4618      	mov	r0, r3
 800fd40:	f000 fe2b 	bl	801099a <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800fd44:	68bb      	ldr	r3, [r7, #8]
 800fd46:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d005      	beq.n	800fd5a <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800fd4e:	68bb      	ldr	r3, [r7, #8]
 800fd50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fd54:	4618      	mov	r0, r3
 800fd56:	f000 fe20 	bl	801099a <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800fd5a:	68bb      	ldr	r3, [r7, #8]
 800fd5c:	33aa      	adds	r3, #170	@ 0xaa
 800fd5e:	225a      	movs	r2, #90	@ 0x5a
 800fd60:	2100      	movs	r1, #0
 800fd62:	4618      	mov	r0, r3
 800fd64:	f012 fbf1 	bl	802254a <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800fd68:	68bb      	ldr	r3, [r7, #8]
 800fd6a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800fd6e:	22c0      	movs	r2, #192	@ 0xc0
 800fd70:	2100      	movs	r1, #0
 800fd72:	4618      	mov	r0, r3
 800fd74:	f012 fbe9 	bl	802254a <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	3368      	adds	r3, #104	@ 0x68
 800fd7c:	2204      	movs	r2, #4
 800fd7e:	2100      	movs	r1, #0
 800fd80:	4618      	mov	r0, r3
 800fd82:	f012 fbe2 	bl	802254a <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800fd86:	68ba      	ldr	r2, [r7, #8]
 800fd88:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fd8c:	f043 0308 	orr.w	r3, r3, #8
 800fd90:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800fd94:	2101      	movs	r1, #1
 800fd96:	68b8      	ldr	r0, [r7, #8]
 800fd98:	f001 f8a2 	bl	8010ee0 <vTCPStateChange>
        }

        return xResult;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
    }
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800fda6:	b580      	push	{r7, lr}
 800fda8:	b084      	sub	sp, #16
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	2106      	movs	r1, #6
 800fdb8:	68b8      	ldr	r0, [r7, #8]
 800fdba:	f7fd fff1 	bl	800dda0 <prvValidSocket>
 800fdbe:	4603      	mov	r3, r0
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d103      	bne.n	800fdcc <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800fdc4:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800fdc8:	60fb      	str	r3, [r7, #12]
 800fdca:	e018      	b.n	800fdfe <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fdd2:	2b05      	cmp	r3, #5
 800fdd4:	d003      	beq.n	800fdde <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800fdd6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800fdda:	60fb      	str	r3, [r7, #12]
 800fddc:	e00f      	b.n	800fdfe <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800fde4:	f043 0320 	orr.w	r3, r3, #32
 800fde8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800fdf4:	2006      	movs	r0, #6
 800fdf6:	f7f9 fbfd 	bl	80095f4 <xSendEventToIPTask>
            xResult = 0;
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
    }
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}

0800fe08 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08a      	sub	sp, #40	@ 0x28
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800fe10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fe14:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800fe16:	f7f4 fc21 	bl	800465c <xTaskGetTickCount>
 800fe1a:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800fe1c:	4b32      	ldr	r3, [pc, #200]	@ (800fee8 <xTCPTimerCheck+0xe0>)
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	69ba      	ldr	r2, [r7, #24]
 800fe22:	1ad3      	subs	r3, r2, r3
 800fe24:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800fe26:	4b31      	ldr	r3, [pc, #196]	@ (800feec <xTCPTimerCheck+0xe4>)
 800fe28:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800fe2a:	4b31      	ldr	r3, [pc, #196]	@ (800fef0 <xTCPTimerCheck+0xe8>)
 800fe2c:	68db      	ldr	r3, [r3, #12]
 800fe2e:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800fe30:	4a2d      	ldr	r2, [pc, #180]	@ (800fee8 <xTCPTimerCheck+0xe0>)
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800fe36:	6a3b      	ldr	r3, [r7, #32]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d14b      	bne.n	800fed4 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800fe40:	e048      	b.n	800fed4 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fe42:	69fb      	ldr	r3, [r7, #28]
 800fe44:	68db      	ldr	r3, [r3, #12]
 800fe46:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800fe48:	69fb      	ldr	r3, [r7, #28]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d03a      	beq.n	800fece <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800fe58:	693b      	ldr	r3, [r7, #16]
 800fe5a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800fe5e:	461a      	mov	r2, r3
 800fe60:	6a3b      	ldr	r3, [r7, #32]
 800fe62:	4293      	cmp	r3, r2
 800fe64:	d20a      	bcs.n	800fe7c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	1ad3      	subs	r3, r2, r3
 800fe72:	b29a      	uxth	r2, r3
 800fe74:	693b      	ldr	r3, [r7, #16]
 800fe76:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800fe7a:	e00a      	b.n	800fe92 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	2200      	movs	r2, #0
 800fe80:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800fe84:	6938      	ldr	r0, [r7, #16]
 800fe86:	f000 ff33 	bl	8010cf0 <xTCPSocketCheck>
 800fe8a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	db1f      	blt.n	800fed2 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800fe92:	693b      	ldr	r3, [r7, #16]
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d008      	beq.n	800feac <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d003      	beq.n	800fea8 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800fea0:	6938      	ldr	r0, [r7, #16]
 800fea2:	f7ff fa8e 	bl	800f3c2 <vSocketWakeUpUser>
 800fea6:	e001      	b.n	800feac <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800fea8:	2300      	movs	r3, #0
 800feaa:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800feac:	693b      	ldr	r3, [r7, #16]
 800feae:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d00e      	beq.n	800fed4 <xTCPTimerCheck+0xcc>
 800feb6:	693b      	ldr	r3, [r7, #16]
 800feb8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800febc:	461a      	mov	r2, r3
 800febe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d907      	bls.n	800fed4 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800fec4:	693b      	ldr	r3, [r7, #16]
 800fec6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800feca:	627b      	str	r3, [r7, #36]	@ 0x24
 800fecc:	e002      	b.n	800fed4 <xTCPTimerCheck+0xcc>
                continue;
 800fece:	bf00      	nop
 800fed0:	e000      	b.n	800fed4 <xTCPTimerCheck+0xcc>
                    continue;
 800fed2:	bf00      	nop
        while( pxIterator != pxEnd )
 800fed4:	69fa      	ldr	r2, [r7, #28]
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	429a      	cmp	r2, r3
 800feda:	d1b2      	bne.n	800fe42 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800fedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800fede:	4618      	mov	r0, r3
 800fee0:	3728      	adds	r7, #40	@ 0x28
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	20001594 	.word	0x20001594
 800feec:	20001588 	.word	0x20001588
 800fef0:	20001580 	.word	0x20001580

0800fef4 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800fef4:	b082      	sub	sp, #8
 800fef6:	b580      	push	{r7, lr}
 800fef8:	b088      	sub	sp, #32
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	6078      	str	r0, [r7, #4]
 800fefe:	6039      	str	r1, [r7, #0]
 800ff00:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ff04:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	61bb      	str	r3, [r7, #24]
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800ff10:	4b23      	ldr	r3, [pc, #140]	@ (800ffa0 <pxTCPSocketLookup+0xac>)
 800ff12:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	685b      	ldr	r3, [r3, #4]
 800ff18:	61fb      	str	r3, [r7, #28]
 800ff1a:	e02e      	b.n	800ff7a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800ff1c:	69fb      	ldr	r3, [r7, #28]
 800ff1e:	68db      	ldr	r3, [r3, #12]
 800ff20:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d122      	bne.n	800ff74 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d102      	bne.n	800ff3e <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	617b      	str	r3, [r7, #20]
 800ff3c:	e01a      	b.n	800ff74 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ff44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	429a      	cmp	r2, r3
 800ff4a:	d113      	bne.n	800ff74 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d006      	beq.n	800ff60 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800ff52:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800ff56:	68f8      	ldr	r0, [r7, #12]
 800ff58:	f7fb f9d4 	bl	800b304 <pxTCPSocketLookup_IPv6>
 800ff5c:	61b8      	str	r0, [r7, #24]
 800ff5e:	e006      	b.n	800ff6e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800ff64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff66:	429a      	cmp	r2, r3
 800ff68:	d101      	bne.n	800ff6e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
 800ff6c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d107      	bne.n	800ff84 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800ff7a:	69fa      	ldr	r2, [r7, #28]
 800ff7c:	693b      	ldr	r3, [r7, #16]
 800ff7e:	429a      	cmp	r2, r3
 800ff80:	d1cc      	bne.n	800ff1c <pxTCPSocketLookup+0x28>
 800ff82:	e000      	b.n	800ff86 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800ff84:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800ff86:	69bb      	ldr	r3, [r7, #24]
 800ff88:	2b00      	cmp	r3, #0
 800ff8a:	d101      	bne.n	800ff90 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800ff8c:	697b      	ldr	r3, [r7, #20]
 800ff8e:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800ff90:	69bb      	ldr	r3, [r7, #24]
    }
 800ff92:	4618      	mov	r0, r3
 800ff94:	3720      	adds	r7, #32
 800ff96:	46bd      	mov	sp, r7
 800ff98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ff9c:	b002      	add	sp, #8
 800ff9e:	4770      	bx	lr
 800ffa0:	20001588 	.word	0x20001588

0800ffa4 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b088      	sub	sp, #32
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d048      	beq.n	8010046 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800ffb4:	2314      	movs	r3, #20
 800ffb6:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800ffb8:	2350      	movs	r3, #80	@ 0x50
 800ffba:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800ffc8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffcc:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d00f      	beq.n	800fff4 <prvTCPCreateStream+0x50>
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	2b04      	cmp	r3, #4
 800ffd8:	d80c      	bhi.n	800fff4 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	3b01      	subs	r3, #1
 800ffde:	4a40      	ldr	r2, [pc, #256]	@ (80100e0 <prvTCPCreateStream+0x13c>)
 800ffe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ffe4:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	3b01      	subs	r3, #1
 800ffea:	4a3d      	ldr	r2, [pc, #244]	@ (80100e0 <prvTCPCreateStream+0x13c>)
 800ffec:	00db      	lsls	r3, r3, #3
 800ffee:	4413      	add	r3, r2
 800fff0:	685b      	ldr	r3, [r3, #4]
 800fff2:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800fffa:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8010002:	2b00      	cmp	r3, #0
 8010004:	d10c      	bne.n	8010020 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801000c:	69ba      	ldr	r2, [r7, #24]
 801000e:	fb02 f303 	mul.w	r3, r2, r3
 8010012:	4a34      	ldr	r2, [pc, #208]	@ (80100e4 <prvTCPCreateStream+0x140>)
 8010014:	fba2 2303 	umull	r2, r3, r2, r3
 8010018:	095a      	lsrs	r2, r3, #5
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8010026:	2b00      	cmp	r3, #0
 8010028:	d111      	bne.n	801004e <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	fb02 f303 	mul.w	r3, r2, r3
 8010036:	4a2b      	ldr	r2, [pc, #172]	@ (80100e4 <prvTCPCreateStream+0x140>)
 8010038:	fba2 2303 	umull	r2, r3, r2, r3
 801003c:	095a      	lsrs	r2, r3, #5
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8010044:	e003      	b.n	801004e <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801004c:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 801004e:	69fb      	ldr	r3, [r7, #28]
 8010050:	3304      	adds	r3, #4
 8010052:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 8010054:	69fb      	ldr	r3, [r7, #28]
 8010056:	f023 0303 	bic.w	r3, r3, #3
 801005a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 801005c:	69fb      	ldr	r3, [r7, #28]
 801005e:	3314      	adds	r3, #20
 8010060:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 8010062:	68f8      	ldr	r0, [r7, #12]
 8010064:	f7f6 f966 	bl	8006334 <pvPortMalloc>
 8010068:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 801006a:	68bb      	ldr	r3, [r7, #8]
 801006c:	2b00      	cmp	r3, #0
 801006e:	d10e      	bne.n	801008e <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 8010070:	481d      	ldr	r0, [pc, #116]	@ (80100e8 <prvTCPCreateStream+0x144>)
 8010072:	f011 ff41 	bl	8021ef8 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 801007c:	f043 0308 	orr.w	r3, r3, #8
 8010080:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8010084:	2108      	movs	r1, #8
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f000 ff2a 	bl	8010ee0 <vTCPStateChange>
 801008c:	e022      	b.n	80100d4 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 801008e:	2214      	movs	r2, #20
 8010090:	2100      	movs	r1, #0
 8010092:	68b8      	ldr	r0, [r7, #8]
 8010094:	f012 fa59 	bl	802254a <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	69fa      	ldr	r2, [r7, #28]
 801009c:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 801009e:	4b13      	ldr	r3, [pc, #76]	@ (80100ec <prvTCPCreateStream+0x148>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d00a      	beq.n	80100bc <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d001      	beq.n	80100b0 <prvTCPCreateStream+0x10c>
 80100ac:	2152      	movs	r1, #82	@ 0x52
 80100ae:	e000      	b.n	80100b2 <prvTCPCreateStream+0x10e>
 80100b0:	2154      	movs	r1, #84	@ 0x54
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	69fa      	ldr	r2, [r7, #28]
 80100b6:	480e      	ldr	r0, [pc, #56]	@ (80100f0 <prvTCPCreateStream+0x14c>)
 80100b8:	f011 ff1e 	bl	8021ef8 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 80100bc:	683b      	ldr	r3, [r7, #0]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d004      	beq.n	80100cc <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	68ba      	ldr	r2, [r7, #8]
 80100c6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 80100ca:	e003      	b.n	80100d4 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	68ba      	ldr	r2, [r7, #8]
 80100d0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 80100d4:	68bb      	ldr	r3, [r7, #8]
    }
 80100d6:	4618      	mov	r0, r3
 80100d8:	3720      	adds	r7, #32
 80100da:	46bd      	mov	sp, r7
 80100dc:	bd80      	pop	{r7, pc}
 80100de:	bf00      	nop
 80100e0:	08027624 	.word	0x08027624
 80100e4:	51eb851f 	.word	0x51eb851f
 80100e8:	08025d1c 	.word	0x08025d1c
 80100ec:	200015c4 	.word	0x200015c4
 80100f0:	08025d40 	.word	0x08025d40

080100f4 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b08a      	sub	sp, #40	@ 0x28
 80100f8:	af02      	add	r7, sp, #8
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 8010104:	2300      	movs	r3, #0
 8010106:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d006      	beq.n	801011c <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 8010116:	2300      	movs	r3, #0
 8010118:	61fb      	str	r3, [r7, #28]
 801011a:	e009      	b.n	8010130 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010122:	f107 0214 	add.w	r2, r7, #20
 8010126:	4611      	mov	r1, r2
 8010128:	4618      	mov	r0, r3
 801012a:	f000 fc92 	bl	8010a52 <uxStreamBufferGetPtr>
 801012e:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 8010130:	69bb      	ldr	r3, [r7, #24]
 8010132:	2b00      	cmp	r3, #0
 8010134:	d011      	beq.n	801015a <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801013c:	6979      	ldr	r1, [r7, #20]
 801013e:	69ba      	ldr	r2, [r7, #24]
 8010140:	68f8      	ldr	r0, [r7, #12]
 8010142:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 801014a:	2300      	movs	r3, #0
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	69bb      	ldr	r3, [r7, #24]
 8010150:	2200      	movs	r2, #0
 8010152:	2100      	movs	r1, #0
 8010154:	f000 fd1d 	bl	8010b92 <uxStreamBufferGet>
        {
 8010158:	e7d4      	b.n	8010104 <vTCPAddRxdata_Callback+0x10>
        }
    }
 801015a:	bf00      	nop
 801015c:	3720      	adds	r7, #32
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}

08010162 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 8010162:	b580      	push	{r7, lr}
 8010164:	b084      	sub	sp, #16
 8010166:	af00      	add	r7, sp, #0
 8010168:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010170:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010174:	b2db      	uxtb	r3, r3
 8010176:	2b00      	cmp	r3, #0
 8010178:	d121      	bne.n	80101be <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010180:	4618      	mov	r0, r3
 8010182:	f000 fbd7 	bl	8010934 <uxStreamBufferFrontSpace>
 8010186:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	429a      	cmp	r2, r3
 8010192:	d814      	bhi.n	80101be <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 8010194:	687a      	ldr	r2, [r7, #4]
 8010196:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801019a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801019e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 80101a2:	687a      	ldr	r2, [r7, #4]
 80101a4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80101a8:	f043 0301 	orr.w	r3, r3, #1
 80101ac:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2201      	movs	r2, #1
 80101b4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 80101b8:	2006      	movs	r0, #6
 80101ba:	f7f9 fa1b 	bl	80095f4 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f043 0201 	orr.w	r2, r3, #1
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101ce:	f003 0301 	and.w	r3, r3, #1
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d005      	beq.n	80101e2 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 80101e2:	bf00      	nop
 80101e4:	3710      	adds	r7, #16
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
	...

080101ec <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 80101ec:	b5b0      	push	{r4, r5, r7, lr}
 80101ee:	b08c      	sub	sp, #48	@ 0x30
 80101f0:	af04      	add	r7, sp, #16
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8010200:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 801020c:	2b00      	cmp	r3, #0
 801020e:	d001      	beq.n	8010214 <lTCPAddRxdata+0x28>
 8010210:	2301      	movs	r3, #1
 8010212:	e000      	b.n	8010216 <lTCPAddRxdata+0x2a>
 8010214:	2300      	movs	r3, #0
 8010216:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 8010218:	2300      	movs	r3, #0
 801021a:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d10a      	bne.n	8010238 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 8010222:	2101      	movs	r1, #1
 8010224:	68f8      	ldr	r0, [r7, #12]
 8010226:	f7ff febd 	bl	800ffa4 <prvTCPCreateStream>
 801022a:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 801022c:	69fb      	ldr	r3, [r7, #28]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d102      	bne.n	8010238 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 8010232:	f04f 33ff 	mov.w	r3, #4294967295
 8010236:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 8010238:	69bb      	ldr	r3, [r7, #24]
 801023a:	2b00      	cmp	r3, #0
 801023c:	db41      	blt.n	80102c2 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d00f      	beq.n	8010264 <lTCPAddRxdata+0x78>
 8010244:	69f8      	ldr	r0, [r7, #28]
 8010246:	f000 fb86 	bl	8010956 <uxStreamBufferGetSize>
 801024a:	4603      	mov	r3, r0
 801024c:	2b00      	cmp	r3, #0
 801024e:	d109      	bne.n	8010264 <lTCPAddRxdata+0x78>
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d106      	bne.n	8010264 <lTCPAddRxdata+0x78>
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	2b00      	cmp	r3, #0
 801025a:	d003      	beq.n	8010264 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 8010260:	2300      	movs	r3, #0
 8010262:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	68b9      	ldr	r1, [r7, #8]
 801026a:	69f8      	ldr	r0, [r7, #28]
 801026c:	f000 fc11 	bl	8010a92 <uxStreamBufferAdd>
 8010270:	4603      	mov	r3, r0
 8010272:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	69ba      	ldr	r2, [r7, #24]
 8010278:	429a      	cmp	r2, r3
 801027a:	d013      	beq.n	80102a4 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 801027c:	69fb      	ldr	r3, [r7, #28]
 801027e:	681c      	ldr	r4, [r3, #0]
 8010280:	69fb      	ldr	r3, [r7, #28]
 8010282:	689d      	ldr	r5, [r3, #8]
 8010284:	69f8      	ldr	r0, [r7, #28]
 8010286:	f000 fb55 	bl	8010934 <uxStreamBufferFrontSpace>
 801028a:	4602      	mov	r2, r0
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	68db      	ldr	r3, [r3, #12]
 8010290:	9303      	str	r3, [sp, #12]
 8010292:	9202      	str	r2, [sp, #8]
 8010294:	9501      	str	r5, [sp, #4]
 8010296:	9400      	str	r4, [sp, #0]
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	69ba      	ldr	r2, [r7, #24]
 801029c:	68b9      	ldr	r1, [r7, #8]
 801029e:	480b      	ldr	r0, [pc, #44]	@ (80102cc <lTCPAddRxdata+0xe0>)
 80102a0:	f011 fe2a 	bl	8021ef8 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 80102a4:	68bb      	ldr	r3, [r7, #8]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d10b      	bne.n	80102c2 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d005      	beq.n	80102bc <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 80102b0:	683a      	ldr	r2, [r7, #0]
 80102b2:	6979      	ldr	r1, [r7, #20]
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f7ff ff1d 	bl	80100f4 <vTCPAddRxdata_Callback>
 80102ba:	e002      	b.n	80102c2 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 80102bc:	68f8      	ldr	r0, [r7, #12]
 80102be:	f7ff ff50 	bl	8010162 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 80102c2:	69bb      	ldr	r3, [r7, #24]
    }
 80102c4:	4618      	mov	r0, r3
 80102c6:	3720      	adds	r7, #32
 80102c8:	46bd      	mov	sp, r7
 80102ca:	bdb0      	pop	{r4, r5, r7, pc}
 80102cc:	08025d7c 	.word	0x08025d7c

080102d0 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b084      	sub	sp, #16
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80102e2:	2b06      	cmp	r3, #6
 80102e4:	d003      	beq.n	80102ee <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80102e6:	f06f 0315 	mvn.w	r3, #21
 80102ea:	60fb      	str	r3, [r7, #12]
 80102ec:	e011      	b.n	8010312 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 80102ee:	68bb      	ldr	r3, [r7, #8]
 80102f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d008      	beq.n	801030a <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80102fe:	4618      	mov	r0, r3
 8010300:	f000 fb07 	bl	8010912 <uxStreamBufferGetSpace>
 8010304:	4603      	mov	r3, r0
 8010306:	60fb      	str	r3, [r7, #12]
 8010308:	e003      	b.n	8010312 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8010310:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8010312:	68fb      	ldr	r3, [r7, #12]
    }
 8010314:	4618      	mov	r0, r3
 8010316:	3710      	adds	r7, #16
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801032e:	2b06      	cmp	r3, #6
 8010330:	d003      	beq.n	801033a <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 8010332:	f06f 0315 	mvn.w	r3, #21
 8010336:	60fb      	str	r3, [r7, #12]
 8010338:	e00f      	b.n	801035a <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 801033a:	68bb      	ldr	r3, [r7, #8]
 801033c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d008      	beq.n	8010356 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801034a:	4618      	mov	r0, r3
 801034c:	f000 fb03 	bl	8010956 <uxStreamBufferGetSize>
 8010350:	4603      	mov	r3, r0
 8010352:	60fb      	str	r3, [r7, #12]
 8010354:	e001      	b.n	801035a <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 8010356:	2300      	movs	r3, #0
 8010358:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 801035a:	68fb      	ldr	r3, [r7, #12]
    }
 801035c:	4618      	mov	r0, r3
 801035e:	3710      	adds	r7, #16
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 8010364:	b480      	push	{r7}
 8010366:	b085      	sub	sp, #20
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8010370:	2300      	movs	r3, #0
 8010372:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 801037a:	2b06      	cmp	r3, #6
 801037c:	d003      	beq.n	8010386 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 801037e:	f06f 0315 	mvn.w	r3, #21
 8010382:	60fb      	str	r3, [r7, #12]
 8010384:	e00b      	b.n	801039e <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801038c:	2b04      	cmp	r3, #4
 801038e:	d906      	bls.n	801039e <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010396:	2b07      	cmp	r3, #7
 8010398:	d801      	bhi.n	801039e <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 801039a:	2301      	movs	r3, #1
 801039c:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 801039e:	68fb      	ldr	r3, [r7, #12]
    }
 80103a0:	4618      	mov	r0, r3
 80103a2:	3714      	adds	r7, #20
 80103a4:	46bd      	mov	sp, r7
 80103a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103aa:	4770      	bx	lr

080103ac <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80103be:	2b06      	cmp	r3, #6
 80103c0:	d003      	beq.n	80103ca <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 80103c2:	f06f 0315 	mvn.w	r3, #21
 80103c6:	60fb      	str	r3, [r7, #12]
 80103c8:	e00f      	b.n	80103ea <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 80103ca:	68bb      	ldr	r3, [r7, #8]
 80103cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d008      	beq.n	80103e6 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 80103d4:	68bb      	ldr	r3, [r7, #8]
 80103d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80103da:	4618      	mov	r0, r3
 80103dc:	f000 fabb 	bl	8010956 <uxStreamBufferGetSize>
 80103e0:	4603      	mov	r3, r0
 80103e2:	60fb      	str	r3, [r7, #12]
 80103e4:	e001      	b.n	80103ea <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 80103e6:	2300      	movs	r3, #0
 80103e8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 80103ea:	68fb      	ldr	r3, [r7, #12]
    }
 80103ec:	4618      	mov	r0, r3
 80103ee:	3710      	adds	r7, #16
 80103f0:	46bd      	mov	sp, r7
 80103f2:	bd80      	pop	{r7, pc}

080103f4 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 80103f4:	b480      	push	{r7}
 80103f6:	b085      	sub	sp, #20
 80103f8:	af00      	add	r7, sp, #0
 80103fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 80103fc:	2300      	movs	r3, #0
 80103fe:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010406:	d004      	beq.n	8010412 <xSocketValid+0x1e>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	2b00      	cmp	r3, #0
 801040c:	d001      	beq.n	8010412 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 801040e:	2301      	movs	r3, #1
 8010410:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 8010412:	68fb      	ldr	r3, [r7, #12]
}
 8010414:	4618      	mov	r0, r3
 8010416:	3714      	adds	r7, #20
 8010418:	46bd      	mov	sp, r7
 801041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801041e:	4770      	bx	lr

08010420 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 8010420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010424:	b09c      	sub	sp, #112	@ 0x70
 8010426:	af08      	add	r7, sp, #32
 8010428:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 801042a:	2320      	movs	r3, #32
 801042c:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 801042e:	f7f4 f915 	bl	800465c <xTaskGetTickCount>
 8010432:	4602      	mov	r2, r0
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801043a:	1ad3      	subs	r3, r2, r3
 801043c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 801043e:	2300      	movs	r3, #0
 8010440:	60fb      	str	r3, [r7, #12]
 8010442:	f107 0310 	add.w	r3, r7, #16
 8010446:	2200      	movs	r2, #0
 8010448:	601a      	str	r2, [r3, #0]
 801044a:	605a      	str	r2, [r3, #4]
 801044c:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010454:	2b01      	cmp	r3, #1
 8010456:	d11f      	bne.n	8010498 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 801045e:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 8010466:	f107 000c 	add.w	r0, r7, #12
 801046a:	9300      	str	r3, [sp, #0]
 801046c:	4613      	mov	r3, r2
 801046e:	4a3b      	ldr	r2, [pc, #236]	@ (801055c <vTCPNetStat_TCPSocket+0x13c>)
 8010470:	2110      	movs	r1, #16
 8010472:	f012 fd6d 	bl	8022f50 <snprintf>
 8010476:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010478:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801047a:	2b00      	cmp	r3, #0
 801047c:	da04      	bge.n	8010488 <vTCPNetStat_TCPSocket+0x68>
 801047e:	f241 61df 	movw	r1, #5855	@ 0x16df
 8010482:	4837      	ldr	r0, [pc, #220]	@ (8010560 <vTCPNetStat_TCPSocket+0x140>)
 8010484:	f7f1 fa58 	bl	8001938 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 8010488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801048a:	2b0f      	cmp	r3, #15
 801048c:	dd04      	ble.n	8010498 <vTCPNetStat_TCPSocket+0x78>
 801048e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 8010492:	4833      	ldr	r0, [pc, #204]	@ (8010560 <vTCPNetStat_TCPSocket+0x140>)
 8010494:	f7f1 fa50 	bl	8001938 <vAssertCalled>
        }

        if( age > 999999U )
 8010498:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801049a:	4a32      	ldr	r2, [pc, #200]	@ (8010564 <vTCPNetStat_TCPSocket+0x144>)
 801049c:	4293      	cmp	r3, r2
 801049e:	d901      	bls.n	80104a4 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 80104a0:	4b30      	ldr	r3, [pc, #192]	@ (8010564 <vTCPNetStat_TCPSocket+0x144>)
 80104a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	7a1b      	ldrb	r3, [r3, #8]
 80104a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80104ac:	b2db      	uxtb	r3, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d002      	beq.n	80104b8 <vTCPNetStat_TCPSocket+0x98>
 80104b2:	2b01      	cmp	r3, #1
 80104b4:	d009      	beq.n	80104ca <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 80104b6:	e011      	b.n	80104dc <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80104bc:	f107 001c 	add.w	r0, r7, #28
 80104c0:	4a29      	ldr	r2, [pc, #164]	@ (8010568 <vTCPNetStat_TCPSocket+0x148>)
 80104c2:	2128      	movs	r1, #40	@ 0x28
 80104c4:	f012 fd44 	bl	8022f50 <snprintf>
                    break;
 80104c8:	e008      	b.n	80104dc <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 80104ce:	f107 001c 	add.w	r0, r7, #28
 80104d2:	4a26      	ldr	r2, [pc, #152]	@ (801056c <vTCPNetStat_TCPSocket+0x14c>)
 80104d4:	2128      	movs	r1, #40	@ 0x28
 80104d6:	f012 fd3b 	bl	8022f50 <snprintf>
                    break;
 80104da:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80104e0:	4698      	mov	r8, r3
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80104e8:	461c      	mov	r4, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	bf14      	ite	ne
 80104f4:	2301      	movne	r3, #1
 80104f6:	2300      	moveq	r3, #0
 80104f8:	b2db      	uxtb	r3, r3
 80104fa:	461d      	mov	r5, r3
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010502:	2b00      	cmp	r3, #0
 8010504:	bf14      	ite	ne
 8010506:	2301      	movne	r3, #1
 8010508:	2300      	moveq	r3, #0
 801050a:	b2db      	uxtb	r3, r3
 801050c:	461e      	mov	r6, r3
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010514:	4618      	mov	r0, r3
 8010516:	f002 fbf5 	bl	8012d04 <FreeRTOS_GetTCPStateName>
 801051a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801051c:	4a11      	ldr	r2, [pc, #68]	@ (8010564 <vTCPNetStat_TCPSocket+0x144>)
 801051e:	4293      	cmp	r3, r2
 8010520:	bf28      	it	cs
 8010522:	4613      	movcs	r3, r2
 8010524:	687a      	ldr	r2, [r7, #4]
 8010526:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 801052a:	603a      	str	r2, [r7, #0]
 801052c:	f107 011c 	add.w	r1, r7, #28
 8010530:	f107 020c 	add.w	r2, r7, #12
 8010534:	9206      	str	r2, [sp, #24]
 8010536:	683a      	ldr	r2, [r7, #0]
 8010538:	9205      	str	r2, [sp, #20]
 801053a:	9304      	str	r3, [sp, #16]
 801053c:	9003      	str	r0, [sp, #12]
 801053e:	9602      	str	r6, [sp, #8]
 8010540:	9501      	str	r5, [sp, #4]
 8010542:	9400      	str	r4, [sp, #0]
 8010544:	460b      	mov	r3, r1
 8010546:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010548:	4641      	mov	r1, r8
 801054a:	4809      	ldr	r0, [pc, #36]	@ (8010570 <vTCPNetStat_TCPSocket+0x150>)
 801054c:	f011 fcd4 	bl	8021ef8 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 8010550:	bf00      	nop
 8010552:	3750      	adds	r7, #80	@ 0x50
 8010554:	46bd      	mov	sp, r7
 8010556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801055a:	bf00      	nop
 801055c:	08025dc4 	.word	0x08025dc4
 8010560:	080258e4 	.word	0x080258e4
 8010564:	000f423f 	.word	0x000f423f
 8010568:	08025dcc 	.word	0x08025dcc
 801056c:	08025dd4 	.word	0x08025dd4
 8010570:	08025ddc 	.word	0x08025ddc

08010574 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 8010574:	b580      	push	{r7, lr}
 8010576:	b08a      	sub	sp, #40	@ 0x28
 8010578:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 801057a:	2300      	movs	r3, #0
 801057c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 801057e:	f006 fe59 	bl	8017234 <uxGetMinimumFreeNetworkBuffers>
 8010582:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 8010584:	f006 fe62 	bl	801724c <uxGetNumberOfFreeNetworkBuffers>
 8010588:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 801058a:	4b26      	ldr	r3, [pc, #152]	@ (8010624 <vTCPNetStat+0xb0>)
 801058c:	689b      	ldr	r3, [r3, #8]
 801058e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010592:	d003      	beq.n	801059c <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 8010594:	4824      	ldr	r0, [pc, #144]	@ (8010628 <vTCPNetStat+0xb4>)
 8010596:	f011 fcaf 	bl	8021ef8 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 801059a:	e03f      	b.n	801061c <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 801059c:	4b23      	ldr	r3, [pc, #140]	@ (801062c <vTCPNetStat+0xb8>)
 801059e:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 80105a0:	4b23      	ldr	r3, [pc, #140]	@ (8010630 <vTCPNetStat+0xbc>)
 80105a2:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 80105a4:	4823      	ldr	r0, [pc, #140]	@ (8010634 <vTCPNetStat+0xc0>)
 80105a6:	f011 fca7 	bl	8021ef8 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80105aa:	4b1e      	ldr	r3, [pc, #120]	@ (8010624 <vTCPNetStat+0xb0>)
 80105ac:	68db      	ldr	r3, [r3, #12]
 80105ae:	61fb      	str	r3, [r7, #28]
 80105b0:	e00b      	b.n	80105ca <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	68db      	ldr	r3, [r3, #12]
 80105b6:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 80105b8:	6878      	ldr	r0, [r7, #4]
 80105ba:	f7ff ff31 	bl	8010420 <vTCPNetStat_TCPSocket>
                count++;
 80105be:	69bb      	ldr	r3, [r7, #24]
 80105c0:	3301      	adds	r3, #1
 80105c2:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 80105c4:	69fb      	ldr	r3, [r7, #28]
 80105c6:	685b      	ldr	r3, [r3, #4]
 80105c8:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 80105ca:	69fa      	ldr	r2, [r7, #28]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	429a      	cmp	r2, r3
 80105d0:	d1ef      	bne.n	80105b2 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 80105d2:	4b19      	ldr	r3, [pc, #100]	@ (8010638 <vTCPNetStat+0xc4>)
 80105d4:	68db      	ldr	r3, [r3, #12]
 80105d6:	61fb      	str	r3, [r7, #28]
 80105d8:	e014      	b.n	8010604 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	b29b      	uxth	r3, r3
 80105e0:	021b      	lsls	r3, r3, #8
 80105e2:	b29a      	uxth	r2, r3
 80105e4:	69fb      	ldr	r3, [r7, #28]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	0a1b      	lsrs	r3, r3, #8
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	4313      	orrs	r3, r2
 80105ee:	b29b      	uxth	r3, r3
 80105f0:	4619      	mov	r1, r3
 80105f2:	4812      	ldr	r0, [pc, #72]	@ (801063c <vTCPNetStat+0xc8>)
 80105f4:	f011 fc80 	bl	8021ef8 <lUDPLoggingPrintf>
                count++;
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	3301      	adds	r3, #1
 80105fc:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 80105fe:	69fb      	ldr	r3, [r7, #28]
 8010600:	685b      	ldr	r3, [r3, #4]
 8010602:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 8010604:	69fa      	ldr	r2, [r7, #28]
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	429a      	cmp	r2, r3
 801060a:	d1e6      	bne.n	80105da <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 801060c:	2340      	movs	r3, #64	@ 0x40
 801060e:	9300      	str	r3, [sp, #0]
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	697a      	ldr	r2, [r7, #20]
 8010614:	69b9      	ldr	r1, [r7, #24]
 8010616:	480a      	ldr	r0, [pc, #40]	@ (8010640 <vTCPNetStat+0xcc>)
 8010618:	f011 fc6e 	bl	8021ef8 <lUDPLoggingPrintf>
    }
 801061c:	bf00      	nop
 801061e:	3720      	adds	r7, #32
 8010620:	46bd      	mov	sp, r7
 8010622:	bd80      	pop	{r7, pc}
 8010624:	20001580 	.word	0x20001580
 8010628:	08025e08 	.word	0x08025e08
 801062c:	20001588 	.word	0x20001588
 8010630:	20001574 	.word	0x20001574
 8010634:	08025e24 	.word	0x08025e24
 8010638:	2000156c 	.word	0x2000156c
 801063c:	08025e6c 	.word	0x08025e6c
 8010640:	08025e7c 	.word	0x08025e7c

08010644 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 8010644:	b580      	push	{r7, lr}
 8010646:	b086      	sub	sp, #24
 8010648:	af00      	add	r7, sp, #0
 801064a:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 801064c:	2300      	movs	r3, #0
 801064e:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 8010650:	2300      	movs	r3, #0
 8010652:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801065a:	f003 0304 	and.w	r3, r3, #4
 801065e:	b2db      	uxtb	r3, r3
 8010660:	2b00      	cmp	r3, #0
 8010662:	d109      	bne.n	8010678 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801066a:	f003 0302 	and.w	r3, r3, #2
 801066e:	b2db      	uxtb	r3, r3
 8010670:	2b00      	cmp	r3, #0
 8010672:	d101      	bne.n	8010678 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 8010674:	2301      	movs	r3, #1
 8010676:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801067c:	f003 0301 	and.w	r3, r3, #1
 8010680:	2b00      	cmp	r3, #0
 8010682:	d038      	beq.n	80106f6 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801068a:	2b01      	cmp	r3, #1
 801068c:	d111      	bne.n	80106b2 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010692:	2b00      	cmp	r3, #0
 8010694:	d02f      	beq.n	80106f6 <vSocketSelectTCP+0xb2>
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801069a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801069e:	f003 0302 	and.w	r3, r3, #2
 80106a2:	b2db      	uxtb	r3, r3
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d026      	beq.n	80106f6 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	f043 0301 	orr.w	r3, r3, #1
 80106ae:	613b      	str	r3, [r7, #16]
 80106b0:	e021      	b.n	80106f6 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80106b8:	f003 0308 	and.w	r3, r3, #8
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d00c      	beq.n	80106dc <vSocketSelectTCP+0x98>
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80106c8:	f003 0302 	and.w	r3, r3, #2
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d004      	beq.n	80106dc <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80106d2:	693b      	ldr	r3, [r7, #16]
 80106d4:	f043 0301 	orr.w	r3, r3, #1
 80106d8:	613b      	str	r3, [r7, #16]
 80106da:	e00c      	b.n	80106f6 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d009      	beq.n	80106f6 <vSocketSelectTCP+0xb2>
 80106e2:	6878      	ldr	r0, [r7, #4]
 80106e4:	f7ff fe62 	bl	80103ac <FreeRTOS_rx_size>
 80106e8:	4603      	mov	r3, r0
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	dd03      	ble.n	80106f6 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	f043 0301 	orr.w	r3, r3, #1
 80106f4:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80106fa:	f003 0304 	and.w	r3, r3, #4
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d00d      	beq.n	801071e <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010708:	2b08      	cmp	r3, #8
 801070a:	d004      	beq.n	8010716 <vSocketSelectTCP+0xd2>
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010712:	2b00      	cmp	r3, #0
 8010714:	d103      	bne.n	801071e <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	f043 0304 	orr.w	r3, r3, #4
 801071c:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010722:	f003 0302 	and.w	r3, r3, #2
 8010726:	2b00      	cmp	r3, #0
 8010728:	d034      	beq.n	8010794 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 801072a:	2300      	movs	r3, #0
 801072c:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 801072e:	697b      	ldr	r3, [r7, #20]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d007      	beq.n	8010744 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 8010734:	6878      	ldr	r0, [r7, #4]
 8010736:	f7ff fdcb 	bl	80102d0 <FreeRTOS_tx_space>
 801073a:	4603      	mov	r3, r0
 801073c:	2b00      	cmp	r3, #0
 801073e:	dd01      	ble.n	8010744 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 8010740:	2301      	movs	r3, #1
 8010742:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d11d      	bne.n	8010786 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010750:	f003 0308 	and.w	r3, r3, #8
 8010754:	b2db      	uxtb	r3, r3
 8010756:	2b00      	cmp	r3, #0
 8010758:	d015      	beq.n	8010786 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 8010760:	2b04      	cmp	r3, #4
 8010762:	d910      	bls.n	8010786 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801076a:	f003 0310 	and.w	r3, r3, #16
 801076e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 8010770:	2b00      	cmp	r3, #0
 8010772:	d108      	bne.n	8010786 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 8010774:	687a      	ldr	r2, [r7, #4]
 8010776:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801077a:	f043 0310 	orr.w	r3, r3, #16
 801077e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 8010782:	2301      	movs	r3, #1
 8010784:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d003      	beq.n	8010794 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	f043 0302 	orr.w	r3, r3, #2
 8010792:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 8010794:	693b      	ldr	r3, [r7, #16]
        }
 8010796:	4618      	mov	r0, r3
 8010798:	3718      	adds	r7, #24
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
	...

080107a0 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 80107a0:	b580      	push	{r7, lr}
 80107a2:	b08a      	sub	sp, #40	@ 0x28
 80107a4:	af00      	add	r7, sp, #0
 80107a6:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 80107a8:	2301      	movs	r3, #1
 80107aa:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 80107ac:	2300      	movs	r3, #0
 80107ae:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 80107b0:	2300      	movs	r3, #0
 80107b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80107b4:	e043      	b.n	801083e <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 80107b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d102      	bne.n	80107c2 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 80107bc:	4b34      	ldr	r3, [pc, #208]	@ (8010890 <vSocketSelect+0xf0>)
 80107be:	617b      	str	r3, [r7, #20]
 80107c0:	e001      	b.n	80107c6 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80107c2:	4b34      	ldr	r3, [pc, #208]	@ (8010894 <vSocketSelect+0xf4>)
 80107c4:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	685b      	ldr	r3, [r3, #4]
 80107ca:	61bb      	str	r3, [r7, #24]
 80107cc:	e030      	b.n	8010830 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80107ce:	69bb      	ldr	r3, [r7, #24]
 80107d0:	68db      	ldr	r3, [r3, #12]
 80107d2:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 80107d4:	68bb      	ldr	r3, [r7, #8]
 80107d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80107d8:	687a      	ldr	r2, [r7, #4]
 80107da:	429a      	cmp	r2, r3
 80107dc:	d124      	bne.n	8010828 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 80107de:	2300      	movs	r3, #0
 80107e0:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 80107e2:	68bb      	ldr	r3, [r7, #8]
 80107e4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 80107e8:	2b06      	cmp	r3, #6
 80107ea:	d107      	bne.n	80107fc <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 80107ec:	68b8      	ldr	r0, [r7, #8]
 80107ee:	f7ff ff29 	bl	8010644 <vSocketSelectTCP>
 80107f2:	4602      	mov	r2, r0
 80107f4:	6a3b      	ldr	r3, [r7, #32]
 80107f6:	4313      	orrs	r3, r2
 80107f8:	623b      	str	r3, [r7, #32]
 80107fa:	e00d      	b.n	8010818 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010800:	f003 0301 	and.w	r3, r3, #1
 8010804:	2b00      	cmp	r3, #0
 8010806:	d007      	beq.n	8010818 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 801080c:	2b00      	cmp	r3, #0
 801080e:	d003      	beq.n	8010818 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 8010810:	6a3b      	ldr	r3, [r7, #32]
 8010812:	f043 0301 	orr.w	r3, r3, #1
 8010816:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	6a3a      	ldr	r2, [r7, #32]
 801081c:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 801081e:	69fa      	ldr	r2, [r7, #28]
 8010820:	6a3b      	ldr	r3, [r7, #32]
 8010822:	4313      	orrs	r3, r2
 8010824:	61fb      	str	r3, [r7, #28]
 8010826:	e000      	b.n	801082a <vSocketSelect+0x8a>
                    continue;
 8010828:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 801082a:	69bb      	ldr	r3, [r7, #24]
 801082c:	685b      	ldr	r3, [r3, #4]
 801082e:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 8010830:	69ba      	ldr	r2, [r7, #24]
 8010832:	697b      	ldr	r3, [r7, #20]
 8010834:	429a      	cmp	r2, r3
 8010836:	d1ca      	bne.n	80107ce <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 8010838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083a:	3301      	adds	r3, #1
 801083c:	627b      	str	r3, [r7, #36]	@ 0x24
 801083e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	429a      	cmp	r2, r3
 8010844:	ddb7      	ble.n	80107b6 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2100      	movs	r1, #0
 801084c:	4618      	mov	r0, r3
 801084e:	f7f2 fc19 	bl	8003084 <xEventGroupClearBits>
 8010852:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 8010854:	69fb      	ldr	r3, [r7, #28]
 8010856:	43da      	mvns	r2, r3
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	4013      	ands	r3, r2
 801085c:	f003 030f 	and.w	r3, r3, #15
 8010860:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d005      	beq.n	8010874 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	68f9      	ldr	r1, [r7, #12]
 801086e:	4618      	mov	r0, r3
 8010870:	f7f2 fc08 	bl	8003084 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681a      	ldr	r2, [r3, #0]
 8010878:	69fb      	ldr	r3, [r7, #28]
 801087a:	f043 0310 	orr.w	r3, r3, #16
 801087e:	4619      	mov	r1, r3
 8010880:	4610      	mov	r0, r2
 8010882:	f7f2 fc2d 	bl	80030e0 <xEventGroupSetBits>
    }
 8010886:	bf00      	nop
 8010888:	3728      	adds	r7, #40	@ 0x28
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}
 801088e:	bf00      	nop
 8010890:	20001574 	.word	0x20001574
 8010894:	20001588 	.word	0x20001588

08010898 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 8010898:	b480      	push	{r7}
 801089a:	b087      	sub	sp, #28
 801089c:	af00      	add	r7, sp, #0
 801089e:	60f8      	str	r0, [r7, #12]
 80108a0:	60b9      	str	r1, [r7, #8]
 80108a2:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	691b      	ldr	r3, [r3, #16]
 80108a8:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 80108aa:	693a      	ldr	r2, [r7, #16]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	441a      	add	r2, r3
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	1ad3      	subs	r3, r2, r3
 80108b4:	3b01      	subs	r3, #1
 80108b6:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 80108b8:	697a      	ldr	r2, [r7, #20]
 80108ba:	693b      	ldr	r3, [r7, #16]
 80108bc:	429a      	cmp	r2, r3
 80108be:	d303      	bcc.n	80108c8 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 80108c0:	697a      	ldr	r2, [r7, #20]
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	1ad3      	subs	r3, r2, r3
 80108c6:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 80108c8:	697b      	ldr	r3, [r7, #20]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	371c      	adds	r7, #28
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr

080108d6 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 80108d6:	b480      	push	{r7}
 80108d8:	b087      	sub	sp, #28
 80108da:	af00      	add	r7, sp, #0
 80108dc:	60f8      	str	r0, [r7, #12]
 80108de:	60b9      	str	r1, [r7, #8]
 80108e0:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	691b      	ldr	r3, [r3, #16]
 80108e6:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 80108e8:	693a      	ldr	r2, [r7, #16]
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	441a      	add	r2, r3
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	1ad3      	subs	r3, r2, r3
 80108f2:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 80108f4:	697a      	ldr	r2, [r7, #20]
 80108f6:	693b      	ldr	r3, [r7, #16]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d303      	bcc.n	8010904 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 80108fc:	697a      	ldr	r2, [r7, #20]
 80108fe:	693b      	ldr	r3, [r7, #16]
 8010900:	1ad3      	subs	r3, r2, r3
 8010902:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 8010904:	697b      	ldr	r3, [r7, #20]
}
 8010906:	4618      	mov	r0, r3
 8010908:	371c      	adds	r7, #28
 801090a:	46bd      	mov	sp, r7
 801090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010910:	4770      	bx	lr

08010912 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 8010912:	b580      	push	{r7, lr}
 8010914:	b082      	sub	sp, #8
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	6899      	ldr	r1, [r3, #8]
 801091e:	687b      	ldr	r3, [r7, #4]
 8010920:	681b      	ldr	r3, [r3, #0]
 8010922:	461a      	mov	r2, r3
 8010924:	6878      	ldr	r0, [r7, #4]
 8010926:	f7ff ffb7 	bl	8010898 <uxStreamBufferSpace>
 801092a:	4603      	mov	r3, r0
}
 801092c:	4618      	mov	r0, r3
 801092e:	3708      	adds	r7, #8
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	68d9      	ldr	r1, [r3, #12]
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	461a      	mov	r2, r3
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f7ff ffa6 	bl	8010898 <uxStreamBufferSpace>
 801094c:	4603      	mov	r3, r0
}
 801094e:	4618      	mov	r0, r3
 8010950:	3708      	adds	r7, #8
 8010952:	46bd      	mov	sp, r7
 8010954:	bd80      	pop	{r7, pc}

08010956 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 8010956:	b580      	push	{r7, lr}
 8010958:	b082      	sub	sp, #8
 801095a:	af00      	add	r7, sp, #0
 801095c:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	6819      	ldr	r1, [r3, #0]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	689b      	ldr	r3, [r3, #8]
 8010966:	461a      	mov	r2, r3
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	f7ff ffb4 	bl	80108d6 <uxStreamBufferDistance>
 801096e:	4603      	mov	r3, r0
}
 8010970:	4618      	mov	r0, r3
 8010972:	3708      	adds	r7, #8
 8010974:	46bd      	mov	sp, r7
 8010976:	bd80      	pop	{r7, pc}

08010978 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
 801097e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	6859      	ldr	r1, [r3, #4]
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	689b      	ldr	r3, [r3, #8]
 8010988:	461a      	mov	r2, r3
 801098a:	6878      	ldr	r0, [r7, #4]
 801098c:	f7ff ffa3 	bl	80108d6 <uxStreamBufferDistance>
 8010990:	4603      	mov	r3, r0
}
 8010992:	4618      	mov	r0, r3
 8010994:	3708      	adds	r7, #8
 8010996:	46bd      	mov	sp, r7
 8010998:	bd80      	pop	{r7, pc}

0801099a <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 801099a:	b480      	push	{r7}
 801099c:	b083      	sub	sp, #12
 801099e:	af00      	add	r7, sp, #0
 80109a0:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	2200      	movs	r2, #0
 80109a6:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2200      	movs	r2, #0
 80109ac:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2200      	movs	r2, #0
 80109b2:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2200      	movs	r2, #0
 80109b8:	605a      	str	r2, [r3, #4]
}
 80109ba:	bf00      	nop
 80109bc:	370c      	adds	r7, #12
 80109be:	46bd      	mov	sp, r7
 80109c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c4:	4770      	bx	lr

080109c6 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 80109c6:	b580      	push	{r7, lr}
 80109c8:	b086      	sub	sp, #24
 80109ca:	af00      	add	r7, sp, #0
 80109cc:	6078      	str	r0, [r7, #4]
 80109ce:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	691b      	ldr	r3, [r3, #16]
 80109d4:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f7ff ffce 	bl	8010978 <uxStreamBufferMidSpace>
 80109dc:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	685b      	ldr	r3, [r3, #4]
 80109e2:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 80109e4:	683b      	ldr	r3, [r7, #0]
 80109e6:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 80109e8:	693a      	ldr	r2, [r7, #16]
 80109ea:	68bb      	ldr	r3, [r7, #8]
 80109ec:	429a      	cmp	r2, r3
 80109ee:	d901      	bls.n	80109f4 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 80109f4:	697a      	ldr	r2, [r7, #20]
 80109f6:	693b      	ldr	r3, [r7, #16]
 80109f8:	4413      	add	r3, r2
 80109fa:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 80109fc:	697a      	ldr	r2, [r7, #20]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d303      	bcc.n	8010a0c <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 8010a04:	697a      	ldr	r2, [r7, #20]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	1ad3      	subs	r3, r2, r3
 8010a0a:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	697a      	ldr	r2, [r7, #20]
 8010a10:	605a      	str	r2, [r3, #4]
}
 8010a12:	bf00      	nop
 8010a14:	3718      	adds	r7, #24
 8010a16:	46bd      	mov	sp, r7
 8010a18:	bd80      	pop	{r7, pc}

08010a1a <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 8010a1a:	b480      	push	{r7}
 8010a1c:	b087      	sub	sp, #28
 8010a1e:	af00      	add	r7, sp, #0
 8010a20:	60f8      	str	r0, [r7, #12]
 8010a22:	60b9      	str	r1, [r7, #8]
 8010a24:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8010a26:	2300      	movs	r3, #0
 8010a28:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 8010a30:	68ba      	ldr	r2, [r7, #8]
 8010a32:	693b      	ldr	r3, [r7, #16]
 8010a34:	1ad2      	subs	r2, r2, r3
 8010a36:	6879      	ldr	r1, [r7, #4]
 8010a38:	693b      	ldr	r3, [r7, #16]
 8010a3a:	1acb      	subs	r3, r1, r3
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d801      	bhi.n	8010a44 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 8010a40:	2301      	movs	r3, #1
 8010a42:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8010a44:	697b      	ldr	r3, [r7, #20]
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	371c      	adds	r7, #28
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr

08010a52 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b084      	sub	sp, #16
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
 8010a5a:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff ff77 	bl	8010956 <uxStreamBufferGetSize>
 8010a68:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	f103 0214 	add.w	r2, r3, #20
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	441a      	add	r2, r3
 8010a74:	683b      	ldr	r3, [r7, #0]
 8010a76:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	691a      	ldr	r2, [r3, #16]
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	1ad3      	subs	r3, r2, r3
 8010a80:	4619      	mov	r1, r3
 8010a82:	68b8      	ldr	r0, [r7, #8]
 8010a84:	f7f9 fede 	bl	800a844 <FreeRTOS_min_size_t>
 8010a88:	4603      	mov	r3, r0
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}

08010a92 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 8010a92:	b580      	push	{r7, lr}
 8010a94:	b08a      	sub	sp, #40	@ 0x28
 8010a96:	af00      	add	r7, sp, #0
 8010a98:	60f8      	str	r0, [r7, #12]
 8010a9a:	60b9      	str	r1, [r7, #8]
 8010a9c:	607a      	str	r2, [r7, #4]
 8010a9e:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 8010aa0:	68f8      	ldr	r0, [r7, #12]
 8010aa2:	f7ff ff36 	bl	8010912 <uxStreamBufferGetSpace>
 8010aa6:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 8010aa8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	429a      	cmp	r2, r3
 8010aae:	d904      	bls.n	8010aba <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 8010ab0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	1ad3      	subs	r3, r2, r3
 8010ab6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010ab8:	e001      	b.n	8010abe <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 8010aba:	2300      	movs	r3, #0
 8010abc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 8010abe:	6839      	ldr	r1, [r7, #0]
 8010ac0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010ac2:	f7f9 febf 	bl	800a844 <FreeRTOS_min_size_t>
 8010ac6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010ac8:	69fb      	ldr	r3, [r7, #28]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d05c      	beq.n	8010b88 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	691b      	ldr	r3, [r3, #16]
 8010ad2:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	689b      	ldr	r3, [r3, #8]
 8010ad8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8010ada:	68bb      	ldr	r3, [r7, #8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d00b      	beq.n	8010af8 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 8010ae0:	6a3a      	ldr	r2, [r7, #32]
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	4413      	add	r3, r2
 8010ae6:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8010ae8:	6a3a      	ldr	r2, [r7, #32]
 8010aea:	69bb      	ldr	r3, [r7, #24]
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d303      	bcc.n	8010af8 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 8010af0:	6a3a      	ldr	r2, [r7, #32]
 8010af2:	69bb      	ldr	r3, [r7, #24]
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d021      	beq.n	8010b42 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 8010afe:	69ba      	ldr	r2, [r7, #24]
 8010b00:	6a3b      	ldr	r3, [r7, #32]
 8010b02:	1ad3      	subs	r3, r2, r3
 8010b04:	69f9      	ldr	r1, [r7, #28]
 8010b06:	4618      	mov	r0, r3
 8010b08:	f7f9 fe9c 	bl	800a844 <FreeRTOS_min_size_t>
 8010b0c:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	3310      	adds	r3, #16
 8010b12:	68fa      	ldr	r2, [r7, #12]
 8010b14:	4413      	add	r3, r2
 8010b16:	3304      	adds	r3, #4
 8010b18:	697a      	ldr	r2, [r7, #20]
 8010b1a:	6879      	ldr	r1, [r7, #4]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f011 fc07 	bl	8022330 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 8010b22:	69fa      	ldr	r2, [r7, #28]
 8010b24:	697b      	ldr	r3, [r7, #20]
 8010b26:	429a      	cmp	r2, r3
 8010b28:	d90b      	bls.n	8010b42 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 8010b2a:	68fb      	ldr	r3, [r7, #12]
 8010b2c:	f103 0014 	add.w	r0, r3, #20
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	697b      	ldr	r3, [r7, #20]
 8010b34:	18d1      	adds	r1, r2, r3
 8010b36:	69fa      	ldr	r2, [r7, #28]
 8010b38:	697b      	ldr	r3, [r7, #20]
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	f011 fbf7 	bl	8022330 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 8010b42:	f7f3 fc79 	bl	8004438 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d10e      	bne.n	8010b6a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 8010b4c:	6a3a      	ldr	r2, [r7, #32]
 8010b4e:	69fb      	ldr	r3, [r7, #28]
 8010b50:	4413      	add	r3, r2
 8010b52:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 8010b54:	6a3a      	ldr	r2, [r7, #32]
 8010b56:	69bb      	ldr	r3, [r7, #24]
 8010b58:	429a      	cmp	r2, r3
 8010b5a:	d303      	bcc.n	8010b64 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 8010b5c:	6a3a      	ldr	r2, [r7, #32]
 8010b5e:	69bb      	ldr	r3, [r7, #24]
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	6a3a      	ldr	r2, [r7, #32]
 8010b68:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 8010b6a:	68fb      	ldr	r3, [r7, #12]
 8010b6c:	68db      	ldr	r3, [r3, #12]
 8010b6e:	6a3a      	ldr	r2, [r7, #32]
 8010b70:	4619      	mov	r1, r3
 8010b72:	68f8      	ldr	r0, [r7, #12]
 8010b74:	f7ff ff51 	bl	8010a1a <xStreamBufferLessThenEqual>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d002      	beq.n	8010b84 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	6a3a      	ldr	r2, [r7, #32]
 8010b82:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 8010b84:	f7f3 fc66 	bl	8004454 <xTaskResumeAll>
    }

    return uxCount;
 8010b88:	69fb      	ldr	r3, [r7, #28]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3728      	adds	r7, #40	@ 0x28
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b08a      	sub	sp, #40	@ 0x28
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	60f8      	str	r0, [r7, #12]
 8010b9a:	60b9      	str	r1, [r7, #8]
 8010b9c:	607a      	str	r2, [r7, #4]
 8010b9e:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010ba0:	68f8      	ldr	r0, [r7, #12]
 8010ba2:	f7ff fed8 	bl	8010956 <uxStreamBufferGetSize>
 8010ba6:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 8010ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	429a      	cmp	r2, r3
 8010bae:	d904      	bls.n	8010bba <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 8010bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010bb2:	68bb      	ldr	r3, [r7, #8]
 8010bb4:	1ad3      	subs	r3, r2, r3
 8010bb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bb8:	e001      	b.n	8010bbe <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 8010bbe:	6839      	ldr	r1, [r7, #0]
 8010bc0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010bc2:	f7f9 fe3f 	bl	800a844 <FreeRTOS_min_size_t>
 8010bc6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 8010bc8:	69fb      	ldr	r3, [r7, #28]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d04e      	beq.n	8010c6c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 8010bce:	68fb      	ldr	r3, [r7, #12]
 8010bd0:	691b      	ldr	r3, [r3, #16]
 8010bd2:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d00b      	beq.n	8010bf8 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 8010be0:	6a3a      	ldr	r2, [r7, #32]
 8010be2:	68bb      	ldr	r3, [r7, #8]
 8010be4:	4413      	add	r3, r2
 8010be6:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010be8:	6a3a      	ldr	r2, [r7, #32]
 8010bea:	69bb      	ldr	r3, [r7, #24]
 8010bec:	429a      	cmp	r2, r3
 8010bee:	d303      	bcc.n	8010bf8 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 8010bf0:	6a3a      	ldr	r2, [r7, #32]
 8010bf2:	69bb      	ldr	r3, [r7, #24]
 8010bf4:	1ad3      	subs	r3, r2, r3
 8010bf6:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d021      	beq.n	8010c42 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 8010bfe:	69ba      	ldr	r2, [r7, #24]
 8010c00:	6a3b      	ldr	r3, [r7, #32]
 8010c02:	1ad3      	subs	r3, r2, r3
 8010c04:	69f9      	ldr	r1, [r7, #28]
 8010c06:	4618      	mov	r0, r3
 8010c08:	f7f9 fe1c 	bl	800a844 <FreeRTOS_min_size_t>
 8010c0c:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 8010c0e:	6a3b      	ldr	r3, [r7, #32]
 8010c10:	3310      	adds	r3, #16
 8010c12:	68fa      	ldr	r2, [r7, #12]
 8010c14:	4413      	add	r3, r2
 8010c16:	3304      	adds	r3, #4
 8010c18:	697a      	ldr	r2, [r7, #20]
 8010c1a:	4619      	mov	r1, r3
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f011 fb87 	bl	8022330 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 8010c22:	69fa      	ldr	r2, [r7, #28]
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d90b      	bls.n	8010c42 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 8010c2a:	687a      	ldr	r2, [r7, #4]
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	18d0      	adds	r0, r2, r3
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	f103 0114 	add.w	r1, r3, #20
 8010c36:	69fa      	ldr	r2, [r7, #28]
 8010c38:	697b      	ldr	r3, [r7, #20]
 8010c3a:	1ad3      	subs	r3, r2, r3
 8010c3c:	461a      	mov	r2, r3
 8010c3e:	f011 fb77 	bl	8022330 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 8010c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d111      	bne.n	8010c6c <uxStreamBufferGet+0xda>
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d10e      	bne.n	8010c6c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 8010c4e:	6a3a      	ldr	r2, [r7, #32]
 8010c50:	69fb      	ldr	r3, [r7, #28]
 8010c52:	4413      	add	r3, r2
 8010c54:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010c56:	6a3a      	ldr	r2, [r7, #32]
 8010c58:	69bb      	ldr	r3, [r7, #24]
 8010c5a:	429a      	cmp	r2, r3
 8010c5c:	d303      	bcc.n	8010c66 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 8010c5e:	6a3a      	ldr	r2, [r7, #32]
 8010c60:	69bb      	ldr	r3, [r7, #24]
 8010c62:	1ad3      	subs	r3, r2, r3
 8010c64:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	6a3a      	ldr	r2, [r7, #32]
 8010c6a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 8010c6c:	69fb      	ldr	r3, [r7, #28]
}
 8010c6e:	4618      	mov	r0, r3
 8010c70:	3728      	adds	r7, #40	@ 0x28
 8010c72:	46bd      	mov	sp, r7
 8010c74:	bd80      	pop	{r7, pc}
	...

08010c78 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 8010c80:	4b0a      	ldr	r3, [pc, #40]	@ (8010cac <vSocketCloseNextTime+0x34>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d009      	beq.n	8010c9c <vSocketCloseNextTime+0x24>
 8010c88:	4b08      	ldr	r3, [pc, #32]	@ (8010cac <vSocketCloseNextTime+0x34>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	687a      	ldr	r2, [r7, #4]
 8010c8e:	429a      	cmp	r2, r3
 8010c90:	d004      	beq.n	8010c9c <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 8010c92:	4b06      	ldr	r3, [pc, #24]	@ (8010cac <vSocketCloseNextTime+0x34>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fd fd98 	bl	800e7cc <vSocketClose>
        }

        xSocketToClose = pxSocket;
 8010c9c:	4a03      	ldr	r2, [pc, #12]	@ (8010cac <vSocketCloseNextTime+0x34>)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6013      	str	r3, [r2, #0]
    }
 8010ca2:	bf00      	nop
 8010ca4:	3708      	adds	r7, #8
 8010ca6:	46bd      	mov	sp, r7
 8010ca8:	bd80      	pop	{r7, pc}
 8010caa:	bf00      	nop
 8010cac:	20001598 	.word	0x20001598

08010cb0 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	b082      	sub	sp, #8
 8010cb4:	af00      	add	r7, sp, #0
 8010cb6:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 8010cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8010cec <vSocketListenNextTime+0x3c>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d00e      	beq.n	8010cde <vSocketListenNextTime+0x2e>
 8010cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8010cec <vSocketListenNextTime+0x3c>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d009      	beq.n	8010cde <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 8010cca:	4b08      	ldr	r3, [pc, #32]	@ (8010cec <vSocketListenNextTime+0x3c>)
 8010ccc:	681a      	ldr	r2, [r3, #0]
 8010cce:	4b07      	ldr	r3, [pc, #28]	@ (8010cec <vSocketListenNextTime+0x3c>)
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8010cd6:	4619      	mov	r1, r3
 8010cd8:	4610      	mov	r0, r2
 8010cda:	f7fe fff3 	bl	800fcc4 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 8010cde:	4a03      	ldr	r2, [pc, #12]	@ (8010cec <vSocketListenNextTime+0x3c>)
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6013      	str	r3, [r2, #0]
    }
 8010ce4:	bf00      	nop
 8010ce6:	3708      	adds	r7, #8
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	2000159c 	.word	0x2000159c

08010cf0 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 8010cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cf4:	b086      	sub	sp, #24
 8010cf6:	af02      	add	r7, sp, #8
 8010cf8:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 8010cfe:	2300      	movs	r3, #0
 8010d00:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010d08:	2b04      	cmp	r3, #4
 8010d0a:	d907      	bls.n	8010d1c <xTCPSocketCheck+0x2c>
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d002      	beq.n	8010d1c <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 8010d16:	6878      	ldr	r0, [r7, #4]
 8010d18:	f003 f834 	bl	8013d84 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d05f      	beq.n	8010de6 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010d2c:	f003 0320 	and.w	r3, r3, #32
 8010d30:	b2db      	uxtb	r3, r3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d148      	bne.n	8010dc8 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d03b      	beq.n	8010db8 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8010d40:	4b37      	ldr	r3, [pc, #220]	@ (8010e20 <xTCPSocketCheck+0x130>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b01      	cmp	r3, #1
 8010d46:	dd25      	ble.n	8010d94 <xTCPSocketCheck+0xa4>
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010d4c:	2b17      	cmp	r3, #23
 8010d4e:	d021      	beq.n	8010d94 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010d54:	461e      	mov	r6, r3
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010d5c:	4698      	mov	r8, r3
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8010d6a:	1ad5      	subs	r5, r2, r3
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010d78:	1ad4      	subs	r4, r2, r3
 8010d7a:	6878      	ldr	r0, [r7, #4]
 8010d7c:	f7f9 f81e 	bl	8009dbc <uxIPHeaderSizeSocket>
 8010d80:	4603      	mov	r3, r0
 8010d82:	3314      	adds	r3, #20
 8010d84:	9301      	str	r3, [sp, #4]
 8010d86:	9400      	str	r4, [sp, #0]
 8010d88:	462b      	mov	r3, r5
 8010d8a:	4642      	mov	r2, r8
 8010d8c:	4631      	mov	r1, r6
 8010d8e:	4825      	ldr	r0, [pc, #148]	@ (8010e24 <xTCPSocketCheck+0x134>)
 8010d90:	f011 f8b2 	bl	8021ef8 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 8010d9a:	6878      	ldr	r0, [r7, #4]
 8010d9c:	f7f9 f80e 	bl	8009dbc <uxIPHeaderSizeSocket>
 8010da0:	4603      	mov	r3, r0
 8010da2:	f103 0214 	add.w	r2, r3, #20
 8010da6:	2301      	movs	r3, #1
 8010da8:	4621      	mov	r1, r4
 8010daa:	6878      	ldr	r0, [r7, #4]
 8010dac:	f002 fac8 	bl	8013340 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	2200      	movs	r2, #0
 8010db4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 8010db8:	6878      	ldr	r0, [r7, #4]
 8010dba:	f000 faa1 	bl	8011300 <prvTCPNextTimeout>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d901      	bls.n	8010dc8 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d009      	beq.n	8010de6 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010dd8:	4618      	mov	r0, r3
 8010dda:	f006 f9e5 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8010de6:	68bb      	ldr	r3, [r7, #8]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d113      	bne.n	8010e14 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010df2:	2b04      	cmp	r3, #4
 8010df4:	d804      	bhi.n	8010e00 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 8010dfc:	2b02      	cmp	r3, #2
 8010dfe:	d102      	bne.n	8010e06 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 8010e00:	6878      	ldr	r0, [r7, #4]
 8010e02:	f002 f9ff 	bl	8013204 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 fa7a 	bl	8011300 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f001 f973 	bl	80120f8 <prvTCPStatusAgeCheck>
 8010e12:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8010e14:	68fb      	ldr	r3, [r7, #12]
    }
 8010e16:	4618      	mov	r0, r3
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e20:	200015c4 	.word	0x200015c4
 8010e24:	08025eb4 	.word	0x08025eb4

08010e28 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8010e30:	f7f3 fc14 	bl	800465c <xTaskGetTickCount>
 8010e34:	4602      	mov	r2, r0
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 8010e3c:	687a      	ldr	r2, [r7, #4]
 8010e3e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010e42:	f36f 0382 	bfc	r3, #2, #1
 8010e46:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8010e4a:	687a      	ldr	r2, [r7, #4]
 8010e4c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010e50:	f36f 0341 	bfc	r3, #1, #1
 8010e54:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010e60:	f7f3 fbfc 	bl	800465c <xTaskGetTickCount>
 8010e64:	4602      	mov	r2, r0
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 8010e6c:	bf00      	nop
 8010e6e:	3708      	adds	r7, #8
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd80      	pop	{r7, pc}

08010e74 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010e74:	b480      	push	{r7}
 8010e76:	b087      	sub	sp, #28
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010e80:	4b15      	ldr	r3, [pc, #84]	@ (8010ed8 <vTCPRemoveTCPChild+0x64>)
 8010e82:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010e84:	4b15      	ldr	r3, [pc, #84]	@ (8010edc <vTCPRemoveTCPChild+0x68>)
 8010e86:	68db      	ldr	r3, [r3, #12]
 8010e88:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 8010e8a:	e01a      	b.n	8010ec2 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010e8c:	693b      	ldr	r3, [r7, #16]
 8010e8e:	68db      	ldr	r3, [r3, #12]
 8010e90:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	429a      	cmp	r2, r3
 8010e9e:	d010      	beq.n	8010ec2 <vTCPRemoveTCPChild+0x4e>
 8010ea0:	68bb      	ldr	r3, [r7, #8]
 8010ea2:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010ea8:	429a      	cmp	r2, r3
 8010eaa:	d10a      	bne.n	8010ec2 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 8010eac:	68bb      	ldr	r3, [r7, #8]
 8010eae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010eb0:	687a      	ldr	r2, [r7, #4]
 8010eb2:	429a      	cmp	r2, r3
 8010eb4:	d105      	bne.n	8010ec2 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	2200      	movs	r2, #0
 8010eba:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	617b      	str	r3, [r7, #20]
                    break;
 8010ec0:	e003      	b.n	8010eca <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 8010ec2:	693a      	ldr	r2, [r7, #16]
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	429a      	cmp	r2, r3
 8010ec8:	d1e0      	bne.n	8010e8c <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 8010eca:	697b      	ldr	r3, [r7, #20]
    }
 8010ecc:	4618      	mov	r0, r3
 8010ece:	371c      	adds	r7, #28
 8010ed0:	46bd      	mov	sp, r7
 8010ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed6:	4770      	bx	lr
 8010ed8:	20001588 	.word	0x20001588
 8010edc:	20001580 	.word	0x20001580

08010ee0 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8010ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010ee2:	b097      	sub	sp, #92	@ 0x5c
 8010ee4:	af02      	add	r7, sp, #8
 8010ee6:	6078      	str	r0, [r7, #4]
 8010ee8:	460b      	mov	r3, r1
 8010eea:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010ef6:	2b04      	cmp	r3, #4
 8010ef8:	d906      	bls.n	8010f08 <vTCPStateChange+0x28>
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f00:	2b08      	cmp	r3, #8
 8010f02:	d001      	beq.n	8010f08 <vTCPStateChange+0x28>
 8010f04:	2301      	movs	r3, #1
 8010f06:	e000      	b.n	8010f0a <vTCPStateChange+0x2a>
 8010f08:	2300      	movs	r3, #0
 8010f0a:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 8010f0c:	78fb      	ldrb	r3, [r7, #3]
 8010f0e:	2b04      	cmp	r3, #4
 8010f10:	d904      	bls.n	8010f1c <vTCPStateChange+0x3c>
 8010f12:	78fb      	ldrb	r3, [r7, #3]
 8010f14:	2b08      	cmp	r3, #8
 8010f16:	d001      	beq.n	8010f1c <vTCPStateChange+0x3c>
 8010f18:	2301      	movs	r3, #1
 8010f1a:	e000      	b.n	8010f1e <vTCPStateChange+0x3e>
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f26:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 8010f2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f32:	2b02      	cmp	r3, #2
 8010f34:	d007      	beq.n	8010f46 <vTCPStateChange+0x66>
 8010f36:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f3a:	2b03      	cmp	r3, #3
 8010f3c:	d003      	beq.n	8010f46 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 8010f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f42:	2b04      	cmp	r3, #4
 8010f44:	d114      	bne.n	8010f70 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8010f46:	78fb      	ldrb	r3, [r7, #3]
 8010f48:	2b08      	cmp	r3, #8
 8010f4a:	d111      	bne.n	8010f70 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 8010f4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010f50:	4618      	mov	r0, r3
 8010f52:	f001 fed7 	bl	8012d04 <FreeRTOS_GetTCPStateName>
 8010f56:	4604      	mov	r4, r0
 8010f58:	78fb      	ldrb	r3, [r7, #3]
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f001 fed2 	bl	8012d04 <FreeRTOS_GetTCPStateName>
 8010f60:	4603      	mov	r3, r0
 8010f62:	461a      	mov	r2, r3
 8010f64:	4621      	mov	r1, r4
 8010f66:	4875      	ldr	r0, [pc, #468]	@ (801113c <vTCPStateChange+0x25c>)
 8010f68:	f010 ffc6 	bl	8021ef8 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 8010f6c:	2301      	movs	r3, #1
 8010f6e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010f70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010f74:	429a      	cmp	r2, r3
 8010f76:	f000 809f 	beq.w	80110b8 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f80:	f003 0304 	and.w	r3, r3, #4
 8010f84:	b2db      	uxtb	r3, r3
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d012      	beq.n	8010fb0 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010f90:	f003 0308 	and.w	r3, r3, #8
 8010f94:	b2db      	uxtb	r3, r3
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d10a      	bne.n	8010fb0 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 8010fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d104      	bne.n	8010fb0 <vTCPStateChange+0xd0>
 8010fa6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8010faa:	4865      	ldr	r0, [pc, #404]	@ (8011140 <vTCPStateChange+0x260>)
 8010fac:	f7f0 fcc4 	bl	8001938 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d057      	beq.n	8011066 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010fbc:	f003 0304 	and.w	r3, r3, #4
 8010fc0:	b2db      	uxtb	r3, r3
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d03c      	beq.n	8011040 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 8010fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d027      	beq.n	801101c <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 8010fcc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d102      	bne.n	8010fda <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 8010fd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8010fda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	f043 0204 	orr.w	r2, r3, #4
 8010fe2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fe4:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8010fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010fea:	f003 0301 	and.w	r3, r3, #1
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d005      	beq.n	8010ffe <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8010ff2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8010ffa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ffc:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8010ffe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011000:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011004:	2b00      	cmp	r3, #0
 8011006:	d009      	beq.n	801101c <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8011008:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801100a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801100e:	f003 0308 	and.w	r3, r3, #8
 8011012:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8011014:	2b00      	cmp	r3, #0
 8011016:	d101      	bne.n	801101c <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8011018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801101a:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	2200      	movs	r2, #0
 8011020:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011028:	f36f 0382 	bfc	r3, #2, #1
 801102c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011036:	f043 0302 	orr.w	r3, r3, #2
 801103a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 801103e:	e024      	b.n	801108a <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	f043 0208 	orr.w	r2, r3, #8
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011050:	f003 0302 	and.w	r3, r3, #2
 8011054:	2b00      	cmp	r3, #0
 8011056:	d018      	beq.n	801108a <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	681b      	ldr	r3, [r3, #0]
 801105c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	601a      	str	r2, [r3, #0]
 8011064:	e011      	b.n	801108a <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8011066:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f043 0220 	orr.w	r2, r3, #32
 801106e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011070:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8011072:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011076:	f003 0304 	and.w	r3, r3, #4
 801107a:	2b00      	cmp	r3, #0
 801107c:	d005      	beq.n	801108a <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 801107e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8011086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011088:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8011090:	2b00      	cmp	r3, #0
 8011092:	d004      	beq.n	801109e <vTCPStateChange+0x1be>
 8011094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011096:	2b00      	cmp	r3, #0
 8011098:	d101      	bne.n	801109e <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80110a4:	4618      	mov	r0, r3
 80110a6:	f000 ffff 	bl	80120a8 <prvTCPSocketIsActive>
 80110aa:	4603      	mov	r3, r0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d103      	bne.n	80110b8 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	2200      	movs	r2, #0
 80110b4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	78fa      	ldrb	r2, [r7, #3]
 80110bc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 80110c0:	78fb      	ldrb	r3, [r7, #3]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d003      	beq.n	80110ce <vTCPStateChange+0x1ee>
 80110c6:	78fb      	ldrb	r3, [r7, #3]
 80110c8:	2b08      	cmp	r3, #8
 80110ca:	f040 8084 	bne.w	80111d6 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 80110ce:	2300      	movs	r3, #0
 80110d0:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 80110d2:	2300      	movs	r3, #0
 80110d4:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 80110d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80110d8:	687b      	ldr	r3, [r7, #4]
 80110da:	429a      	cmp	r2, r3
 80110dc:	d106      	bne.n	80110ec <vTCPStateChange+0x20c>
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d002      	beq.n	80110ec <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 80110ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d006      	beq.n	8011102 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 80110f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80110f6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 80110f8:	687a      	ldr	r2, [r7, #4]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d101      	bne.n	8011102 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 80110fe:	2301      	movs	r3, #1
 8011100:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011108:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801110c:	b2db      	uxtb	r3, r3
 801110e:	4619      	mov	r1, r3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011116:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801111a:	b2db      	uxtb	r3, r3
 801111c:	461a      	mov	r2, r3
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011124:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8011128:	b2db      	uxtb	r3, r3
 801112a:	4806      	ldr	r0, [pc, #24]	@ (8011144 <vTCPStateChange+0x264>)
 801112c:	f010 fee4 	bl	8021ef8 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8011130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011132:	2b00      	cmp	r3, #0
 8011134:	d008      	beq.n	8011148 <vTCPStateChange+0x268>
 8011136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011138:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801113a:	e006      	b.n	801114a <vTCPStateChange+0x26a>
 801113c:	08025ee0 	.word	0x08025ee0
 8011140:	08025ef4 	.word	0x08025ef4
 8011144:	08025f24 	.word	0x08025f24
 8011148:	2300      	movs	r3, #0
 801114a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801114c:	9200      	str	r2, [sp, #0]
 801114e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011150:	6879      	ldr	r1, [r7, #4]
 8011152:	4865      	ldr	r0, [pc, #404]	@ (80112e8 <vTCPStateChange+0x408>)
 8011154:	f010 fed0 	bl	8021ef8 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8011158:	f7f3 f96e 	bl	8004438 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011162:	f003 0304 	and.w	r3, r3, #4
 8011166:	b2db      	uxtb	r3, r3
 8011168:	2b00      	cmp	r3, #0
 801116a:	d107      	bne.n	801117c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011172:	f003 0302 	and.w	r3, r3, #2
 8011176:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8011178:	2b00      	cmp	r3, #0
 801117a:	d026      	beq.n	80111ca <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011182:	f003 0308 	and.w	r3, r3, #8
 8011186:	b2db      	uxtb	r3, r3
 8011188:	2b00      	cmp	r3, #0
 801118a:	d11e      	bne.n	80111ca <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f7ff fe71 	bl	8010e74 <vTCPRemoveTCPChild>
 8011192:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8011194:	687a      	ldr	r2, [r7, #4]
 8011196:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801119a:	f36f 0382 	bfc	r3, #2, #1
 801119e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 80111a2:	687a      	ldr	r2, [r7, #4]
 80111a4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80111a8:	f36f 0341 	bfc	r3, #1, #1
 80111ac:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 80111b0:	f7f9 f978 	bl	800a4a4 <xIsCallingFromIPTask>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d104      	bne.n	80111c4 <vTCPStateChange+0x2e4>
 80111ba:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80111be:	484b      	ldr	r0, [pc, #300]	@ (80112ec <vTCPStateChange+0x40c>)
 80111c0:	f7f0 fbba 	bl	8001938 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 80111c4:	6878      	ldr	r0, [r7, #4]
 80111c6:	f7ff fd57 	bl	8010c78 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 80111ca:	f7f3 f943 	bl	8004454 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 80111ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80111d0:	4847      	ldr	r0, [pc, #284]	@ (80112f0 <vTCPStateChange+0x410>)
 80111d2:	f010 fe91 	bl	8021ef8 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 80111d6:	78fb      	ldrb	r3, [r7, #3]
 80111d8:	2b08      	cmp	r3, #8
 80111da:	d11b      	bne.n	8011214 <vTCPStateChange+0x334>
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80111e2:	f003 0308 	and.w	r3, r3, #8
 80111e6:	b2db      	uxtb	r3, r3
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d013      	beq.n	8011214 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 80111ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80111f0:	3b03      	subs	r3, #3
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d80d      	bhi.n	8011212 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80111fa:	4619      	mov	r1, r3
 80111fc:	483d      	ldr	r0, [pc, #244]	@ (80112f4 <vTCPStateChange+0x414>)
 80111fe:	f010 fe7b 	bl	8021ef8 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	2200      	movs	r2, #0
 8011206:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 801120a:	6878      	ldr	r0, [r7, #4]
 801120c:	f7ff fd50 	bl	8010cb0 <vSocketListenNextTime>
                    break;
 8011210:	e000      	b.n	8011214 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8011212:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8011214:	6878      	ldr	r0, [r7, #4]
 8011216:	f7ff fe07 	bl	8010e28 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801121a:	4b37      	ldr	r3, [pc, #220]	@ (80112f8 <vTCPStateChange+0x418>)
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	db4f      	blt.n	80112c2 <vTCPStateChange+0x3e2>
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011226:	2b17      	cmp	r3, #23
 8011228:	d04b      	beq.n	80112c2 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	7a1b      	ldrb	r3, [r3, #8]
 801122e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8011232:	b2db      	uxtb	r3, r3
 8011234:	2b00      	cmp	r3, #0
 8011236:	d002      	beq.n	801123e <vTCPStateChange+0x35e>
 8011238:	2b01      	cmp	r3, #1
 801123a:	d01d      	beq.n	8011278 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 801123c:	e026      	b.n	801128c <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011242:	061a      	lsls	r2, r3, #24
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011248:	021b      	lsls	r3, r3, #8
 801124a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801124e:	431a      	orrs	r2, r3
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011254:	0a1b      	lsrs	r3, r3, #8
 8011256:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801125a:	431a      	orrs	r2, r3
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011260:	0e1b      	lsrs	r3, r3, #24
 8011262:	4313      	orrs	r3, r2
 8011264:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8011266:	f107 0208 	add.w	r2, r7, #8
 801126a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801126e:	2328      	movs	r3, #40	@ 0x28
 8011270:	2002      	movs	r0, #2
 8011272:	f7fe f827 	bl	800f2c4 <FreeRTOS_inet_ntop>
                           break;
 8011276:	e009      	b.n	801128c <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 801127e:	f107 0208 	add.w	r2, r7, #8
 8011282:	2328      	movs	r3, #40	@ 0x28
 8011284:	200a      	movs	r0, #10
 8011286:	f7fe f81d 	bl	800f2c4 <FreeRTOS_inet_ntop>
                            break;
 801128a:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011290:	461d      	mov	r5, r3
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011298:	461e      	mov	r6, r3
 801129a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801129e:	4618      	mov	r0, r3
 80112a0:	f001 fd30 	bl	8012d04 <FreeRTOS_GetTCPStateName>
 80112a4:	4604      	mov	r4, r0
 80112a6:	78fb      	ldrb	r3, [r7, #3]
 80112a8:	4618      	mov	r0, r3
 80112aa:	f001 fd2b 	bl	8012d04 <FreeRTOS_GetTCPStateName>
 80112ae:	4603      	mov	r3, r0
 80112b0:	f107 0208 	add.w	r2, r7, #8
 80112b4:	9301      	str	r3, [sp, #4]
 80112b6:	9400      	str	r4, [sp, #0]
 80112b8:	4633      	mov	r3, r6
 80112ba:	4629      	mov	r1, r5
 80112bc:	480f      	ldr	r0, [pc, #60]	@ (80112fc <vTCPStateChange+0x41c>)
 80112be:	f010 fe1b 	bl	8021ef8 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 80112c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112c4:	2b00      	cmp	r3, #0
 80112c6:	d005      	beq.n	80112d4 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 80112c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112ca:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80112ce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80112d0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80112d2:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 80112d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	d002      	beq.n	80112e0 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 80112da:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80112dc:	f7fe f871 	bl	800f3c2 <vSocketWakeUpUser>
        }
    }
 80112e0:	bf00      	nop
 80112e2:	3754      	adds	r7, #84	@ 0x54
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112e8:	08025f60 	.word	0x08025f60
 80112ec:	08025ef4 	.word	0x08025ef4
 80112f0:	08025f94 	.word	0x08025f94
 80112f4:	08025fb8 	.word	0x08025fb8
 80112f8:	200015c4 	.word	0x200015c4
 80112fc:	08025fdc 	.word	0x08025fdc

08011300 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8011300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8011304:	b098      	sub	sp, #96	@ 0x60
 8011306:	af02      	add	r7, sp, #8
 8011308:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 801130a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801130e:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011310:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011312:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011316:	2b02      	cmp	r3, #2
 8011318:	f040 80cc 	bne.w	80114b4 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 801131c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801131e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011322:	f003 0308 	and.w	r3, r3, #8
 8011326:	b2db      	uxtb	r3, r3
 8011328:	2b00      	cmp	r3, #0
 801132a:	d01a      	beq.n	8011362 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 801132c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801132e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8011332:	2b02      	cmp	r3, #2
 8011334:	d811      	bhi.n	801135a <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8011336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011338:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801133c:	2b00      	cmp	r3, #0
 801133e:	d102      	bne.n	8011346 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8011340:	2300      	movs	r3, #0
 8011342:	653b      	str	r3, [r7, #80]	@ 0x50
 8011344:	e010      	b.n	8011368 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8011346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011348:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801134c:	3b01      	subs	r3, #1
 801134e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8011352:	fa02 f303 	lsl.w	r3, r2, r3
 8011356:	653b      	str	r3, [r7, #80]	@ 0x50
 8011358:	e006      	b.n	8011368 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 801135a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 801135e:	653b      	str	r3, [r7, #80]	@ 0x50
 8011360:	e002      	b.n	8011368 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8011362:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8011366:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8011368:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801136a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801136c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801136e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011372:	4618      	mov	r0, r3
 8011374:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011376:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801137a:	461a      	mov	r2, r3
 801137c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801137e:	9300      	str	r3, [sp, #0]
 8011380:	4613      	mov	r3, r2
 8011382:	4602      	mov	r2, r0
 8011384:	48a4      	ldr	r0, [pc, #656]	@ (8011618 <prvTCPNextTimeout+0x318>)
 8011386:	f010 fdb7 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 801138a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801138c:	2200      	movs	r2, #0
 801138e:	643b      	str	r3, [r7, #64]	@ 0x40
 8011390:	647a      	str	r2, [r7, #68]	@ 0x44
 8011392:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8011396:	4622      	mov	r2, r4
 8011398:	462b      	mov	r3, r5
 801139a:	f04f 0000 	mov.w	r0, #0
 801139e:	f04f 0100 	mov.w	r1, #0
 80113a2:	0159      	lsls	r1, r3, #5
 80113a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80113a8:	0150      	lsls	r0, r2, #5
 80113aa:	4602      	mov	r2, r0
 80113ac:	460b      	mov	r3, r1
 80113ae:	4621      	mov	r1, r4
 80113b0:	1a51      	subs	r1, r2, r1
 80113b2:	6239      	str	r1, [r7, #32]
 80113b4:	4629      	mov	r1, r5
 80113b6:	eb63 0301 	sbc.w	r3, r3, r1
 80113ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80113bc:	f04f 0200 	mov.w	r2, #0
 80113c0:	f04f 0300 	mov.w	r3, #0
 80113c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80113c8:	4649      	mov	r1, r9
 80113ca:	008b      	lsls	r3, r1, #2
 80113cc:	4641      	mov	r1, r8
 80113ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80113d2:	4641      	mov	r1, r8
 80113d4:	008a      	lsls	r2, r1, #2
 80113d6:	4610      	mov	r0, r2
 80113d8:	4619      	mov	r1, r3
 80113da:	4603      	mov	r3, r0
 80113dc:	4622      	mov	r2, r4
 80113de:	189b      	adds	r3, r3, r2
 80113e0:	61bb      	str	r3, [r7, #24]
 80113e2:	462b      	mov	r3, r5
 80113e4:	460a      	mov	r2, r1
 80113e6:	eb42 0303 	adc.w	r3, r2, r3
 80113ea:	61fb      	str	r3, [r7, #28]
 80113ec:	f04f 0200 	mov.w	r2, #0
 80113f0:	f04f 0300 	mov.w	r3, #0
 80113f4:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80113f8:	4629      	mov	r1, r5
 80113fa:	00cb      	lsls	r3, r1, #3
 80113fc:	4621      	mov	r1, r4
 80113fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8011402:	4621      	mov	r1, r4
 8011404:	00ca      	lsls	r2, r1, #3
 8011406:	4610      	mov	r0, r2
 8011408:	4619      	mov	r1, r3
 801140a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801140e:	f04f 0300 	mov.w	r3, #0
 8011412:	f7ee ffcd 	bl	80003b0 <__aeabi_uldivmod>
 8011416:	4602      	mov	r2, r0
 8011418:	460b      	mov	r3, r1
 801141a:	4613      	mov	r3, r2
 801141c:	2b00      	cmp	r3, #0
 801141e:	d044      	beq.n	80114aa <prvTCPNextTimeout+0x1aa>
 8011420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011422:	2200      	movs	r2, #0
 8011424:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011426:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8011428:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801142c:	4622      	mov	r2, r4
 801142e:	462b      	mov	r3, r5
 8011430:	f04f 0000 	mov.w	r0, #0
 8011434:	f04f 0100 	mov.w	r1, #0
 8011438:	0159      	lsls	r1, r3, #5
 801143a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801143e:	0150      	lsls	r0, r2, #5
 8011440:	4602      	mov	r2, r0
 8011442:	460b      	mov	r3, r1
 8011444:	4621      	mov	r1, r4
 8011446:	ebb2 0a01 	subs.w	sl, r2, r1
 801144a:	4629      	mov	r1, r5
 801144c:	eb63 0b01 	sbc.w	fp, r3, r1
 8011450:	f04f 0200 	mov.w	r2, #0
 8011454:	f04f 0300 	mov.w	r3, #0
 8011458:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801145c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8011460:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8011464:	4692      	mov	sl, r2
 8011466:	469b      	mov	fp, r3
 8011468:	4623      	mov	r3, r4
 801146a:	eb1a 0303 	adds.w	r3, sl, r3
 801146e:	613b      	str	r3, [r7, #16]
 8011470:	462b      	mov	r3, r5
 8011472:	eb4b 0303 	adc.w	r3, fp, r3
 8011476:	617b      	str	r3, [r7, #20]
 8011478:	f04f 0200 	mov.w	r2, #0
 801147c:	f04f 0300 	mov.w	r3, #0
 8011480:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8011484:	4629      	mov	r1, r5
 8011486:	00cb      	lsls	r3, r1, #3
 8011488:	4621      	mov	r1, r4
 801148a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801148e:	4621      	mov	r1, r4
 8011490:	00ca      	lsls	r2, r1, #3
 8011492:	4610      	mov	r0, r2
 8011494:	4619      	mov	r1, r3
 8011496:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801149a:	f04f 0300 	mov.w	r3, #0
 801149e:	f7ee ff87 	bl	80003b0 <__aeabi_uldivmod>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	b292      	uxth	r2, r2
 80114a8:	e000      	b.n	80114ac <prvTCPNextTimeout+0x1ac>
 80114aa:	2201      	movs	r2, #1
 80114ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114ae:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80114b2:	e0a8      	b.n	8011606 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 80114b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114b6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80114ba:	2b00      	cmp	r3, #0
 80114bc:	f040 80a3 	bne.w	8011606 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 80114c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114c2:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80114c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114c8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80114cc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80114d0:	461a      	mov	r2, r3
 80114d2:	f004 fcbd 	bl	8015e50 <xTCPWindowTxHasData>
 80114d6:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 80114d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d108      	bne.n	80114f0 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 80114de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d002      	beq.n	80114ea <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 80114e4:	2301      	movs	r3, #1
 80114e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80114e8:	e002      	b.n	80114f0 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 80114ea:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80114ee:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 80114f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114f2:	2200      	movs	r2, #0
 80114f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80114f6:	637a      	str	r2, [r7, #52]	@ 0x34
 80114f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80114fc:	4652      	mov	r2, sl
 80114fe:	465b      	mov	r3, fp
 8011500:	f04f 0000 	mov.w	r0, #0
 8011504:	f04f 0100 	mov.w	r1, #0
 8011508:	0159      	lsls	r1, r3, #5
 801150a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801150e:	0150      	lsls	r0, r2, #5
 8011510:	4602      	mov	r2, r0
 8011512:	460b      	mov	r3, r1
 8011514:	4651      	mov	r1, sl
 8011516:	ebb2 0801 	subs.w	r8, r2, r1
 801151a:	4659      	mov	r1, fp
 801151c:	eb63 0901 	sbc.w	r9, r3, r1
 8011520:	f04f 0200 	mov.w	r2, #0
 8011524:	f04f 0300 	mov.w	r3, #0
 8011528:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801152c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8011530:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8011534:	4690      	mov	r8, r2
 8011536:	4699      	mov	r9, r3
 8011538:	4653      	mov	r3, sl
 801153a:	eb18 0303 	adds.w	r3, r8, r3
 801153e:	60bb      	str	r3, [r7, #8]
 8011540:	465b      	mov	r3, fp
 8011542:	eb49 0303 	adc.w	r3, r9, r3
 8011546:	60fb      	str	r3, [r7, #12]
 8011548:	f04f 0200 	mov.w	r2, #0
 801154c:	f04f 0300 	mov.w	r3, #0
 8011550:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8011554:	4649      	mov	r1, r9
 8011556:	00cb      	lsls	r3, r1, #3
 8011558:	4641      	mov	r1, r8
 801155a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801155e:	4641      	mov	r1, r8
 8011560:	00ca      	lsls	r2, r1, #3
 8011562:	4610      	mov	r0, r2
 8011564:	4619      	mov	r1, r3
 8011566:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801156a:	f04f 0300 	mov.w	r3, #0
 801156e:	f7ee ff1f 	bl	80003b0 <__aeabi_uldivmod>
 8011572:	4602      	mov	r2, r0
 8011574:	460b      	mov	r3, r1
 8011576:	4613      	mov	r3, r2
 8011578:	2b00      	cmp	r3, #0
 801157a:	d040      	beq.n	80115fe <prvTCPNextTimeout+0x2fe>
 801157c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801157e:	2200      	movs	r2, #0
 8011580:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011582:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011584:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8011588:	4642      	mov	r2, r8
 801158a:	464b      	mov	r3, r9
 801158c:	f04f 0000 	mov.w	r0, #0
 8011590:	f04f 0100 	mov.w	r1, #0
 8011594:	0159      	lsls	r1, r3, #5
 8011596:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801159a:	0150      	lsls	r0, r2, #5
 801159c:	4602      	mov	r2, r0
 801159e:	460b      	mov	r3, r1
 80115a0:	4641      	mov	r1, r8
 80115a2:	1a54      	subs	r4, r2, r1
 80115a4:	4649      	mov	r1, r9
 80115a6:	eb63 0501 	sbc.w	r5, r3, r1
 80115aa:	f04f 0200 	mov.w	r2, #0
 80115ae:	f04f 0300 	mov.w	r3, #0
 80115b2:	00ab      	lsls	r3, r5, #2
 80115b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80115b8:	00a2      	lsls	r2, r4, #2
 80115ba:	4614      	mov	r4, r2
 80115bc:	461d      	mov	r5, r3
 80115be:	4643      	mov	r3, r8
 80115c0:	18e3      	adds	r3, r4, r3
 80115c2:	603b      	str	r3, [r7, #0]
 80115c4:	464b      	mov	r3, r9
 80115c6:	eb45 0303 	adc.w	r3, r5, r3
 80115ca:	607b      	str	r3, [r7, #4]
 80115cc:	f04f 0200 	mov.w	r2, #0
 80115d0:	f04f 0300 	mov.w	r3, #0
 80115d4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80115d8:	4629      	mov	r1, r5
 80115da:	00cb      	lsls	r3, r1, #3
 80115dc:	4621      	mov	r1, r4
 80115de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80115e2:	4621      	mov	r1, r4
 80115e4:	00ca      	lsls	r2, r1, #3
 80115e6:	4610      	mov	r0, r2
 80115e8:	4619      	mov	r1, r3
 80115ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80115ee:	f04f 0300 	mov.w	r3, #0
 80115f2:	f7ee fedd 	bl	80003b0 <__aeabi_uldivmod>
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	b292      	uxth	r2, r2
 80115fc:	e000      	b.n	8011600 <prvTCPNextTimeout+0x300>
 80115fe:	2201      	movs	r2, #1
 8011600:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011602:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8011606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011608:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 801160c:	4618      	mov	r0, r3
 801160e:	3758      	adds	r7, #88	@ 0x58
 8011610:	46bd      	mov	sp, r7
 8011612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011616:	bf00      	nop
 8011618:	08026000 	.word	0x08026000

0801161c <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 801161c:	b4b0      	push	{r4, r5, r7}
 801161e:	b08b      	sub	sp, #44	@ 0x2c
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8011626:	683b      	ldr	r3, [r7, #0]
 8011628:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 801162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801162c:	899b      	ldrh	r3, [r3, #12]
 801162e:	b29b      	uxth	r3, r3
 8011630:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011634:	4293      	cmp	r3, r2
 8011636:	d10e      	bne.n	8011656 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	330e      	adds	r3, #14
 801163c:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 801163e:	2301      	movs	r3, #1
 8011640:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	3308      	adds	r3, #8
 8011646:	f107 0408 	add.w	r4, r7, #8
 801164a:	6818      	ldr	r0, [r3, #0]
 801164c:	6859      	ldr	r1, [r3, #4]
 801164e:	689a      	ldr	r2, [r3, #8]
 8011650:	68db      	ldr	r3, [r3, #12]
 8011652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011654:	e018      	b.n	8011688 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011656:	683b      	ldr	r3, [r7, #0]
 8011658:	330e      	adds	r3, #14
 801165a:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 801165c:	2300      	movs	r3, #0
 801165e:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8011660:	6a3b      	ldr	r3, [r7, #32]
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	061a      	lsls	r2, r3, #24
 8011666:	6a3b      	ldr	r3, [r7, #32]
 8011668:	68db      	ldr	r3, [r3, #12]
 801166a:	021b      	lsls	r3, r3, #8
 801166c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011670:	431a      	orrs	r2, r3
 8011672:	6a3b      	ldr	r3, [r7, #32]
 8011674:	68db      	ldr	r3, [r3, #12]
 8011676:	0a1b      	lsrs	r3, r3, #8
 8011678:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801167c:	431a      	orrs	r2, r3
 801167e:	6a3b      	ldr	r3, [r7, #32]
 8011680:	68db      	ldr	r3, [r3, #12]
 8011682:	0e1b      	lsrs	r3, r3, #24
 8011684:	4313      	orrs	r3, r2
 8011686:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	461d      	mov	r5, r3
 801168c:	f107 0408 	add.w	r4, r7, #8
 8011690:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8011694:	6823      	ldr	r3, [r4, #0]
 8011696:	602b      	str	r3, [r5, #0]
    }
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	372c      	adds	r7, #44	@ 0x2c
 801169c:	46bd      	mov	sp, r7
 801169e:	bcb0      	pop	{r4, r5, r7}
 80116a0:	4770      	bx	lr
	...

080116a4 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 80116a4:	b5b0      	push	{r4, r5, r7, lr}
 80116a6:	b096      	sub	sp, #88	@ 0x58
 80116a8:	af04      	add	r7, sp, #16
 80116aa:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 80116ac:	2301      	movs	r3, #1
 80116ae:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d104      	bne.n	80116c0 <xProcessReceivedTCPPacket+0x1c>
 80116b6:	f240 21f7 	movw	r1, #759	@ 0x2f7
 80116ba:	4898      	ldr	r0, [pc, #608]	@ (801191c <xProcessReceivedTCPPacket+0x278>)
 80116bc:	f7f0 f93c 	bl	8001938 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d104      	bne.n	80116d2 <xProcessReceivedTCPPacket+0x2e>
 80116c8:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 80116cc:	4893      	ldr	r0, [pc, #588]	@ (801191c <xProcessReceivedTCPPacket+0x278>)
 80116ce:	f7f0 f933 	bl	8001938 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 80116d6:	69fb      	ldr	r3, [r7, #28]
 80116d8:	4618      	mov	r0, r3
 80116da:	f7f8 fb55 	bl	8009d88 <uxIPHeaderSizePacket>
 80116de:	4603      	mov	r3, r0
 80116e0:	330e      	adds	r3, #14
 80116e2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 80116e4:	69fb      	ldr	r3, [r7, #28]
 80116e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80116e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116ea:	3314      	adds	r3, #20
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d202      	bcs.n	80116f6 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 80116f0:	2300      	movs	r3, #0
 80116f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80116f4:	e191      	b.n	8011a1a <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 80116f6:	69fb      	ldr	r3, [r7, #28]
 80116f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 80116fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80116fc:	4413      	add	r3, r2
 80116fe:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011702:	7b5b      	ldrb	r3, [r3, #13]
 8011704:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8011706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011708:	885b      	ldrh	r3, [r3, #2]
 801170a:	b29b      	uxth	r3, r3
 801170c:	021b      	lsls	r3, r3, #8
 801170e:	b21a      	sxth	r2, r3
 8011710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011712:	885b      	ldrh	r3, [r3, #2]
 8011714:	b29b      	uxth	r3, r3
 8011716:	0a1b      	lsrs	r3, r3, #8
 8011718:	b29b      	uxth	r3, r3
 801171a:	b21b      	sxth	r3, r3
 801171c:	4313      	orrs	r3, r2
 801171e:	b21b      	sxth	r3, r3
 8011720:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8011722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011724:	881b      	ldrh	r3, [r3, #0]
 8011726:	b29b      	uxth	r3, r3
 8011728:	021b      	lsls	r3, r3, #8
 801172a:	b21a      	sxth	r2, r3
 801172c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801172e:	881b      	ldrh	r3, [r3, #0]
 8011730:	b29b      	uxth	r3, r3
 8011732:	0a1b      	lsrs	r3, r3, #8
 8011734:	b29b      	uxth	r3, r3
 8011736:	b21b      	sxth	r3, r3
 8011738:	4313      	orrs	r3, r2
 801173a:	b21b      	sxth	r3, r3
 801173c:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 801173e:	69fb      	ldr	r3, [r7, #28]
 8011740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011742:	f107 0308 	add.w	r3, r7, #8
 8011746:	4611      	mov	r1, r2
 8011748:	4618      	mov	r0, r3
 801174a:	f7ff ff67 	bl	801161c <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 801174e:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8011750:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011752:	9303      	str	r3, [sp, #12]
 8011754:	466c      	mov	r4, sp
 8011756:	f107 0310 	add.w	r3, r7, #16
 801175a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801175e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011762:	f107 0308 	add.w	r3, r7, #8
 8011766:	cb0c      	ldmia	r3, {r2, r3}
 8011768:	4629      	mov	r1, r5
 801176a:	2000      	movs	r0, #0
 801176c:	f7fe fbc2 	bl	800fef4 <pxTCPSocketLookup>
 8011770:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8011772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011774:	2b00      	cmp	r3, #0
 8011776:	d008      	beq.n	801178a <xProcessReceivedTCPPacket+0xe6>
 8011778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801177a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801177e:	4618      	mov	r0, r3
 8011780:	f000 fc92 	bl	80120a8 <prvTCPSocketIsActive>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d116      	bne.n	80117b8 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 801178a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801178c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801178e:	4619      	mov	r1, r3
 8011790:	4863      	ldr	r0, [pc, #396]	@ (8011920 <xProcessReceivedTCPPacket+0x27c>)
 8011792:	f010 fbb1 	bl	8021ef8 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8011796:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8011798:	f003 031f 	and.w	r3, r3, #31
 801179c:	2b10      	cmp	r3, #16
 801179e:	d008      	beq.n	80117b2 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 80117a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80117a2:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d103      	bne.n	80117b2 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80117aa:	69fb      	ldr	r3, [r7, #28]
 80117ac:	4618      	mov	r0, r3
 80117ae:	f002 fd0b 	bl	80141c8 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 80117b2:	2300      	movs	r3, #0
 80117b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80117b6:	e0d6      	b.n	8011966 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 80117b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117ba:	2200      	movs	r2, #0
 80117bc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 80117c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117c2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80117c6:	2b01      	cmp	r3, #1
 80117c8:	d127      	bne.n	801181a <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 80117ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80117cc:	f003 031f 	and.w	r3, r3, #31
 80117d0:	2b02      	cmp	r3, #2
 80117d2:	d015      	beq.n	8011800 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 80117d4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80117d6:	4618      	mov	r0, r3
 80117d8:	f003 fbbe 	bl	8014f58 <prvTCPFlagMeaning>
 80117dc:	4601      	mov	r1, r0
 80117de:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80117e0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80117e2:	4850      	ldr	r0, [pc, #320]	@ (8011924 <xProcessReceivedTCPPacket+0x280>)
 80117e4:	f010 fb88 	bl	8021ef8 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 80117e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80117ea:	f003 0304 	and.w	r3, r3, #4
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d103      	bne.n	80117fa <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	4618      	mov	r0, r3
 80117f6:	f002 fce7 	bl	80141c8 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 80117fa:	2300      	movs	r3, #0
 80117fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80117fe:	e0b2      	b.n	8011966 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8011800:	69fb      	ldr	r3, [r7, #28]
 8011802:	4619      	mov	r1, r3
 8011804:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011806:	f001 f999 	bl	8012b3c <prvHandleListen>
 801180a:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 801180c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801180e:	2b00      	cmp	r3, #0
 8011810:	f040 80a9 	bne.w	8011966 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8011814:	2300      	movs	r3, #0
 8011816:	647b      	str	r3, [r7, #68]	@ 0x44
 8011818:	e0a5      	b.n	8011966 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 801181a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801181c:	f003 0304 	and.w	r3, r3, #4
 8011820:	2b00      	cmp	r3, #0
 8011822:	d068      	beq.n	80118f6 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8011824:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8011826:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8011828:	4619      	mov	r1, r3
 801182a:	483f      	ldr	r0, [pc, #252]	@ (8011928 <xProcessReceivedTCPPacket+0x284>)
 801182c:	f010 fb64 	bl	8021ef8 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011830:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011832:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011836:	2b02      	cmp	r3, #2
 8011838:	d11f      	bne.n	801187a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 801183a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801183c:	689b      	ldr	r3, [r3, #8]
 801183e:	061a      	lsls	r2, r3, #24
 8011840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011842:	689b      	ldr	r3, [r3, #8]
 8011844:	021b      	lsls	r3, r3, #8
 8011846:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801184a:	431a      	orrs	r2, r3
 801184c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	0a1b      	lsrs	r3, r3, #8
 8011852:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011856:	431a      	orrs	r2, r3
 8011858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801185a:	689b      	ldr	r3, [r3, #8]
 801185c:	0e1b      	lsrs	r3, r3, #24
 801185e:	4313      	orrs	r3, r2
 8011860:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8011862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011864:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8011868:	3301      	adds	r3, #1
 801186a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801186c:	429a      	cmp	r2, r3
 801186e:	d13f      	bne.n	80118f0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8011870:	2100      	movs	r1, #0
 8011872:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011874:	f7ff fb34 	bl	8010ee0 <vTCPStateChange>
 8011878:	e03a      	b.n	80118f0 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801187a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	061a      	lsls	r2, r3, #24
 8011880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011882:	685b      	ldr	r3, [r3, #4]
 8011884:	021b      	lsls	r3, r3, #8
 8011886:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801188a:	431a      	orrs	r2, r3
 801188c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	0a1b      	lsrs	r3, r3, #8
 8011892:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011896:	431a      	orrs	r2, r3
 8011898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801189a:	685b      	ldr	r3, [r3, #4]
 801189c:	0e1b      	lsrs	r3, r3, #24
 801189e:	4313      	orrs	r3, r2
 80118a0:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 80118a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118a4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80118a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80118aa:	429a      	cmp	r2, r3
 80118ac:	d104      	bne.n	80118b8 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 80118ae:	2100      	movs	r1, #0
 80118b0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80118b2:	f7ff fb15 	bl	8010ee0 <vTCPStateChange>
 80118b6:	e01b      	b.n	80118f0 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 80118b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118ba:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80118be:	4619      	mov	r1, r3
 80118c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118c2:	f003 fc82 	bl	80151ca <xSequenceGreaterThan>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d011      	beq.n	80118f0 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 80118cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118ce:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 80118d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118d4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 80118d8:	4413      	add	r3, r2
 80118da:	4619      	mov	r1, r3
 80118dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80118de:	f003 fc5e 	bl	801519e <xSequenceLessThan>
 80118e2:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d003      	beq.n	80118f0 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 80118e8:	69fb      	ldr	r3, [r7, #28]
 80118ea:	4618      	mov	r0, r3
 80118ec:	f002 fc5f 	bl	80141ae <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 80118f0:	2300      	movs	r3, #0
 80118f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80118f4:	e037      	b.n	8011966 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 80118f6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80118f8:	f003 031f 	and.w	r3, r3, #31
 80118fc:	2b02      	cmp	r3, #2
 80118fe:	d117      	bne.n	8011930 <xProcessReceivedTCPPacket+0x28c>
 8011900:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011902:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011906:	2b04      	cmp	r3, #4
 8011908:	d912      	bls.n	8011930 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 801190a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 801190c:	4619      	mov	r1, r3
 801190e:	4807      	ldr	r0, [pc, #28]	@ (801192c <xProcessReceivedTCPPacket+0x288>)
 8011910:	f010 faf2 	bl	8021ef8 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8011914:	2300      	movs	r3, #0
 8011916:	647b      	str	r3, [r7, #68]	@ 0x44
 8011918:	e025      	b.n	8011966 <xProcessReceivedTCPPacket+0x2c2>
 801191a:	bf00      	nop
 801191c:	08025ef4 	.word	0x08025ef4
 8011920:	0802602c 	.word	0x0802602c
 8011924:	08026054 	.word	0x08026054
 8011928:	0802608c 	.word	0x0802608c
 801192c:	080260b0 	.word	0x080260b0
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 8011930:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011932:	f7f8 fa43 	bl	8009dbc <uxIPHeaderSizeSocket>
 8011936:	4603      	mov	r3, r0
 8011938:	330e      	adds	r3, #14
 801193a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 801193c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801193e:	33a0      	adds	r3, #160	@ 0xa0
 8011940:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011942:	4413      	add	r3, r2
 8011944:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8011948:	69fb      	ldr	r3, [r7, #28]
 801194a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801194c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801194e:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8011950:	2214      	movs	r2, #20
 8011952:	4619      	mov	r1, r3
 8011954:	f010 fcec 	bl	8022330 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8011958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801195a:	330d      	adds	r3, #13
 801195c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801195e:	4413      	add	r3, r2
 8011960:	2210      	movs	r2, #16
 8011962:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8011966:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011968:	2b00      	cmp	r3, #0
 801196a:	d056      	beq.n	8011a1a <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 801196c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801196e:	2b00      	cmp	r3, #0
 8011970:	d104      	bne.n	801197c <xProcessReceivedTCPPacket+0x2d8>
 8011972:	f240 319e 	movw	r1, #926	@ 0x39e
 8011976:	482b      	ldr	r0, [pc, #172]	@ (8011a24 <xProcessReceivedTCPPacket+0x380>)
 8011978:	f7ef ffde 	bl	8001938 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 801197c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801197e:	f7ff fa53 	bl	8010e28 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8011982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011984:	7b1b      	ldrb	r3, [r3, #12]
 8011986:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801198a:	2b50      	cmp	r3, #80	@ 0x50
 801198c:	d905      	bls.n	801199a <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 801198e:	69fb      	ldr	r3, [r7, #28]
 8011990:	4619      	mov	r1, r3
 8011992:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011994:	f000 f894 	bl	8011ac0 <prvCheckOptions>
 8011998:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 801199a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801199c:	2b00      	cmp	r3, #0
 801199e:	d03c      	beq.n	8011a1a <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 80119a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119a2:	89db      	ldrh	r3, [r3, #14]
 80119a4:	b29b      	uxth	r3, r3
 80119a6:	021b      	lsls	r3, r3, #8
 80119a8:	b21a      	sxth	r2, r3
 80119aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80119ac:	89db      	ldrh	r3, [r3, #14]
 80119ae:	b29b      	uxth	r3, r3
 80119b0:	0a1b      	lsrs	r3, r3, #8
 80119b2:	b29b      	uxth	r3, r3
 80119b4:	b21b      	sxth	r3, r3
 80119b6:	4313      	orrs	r3, r2
 80119b8:	b21b      	sxth	r3, r3
 80119ba:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 80119bc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80119be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119c0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 80119c4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80119c6:	f003 0302 	and.w	r3, r3, #2
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d10a      	bne.n	80119e4 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80119ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119d0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80119d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80119d6:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80119da:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 80119de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80119e0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 80119e4:	f107 031c 	add.w	r3, r7, #28
 80119e8:	4619      	mov	r1, r3
 80119ea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80119ec:	f000 ff78 	bl	80128e0 <prvTCPHandleState>
 80119f0:	4603      	mov	r3, r0
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	dd05      	ble.n	8011a02 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 80119f6:	f107 031c 	add.w	r3, r7, #28
 80119fa:	4619      	mov	r1, r3
 80119fc:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80119fe:	f001 fc6f 	bl	80132e0 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 8011a02:	69fb      	ldr	r3, [r7, #28]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d005      	beq.n	8011a14 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8011a08:	69fb      	ldr	r3, [r7, #28]
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	f005 fbcc 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 8011a10:	2300      	movs	r3, #0
 8011a12:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8011a14:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011a16:	f7ff fc73 	bl	8011300 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8011a1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3748      	adds	r7, #72	@ 0x48
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bdb0      	pop	{r4, r5, r7, pc}
 8011a24:	08025ef4 	.word	0x08025ef4

08011a28 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b088      	sub	sp, #32
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011a34:	021b      	lsls	r3, r3, #8
 8011a36:	b21a      	sxth	r2, r3
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011a3c:	0a1b      	lsrs	r3, r3, #8
 8011a3e:	b29b      	uxth	r3, r3
 8011a40:	b21b      	sxth	r3, r3
 8011a42:	4313      	orrs	r3, r2
 8011a44:	b21b      	sxth	r3, r3
 8011a46:	b29b      	uxth	r3, r3
 8011a48:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8011a4e:	4b19      	ldr	r3, [pc, #100]	@ (8011ab4 <xTCPCheckNewClient+0x8c>)
 8011a50:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011a52:	4b19      	ldr	r3, [pc, #100]	@ (8011ab8 <xTCPCheckNewClient+0x90>)
 8011a54:	68db      	ldr	r3, [r3, #12]
 8011a56:	61fb      	str	r3, [r7, #28]
 8011a58:	e023      	b.n	8011aa2 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	697a      	ldr	r2, [r7, #20]
 8011a60:	429a      	cmp	r2, r3
 8011a62:	d11b      	bne.n	8011a9c <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	68db      	ldr	r3, [r3, #12]
 8011a68:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011a70:	2b06      	cmp	r3, #6
 8011a72:	d113      	bne.n	8011a9c <xTCPCheckNewClient+0x74>
 8011a74:	68fb      	ldr	r3, [r7, #12]
 8011a76:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011a7a:	f003 0302 	and.w	r3, r3, #2
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d00b      	beq.n	8011a9c <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	68fa      	ldr	r2, [r7, #12]
 8011a88:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011a8e:	4619      	mov	r1, r3
 8011a90:	480a      	ldr	r0, [pc, #40]	@ (8011abc <xTCPCheckNewClient+0x94>)
 8011a92:	f010 fa31 	bl	8021ef8 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8011a96:	2301      	movs	r3, #1
 8011a98:	61bb      	str	r3, [r7, #24]
                    break;
 8011a9a:	e006      	b.n	8011aaa <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8011aa2:	69fa      	ldr	r2, [r7, #28]
 8011aa4:	693b      	ldr	r3, [r7, #16]
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d1d7      	bne.n	8011a5a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8011aaa:	69bb      	ldr	r3, [r7, #24]
    }
 8011aac:	4618      	mov	r0, r3
 8011aae:	3720      	adds	r7, #32
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}
 8011ab4:	20001588 	.word	0x20001588
 8011ab8:	20001580 	.word	0x20001580
 8011abc:	080260d0 	.word	0x080260d0

08011ac0 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b08c      	sub	sp, #48	@ 0x30
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
 8011ac8:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8011aca:	6838      	ldr	r0, [r7, #0]
 8011acc:	f7f8 f95c 	bl	8009d88 <uxIPHeaderSizePacket>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	330e      	adds	r3, #14
 8011ad4:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8011ad6:	683b      	ldr	r3, [r7, #0]
 8011ad8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	4413      	add	r3, r2
 8011ade:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 8011ae0:	2301      	movs	r3, #1
 8011ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8011ae4:	69fb      	ldr	r3, [r7, #28]
 8011ae6:	3314      	adds	r3, #20
 8011ae8:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011aea:	69bb      	ldr	r3, [r7, #24]
 8011aec:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 8011aee:	693b      	ldr	r3, [r7, #16]
 8011af0:	3314      	adds	r3, #20
 8011af2:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	7b1b      	ldrb	r3, [r3, #12]
 8011af8:	2b50      	cmp	r3, #80	@ 0x50
 8011afa:	d93f      	bls.n	8011b7c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	7b1b      	ldrb	r3, [r3, #12]
 8011b00:	091b      	lsrs	r3, r3, #4
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	3b05      	subs	r3, #5
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	009b      	lsls	r3, r3, #2
 8011b0a:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 8011b0c:	7bfb      	ldrb	r3, [r7, #15]
 8011b0e:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b14:	697a      	ldr	r2, [r7, #20]
 8011b16:	429a      	cmp	r2, r3
 8011b18:	d230      	bcs.n	8011b7c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 8011b1a:	683b      	ldr	r3, [r7, #0]
 8011b1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8011b1e:	697b      	ldr	r3, [r7, #20]
 8011b20:	1ad3      	subs	r3, r2, r3
 8011b22:	6a3a      	ldr	r2, [r7, #32]
 8011b24:	429a      	cmp	r2, r3
 8011b26:	d829      	bhi.n	8011b7c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	7b5b      	ldrb	r3, [r3, #13]
 8011b2c:	f003 0302 	and.w	r3, r3, #2
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d002      	beq.n	8011b3a <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8011b34:	2301      	movs	r3, #1
 8011b36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011b38:	e001      	b.n	8011b3e <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 8011b3e:	6a3b      	ldr	r3, [r7, #32]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d018      	beq.n	8011b76 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8011b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b46:	687a      	ldr	r2, [r7, #4]
 8011b48:	6a39      	ldr	r1, [r7, #32]
 8011b4a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8011b4c:	f000 f81c 	bl	8011b88 <prvSingleStepTCPHeaderOptions>
 8011b50:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	da02      	bge.n	8011b5e <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8011b58:	2300      	movs	r3, #0
 8011b5a:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 8011b5c:	e00e      	b.n	8011b7c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d00a      	beq.n	8011b7a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8011b64:	68bb      	ldr	r3, [r7, #8]
 8011b66:	6a3a      	ldr	r2, [r7, #32]
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 8011b6c:	68bb      	ldr	r3, [r7, #8]
 8011b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b70:	4413      	add	r3, r2
 8011b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8011b74:	e7e3      	b.n	8011b3e <prvCheckOptions+0x7e>
                            break;
 8011b76:	bf00      	nop
 8011b78:	e000      	b.n	8011b7c <prvCheckOptions+0xbc>
                            break;
 8011b7a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 8011b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8011b7e:	4618      	mov	r0, r3
 8011b80:	3730      	adds	r7, #48	@ 0x30
 8011b82:	46bd      	mov	sp, r7
 8011b84:	bd80      	pop	{r7, pc}
	...

08011b88 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8011b88:	b580      	push	{r7, lr}
 8011b8a:	b08a      	sub	sp, #40	@ 0x28
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	60f8      	str	r0, [r7, #12]
 8011b90:	60b9      	str	r1, [r7, #8]
 8011b92:	607a      	str	r2, [r7, #4]
 8011b94:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8011b96:	68bb      	ldr	r3, [r7, #8]
 8011b98:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 8011b9a:	2300      	movs	r3, #0
 8011b9c:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011ba4:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8011ba6:	2300      	movs	r3, #0
 8011ba8:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	781b      	ldrb	r3, [r3, #0]
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d102      	bne.n	8011bb8 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	61fb      	str	r3, [r7, #28]
 8011bb6:	e0da      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	2b01      	cmp	r3, #1
 8011bbe:	d102      	bne.n	8011bc6 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	61fb      	str	r3, [r7, #28]
 8011bc4:	e0d3      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8011bc6:	697b      	ldr	r3, [r7, #20]
 8011bc8:	2b01      	cmp	r3, #1
 8011bca:	d803      	bhi.n	8011bd4 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8011bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8011bd0:	61fb      	str	r3, [r7, #28]
 8011bd2:	e0cc      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	2b03      	cmp	r3, #3
 8011bda:	d11e      	bne.n	8011c1a <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8011bdc:	697b      	ldr	r3, [r7, #20]
 8011bde:	2b02      	cmp	r3, #2
 8011be0:	d904      	bls.n	8011bec <prvSingleStepTCPHeaderOptions+0x64>
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	3301      	adds	r3, #1
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b03      	cmp	r3, #3
 8011bea:	d003      	beq.n	8011bf4 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8011bec:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf0:	61fb      	str	r3, [r7, #28]
 8011bf2:	e0bc      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00c      	beq.n	8011c14 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	3302      	adds	r3, #2
 8011bfe:	781a      	ldrb	r2, [r3, #0]
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8011c06:	687a      	ldr	r2, [r7, #4]
 8011c08:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011c0c:	f043 0310 	orr.w	r3, r3, #16
 8011c10:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8011c14:	2303      	movs	r3, #3
 8011c16:	61fb      	str	r3, [r7, #28]
 8011c18:	e0a9      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8011c1a:	68fb      	ldr	r3, [r7, #12]
 8011c1c:	781b      	ldrb	r3, [r3, #0]
 8011c1e:	2b02      	cmp	r3, #2
 8011c20:	d16d      	bne.n	8011cfe <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8011c22:	697b      	ldr	r3, [r7, #20]
 8011c24:	2b03      	cmp	r3, #3
 8011c26:	d904      	bls.n	8011c32 <prvSingleStepTCPHeaderOptions+0xaa>
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	3301      	adds	r3, #1
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	2b04      	cmp	r3, #4
 8011c30:	d003      	beq.n	8011c3a <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 8011c32:	f04f 33ff 	mov.w	r3, #4294967295
 8011c36:	61fb      	str	r3, [r7, #28]
 8011c38:	e099      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	3302      	adds	r3, #2
 8011c3e:	4618      	mov	r0, r3
 8011c40:	f7f8 fe4f 	bl	800a8e2 <usChar2u16>
 8011c44:	4603      	mov	r3, r0
 8011c46:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011c4e:	461a      	mov	r2, r3
 8011c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c52:	4293      	cmp	r3, r2
 8011c54:	d010      	beq.n	8011c78 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8011c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d105      	bne.n	8011c68 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 8011c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c60:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8011c62:	2301      	movs	r3, #1
 8011c64:	61bb      	str	r3, [r7, #24]
 8011c66:	e007      	b.n	8011c78 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011c70:	4619      	mov	r1, r3
 8011c72:	4841      	ldr	r0, [pc, #260]	@ (8011d78 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8011c74:	f010 f940 	bl	8021ef8 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8011c78:	69bb      	ldr	r3, [r7, #24]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d177      	bne.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 8011c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c80:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011c84:	d202      	bcs.n	8011c8c <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8011c86:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8011c8a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011c92:	461a      	mov	r2, r3
 8011c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c96:	4293      	cmp	r3, r2
 8011c98:	d22e      	bcs.n	8011cf8 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011ca0:	f043 0301 	orr.w	r3, r3, #1
 8011ca4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011cae:	461a      	mov	r2, r3
 8011cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cb2:	4293      	cmp	r3, r2
 8011cb4:	d207      	bcs.n	8011cc6 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8011cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	482e      	ldr	r0, [pc, #184]	@ (8011d7c <prvSingleStepTCPHeaderOptions+0x1f4>)
 8011cc2:	f010 f919 	bl	8021ef8 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8011cc6:	693b      	ldr	r3, [r7, #16]
 8011cc8:	685a      	ldr	r2, [r3, #4]
 8011cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011cd2:	fb03 f202 	mul.w	r2, r3, r2
 8011cd6:	693b      	ldr	r3, [r7, #16]
 8011cd8:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8011cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cdc:	b29a      	uxth	r2, r3
 8011cde:	693b      	ldr	r3, [r7, #16]
 8011ce0:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8011ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ce6:	b29a      	uxth	r2, r3
 8011ce8:	693b      	ldr	r3, [r7, #16]
 8011cea:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 8011cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cf0:	b29a      	uxth	r2, r3
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8011cf8:	2304      	movs	r3, #4
 8011cfa:	61fb      	str	r3, [r7, #28]
 8011cfc:	e037      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	3301      	adds	r3, #1
 8011d02:	781b      	ldrb	r3, [r3, #0]
 8011d04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8011d08:	2300      	movs	r3, #0
 8011d0a:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8011d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011d10:	2b01      	cmp	r3, #1
 8011d12:	d904      	bls.n	8011d1e <prvSingleStepTCPHeaderOptions+0x196>
 8011d14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011d18:	697a      	ldr	r2, [r7, #20]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	d203      	bcs.n	8011d26 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 8011d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d22:	61fb      	str	r3, [r7, #28]
 8011d24:	e023      	b.n	8011d6e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	781b      	ldrb	r3, [r3, #0]
 8011d2a:	2b05      	cmp	r3, #5
 8011d2c:	d11a      	bne.n	8011d64 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 8011d2e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011d32:	3b02      	subs	r3, #2
 8011d34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8011d38:	69fb      	ldr	r3, [r7, #28]
 8011d3a:	3302      	adds	r3, #2
 8011d3c:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 8011d3e:	e00d      	b.n	8011d5c <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 8011d40:	69fb      	ldr	r3, [r7, #28]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	4619      	mov	r1, r3
 8011d46:	68f8      	ldr	r0, [r7, #12]
 8011d48:	f000 f81a 	bl	8011d80 <prvReadSackOption>
                            lIndex += 8;
 8011d4c:	69fb      	ldr	r3, [r7, #28]
 8011d4e:	3308      	adds	r3, #8
 8011d50:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 8011d52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011d56:	3b08      	subs	r3, #8
 8011d58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 8011d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011d60:	2b07      	cmp	r3, #7
 8011d62:	d8ed      	bhi.n	8011d40 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8011d64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011d68:	69fa      	ldr	r2, [r7, #28]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 8011d6e:	69fb      	ldr	r3, [r7, #28]
    }
 8011d70:	4618      	mov	r0, r3
 8011d72:	3728      	adds	r7, #40	@ 0x28
 8011d74:	46bd      	mov	sp, r7
 8011d76:	bd80      	pop	{r7, pc}
 8011d78:	080260fc 	.word	0x080260fc
 8011d7c:	08026114 	.word	0x08026114

08011d80 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b08a      	sub	sp, #40	@ 0x28
 8011d84:	af02      	add	r7, sp, #8
 8011d86:	60f8      	str	r0, [r7, #12]
 8011d88:	60b9      	str	r1, [r7, #8]
 8011d8a:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 8011d8c:	68fa      	ldr	r2, [r7, #12]
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	4413      	add	r3, r2
 8011d92:	4618      	mov	r0, r3
 8011d94:	f7f8 fd8a 	bl	800a8ac <ulChar2u32>
 8011d98:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 8011d9a:	68bb      	ldr	r3, [r7, #8]
 8011d9c:	3304      	adds	r3, #4
 8011d9e:	68fa      	ldr	r2, [r7, #12]
 8011da0:	4413      	add	r3, r2
 8011da2:	4618      	mov	r0, r3
 8011da4:	f7f8 fd82 	bl	800a8ac <ulChar2u32>
 8011da8:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011db0:	69ba      	ldr	r2, [r7, #24]
 8011db2:	69f9      	ldr	r1, [r7, #28]
 8011db4:	4618      	mov	r0, r3
 8011db6:	f004 fba3 	bl	8016500 <ulTCPWindowTxSack>
 8011dba:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d029      	beq.n	8011e1a <prvReadSackOption+0x9a>
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d026      	beq.n	8011e1a <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	9300      	str	r3, [sp, #0]
 8011dd6:	697b      	ldr	r3, [r7, #20]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	2100      	movs	r1, #0
 8011ddc:	f7fe fed9 	bl	8010b92 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	f043 0202 	orr.w	r2, r3, #2
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011df0:	f003 0302 	and.w	r3, r3, #2
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d005      	beq.n	8011e04 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d005      	beq.n	8011e1a <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011e14:	6979      	ldr	r1, [r7, #20]
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 8011e1a:	bf00      	nop
 8011e1c:	3720      	adds	r7, #32
 8011e1e:	46bd      	mov	sp, r7
 8011e20:	bd80      	pop	{r7, pc}

08011e22 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 8011e22:	b590      	push	{r4, r7, lr}
 8011e24:	b08f      	sub	sp, #60	@ 0x3c
 8011e26:	af00      	add	r7, sp, #0
 8011e28:	6078      	str	r0, [r7, #4]
 8011e2a:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f7f7 ffa9 	bl	8009d88 <uxIPHeaderSizePacket>
 8011e36:	4603      	mov	r3, r0
 8011e38:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011e3a:	4423      	add	r3, r4
 8011e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011e40:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011e42:	6878      	ldr	r0, [r7, #4]
 8011e44:	f7f7 ffa0 	bl	8009d88 <uxIPHeaderSizePacket>
 8011e48:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8011e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e52:	7b1b      	ldrb	r3, [r3, #12]
 8011e54:	089b      	lsrs	r3, r3, #2
 8011e56:	b2db      	uxtb	r3, r3
 8011e58:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8011e5c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011e60:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011e64:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011e6a:	69f9      	ldr	r1, [r7, #28]
 8011e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e6e:	440b      	add	r3, r1
 8011e70:	330e      	adds	r3, #14
 8011e72:	441a      	add	r2, r3
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011e7c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e80:	3b0e      	subs	r3, #14
 8011e82:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e88:	899b      	ldrh	r3, [r3, #12]
 8011e8a:	b29b      	uxth	r3, r3
 8011e8c:	2b08      	cmp	r3, #8
 8011e8e:	d004      	beq.n	8011e9a <prvCheckRxData+0x78>
 8011e90:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8011e94:	4293      	cmp	r3, r2
 8011e96:	d015      	beq.n	8011ec4 <prvCheckRxData+0xa2>
 8011e98:	e02c      	b.n	8011ef4 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011e9e:	330e      	adds	r3, #14
 8011ea0:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	885b      	ldrh	r3, [r3, #2]
 8011ea6:	b29b      	uxth	r3, r3
 8011ea8:	021b      	lsls	r3, r3, #8
 8011eaa:	b21a      	sxth	r2, r3
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	885b      	ldrh	r3, [r3, #2]
 8011eb0:	b29b      	uxth	r3, r3
 8011eb2:	0a1b      	lsrs	r3, r3, #8
 8011eb4:	b29b      	uxth	r3, r3
 8011eb6:	b21b      	sxth	r3, r3
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	b21b      	sxth	r3, r3
 8011ebc:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011ebe:	8afb      	ldrh	r3, [r7, #22]
 8011ec0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011ec2:	e01a      	b.n	8011efa <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ec8:	330e      	adds	r3, #14
 8011eca:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	889b      	ldrh	r3, [r3, #4]
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	021b      	lsls	r3, r3, #8
 8011ed4:	b21a      	sxth	r2, r3
 8011ed6:	69bb      	ldr	r3, [r7, #24]
 8011ed8:	889b      	ldrh	r3, [r3, #4]
 8011eda:	b29b      	uxth	r3, r3
 8011edc:	0a1b      	lsrs	r3, r3, #8
 8011ede:	b29b      	uxth	r3, r3
 8011ee0:	b21b      	sxth	r3, r3
 8011ee2:	4313      	orrs	r3, r2
 8011ee4:	b21b      	sxth	r3, r3
 8011ee6:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011ee8:	8afb      	ldrh	r3, [r7, #22]
 8011eea:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 8011eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011eee:	3328      	adds	r3, #40	@ 0x28
 8011ef0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011ef2:	e002      	b.n	8011efa <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8011ef4:	2300      	movs	r3, #0
 8011ef6:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8011ef8:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 8011efa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011efc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011efe:	429a      	cmp	r2, r3
 8011f00:	dd01      	ble.n	8011f06 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 8011f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f04:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8011f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	4413      	add	r3, r2
 8011f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f0e:	429a      	cmp	r2, r3
 8011f10:	dd06      	ble.n	8011f20 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8011f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011f14:	69fb      	ldr	r3, [r7, #28]
 8011f16:	4413      	add	r3, r2
 8011f18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011f1a:	1ad3      	subs	r3, r2, r3
 8011f1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8011f1e:	e001      	b.n	8011f24 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 8011f20:	2300      	movs	r3, #0
 8011f22:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8011f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f26:	7b5b      	ldrb	r3, [r3, #13]
 8011f28:	f003 0320 	and.w	r3, r3, #32
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d01c      	beq.n	8011f6a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8011f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f32:	8a5b      	ldrh	r3, [r3, #18]
 8011f34:	b29b      	uxth	r3, r3
 8011f36:	021b      	lsls	r3, r3, #8
 8011f38:	b21a      	sxth	r2, r3
 8011f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f3c:	8a5b      	ldrh	r3, [r3, #18]
 8011f3e:	b29b      	uxth	r3, r3
 8011f40:	0a1b      	lsrs	r3, r3, #8
 8011f42:	b29b      	uxth	r3, r3
 8011f44:	b21b      	sxth	r3, r3
 8011f46:	4313      	orrs	r3, r2
 8011f48:	b21b      	sxth	r3, r3
 8011f4a:	b29b      	uxth	r3, r3
 8011f4c:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	681a      	ldr	r2, [r3, #0]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	441a      	add	r2, r3
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 8011f5a:	68f9      	ldr	r1, [r7, #12]
 8011f5c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011f5e:	f7f8 fc51 	bl	800a804 <FreeRTOS_min_int32>
 8011f62:	4602      	mov	r2, r0
 8011f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f66:	1a9b      	subs	r3, r3, r2
 8011f68:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 8011f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	373c      	adds	r7, #60	@ 0x3c
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd90      	pop	{r4, r7, pc}

08011f74 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b092      	sub	sp, #72	@ 0x48
 8011f78:	af02      	add	r7, sp, #8
 8011f7a:	60f8      	str	r0, [r7, #12]
 8011f7c:	60b9      	str	r1, [r7, #8]
 8011f7e:	607a      	str	r2, [r7, #4]
 8011f80:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7f7 ff00 	bl	8009d88 <uxIPHeaderSizePacket>
 8011f88:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011f8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f90:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8011f92:	4413      	add	r3, r2
 8011f94:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f98:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011fa0:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb0:	685b      	ldr	r3, [r3, #4]
 8011fb2:	061a      	lsls	r2, r3, #24
 8011fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fb6:	685b      	ldr	r3, [r3, #4]
 8011fb8:	021b      	lsls	r3, r3, #8
 8011fba:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011fbe:	431a      	orrs	r2, r3
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fc2:	685b      	ldr	r3, [r3, #4]
 8011fc4:	0a1b      	lsrs	r3, r3, #8
 8011fc6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011fca:	431a      	orrs	r2, r3
 8011fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fce:	685b      	ldr	r3, [r3, #4]
 8011fd0:	0e1b      	lsrs	r3, r3, #24
 8011fd2:	4313      	orrs	r3, r2
 8011fd4:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 8011fd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d057      	beq.n	801208c <prvStoreRxData+0x118>
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011fe2:	2b03      	cmp	r3, #3
 8011fe4:	d952      	bls.n	801208c <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d007      	beq.n	8012004 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f7fe fc89 	bl	8010912 <uxStreamBufferGetSpace>
 8012000:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8012002:	e003      	b.n	801200c <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801200a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 801200c:	f107 0310 	add.w	r3, r7, #16
 8012010:	9300      	str	r3, [sp, #0]
 8012012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012014:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012016:	69f9      	ldr	r1, [r7, #28]
 8012018:	6a38      	ldr	r0, [r7, #32]
 801201a:	f003 fd45 	bl	8015aa8 <lTCPWindowRxCheck>
 801201e:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 8012020:	69bb      	ldr	r3, [r7, #24]
 8012022:	2b00      	cmp	r3, #0
 8012024:	db20      	blt.n	8012068 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8012026:	693b      	ldr	r3, [r7, #16]
 8012028:	2b00      	cmp	r3, #0
 801202a:	d007      	beq.n	801203c <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 801202c:	693b      	ldr	r3, [r7, #16]
 801202e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012030:	1ad3      	subs	r3, r2, r3
 8012032:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	4413      	add	r3, r2
 801203a:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 801203c:	69b9      	ldr	r1, [r7, #24]
 801203e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012040:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012042:	68f8      	ldr	r0, [r7, #12]
 8012044:	f7fe f8d2 	bl	80101ec <lTCPAddRxdata>
 8012048:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 801204a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801204c:	697a      	ldr	r2, [r7, #20]
 801204e:	429a      	cmp	r2, r3
 8012050:	d00a      	beq.n	8012068 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8012052:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012054:	6979      	ldr	r1, [r7, #20]
 8012056:	4813      	ldr	r0, [pc, #76]	@ (80120a4 <prvStoreRxData+0x130>)
 8012058:	f00f ff4e 	bl	8021ef8 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801205c:	6878      	ldr	r0, [r7, #4]
 801205e:	f002 f8b3 	bl	80141c8 <prvTCPSendReset>
                    xResult = -1;
 8012062:	f04f 33ff 	mov.w	r3, #4294967295
 8012066:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8012068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801206a:	2b00      	cmp	r3, #0
 801206c:	d113      	bne.n	8012096 <prvStoreRxData+0x122>
 801206e:	6a3b      	ldr	r3, [r7, #32]
 8012070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012072:	2b00      	cmp	r3, #0
 8012074:	d00f      	beq.n	8012096 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8012076:	6a3b      	ldr	r3, [r7, #32]
 8012078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801207a:	2200      	movs	r2, #0
 801207c:	2100      	movs	r1, #0
 801207e:	68f8      	ldr	r0, [r7, #12]
 8012080:	f7fe f8b4 	bl	80101ec <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8012084:	6a3b      	ldr	r3, [r7, #32]
 8012086:	2200      	movs	r2, #0
 8012088:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 801208a:	e004      	b.n	8012096 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 801208c:	6a3b      	ldr	r3, [r7, #32]
 801208e:	2200      	movs	r2, #0
 8012090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8012094:	e000      	b.n	8012098 <prvStoreRxData+0x124>
        {
 8012096:	bf00      	nop
        }

        return xResult;
 8012098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 801209a:	4618      	mov	r0, r3
 801209c:	3740      	adds	r7, #64	@ 0x40
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	0802612c 	.word	0x0802612c

080120a8 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 80120a8:	b480      	push	{r7}
 80120aa:	b085      	sub	sp, #20
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	4603      	mov	r3, r0
 80120b0:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 80120b2:	79fb      	ldrb	r3, [r7, #7]
 80120b4:	2b0b      	cmp	r3, #11
 80120b6:	bf8c      	ite	hi
 80120b8:	2201      	movhi	r2, #1
 80120ba:	2200      	movls	r2, #0
 80120bc:	b2d2      	uxtb	r2, r2
 80120be:	2a00      	cmp	r2, #0
 80120c0:	d10f      	bne.n	80120e2 <prvTCPSocketIsActive+0x3a>
 80120c2:	f640 3281 	movw	r2, #2945	@ 0xb81
 80120c6:	fa22 f303 	lsr.w	r3, r2, r3
 80120ca:	f003 0301 	and.w	r3, r3, #1
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	bf14      	ite	ne
 80120d2:	2301      	movne	r3, #1
 80120d4:	2300      	moveq	r3, #0
 80120d6:	b2db      	uxtb	r3, r3
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 80120dc:	2300      	movs	r3, #0
 80120de:	60fb      	str	r3, [r7, #12]
                break;
 80120e0:	e002      	b.n	80120e8 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 80120e2:	2301      	movs	r3, #1
 80120e4:	60fb      	str	r3, [r7, #12]
                break;
 80120e6:	bf00      	nop
        }

        return xResult;
 80120e8:	68fb      	ldr	r3, [r7, #12]
    }
 80120ea:	4618      	mov	r0, r3
 80120ec:	3714      	adds	r7, #20
 80120ee:	46bd      	mov	sp, r7
 80120f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120f4:	4770      	bx	lr
	...

080120f8 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 80120f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120fa:	b089      	sub	sp, #36	@ 0x24
 80120fc:	af02      	add	r7, sp, #8
 80120fe:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012106:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8012108:	7cfb      	ldrb	r3, [r7, #19]
 801210a:	2b08      	cmp	r3, #8
 801210c:	d00b      	beq.n	8012126 <prvTCPStatusAgeCheck+0x2e>
 801210e:	2b08      	cmp	r3, #8
 8012110:	dc0c      	bgt.n	801212c <prvTCPStatusAgeCheck+0x34>
 8012112:	2b01      	cmp	r3, #1
 8012114:	dc02      	bgt.n	801211c <prvTCPStatusAgeCheck+0x24>
 8012116:	2b00      	cmp	r3, #0
 8012118:	da05      	bge.n	8012126 <prvTCPStatusAgeCheck+0x2e>
 801211a:	e007      	b.n	801212c <prvTCPStatusAgeCheck+0x34>
 801211c:	2b05      	cmp	r3, #5
 801211e:	d105      	bne.n	801212c <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8012120:	2300      	movs	r3, #0
 8012122:	617b      	str	r3, [r7, #20]
                    break;
 8012124:	e005      	b.n	8012132 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8012126:	2300      	movs	r3, #0
 8012128:	617b      	str	r3, [r7, #20]
                    break;
 801212a:	e002      	b.n	8012132 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 801212c:	2301      	movs	r3, #1
 801212e:	617b      	str	r3, [r7, #20]
                    break;
 8012130:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8012132:	697b      	ldr	r3, [r7, #20]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d032      	beq.n	801219e <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8012138:	f7f2 fa90 	bl	800465c <xTaskGetTickCount>
 801213c:	4602      	mov	r2, r0
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012144:	1ad3      	subs	r3, r2, r3
 8012146:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801214e:	4293      	cmp	r3, r2
 8012150:	d925      	bls.n	801219e <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012156:	461d      	mov	r5, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012162:	461e      	mov	r6, r3
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801216a:	4618      	mov	r0, r3
 801216c:	f000 fdca 	bl	8012d04 <FreeRTOS_GetTCPStateName>
 8012170:	4603      	mov	r3, r0
 8012172:	9300      	str	r3, [sp, #0]
 8012174:	4633      	mov	r3, r6
 8012176:	4622      	mov	r2, r4
 8012178:	4629      	mov	r1, r5
 801217a:	480b      	ldr	r0, [pc, #44]	@ (80121a8 <prvTCPStatusAgeCheck+0xb0>)
 801217c:	f00f febc 	bl	8021ef8 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012180:	2108      	movs	r1, #8
 8012182:	6878      	ldr	r0, [r7, #4]
 8012184:	f7fe feac 	bl	8010ee0 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801218e:	f003 0304 	and.w	r3, r3, #4
 8012192:	b2db      	uxtb	r3, r3
 8012194:	2b00      	cmp	r3, #0
 8012196:	d002      	beq.n	801219e <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 8012198:	f04f 33ff 	mov.w	r3, #4294967295
 801219c:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 801219e:	697b      	ldr	r3, [r7, #20]
        }
 80121a0:	4618      	mov	r0, r3
 80121a2:	371c      	adds	r7, #28
 80121a4:	46bd      	mov	sp, r7
 80121a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80121a8:	08026154 	.word	0x08026154

080121ac <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80121ac:	b5b0      	push	{r4, r5, r7, lr}
 80121ae:	b08a      	sub	sp, #40	@ 0x28
 80121b0:	af02      	add	r7, sp, #8
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80121b6:	683b      	ldr	r3, [r7, #0]
 80121b8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80121ba:	6838      	ldr	r0, [r7, #0]
 80121bc:	f7f7 fde4 	bl	8009d88 <uxIPHeaderSizePacket>
 80121c0:	4603      	mov	r3, r0
 80121c2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80121c4:	4423      	add	r3, r4
 80121c6:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80121c8:	69bb      	ldr	r3, [r7, #24]
 80121ca:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80121cc:	2300      	movs	r3, #0
 80121ce:	74fb      	strb	r3, [r7, #19]
 80121d0:	697b      	ldr	r3, [r7, #20]
 80121d2:	7b5b      	ldrb	r3, [r3, #13]
 80121d4:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80121dc:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 80121de:	2300      	movs	r3, #0
 80121e0:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80121e2:	697b      	ldr	r3, [r7, #20]
 80121e4:	689b      	ldr	r3, [r3, #8]
 80121e6:	061a      	lsls	r2, r3, #24
 80121e8:	697b      	ldr	r3, [r7, #20]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	021b      	lsls	r3, r3, #8
 80121ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80121f2:	431a      	orrs	r2, r3
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	689b      	ldr	r3, [r3, #8]
 80121f8:	0a1b      	lsrs	r3, r3, #8
 80121fa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80121fe:	431a      	orrs	r2, r3
 8012200:	697b      	ldr	r3, [r7, #20]
 8012202:	689b      	ldr	r3, [r3, #8]
 8012204:	0e1b      	lsrs	r3, r3, #24
 8012206:	4313      	orrs	r3, r2
 8012208:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 801220a:	7cbb      	ldrb	r3, [r7, #18]
 801220c:	f003 0301 	and.w	r3, r3, #1
 8012210:	2b00      	cmp	r3, #0
 8012212:	d004      	beq.n	801221e <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8012214:	68fb      	ldr	r3, [r7, #12]
 8012216:	695b      	ldr	r3, [r3, #20]
 8012218:	1c5a      	adds	r2, r3, #1
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012224:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012228:	b2db      	uxtb	r3, r3
 801222a:	2b00      	cmp	r3, #0
 801222c:	d10b      	bne.n	8012246 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801222e:	68fb      	ldr	r3, [r7, #12]
 8012230:	6a1a      	ldr	r2, [r3, #32]
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012236:	687a      	ldr	r2, [r7, #4]
 8012238:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801223c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012240:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012244:	e00c      	b.n	8012260 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801224a:	3301      	adds	r3, #1
 801224c:	68ba      	ldr	r2, [r7, #8]
 801224e:	429a      	cmp	r2, r3
 8012250:	d106      	bne.n	8012260 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8012252:	687a      	ldr	r2, [r7, #4]
 8012254:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012258:	f043 0301 	orr.w	r3, r3, #1
 801225c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012266:	f003 0301 	and.w	r3, r3, #1
 801226a:	b2db      	uxtb	r3, r3
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10b      	bne.n	8012288 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012274:	68fb      	ldr	r3, [r7, #12]
 8012276:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	2211      	movs	r2, #17
 801227c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 801227e:	210a      	movs	r1, #10
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7fe fe2d 	bl	8010ee0 <vTCPStateChange>
 8012286:	e023      	b.n	80122d0 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801228c:	1c5a      	adds	r2, r3, #1
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012298:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801229c:	b2db      	uxtb	r3, r3
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d103      	bne.n	80122aa <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 80122a2:	697b      	ldr	r3, [r7, #20]
 80122a4:	2200      	movs	r2, #0
 80122a6:	735a      	strb	r2, [r3, #13]
 80122a8:	e012      	b.n	80122d0 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80122b0:	f003 0302 	and.w	r3, r3, #2
 80122b4:	b2db      	uxtb	r3, r3
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d103      	bne.n	80122c2 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80122ba:	697b      	ldr	r3, [r7, #20]
 80122bc:	2210      	movs	r2, #16
 80122be:	735a      	strb	r2, [r3, #13]
 80122c0:	e002      	b.n	80122c8 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 80122c2:	697b      	ldr	r3, [r7, #20]
 80122c4:	2200      	movs	r2, #0
 80122c6:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80122c8:	2108      	movs	r1, #8
 80122ca:	6878      	ldr	r0, [r7, #4]
 80122cc:	f7fe fe08 	bl	8010ee0 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	6a1a      	ldr	r2, [r3, #32]
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 80122d8:	697b      	ldr	r3, [r7, #20]
 80122da:	7b5b      	ldrb	r3, [r3, #13]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d00d      	beq.n	80122fc <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f7f7 fd6b 	bl	8009dbc <uxIPHeaderSizeSocket>
 80122e6:	4603      	mov	r3, r0
 80122e8:	b2da      	uxtb	r2, r3
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80122f0:	4413      	add	r3, r2
 80122f2:	b2db      	uxtb	r3, r3
 80122f4:	3314      	adds	r3, #20
 80122f6:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 80122f8:	7cfb      	ldrb	r3, [r7, #19]
 80122fa:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8012302:	3314      	adds	r3, #20
 8012304:	b2db      	uxtb	r3, r3
 8012306:	009b      	lsls	r3, r3, #2
 8012308:	b2da      	uxtb	r2, r3
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 801230e:	4b14      	ldr	r3, [pc, #80]	@ (8012360 <prvTCPHandleFin+0x1b4>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d01f      	beq.n	8012356 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	69db      	ldr	r3, [r3, #28]
 801231a:	68ba      	ldr	r2, [r7, #8]
 801231c:	1ad0      	subs	r0, r2, r3
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	6a1a      	ldr	r2, [r3, #32]
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	69db      	ldr	r3, [r3, #28]
 8012326:	1ad4      	subs	r4, r2, r3
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	69db      	ldr	r3, [r3, #28]
 8012330:	1ad5      	subs	r5, r2, r3
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	69db      	ldr	r3, [r3, #28]
 801233a:	1ad3      	subs	r3, r2, r3
 801233c:	68fa      	ldr	r2, [r7, #12]
 801233e:	6911      	ldr	r1, [r2, #16]
 8012340:	68fa      	ldr	r2, [r7, #12]
 8012342:	68d2      	ldr	r2, [r2, #12]
 8012344:	1a8a      	subs	r2, r1, r2
 8012346:	9201      	str	r2, [sp, #4]
 8012348:	9300      	str	r3, [sp, #0]
 801234a:	462b      	mov	r3, r5
 801234c:	4622      	mov	r2, r4
 801234e:	4601      	mov	r1, r0
 8012350:	4804      	ldr	r0, [pc, #16]	@ (8012364 <prvTCPHandleFin+0x1b8>)
 8012352:	f00f fdd1 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8012356:	69fb      	ldr	r3, [r7, #28]
    }
 8012358:	4618      	mov	r0, r3
 801235a:	3720      	adds	r7, #32
 801235c:	46bd      	mov	sp, r7
 801235e:	bdb0      	pop	{r4, r5, r7, pc}
 8012360:	200015c4 	.word	0x200015c4
 8012364:	0802618c 	.word	0x0802618c

08012368 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012368:	b590      	push	{r4, r7, lr}
 801236a:	b09b      	sub	sp, #108	@ 0x6c
 801236c:	af02      	add	r7, sp, #8
 801236e:	60f8      	str	r0, [r7, #12]
 8012370:	60b9      	str	r1, [r7, #8]
 8012372:	607a      	str	r2, [r7, #4]
 8012374:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	f7f7 fd1e 	bl	8009dbc <uxIPHeaderSizeSocket>
 8012380:	4603      	mov	r3, r0
 8012382:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012384:	4423      	add	r3, r4
 8012386:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012388:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801238a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012392:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012396:	7b5b      	ldrb	r3, [r3, #13]
 8012398:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801239c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	061a      	lsls	r2, r3, #24
 80123a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	021b      	lsls	r3, r3, #8
 80123a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80123ac:	431a      	orrs	r2, r3
 80123ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123b0:	685b      	ldr	r3, [r3, #4]
 80123b2:	0a1b      	lsrs	r3, r3, #8
 80123b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80123b8:	431a      	orrs	r2, r3
 80123ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80123bc:	685b      	ldr	r3, [r3, #4]
 80123be:	0e1b      	lsrs	r3, r3, #24
 80123c0:	4313      	orrs	r3, r2
 80123c2:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 80123c4:	2300      	movs	r3, #0
 80123c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 80123c8:	2300      	movs	r3, #0
 80123ca:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 80123cc:	2310      	movs	r3, #16
 80123ce:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 80123d2:	2317      	movs	r3, #23
 80123d4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80123de:	2b02      	cmp	r3, #2
 80123e0:	d105      	bne.n	80123ee <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 80123e2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80123e6:	f043 0302 	orr.w	r3, r3, #2
 80123ea:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 80123ee:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 80123f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80123f6:	4013      	ands	r3, r2
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 80123fe:	429a      	cmp	r2, r3
 8012400:	d044      	beq.n	801248c <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012408:	2b04      	cmp	r3, #4
 801240a:	d101      	bne.n	8012410 <prvHandleSynReceived+0xa8>
 801240c:	4977      	ldr	r1, [pc, #476]	@ (80125ec <prvHandleSynReceived+0x284>)
 801240e:	e000      	b.n	8012412 <prvHandleSynReceived+0xaa>
 8012410:	4977      	ldr	r1, [pc, #476]	@ (80125f0 <prvHandleSynReceived+0x288>)
 8012412:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8012416:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801241a:	4876      	ldr	r0, [pc, #472]	@ (80125f4 <prvHandleSynReceived+0x28c>)
 801241c:	f00f fd6c 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012420:	2108      	movs	r1, #8
 8012422:	68f8      	ldr	r0, [r7, #12]
 8012424:	f7fe fd5c 	bl	8010ee0 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8012428:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801242a:	689b      	ldr	r3, [r3, #8]
 801242c:	061a      	lsls	r2, r3, #24
 801242e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012430:	689b      	ldr	r3, [r3, #8]
 8012432:	021b      	lsls	r3, r3, #8
 8012434:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012438:	431a      	orrs	r2, r3
 801243a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801243c:	689b      	ldr	r3, [r3, #8]
 801243e:	0a1b      	lsrs	r3, r3, #8
 8012440:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012444:	431a      	orrs	r2, r3
 8012446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012448:	689b      	ldr	r3, [r3, #8]
 801244a:	0e1b      	lsrs	r3, r3, #24
 801244c:	431a      	orrs	r2, r3
 801244e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012450:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012452:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012456:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8012458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801245a:	7b5b      	ldrb	r3, [r3, #13]
 801245c:	f043 0304 	orr.w	r3, r3, #4
 8012460:	b2da      	uxtb	r2, r3
 8012462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012464:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012466:	68f8      	ldr	r0, [r7, #12]
 8012468:	f7f7 fca8 	bl	8009dbc <uxIPHeaderSizeSocket>
 801246c:	4602      	mov	r2, r0
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	4413      	add	r3, r2
 8012472:	3314      	adds	r3, #20
 8012474:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012478:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	b2db      	uxtb	r3, r3
 801247e:	3314      	adds	r3, #20
 8012480:	b2db      	uxtb	r3, r3
 8012482:	009b      	lsls	r3, r3, #2
 8012484:	b2da      	uxtb	r2, r3
 8012486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012488:	731a      	strb	r2, [r3, #12]
 801248a:	e0aa      	b.n	80125e2 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8012492:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012494:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 801249c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801249e:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80124a8:	2b02      	cmp	r3, #2
 80124aa:	d12e      	bne.n	801250a <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80124ac:	68f8      	ldr	r0, [r7, #12]
 80124ae:	f7f7 fc85 	bl	8009dbc <uxIPHeaderSizeSocket>
 80124b2:	4603      	mov	r3, r0
 80124b4:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 80124b6:	33a0      	adds	r3, #160	@ 0xa0
 80124b8:	68fa      	ldr	r2, [r7, #12]
 80124ba:	4413      	add	r3, r2
 80124bc:	330a      	adds	r3, #10
 80124be:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80124c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c2:	2210      	movs	r2, #16
 80124c4:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80124c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80124c8:	2210      	movs	r2, #16
 80124ca:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80124de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80124e0:	f003 f8ec 	bl	80156bc <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 80124e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124e6:	1c5a      	adds	r2, r3, #1
 80124e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124ea:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 80124ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80124ee:	1c5a      	adds	r2, r3, #1
 80124f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124f2:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 80124f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124f6:	6a1b      	ldr	r3, [r3, #32]
 80124f8:	1c5a      	adds	r2, r3, #1
 80124fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80124fc:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 80124fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012502:	1c5a      	adds	r2, r3, #1
 8012504:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012506:	635a      	str	r2, [r3, #52]	@ 0x34
 8012508:	e005      	b.n	8012516 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d102      	bne.n	8012516 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8012510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8012514:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012518:	69db      	ldr	r3, [r3, #28]
 801251a:	1c5a      	adds	r2, r3, #1
 801251c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801251e:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	7a1b      	ldrb	r3, [r3, #8]
 8012524:	f003 0301 	and.w	r3, r3, #1
 8012528:	b2db      	uxtb	r3, r3
 801252a:	2b00      	cmp	r3, #0
 801252c:	d001      	beq.n	8012532 <prvHandleSynReceived+0x1ca>
 801252e:	200a      	movs	r0, #10
 8012530:	e000      	b.n	8012534 <prvHandleSynReceived+0x1cc>
 8012532:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 801253a:	f107 0210 	add.w	r2, r7, #16
 801253e:	2328      	movs	r3, #40	@ 0x28
 8012540:	f7fc fec0 	bl	800f2c4 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801254a:	2b02      	cmp	r3, #2
 801254c:	d101      	bne.n	8012552 <prvHandleSynReceived+0x1ea>
 801254e:	492a      	ldr	r1, [pc, #168]	@ (80125f8 <prvHandleSynReceived+0x290>)
 8012550:	e000      	b.n	8012554 <prvHandleSynReceived+0x1ec>
 8012552:	492a      	ldr	r1, [pc, #168]	@ (80125fc <prvHandleSynReceived+0x294>)
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012558:	461c      	mov	r4, r3
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012560:	461a      	mov	r2, r3
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012568:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801256c:	b2db      	uxtb	r3, r3
 801256e:	4618      	mov	r0, r3
 8012570:	f107 0310 	add.w	r3, r7, #16
 8012574:	9001      	str	r0, [sp, #4]
 8012576:	9200      	str	r2, [sp, #0]
 8012578:	4622      	mov	r2, r4
 801257a:	4821      	ldr	r0, [pc, #132]	@ (8012600 <prvHandleSynReceived+0x298>)
 801257c:	f00f fcbc 	bl	8021ef8 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8012580:	68fb      	ldr	r3, [r7, #12]
 8012582:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012586:	2b02      	cmp	r3, #2
 8012588:	d002      	beq.n	8012590 <prvHandleSynReceived+0x228>
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d014      	beq.n	80125ba <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012590:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8012592:	2210      	movs	r2, #16
 8012594:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012596:	68f8      	ldr	r0, [r7, #12]
 8012598:	f7f7 fc10 	bl	8009dbc <uxIPHeaderSizeSocket>
 801259c:	4602      	mov	r2, r0
 801259e:	683b      	ldr	r3, [r7, #0]
 80125a0:	4413      	add	r3, r2
 80125a2:	3314      	adds	r3, #20
 80125a4:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 80125a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80125a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	b2db      	uxtb	r3, r3
 80125ae:	3314      	adds	r3, #20
 80125b0:	b2db      	uxtb	r3, r3
 80125b2:	009b      	lsls	r3, r3, #2
 80125b4:	b2da      	uxtb	r2, r3
 80125b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80125b8:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80125c0:	f003 0310 	and.w	r3, r3, #16
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d107      	bne.n	80125da <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	2200      	movs	r2, #0
 80125ce:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	2200      	movs	r2, #0
 80125d6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 80125da:	2105      	movs	r1, #5
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f7fe fc7f 	bl	8010ee0 <vTCPStateChange>
        }

        return xSendLength;
 80125e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 80125e4:	4618      	mov	r0, r3
 80125e6:	3764      	adds	r7, #100	@ 0x64
 80125e8:	46bd      	mov	sp, r7
 80125ea:	bd90      	pop	{r4, r7, pc}
 80125ec:	080261cc 	.word	0x080261cc
 80125f0:	080261dc 	.word	0x080261dc
 80125f4:	080261ec 	.word	0x080261ec
 80125f8:	08026210 	.word	0x08026210
 80125fc:	08026218 	.word	0x08026218
 8012600:	08026220 	.word	0x08026220

08012604 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8012604:	b590      	push	{r4, r7, lr}
 8012606:	b097      	sub	sp, #92	@ 0x5c
 8012608:	af02      	add	r7, sp, #8
 801260a:	60f8      	str	r0, [r7, #12]
 801260c:	60b9      	str	r1, [r7, #8]
 801260e:	607a      	str	r2, [r7, #4]
 8012610:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012618:	68f8      	ldr	r0, [r7, #12]
 801261a:	f7f7 fbcf 	bl	8009dbc <uxIPHeaderSizeSocket>
 801261e:	4603      	mov	r3, r0
 8012620:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012622:	4423      	add	r3, r4
 8012624:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8012626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012628:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012630:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012632:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012634:	7b5b      	ldrb	r3, [r3, #13]
 8012636:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 801263a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	061a      	lsls	r2, r3, #24
 8012640:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012642:	685b      	ldr	r3, [r3, #4]
 8012644:	021b      	lsls	r3, r3, #8
 8012646:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801264a:	431a      	orrs	r2, r3
 801264c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801264e:	685b      	ldr	r3, [r3, #4]
 8012650:	0a1b      	lsrs	r3, r3, #8
 8012652:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012656:	431a      	orrs	r2, r3
 8012658:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801265a:	685b      	ldr	r3, [r3, #4]
 801265c:	0e1b      	lsrs	r3, r3, #24
 801265e:	4313      	orrs	r3, r2
 8012660:	637b      	str	r3, [r7, #52]	@ 0x34
 8012662:	2300      	movs	r3, #0
 8012664:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8012666:	2300      	movs	r3, #0
 8012668:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801266a:	2300      	movs	r3, #0
 801266c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 801266e:	2300      	movs	r3, #0
 8012670:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8012672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012674:	89db      	ldrh	r3, [r3, #14]
 8012676:	b29b      	uxth	r3, r3
 8012678:	021b      	lsls	r3, r3, #8
 801267a:	b21a      	sxth	r2, r3
 801267c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801267e:	89db      	ldrh	r3, [r3, #14]
 8012680:	b29b      	uxth	r3, r3
 8012682:	0a1b      	lsrs	r3, r3, #8
 8012684:	b29b      	uxth	r3, r3
 8012686:	b21b      	sxth	r3, r3
 8012688:	4313      	orrs	r3, r2
 801268a:	b21b      	sxth	r3, r3
 801268c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801268e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801269c:	68fa      	ldr	r2, [r7, #12]
 801269e:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80126a2:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 80126ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80126b0:	f003 0310 	and.w	r3, r3, #16
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	f000 8106 	beq.w	80128c6 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 80126ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	061a      	lsls	r2, r3, #24
 80126c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126c2:	689b      	ldr	r3, [r3, #8]
 80126c4:	021b      	lsls	r3, r3, #8
 80126c6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80126ca:	431a      	orrs	r2, r3
 80126cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126ce:	689b      	ldr	r3, [r3, #8]
 80126d0:	0a1b      	lsrs	r3, r3, #8
 80126d2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80126d6:	431a      	orrs	r2, r3
 80126d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80126da:	689b      	ldr	r3, [r3, #8]
 80126dc:	0e1b      	lsrs	r3, r3, #24
 80126de:	4313      	orrs	r3, r2
 80126e0:	4619      	mov	r1, r3
 80126e2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80126e4:	f003 feee 	bl	80164c4 <ulTCPWindowTxAck>
 80126e8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d02c      	beq.n	801274e <prvHandleEstablished+0x14a>
 80126f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d029      	beq.n	801274e <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012700:	2300      	movs	r3, #0
 8012702:	9300      	str	r3, [sp, #0]
 8012704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012706:	2200      	movs	r2, #0
 8012708:	2100      	movs	r1, #0
 801270a:	f7fe fa42 	bl	8010b92 <uxStreamBufferGet>
 801270e:	4603      	mov	r3, r0
 8012710:	2b00      	cmp	r3, #0
 8012712:	d01c      	beq.n	801274e <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	681b      	ldr	r3, [r3, #0]
 8012718:	f043 0202 	orr.w	r2, r3, #2
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012724:	f003 0302 	and.w	r3, r3, #2
 8012728:	2b00      	cmp	r3, #0
 801272a:	d005      	beq.n	8012738 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801273e:	2b00      	cmp	r3, #0
 8012740:	d005      	beq.n	801274e <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8012748:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801274a:	68f8      	ldr	r0, [r7, #12]
 801274c:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012754:	2b00      	cmp	r3, #0
 8012756:	d002      	beq.n	801275e <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8012758:	68f8      	ldr	r0, [r7, #12]
 801275a:	f001 fb13 	bl	8013d84 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801275e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012760:	6a1a      	ldr	r2, [r3, #32]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801276e:	f003 0320 	and.w	r3, r3, #32
 8012772:	b2db      	uxtb	r3, r3
 8012774:	2b00      	cmp	r3, #0
 8012776:	d105      	bne.n	8012784 <prvHandleEstablished+0x180>
 8012778:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801277c:	f003 0301 	and.w	r3, r3, #1
 8012780:	2b00      	cmp	r3, #0
 8012782:	d06b      	beq.n	801285c <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8012784:	2301      	movs	r3, #1
 8012786:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801278e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012792:	b2db      	uxtb	r3, r3
 8012794:	2b00      	cmp	r3, #0
 8012796:	d13a      	bne.n	801280e <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8012798:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801279a:	f002 fe87 	bl	80154ac <xTCPWindowRxEmpty>
 801279e:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 80127a0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80127a2:	f003 fafd 	bl	8015da0 <xTCPWindowTxDone>
 80127a6:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 80127a8:	6a3b      	ldr	r3, [r7, #32]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d002      	beq.n	80127b4 <prvHandleEstablished+0x1b0>
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d10f      	bne.n	80127d4 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80127b8:	4619      	mov	r1, r3
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80127c0:	461a      	mov	r2, r3
 80127c2:	69fb      	ldr	r3, [r7, #28]
 80127c4:	9300      	str	r3, [sp, #0]
 80127c6:	6a3b      	ldr	r3, [r7, #32]
 80127c8:	4841      	ldr	r0, [pc, #260]	@ (80128d0 <prvHandleEstablished+0x2cc>)
 80127ca:	f00f fb95 	bl	8021ef8 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 80127ce:	2300      	movs	r3, #0
 80127d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80127d2:	e01c      	b.n	801280e <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80127d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	441a      	add	r2, r3
 80127da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127dc:	691b      	ldr	r3, [r3, #16]
 80127de:	1ad3      	subs	r3, r2, r3
 80127e0:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 80127e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80127e4:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 80127e6:	69bb      	ldr	r3, [r7, #24]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	dd10      	ble.n	801280e <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 80127ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127ee:	691a      	ldr	r2, [r3, #16]
 80127f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127f2:	68db      	ldr	r3, [r3, #12]
 80127f4:	1ad1      	subs	r1, r2, r3
 80127f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127f8:	699a      	ldr	r2, [r3, #24]
 80127fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80127fc:	68db      	ldr	r3, [r3, #12]
 80127fe:	1ad3      	subs	r3, r2, r3
 8012800:	460a      	mov	r2, r1
 8012802:	69b9      	ldr	r1, [r7, #24]
 8012804:	4833      	ldr	r0, [pc, #204]	@ (80128d4 <prvHandleEstablished+0x2d0>)
 8012806:	f00f fb77 	bl	8021ef8 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 801280a:	2300      	movs	r3, #0
 801280c:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 801280e:	4b32      	ldr	r3, [pc, #200]	@ (80128d8 <prvHandleEstablished+0x2d4>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	dd11      	ble.n	801283a <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801281c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801281e:	1ad1      	subs	r1, r2, r3
 8012820:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012822:	6a1a      	ldr	r2, [r3, #32]
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 801282a:	1ad3      	subs	r3, r2, r3
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	460a      	mov	r2, r1
 8012832:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8012834:	4829      	ldr	r0, [pc, #164]	@ (80128dc <prvHandleEstablished+0x2d8>)
 8012836:	f00f fb5f 	bl	8021ef8 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 801283a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00d      	beq.n	801285c <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8012840:	68fa      	ldr	r2, [r7, #12]
 8012842:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012846:	f043 0320 	orr.w	r3, r3, #32
 801284a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 801284e:	68bb      	ldr	r3, [r7, #8]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	4619      	mov	r1, r3
 8012854:	68f8      	ldr	r0, [r7, #12]
 8012856:	f7ff fca9 	bl	80121ac <prvTCPHandleFin>
 801285a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 801285c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801285e:	2b00      	cmp	r3, #0
 8012860:	d131      	bne.n	80128c6 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8012862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012864:	2210      	movs	r2, #16
 8012866:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d01d      	beq.n	80128aa <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801286e:	68f8      	ldr	r0, [r7, #12]
 8012870:	f7f7 faa4 	bl	8009dbc <uxIPHeaderSizeSocket>
 8012874:	4602      	mov	r2, r0
 8012876:	683b      	ldr	r3, [r7, #0]
 8012878:	4413      	add	r3, r2
 801287a:	3314      	adds	r3, #20
 801287c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 801287e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012880:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	b2db      	uxtb	r3, r3
 8012886:	3314      	adds	r3, #20
 8012888:	b2db      	uxtb	r3, r3
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	b2da      	uxtb	r2, r3
 801288e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012890:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801289c:	b2db      	uxtb	r3, r3
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d003      	beq.n	80128aa <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 80128a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80128a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80128a8:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d10a      	bne.n	80128c6 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 80128b0:	683a      	ldr	r2, [r7, #0]
 80128b2:	68b9      	ldr	r1, [r7, #8]
 80128b4:	68f8      	ldr	r0, [r7, #12]
 80128b6:	f001 f8a1 	bl	80139fc <prvTCPPrepareSend>
 80128ba:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 80128bc:	697b      	ldr	r3, [r7, #20]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	dd01      	ble.n	80128c6 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 80128c2:	697b      	ldr	r3, [r7, #20]
 80128c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 80128c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 80128c8:	4618      	mov	r0, r3
 80128ca:	3754      	adds	r7, #84	@ 0x54
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd90      	pop	{r4, r7, pc}
 80128d0:	08026254 	.word	0x08026254
 80128d4:	08026280 	.word	0x08026280
 80128d8:	200015c4 	.word	0x200015c4
 80128dc:	080262b4 	.word	0x080262b4

080128e0 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 80128e0:	b590      	push	{r4, r7, lr}
 80128e2:	b08f      	sub	sp, #60	@ 0x3c
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 80128ea:	683b      	ldr	r3, [r7, #0]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	4618      	mov	r0, r3
 80128f6:	f7f7 fa47 	bl	8009d88 <uxIPHeaderSizePacket>
 80128fa:	4603      	mov	r3, r0
 80128fc:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80128fe:	4423      	add	r3, r4
 8012900:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8012902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012904:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8012906:	2300      	movs	r3, #0
 8012908:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 801290a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	061a      	lsls	r2, r3, #24
 8012910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012912:	685b      	ldr	r3, [r3, #4]
 8012914:	021b      	lsls	r3, r3, #8
 8012916:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801291a:	431a      	orrs	r2, r3
 801291c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801291e:	685b      	ldr	r3, [r3, #4]
 8012920:	0a1b      	lsrs	r3, r3, #8
 8012922:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012926:	431a      	orrs	r2, r3
 8012928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801292a:	685b      	ldr	r3, [r3, #4]
 801292c:	0e1b      	lsrs	r3, r3, #24
 801292e:	4313      	orrs	r3, r2
 8012930:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 8012932:	2300      	movs	r3, #0
 8012934:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8012936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012938:	7b5b      	ldrb	r3, [r3, #13]
 801293a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012944:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8012946:	2300      	movs	r3, #0
 8012948:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	f107 0208 	add.w	r2, r7, #8
 8012952:	4611      	mov	r1, r2
 8012954:	4618      	mov	r0, r3
 8012956:	f7ff fa64 	bl	8011e22 <prvCheckRxData>
 801295a:	4603      	mov	r3, r0
 801295c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012964:	2b04      	cmp	r3, #4
 8012966:	d90c      	bls.n	8012982 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8012968:	69fb      	ldr	r3, [r7, #28]
 801296a:	691a      	ldr	r2, [r3, #16]
 801296c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801296e:	3301      	adds	r3, #1
 8012970:	429a      	cmp	r2, r3
 8012972:	d106      	bne.n	8012982 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012974:	687a      	ldr	r2, [r7, #4]
 8012976:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801297a:	f043 0301 	orr.w	r3, r3, #1
 801297e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8012982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	441a      	add	r2, r3
 8012988:	69fb      	ldr	r3, [r7, #28]
 801298a:	699b      	ldr	r3, [r3, #24]
 801298c:	1ad3      	subs	r3, r2, r3
 801298e:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8012990:	693b      	ldr	r3, [r7, #16]
 8012992:	2b00      	cmp	r3, #0
 8012994:	dd04      	ble.n	80129a0 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012996:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012998:	697b      	ldr	r3, [r7, #20]
 801299a:	441a      	add	r2, r3
 801299c:	69fb      	ldr	r3, [r7, #28]
 801299e:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 80129a0:	68b9      	ldr	r1, [r7, #8]
 80129a2:	683b      	ldr	r3, [r7, #0]
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	697b      	ldr	r3, [r7, #20]
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f7ff fae3 	bl	8011f74 <prvStoreRxData>
 80129ae:	4603      	mov	r3, r0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	da03      	bge.n	80129bc <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 80129b4:	f04f 33ff 	mov.w	r3, #4294967295
 80129b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80129ba:	e0ae      	b.n	8012b1a <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 80129bc:	683b      	ldr	r3, [r7, #0]
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	4619      	mov	r1, r3
 80129c2:	6878      	ldr	r0, [r7, #4]
 80129c4:	f001 fa0c 	bl	8013de0 <prvSetOptions>
 80129c8:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80129d0:	2b04      	cmp	r3, #4
 80129d2:	d10c      	bne.n	80129ee <prvTCPHandleState+0x10e>
 80129d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80129d8:	f003 031f 	and.w	r3, r3, #31
 80129dc:	2b02      	cmp	r3, #2
 80129de:	d106      	bne.n	80129ee <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 80129e0:	4855      	ldr	r0, [pc, #340]	@ (8012b38 <prvTCPHandleState+0x258>)
 80129e2:	f00f fa89 	bl	8021ef8 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 80129e6:	2103      	movs	r1, #3
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7fe fa79 	bl	8010ee0 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 80129ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80129f2:	f003 0301 	and.w	r3, r3, #1
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d022      	beq.n	8012a40 <prvTCPHandleState+0x160>
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012a00:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d11a      	bne.n	8012a40 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8012a0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	441a      	add	r2, r3
 8012a10:	69fb      	ldr	r3, [r7, #28]
 8012a12:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012a1e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d106      	bne.n	8012a40 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8012a32:	687a      	ldr	r2, [r7, #4]
 8012a34:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012a38:	f043 0302 	orr.w	r3, r3, #2
 8012a3c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012a46:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8012a48:	7bfb      	ldrb	r3, [r7, #15]
 8012a4a:	2b0b      	cmp	r3, #11
 8012a4c:	d864      	bhi.n	8012b18 <prvTCPHandleState+0x238>
 8012a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8012a54 <prvTCPHandleState+0x174>)
 8012a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a54:	08012b19 	.word	0x08012b19
 8012a58:	08012b19 	.word	0x08012b19
 8012a5c:	08012ae7 	.word	0x08012ae7
 8012a60:	08012a85 	.word	0x08012a85
 8012a64:	08012ae7 	.word	0x08012ae7
 8012a68:	08012af9 	.word	0x08012af9
 8012a6c:	08012b09 	.word	0x08012b09
 8012a70:	08012b09 	.word	0x08012b09
 8012a74:	08012b19 	.word	0x08012b19
 8012a78:	08012b19 	.word	0x08012b19
 8012a7c:	08012b09 	.word	0x08012b09
 8012a80:	08012b19 	.word	0x08012b19
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8012a84:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f000 fe4e 	bl	8013728 <prvSetSynAckOptions>
 8012a8c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 8012a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a90:	2212      	movs	r2, #18
 8012a92:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012a94:	6878      	ldr	r0, [r7, #4]
 8012a96:	f7f7 f991 	bl	8009dbc <uxIPHeaderSizeSocket>
 8012a9a:	4602      	mov	r2, r0
 8012a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a9e:	4413      	add	r3, r2
 8012aa0:	3314      	adds	r3, #20
 8012aa2:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8012aa4:	69bb      	ldr	r3, [r7, #24]
 8012aa6:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8012aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aaa:	b2db      	uxtb	r3, r3
 8012aac:	3314      	adds	r3, #20
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	009b      	lsls	r3, r3, #2
 8012ab2:	b2da      	uxtb	r2, r3
 8012ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ab6:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8012ab8:	2104      	movs	r1, #4
 8012aba:	6878      	ldr	r0, [r7, #4]
 8012abc:	f7fe fa10 	bl	8010ee0 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8012ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ac2:	1c5a      	adds	r2, r3, #1
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8012ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aca:	1c5a      	adds	r2, r3, #1
 8012acc:	69fb      	ldr	r3, [r7, #28]
 8012ace:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	69db      	ldr	r3, [r3, #28]
 8012ad4:	1c5a      	adds	r2, r3, #1
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	69db      	ldr	r3, [r3, #28]
 8012ade:	1c5a      	adds	r2, r3, #1
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	621a      	str	r2, [r3, #32]
                    break;
 8012ae4:	e019      	b.n	8012b1a <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8012ae6:	683b      	ldr	r3, [r7, #0]
 8012ae8:	6819      	ldr	r1, [r3, #0]
 8012aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012aec:	697a      	ldr	r2, [r7, #20]
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7ff fc3a 	bl	8012368 <prvHandleSynReceived>
 8012af4:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012af6:	e010      	b.n	8012b1a <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8012af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012afa:	697a      	ldr	r2, [r7, #20]
 8012afc:	6839      	ldr	r1, [r7, #0]
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f7ff fd80 	bl	8012604 <prvHandleEstablished>
 8012b04:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012b06:	e008      	b.n	8012b1a <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7ff fb4c 	bl	80121ac <prvTCPHandleFin>
 8012b14:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012b16:	e000      	b.n	8012b1a <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8012b18:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 8012b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	dd06      	ble.n	8012b2e <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 8012b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012b22:	697a      	ldr	r2, [r7, #20]
 8012b24:	6839      	ldr	r1, [r7, #0]
 8012b26:	6878      	ldr	r0, [r7, #4]
 8012b28:	f001 fa1a 	bl	8013f60 <prvSendData>
 8012b2c:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 8012b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8012b30:	4618      	mov	r0, r3
 8012b32:	373c      	adds	r7, #60	@ 0x3c
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd90      	pop	{r4, r7, pc}
 8012b38:	080262ec 	.word	0x080262ec

08012b3c <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012b3c:	b580      	push	{r7, lr}
 8012b3e:	b084      	sub	sp, #16
 8012b40:	af00      	add	r7, sp, #0
 8012b42:	6078      	str	r0, [r7, #4]
 8012b44:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8012b46:	2300      	movs	r3, #0
 8012b48:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8012b4a:	6838      	ldr	r0, [r7, #0]
 8012b4c:	f7f7 f91c 	bl	8009d88 <uxIPHeaderSizePacket>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b14      	cmp	r3, #20
 8012b54:	d002      	beq.n	8012b5c <prvHandleListen+0x20>
 8012b56:	2b28      	cmp	r3, #40	@ 0x28
 8012b58:	d006      	beq.n	8012b68 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 8012b5a:	e00b      	b.n	8012b74 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 8012b5c:	6839      	ldr	r1, [r7, #0]
 8012b5e:	6878      	ldr	r0, [r7, #4]
 8012b60:	f000 f8ee 	bl	8012d40 <prvHandleListen_IPV4>
 8012b64:	60f8      	str	r0, [r7, #12]
                    break;
 8012b66:	e005      	b.n	8012b74 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8012b68:	6839      	ldr	r1, [r7, #0]
 8012b6a:	6878      	ldr	r0, [r7, #4]
 8012b6c:	f000 fa10 	bl	8012f90 <prvHandleListen_IPV6>
 8012b70:	60f8      	str	r0, [r7, #12]
                    break;
 8012b72:	bf00      	nop
        }

        return pxNewSocket;
 8012b74:	68fb      	ldr	r3, [r7, #12]
    }
 8012b76:	4618      	mov	r0, r3
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
	...

08012b80 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8012b80:	b590      	push	{r4, r7, lr}
 8012b82:	b08f      	sub	sp, #60	@ 0x3c
 8012b84:	af04      	add	r7, sp, #16
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8012b8a:	683b      	ldr	r3, [r7, #0]
 8012b8c:	6a1a      	ldr	r2, [r3, #32]
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8012b92:	683b      	ldr	r3, [r7, #0]
 8012b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8012bb2:	683b      	ldr	r3, [r7, #0]
 8012bb4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8012bbe:	683b      	ldr	r3, [r7, #0]
 8012bc0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8012be2:	683b      	ldr	r3, [r7, #0]
 8012be4:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 8012bee:	683b      	ldr	r3, [r7, #0]
 8012bf0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8012bf6:	683b      	ldr	r3, [r7, #0]
 8012bf8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 8012c0e:	683b      	ldr	r3, [r7, #0]
 8012c10:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 8012c1a:	683b      	ldr	r3, [r7, #0]
 8012c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d009      	beq.n	8012c36 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012c2e:	f043 0205 	orr.w	r2, r3, #5
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8012c36:	f107 030c 	add.w	r3, r7, #12
 8012c3a:	4619      	mov	r1, r3
 8012c3c:	6838      	ldr	r0, [r7, #0]
 8012c3e:	f7fc fb65 	bl	800f30c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012c42:	687a      	ldr	r2, [r7, #4]
 8012c44:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012c48:	f043 0304 	orr.w	r3, r3, #4
 8012c4c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	683a      	ldr	r2, [r7, #0]
 8012c54:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012c5c:	3301      	adds	r3, #1
 8012c5e:	b29a      	uxth	r2, r3
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d102      	bne.n	8012c74 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	687a      	ldr	r2, [r7, #4]
 8012c72:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012c78:	4619      	mov	r1, r3
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012c80:	4618      	mov	r0, r3
 8012c82:	683b      	ldr	r3, [r7, #0]
 8012c84:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012c88:	461c      	mov	r4, r3
 8012c8a:	683b      	ldr	r3, [r7, #0]
 8012c8c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012c90:	2b01      	cmp	r3, #1
 8012c92:	d101      	bne.n	8012c98 <prvTCPSocketCopy+0x118>
 8012c94:	4a17      	ldr	r2, [pc, #92]	@ (8012cf4 <prvTCPSocketCopy+0x174>)
 8012c96:	e000      	b.n	8012c9a <prvTCPSocketCopy+0x11a>
 8012c98:	4a17      	ldr	r2, [pc, #92]	@ (8012cf8 <prvTCPSocketCopy+0x178>)
 8012c9a:	683b      	ldr	r3, [r7, #0]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d002      	beq.n	8012ca6 <prvTCPSocketCopy+0x126>
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012ca4:	e000      	b.n	8012ca8 <prvTCPSocketCopy+0x128>
 8012ca6:	2300      	movs	r3, #0
 8012ca8:	9303      	str	r3, [sp, #12]
 8012caa:	683b      	ldr	r3, [r7, #0]
 8012cac:	9302      	str	r3, [sp, #8]
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	9301      	str	r3, [sp, #4]
 8012cb2:	9200      	str	r2, [sp, #0]
 8012cb4:	4623      	mov	r3, r4
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	4810      	ldr	r0, [pc, #64]	@ (8012cfc <prvTCPSocketCopy+0x17c>)
 8012cba:	f00f f91d 	bl	8021ef8 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 8012cbe:	f107 010c 	add.w	r1, r7, #12
 8012cc2:	2301      	movs	r3, #1
 8012cc4:	2218      	movs	r2, #24
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f7fb fccc 	bl	800e664 <vSocketBind>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d008      	beq.n	8012ce4 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8012cd2:	480b      	ldr	r0, [pc, #44]	@ (8012d00 <prvTCPSocketCopy+0x180>)
 8012cd4:	f00f f910 	bl	8021ef8 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7fb fd77 	bl	800e7cc <vSocketClose>
            xResult = pdFALSE;
 8012cde:	2300      	movs	r3, #0
 8012ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ce2:	e001      	b.n	8012ce8 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8012ce4:	2301      	movs	r3, #1
 8012ce6:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8012ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8012cea:	4618      	mov	r0, r3
 8012cec:	372c      	adds	r7, #44	@ 0x2c
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd90      	pop	{r4, r7, pc}
 8012cf2:	bf00      	nop
 8012cf4:	0802632c 	.word	0x0802632c
 8012cf8:	08026330 	.word	0x08026330
 8012cfc:	08026334 	.word	0x08026334
 8012d00:	08026378 	.word	0x08026378

08012d04 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8012d04:	b480      	push	{r7}
 8012d06:	b085      	sub	sp, #20
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	db02      	blt.n	8012d1c <FreeRTOS_GetTCPStateName+0x18>
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	2b0c      	cmp	r3, #12
 8012d1a:	dd04      	ble.n	8012d26 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8012d1c:	230d      	movs	r3, #13
 8012d1e:	60fb      	str	r3, [r7, #12]
                xIndex--;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	3b01      	subs	r3, #1
 8012d24:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8012d26:	4a05      	ldr	r2, [pc, #20]	@ (8012d3c <FreeRTOS_GetTCPStateName+0x38>)
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 8012d2e:	4618      	mov	r0, r3
 8012d30:	3714      	adds	r7, #20
 8012d32:	46bd      	mov	sp, r7
 8012d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d38:	4770      	bx	lr
 8012d3a:	bf00      	nop
 8012d3c:	08027644 	.word	0x08027644

08012d40 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012d40:	b590      	push	{r4, r7, lr}
 8012d42:	b08f      	sub	sp, #60	@ 0x3c
 8012d44:	af02      	add	r7, sp, #8
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8012d4e:	2300      	movs	r3, #0
 8012d50:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8012d52:	2300      	movs	r3, #0
 8012d54:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8012d56:	2300      	movs	r3, #0
 8012d58:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 8012d5a:	2300      	movs	r3, #0
 8012d5c:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	2b00      	cmp	r3, #0
 8012d62:	d008      	beq.n	8012d76 <prvHandleListen_IPV4+0x36>
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d005      	beq.n	8012d76 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8012d6a:	683b      	ldr	r3, [r7, #0]
 8012d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012d74:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8012d76:	6a3b      	ldr	r3, [r7, #32]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d015      	beq.n	8012da8 <prvHandleListen_IPV4+0x68>
 8012d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d7e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8012d82:	6a3b      	ldr	r3, [r7, #32]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d10e      	bne.n	8012da8 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012d8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d8c:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8012d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d96:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8012d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012d9c:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012d9e:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8012da0:	f7ee fdea 	bl	8001978 <ulApplicationGetNextSequenceNumber>
 8012da4:	6278      	str	r0, [r7, #36]	@ 0x24
 8012da6:	e001      	b.n	8012dac <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8012da8:	2300      	movs	r3, #0
 8012daa:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8012dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d059      	beq.n	8012e66 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012db8:	f003 0308 	and.w	r3, r3, #8
 8012dbc:	b2db      	uxtb	r3, r3
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d00c      	beq.n	8012ddc <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012dc6:	687a      	ldr	r2, [r7, #4]
 8012dc8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012dcc:	f043 0304 	orr.w	r3, r3, #4
 8012dd0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	687a      	ldr	r2, [r7, #4]
 8012dd8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8012dda:	e044      	b.n	8012e66 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8012ddc:	2300      	movs	r3, #0
 8012dde:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012dec:	429a      	cmp	r2, r3
 8012dee:	d31b      	bcc.n	8012e28 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012df4:	4619      	mov	r1, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012e04:	4618      	mov	r0, r3
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8012e0c:	2b01      	cmp	r3, #1
 8012e0e:	d101      	bne.n	8012e14 <prvHandleListen_IPV4+0xd4>
 8012e10:	4b5b      	ldr	r3, [pc, #364]	@ (8012f80 <prvHandleListen_IPV4+0x240>)
 8012e12:	e000      	b.n	8012e16 <prvHandleListen_IPV4+0xd6>
 8012e14:	4b5b      	ldr	r3, [pc, #364]	@ (8012f84 <prvHandleListen_IPV4+0x244>)
 8012e16:	9300      	str	r3, [sp, #0]
 8012e18:	4603      	mov	r3, r0
 8012e1a:	485b      	ldr	r0, [pc, #364]	@ (8012f88 <prvHandleListen_IPV4+0x248>)
 8012e1c:	f00f f86c 	bl	8021ef8 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012e20:	6838      	ldr	r0, [r7, #0]
 8012e22:	f001 f9d1 	bl	80141c8 <prvTCPSendReset>
 8012e26:	e01e      	b.n	8012e66 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012e28:	2206      	movs	r2, #6
 8012e2a:	2101      	movs	r1, #1
 8012e2c:	2002      	movs	r0, #2
 8012e2e:	f7fb f8bf 	bl	800dfb0 <FreeRTOS_socket>
 8012e32:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012e34:	697b      	ldr	r3, [r7, #20]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d003      	beq.n	8012e42 <prvHandleListen_IPV4+0x102>
 8012e3a:	697b      	ldr	r3, [r7, #20]
 8012e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e40:	d106      	bne.n	8012e50 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012e42:	4852      	ldr	r0, [pc, #328]	@ (8012f8c <prvHandleListen_IPV4+0x24c>)
 8012e44:	f00f f858 	bl	8021ef8 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012e48:	6838      	ldr	r0, [r7, #0]
 8012e4a:	f001 f9bd 	bl	80141c8 <prvTCPSendReset>
 8012e4e:	e00a      	b.n	8012e66 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012e50:	6879      	ldr	r1, [r7, #4]
 8012e52:	6978      	ldr	r0, [r7, #20]
 8012e54:	f7ff fe94 	bl	8012b80 <prvTCPSocketCopy>
 8012e58:	4603      	mov	r3, r0
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d003      	beq.n	8012e66 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 8012e5e:	697b      	ldr	r3, [r7, #20]
 8012e60:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012e62:	2301      	movs	r3, #1
 8012e64:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	f000 8083 	beq.w	8012f74 <prvHandleListen_IPV4+0x234>
 8012e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d07f      	beq.n	8012f74 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012e74:	683b      	ldr	r3, [r7, #0]
 8012e76:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012e78:	6838      	ldr	r0, [r7, #0]
 8012e7a:	f7f6 ff85 	bl	8009d88 <uxIPHeaderSizePacket>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012e82:	4423      	add	r3, r4
 8012e84:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012e86:	683b      	ldr	r3, [r7, #0]
 8012e88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012e8c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 8012e8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012e90:	7a13      	ldrb	r3, [r2, #8]
 8012e92:	f36f 0300 	bfc	r3, #0, #1
 8012e96:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 8012e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012e9a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012e9c:	b29b      	uxth	r3, r3
 8012e9e:	021b      	lsls	r3, r3, #8
 8012ea0:	b21a      	sxth	r2, r3
 8012ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ea4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	0a1b      	lsrs	r3, r3, #8
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	b21b      	sxth	r3, r3
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	b21b      	sxth	r3, r3
 8012eb2:	b29a      	uxth	r2, r3
 8012eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eb6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 8012eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ebc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012ec0:	061a      	lsls	r2, r3, #24
 8012ec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ec4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012ec8:	021b      	lsls	r3, r3, #8
 8012eca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012ece:	431a      	orrs	r2, r3
 8012ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ed2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012ed6:	0a1b      	lsrs	r3, r3, #8
 8012ed8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012edc:	431a      	orrs	r2, r3
 8012ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ee0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012ee4:	0e1b      	lsrs	r3, r3, #24
 8012ee6:	431a      	orrs	r2, r3
 8012ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eea:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012ef0:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012ef4:	693b      	ldr	r3, [r7, #16]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	061a      	lsls	r2, r3, #24
 8012efa:	693b      	ldr	r3, [r7, #16]
 8012efc:	685b      	ldr	r3, [r3, #4]
 8012efe:	021b      	lsls	r3, r3, #8
 8012f00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f04:	431a      	orrs	r2, r3
 8012f06:	693b      	ldr	r3, [r7, #16]
 8012f08:	685b      	ldr	r3, [r3, #4]
 8012f0a:	0a1b      	lsrs	r3, r3, #8
 8012f0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f10:	431a      	orrs	r2, r3
 8012f12:	693b      	ldr	r3, [r7, #16]
 8012f14:	685b      	ldr	r3, [r3, #4]
 8012f16:	0e1b      	lsrs	r3, r3, #24
 8012f18:	431a      	orrs	r2, r3
 8012f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f1c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012f20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f22:	f002 f877 	bl	8015014 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012f26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f28:	f000 fb66 	bl	80135f8 <prvTCPCreateWindow>
 8012f2c:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	2b01      	cmp	r3, #1
 8012f32:	d008      	beq.n	8012f46 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	2b01      	cmp	r3, #1
 8012f38:	d102      	bne.n	8012f40 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 8012f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f3c:	f7fb fc46 	bl	800e7cc <vSocketClose>
                }

                pxReturn = NULL;
 8012f40:	2300      	movs	r3, #0
 8012f42:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012f44:	e016      	b.n	8012f74 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012f46:	2103      	movs	r1, #3
 8012f48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012f4a:	f7fd ffc9 	bl	8010ee0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f52:	2b5a      	cmp	r3, #90	@ 0x5a
 8012f54:	d902      	bls.n	8012f5c <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012f56:	235a      	movs	r3, #90	@ 0x5a
 8012f58:	61bb      	str	r3, [r7, #24]
 8012f5a:	e002      	b.n	8012f62 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012f60:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f64:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012f6c:	69ba      	ldr	r2, [r7, #24]
 8012f6e:	4619      	mov	r1, r3
 8012f70:	f00f f9de 	bl	8022330 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3734      	adds	r7, #52	@ 0x34
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd90      	pop	{r4, r7, pc}
 8012f7e:	bf00      	nop
 8012f80:	08026420 	.word	0x08026420
 8012f84:	08026424 	.word	0x08026424
 8012f88:	08026428 	.word	0x08026428
 8012f8c:	08026458 	.word	0x08026458

08012f90 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012f90:	b590      	push	{r4, r7, lr}
 8012f92:	b08f      	sub	sp, #60	@ 0x3c
 8012f94:	af02      	add	r7, sp, #8
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8012f9a:	2300      	movs	r3, #0
 8012f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8012f9e:	2300      	movs	r3, #0
 8012fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 8012faa:	2300      	movs	r3, #0
 8012fac:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d024      	beq.n	8012ffe <prvHandleListen_IPV6+0x6e>
 8012fb4:	683b      	ldr	r3, [r7, #0]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d021      	beq.n	8012ffe <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8012fc0:	683b      	ldr	r3, [r7, #0]
 8012fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d103      	bne.n	8012fd0 <prvHandleListen_IPV6+0x40>
 8012fc8:	215d      	movs	r1, #93	@ 0x5d
 8012fca:	487b      	ldr	r0, [pc, #492]	@ (80131b8 <prvHandleListen_IPV6+0x228>)
 8012fcc:	f7ee fcb4 	bl	8001938 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 8012fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012fd2:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8012fd6:	683b      	ldr	r3, [r7, #0]
 8012fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fda:	3338      	adds	r3, #56	@ 0x38
 8012fdc:	2210      	movs	r2, #16
 8012fde:	4619      	mov	r1, r3
 8012fe0:	f010 f93b 	bl	802325a <memcmp>
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d109      	bne.n	8012ffe <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 8012fea:	f107 0308 	add.w	r3, r7, #8
 8012fee:	4618      	mov	r0, r3
 8012ff0:	f7ee fd6c 	bl	8001acc <xApplicationGetRandomNumber>
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d101      	bne.n	8012ffe <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 8012ffa:	2301      	movs	r3, #1
 8012ffc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 8012ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013000:	2b00      	cmp	r3, #0
 8013002:	d059      	beq.n	80130b8 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801300a:	f003 0308 	and.w	r3, r3, #8
 801300e:	b2db      	uxtb	r3, r3
 8013010:	2b00      	cmp	r3, #0
 8013012:	d00c      	beq.n	801302e <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8013018:	687a      	ldr	r2, [r7, #4]
 801301a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801301e:	f043 0304 	orr.w	r3, r3, #4
 8013022:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801302c:	e044      	b.n	80130b8 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801302e:	2300      	movs	r3, #0
 8013030:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801303e:	429a      	cmp	r2, r3
 8013040:	d31b      	bcc.n	801307a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013046:	4619      	mov	r1, r3
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801304e:	461a      	mov	r2, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8013056:	4618      	mov	r0, r3
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801305e:	2b01      	cmp	r3, #1
 8013060:	d101      	bne.n	8013066 <prvHandleListen_IPV6+0xd6>
 8013062:	4b56      	ldr	r3, [pc, #344]	@ (80131bc <prvHandleListen_IPV6+0x22c>)
 8013064:	e000      	b.n	8013068 <prvHandleListen_IPV6+0xd8>
 8013066:	4b56      	ldr	r3, [pc, #344]	@ (80131c0 <prvHandleListen_IPV6+0x230>)
 8013068:	9300      	str	r3, [sp, #0]
 801306a:	4603      	mov	r3, r0
 801306c:	4855      	ldr	r0, [pc, #340]	@ (80131c4 <prvHandleListen_IPV6+0x234>)
 801306e:	f00e ff43 	bl	8021ef8 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8013072:	6838      	ldr	r0, [r7, #0]
 8013074:	f001 f8a8 	bl	80141c8 <prvTCPSendReset>
 8013078:	e01e      	b.n	80130b8 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 801307a:	2206      	movs	r2, #6
 801307c:	2101      	movs	r1, #1
 801307e:	200a      	movs	r0, #10
 8013080:	f7fa ff96 	bl	800dfb0 <FreeRTOS_socket>
 8013084:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8013086:	69bb      	ldr	r3, [r7, #24]
 8013088:	2b00      	cmp	r3, #0
 801308a:	d003      	beq.n	8013094 <prvHandleListen_IPV6+0x104>
 801308c:	69bb      	ldr	r3, [r7, #24]
 801308e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013092:	d106      	bne.n	80130a2 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8013094:	484c      	ldr	r0, [pc, #304]	@ (80131c8 <prvHandleListen_IPV6+0x238>)
 8013096:	f00e ff2f 	bl	8021ef8 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801309a:	6838      	ldr	r0, [r7, #0]
 801309c:	f001 f894 	bl	80141c8 <prvTCPSendReset>
 80130a0:	e00a      	b.n	80130b8 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80130a2:	6879      	ldr	r1, [r7, #4]
 80130a4:	69b8      	ldr	r0, [r7, #24]
 80130a6:	f7ff fd6b 	bl	8012b80 <prvTCPSocketCopy>
 80130aa:	4603      	mov	r3, r0
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d003      	beq.n	80130b8 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 80130b4:	2301      	movs	r3, #1
 80130b6:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 80130b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d076      	beq.n	80131ac <prvHandleListen_IPV6+0x21c>
 80130be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d073      	beq.n	80131ac <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80130c4:	683b      	ldr	r3, [r7, #0]
 80130c6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80130c8:	6838      	ldr	r0, [r7, #0]
 80130ca:	f7f6 fe5d 	bl	8009d88 <uxIPHeaderSizePacket>
 80130ce:	4603      	mov	r3, r0
 80130d0:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80130d2:	4423      	add	r3, r4
 80130d4:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80130da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130dc:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 80130de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130e0:	7a13      	ldrb	r3, [r2, #8]
 80130e2:	f043 0301 	orr.w	r3, r3, #1
 80130e6:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80130e8:	683b      	ldr	r3, [r7, #0]
 80130ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130ec:	330e      	adds	r3, #14
 80130ee:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 80130f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	021b      	lsls	r3, r3, #8
 80130f8:	b21a      	sxth	r2, r3
 80130fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80130fe:	b29b      	uxth	r3, r3
 8013100:	0a1b      	lsrs	r3, r3, #8
 8013102:	b29b      	uxth	r3, r3
 8013104:	b21b      	sxth	r3, r3
 8013106:	4313      	orrs	r3, r2
 8013108:	b21b      	sxth	r3, r3
 801310a:	b29a      	uxth	r2, r3
 801310c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801310e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013114:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8013118:	693b      	ldr	r3, [r7, #16]
 801311a:	3308      	adds	r3, #8
 801311c:	2210      	movs	r2, #16
 801311e:	4619      	mov	r1, r3
 8013120:	f00f f906 	bl	8022330 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013124:	68ba      	ldr	r2, [r7, #8]
 8013126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013128:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	061a      	lsls	r2, r3, #24
 8013132:	697b      	ldr	r3, [r7, #20]
 8013134:	685b      	ldr	r3, [r3, #4]
 8013136:	021b      	lsls	r3, r3, #8
 8013138:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801313c:	431a      	orrs	r2, r3
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	0a1b      	lsrs	r3, r3, #8
 8013144:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013148:	431a      	orrs	r2, r3
 801314a:	697b      	ldr	r3, [r7, #20]
 801314c:	685b      	ldr	r3, [r3, #4]
 801314e:	0e1b      	lsrs	r3, r3, #24
 8013150:	431a      	orrs	r2, r3
 8013152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013154:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8013158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801315a:	f001 ff5b 	bl	8015014 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 801315e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013160:	f000 fa4a 	bl	80135f8 <prvTCPCreateWindow>
 8013164:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	2b01      	cmp	r3, #1
 801316a:	d008      	beq.n	801317e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 801316c:	6a3b      	ldr	r3, [r7, #32]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d102      	bne.n	8013178 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8013172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013174:	f7fb fb2a 	bl	800e7cc <vSocketClose>
                }

                pxReturn = NULL;
 8013178:	2300      	movs	r3, #0
 801317a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 801317c:	e016      	b.n	80131ac <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 801317e:	2103      	movs	r1, #3
 8013180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013182:	f7fd fead 	bl	8010ee0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801318a:	2b5a      	cmp	r3, #90	@ 0x5a
 801318c:	d902      	bls.n	8013194 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 801318e:	235a      	movs	r3, #90	@ 0x5a
 8013190:	61fb      	str	r3, [r7, #28]
 8013192:	e002      	b.n	801319a <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013198:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801319a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801319c:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80131a4:	69fa      	ldr	r2, [r7, #28]
 80131a6:	4619      	mov	r1, r3
 80131a8:	f00f f8c2 	bl	8022330 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80131ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3734      	adds	r7, #52	@ 0x34
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd90      	pop	{r4, r7, pc}
 80131b6:	bf00      	nop
 80131b8:	08026478 	.word	0x08026478
 80131bc:	080264b8 	.word	0x080264b8
 80131c0:	080264bc 	.word	0x080264bc
 80131c4:	080264c0 	.word	0x080264c0
 80131c8:	080264f0 	.word	0x080264f0

080131cc <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 80131cc:	b580      	push	{r7, lr}
 80131ce:	b084      	sub	sp, #16
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 80131d4:	2301      	movs	r3, #1
 80131d6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80131de:	f003 0308 	and.w	r3, r3, #8
 80131e2:	b2db      	uxtb	r3, r3
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d107      	bne.n	80131f8 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f000 fa51 	bl	8013690 <prvTCPPrepareConnect>
 80131ee:	4603      	mov	r3, r0
 80131f0:	2b01      	cmp	r3, #1
 80131f2:	d001      	beq.n	80131f8 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 80131f4:	2300      	movs	r3, #0
 80131f6:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 80131f8:	68fb      	ldr	r3, [r7, #12]
    }
 80131fa:	4618      	mov	r0, r3
 80131fc:	3710      	adds	r7, #16
 80131fe:	46bd      	mov	sp, r7
 8013200:	bd80      	pop	{r7, pc}
	...

08013204 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8013204:	b580      	push	{r7, lr}
 8013206:	b088      	sub	sp, #32
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 801320c:	2300      	movs	r3, #0
 801320e:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8013210:	2300      	movs	r3, #0
 8013212:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801321a:	2b02      	cmp	r3, #2
 801321c:	d010      	beq.n	8013240 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 801321e:	2300      	movs	r3, #0
 8013220:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8013222:	f107 030c 	add.w	r3, r7, #12
 8013226:	4619      	mov	r1, r3
 8013228:	6878      	ldr	r0, [r7, #4]
 801322a:	f000 f859 	bl	80132e0 <prvTCPSendRepeated>
 801322e:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d04d      	beq.n	80132d2 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	4618      	mov	r0, r3
 801323a:	f003 ffb5 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
 801323e:	e048      	b.n	80132d2 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013246:	2b02      	cmp	r3, #2
 8013248:	d90d      	bls.n	8013266 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013254:	461a      	mov	r2, r3
 8013256:	4821      	ldr	r0, [pc, #132]	@ (80132dc <prvTCPSendPacket+0xd8>)
 8013258:	f00e fe4e 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 801325c:	2108      	movs	r1, #8
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f7fd fe3e 	bl	8010ee0 <vTCPStateChange>
 8013264:	e035      	b.n	80132d2 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f7ff ffb0 	bl	80131cc <prvTCPMakeSurePrepared>
 801326c:	4603      	mov	r3, r0
 801326e:	2b01      	cmp	r3, #1
 8013270:	d12f      	bne.n	80132d2 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7f6 fda2 	bl	8009dbc <uxIPHeaderSizeSocket>
 8013278:	4603      	mov	r3, r0
 801327a:	330e      	adds	r3, #14
 801327c:	33a0      	adds	r3, #160	@ 0xa0
 801327e:	687a      	ldr	r2, [r7, #4]
 8013280:	4413      	add	r3, r2
 8013282:	330a      	adds	r3, #10
 8013284:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8013286:	697b      	ldr	r3, [r7, #20]
 8013288:	4619      	mov	r1, r3
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f000 fa4c 	bl	8013728 <prvSetSynAckOptions>
 8013290:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013292:	6878      	ldr	r0, [r7, #4]
 8013294:	f7f6 fd92 	bl	8009dbc <uxIPHeaderSizeSocket>
 8013298:	4602      	mov	r2, r0
 801329a:	693b      	ldr	r3, [r7, #16]
 801329c:	4413      	add	r3, r2
 801329e:	3314      	adds	r3, #20
 80132a0:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 80132a2:	69bb      	ldr	r3, [r7, #24]
 80132a4:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80132a6:	693b      	ldr	r3, [r7, #16]
 80132a8:	b2db      	uxtb	r3, r3
 80132aa:	3314      	adds	r3, #20
 80132ac:	b2db      	uxtb	r3, r3
 80132ae:	009b      	lsls	r3, r3, #2
 80132b0:	b2da      	uxtb	r2, r3
 80132b2:	697b      	ldr	r3, [r7, #20]
 80132b4:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80132bc:	3301      	adds	r3, #1
 80132be:	b2da      	uxtb	r2, r3
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 80132c6:	69fa      	ldr	r2, [r7, #28]
 80132c8:	2300      	movs	r3, #0
 80132ca:	2100      	movs	r1, #0
 80132cc:	6878      	ldr	r0, [r7, #4]
 80132ce:	f000 f837 	bl	8013340 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 80132d2:	69fb      	ldr	r3, [r7, #28]
    }
 80132d4:	4618      	mov	r0, r3
 80132d6:	3720      	adds	r7, #32
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	08026510 	.word	0x08026510

080132e0 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b086      	sub	sp, #24
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 80132ea:	2300      	movs	r3, #0
 80132ec:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 80132ee:	2300      	movs	r3, #0
 80132f0:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 80132f2:	2300      	movs	r3, #0
 80132f4:	617b      	str	r3, [r7, #20]
 80132f6:	e019      	b.n	801332c <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 80132f8:	68fa      	ldr	r2, [r7, #12]
 80132fa:	6839      	ldr	r1, [r7, #0]
 80132fc:	6878      	ldr	r0, [r7, #4]
 80132fe:	f000 fb7d 	bl	80139fc <prvTCPPrepareSend>
 8013302:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8013304:	68bb      	ldr	r3, [r7, #8]
 8013306:	2b00      	cmp	r3, #0
 8013308:	dd14      	ble.n	8013334 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 801330a:	683b      	ldr	r3, [r7, #0]
 801330c:	6819      	ldr	r1, [r3, #0]
 801330e:	68ba      	ldr	r2, [r7, #8]
 8013310:	2301      	movs	r3, #1
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 f814 	bl	8013340 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	2200      	movs	r2, #0
 801331c:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 801331e:	693a      	ldr	r2, [r7, #16]
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	4413      	add	r3, r2
 8013324:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8013326:	697b      	ldr	r3, [r7, #20]
 8013328:	3301      	adds	r3, #1
 801332a:	617b      	str	r3, [r7, #20]
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	2b07      	cmp	r3, #7
 8013330:	d9e2      	bls.n	80132f8 <prvTCPSendRepeated+0x18>
 8013332:	e000      	b.n	8013336 <prvTCPSendRepeated+0x56>
                break;
 8013334:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8013336:	693b      	ldr	r3, [r7, #16]
    }
 8013338:	4618      	mov	r0, r3
 801333a:	3718      	adds	r7, #24
 801333c:	46bd      	mov	sp, r7
 801333e:	bd80      	pop	{r7, pc}

08013340 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8013340:	b580      	push	{r7, lr}
 8013342:	b086      	sub	sp, #24
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	607a      	str	r2, [r7, #4]
 801334c:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8013352:	2300      	movs	r3, #0
 8013354:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8013356:	693b      	ldr	r3, [r7, #16]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d008      	beq.n	801336e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 801335c:	6938      	ldr	r0, [r7, #16]
 801335e:	f7f6 fd13 	bl	8009d88 <uxIPHeaderSizePacket>
 8013362:	4603      	mov	r3, r0
 8013364:	2b28      	cmp	r3, #40	@ 0x28
 8013366:	d113      	bne.n	8013390 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013368:	2301      	movs	r3, #1
 801336a:	617b      	str	r3, [r7, #20]
 801336c:	e010      	b.n	8013390 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d008      	beq.n	8013386 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f7f6 fd21 	bl	8009dbc <uxIPHeaderSizeSocket>
 801337a:	4603      	mov	r3, r0
 801337c:	2b28      	cmp	r3, #40	@ 0x28
 801337e:	d107      	bne.n	8013390 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8013380:	2301      	movs	r3, #1
 8013382:	617b      	str	r3, [r7, #20]
 8013384:	e004      	b.n	8013390 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8013386:	f240 1119 	movw	r1, #281	@ 0x119
 801338a:	480c      	ldr	r0, [pc, #48]	@ (80133bc <prvTCPReturnPacket+0x7c>)
 801338c:	f7ee fad4 	bl	8001938 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 8013390:	697b      	ldr	r3, [r7, #20]
 8013392:	2b01      	cmp	r3, #1
 8013394:	d105      	bne.n	80133a2 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 8013396:	683b      	ldr	r3, [r7, #0]
 8013398:	687a      	ldr	r2, [r7, #4]
 801339a:	68b9      	ldr	r1, [r7, #8]
 801339c:	68f8      	ldr	r0, [r7, #12]
 801339e:	f001 fa61 	bl	8014864 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 80133a2:	697b      	ldr	r3, [r7, #20]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d105      	bne.n	80133b4 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	687a      	ldr	r2, [r7, #4]
 80133ac:	68b9      	ldr	r1, [r7, #8]
 80133ae:	68f8      	ldr	r0, [r7, #12]
 80133b0:	f000 ff18 	bl	80141e4 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 80133b4:	bf00      	nop
 80133b6:	3718      	adds	r7, #24
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	0802652c 	.word	0x0802652c

080133c0 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 80133c0:	b580      	push	{r7, lr}
 80133c2:	b08a      	sub	sp, #40	@ 0x28
 80133c4:	af00      	add	r7, sp, #0
 80133c6:	60f8      	str	r0, [r7, #12]
 80133c8:	60b9      	str	r1, [r7, #8]
 80133ca:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80133d2:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 80133d4:	68bb      	ldr	r3, [r7, #8]
 80133d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80133dc:	4413      	add	r3, r2
 80133de:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d007      	beq.n	80133fa <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80133f0:	4618      	mov	r0, r3
 80133f2:	f7fd fa9f 	bl	8010934 <uxStreamBufferFrontSpace>
 80133f6:	6278      	str	r0, [r7, #36]	@ 0x24
 80133f8:	e003      	b.n	8013402 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 80133fa:	68fb      	ldr	r3, [r7, #12]
 80133fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013400:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	685b      	ldr	r3, [r3, #4]
 8013406:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013408:	4618      	mov	r0, r3
 801340a:	f7f7 fa0b 	bl	800a824 <FreeRTOS_min_uint32>
 801340e:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8013410:	68fb      	ldr	r3, [r7, #12]
 8013412:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013416:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801341a:	b2db      	uxtb	r3, r3
 801341c:	2b00      	cmp	r3, #0
 801341e:	d107      	bne.n	8013430 <prvTCPReturn_CheckTCPWindow+0x70>
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8013426:	f003 0304 	and.w	r3, r3, #4
 801342a:	b2db      	uxtb	r3, r3
 801342c:	2b00      	cmp	r3, #0
 801342e:	d001      	beq.n	8013434 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8013430:	2300      	movs	r3, #0
 8013432:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801343a:	461a      	mov	r2, r3
 801343c:	6a3b      	ldr	r3, [r7, #32]
 801343e:	4293      	cmp	r3, r2
 8013440:	d20a      	bcs.n	8013458 <prvTCPReturn_CheckTCPWindow+0x98>
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013448:	461a      	mov	r2, r3
 801344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801344c:	4293      	cmp	r3, r2
 801344e:	d303      	bcc.n	8013458 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013456:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 801345e:	461a      	mov	r2, r3
 8013460:	6a3b      	ldr	r3, [r7, #32]
 8013462:	40d3      	lsrs	r3, r2
 8013464:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801346c:	4293      	cmp	r3, r2
 801346e:	d902      	bls.n	8013476 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8013470:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8013474:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8013476:	69fb      	ldr	r3, [r7, #28]
 8013478:	b29b      	uxth	r3, r3
 801347a:	021b      	lsls	r3, r3, #8
 801347c:	b21a      	sxth	r2, r3
 801347e:	69fb      	ldr	r3, [r7, #28]
 8013480:	b29b      	uxth	r3, r3
 8013482:	0a1b      	lsrs	r3, r3, #8
 8013484:	b29b      	uxth	r3, r3
 8013486:	b21b      	sxth	r3, r3
 8013488:	4313      	orrs	r3, r2
 801348a:	b21b      	sxth	r3, r3
 801348c:	b29a      	uxth	r2, r3
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013498:	f36f 0300 	bfc	r3, #0, #1
 801349c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 80134a0:	69bb      	ldr	r3, [r7, #24]
 80134a2:	691a      	ldr	r2, [r3, #16]
 80134a4:	6a3b      	ldr	r3, [r7, #32]
 80134a6:	441a      	add	r2, r3
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 80134ac:	bf00      	nop
 80134ae:	3728      	adds	r7, #40	@ 0x28
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b088      	sub	sp, #32
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	60f8      	str	r0, [r7, #12]
 80134bc:	60b9      	str	r1, [r7, #8]
 80134be:	607a      	str	r2, [r7, #4]
 80134c0:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80134c2:	68fb      	ldr	r3, [r7, #12]
 80134c4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80134c8:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 80134ca:	68bb      	ldr	r3, [r7, #8]
 80134cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80134d2:	4413      	add	r3, r2
 80134d4:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 80134d6:	68fb      	ldr	r3, [r7, #12]
 80134d8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80134dc:	f003 0302 	and.w	r3, r3, #2
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d029      	beq.n	801353a <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80134e6:	68fa      	ldr	r2, [r7, #12]
 80134e8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80134ec:	f36f 0341 	bfc	r3, #1, #1
 80134f0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 80134f4:	68fa      	ldr	r2, [r7, #12]
 80134f6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80134fa:	f043 0304 	orr.w	r3, r3, #4
 80134fe:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8013502:	68fb      	ldr	r3, [r7, #12]
 8013504:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013508:	1e5a      	subs	r2, r3, #1
 801350a:	69bb      	ldr	r3, [r7, #24]
 801350c:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 801350e:	69bb      	ldr	r3, [r7, #24]
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	061a      	lsls	r2, r3, #24
 8013514:	69bb      	ldr	r3, [r7, #24]
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	021b      	lsls	r3, r3, #8
 801351a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801351e:	431a      	orrs	r2, r3
 8013520:	69bb      	ldr	r3, [r7, #24]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	0a1b      	lsrs	r3, r3, #8
 8013526:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801352a:	431a      	orrs	r2, r3
 801352c:	69bb      	ldr	r3, [r7, #24]
 801352e:	685b      	ldr	r3, [r3, #4]
 8013530:	0e1b      	lsrs	r3, r3, #24
 8013532:	431a      	orrs	r2, r3
 8013534:	69bb      	ldr	r3, [r7, #24]
 8013536:	605a      	str	r2, [r3, #4]
 8013538:	e043      	b.n	80135c2 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013540:	061a      	lsls	r2, r3, #24
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013548:	021b      	lsls	r3, r3, #8
 801354a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801354e:	431a      	orrs	r2, r3
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013556:	0a1b      	lsrs	r3, r3, #8
 8013558:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801355c:	431a      	orrs	r2, r3
 801355e:	68fb      	ldr	r3, [r7, #12]
 8013560:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8013564:	0e1b      	lsrs	r3, r3, #24
 8013566:	431a      	orrs	r2, r3
 8013568:	69bb      	ldr	r3, [r7, #24]
 801356a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 801356c:	69bb      	ldr	r3, [r7, #24]
 801356e:	7b5b      	ldrb	r3, [r3, #13]
 8013570:	f003 0301 	and.w	r3, r3, #1
 8013574:	2b00      	cmp	r3, #0
 8013576:	d024      	beq.n	80135c2 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8013578:	68f8      	ldr	r0, [r7, #12]
 801357a:	f7f6 fc1f 	bl	8009dbc <uxIPHeaderSizeSocket>
 801357e:	4602      	mov	r2, r0
 8013580:	683b      	ldr	r3, [r7, #0]
 8013582:	1a9b      	subs	r3, r3, r2
 8013584:	3b14      	subs	r3, #20
 8013586:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8013588:	69fb      	ldr	r3, [r7, #28]
 801358a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801358c:	697b      	ldr	r3, [r7, #20]
 801358e:	441a      	add	r2, r3
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013594:	429a      	cmp	r2, r3
 8013596:	d014      	beq.n	80135c2 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	7b5b      	ldrb	r3, [r3, #13]
 801359c:	f023 0301 	bic.w	r3, r3, #1
 80135a0:	b2da      	uxtb	r2, r3
 80135a2:	69bb      	ldr	r3, [r7, #24]
 80135a4:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 80135a6:	69fb      	ldr	r3, [r7, #28]
 80135a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	69db      	ldr	r3, [r3, #28]
 80135ae:	1ad1      	subs	r1, r2, r3
 80135b0:	69fb      	ldr	r3, [r7, #28]
 80135b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	69db      	ldr	r3, [r3, #28]
 80135b8:	1ad3      	subs	r3, r2, r3
 80135ba:	697a      	ldr	r2, [r7, #20]
 80135bc:	480d      	ldr	r0, [pc, #52]	@ (80135f4 <prvTCPReturn_SetSequenceNumber+0x140>)
 80135be:	f00e fc9b 	bl	8021ef8 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 80135c2:	69fb      	ldr	r3, [r7, #28]
 80135c4:	691b      	ldr	r3, [r3, #16]
 80135c6:	061a      	lsls	r2, r3, #24
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	691b      	ldr	r3, [r3, #16]
 80135cc:	021b      	lsls	r3, r3, #8
 80135ce:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80135d2:	431a      	orrs	r2, r3
 80135d4:	69fb      	ldr	r3, [r7, #28]
 80135d6:	691b      	ldr	r3, [r3, #16]
 80135d8:	0a1b      	lsrs	r3, r3, #8
 80135da:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80135de:	431a      	orrs	r2, r3
 80135e0:	69fb      	ldr	r3, [r7, #28]
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	0e1b      	lsrs	r3, r3, #24
 80135e6:	431a      	orrs	r2, r3
 80135e8:	69bb      	ldr	r3, [r7, #24]
 80135ea:	609a      	str	r2, [r3, #8]
    }
 80135ec:	bf00      	nop
 80135ee:	3720      	adds	r7, #32
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}
 80135f4:	08026568 	.word	0x08026568

080135f8 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 80135f8:	b5b0      	push	{r4, r5, r7, lr}
 80135fa:	b088      	sub	sp, #32
 80135fc:	af02      	add	r7, sp, #8
 80135fe:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8013606:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801360e:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8013610:	4b1d      	ldr	r3, [pc, #116]	@ (8013688 <prvTCPCreateWindow+0x90>)
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d014      	beq.n	8013642 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801361e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013622:	fb02 f103 	mul.w	r1, r2, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013638:	9300      	str	r3, [sp, #0]
 801363a:	4603      	mov	r3, r0
 801363c:	4813      	ldr	r0, [pc, #76]	@ (801368c <prvTCPCreateWindow+0x94>)
 801363e:	f00e fc5b 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801364e:	fb02 f103 	mul.w	r1, r2, r3
 8013652:	693b      	ldr	r3, [r7, #16]
 8013654:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8013658:	fb02 f403 	mul.w	r4, r2, r3
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8013668:	687a      	ldr	r2, [r7, #4]
 801366a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 801366e:	9201      	str	r2, [sp, #4]
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	462b      	mov	r3, r5
 8013674:	4622      	mov	r2, r4
 8013676:	f001 ffd7 	bl	8015628 <xTCPWindowCreate>
 801367a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 801367c:	68fb      	ldr	r3, [r7, #12]
    }
 801367e:	4618      	mov	r0, r3
 8013680:	3718      	adds	r7, #24
 8013682:	46bd      	mov	sp, r7
 8013684:	bdb0      	pop	{r4, r5, r7, pc}
 8013686:	bf00      	nop
 8013688:	200015c4 	.word	0x200015c4
 801368c:	08026588 	.word	0x08026588

08013690 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8013690:	b580      	push	{r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af00      	add	r7, sp, #0
 8013696:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8013698:	2301      	movs	r3, #1
 801369a:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	7a1b      	ldrb	r3, [r3, #8]
 80136a0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80136a4:	b2db      	uxtb	r3, r3
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d002      	beq.n	80136b0 <prvTCPPrepareConnect+0x20>
 80136aa:	2b01      	cmp	r3, #1
 80136ac:	d005      	beq.n	80136ba <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80136ae:	e009      	b.n	80136c4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f000 ff69 	bl	8014588 <prvTCPPrepareConnect_IPV4>
 80136b6:	60f8      	str	r0, [r7, #12]
                    break;
 80136b8:	e004      	b.n	80136c4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 80136ba:	6878      	ldr	r0, [r7, #4]
 80136bc:	f001 fab4 	bl	8014c28 <prvTCPPrepareConnect_IPV6>
 80136c0:	60f8      	str	r0, [r7, #12]
                    break;
 80136c2:	bf00      	nop
        }

        return xReturn;
 80136c4:	68fb      	ldr	r3, [r7, #12]
    }
 80136c6:	4618      	mov	r0, r3
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
	...

080136d0 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 80136e4:	fb02 f303 	mul.w	r3, r2, r3
 80136e8:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 80136ea:	2300      	movs	r3, #0
 80136ec:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 80136ee:	e005      	b.n	80136fc <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	085b      	lsrs	r3, r3, #1
 80136f4:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 80136f6:	7afb      	ldrb	r3, [r7, #11]
 80136f8:	3301      	adds	r3, #1
 80136fa:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 80136fc:	68fb      	ldr	r3, [r7, #12]
 80136fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013702:	d2f5      	bcs.n	80136f0 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013710:	461a      	mov	r2, r3
 8013712:	7afb      	ldrb	r3, [r7, #11]
 8013714:	4803      	ldr	r0, [pc, #12]	@ (8013724 <prvWinScaleFactor+0x54>)
 8013716:	f00e fbef 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 801371a:	7afb      	ldrb	r3, [r7, #11]
        }
 801371c:	4618      	mov	r0, r3
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}
 8013724:	080265c0 	.word	0x080265c0

08013728 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013738:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 801373a:	683b      	ldr	r3, [r7, #0]
 801373c:	2202      	movs	r2, #2
 801373e:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8013740:	683b      	ldr	r3, [r7, #0]
 8013742:	2204      	movs	r2, #4
 8013744:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8013746:	89fb      	ldrh	r3, [r7, #14]
 8013748:	0a1b      	lsrs	r3, r3, #8
 801374a:	b29b      	uxth	r3, r3
 801374c:	b2da      	uxtb	r2, r3
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8013752:	89fb      	ldrh	r3, [r7, #14]
 8013754:	b2da      	uxtb	r2, r3
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f7ff ffb8 	bl	80136d0 <prvWinScaleFactor>
 8013760:	4603      	mov	r3, r0
 8013762:	461a      	mov	r2, r3
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	2201      	movs	r2, #1
 801376e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	2203      	movs	r2, #3
 8013774:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8013776:	683b      	ldr	r3, [r7, #0]
 8013778:	2203      	movs	r2, #3
 801377a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8013786:	2308      	movs	r3, #8
 8013788:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 801378a:	683a      	ldr	r2, [r7, #0]
 801378c:	68bb      	ldr	r3, [r7, #8]
 801378e:	4413      	add	r3, r2
 8013790:	3314      	adds	r3, #20
 8013792:	2201      	movs	r2, #1
 8013794:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8013796:	68bb      	ldr	r3, [r7, #8]
 8013798:	3301      	adds	r3, #1
 801379a:	683a      	ldr	r2, [r7, #0]
 801379c:	4413      	add	r3, r2
 801379e:	2201      	movs	r2, #1
 80137a0:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	3302      	adds	r3, #2
 80137a6:	683a      	ldr	r2, [r7, #0]
 80137a8:	4413      	add	r3, r2
 80137aa:	2204      	movs	r2, #4
 80137ac:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 80137ae:	68bb      	ldr	r3, [r7, #8]
 80137b0:	3303      	adds	r3, #3
 80137b2:	683a      	ldr	r2, [r7, #0]
 80137b4:	4413      	add	r3, r2
 80137b6:	2202      	movs	r2, #2
 80137b8:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 80137ba:	68bb      	ldr	r3, [r7, #8]
 80137bc:	3304      	adds	r3, #4
 80137be:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 80137c0:	68bb      	ldr	r3, [r7, #8]
    }
 80137c2:	4618      	mov	r0, r3
 80137c4:	3710      	adds	r7, #16
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
	...

080137cc <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b088      	sub	sp, #32
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	60b9      	str	r1, [r7, #8]
 80137d6:	607a      	str	r2, [r7, #4]
 80137d8:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 80137da:	4b38      	ldr	r3, [pc, #224]	@ (80138bc <prvTCPBufferResize+0xf0>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d00b      	beq.n	80137fa <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 80137e2:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 80137e6:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 80137e8:	68bb      	ldr	r3, [r7, #8]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d102      	bne.n	80137f4 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 80137ee:	2301      	movs	r3, #1
 80137f0:	617b      	str	r3, [r7, #20]
 80137f2:	e020      	b.n	8013836 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 80137f4:	2300      	movs	r3, #0
 80137f6:	617b      	str	r3, [r7, #20]
 80137f8:	e01d      	b.n	8013836 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80137fa:	68f8      	ldr	r0, [r7, #12]
 80137fc:	f7f6 fade 	bl	8009dbc <uxIPHeaderSizeSocket>
 8013800:	4602      	mov	r2, r0
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	4413      	add	r3, r2
 8013806:	3322      	adds	r3, #34	@ 0x22
 8013808:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	69ba      	ldr	r2, [r7, #24]
 801380e:	4413      	add	r3, r2
 8013810:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8013812:	69bb      	ldr	r3, [r7, #24]
 8013814:	2b59      	cmp	r3, #89	@ 0x59
 8013816:	d801      	bhi.n	801381c <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013818:	235a      	movs	r3, #90	@ 0x5a
 801381a:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 801381c:	68bb      	ldr	r3, [r7, #8]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d004      	beq.n	801382c <prvTCPBufferResize+0x60>
 8013822:	68bb      	ldr	r3, [r7, #8]
 8013824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013826:	69ba      	ldr	r2, [r7, #24]
 8013828:	429a      	cmp	r2, r3
 801382a:	d902      	bls.n	8013832 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 801382c:	2301      	movs	r3, #1
 801382e:	617b      	str	r3, [r7, #20]
 8013830:	e001      	b.n	8013836 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8013832:	2300      	movs	r3, #0
 8013834:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8013836:	697b      	ldr	r3, [r7, #20]
 8013838:	2b00      	cmp	r3, #0
 801383a:	d023      	beq.n	8013884 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 801383c:	2100      	movs	r1, #0
 801383e:	69b8      	ldr	r0, [r7, #24]
 8013840:	f003 fc4a 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 8013844:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8013846:	69fb      	ldr	r3, [r7, #28]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d031      	beq.n	80138b0 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 801384c:	69fb      	ldr	r3, [r7, #28]
 801384e:	69ba      	ldr	r2, [r7, #24]
 8013850:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8013852:	68bb      	ldr	r3, [r7, #8]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d00c      	beq.n	8013872 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801385c:	68bb      	ldr	r3, [r7, #8]
 801385e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013864:	461a      	mov	r2, r3
 8013866:	f00e fd63 	bl	8022330 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801386a:	68b8      	ldr	r0, [r7, #8]
 801386c:	f003 fc9c 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
 8013870:	e01e      	b.n	80138b0 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013872:	69fb      	ldr	r3, [r7, #28]
 8013874:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	33aa      	adds	r3, #170	@ 0xaa
 801387a:	225a      	movs	r2, #90	@ 0x5a
 801387c:	4619      	mov	r1, r3
 801387e:	f00e fd57 	bl	8022330 <memcpy>
 8013882:	e015      	b.n	80138b0 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d104      	bne.n	8013894 <prvTCPBufferResize+0xc8>
 801388a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 801388e:	480c      	ldr	r0, [pc, #48]	@ (80138c0 <prvTCPBufferResize+0xf4>)
 8013890:	f7ee f852 	bl	8001938 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8013894:	68bb      	ldr	r3, [r7, #8]
 8013896:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8013898:	68f8      	ldr	r0, [r7, #12]
 801389a:	f7f6 fa8f 	bl	8009dbc <uxIPHeaderSizeSocket>
 801389e:	4602      	mov	r2, r0
 80138a0:	683b      	ldr	r3, [r7, #0]
 80138a2:	441a      	add	r2, r3
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	4413      	add	r3, r2
 80138a8:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 80138b0:	69fb      	ldr	r3, [r7, #28]
    }
 80138b2:	4618      	mov	r0, r3
 80138b4:	3720      	adds	r7, #32
 80138b6:	46bd      	mov	sp, r7
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	08027690 	.word	0x08027690
 80138c0:	0802652c 	.word	0x0802652c

080138c4 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b086      	sub	sp, #24
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	60f8      	str	r0, [r7, #12]
 80138cc:	60b9      	str	r1, [r7, #8]
 80138ce:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 80138d0:	2300      	movs	r3, #0
 80138d2:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 80138d4:	2300      	movs	r3, #0
 80138d6:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d008      	beq.n	80138f0 <prvTCPReturn_SetEndPoint+0x2c>
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d004      	beq.n	80138f0 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80138ea:	68bb      	ldr	r3, [r7, #8]
 80138ec:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 80138ee:	e078      	b.n	80139e2 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 80138f0:	483e      	ldr	r0, [pc, #248]	@ (80139ec <prvTCPReturn_SetEndPoint+0x128>)
 80138f2:	f00e fb01 	bl	8021ef8 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2b14      	cmp	r3, #20
 80138fa:	d003      	beq.n	8013904 <prvTCPReturn_SetEndPoint+0x40>
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	2b28      	cmp	r3, #40	@ 0x28
 8013900:	d03d      	beq.n	801397e <prvTCPReturn_SetEndPoint+0xba>
 8013902:	e056      	b.n	80139b2 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013904:	68bb      	ldr	r3, [r7, #8]
 8013906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013908:	330e      	adds	r3, #14
 801390a:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	691b      	ldr	r3, [r3, #16]
 8013910:	2108      	movs	r1, #8
 8013912:	4618      	mov	r0, r3
 8013914:	f7f9 fea8 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 8013918:	4602      	mov	r2, r0
 801391a:	68bb      	ldr	r3, [r7, #8]
 801391c:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013922:	2b00      	cmp	r3, #0
 8013924:	d149      	bne.n	80139ba <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	68db      	ldr	r3, [r3, #12]
 801392a:	061a      	lsls	r2, r3, #24
 801392c:	697b      	ldr	r3, [r7, #20]
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	021b      	lsls	r3, r3, #8
 8013932:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013936:	431a      	orrs	r2, r3
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	68db      	ldr	r3, [r3, #12]
 801393c:	0a1b      	lsrs	r3, r3, #8
 801393e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013942:	431a      	orrs	r2, r3
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	68db      	ldr	r3, [r3, #12]
 8013948:	0e1b      	lsrs	r3, r3, #24
 801394a:	ea42 0103 	orr.w	r1, r2, r3
 801394e:	697b      	ldr	r3, [r7, #20]
 8013950:	691b      	ldr	r3, [r3, #16]
 8013952:	061a      	lsls	r2, r3, #24
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	691b      	ldr	r3, [r3, #16]
 8013958:	021b      	lsls	r3, r3, #8
 801395a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801395e:	431a      	orrs	r2, r3
 8013960:	697b      	ldr	r3, [r7, #20]
 8013962:	691b      	ldr	r3, [r3, #16]
 8013964:	0a1b      	lsrs	r3, r3, #8
 8013966:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801396a:	431a      	orrs	r2, r3
 801396c:	697b      	ldr	r3, [r7, #20]
 801396e:	691b      	ldr	r3, [r3, #16]
 8013970:	0e1b      	lsrs	r3, r3, #24
 8013972:	4313      	orrs	r3, r2
 8013974:	461a      	mov	r2, r3
 8013976:	481e      	ldr	r0, [pc, #120]	@ (80139f0 <prvTCPReturn_SetEndPoint+0x12c>)
 8013978:	f00e fabe 	bl	8021ef8 <lUDPLoggingPrintf>
                        break;
 801397c:	e01d      	b.n	80139ba <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801397e:	68bb      	ldr	r3, [r7, #8]
 8013980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013982:	330e      	adds	r3, #14
 8013984:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	3318      	adds	r3, #24
 801398a:	4618      	mov	r0, r3
 801398c:	f7f9 fe26 	bl	800d5dc <FreeRTOS_FindEndPointOnIP_IPv6>
 8013990:	4602      	mov	r2, r0
 8013992:	68bb      	ldr	r3, [r7, #8]
 8013994:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8013996:	68bb      	ldr	r3, [r7, #8]
 8013998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801399a:	2b00      	cmp	r3, #0
 801399c:	d10f      	bne.n	80139be <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 801399e:	693b      	ldr	r3, [r7, #16]
 80139a0:	f103 0108 	add.w	r1, r3, #8
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	3318      	adds	r3, #24
 80139a8:	461a      	mov	r2, r3
 80139aa:	4812      	ldr	r0, [pc, #72]	@ (80139f4 <prvTCPReturn_SetEndPoint+0x130>)
 80139ac:	f00e faa4 	bl	8021ef8 <lUDPLoggingPrintf>
                        break;
 80139b0:	e005      	b.n	80139be <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 80139b2:	68bb      	ldr	r3, [r7, #8]
 80139b4:	2200      	movs	r2, #0
 80139b6:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 80139b8:	e002      	b.n	80139c0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 80139ba:	bf00      	nop
 80139bc:	e000      	b.n	80139c0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 80139be:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 80139c0:	68bb      	ldr	r3, [r7, #8]
 80139c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d00c      	beq.n	80139e2 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 80139c8:	68bb      	ldr	r3, [r7, #8]
 80139ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139cc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 80139d0:	4619      	mov	r1, r3
 80139d2:	68bb      	ldr	r3, [r7, #8]
 80139d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80139d6:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 80139da:	461a      	mov	r2, r3
 80139dc:	4806      	ldr	r0, [pc, #24]	@ (80139f8 <prvTCPReturn_SetEndPoint+0x134>)
 80139de:	f00e fa8b 	bl	8021ef8 <lUDPLoggingPrintf>
    }
 80139e2:	bf00      	nop
 80139e4:	3718      	adds	r7, #24
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}
 80139ea:	bf00      	nop
 80139ec:	080265f4 	.word	0x080265f4
 80139f0:	0802661c 	.word	0x0802661c
 80139f4:	08026650 	.word	0x08026650
 80139f8:	08026684 	.word	0x08026684

080139fc <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 80139fc:	b580      	push	{r7, lr}
 80139fe:	b096      	sub	sp, #88	@ 0x58
 8013a00:	af02      	add	r7, sp, #8
 8013a02:	60f8      	str	r0, [r7, #12]
 8013a04:	60b9      	str	r1, [r7, #8]
 8013a06:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8013a08:	2300      	movs	r3, #0
 8013a0a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 8013a0c:	68bb      	ldr	r3, [r7, #8]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d004      	beq.n	8013a1e <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8013a14:	68bb      	ldr	r3, [r7, #8]
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8013a1c:	e002      	b.n	8013a24 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	33aa      	adds	r3, #170	@ 0xaa
 8013a22:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013a24:	68f8      	ldr	r0, [r7, #12]
 8013a26:	f7f6 f9c9 	bl	8009dbc <uxIPHeaderSizeSocket>
 8013a2a:	4603      	mov	r3, r0
 8013a2c:	330e      	adds	r3, #14
 8013a2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013a30:	4413      	add	r3, r2
 8013a32:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013a34:	68fb      	ldr	r3, [r7, #12]
 8013a36:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 8013a40:	2300      	movs	r3, #0
 8013a42:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8013a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a46:	7b5b      	ldrb	r3, [r3, #13]
 8013a48:	f043 0310 	orr.w	r3, r3, #16
 8013a4c:	b2da      	uxtb	r2, r3
 8013a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013a50:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	f000 80a5 	beq.w	8013ba8 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013a64:	2b01      	cmp	r3, #1
 8013a66:	d90a      	bls.n	8013a7e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8013a6e:	f107 0210 	add.w	r2, r7, #16
 8013a72:	4619      	mov	r1, r3
 8013a74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013a76:	f002 fb13 	bl	80160a0 <ulTCPWindowTxGet>
 8013a7a:	4603      	mov	r3, r0
 8013a7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 8013a7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	f340 8091 	ble.w	8013ba8 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	6819      	ldr	r1, [r3, #0]
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013a8e:	68f8      	ldr	r0, [r7, #12]
 8013a90:	f7ff fe9c 	bl	80137cc <prvTCPBufferResize>
 8013a94:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8013a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f000 8082 	beq.w	8013ba2 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013aa2:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8013aa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013aa8:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013aaa:	68f8      	ldr	r0, [r7, #12]
 8013aac:	f7f6 f986 	bl	8009dbc <uxIPHeaderSizeSocket>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	330e      	adds	r3, #14
 8013ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013ab6:	4413      	add	r3, r2
 8013ab8:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8013aba:	68f8      	ldr	r0, [r7, #12]
 8013abc:	f7f6 f97e 	bl	8009dbc <uxIPHeaderSizeSocket>
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	4413      	add	r3, r2
 8013ac6:	3322      	adds	r3, #34	@ 0x22
 8013ac8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013aca:	4413      	add	r3, r2
 8013acc:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013ada:	681b      	ldr	r3, [r3, #0]
 8013adc:	693a      	ldr	r2, [r7, #16]
 8013ade:	4619      	mov	r1, r3
 8013ae0:	f7fc fef9 	bl	80108d6 <uxStreamBufferDistance>
 8013ae4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013aec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013aee:	2201      	movs	r2, #1
 8013af0:	9200      	str	r2, [sp, #0]
 8013af2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013af4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013af6:	f7fd f84c 	bl	8010b92 <uxStreamBufferGet>
 8013afa:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 8013afc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013afe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b00:	429a      	cmp	r2, r3
 8013b02:	d007      	beq.n	8013b14 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8013b04:	6939      	ldr	r1, [r7, #16]
 8013b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b08:	9300      	str	r3, [sp, #0]
 8013b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013b0e:	4898      	ldr	r0, [pc, #608]	@ (8013d70 <prvTCPPrepareSend+0x374>)
 8013b10:	f00e f9f2 	bl	8021ef8 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013b1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013b1e:	b2db      	uxtb	r3, r3
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d041      	beq.n	8013ba8 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	4619      	mov	r1, r3
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013b34:	689b      	ldr	r3, [r3, #8]
 8013b36:	461a      	mov	r2, r3
 8013b38:	f7fc fecd 	bl	80108d6 <uxStreamBufferDistance>
 8013b3c:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 8013b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b42:	429a      	cmp	r2, r3
 8013b44:	d130      	bne.n	8013ba8 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013b4c:	689b      	ldr	r3, [r3, #8]
 8013b4e:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013b56:	685b      	ldr	r3, [r3, #4]
 8013b58:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8013b64:	6a3b      	ldr	r3, [r7, #32]
 8013b66:	9301      	str	r3, [sp, #4]
 8013b68:	69fb      	ldr	r3, [r7, #28]
 8013b6a:	9300      	str	r3, [sp, #0]
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013b70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b72:	4880      	ldr	r0, [pc, #512]	@ (8013d74 <prvTCPPrepareSend+0x378>)
 8013b74:	f00e f9c0 	bl	8021ef8 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b7a:	7b5b      	ldrb	r3, [r3, #13]
 8013b7c:	f043 0301 	orr.w	r3, r3, #1
 8013b80:	b2da      	uxtb	r2, r3
 8013b82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013b84:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8013b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013b8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013b8c:	441a      	add	r2, r3
 8013b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013b90:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013b92:	68fa      	ldr	r2, [r7, #12]
 8013b94:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013b9c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8013ba0:	e002      	b.n	8013ba8 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8013ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ba6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8013ba8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	f2c0 8099 	blt.w	8013ce2 <prvTCPPrepareSend+0x2e6>
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013bb6:	2b05      	cmp	r3, #5
 8013bb8:	f040 8093 	bne.w	8013ce2 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013bc2:	f003 0320 	and.w	r3, r3, #32
 8013bc6:	b2db      	uxtb	r3, r3
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d029      	beq.n	8013c20 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8013bcc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013bce:	f002 f8e7 	bl	8015da0 <xTCPWindowTxDone>
 8013bd2:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d023      	beq.n	8013c20 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8013bd8:	68fa      	ldr	r2, [r7, #12]
 8013bda:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013bde:	f36f 1345 	bfc	r3, #5, #1
 8013be2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013be8:	7b5b      	ldrb	r3, [r3, #13]
 8013bea:	f043 0301 	orr.w	r3, r3, #1
 8013bee:	b2da      	uxtb	r2, r3
 8013bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013bf2:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013bf4:	68fa      	ldr	r2, [r7, #12]
 8013bf6:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013bfa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013bfe:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8013c02:	68fa      	ldr	r2, [r7, #12]
 8013c04:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013c08:	f043 0301 	orr.w	r3, r3, #1
 8013c0c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8013c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c12:	6a1a      	ldr	r2, [r3, #32]
 8013c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013c16:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8013c18:	2106      	movs	r1, #6
 8013c1a:	68f8      	ldr	r0, [r7, #12]
 8013c1c:	f7fd f960 	bl	8010ee0 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013c26:	2b03      	cmp	r3, #3
 8013c28:	d90f      	bls.n	8013c4a <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013c34:	461a      	mov	r2, r3
 8013c36:	4850      	ldr	r0, [pc, #320]	@ (8013d78 <prvTCPPrepareSend+0x37c>)
 8013c38:	f00e f95e 	bl	8021ef8 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8013c3c:	2108      	movs	r1, #8
 8013c3e:	68f8      	ldr	r0, [r7, #12]
 8013c40:	f7fd f94e 	bl	8010ee0 <vTCPStateChange>
                    lDataLen = -1;
 8013c44:	f04f 33ff 	mov.w	r3, #4294967295
 8013c48:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8013c4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d148      	bne.n	8013ce2 <prvTCPPrepareSend+0x2e6>
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013c56:	f003 0301 	and.w	r3, r3, #1
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d140      	bne.n	8013ce2 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8013c60:	f7f0 fcfc 	bl	800465c <xTaskGetTickCount>
 8013c64:	4602      	mov	r2, r0
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013c6c:	1ad3      	subs	r3, r2, r3
 8013c6e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013c70:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013c74:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d002      	beq.n	8013c86 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8013c80:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8013c84:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8013c86:	697a      	ldr	r2, [r7, #20]
 8013c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d929      	bls.n	8013ce2 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8013c8e:	f7f0 fce5 	bl	800465c <xTaskGetTickCount>
 8013c92:	4602      	mov	r2, r0
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 8013c9a:	4b38      	ldr	r3, [pc, #224]	@ (8013d7c <prvTCPPrepareSend+0x380>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d00b      	beq.n	8013cba <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013cac:	461a      	mov	r2, r3
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013cb4:	4832      	ldr	r0, [pc, #200]	@ (8013d80 <prvTCPPrepareSend+0x384>)
 8013cb6:	f00e f91f 	bl	8021ef8 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8013cba:	68fa      	ldr	r2, [r7, #12]
 8013cbc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013cc0:	f043 0302 	orr.w	r3, r3, #2
 8013cc4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8013cce:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013cd8:	3301      	adds	r3, #1
 8013cda:	b2da      	uxtb	r2, r3
 8013cdc:	68fb      	ldr	r3, [r7, #12]
 8013cde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8013ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	db3e      	blt.n	8013d66 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8013ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	dc0f      	bgt.n	8013d0e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8013cee:	68fb      	ldr	r3, [r7, #12]
 8013cf0:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013cf4:	f003 0301 	and.w	r3, r3, #1
 8013cf8:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d107      	bne.n	8013d0e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013d04:	f003 0302 	and.w	r3, r3, #2
 8013d08:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d02b      	beq.n	8013d66 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8013d0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d10:	7b5b      	ldrb	r3, [r3, #13]
 8013d12:	f023 0308 	bic.w	r3, r3, #8
 8013d16:	b2da      	uxtb	r2, r3
 8013d18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d1a:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	b2db      	uxtb	r3, r3
 8013d20:	3314      	adds	r3, #20
 8013d22:	b2db      	uxtb	r3, r3
 8013d24:	009b      	lsls	r3, r3, #2
 8013d26:	b2da      	uxtb	r2, r3
 8013d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d2a:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8013d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d2e:	7b5b      	ldrb	r3, [r3, #13]
 8013d30:	f043 0310 	orr.w	r3, r3, #16
 8013d34:	b2da      	uxtb	r2, r3
 8013d36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d38:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8013d3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d006      	beq.n	8013d4e <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8013d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d42:	7b5b      	ldrb	r3, [r3, #13]
 8013d44:	f043 0308 	orr.w	r3, r3, #8
 8013d48:	b2da      	uxtb	r2, r3
 8013d4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013d4c:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8013d4e:	68f8      	ldr	r0, [r7, #12]
 8013d50:	f7f6 f834 	bl	8009dbc <uxIPHeaderSizeSocket>
 8013d54:	4602      	mov	r2, r0
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	4413      	add	r3, r2
 8013d5a:	3314      	adds	r3, #20
 8013d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 8013d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013d60:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013d62:	4413      	add	r3, r2
 8013d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8013d66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3750      	adds	r7, #80	@ 0x50
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}
 8013d70:	080266b8 	.word	0x080266b8
 8013d74:	080266ec 	.word	0x080266ec
 8013d78:	08026714 	.word	0x08026714
 8013d7c:	200015c4 	.word	0x200015c4
 8013d80:	08026734 	.word	0x08026734

08013d84 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013d92:	4618      	mov	r0, r3
 8013d94:	f7fc fdf0 	bl	8010978 <uxStreamBufferMidSpace>
 8013d98:	4603      	mov	r3, r0
 8013d9a:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	dd1a      	ble.n	8013dd8 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8013da8:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013db0:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013db2:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013dba:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8013dbc:	f001 ff5c 	bl	8015c78 <lTCPWindowTxAdd>
 8013dc0:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	2b00      	cmp	r3, #0
 8013dc6:	dd07      	ble.n	8013dd8 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013dce:	68ba      	ldr	r2, [r7, #8]
 8013dd0:	4611      	mov	r1, r2
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7fc fdf7 	bl	80109c6 <vStreamBufferMoveMid>
            }
        }
    }
 8013dd8:	bf00      	nop
 8013dda:	3710      	adds	r7, #16
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}

08013de0 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013de0:	b590      	push	{r4, r7, lr}
 8013de2:	b08b      	sub	sp, #44	@ 0x2c
 8013de4:	af02      	add	r7, sp, #8
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013dee:	6838      	ldr	r0, [r7, #0]
 8013df0:	f7f5 ffca 	bl	8009d88 <uxIPHeaderSizePacket>
 8013df4:	4603      	mov	r3, r0
 8013df6:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013df8:	4423      	add	r3, r4
 8013dfa:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013dfc:	69bb      	ldr	r3, [r7, #24]
 8013dfe:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013e06:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8013e0e:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 8013e10:	69fb      	ldr	r3, [r7, #28]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d05c      	beq.n	8013ed0 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8013e16:	4b4f      	ldr	r3, [pc, #316]	@ (8013f54 <prvSetOptions+0x174>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	db44      	blt.n	8013ea8 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013e22:	4618      	mov	r0, r3
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013e2a:	461c      	mov	r4, r3
 8013e2c:	693b      	ldr	r3, [r7, #16]
 8013e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e32:	061a      	lsls	r2, r3, #24
 8013e34:	693b      	ldr	r3, [r7, #16]
 8013e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e3a:	021b      	lsls	r3, r3, #8
 8013e3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e40:	431a      	orrs	r2, r3
 8013e42:	693b      	ldr	r3, [r7, #16]
 8013e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e48:	0a1b      	lsrs	r3, r3, #8
 8013e4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e4e:	431a      	orrs	r2, r3
 8013e50:	693b      	ldr	r3, [r7, #16]
 8013e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013e56:	0e1b      	lsrs	r3, r3, #24
 8013e58:	431a      	orrs	r2, r3
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013e60:	1ad3      	subs	r3, r2, r3
 8013e62:	693a      	ldr	r2, [r7, #16]
 8013e64:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013e68:	0611      	lsls	r1, r2, #24
 8013e6a:	693a      	ldr	r2, [r7, #16]
 8013e6c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013e70:	0212      	lsls	r2, r2, #8
 8013e72:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013e76:	4311      	orrs	r1, r2
 8013e78:	693a      	ldr	r2, [r7, #16]
 8013e7a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013e7e:	0a12      	lsrs	r2, r2, #8
 8013e80:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8013e84:	4311      	orrs	r1, r2
 8013e86:	693a      	ldr	r2, [r7, #16]
 8013e88:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013e8c:	0e12      	lsrs	r2, r2, #24
 8013e8e:	4311      	orrs	r1, r2
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 8013e96:	1a8a      	subs	r2, r1, r2
 8013e98:	9201      	str	r2, [sp, #4]
 8013e9a:	9300      	str	r3, [sp, #0]
 8013e9c:	69fb      	ldr	r3, [r7, #28]
 8013e9e:	4622      	mov	r2, r4
 8013ea0:	4601      	mov	r1, r0
 8013ea2:	482d      	ldr	r0, [pc, #180]	@ (8013f58 <prvSetOptions+0x178>)
 8013ea4:	f00e f828 	bl	8021ef8 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	3380      	adds	r3, #128	@ 0x80
 8013eac:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 8013eae:	697b      	ldr	r3, [r7, #20]
 8013eb0:	3314      	adds	r3, #20
 8013eb2:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 8013eb4:	69fa      	ldr	r2, [r7, #28]
 8013eb6:	68f9      	ldr	r1, [r7, #12]
 8013eb8:	68b8      	ldr	r0, [r7, #8]
 8013eba:	f00e fa39 	bl	8022330 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013ebe:	69fb      	ldr	r3, [r7, #28]
 8013ec0:	b2db      	uxtb	r3, r3
 8013ec2:	3314      	adds	r3, #20
 8013ec4:	b2db      	uxtb	r3, r3
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	b2da      	uxtb	r2, r3
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	731a      	strb	r2, [r3, #12]
 8013ece:	e03c      	b.n	8013f4a <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 8013ed0:	687b      	ldr	r3, [r7, #4]
 8013ed2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8013ed6:	2b04      	cmp	r3, #4
 8013ed8:	d937      	bls.n	8013f4a <prvSetOptions+0x16a>
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013ee0:	f003 0301 	and.w	r3, r3, #1
 8013ee4:	b2db      	uxtb	r3, r3
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d02f      	beq.n	8013f4a <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 8013eea:	687a      	ldr	r2, [r7, #4]
 8013eec:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013ef0:	f36f 0300 	bfc	r3, #0, #1
 8013ef4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8013ef8:	4b16      	ldr	r3, [pc, #88]	@ (8013f54 <prvSetOptions+0x174>)
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	db06      	blt.n	8013f0e <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013f06:	4619      	mov	r1, r3
 8013f08:	4814      	ldr	r0, [pc, #80]	@ (8013f5c <prvSetOptions+0x17c>)
 8013f0a:	f00d fff5 	bl	8021ef8 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	2202      	movs	r2, #2
 8013f12:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8013f14:	697b      	ldr	r3, [r7, #20]
 8013f16:	2204      	movs	r2, #4
 8013f18:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013f20:	0a1b      	lsrs	r3, r3, #8
 8013f22:	b29b      	uxth	r3, r3
 8013f24:	b2da      	uxtb	r2, r3
 8013f26:	697b      	ldr	r3, [r7, #20]
 8013f28:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013f30:	b2da      	uxtb	r2, r3
 8013f32:	697b      	ldr	r3, [r7, #20]
 8013f34:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8013f36:	2304      	movs	r3, #4
 8013f38:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8013f3a:	69fb      	ldr	r3, [r7, #28]
 8013f3c:	b2db      	uxtb	r3, r3
 8013f3e:	3314      	adds	r3, #20
 8013f40:	b2db      	uxtb	r3, r3
 8013f42:	009b      	lsls	r3, r3, #2
 8013f44:	b2da      	uxtb	r2, r3
 8013f46:	697b      	ldr	r3, [r7, #20]
 8013f48:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 8013f4a:	69fb      	ldr	r3, [r7, #28]
    }
 8013f4c:	4618      	mov	r0, r3
 8013f4e:	3724      	adds	r7, #36	@ 0x24
 8013f50:	46bd      	mov	sp, r7
 8013f52:	bd90      	pop	{r4, r7, pc}
 8013f54:	200015c4 	.word	0x200015c4
 8013f58:	08026754 	.word	0x08026754
 8013f5c:	0802677c 	.word	0x0802677c

08013f60 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013f62:	b093      	sub	sp, #76	@ 0x4c
 8013f64:	af04      	add	r7, sp, #16
 8013f66:	60f8      	str	r0, [r7, #12]
 8013f68:	60b9      	str	r1, [r7, #8]
 8013f6a:	607a      	str	r2, [r7, #4]
 8013f6c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8013f6e:	68bb      	ldr	r3, [r7, #8]
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013f74:	68bb      	ldr	r3, [r7, #8]
 8013f76:	681b      	ldr	r3, [r3, #0]
 8013f78:	4618      	mov	r0, r3
 8013f7a:	f7f5 ff05 	bl	8009d88 <uxIPHeaderSizePacket>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013f82:	4423      	add	r3, r4
 8013f84:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013f86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013f90:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 8013f96:	68bb      	ldr	r3, [r7, #8]
 8013f98:	681b      	ldr	r3, [r3, #0]
 8013f9a:	4618      	mov	r0, r3
 8013f9c:	f7f5 fef4 	bl	8009d88 <uxIPHeaderSizePacket>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	3314      	adds	r3, #20
 8013fa4:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 8013fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013fa8:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8013fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013fb0:	691b      	ldr	r3, [r3, #16]
 8013fb2:	1ad3      	subs	r3, r2, r3
 8013fb4:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013fc0:	005b      	lsls	r3, r3, #1
 8013fc2:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2b00      	cmp	r3, #0
 8013fc8:	d079      	beq.n	80140be <prvSendData+0x15e>
 8013fca:	69ba      	ldr	r2, [r7, #24]
 8013fcc:	697b      	ldr	r3, [r7, #20]
 8013fce:	429a      	cmp	r2, r3
 8013fd0:	db75      	blt.n	80140be <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8013fdc:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d16d      	bne.n	80140be <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013fe2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013fe4:	6a3b      	ldr	r3, [r7, #32]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d169      	bne.n	80140be <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8013ff0:	2b05      	cmp	r3, #5
 8013ff2:	d164      	bne.n	80140be <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8013ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff6:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013ff8:	2b10      	cmp	r3, #16
 8013ffa:	d160      	bne.n	80140be <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8014002:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801400a:	68bb      	ldr	r3, [r7, #8]
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	429a      	cmp	r2, r3
 8014010:	d00f      	beq.n	8014032 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8014012:	68fb      	ldr	r3, [r7, #12]
 8014014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014018:	2b00      	cmp	r3, #0
 801401a:	d005      	beq.n	8014028 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801401c:	68fb      	ldr	r3, [r7, #12]
 801401e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014022:	4618      	mov	r0, r3
 8014024:	f003 f8c0 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	681a      	ldr	r2, [r3, #0]
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8014032:	687a      	ldr	r2, [r7, #4]
 8014034:	693b      	ldr	r3, [r7, #16]
 8014036:	429a      	cmp	r2, r3
 8014038:	d204      	bcs.n	8014044 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 801403a:	68fb      	ldr	r3, [r7, #12]
 801403c:	2202      	movs	r2, #2
 801403e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8014042:	e00c      	b.n	801405e <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	2214      	movs	r2, #20
 8014048:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8014052:	2b00      	cmp	r3, #0
 8014054:	d103      	bne.n	801405e <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	2201      	movs	r2, #1
 801405a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801405e:	4b3d      	ldr	r3, [pc, #244]	@ (8014154 <prvSendData+0x1f4>)
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	2b01      	cmp	r3, #1
 8014064:	dd25      	ble.n	80140b2 <prvSendData+0x152>
 8014066:	68fb      	ldr	r3, [r7, #12]
 8014068:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801406a:	2b17      	cmp	r3, #23
 801406c:	d021      	beq.n	80140b2 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014072:	461d      	mov	r5, r3
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801407a:	461e      	mov	r6, r3
 801407c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801407e:	691a      	ldr	r2, [r3, #16]
 8014080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014082:	68db      	ldr	r3, [r3, #12]
 8014084:	1ad0      	subs	r0, r2, r3
 8014086:	68fb      	ldr	r3, [r7, #12]
 8014088:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 801408c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801408e:	69db      	ldr	r3, [r3, #28]
 8014090:	1ad3      	subs	r3, r2, r3
 8014092:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014094:	68f9      	ldr	r1, [r7, #12]
 8014096:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 801409a:	460c      	mov	r4, r1
 801409c:	69b9      	ldr	r1, [r7, #24]
 801409e:	9103      	str	r1, [sp, #12]
 80140a0:	9402      	str	r4, [sp, #8]
 80140a2:	9201      	str	r2, [sp, #4]
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	4603      	mov	r3, r0
 80140a8:	4632      	mov	r2, r6
 80140aa:	4629      	mov	r1, r5
 80140ac:	482a      	ldr	r0, [pc, #168]	@ (8014158 <prvSendData+0x1f8>)
 80140ae:	f00d ff23 	bl	8021ef8 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	2200      	movs	r2, #0
 80140b6:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 80140b8:	2300      	movs	r3, #0
 80140ba:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 80140bc:	e015      	b.n	80140ea <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80140be:	68fb      	ldr	r3, [r7, #12]
 80140c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d010      	beq.n	80140ea <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	429a      	cmp	r2, r3
 80140d4:	d005      	beq.n	80140e2 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80140dc:	4618      	mov	r0, r3
 80140de:	f003 f863 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2200      	movs	r2, #0
 80140e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 80140ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d02b      	beq.n	8014148 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 80140f0:	4b18      	ldr	r3, [pc, #96]	@ (8014154 <prvSendData+0x1f4>)
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	dd1d      	ble.n	8014134 <prvSendData+0x1d4>
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80140fc:	2b17      	cmp	r3, #23
 80140fe:	d019      	beq.n	8014134 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014104:	4618      	mov	r0, r3
 8014106:	68fb      	ldr	r3, [r7, #12]
 8014108:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801410c:	461c      	mov	r4, r3
 801410e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014110:	691a      	ldr	r2, [r3, #16]
 8014112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014114:	68db      	ldr	r3, [r3, #12]
 8014116:	1ad1      	subs	r1, r2, r3
 8014118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801411a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801411e:	69db      	ldr	r3, [r3, #28]
 8014120:	1ad3      	subs	r3, r2, r3
 8014122:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014124:	9201      	str	r2, [sp, #4]
 8014126:	9300      	str	r3, [sp, #0]
 8014128:	460b      	mov	r3, r1
 801412a:	4622      	mov	r2, r4
 801412c:	4601      	mov	r1, r0
 801412e:	480b      	ldr	r0, [pc, #44]	@ (801415c <prvSendData+0x1fc>)
 8014130:	f00d fee2 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8014134:	68bb      	ldr	r3, [r7, #8]
 8014136:	6819      	ldr	r1, [r3, #0]
 8014138:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801413a:	2301      	movs	r3, #1
 801413c:	68f8      	ldr	r0, [r7, #12]
 801413e:	f7ff f8ff 	bl	8013340 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8014142:	68bb      	ldr	r3, [r7, #8]
 8014144:	2200      	movs	r2, #0
 8014146:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8014148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801414a:	4618      	mov	r0, r3
 801414c:	373c      	adds	r7, #60	@ 0x3c
 801414e:	46bd      	mov	sp, r7
 8014150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014152:	bf00      	nop
 8014154:	200015c4 	.word	0x200015c4
 8014158:	08026790 	.word	0x08026790
 801415c:	080267c8 	.word	0x080267c8

08014160 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
 8014168:	460b      	mov	r3, r1
 801416a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 801416c:	2301      	movs	r3, #1
 801416e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f7f5 fe09 	bl	8009d88 <uxIPHeaderSizePacket>
 8014176:	4603      	mov	r3, r0
 8014178:	2b14      	cmp	r3, #20
 801417a:	d002      	beq.n	8014182 <prvTCPSendSpecialPacketHelper+0x22>
 801417c:	2b28      	cmp	r3, #40	@ 0x28
 801417e:	d007      	beq.n	8014190 <prvTCPSendSpecialPacketHelper+0x30>
 8014180:	e00d      	b.n	801419e <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8014182:	78fb      	ldrb	r3, [r7, #3]
 8014184:	4619      	mov	r1, r3
 8014186:	6878      	ldr	r0, [r7, #4]
 8014188:	f000 fb18 	bl	80147bc <prvTCPSendSpecialPktHelper_IPV4>
 801418c:	60f8      	str	r0, [r7, #12]
                        break;
 801418e:	e009      	b.n	80141a4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 8014190:	78fb      	ldrb	r3, [r7, #3]
 8014192:	4619      	mov	r1, r3
 8014194:	6878      	ldr	r0, [r7, #4]
 8014196:	f000 fe8b 	bl	8014eb0 <prvTCPSendSpecialPktHelper_IPV6>
 801419a:	60f8      	str	r0, [r7, #12]
                        break;
 801419c:	e002      	b.n	80141a4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 801419e:	2300      	movs	r3, #0
 80141a0:	60fb      	str	r3, [r7, #12]
                    break;
 80141a2:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 80141a4:	68fb      	ldr	r3, [r7, #12]
    }
 80141a6:	4618      	mov	r0, r3
 80141a8:	3710      	adds	r7, #16
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}

080141ae <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80141ae:	b580      	push	{r7, lr}
 80141b0:	b082      	sub	sp, #8
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 80141b6:	2110      	movs	r1, #16
 80141b8:	6878      	ldr	r0, [r7, #4]
 80141ba:	f7ff ffd1 	bl	8014160 <prvTCPSendSpecialPacketHelper>
 80141be:	4603      	mov	r3, r0
    }
 80141c0:	4618      	mov	r0, r3
 80141c2:	3708      	adds	r7, #8
 80141c4:	46bd      	mov	sp, r7
 80141c6:	bd80      	pop	{r7, pc}

080141c8 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b082      	sub	sp, #8
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 80141d0:	2114      	movs	r1, #20
 80141d2:	6878      	ldr	r0, [r7, #4]
 80141d4:	f7ff ffc4 	bl	8014160 <prvTCPSendSpecialPacketHelper>
 80141d8:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 80141da:	4618      	mov	r0, r3
 80141dc:	3708      	adds	r7, #8
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
	...

080141e4 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 80141e4:	b580      	push	{r7, lr}
 80141e6:	b0a6      	sub	sp, #152	@ 0x98
 80141e8:	af00      	add	r7, sp, #0
 80141ea:	60f8      	str	r0, [r7, #12]
 80141ec:	60b9      	str	r1, [r7, #8]
 80141ee:	607a      	str	r2, [r7, #4]
 80141f0:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 80141f2:	2300      	movs	r3, #0
 80141f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 80141f8:	2300      	movs	r3, #0
 80141fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 80141fe:	2300      	movs	r3, #0
 8014200:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014202:	683b      	ldr	r3, [r7, #0]
 8014204:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8014208:	2300      	movs	r3, #0
 801420a:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014212:	2300      	movs	r3, #0
 8014214:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8014218:	2300      	movs	r3, #0
 801421a:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 801421c:	2314      	movs	r3, #20
 801421e:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014220:	2300      	movs	r3, #0
 8014222:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8014224:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014228:	2b00      	cmp	r3, #0
 801422a:	d117      	bne.n	801425c <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 801422c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014230:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8014234:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014238:	2238      	movs	r2, #56	@ 0x38
 801423a:	2100      	movs	r1, #0
 801423c:	4618      	mov	r0, r3
 801423e:	f00e f984 	bl	802254a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8014248:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801424c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801424e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014252:	225a      	movs	r2, #90	@ 0x5a
 8014254:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8014256:	2300      	movs	r3, #0
 8014258:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801425c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014260:	2b00      	cmp	r3, #0
 8014262:	d114      	bne.n	801428e <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8014264:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801426a:	4619      	mov	r1, r3
 801426c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014270:	f7f6 f83c 	bl	800a2ec <pxDuplicateNetworkBufferWithDescriptor>
 8014274:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8014278:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801427c:	2b00      	cmp	r3, #0
 801427e:	d003      	beq.n	8014288 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8014280:	2301      	movs	r3, #1
 8014282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8014286:	e002      	b.n	801428e <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8014288:	48bc      	ldr	r0, [pc, #752]	@ (801457c <prvTCPReturnPacket_IPV4+0x398>)
 801428a:	f00d fe35 	bl	8021ef8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 801428e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014292:	2b00      	cmp	r3, #0
 8014294:	f000 8166 	beq.w	8014564 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8014298:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801429e:	330e      	adds	r3, #14
 80142a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80142a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80142a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80142ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80142b0:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80142b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80142b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80142b8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80142ba:	330e      	adds	r3, #14
 80142bc:	4413      	add	r3, r2
 80142be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80142c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80142c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d10b      	bne.n	80142e4 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80142cc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80142ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80142d2:	68f8      	ldr	r0, [r7, #12]
 80142d4:	f7ff faf6 	bl	80138c4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 80142d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80142dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80142de:	2b00      	cmp	r3, #0
 80142e0:	f000 813d 	beq.w	801455e <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d028      	beq.n	801433c <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80142ea:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80142ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80142f0:	68f8      	ldr	r0, [r7, #12]
 80142f2:	f7ff f865 	bl	80133c0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80142fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80142fe:	68f8      	ldr	r0, [r7, #12]
 8014300:	f7ff f8d8 	bl	80134b4 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014308:	061a      	lsls	r2, r3, #24
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801430e:	021b      	lsls	r3, r3, #8
 8014310:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014314:	431a      	orrs	r2, r3
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801431a:	0a1b      	lsrs	r3, r3, #8
 801431c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014320:	431a      	orrs	r2, r3
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014326:	0e1b      	lsrs	r3, r3, #24
 8014328:	431a      	orrs	r2, r3
 801432a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801432c:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801432e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014334:	681a      	ldr	r2, [r3, #0]
 8014336:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014338:	60da      	str	r2, [r3, #12]
 801433a:	e017      	b.n	801436c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801433c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014340:	685b      	ldr	r3, [r3, #4]
 8014342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8014344:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014348:	689a      	ldr	r2, [r3, #8]
 801434a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801434e:	605a      	str	r2, [r3, #4]
 8014350:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014354:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8014356:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8014358:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801435a:	691b      	ldr	r3, [r3, #16]
 801435c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801435e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014360:	68da      	ldr	r2, [r3, #12]
 8014362:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014364:	611a      	str	r2, [r3, #16]
 8014366:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014368:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801436a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 801436c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801436e:	2280      	movs	r2, #128	@ 0x80
 8014370:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	b29b      	uxth	r3, r3
 8014376:	021b      	lsls	r3, r3, #8
 8014378:	b29a      	uxth	r2, r3
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	0a1b      	lsrs	r3, r3, #8
 801437e:	b29b      	uxth	r3, r3
 8014380:	4313      	orrs	r3, r2
 8014382:	b29a      	uxth	r2, r3
 8014384:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014386:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8014388:	4b7d      	ldr	r3, [pc, #500]	@ (8014580 <prvTCPReturnPacket_IPV4+0x39c>)
 801438a:	881b      	ldrh	r3, [r3, #0]
 801438c:	021b      	lsls	r3, r3, #8
 801438e:	b21a      	sxth	r2, r3
 8014390:	4b7b      	ldr	r3, [pc, #492]	@ (8014580 <prvTCPReturnPacket_IPV4+0x39c>)
 8014392:	881b      	ldrh	r3, [r3, #0]
 8014394:	0a1b      	lsrs	r3, r3, #8
 8014396:	b29b      	uxth	r3, r3
 8014398:	b21b      	sxth	r3, r3
 801439a:	4313      	orrs	r3, r2
 801439c:	b21b      	sxth	r3, r3
 801439e:	b29a      	uxth	r2, r3
 80143a0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80143a2:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 80143a4:	4b76      	ldr	r3, [pc, #472]	@ (8014580 <prvTCPReturnPacket_IPV4+0x39c>)
 80143a6:	881b      	ldrh	r3, [r3, #0]
 80143a8:	3301      	adds	r3, #1
 80143aa:	b29a      	uxth	r2, r3
 80143ac:	4b74      	ldr	r3, [pc, #464]	@ (8014580 <prvTCPReturnPacket_IPV4+0x39c>)
 80143ae:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 80143b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80143b2:	2200      	movs	r2, #0
 80143b4:	719a      	strb	r2, [r3, #6]
 80143b6:	2200      	movs	r2, #0
 80143b8:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80143ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143be:	781a      	ldrb	r2, [r3, #0]
 80143c0:	785b      	ldrb	r3, [r3, #1]
 80143c2:	021b      	lsls	r3, r3, #8
 80143c4:	4313      	orrs	r3, r2
 80143c6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80143ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143ce:	885b      	ldrh	r3, [r3, #2]
 80143d0:	b29a      	uxth	r2, r3
 80143d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143d6:	801a      	strh	r2, [r3, #0]
 80143d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80143dc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80143e0:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 80143e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 80143ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143f0:	f103 020e 	add.w	r2, r3, #14
 80143f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80143f8:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 80143fa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80143fc:	3306      	adds	r3, #6
 80143fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8014402:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014404:	691b      	ldr	r3, [r3, #16]
 8014406:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8014408:	f107 0214 	add.w	r2, r7, #20
 801440c:	f107 011c 	add.w	r1, r7, #28
 8014410:	f107 0318 	add.w	r3, r7, #24
 8014414:	4618      	mov	r0, r3
 8014416:	f7f2 fe9d 	bl	8007154 <eARPGetCacheEntry>
 801441a:	4603      	mov	r3, r0
 801441c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8014420:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8014424:	2b01      	cmp	r3, #1
 8014426:	d108      	bne.n	801443a <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8014428:	f107 031c 	add.w	r3, r7, #28
 801442c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014430:	697a      	ldr	r2, [r7, #20]
 8014432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014436:	631a      	str	r2, [r3, #48]	@ 0x30
 8014438:	e003      	b.n	8014442 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 801443a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801443c:	3306      	adds	r3, #6
 801443e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8014442:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014448:	2b00      	cmp	r3, #0
 801444a:	f000 808a 	beq.w	8014562 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801444e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014450:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014452:	2206      	movs	r2, #6
 8014454:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014458:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801445a:	f00d ff69 	bl	8022330 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 801445e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014464:	33e8      	adds	r3, #232	@ 0xe8
 8014466:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801446a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801446c:	3306      	adds	r3, #6
 801446e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014470:	2206      	movs	r2, #6
 8014472:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8014476:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014478:	f00d ff5a 	bl	8022330 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801447c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014482:	2b3b      	cmp	r3, #59	@ 0x3b
 8014484:	d81a      	bhi.n	80144bc <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014486:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801448a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801448c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8014490:	e00c      	b.n	80144ac <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014492:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014496:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014498:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801449c:	4413      	add	r3, r2
 801449e:	2200      	movs	r2, #0
 80144a0:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80144a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144a6:	3301      	adds	r3, #1
 80144a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80144ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80144b0:	2b3b      	cmp	r3, #59	@ 0x3b
 80144b2:	ddee      	ble.n	8014492 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80144b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144b8:	223c      	movs	r2, #60	@ 0x3c
 80144ba:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 80144bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144c2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d104      	bne.n	80144d4 <prvTCPReturnPacket_IPV4+0x2f0>
 80144ca:	f240 111d 	movw	r1, #285	@ 0x11d
 80144ce:	482d      	ldr	r0, [pc, #180]	@ (8014584 <prvTCPReturnPacket_IPV4+0x3a0>)
 80144d0:	f7ed fa32 	bl	8001938 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80144d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144da:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80144de:	68db      	ldr	r3, [r3, #12]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d104      	bne.n	80144ee <prvTCPReturnPacket_IPV4+0x30a>
 80144e4:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80144e8:	4826      	ldr	r0, [pc, #152]	@ (8014584 <prvTCPReturnPacket_IPV4+0x3a0>)
 80144ea:	f7ed fa25 	bl	8001938 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80144ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80144f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80144f4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80144f8:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 80144fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80144fc:	68db      	ldr	r3, [r3, #12]
 80144fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8014502:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8014506:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8014508:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 801450a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801450e:	2b00      	cmp	r3, #0
 8014510:	d121      	bne.n	8014556 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014512:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014516:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801451a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801451e:	021b      	lsls	r3, r3, #8
 8014520:	4313      	orrs	r3, r2
 8014522:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8014526:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801452a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801452c:	b29a      	uxth	r2, r3
 801452e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014532:	845a      	strh	r2, [r3, #34]	@ 0x22
 8014534:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014538:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 801453c:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 801453e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014540:	691a      	ldr	r2, [r3, #16]
 8014542:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8014544:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014546:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014548:	3306      	adds	r3, #6
 801454a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801454c:	2206      	movs	r2, #6
 801454e:	4618      	mov	r0, r3
 8014550:	f00d feee 	bl	8022330 <memcpy>
 8014554:	e006      	b.n	8014564 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8014556:	2300      	movs	r3, #0
 8014558:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801455c:	e002      	b.n	8014564 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 801455e:	bf00      	nop
 8014560:	e000      	b.n	8014564 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8014562:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8014564:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014568:	2b01      	cmp	r3, #1
 801456a:	d103      	bne.n	8014574 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801456c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8014570:	f002 fe1a 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8014574:	bf00      	nop
 8014576:	3798      	adds	r7, #152	@ 0x98
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}
 801457c:	080267f4 	.word	0x080267f4
 8014580:	2000111c 	.word	0x2000111c
 8014584:	0802681c 	.word	0x0802681c

08014588 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014588:	b5f0      	push	{r4, r5, r6, r7, lr}
 801458a:	b093      	sub	sp, #76	@ 0x4c
 801458c:	af06      	add	r7, sp, #24
 801458e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014590:	2301      	movs	r3, #1
 8014592:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8014594:	2300      	movs	r3, #0
 8014596:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014598:	f107 030c 	add.w	r3, r7, #12
 801459c:	2206      	movs	r2, #6
 801459e:	2100      	movs	r1, #0
 80145a0:	4618      	mov	r0, r3
 80145a2:	f00d ffd2 	bl	802254a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145aa:	061a      	lsls	r2, r3, #24
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145b0:	021b      	lsls	r3, r3, #8
 80145b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80145b6:	431a      	orrs	r2, r3
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145bc:	0a1b      	lsrs	r3, r3, #8
 80145be:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80145c2:	431a      	orrs	r2, r3
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80145c8:	0e1b      	lsrs	r3, r3, #24
 80145ca:	4313      	orrs	r3, r2
 80145cc:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80145d4:	f107 010c 	add.w	r1, r7, #12
 80145d8:	f107 0314 	add.w	r3, r7, #20
 80145dc:	4618      	mov	r0, r3
 80145de:	f7f2 fdb9 	bl	8007154 <eARPGetCacheEntry>
 80145e2:	4603      	mov	r3, r0
 80145e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 80145e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80145ec:	2b01      	cmp	r3, #1
 80145ee:	d037      	beq.n	8014660 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80145f6:	3301      	adds	r3, #1
 80145f8:	b2da      	uxtb	r2, r3
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8014604:	697b      	ldr	r3, [r7, #20]
 8014606:	061a      	lsls	r2, r3, #24
 8014608:	697b      	ldr	r3, [r7, #20]
 801460a:	021b      	lsls	r3, r3, #8
 801460c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014610:	431a      	orrs	r2, r3
 8014612:	697b      	ldr	r3, [r7, #20]
 8014614:	0a1b      	lsrs	r3, r3, #8
 8014616:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801461a:	431a      	orrs	r2, r3
 801461c:	697b      	ldr	r3, [r7, #20]
 801461e:	0e1b      	lsrs	r3, r3, #24
 8014620:	431a      	orrs	r2, r3
 8014622:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8014626:	7b38      	ldrb	r0, [r7, #12]
 8014628:	7b7c      	ldrb	r4, [r7, #13]
 801462a:	7bbd      	ldrb	r5, [r7, #14]
 801462c:	7bfe      	ldrb	r6, [r7, #15]
 801462e:	f897 c010 	ldrb.w	ip, [r7, #16]
 8014632:	f8c7 c000 	str.w	ip, [r7]
 8014636:	f897 c011 	ldrb.w	ip, [r7, #17]
 801463a:	4663      	mov	r3, ip
 801463c:	9305      	str	r3, [sp, #20]
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	9304      	str	r3, [sp, #16]
 8014642:	9603      	str	r6, [sp, #12]
 8014644:	9502      	str	r5, [sp, #8]
 8014646:	9401      	str	r4, [sp, #4]
 8014648:	9000      	str	r0, [sp, #0]
 801464a:	4673      	mov	r3, lr
 801464c:	485a      	ldr	r0, [pc, #360]	@ (80147b8 <prvTCPPrepareConnect_IPV4+0x230>)
 801464e:	f00d fc53 	bl	8021ef8 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8014652:	697b      	ldr	r3, [r7, #20]
 8014654:	4618      	mov	r0, r3
 8014656:	f7f2 ffd1 	bl	80075fc <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 801465a:	2300      	movs	r3, #0
 801465c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 801465e:	e000      	b.n	8014662 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8014660:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014664:	2b00      	cmp	r3, #0
 8014666:	d010      	beq.n	801468a <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801467a:	f7ed f97d 	bl	8001978 <ulApplicationGetNextSequenceNumber>
 801467e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014682:	2b00      	cmp	r3, #0
 8014684:	d101      	bne.n	801468a <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8014686:	2300      	movs	r3, #0
 8014688:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801468c:	2b00      	cmp	r3, #0
 801468e:	f000 808d 	beq.w	80147ac <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	33aa      	adds	r3, #170	@ 0xaa
 8014696:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8014698:	6a3b      	ldr	r3, [r7, #32]
 801469a:	330e      	adds	r3, #14
 801469c:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2200      	movs	r2, #0
 80146a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80146ac:	f043 0308 	orr.w	r3, r3, #8
 80146b0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	33aa      	adds	r3, #170	@ 0xaa
 80146b8:	225a      	movs	r2, #90	@ 0x5a
 80146ba:	2100      	movs	r1, #0
 80146bc:	4618      	mov	r0, r3
 80146be:	f00d ff44 	bl	802254a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 80146c2:	6a3b      	ldr	r3, [r7, #32]
 80146c4:	3306      	adds	r3, #6
 80146c6:	461a      	mov	r2, r3
 80146c8:	f107 030c 	add.w	r3, r7, #12
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	6010      	str	r0, [r2, #0]
 80146d0:	889b      	ldrh	r3, [r3, #4]
 80146d2:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 80146d4:	6a3b      	ldr	r3, [r7, #32]
 80146d6:	2200      	movs	r2, #0
 80146d8:	f042 0208 	orr.w	r2, r2, #8
 80146dc:	731a      	strb	r2, [r3, #12]
 80146de:	2200      	movs	r2, #0
 80146e0:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	2245      	movs	r2, #69	@ 0x45
 80146e6:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 80146e8:	2338      	movs	r3, #56	@ 0x38
 80146ea:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 80146ec:	8b7b      	ldrh	r3, [r7, #26]
 80146ee:	021b      	lsls	r3, r3, #8
 80146f0:	b21a      	sxth	r2, r3
 80146f2:	8b7b      	ldrh	r3, [r7, #26]
 80146f4:	0a1b      	lsrs	r3, r3, #8
 80146f6:	b29b      	uxth	r3, r3
 80146f8:	b21b      	sxth	r3, r3
 80146fa:	4313      	orrs	r3, r2
 80146fc:	b21b      	sxth	r3, r3
 80146fe:	b29a      	uxth	r2, r3
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	2280      	movs	r2, #128	@ 0x80
 8014708:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 801470a:	69fb      	ldr	r3, [r7, #28]
 801470c:	2206      	movs	r2, #6
 801470e:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014714:	061a      	lsls	r2, r3, #24
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801471a:	021b      	lsls	r3, r3, #8
 801471c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014720:	431a      	orrs	r2, r3
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014726:	0a1b      	lsrs	r3, r3, #8
 8014728:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801472c:	431a      	orrs	r2, r3
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014732:	0e1b      	lsrs	r3, r3, #24
 8014734:	431a      	orrs	r2, r3
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014740:	021b      	lsls	r3, r3, #8
 8014742:	b21a      	sxth	r2, r3
 8014744:	687b      	ldr	r3, [r7, #4]
 8014746:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801474a:	0a1b      	lsrs	r3, r3, #8
 801474c:	b29b      	uxth	r3, r3
 801474e:	b21b      	sxth	r3, r3
 8014750:	4313      	orrs	r3, r2
 8014752:	b21b      	sxth	r3, r3
 8014754:	b29a      	uxth	r2, r3
 8014756:	6a3b      	ldr	r3, [r7, #32]
 8014758:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801475e:	021b      	lsls	r3, r3, #8
 8014760:	b21a      	sxth	r2, r3
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014766:	0a1b      	lsrs	r3, r3, #8
 8014768:	b29b      	uxth	r3, r3
 801476a:	b21b      	sxth	r3, r3
 801476c:	4313      	orrs	r3, r2
 801476e:	b21b      	sxth	r3, r3
 8014770:	b29a      	uxth	r2, r3
 8014772:	6a3b      	ldr	r3, [r7, #32]
 8014774:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2200      	movs	r2, #0
 801477a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014782:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8014786:	6a3b      	ldr	r3, [r7, #32]
 8014788:	2250      	movs	r2, #80	@ 0x50
 801478a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801478e:	6a3b      	ldr	r3, [r7, #32]
 8014790:	2202      	movs	r2, #2
 8014792:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014796:	6878      	ldr	r0, [r7, #4]
 8014798:	f000 fc3c 	bl	8015014 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 801479c:	6878      	ldr	r0, [r7, #4]
 801479e:	f7fe ff2b 	bl	80135f8 <prvTCPCreateWindow>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b01      	cmp	r3, #1
 80147a6:	d001      	beq.n	80147ac <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 80147a8:	2300      	movs	r3, #0
 80147aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 80147ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3734      	adds	r7, #52	@ 0x34
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80147b6:	bf00      	nop
 80147b8:	0802685c 	.word	0x0802685c

080147bc <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b086      	sub	sp, #24
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
 80147c4:	460b      	mov	r3, r1
 80147c6:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147cc:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 80147ce:	2328      	movs	r3, #40	@ 0x28
 80147d0:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 80147d2:	697b      	ldr	r3, [r7, #20]
 80147d4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80147d8:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80147da:	697b      	ldr	r3, [r7, #20]
 80147dc:	78fa      	ldrb	r2, [r7, #3]
 80147de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80147e2:	697b      	ldr	r3, [r7, #20]
 80147e4:	2250      	movs	r2, #80	@ 0x50
 80147e6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80147ea:	7bfb      	ldrb	r3, [r7, #15]
 80147ec:	f003 0302 	and.w	r3, r3, #2
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d02c      	beq.n	801484e <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 80147fa:	061a      	lsls	r2, r3, #24
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014802:	021b      	lsls	r3, r3, #8
 8014804:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014808:	431a      	orrs	r2, r3
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8014810:	0a1b      	lsrs	r3, r3, #8
 8014812:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014816:	431a      	orrs	r2, r3
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 801481e:	0e1b      	lsrs	r3, r3, #24
 8014820:	4313      	orrs	r3, r2
 8014822:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014824:	68bb      	ldr	r3, [r7, #8]
 8014826:	3301      	adds	r3, #1
 8014828:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801482a:	68bb      	ldr	r3, [r7, #8]
 801482c:	061a      	lsls	r2, r3, #24
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	021b      	lsls	r3, r3, #8
 8014832:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014836:	431a      	orrs	r2, r3
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	0a1b      	lsrs	r3, r3, #8
 801483c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014840:	431a      	orrs	r2, r3
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	0e1b      	lsrs	r3, r3, #24
 8014846:	431a      	orrs	r2, r3
 8014848:	697b      	ldr	r3, [r7, #20]
 801484a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 801484e:	2300      	movs	r3, #0
 8014850:	693a      	ldr	r2, [r7, #16]
 8014852:	6879      	ldr	r1, [r7, #4]
 8014854:	2000      	movs	r0, #0
 8014856:	f7fe fd73 	bl	8013340 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801485a:	2300      	movs	r3, #0
}
 801485c:	4618      	mov	r0, r3
 801485e:	3718      	adds	r7, #24
 8014860:	46bd      	mov	sp, r7
 8014862:	bd80      	pop	{r7, pc}

08014864 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8014864:	b5b0      	push	{r4, r5, r7, lr}
 8014866:	b0aa      	sub	sp, #168	@ 0xa8
 8014868:	af00      	add	r7, sp, #0
 801486a:	60f8      	str	r0, [r7, #12]
 801486c:	60b9      	str	r1, [r7, #8]
 801486e:	607a      	str	r2, [r7, #4]
 8014870:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014872:	2300      	movs	r3, #0
 8014874:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014878:	2300      	movs	r3, #0
 801487a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 801487e:	2300      	movs	r3, #0
 8014880:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 801488a:	2300      	movs	r3, #0
 801488c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8014896:	2300      	movs	r3, #0
 8014898:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 801489c:	2300      	movs	r3, #0
 801489e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 80148a2:	2328      	movs	r3, #40	@ 0x28
 80148a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 80148a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d103      	bne.n	80148b8 <prvTCPReturnPacket_IPV6+0x54>
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	f000 81ae 	beq.w	8014c14 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 80148b8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80148bc:	2b00      	cmp	r3, #0
 80148be:	d117      	bne.n	80148f0 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 80148c0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80148c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 80148c8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80148cc:	2238      	movs	r2, #56	@ 0x38
 80148ce:	2100      	movs	r1, #0
 80148d0:	4618      	mov	r0, r3
 80148d2:	f00d fe3a 	bl	802254a <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 80148dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80148e0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80148e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80148e6:	225a      	movs	r2, #90	@ 0x5a
 80148e8:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 80148ea:	2300      	movs	r3, #0
 80148ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 80148f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d114      	bne.n	8014922 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 80148f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80148fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80148fe:	4619      	mov	r1, r3
 8014900:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8014904:	f7f5 fcf2 	bl	800a2ec <pxDuplicateNetworkBufferWithDescriptor>
 8014908:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 801490c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014910:	2b00      	cmp	r3, #0
 8014912:	d003      	beq.n	801491c <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8014914:	2301      	movs	r3, #1
 8014916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801491a:	e002      	b.n	8014922 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 801491c:	48c0      	ldr	r0, [pc, #768]	@ (8014c20 <prvTCPReturnPacket_IPV6+0x3bc>)
 801491e:	f00d faeb 	bl	8021ef8 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8014922:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014926:	2b00      	cmp	r3, #0
 8014928:	f000 8175 	beq.w	8014c16 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801492c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014932:	2b00      	cmp	r3, #0
 8014934:	d103      	bne.n	801493e <prvTCPReturnPacket_IPV6+0xda>
 8014936:	219d      	movs	r1, #157	@ 0x9d
 8014938:	48ba      	ldr	r0, [pc, #744]	@ (8014c24 <prvTCPReturnPacket_IPV6+0x3c0>)
 801493a:	f7ec fffd 	bl	8001938 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 801493e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014944:	330e      	adds	r3, #14
 8014946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 801494a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801494e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014950:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8014954:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 801495c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014960:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014962:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014966:	330e      	adds	r3, #14
 8014968:	4413      	add	r3, r2
 801496a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 801496e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014974:	2b00      	cmp	r3, #0
 8014976:	d117      	bne.n	80149a8 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8014978:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801497c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014980:	68f8      	ldr	r0, [r7, #12]
 8014982:	f7fe ff9f 	bl	80138c4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8014986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801498a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801498c:	2b00      	cmp	r3, #0
 801498e:	d10b      	bne.n	80149a8 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8014990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014994:	2b00      	cmp	r3, #0
 8014996:	d003      	beq.n	80149a0 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8014998:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 801499c:	f002 fc04 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 80149a0:	2300      	movs	r3, #0
 80149a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 80149a6:	e136      	b.n	8014c16 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d025      	beq.n	80149fa <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80149ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80149b2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80149b6:	68f8      	ldr	r0, [r7, #12]
 80149b8:	f7fe fd02 	bl	80133c0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80149c2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80149c6:	68f8      	ldr	r0, [r7, #12]
 80149c8:	f7fe fd74 	bl	80134b4 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80149cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80149d0:	f103 0018 	add.w	r0, r3, #24
 80149d4:	68fb      	ldr	r3, [r7, #12]
 80149d6:	3354      	adds	r3, #84	@ 0x54
 80149d8:	2210      	movs	r2, #16
 80149da:	4619      	mov	r1, r3
 80149dc:	f00d fca8 	bl	8022330 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80149e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80149e4:	f103 0008 	add.w	r0, r3, #8
 80149e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80149ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80149ee:	3338      	adds	r3, #56	@ 0x38
 80149f0:	2210      	movs	r2, #16
 80149f2:	4619      	mov	r1, r3
 80149f4:	f00d fc9c 	bl	8022330 <memcpy>
 80149f8:	e02d      	b.n	8014a56 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 80149fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a06:	689a      	ldr	r2, [r3, #8]
 8014a08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a0c:	605a      	str	r2, [r3, #4]
 8014a0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a12:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014a14:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014a16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a1a:	3318      	adds	r3, #24
 8014a1c:	f107 0410 	add.w	r4, r7, #16
 8014a20:	6818      	ldr	r0, [r3, #0]
 8014a22:	6859      	ldr	r1, [r3, #4]
 8014a24:	689a      	ldr	r2, [r3, #8]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a2e:	f103 0018 	add.w	r0, r3, #24
 8014a32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a36:	3308      	adds	r3, #8
 8014a38:	2210      	movs	r2, #16
 8014a3a:	4619      	mov	r1, r3
 8014a3c:	f00d fc78 	bl	8022330 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a44:	3308      	adds	r3, #8
 8014a46:	461d      	mov	r5, r3
 8014a48:	f107 0410 	add.w	r4, r7, #16
 8014a4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014a4e:	6028      	str	r0, [r5, #0]
 8014a50:	6069      	str	r1, [r5, #4]
 8014a52:	60aa      	str	r2, [r5, #8]
 8014a54:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	b29b      	uxth	r3, r3
 8014a5a:	3b28      	subs	r3, #40	@ 0x28
 8014a5c:	b29b      	uxth	r3, r3
 8014a5e:	021b      	lsls	r3, r3, #8
 8014a60:	b29a      	uxth	r2, r3
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	3b28      	subs	r3, #40	@ 0x28
 8014a66:	0a1b      	lsrs	r3, r3, #8
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	4313      	orrs	r3, r2
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014a72:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a78:	781a      	ldrb	r2, [r3, #0]
 8014a7a:	785b      	ldrb	r3, [r3, #1]
 8014a7c:	021b      	lsls	r3, r3, #8
 8014a7e:	4313      	orrs	r3, r2
 8014a80:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8014a84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a88:	885b      	ldrh	r3, [r3, #2]
 8014a8a:	b29a      	uxth	r2, r3
 8014a8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a90:	801a      	strh	r2, [r3, #0]
 8014a92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014a96:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8014a9a:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8014a9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014aa0:	687a      	ldr	r2, [r7, #4]
 8014aa2:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8014aa4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014aaa:	f103 020e 	add.w	r2, r3, #14
 8014aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014ab2:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014ab4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014ab8:	3318      	adds	r3, #24
 8014aba:	f107 0420 	add.w	r4, r7, #32
 8014abe:	6818      	ldr	r0, [r3, #0]
 8014ac0:	6859      	ldr	r1, [r3, #4]
 8014ac2:	689a      	ldr	r2, [r3, #8]
 8014ac4:	68db      	ldr	r3, [r3, #12]
 8014ac6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8014ac8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014acc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8014ad0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8014ad4:	f107 0320 	add.w	r3, r7, #32
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7f6 ffa7 	bl	800ba2c <eNDGetCacheEntry>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8014ae4:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8014ae8:	2b01      	cmp	r3, #1
 8014aea:	d104      	bne.n	8014af6 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8014aec:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014af4:	e004      	b.n	8014b00 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014af6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014afa:	3306      	adds	r3, #6
 8014afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014b08:	2206      	movs	r2, #6
 8014b0a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8014b0e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014b12:	f00d fc0d 	bl	8022330 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b1c:	33e8      	adds	r3, #232	@ 0xe8
 8014b1e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014b26:	3306      	adds	r3, #6
 8014b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8014b2c:	2206      	movs	r2, #6
 8014b2e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8014b32:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014b36:	f00d fbfb 	bl	8022330 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8014b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b40:	2b3b      	cmp	r3, #59	@ 0x3b
 8014b42:	d81a      	bhi.n	8014b7a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014b44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014b4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014b4e:	e00c      	b.n	8014b6a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014b50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014b56:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014b5a:	4413      	add	r3, r2
 8014b5c:	2200      	movs	r2, #0
 8014b5e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014b60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014b64:	3301      	adds	r3, #1
 8014b66:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8014b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014b6e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014b70:	ddee      	ble.n	8014b50 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014b72:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b76:	223c      	movs	r2, #60	@ 0x3c
 8014b78:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8014b7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b80:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d104      	bne.n	8014b92 <prvTCPReturnPacket_IPV6+0x32e>
 8014b88:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8014b8c:	4825      	ldr	r0, [pc, #148]	@ (8014c24 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014b8e:	f7ec fed3 	bl	8001938 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8014b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b98:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014b9c:	68db      	ldr	r3, [r3, #12]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d104      	bne.n	8014bac <prvTCPReturnPacket_IPV6+0x348>
 8014ba2:	f240 1119 	movw	r1, #281	@ 0x119
 8014ba6:	481f      	ldr	r0, [pc, #124]	@ (8014c24 <prvTCPReturnPacket_IPV6+0x3c0>)
 8014ba8:	f7ec fec6 	bl	8001938 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8014bac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014bb2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8014bb6:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8014bb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8014bc0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8014bc4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8014bc6:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8014bc8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d122      	bne.n	8014c16 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8014bd0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014bd4:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8014bd8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8014bdc:	021b      	lsls	r3, r3, #8
 8014bde:	4313      	orrs	r3, r2
 8014be0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8014be4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014be8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014bea:	b29a      	uxth	r2, r3
 8014bec:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014bf0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8014bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014bf6:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8014bfa:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014bfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c00:	f103 0008 	add.w	r0, r3, #8
 8014c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014c08:	3318      	adds	r3, #24
 8014c0a:	2210      	movs	r2, #16
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	f00d fb8f 	bl	8022330 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 8014c12:	e000      	b.n	8014c16 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8014c14:	bf00      	nop
}
 8014c16:	bf00      	nop
 8014c18:	37a8      	adds	r7, #168	@ 0xa8
 8014c1a:	46bd      	mov	sp, r7
 8014c1c:	bdb0      	pop	{r4, r5, r7, pc}
 8014c1e:	bf00      	nop
 8014c20:	0802689c 	.word	0x0802689c
 8014c24:	080268c4 	.word	0x080268c4

08014c28 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014c28:	b590      	push	{r4, r7, lr}
 8014c2a:	b093      	sub	sp, #76	@ 0x4c
 8014c2c:	af00      	add	r7, sp, #0
 8014c2e:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014c30:	2300      	movs	r3, #0
 8014c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8014c34:	2300      	movs	r3, #0
 8014c36:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014c38:	2301      	movs	r3, #1
 8014c3a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8014c3c:	2300      	movs	r3, #0
 8014c3e:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014c40:	2300      	movs	r3, #0
 8014c42:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014c44:	2300      	movs	r3, #0
 8014c46:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014c48:	f107 0310 	add.w	r3, r7, #16
 8014c4c:	2206      	movs	r2, #6
 8014c4e:	2100      	movs	r1, #0
 8014c50:	4618      	mov	r0, r3
 8014c52:	f00d fc7a 	bl	802254a <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8014c56:	f107 0318 	add.w	r3, r7, #24
 8014c5a:	2210      	movs	r2, #16
 8014c5c:	2100      	movs	r1, #0
 8014c5e:	4618      	mov	r0, r3
 8014c60:	f00d fc73 	bl	802254a <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	3354      	adds	r3, #84	@ 0x54
 8014c68:	f107 0418 	add.w	r4, r7, #24
 8014c6c:	6818      	ldr	r0, [r3, #0]
 8014c6e:	6859      	ldr	r1, [r3, #4]
 8014c70:	689a      	ldr	r2, [r3, #8]
 8014c72:	68db      	ldr	r3, [r3, #12]
 8014c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8014c76:	f107 020c 	add.w	r2, r7, #12
 8014c7a:	f107 0110 	add.w	r1, r7, #16
 8014c7e:	f107 0318 	add.w	r3, r7, #24
 8014c82:	4618      	mov	r0, r3
 8014c84:	f7f6 fed2 	bl	800ba2c <eNDGetCacheEntry>
 8014c88:	4603      	mov	r3, r0
 8014c8a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 8014c8e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014c92:	68fa      	ldr	r2, [r7, #12]
 8014c94:	4619      	mov	r1, r3
 8014c96:	4881      	ldr	r0, [pc, #516]	@ (8014e9c <prvTCPPrepareConnect_IPV6+0x274>)
 8014c98:	f00d f92e 	bl	8021ef8 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d002      	beq.n	8014ca8 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014ca2:	68fa      	ldr	r2, [r7, #12]
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8014ca8:	6878      	ldr	r0, [r7, #4]
 8014caa:	f7f5 f887 	bl	8009dbc <uxIPHeaderSizeSocket>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8014cb2:	33a0      	adds	r3, #160	@ 0xa0
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	330a      	adds	r3, #10
 8014cba:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8014cbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d02c      	beq.n	8014d1e <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8014cca:	3301      	adds	r3, #1
 8014ccc:	b2da      	uxtb	r2, r3
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d001      	beq.n	8014cde <prvTCPPrepareConnect_IPV6+0xb6>
 8014cda:	4a71      	ldr	r2, [pc, #452]	@ (8014ea0 <prvTCPPrepareConnect_IPV6+0x278>)
 8014cdc:	e000      	b.n	8014ce0 <prvTCPPrepareConnect_IPV6+0xb8>
 8014cde:	4a71      	ldr	r2, [pc, #452]	@ (8014ea4 <prvTCPPrepareConnect_IPV6+0x27c>)
 8014ce0:	f107 0318 	add.w	r3, r7, #24
 8014ce4:	4619      	mov	r1, r3
 8014ce6:	4870      	ldr	r0, [pc, #448]	@ (8014ea8 <prvTCPPrepareConnect_IPV6+0x280>)
 8014ce8:	f00d f906 	bl	8021ef8 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	d012      	beq.n	8014d18 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 8014cf2:	2356      	movs	r3, #86	@ 0x56
 8014cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8014cf6:	2100      	movs	r1, #0
 8014cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014cfa:	f002 f9ed 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 8014cfe:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 8014d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d008      	beq.n	8014d18 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014d06:	68fa      	ldr	r2, [r7, #12]
 8014d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d0a:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 8014d0c:	f107 0318 	add.w	r3, r7, #24
 8014d10:	4619      	mov	r1, r3
 8014d12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014d14:	f7f7 f8f6 	bl	800bf04 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8014d1c:	e000      	b.n	8014d20 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 8014d1e:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014d20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d010      	beq.n	8014d48 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014d38:	f7ec fe1e 	bl	8001978 <ulApplicationGetNextSequenceNumber>
 8014d3c:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8014d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d101      	bne.n	8014d48 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8014d44:	2300      	movs	r3, #0
 8014d46:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8014d48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	d05d      	beq.n	8014e0a <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	33aa      	adds	r3, #170	@ 0xaa
 8014d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8014d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d56:	330e      	adds	r3, #14
 8014d58:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014d68:	f043 0308 	orr.w	r3, r3, #8
 8014d6c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	33aa      	adds	r3, #170	@ 0xaa
 8014d74:	225a      	movs	r2, #90	@ 0x5a
 8014d76:	2100      	movs	r1, #0
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f00d fbe6 	bl	802254a <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8014d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014d80:	3306      	adds	r3, #6
 8014d82:	461a      	mov	r2, r3
 8014d84:	f107 0310 	add.w	r3, r7, #16
 8014d88:	6818      	ldr	r0, [r3, #0]
 8014d8a:	6010      	str	r0, [r2, #0]
 8014d8c:	889b      	ldrh	r3, [r3, #4]
 8014d8e:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	7a1b      	ldrb	r3, [r3, #8]
 8014d94:	f003 0301 	and.w	r3, r3, #1
 8014d98:	b2db      	uxtb	r3, r3
 8014d9a:	2b00      	cmp	r3, #0
 8014d9c:	d035      	beq.n	8014e0a <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 8014d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014da0:	2200      	movs	r2, #0
 8014da2:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8014da6:	731a      	strb	r2, [r3, #12]
 8014da8:	2200      	movs	r2, #0
 8014daa:	f062 0222 	orn	r2, r2, #34	@ 0x22
 8014dae:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8014db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db2:	2260      	movs	r2, #96	@ 0x60
 8014db4:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8014db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014db8:	2200      	movs	r2, #0
 8014dba:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8014dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	709a      	strb	r2, [r3, #2]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8014dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dc8:	2200      	movs	r2, #0
 8014dca:	711a      	strb	r2, [r3, #4]
 8014dcc:	2200      	movs	r2, #0
 8014dce:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8014dd2:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8014dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014dd6:	2206      	movs	r2, #6
 8014dd8:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8014dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ddc:	2280      	movs	r2, #128	@ 0x80
 8014dde:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8014de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014de2:	f103 0008 	add.w	r0, r3, #8
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	3354      	adds	r3, #84	@ 0x54
 8014dea:	2210      	movs	r2, #16
 8014dec:	4619      	mov	r1, r3
 8014dee:	f00d fa9f 	bl	8022330 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8014df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014df4:	f103 0018 	add.w	r0, r3, #24
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	3328      	adds	r3, #40	@ 0x28
 8014dfc:	2210      	movs	r2, #16
 8014dfe:	4619      	mov	r1, r3
 8014e00:	f00d fa96 	bl	8022330 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014e08:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 8014e0a:	68fb      	ldr	r3, [r7, #12]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d03a      	beq.n	8014e86 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014e10:	68fa      	ldr	r2, [r7, #12]
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014e1c:	021b      	lsls	r3, r3, #8
 8014e1e:	b21a      	sxth	r2, r3
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014e26:	0a1b      	lsrs	r3, r3, #8
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	b21b      	sxth	r3, r3
 8014e2c:	4313      	orrs	r3, r2
 8014e2e:	b21b      	sxth	r3, r3
 8014e30:	b29a      	uxth	r2, r3
 8014e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e34:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014e3a:	021b      	lsls	r3, r3, #8
 8014e3c:	b21a      	sxth	r2, r3
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014e42:	0a1b      	lsrs	r3, r3, #8
 8014e44:	b29b      	uxth	r3, r3
 8014e46:	b21b      	sxth	r3, r3
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	b21b      	sxth	r3, r3
 8014e4c:	b29a      	uxth	r2, r3
 8014e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e50:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	2200      	movs	r2, #0
 8014e56:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8014e5e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e64:	2250      	movs	r2, #80	@ 0x50
 8014e66:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014e6a:	2202      	movs	r2, #2
 8014e6c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8014e6e:	6878      	ldr	r0, [r7, #4]
 8014e70:	f000 f8d0 	bl	8015014 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014e74:	6878      	ldr	r0, [r7, #4]
 8014e76:	f7fe fbbf 	bl	80135f8 <prvTCPCreateWindow>
 8014e7a:	4603      	mov	r3, r0
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	d007      	beq.n	8014e90 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 8014e80:	2300      	movs	r3, #0
 8014e82:	647b      	str	r3, [r7, #68]	@ 0x44
 8014e84:	e004      	b.n	8014e90 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8014e86:	4809      	ldr	r0, [pc, #36]	@ (8014eac <prvTCPPrepareConnect_IPV6+0x284>)
 8014e88:	f00d f836 	bl	8021ef8 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 8014e90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	374c      	adds	r7, #76	@ 0x4c
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd90      	pop	{r4, r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	08026904 	.word	0x08026904
 8014ea0:	0802692c 	.word	0x0802692c
 8014ea4:	08026930 	.word	0x08026930
 8014ea8:	08026934 	.word	0x08026934
 8014eac:	08026958 	.word	0x08026958

08014eb0 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b086      	sub	sp, #24
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	460b      	mov	r3, r1
 8014eba:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014ec0:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8014ec2:	233c      	movs	r3, #60	@ 0x3c
 8014ec4:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014ecc:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8014ece:	697b      	ldr	r3, [r7, #20]
 8014ed0:	78fa      	ldrb	r2, [r7, #3]
 8014ed2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	2250      	movs	r2, #80	@ 0x50
 8014eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8014ede:	7bfb      	ldrb	r3, [r7, #15]
 8014ee0:	f003 0302 	and.w	r3, r3, #2
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d02c      	beq.n	8014f42 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014ee8:	697b      	ldr	r3, [r7, #20]
 8014eea:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014eee:	061a      	lsls	r2, r3, #24
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014ef6:	021b      	lsls	r3, r3, #8
 8014ef8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014efc:	431a      	orrs	r2, r3
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014f04:	0a1b      	lsrs	r3, r3, #8
 8014f06:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014f0a:	431a      	orrs	r2, r3
 8014f0c:	697b      	ldr	r3, [r7, #20]
 8014f0e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014f12:	0e1b      	lsrs	r3, r3, #24
 8014f14:	4313      	orrs	r3, r2
 8014f16:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014f18:	68bb      	ldr	r3, [r7, #8]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	061a      	lsls	r2, r3, #24
 8014f22:	68bb      	ldr	r3, [r7, #8]
 8014f24:	021b      	lsls	r3, r3, #8
 8014f26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014f2a:	431a      	orrs	r2, r3
 8014f2c:	68bb      	ldr	r3, [r7, #8]
 8014f2e:	0a1b      	lsrs	r3, r3, #8
 8014f30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014f34:	431a      	orrs	r2, r3
 8014f36:	68bb      	ldr	r3, [r7, #8]
 8014f38:	0e1b      	lsrs	r3, r3, #24
 8014f3a:	431a      	orrs	r2, r3
 8014f3c:	697b      	ldr	r3, [r7, #20]
 8014f3e:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8014f42:	2300      	movs	r3, #0
 8014f44:	693a      	ldr	r2, [r7, #16]
 8014f46:	6879      	ldr	r1, [r7, #4]
 8014f48:	2000      	movs	r0, #0
 8014f4a:	f7fe f9f9 	bl	8013340 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8014f4e:	2300      	movs	r3, #0
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3718      	adds	r7, #24
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}

08014f58 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8014f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f5a:	b08d      	sub	sp, #52	@ 0x34
 8014f5c:	af08      	add	r7, sp, #32
 8014f5e:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014f64:	68fb      	ldr	r3, [r7, #12]
 8014f66:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d002      	beq.n	8014f74 <prvTCPFlagMeaning+0x1c>
 8014f6e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014f72:	e001      	b.n	8014f78 <prvTCPFlagMeaning+0x20>
 8014f74:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014f78:	68fb      	ldr	r3, [r7, #12]
 8014f7a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d001      	beq.n	8014f86 <prvTCPFlagMeaning+0x2e>
 8014f82:	2353      	movs	r3, #83	@ 0x53
 8014f84:	e000      	b.n	8014f88 <prvTCPFlagMeaning+0x30>
 8014f86:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8014f88:	68fa      	ldr	r2, [r7, #12]
 8014f8a:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 8014f8e:	2a00      	cmp	r2, #0
 8014f90:	d001      	beq.n	8014f96 <prvTCPFlagMeaning+0x3e>
 8014f92:	2252      	movs	r2, #82	@ 0x52
 8014f94:	e000      	b.n	8014f98 <prvTCPFlagMeaning+0x40>
 8014f96:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 8014f98:	68f9      	ldr	r1, [r7, #12]
 8014f9a:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 8014f9e:	2900      	cmp	r1, #0
 8014fa0:	d001      	beq.n	8014fa6 <prvTCPFlagMeaning+0x4e>
 8014fa2:	2150      	movs	r1, #80	@ 0x50
 8014fa4:	e000      	b.n	8014fa8 <prvTCPFlagMeaning+0x50>
 8014fa6:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 8014fa8:	68f8      	ldr	r0, [r7, #12]
 8014faa:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 8014fae:	2800      	cmp	r0, #0
 8014fb0:	d001      	beq.n	8014fb6 <prvTCPFlagMeaning+0x5e>
 8014fb2:	2041      	movs	r0, #65	@ 0x41
 8014fb4:	e000      	b.n	8014fb8 <prvTCPFlagMeaning+0x60>
 8014fb6:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 8014fb8:	68fc      	ldr	r4, [r7, #12]
 8014fba:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 8014fbe:	2c00      	cmp	r4, #0
 8014fc0:	d001      	beq.n	8014fc6 <prvTCPFlagMeaning+0x6e>
 8014fc2:	2455      	movs	r4, #85	@ 0x55
 8014fc4:	e000      	b.n	8014fc8 <prvTCPFlagMeaning+0x70>
 8014fc6:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 8014fc8:	68fd      	ldr	r5, [r7, #12]
 8014fca:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 8014fce:	2d00      	cmp	r5, #0
 8014fd0:	d001      	beq.n	8014fd6 <prvTCPFlagMeaning+0x7e>
 8014fd2:	2545      	movs	r5, #69	@ 0x45
 8014fd4:	e000      	b.n	8014fd8 <prvTCPFlagMeaning+0x80>
 8014fd6:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 8014fd8:	68fe      	ldr	r6, [r7, #12]
 8014fda:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 8014fde:	2e00      	cmp	r6, #0
 8014fe0:	d001      	beq.n	8014fe6 <prvTCPFlagMeaning+0x8e>
 8014fe2:	2643      	movs	r6, #67	@ 0x43
 8014fe4:	e000      	b.n	8014fe8 <prvTCPFlagMeaning+0x90>
 8014fe6:	262e      	movs	r6, #46	@ 0x2e
 8014fe8:	9606      	str	r6, [sp, #24]
 8014fea:	9505      	str	r5, [sp, #20]
 8014fec:	9404      	str	r4, [sp, #16]
 8014fee:	9003      	str	r0, [sp, #12]
 8014ff0:	9102      	str	r1, [sp, #8]
 8014ff2:	9201      	str	r2, [sp, #4]
 8014ff4:	9300      	str	r3, [sp, #0]
 8014ff6:	4663      	mov	r3, ip
 8014ff8:	4a04      	ldr	r2, [pc, #16]	@ (801500c <prvTCPFlagMeaning+0xb4>)
 8014ffa:	210a      	movs	r1, #10
 8014ffc:	4804      	ldr	r0, [pc, #16]	@ (8015010 <prvTCPFlagMeaning+0xb8>)
 8014ffe:	f00d ffa7 	bl	8022f50 <snprintf>
            return retString;
 8015002:	4b03      	ldr	r3, [pc, #12]	@ (8015010 <prvTCPFlagMeaning+0xb8>)
        }
 8015004:	4618      	mov	r0, r3
 8015006:	3714      	adds	r7, #20
 8015008:	46bd      	mov	sp, r7
 801500a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801500c:	08026984 	.word	0x08026984
 8015010:	200015a0 	.word	0x200015a0

08015014 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8015014:	b580      	push	{r7, lr}
 8015016:	b082      	sub	sp, #8
 8015018:	af00      	add	r7, sp, #0
 801501a:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	7a1b      	ldrb	r3, [r3, #8]
 8015020:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8015024:	b2db      	uxtb	r3, r3
 8015026:	2b00      	cmp	r3, #0
 8015028:	d002      	beq.n	8015030 <prvSocketSetMSS+0x1c>
 801502a:	2b01      	cmp	r3, #1
 801502c:	d004      	beq.n	8015038 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801502e:	e007      	b.n	8015040 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f000 f809 	bl	8015048 <prvSocketSetMSS_IPV4>
                    break;
 8015036:	e003      	b.n	8015040 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8015038:	6878      	ldr	r0, [r7, #4]
 801503a:	f000 f84b 	bl	80150d4 <prvSocketSetMSS_IPV6>
                    break;
 801503e:	bf00      	nop
        }
    }
 8015040:	bf00      	nop
 8015042:	3708      	adds	r7, #8
 8015044:	46bd      	mov	sp, r7
 8015046:	bd80      	pop	{r7, pc}

08015048 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b084      	sub	sp, #16
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8015050:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015054:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801505a:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 801505c:	68bb      	ldr	r3, [r7, #8]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d023      	beq.n	80150aa <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8015062:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8015066:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801506c:	061a      	lsls	r2, r3, #24
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015072:	021b      	lsls	r3, r3, #8
 8015074:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015078:	431a      	orrs	r2, r3
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801507e:	0a1b      	lsrs	r3, r3, #8
 8015080:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015084:	431a      	orrs	r2, r3
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801508a:	0e1b      	lsrs	r3, r3, #24
 801508c:	431a      	orrs	r2, r3
 801508e:	68bb      	ldr	r3, [r7, #8]
 8015090:	681b      	ldr	r3, [r3, #0]
 8015092:	405a      	eors	r2, r3
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	4013      	ands	r3, r2
 801509a:	2b00      	cmp	r3, #0
 801509c:	d005      	beq.n	80150aa <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 801509e:	68f9      	ldr	r1, [r7, #12]
 80150a0:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80150a4:	f7f5 fbbe 	bl	800a824 <FreeRTOS_min_uint32>
 80150a8:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80150b4:	68f9      	ldr	r1, [r7, #12]
 80150b6:	4806      	ldr	r0, [pc, #24]	@ (80150d0 <prvSocketSetMSS_IPV4+0x88>)
 80150b8:	f00c ff1e 	bl	8021ef8 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	b29a      	uxth	r2, r3
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80150c6:	bf00      	nop
 80150c8:	3710      	adds	r7, #16
 80150ca:	46bd      	mov	sp, r7
 80150cc:	bd80      	pop	{r7, pc}
 80150ce:	bf00      	nop
 80150d0:	08026998 	.word	0x08026998

080150d4 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80150d4:	b580      	push	{r7, lr}
 80150d6:	b090      	sub	sp, #64	@ 0x40
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80150dc:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80150e0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 80150e2:	2300      	movs	r3, #0
 80150e4:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d103      	bne.n	80150f4 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 80150ec:	481f      	ldr	r0, [pc, #124]	@ (801516c <prvSocketSetMSS_IPV6+0x98>)
 80150ee:	f00c ff03 	bl	8021ef8 <lUDPLoggingPrintf>

            break;
 80150f2:	e036      	b.n	8015162 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150f8:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 80150fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d018      	beq.n	8015132 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8015100:	2314      	movs	r3, #20
 8015102:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8015104:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015106:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801510a:	1a9b      	subs	r3, r3, r2
 801510c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	3354      	adds	r3, #84	@ 0x54
 8015112:	4618      	mov	r0, r3
 8015114:	f7f8 fdb4 	bl	800dc80 <xIPv6_GetIPType>
 8015118:	4603      	mov	r3, r0
 801511a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 801511e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8015122:	2b00      	cmp	r3, #0
 8015124:	d105      	bne.n	8015132 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8015126:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015128:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 801512c:	f7f5 fb7a 	bl	800a824 <FreeRTOS_min_uint32>
 8015130:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8015138:	f107 0208 	add.w	r2, r7, #8
 801513c:	2328      	movs	r3, #40	@ 0x28
 801513e:	200a      	movs	r0, #10
 8015140:	f7fa f8c0 	bl	800f2c4 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801514a:	f107 0208 	add.w	r2, r7, #8
 801514e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015150:	4807      	ldr	r0, [pc, #28]	@ (8015170 <prvSocketSetMSS_IPV6+0x9c>)
 8015152:	f00c fed1 	bl	8021ef8 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8015156:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015158:	b29a      	uxth	r2, r3
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8015160:	bf00      	nop
 8015162:	bf00      	nop
 8015164:	3740      	adds	r7, #64	@ 0x40
 8015166:	46bd      	mov	sp, r7
 8015168:	bd80      	pop	{r7, pc}
 801516a:	bf00      	nop
 801516c:	080269c4 	.word	0x080269c4
 8015170:	080269f0 	.word	0x080269f0

08015174 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8015174:	b480      	push	{r7}
 8015176:	b085      	sub	sp, #20
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
 801517c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 801517e:	2300      	movs	r3, #0
 8015180:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8015182:	683a      	ldr	r2, [r7, #0]
 8015184:	687b      	ldr	r3, [r7, #4]
 8015186:	1ad3      	subs	r3, r2, r3
 8015188:	2b00      	cmp	r3, #0
 801518a:	db01      	blt.n	8015190 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 801518c:	2301      	movs	r3, #1
 801518e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 8015190:	68fb      	ldr	r3, [r7, #12]
        }
 8015192:	4618      	mov	r0, r3
 8015194:	3714      	adds	r7, #20
 8015196:	46bd      	mov	sp, r7
 8015198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801519c:	4770      	bx	lr

0801519e <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 801519e:	b480      	push	{r7}
 80151a0:	b085      	sub	sp, #20
 80151a2:	af00      	add	r7, sp, #0
 80151a4:	6078      	str	r0, [r7, #4]
 80151a6:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80151a8:	2300      	movs	r3, #0
 80151aa:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 80151ac:	683a      	ldr	r2, [r7, #0]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	1ad3      	subs	r3, r2, r3
 80151b2:	3b01      	subs	r3, #1
 80151b4:	2b00      	cmp	r3, #0
 80151b6:	db01      	blt.n	80151bc <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 80151b8:	2301      	movs	r3, #1
 80151ba:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80151bc:	68fb      	ldr	r3, [r7, #12]
    }
 80151be:	4618      	mov	r0, r3
 80151c0:	3714      	adds	r7, #20
 80151c2:	46bd      	mov	sp, r7
 80151c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151c8:	4770      	bx	lr

080151ca <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 80151ca:	b480      	push	{r7}
 80151cc:	b085      	sub	sp, #20
 80151ce:	af00      	add	r7, sp, #0
 80151d0:	6078      	str	r0, [r7, #4]
 80151d2:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80151d4:	2300      	movs	r3, #0
 80151d6:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 80151d8:	687a      	ldr	r2, [r7, #4]
 80151da:	683b      	ldr	r3, [r7, #0]
 80151dc:	1ad3      	subs	r3, r2, r3
 80151de:	3b01      	subs	r3, #1
 80151e0:	2b00      	cmp	r3, #0
 80151e2:	db01      	blt.n	80151e8 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 80151e4:	2301      	movs	r3, #1
 80151e6:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80151e8:	68fb      	ldr	r3, [r7, #12]
    }
 80151ea:	4618      	mov	r0, r3
 80151ec:	3714      	adds	r7, #20
 80151ee:	46bd      	mov	sp, r7
 80151f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f4:	4770      	bx	lr

080151f6 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 80151f6:	b480      	push	{r7}
 80151f8:	b085      	sub	sp, #20
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
 80151fe:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8015200:	2300      	movs	r3, #0
 8015202:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8015204:	687a      	ldr	r2, [r7, #4]
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	2b00      	cmp	r3, #0
 801520c:	db01      	blt.n	8015212 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 801520e:	2301      	movs	r3, #1
 8015210:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8015212:	68fb      	ldr	r3, [r7, #12]
    }
 8015214:	4618      	mov	r0, r3
 8015216:	3714      	adds	r7, #20
 8015218:	46bd      	mov	sp, r7
 801521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801521e:	4770      	bx	lr

08015220 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8015220:	b580      	push	{r7, lr}
 8015222:	b082      	sub	sp, #8
 8015224:	af00      	add	r7, sp, #0
 8015226:	6078      	str	r0, [r7, #4]
 8015228:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	3308      	adds	r3, #8
 801522e:	461a      	mov	r2, r3
 8015230:	6839      	ldr	r1, [r7, #0]
 8015232:	6878      	ldr	r0, [r7, #4]
 8015234:	f000 f822 	bl	801527c <vListInsertGeneric>
        }
 8015238:	bf00      	nop
 801523a:	3708      	adds	r7, #8
 801523c:	46bd      	mov	sp, r7
 801523e:	bd80      	pop	{r7, pc}

08015240 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8015240:	b580      	push	{r7, lr}
 8015242:	b082      	sub	sp, #8
 8015244:	af00      	add	r7, sp, #0
 8015246:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8015248:	f7ef fa08 	bl	800465c <xTaskGetTickCount>
 801524c:	4602      	mov	r2, r0
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	601a      	str	r2, [r3, #0]
    }
 8015252:	bf00      	nop
 8015254:	3708      	adds	r7, #8
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}

0801525a <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 801525a:	b580      	push	{r7, lr}
 801525c:	b084      	sub	sp, #16
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8015262:	f7ef f9fb 	bl	800465c <xTaskGetTickCount>
 8015266:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	68fa      	ldr	r2, [r7, #12]
 801526e:	1ad3      	subs	r3, r2, r3
 8015270:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8015272:	68bb      	ldr	r3, [r7, #8]
    }
 8015274:	4618      	mov	r0, r3
 8015276:	3710      	adds	r7, #16
 8015278:	46bd      	mov	sp, r7
 801527a:	bd80      	pop	{r7, pc}

0801527c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 801527c:	b480      	push	{r7}
 801527e:	b085      	sub	sp, #20
 8015280:	af00      	add	r7, sp, #0
 8015282:	60f8      	str	r0, [r7, #12]
 8015284:	60b9      	str	r1, [r7, #8]
 8015286:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8015288:	68bb      	ldr	r3, [r7, #8]
 801528a:	687a      	ldr	r2, [r7, #4]
 801528c:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	689a      	ldr	r2, [r3, #8]
 8015292:	68bb      	ldr	r3, [r7, #8]
 8015294:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	689b      	ldr	r3, [r3, #8]
 801529a:	68ba      	ldr	r2, [r7, #8]
 801529c:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	68ba      	ldr	r2, [r7, #8]
 80152a2:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80152a4:	68bb      	ldr	r3, [r7, #8]
 80152a6:	68fa      	ldr	r2, [r7, #12]
 80152a8:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	1c5a      	adds	r2, r3, #1
 80152b0:	68fb      	ldr	r3, [r7, #12]
 80152b2:	601a      	str	r2, [r3, #0]
        }
 80152b4:	bf00      	nop
 80152b6:	3714      	adds	r7, #20
 80152b8:	46bd      	mov	sp, r7
 80152ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152be:	4770      	bx	lr

080152c0 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b082      	sub	sp, #8
 80152c4:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 80152c6:	4827      	ldr	r0, [pc, #156]	@ (8015364 <prvCreateSectors+0xa4>)
 80152c8:	f7ed ffe2 	bl	8003290 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 80152cc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80152d0:	f7f1 f830 	bl	8006334 <pvPortMalloc>
 80152d4:	4603      	mov	r3, r0
 80152d6:	4a24      	ldr	r2, [pc, #144]	@ (8015368 <prvCreateSectors+0xa8>)
 80152d8:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 80152da:	4b23      	ldr	r3, [pc, #140]	@ (8015368 <prvCreateSectors+0xa8>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d107      	bne.n	80152f2 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 80152e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80152e6:	4821      	ldr	r0, [pc, #132]	@ (801536c <prvCreateSectors+0xac>)
 80152e8:	f00c fe06 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 80152ec:	2300      	movs	r3, #0
 80152ee:	603b      	str	r3, [r7, #0]
 80152f0:	e032      	b.n	8015358 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 80152f2:	4b1d      	ldr	r3, [pc, #116]	@ (8015368 <prvCreateSectors+0xa8>)
 80152f4:	681b      	ldr	r3, [r3, #0]
 80152f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80152fa:	2100      	movs	r1, #0
 80152fc:	4618      	mov	r0, r3
 80152fe:	f00d f924 	bl	802254a <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015302:	2300      	movs	r3, #0
 8015304:	607b      	str	r3, [r7, #4]
 8015306:	e022      	b.n	801534e <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8015308:	4b17      	ldr	r3, [pc, #92]	@ (8015368 <prvCreateSectors+0xa8>)
 801530a:	6819      	ldr	r1, [r3, #0]
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	019a      	lsls	r2, r3, #6
 8015310:	4b15      	ldr	r3, [pc, #84]	@ (8015368 <prvCreateSectors+0xa8>)
 8015312:	6818      	ldr	r0, [r3, #0]
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	019b      	lsls	r3, r3, #6
 8015318:	4403      	add	r3, r0
 801531a:	440a      	add	r2, r1
 801531c:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 801531e:	4b12      	ldr	r3, [pc, #72]	@ (8015368 <prvCreateSectors+0xa8>)
 8015320:	6819      	ldr	r1, [r3, #0]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	019a      	lsls	r2, r3, #6
 8015326:	4b10      	ldr	r3, [pc, #64]	@ (8015368 <prvCreateSectors+0xa8>)
 8015328:	6818      	ldr	r0, [r3, #0]
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	019b      	lsls	r3, r3, #6
 801532e:	4403      	add	r3, r0
 8015330:	440a      	add	r2, r1
 8015332:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8015334:	4b0c      	ldr	r3, [pc, #48]	@ (8015368 <prvCreateSectors+0xa8>)
 8015336:	681a      	ldr	r2, [r3, #0]
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	019b      	lsls	r3, r3, #6
 801533c:	4413      	add	r3, r2
 801533e:	332c      	adds	r3, #44	@ 0x2c
 8015340:	4619      	mov	r1, r3
 8015342:	4808      	ldr	r0, [pc, #32]	@ (8015364 <prvCreateSectors+0xa4>)
 8015344:	f7ff ff6c 	bl	8015220 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	3301      	adds	r3, #1
 801534c:	607b      	str	r3, [r7, #4]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	2b3f      	cmp	r3, #63	@ 0x3f
 8015352:	ddd9      	ble.n	8015308 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8015354:	2301      	movs	r3, #1
 8015356:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8015358:	683b      	ldr	r3, [r7, #0]
        }
 801535a:	4618      	mov	r0, r3
 801535c:	3708      	adds	r7, #8
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	200015b0 	.word	0x200015b0
 8015368:	200015ac 	.word	0x200015ac
 801536c:	08026a20 	.word	0x08026a20

08015370 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8015370:	b480      	push	{r7}
 8015372:	b087      	sub	sp, #28
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
 8015378:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 801537a:	2300      	movs	r3, #0
 801537c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	33ac      	adds	r3, #172	@ 0xac
 8015382:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	685b      	ldr	r3, [r3, #4]
 8015388:	617b      	str	r3, [r7, #20]
 801538a:	e00d      	b.n	80153a8 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801538c:	697b      	ldr	r3, [r7, #20]
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 8015392:	68bb      	ldr	r3, [r7, #8]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	683a      	ldr	r2, [r7, #0]
 8015398:	429a      	cmp	r2, r3
 801539a:	d102      	bne.n	80153a2 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 801539c:	68bb      	ldr	r3, [r7, #8]
 801539e:	613b      	str	r3, [r7, #16]
                    break;
 80153a0:	e006      	b.n	80153b0 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 80153a2:	697b      	ldr	r3, [r7, #20]
 80153a4:	685b      	ldr	r3, [r3, #4]
 80153a6:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 80153a8:	697a      	ldr	r2, [r7, #20]
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	429a      	cmp	r2, r3
 80153ae:	d1ed      	bne.n	801538c <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 80153b0:	693b      	ldr	r3, [r7, #16]
        }
 80153b2:	4618      	mov	r0, r3
 80153b4:	371c      	adds	r7, #28
 80153b6:	46bd      	mov	sp, r7
 80153b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153bc:	4770      	bx	lr
	...

080153c0 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 80153c0:	b580      	push	{r7, lr}
 80153c2:	b088      	sub	sp, #32
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	60f8      	str	r0, [r7, #12]
 80153c8:	60b9      	str	r1, [r7, #8]
 80153ca:	607a      	str	r2, [r7, #4]
 80153cc:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 80153ce:	4b33      	ldr	r3, [pc, #204]	@ (801549c <xTCPWindowNew+0xdc>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d10c      	bne.n	80153f0 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 80153d6:	683b      	ldr	r3, [r7, #0]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d001      	beq.n	80153e0 <xTCPWindowNew+0x20>
 80153dc:	2352      	movs	r3, #82	@ 0x52
 80153de:	e000      	b.n	80153e2 <xTCPWindowNew+0x22>
 80153e0:	2354      	movs	r3, #84	@ 0x54
 80153e2:	4619      	mov	r1, r3
 80153e4:	482e      	ldr	r0, [pc, #184]	@ (80154a0 <xTCPWindowNew+0xe0>)
 80153e6:	f00c fd87 	bl	8021ef8 <lUDPLoggingPrintf>
                pxSegment = NULL;
 80153ea:	2300      	movs	r3, #0
 80153ec:	61fb      	str	r3, [r7, #28]
 80153ee:	e04f      	b.n	8015490 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 80153f0:	4b2a      	ldr	r3, [pc, #168]	@ (801549c <xTCPWindowNew+0xdc>)
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 80153f6:	69bb      	ldr	r3, [r7, #24]
 80153f8:	68db      	ldr	r3, [r3, #12]
 80153fa:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 80153fc:	69bb      	ldr	r3, [r7, #24]
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d104      	bne.n	801540c <xTCPWindowNew+0x4c>
 8015402:	f240 2125 	movw	r1, #549	@ 0x225
 8015406:	4827      	ldr	r0, [pc, #156]	@ (80154a4 <xTCPWindowNew+0xe4>)
 8015408:	f7ec fa96 	bl	8001938 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 801540c:	69fb      	ldr	r3, [r7, #28]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d104      	bne.n	801541c <xTCPWindowNew+0x5c>
 8015412:	f240 2126 	movw	r1, #550	@ 0x226
 8015416:	4823      	ldr	r0, [pc, #140]	@ (80154a4 <xTCPWindowNew+0xe4>)
 8015418:	f7ec fa8e 	bl	8001938 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 801541c:	69b8      	ldr	r0, [r7, #24]
 801541e:	f7ed ffc1 	bl	80033a4 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8015422:	683b      	ldr	r3, [r7, #0]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d006      	beq.n	8015436 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	33a4      	adds	r3, #164	@ 0xa4
 801542c:	69b9      	ldr	r1, [r7, #24]
 801542e:	4618      	mov	r0, r3
 8015430:	f7ff fef6 	bl	8015220 <vListInsertFifo>
 8015434:	e005      	b.n	8015442 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	3390      	adds	r3, #144	@ 0x90
 801543a:	69b9      	ldr	r1, [r7, #24]
 801543c:	4618      	mov	r0, r3
 801543e:	f7ff feef 	bl	8015220 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8015442:	69fb      	ldr	r3, [r7, #28]
 8015444:	3310      	adds	r3, #16
 8015446:	4618      	mov	r0, r3
 8015448:	f7ff fefa 	bl	8015240 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 801544c:	69fb      	ldr	r3, [r7, #28]
 801544e:	2200      	movs	r2, #0
 8015450:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d001      	beq.n	801545c <xTCPWindowNew+0x9c>
 8015458:	2101      	movs	r1, #1
 801545a:	e000      	b.n	801545e <xTCPWindowNew+0x9e>
 801545c:	2100      	movs	r1, #0
 801545e:	69fa      	ldr	r2, [r7, #28]
 8015460:	7d93      	ldrb	r3, [r2, #22]
 8015462:	f361 0382 	bfi	r3, r1, #2, #1
 8015466:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 801546e:	69fb      	ldr	r3, [r7, #28]
 8015470:	687a      	ldr	r2, [r7, #4]
 8015472:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8015474:	69fb      	ldr	r3, [r7, #28]
 8015476:	68ba      	ldr	r2, [r7, #8]
 8015478:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 801547a:	4b08      	ldr	r3, [pc, #32]	@ (801549c <xTCPWindowNew+0xdc>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8015480:	4b09      	ldr	r3, [pc, #36]	@ (80154a8 <xTCPWindowNew+0xe8>)
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	697a      	ldr	r2, [r7, #20]
 8015486:	429a      	cmp	r2, r3
 8015488:	d202      	bcs.n	8015490 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 801548a:	4a07      	ldr	r2, [pc, #28]	@ (80154a8 <xTCPWindowNew+0xe8>)
 801548c:	697b      	ldr	r3, [r7, #20]
 801548e:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8015490:	69fb      	ldr	r3, [r7, #28]
        }
 8015492:	4618      	mov	r0, r3
 8015494:	3720      	adds	r7, #32
 8015496:	46bd      	mov	sp, r7
 8015498:	bd80      	pop	{r7, pc}
 801549a:	bf00      	nop
 801549c:	200015b0 	.word	0x200015b0
 80154a0:	08026a44 	.word	0x08026a44
 80154a4:	08026a74 	.word	0x08026a74
 80154a8:	2000001c 	.word	0x2000001c

080154ac <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b084      	sub	sp, #16
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d002      	beq.n	80154c4 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 80154be:	2300      	movs	r3, #0
 80154c0:	60fb      	str	r3, [r7, #12]
 80154c2:	e01e      	b.n	8015502 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	691b      	ldr	r3, [r3, #16]
 80154c8:	1c5a      	adds	r2, r3, #1
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	699b      	ldr	r3, [r3, #24]
 80154ce:	4619      	mov	r1, r3
 80154d0:	4610      	mov	r0, r2
 80154d2:	f7ff fe90 	bl	80151f6 <xSequenceGreaterThanOrEqual>
 80154d6:	4603      	mov	r3, r0
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d002      	beq.n	80154e2 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 80154dc:	2301      	movs	r3, #1
 80154de:	60fb      	str	r3, [r7, #12]
 80154e0:	e00f      	b.n	8015502 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	691a      	ldr	r2, [r3, #16]
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	68db      	ldr	r3, [r3, #12]
 80154ea:	1ad1      	subs	r1, r2, r3
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	699a      	ldr	r2, [r3, #24]
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	1ad3      	subs	r3, r2, r3
 80154f6:	461a      	mov	r2, r3
 80154f8:	4804      	ldr	r0, [pc, #16]	@ (801550c <xTCPWindowRxEmpty+0x60>)
 80154fa:	f00c fcfd 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 80154fe:	2300      	movs	r3, #0
 8015500:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8015502:	68fb      	ldr	r3, [r7, #12]
        }
 8015504:	4618      	mov	r0, r3
 8015506:	3710      	adds	r7, #16
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}
 801550c:	08026aa4 	.word	0x08026aa4

08015510 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	2b00      	cmp	r3, #0
 801551e:	d102      	bne.n	8015526 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8015520:	2300      	movs	r3, #0
 8015522:	60fb      	str	r3, [r7, #12]
 8015524:	e008      	b.n	8015538 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	68db      	ldr	r3, [r3, #12]
 801552a:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801552c:	68bb      	ldr	r3, [r7, #8]
 801552e:	68db      	ldr	r3, [r3, #12]
 8015530:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8015532:	68b8      	ldr	r0, [r7, #8]
 8015534:	f7ed ff36 	bl	80033a4 <uxListRemove>
            }

            return pxSegment;
 8015538:	68fb      	ldr	r3, [r7, #12]
        }
 801553a:	4618      	mov	r0, r3
 801553c:	3710      	adds	r7, #16
 801553e:	46bd      	mov	sp, r7
 8015540:	bd80      	pop	{r7, pc}

08015542 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8015542:	b480      	push	{r7}
 8015544:	b085      	sub	sp, #20
 8015546:	af00      	add	r7, sp, #0
 8015548:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	2b00      	cmp	r3, #0
 8015550:	d102      	bne.n	8015558 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8015552:	2300      	movs	r3, #0
 8015554:	60fb      	str	r3, [r7, #12]
 8015556:	e005      	b.n	8015564 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801555e:	68bb      	ldr	r3, [r7, #8]
 8015560:	68db      	ldr	r3, [r3, #12]
 8015562:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8015564:	68fb      	ldr	r3, [r7, #12]
        }
 8015566:	4618      	mov	r0, r3
 8015568:	3714      	adds	r7, #20
 801556a:	46bd      	mov	sp, r7
 801556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015570:	4770      	bx	lr
	...

08015574 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8015574:	b580      	push	{r7, lr}
 8015576:	b082      	sub	sp, #8
 8015578:	af00      	add	r7, sp, #0
 801557a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015580:	2b00      	cmp	r3, #0
 8015582:	d004      	beq.n	801558e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8015584:	687b      	ldr	r3, [r7, #4]
 8015586:	3318      	adds	r3, #24
 8015588:	4618      	mov	r0, r3
 801558a:	f7ed ff0b 	bl	80033a4 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	2200      	movs	r2, #0
 8015592:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	2200      	movs	r2, #0
 8015598:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2200      	movs	r2, #0
 801559e:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d004      	beq.n	80155b2 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	332c      	adds	r3, #44	@ 0x2c
 80155ac:	4618      	mov	r0, r3
 80155ae:	f7ed fef9 	bl	80033a4 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	332c      	adds	r3, #44	@ 0x2c
 80155b6:	4619      	mov	r1, r3
 80155b8:	4803      	ldr	r0, [pc, #12]	@ (80155c8 <vTCPWindowFree+0x54>)
 80155ba:	f7ff fe31 	bl	8015220 <vListInsertFifo>
        }
 80155be:	bf00      	nop
 80155c0:	3708      	adds	r7, #8
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	200015b0 	.word	0x200015b0

080155cc <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 80155cc:	b580      	push	{r7, lr}
 80155ce:	b086      	sub	sp, #24
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 80155d4:	2300      	movs	r3, #0
 80155d6:	613b      	str	r3, [r7, #16]
 80155d8:	e01d      	b.n	8015616 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 80155da:	693b      	ldr	r3, [r7, #16]
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d003      	beq.n	80155e8 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	33a4      	adds	r3, #164	@ 0xa4
 80155e4:	617b      	str	r3, [r7, #20]
 80155e6:	e002      	b.n	80155ee <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	3390      	adds	r3, #144	@ 0x90
 80155ec:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	689b      	ldr	r3, [r3, #8]
 80155f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155f6:	d10b      	bne.n	8015610 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 80155f8:	e006      	b.n	8015608 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 80155fa:	697b      	ldr	r3, [r7, #20]
 80155fc:	68db      	ldr	r3, [r3, #12]
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8015602:	68f8      	ldr	r0, [r7, #12]
 8015604:	f7ff ffb6 	bl	8015574 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8015608:	697b      	ldr	r3, [r7, #20]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	2b00      	cmp	r3, #0
 801560e:	d1f4      	bne.n	80155fa <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8015610:	693b      	ldr	r3, [r7, #16]
 8015612:	3301      	adds	r3, #1
 8015614:	613b      	str	r3, [r7, #16]
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	2b01      	cmp	r3, #1
 801561a:	ddde      	ble.n	80155da <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 801561c:	bf00      	nop
 801561e:	bf00      	nop
 8015620:	3718      	adds	r7, #24
 8015622:	46bd      	mov	sp, r7
 8015624:	bd80      	pop	{r7, pc}
	...

08015628 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8015628:	b580      	push	{r7, lr}
 801562a:	b086      	sub	sp, #24
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
 8015634:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8015636:	2301      	movs	r3, #1
 8015638:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 801563a:	4b1d      	ldr	r3, [pc, #116]	@ (80156b0 <xTCPWindowCreate+0x88>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	2b00      	cmp	r3, #0
 8015640:	d102      	bne.n	8015648 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8015642:	f7ff fe3d 	bl	80152c0 <prvCreateSectors>
 8015646:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	3390      	adds	r3, #144	@ 0x90
 801564c:	4618      	mov	r0, r3
 801564e:	f7ed fe1f 	bl	8003290 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	33a4      	adds	r3, #164	@ 0xa4
 8015656:	4618      	mov	r0, r3
 8015658:	f7ed fe1a 	bl	8003290 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	3340      	adds	r3, #64	@ 0x40
 8015660:	4618      	mov	r0, r3
 8015662:	f7ed fe15 	bl	8003290 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	3354      	adds	r3, #84	@ 0x54
 801566a:	4618      	mov	r0, r3
 801566c:	f7ed fe10 	bl	8003290 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	3368      	adds	r3, #104	@ 0x68
 8015674:	4618      	mov	r0, r3
 8015676:	f7ed fe0b 	bl	8003290 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 801567a:	4b0e      	ldr	r3, [pc, #56]	@ (80156b4 <xTCPWindowCreate+0x8c>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	2b00      	cmp	r3, #0
 8015680:	d004      	beq.n	801568c <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	68b9      	ldr	r1, [r7, #8]
 8015686:	480c      	ldr	r0, [pc, #48]	@ (80156b8 <xTCPWindowCreate+0x90>)
 8015688:	f00c fc36 	bl	8021ef8 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	68ba      	ldr	r2, [r7, #8]
 8015690:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8015692:	68fb      	ldr	r3, [r7, #12]
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8015698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801569a:	6a3a      	ldr	r2, [r7, #32]
 801569c:	6839      	ldr	r1, [r7, #0]
 801569e:	68f8      	ldr	r0, [r7, #12]
 80156a0:	f000 f80c 	bl	80156bc <vTCPWindowInit>

        return xReturn;
 80156a4:	697b      	ldr	r3, [r7, #20]
    }
 80156a6:	4618      	mov	r0, r3
 80156a8:	3718      	adds	r7, #24
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}
 80156ae:	bf00      	nop
 80156b0:	200015ac 	.word	0x200015ac
 80156b4:	200015c4 	.word	0x200015c4
 80156b8:	08026ad4 	.word	0x08026ad4

080156bc <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 80156bc:	b480      	push	{r7}
 80156be:	b087      	sub	sp, #28
 80156c0:	af00      	add	r7, sp, #0
 80156c2:	60f8      	str	r0, [r7, #12]
 80156c4:	60b9      	str	r1, [r7, #8]
 80156c6:	607a      	str	r2, [r7, #4]
 80156c8:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 80156ca:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80156ce:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	2200      	movs	r2, #0
 80156d4:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 80156d6:	68fa      	ldr	r2, [r7, #12]
 80156d8:	7813      	ldrb	r3, [r2, #0]
 80156da:	f043 0301 	orr.w	r3, r3, #1
 80156de:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d024      	beq.n	8015730 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d004      	beq.n	80156fa <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	b29a      	uxth	r2, r3
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015700:	461a      	mov	r2, r3
 8015702:	683b      	ldr	r3, [r7, #0]
 8015704:	4293      	cmp	r3, r2
 8015706:	d304      	bcc.n	8015712 <vTCPWindowInit+0x56>
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801570e:	2b00      	cmp	r3, #0
 8015710:	d10e      	bne.n	8015730 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8015712:	68fb      	ldr	r3, [r7, #12]
 8015714:	685a      	ldr	r2, [r3, #4]
 8015716:	683b      	ldr	r3, [r7, #0]
 8015718:	fbb2 f3f3 	udiv	r3, r2, r3
 801571c:	683a      	ldr	r2, [r7, #0]
 801571e:	fb03 f202 	mul.w	r2, r3, r2
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8015726:	683b      	ldr	r3, [r7, #0]
 8015728:	b29a      	uxth	r2, r3
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	697a      	ldr	r2, [r7, #20]
 8015734:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	68ba      	ldr	r2, [r7, #8]
 801573a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	68ba      	ldr	r2, [r7, #8]
 8015740:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	68ba      	ldr	r2, [r7, #8]
 8015746:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	687a      	ldr	r2, [r7, #4]
 8015752:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	687a      	ldr	r2, [r7, #4]
 8015758:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	687a      	ldr	r2, [r7, #4]
 801575e:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8015760:	68fb      	ldr	r3, [r7, #12]
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8015766:	bf00      	nop
 8015768:	371c      	adds	r7, #28
 801576a:	46bd      	mov	sp, r7
 801576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015770:	4770      	bx	lr
	...

08015774 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8015774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015776:	b08f      	sub	sp, #60	@ 0x3c
 8015778:	af04      	add	r7, sp, #16
 801577a:	60f8      	str	r0, [r7, #12]
 801577c:	60b9      	str	r1, [r7, #8]
 801577e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8015780:	2300      	movs	r3, #0
 8015782:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8015784:	68ba      	ldr	r2, [r7, #8]
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	4413      	add	r3, r2
 801578a:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	33ac      	adds	r3, #172	@ 0xac
 8015790:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8015792:	69bb      	ldr	r3, [r7, #24]
 8015794:	685b      	ldr	r3, [r3, #4]
 8015796:	623b      	str	r3, [r7, #32]
 8015798:	e027      	b.n	80157ea <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801579a:	6a3b      	ldr	r3, [r7, #32]
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80157a0:	697b      	ldr	r3, [r7, #20]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	68b9      	ldr	r1, [r7, #8]
 80157a6:	4618      	mov	r0, r3
 80157a8:	f7ff fd25 	bl	80151f6 <xSequenceGreaterThanOrEqual>
 80157ac:	4603      	mov	r3, r0
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d018      	beq.n	80157e4 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 80157b2:	697b      	ldr	r3, [r7, #20]
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	69f9      	ldr	r1, [r7, #28]
 80157b8:	4618      	mov	r0, r3
 80157ba:	f7ff fcf0 	bl	801519e <xSequenceLessThan>
 80157be:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00f      	beq.n	80157e4 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 80157c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d00a      	beq.n	80157e0 <xTCPWindowRxConfirm+0x6c>
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	681a      	ldr	r2, [r3, #0]
 80157ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	4619      	mov	r1, r3
 80157d4:	4610      	mov	r0, r2
 80157d6:	f7ff fce2 	bl	801519e <xSequenceLessThan>
 80157da:	4603      	mov	r3, r0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d001      	beq.n	80157e4 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80157e4:	6a3b      	ldr	r3, [r7, #32]
 80157e6:	685b      	ldr	r3, [r3, #4]
 80157e8:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80157ea:	6a3a      	ldr	r2, [r7, #32]
 80157ec:	69bb      	ldr	r3, [r7, #24]
 80157ee:	429a      	cmp	r2, r3
 80157f0:	d1d3      	bne.n	801579a <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 80157f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d030      	beq.n	801585a <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 80157f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157fa:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 80157fc:	68ba      	ldr	r2, [r7, #8]
 80157fe:	429a      	cmp	r2, r3
 8015800:	d104      	bne.n	801580c <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8015802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015804:	689a      	ldr	r2, [r3, #8]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	429a      	cmp	r2, r3
 801580a:	d026      	beq.n	801585a <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015812:	461e      	mov	r6, r3
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	68db      	ldr	r3, [r3, #12]
 8015818:	68ba      	ldr	r2, [r7, #8]
 801581a:	1ad5      	subs	r5, r2, r3
 801581c:	68ba      	ldr	r2, [r7, #8]
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	441a      	add	r2, r3
 8015822:	68fb      	ldr	r3, [r7, #12]
 8015824:	68db      	ldr	r3, [r3, #12]
 8015826:	1ad3      	subs	r3, r2, r3
 8015828:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801582a:	6811      	ldr	r1, [r2, #0]
 801582c:	68fa      	ldr	r2, [r7, #12]
 801582e:	68d2      	ldr	r2, [r2, #12]
 8015830:	1a8a      	subs	r2, r1, r2
 8015832:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015834:	6889      	ldr	r1, [r1, #8]
 8015836:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015838:	6800      	ldr	r0, [r0, #0]
 801583a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 801583c:	68a4      	ldr	r4, [r4, #8]
 801583e:	4404      	add	r4, r0
 8015840:	68f8      	ldr	r0, [r7, #12]
 8015842:	68c0      	ldr	r0, [r0, #12]
 8015844:	1a20      	subs	r0, r4, r0
 8015846:	9003      	str	r0, [sp, #12]
 8015848:	9102      	str	r1, [sp, #8]
 801584a:	9201      	str	r2, [sp, #4]
 801584c:	9300      	str	r3, [sp, #0]
 801584e:	687b      	ldr	r3, [r7, #4]
 8015850:	462a      	mov	r2, r5
 8015852:	4631      	mov	r1, r6
 8015854:	4803      	ldr	r0, [pc, #12]	@ (8015864 <xTCPWindowRxConfirm+0xf0>)
 8015856:	f00c fb4f 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 801585a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 801585c:	4618      	mov	r0, r3
 801585e:	372c      	adds	r7, #44	@ 0x2c
 8015860:	46bd      	mov	sp, r7
 8015862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015864:	08026b04 	.word	0x08026b04

08015868 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8015868:	b5b0      	push	{r4, r5, r7, lr}
 801586a:	b08a      	sub	sp, #40	@ 0x28
 801586c:	af04      	add	r7, sp, #16
 801586e:	6078      	str	r0, [r7, #4]
 8015870:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	691b      	ldr	r3, [r3, #16]
 8015876:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8015878:	693a      	ldr	r2, [r7, #16]
 801587a:	683b      	ldr	r3, [r7, #0]
 801587c:	4413      	add	r3, r2
 801587e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015886:	2b00      	cmp	r3, #0
 8015888:	d04e      	beq.n	8015928 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 801588a:	697b      	ldr	r3, [r7, #20]
 801588c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 801588e:	683a      	ldr	r2, [r7, #0]
 8015890:	6939      	ldr	r1, [r7, #16]
 8015892:	6878      	ldr	r0, [r7, #4]
 8015894:	f7ff ff6e 	bl	8015774 <xTCPWindowRxConfirm>
 8015898:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	2b00      	cmp	r3, #0
 801589e:	d002      	beq.n	80158a6 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 80158a0:	68b8      	ldr	r0, [r7, #8]
 80158a2:	f7ff fe67 	bl	8015574 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d1f0      	bne.n	801588e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 80158ac:	6979      	ldr	r1, [r7, #20]
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f7ff fd5e 	bl	8015370 <xTCPWindowRxFind>
 80158b4:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 80158b6:	68bb      	ldr	r3, [r7, #8]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d009      	beq.n	80158d0 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 80158bc:	68bb      	ldr	r3, [r7, #8]
 80158be:	689b      	ldr	r3, [r3, #8]
 80158c0:	461a      	mov	r2, r3
 80158c2:	697b      	ldr	r3, [r7, #20]
 80158c4:	4413      	add	r3, r2
 80158c6:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 80158c8:	68b8      	ldr	r0, [r7, #8]
 80158ca:	f7ff fe53 	bl	8015574 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 80158ce:	e7ed      	b.n	80158ac <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 80158d0:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 80158d2:	68fa      	ldr	r2, [r7, #12]
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d026      	beq.n	8015928 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 80158da:	697a      	ldr	r2, [r7, #20]
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	1ad2      	subs	r2, r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 80158e4:	4b14      	ldr	r3, [pc, #80]	@ (8015938 <prvTCPWindowRx_ExpectedRX+0xd0>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	dd1d      	ble.n	8015928 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 80158ec:	687b      	ldr	r3, [r7, #4]
 80158ee:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80158f2:	461c      	mov	r4, r3
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80158fa:	461d      	mov	r5, r3
 80158fc:	687b      	ldr	r3, [r7, #4]
 80158fe:	68db      	ldr	r3, [r3, #12]
 8015900:	693a      	ldr	r2, [r7, #16]
 8015902:	1ad0      	subs	r0, r2, r3
 8015904:	687b      	ldr	r3, [r7, #4]
 8015906:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015908:	687a      	ldr	r2, [r7, #4]
 801590a:	68d2      	ldr	r2, [r2, #12]
 801590c:	68f9      	ldr	r1, [r7, #12]
 801590e:	1a8a      	subs	r2, r1, r2
 8015910:	6879      	ldr	r1, [r7, #4]
 8015912:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8015916:	9102      	str	r1, [sp, #8]
 8015918:	9201      	str	r2, [sp, #4]
 801591a:	9300      	str	r3, [sp, #0]
 801591c:	4603      	mov	r3, r0
 801591e:	462a      	mov	r2, r5
 8015920:	4621      	mov	r1, r4
 8015922:	4806      	ldr	r0, [pc, #24]	@ (801593c <prvTCPWindowRx_ExpectedRX+0xd4>)
 8015924:	f00c fae8 	bl	8021ef8 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	697a      	ldr	r2, [r7, #20]
 801592c:	611a      	str	r2, [r3, #16]
        }
 801592e:	bf00      	nop
 8015930:	3718      	adds	r7, #24
 8015932:	46bd      	mov	sp, r7
 8015934:	bdb0      	pop	{r4, r5, r7, pc}
 8015936:	bf00      	nop
 8015938:	200015c4 	.word	0x200015c4
 801593c:	08026b44 	.word	0x08026b44

08015940 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8015940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015942:	b08f      	sub	sp, #60	@ 0x3c
 8015944:	af04      	add	r7, sp, #16
 8015946:	60f8      	str	r0, [r7, #12]
 8015948:	60b9      	str	r1, [r7, #8]
 801594a:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 801594c:	f04f 33ff 	mov.w	r3, #4294967295
 8015950:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8015952:	68ba      	ldr	r2, [r7, #8]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	4413      	add	r3, r2
 8015958:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	691b      	ldr	r3, [r3, #16]
 801595e:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8015960:	6a39      	ldr	r1, [r7, #32]
 8015962:	68f8      	ldr	r0, [r7, #12]
 8015964:	f7ff fd04 	bl	8015370 <xTCPWindowRxFind>
 8015968:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 801596a:	69bb      	ldr	r3, [r7, #24]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d006      	beq.n	801597e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8015970:	69bb      	ldr	r3, [r7, #24]
 8015972:	689b      	ldr	r3, [r3, #8]
 8015974:	461a      	mov	r2, r3
 8015976:	6a3b      	ldr	r3, [r7, #32]
 8015978:	4413      	add	r3, r2
 801597a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 801597c:	e7f0      	b.n	8015960 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 801597e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8015980:	4b45      	ldr	r3, [pc, #276]	@ (8015a98 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	2b00      	cmp	r3, #0
 8015986:	dd20      	ble.n	80159ca <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801598e:	461d      	mov	r5, r3
 8015990:	68fb      	ldr	r3, [r7, #12]
 8015992:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015996:	461e      	mov	r6, r3
 8015998:	68fb      	ldr	r3, [r7, #12]
 801599a:	68db      	ldr	r3, [r3, #12]
 801599c:	68ba      	ldr	r2, [r7, #8]
 801599e:	1ad0      	subs	r0, r2, r3
 80159a0:	68fb      	ldr	r3, [r7, #12]
 80159a2:	68db      	ldr	r3, [r3, #12]
 80159a4:	69fa      	ldr	r2, [r7, #28]
 80159a6:	1ad3      	subs	r3, r2, r3
 80159a8:	68b9      	ldr	r1, [r7, #8]
 80159aa:	69fa      	ldr	r2, [r7, #28]
 80159ac:	1a8a      	subs	r2, r1, r2
 80159ae:	4614      	mov	r4, r2
 80159b0:	68fa      	ldr	r2, [r7, #12]
 80159b2:	68d2      	ldr	r2, [r2, #12]
 80159b4:	6a39      	ldr	r1, [r7, #32]
 80159b6:	1a8a      	subs	r2, r1, r2
 80159b8:	9202      	str	r2, [sp, #8]
 80159ba:	9401      	str	r4, [sp, #4]
 80159bc:	9300      	str	r3, [sp, #0]
 80159be:	4603      	mov	r3, r0
 80159c0:	4632      	mov	r2, r6
 80159c2:	4629      	mov	r1, r5
 80159c4:	4835      	ldr	r0, [pc, #212]	@ (8015a9c <prvTCPWindowRx_UnexpectedRX+0x15c>)
 80159c6:	f00c fa97 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	4a34      	ldr	r2, [pc, #208]	@ (8015aa0 <prvTCPWindowRx_UnexpectedRX+0x160>)
 80159ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 80159d2:	68bb      	ldr	r3, [r7, #8]
 80159d4:	061a      	lsls	r2, r3, #24
 80159d6:	68bb      	ldr	r3, [r7, #8]
 80159d8:	021b      	lsls	r3, r3, #8
 80159da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80159de:	431a      	orrs	r2, r3
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	0a1b      	lsrs	r3, r3, #8
 80159e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80159e8:	431a      	orrs	r2, r3
 80159ea:	68bb      	ldr	r3, [r7, #8]
 80159ec:	0e1b      	lsrs	r3, r3, #24
 80159ee:	431a      	orrs	r2, r3
 80159f0:	68fb      	ldr	r3, [r7, #12]
 80159f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 80159f6:	6a3b      	ldr	r3, [r7, #32]
 80159f8:	061a      	lsls	r2, r3, #24
 80159fa:	6a3b      	ldr	r3, [r7, #32]
 80159fc:	021b      	lsls	r3, r3, #8
 80159fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015a02:	431a      	orrs	r2, r3
 8015a04:	6a3b      	ldr	r3, [r7, #32]
 8015a06:	0a1b      	lsrs	r3, r3, #8
 8015a08:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015a0c:	431a      	orrs	r2, r3
 8015a0e:	6a3b      	ldr	r3, [r7, #32]
 8015a10:	0e1b      	lsrs	r3, r3, #24
 8015a12:	431a      	orrs	r2, r3
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	220c      	movs	r2, #12
 8015a1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8015a22:	68b9      	ldr	r1, [r7, #8]
 8015a24:	68f8      	ldr	r0, [r7, #12]
 8015a26:	f7ff fca3 	bl	8015370 <xTCPWindowRxFind>
 8015a2a:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8015a2c:	69bb      	ldr	r3, [r7, #24]
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d12d      	bne.n	8015a8e <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	2301      	movs	r3, #1
 8015a36:	68b9      	ldr	r1, [r7, #8]
 8015a38:	68f8      	ldr	r0, [r7, #12]
 8015a3a:	f7ff fcc1 	bl	80153c0 <xTCPWindowNew>
 8015a3e:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8015a40:	69bb      	ldr	r3, [r7, #24]
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d104      	bne.n	8015a50 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2200      	movs	r2, #0
 8015a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8015a4e:	e01e      	b.n	8015a8e <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 8015a50:	4b11      	ldr	r3, [pc, #68]	@ (8015a98 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d014      	beq.n	8015a82 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015a5e:	4619      	mov	r1, r3
 8015a60:	68fb      	ldr	r3, [r7, #12]
 8015a62:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a66:	4618      	mov	r0, r3
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	68db      	ldr	r3, [r3, #12]
 8015a6c:	68ba      	ldr	r2, [r7, #8]
 8015a6e:	1ad2      	subs	r2, r2, r3
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015a76:	9300      	str	r3, [sp, #0]
 8015a78:	4613      	mov	r3, r2
 8015a7a:	4602      	mov	r2, r0
 8015a7c:	4809      	ldr	r0, [pc, #36]	@ (8015aa4 <prvTCPWindowRx_UnexpectedRX+0x164>)
 8015a7e:	f00c fa3b 	bl	8021ef8 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8015a82:	68ba      	ldr	r2, [r7, #8]
 8015a84:	69fb      	ldr	r3, [r7, #28]
 8015a86:	1ad3      	subs	r3, r2, r3
 8015a88:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8015a8a:	697b      	ldr	r3, [r7, #20]
 8015a8c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 8015a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015a90:	4618      	mov	r0, r3
 8015a92:	372c      	adds	r7, #44	@ 0x2c
 8015a94:	46bd      	mov	sp, r7
 8015a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015a98:	200015c4 	.word	0x200015c4
 8015a9c:	08026b88 	.word	0x08026b88
 8015aa0:	0a050101 	.word	0x0a050101
 8015aa4:	08026bc8 	.word	0x08026bc8

08015aa8 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8015aa8:	b580      	push	{r7, lr}
 8015aaa:	b08c      	sub	sp, #48	@ 0x30
 8015aac:	af00      	add	r7, sp, #0
 8015aae:	60f8      	str	r0, [r7, #12]
 8015ab0:	60b9      	str	r1, [r7, #8]
 8015ab2:	607a      	str	r2, [r7, #4]
 8015ab4:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8015ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8015aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8015abc:	68bb      	ldr	r3, [r7, #8]
 8015abe:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8015ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	691b      	ldr	r3, [r3, #16]
 8015ace:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8015ad0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ad4:	4413      	add	r3, r2
 8015ad6:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8015ad8:	69fa      	ldr	r2, [r7, #28]
 8015ada:	6a3b      	ldr	r3, [r7, #32]
 8015adc:	1ad3      	subs	r3, r2, r3
 8015ade:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8015ae0:	69bb      	ldr	r3, [r7, #24]
 8015ae2:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8015ae4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015ae6:	6a3b      	ldr	r3, [r7, #32]
 8015ae8:	1ad3      	subs	r3, r2, r3
 8015aea:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8015aec:	69bb      	ldr	r3, [r7, #24]
 8015aee:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	da18      	bge.n	8015b28 <lTCPWindowRxCheck+0x80>
 8015af6:	697b      	ldr	r3, [r7, #20]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	dd15      	ble.n	8015b28 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 8015afc:	68fb      	ldr	r3, [r7, #12]
 8015afe:	68db      	ldr	r3, [r3, #12]
 8015b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b02:	1ad2      	subs	r2, r2, r3
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015b08:	4824      	ldr	r0, [pc, #144]	@ (8015b9c <lTCPWindowRxCheck+0xf4>)
 8015b0a:	f00c f9f5 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015b12:	1ad3      	subs	r3, r2, r3
 8015b14:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8015b16:	693b      	ldr	r3, [r7, #16]
 8015b18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b1a:	4413      	add	r3, r2
 8015b1c:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 8015b1e:	693b      	ldr	r3, [r7, #16]
 8015b20:	425b      	negs	r3, r3
 8015b22:	461a      	mov	r2, r3
 8015b24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015b26:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8015b28:	68fb      	ldr	r3, [r7, #12]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	2200      	movs	r2, #0
 8015b34:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8015b36:	6a3a      	ldr	r2, [r7, #32]
 8015b38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d110      	bne.n	8015b60 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 8015b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b40:	683b      	ldr	r3, [r7, #0]
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d905      	bls.n	8015b52 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8015b46:	683a      	ldr	r2, [r7, #0]
 8015b48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015b4a:	4815      	ldr	r0, [pc, #84]	@ (8015ba0 <lTCPWindowRxCheck+0xf8>)
 8015b4c:	f00c f9d4 	bl	8021ef8 <lUDPLoggingPrintf>
 8015b50:	e01f      	b.n	8015b92 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8015b52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015b54:	68f8      	ldr	r0, [r7, #12]
 8015b56:	f7ff fe87 	bl	8015868 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015b5e:	e018      	b.n	8015b92 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8015b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b62:	3301      	adds	r3, #1
 8015b64:	6a3a      	ldr	r2, [r7, #32]
 8015b66:	429a      	cmp	r2, r3
 8015b68:	d013      	beq.n	8015b92 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	dd10      	ble.n	8015b92 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8015b70:	683b      	ldr	r3, [r7, #0]
 8015b72:	697a      	ldr	r2, [r7, #20]
 8015b74:	429a      	cmp	r2, r3
 8015b76:	dd06      	ble.n	8015b86 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b7c:	6979      	ldr	r1, [r7, #20]
 8015b7e:	4809      	ldr	r0, [pc, #36]	@ (8015ba4 <lTCPWindowRxCheck+0xfc>)
 8015b80:	f00c f9ba 	bl	8021ef8 <lUDPLoggingPrintf>
 8015b84:	e005      	b.n	8015b92 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8015b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015b8a:	68f8      	ldr	r0, [r7, #12]
 8015b8c:	f7ff fed8 	bl	8015940 <prvTCPWindowRx_UnexpectedRX>
 8015b90:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8015b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015b94:	4618      	mov	r0, r3
 8015b96:	3730      	adds	r7, #48	@ 0x30
 8015b98:	46bd      	mov	sp, r7
 8015b9a:	bd80      	pop	{r7, pc}
 8015b9c:	08026bf8 	.word	0x08026bf8
 8015ba0:	08026c38 	.word	0x08026c38
 8015ba4:	08026c78 	.word	0x08026c78

08015ba8 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8015ba8:	b480      	push	{r7}
 8015baa:	b087      	sub	sp, #28
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	60f8      	str	r0, [r7, #12]
 8015bb0:	60b9      	str	r1, [r7, #8]
 8015bb2:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8015bb4:	68fa      	ldr	r2, [r7, #12]
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	4413      	add	r3, r2
 8015bba:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8015bbc:	697a      	ldr	r2, [r7, #20]
 8015bbe:	68bb      	ldr	r3, [r7, #8]
 8015bc0:	429a      	cmp	r2, r3
 8015bc2:	db03      	blt.n	8015bcc <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8015bc4:	697a      	ldr	r2, [r7, #20]
 8015bc6:	68bb      	ldr	r3, [r7, #8]
 8015bc8:	1ad3      	subs	r3, r2, r3
 8015bca:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8015bcc:	697b      	ldr	r3, [r7, #20]
        }
 8015bce:	4618      	mov	r0, r3
 8015bd0:	371c      	adds	r7, #28
 8015bd2:	46bd      	mov	sp, r7
 8015bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bd8:	4770      	bx	lr
	...

08015bdc <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	b088      	sub	sp, #32
 8015be0:	af02      	add	r7, sp, #8
 8015be2:	60f8      	str	r0, [r7, #12]
 8015be4:	60b9      	str	r1, [r7, #8]
 8015be6:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8015be8:	68bb      	ldr	r3, [r7, #8]
 8015bea:	685a      	ldr	r2, [r3, #4]
 8015bec:	68bb      	ldr	r3, [r7, #8]
 8015bee:	689b      	ldr	r3, [r3, #8]
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	4619      	mov	r1, r3
 8015bf4:	6878      	ldr	r0, [r7, #4]
 8015bf6:	f7f4 fe05 	bl	800a804 <FreeRTOS_min_int32>
 8015bfa:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8015bfc:	68bb      	ldr	r3, [r7, #8]
 8015bfe:	689a      	ldr	r2, [r3, #8]
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	441a      	add	r2, r3
 8015c04:	68bb      	ldr	r3, [r7, #8]
 8015c06:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8015c08:	68bb      	ldr	r3, [r7, #8]
 8015c0a:	689a      	ldr	r2, [r3, #8]
 8015c0c:	68bb      	ldr	r3, [r7, #8]
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	429a      	cmp	r2, r3
 8015c12:	db02      	blt.n	8015c1a <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	2200      	movs	r2, #0
 8015c18:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015c1a:	68fb      	ldr	r3, [r7, #12]
 8015c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015c1e:	697b      	ldr	r3, [r7, #20]
 8015c20:	441a      	add	r2, r3
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8015c26:	4b12      	ldr	r3, [pc, #72]	@ (8015c70 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	dd1a      	ble.n	8015c64 <prvTCPWindowTxAdd_FrontSegment+0x88>
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015c34:	2b17      	cmp	r3, #23
 8015c36:	d015      	beq.n	8015c64 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8015c38:	68bb      	ldr	r3, [r7, #8]
 8015c3a:	681a      	ldr	r2, [r3, #0]
 8015c3c:	68fb      	ldr	r3, [r7, #12]
 8015c3e:	69db      	ldr	r3, [r3, #28]
 8015c40:	1ad1      	subs	r1, r2, r3
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	6898      	ldr	r0, [r3, #8]
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	69db      	ldr	r3, [r3, #28]
 8015c4e:	1ad3      	subs	r3, r2, r3
 8015c50:	68ba      	ldr	r2, [r7, #8]
 8015c52:	68d2      	ldr	r2, [r2, #12]
 8015c54:	9201      	str	r2, [sp, #4]
 8015c56:	9300      	str	r3, [sp, #0]
 8015c58:	4603      	mov	r3, r0
 8015c5a:	460a      	mov	r2, r1
 8015c5c:	6879      	ldr	r1, [r7, #4]
 8015c5e:	4805      	ldr	r0, [pc, #20]	@ (8015c74 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8015c60:	f00c f94a 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8015c64:	697b      	ldr	r3, [r7, #20]
        }
 8015c66:	4618      	mov	r0, r3
 8015c68:	3718      	adds	r7, #24
 8015c6a:	46bd      	mov	sp, r7
 8015c6c:	bd80      	pop	{r7, pc}
 8015c6e:	bf00      	nop
 8015c70:	200015c4 	.word	0x200015c4
 8015c74:	08026cbc 	.word	0x08026cbc

08015c78 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b08a      	sub	sp, #40	@ 0x28
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	60f8      	str	r0, [r7, #12]
 8015c80:	60b9      	str	r1, [r7, #8]
 8015c82:	607a      	str	r2, [r7, #4]
 8015c84:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8015c8a:	2300      	movs	r3, #0
 8015c8c:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015c96:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8015c98:	69bb      	ldr	r3, [r7, #24]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d073      	beq.n	8015d86 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8015c9e:	69bb      	ldr	r3, [r7, #24]
 8015ca0:	689a      	ldr	r2, [r3, #8]
 8015ca2:	69bb      	ldr	r3, [r7, #24]
 8015ca4:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	da6d      	bge.n	8015d86 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	7d9b      	ldrb	r3, [r3, #22]
 8015cae:	f003 0301 	and.w	r3, r3, #1
 8015cb2:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	d166      	bne.n	8015d86 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8015cb8:	69bb      	ldr	r3, [r7, #24]
 8015cba:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d062      	beq.n	8015d86 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8015cc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015cc2:	69b9      	ldr	r1, [r7, #24]
 8015cc4:	68f8      	ldr	r0, [r7, #12]
 8015cc6:	f7ff ff89 	bl	8015bdc <prvTCPWindowTxAdd_FrontSegment>
 8015cca:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8015ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015cce:	697b      	ldr	r3, [r7, #20]
 8015cd0:	1ad3      	subs	r3, r2, r3
 8015cd2:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8015cd4:	6a3a      	ldr	r2, [r7, #32]
 8015cd6:	697b      	ldr	r3, [r7, #20]
 8015cd8:	4413      	add	r3, r2
 8015cda:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8015cdc:	697a      	ldr	r2, [r7, #20]
 8015cde:	6839      	ldr	r1, [r7, #0]
 8015ce0:	69f8      	ldr	r0, [r7, #28]
 8015ce2:	f7ff ff61 	bl	8015ba8 <lTCPIncrementTxPosition>
 8015ce6:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8015ce8:	e04d      	b.n	8015d86 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015cf4:	461a      	mov	r2, r3
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	68f8      	ldr	r0, [r7, #12]
 8015cfa:	f7ff fb61 	bl	80153c0 <xTCPWindowNew>
 8015cfe:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 8015d00:	69bb      	ldr	r3, [r7, #24]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d037      	beq.n	8015d76 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	685b      	ldr	r3, [r3, #4]
 8015d0a:	4619      	mov	r1, r3
 8015d0c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015d0e:	f7f4 fd79 	bl	800a804 <FreeRTOS_min_int32>
 8015d12:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8015d14:	69bb      	ldr	r3, [r7, #24]
 8015d16:	697a      	ldr	r2, [r7, #20]
 8015d18:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8015d1a:	69bb      	ldr	r3, [r7, #24]
 8015d1c:	69fa      	ldr	r2, [r7, #28]
 8015d1e:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8015d20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015d22:	697b      	ldr	r3, [r7, #20]
 8015d24:	1ad3      	subs	r3, r2, r3
 8015d26:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8015d28:	697a      	ldr	r2, [r7, #20]
 8015d2a:	6839      	ldr	r1, [r7, #0]
 8015d2c:	69f8      	ldr	r0, [r7, #28]
 8015d2e:	f7ff ff3b 	bl	8015ba8 <lTCPIncrementTxPosition>
 8015d32:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015d38:	697b      	ldr	r3, [r7, #20]
 8015d3a:	441a      	add	r2, r3
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8015d40:	6a3a      	ldr	r2, [r7, #32]
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	4413      	add	r3, r2
 8015d46:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8015d4e:	69bb      	ldr	r3, [r7, #24]
 8015d50:	3318      	adds	r3, #24
 8015d52:	4619      	mov	r1, r3
 8015d54:	4610      	mov	r0, r2
 8015d56:	f7ff fa63 	bl	8015220 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	689a      	ldr	r2, [r3, #8]
 8015d5e:	69bb      	ldr	r3, [r7, #24]
 8015d60:	685b      	ldr	r3, [r3, #4]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	da03      	bge.n	8015d6e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	69ba      	ldr	r2, [r7, #24]
 8015d6a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015d6c:	e00b      	b.n	8015d86 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	2200      	movs	r2, #0
 8015d72:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015d74:	e007      	b.n	8015d86 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8015d76:	6a3b      	ldr	r3, [r7, #32]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d008      	beq.n	8015d8e <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 8015d7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015d7e:	4807      	ldr	r0, [pc, #28]	@ (8015d9c <lTCPWindowTxAdd+0x124>)
 8015d80:	f00c f8ba 	bl	8021ef8 <lUDPLoggingPrintf>
                    }

                    break;
 8015d84:	e003      	b.n	8015d8e <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8015d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	dcae      	bgt.n	8015cea <lTCPWindowTxAdd+0x72>
 8015d8c:	e000      	b.n	8015d90 <lTCPWindowTxAdd+0x118>
                    break;
 8015d8e:	bf00      	nop
                }
            }

            return lDone;
 8015d90:	6a3b      	ldr	r3, [r7, #32]
        }
 8015d92:	4618      	mov	r0, r3
 8015d94:	3728      	adds	r7, #40	@ 0x28
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	08026d04 	.word	0x08026d04

08015da0 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8015da0:	b480      	push	{r7}
 8015da2:	b083      	sub	sp, #12
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8015da8:	687b      	ldr	r3, [r7, #4]
 8015daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d101      	bne.n	8015db6 <xTCPWindowTxDone+0x16>
 8015db2:	2301      	movs	r3, #1
 8015db4:	e000      	b.n	8015db8 <xTCPWindowTxDone+0x18>
 8015db6:	2300      	movs	r3, #0
        }
 8015db8:	4618      	mov	r0, r3
 8015dba:	370c      	adds	r7, #12
 8015dbc:	46bd      	mov	sp, r7
 8015dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc2:	4770      	bx	lr

08015dc4 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	b086      	sub	sp, #24
 8015dc8:	af00      	add	r7, sp, #0
 8015dca:	6078      	str	r0, [r7, #4]
 8015dcc:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	3354      	adds	r3, #84	@ 0x54
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7ff fbb5 	bl	8015542 <xTCPWindowPeekHead>
 8015dd8:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d102      	bne.n	8015de6 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8015de0:	2300      	movs	r3, #0
 8015de2:	613b      	str	r3, [r7, #16]
 8015de4:	e02f      	b.n	8015e46 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6a1b      	ldr	r3, [r3, #32]
 8015dee:	429a      	cmp	r2, r3
 8015df0:	d306      	bcc.n	8015e00 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8015df2:	687b      	ldr	r3, [r7, #4]
 8015df4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	6a1b      	ldr	r3, [r3, #32]
 8015dfa:	1ad3      	subs	r3, r2, r3
 8015dfc:	617b      	str	r3, [r7, #20]
 8015dfe:	e001      	b.n	8015e04 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 8015e00:	2300      	movs	r3, #0
 8015e02:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8015e04:	6979      	ldr	r1, [r7, #20]
 8015e06:	6838      	ldr	r0, [r7, #0]
 8015e08:	f7f4 fd0c 	bl	800a824 <FreeRTOS_min_uint32>
 8015e0c:	4602      	mov	r2, r0
 8015e0e:	683b      	ldr	r3, [r7, #0]
 8015e10:	1a9b      	subs	r3, r3, r2
 8015e12:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	689b      	ldr	r3, [r3, #8]
 8015e18:	461a      	mov	r2, r3
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d302      	bcc.n	8015e26 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8015e20:	2301      	movs	r3, #1
 8015e22:	613b      	str	r3, [r7, #16]
 8015e24:	e001      	b.n	8015e2a <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8015e26:	2300      	movs	r3, #0
 8015e28:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 8015e2a:	697b      	ldr	r3, [r7, #20]
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d00a      	beq.n	8015e46 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	689b      	ldr	r3, [r3, #8]
 8015e38:	4619      	mov	r1, r3
 8015e3a:	697b      	ldr	r3, [r7, #20]
 8015e3c:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 8015e3e:	429a      	cmp	r2, r3
 8015e40:	d201      	bcs.n	8015e46 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8015e42:	2300      	movs	r3, #0
 8015e44:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8015e46:	693b      	ldr	r3, [r7, #16]
        }
 8015e48:	4618      	mov	r0, r3
 8015e4a:	3718      	adds	r7, #24
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	bd80      	pop	{r7, pc}

08015e50 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8015e50:	b580      	push	{r7, lr}
 8015e52:	b08a      	sub	sp, #40	@ 0x28
 8015e54:	af00      	add	r7, sp, #0
 8015e56:	60f8      	str	r0, [r7, #12]
 8015e58:	60b9      	str	r1, [r7, #8]
 8015e5a:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2200      	movs	r2, #0
 8015e60:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d002      	beq.n	8015e70 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 8015e6a:	2301      	movs	r3, #1
 8015e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8015e6e:	e050      	b.n	8015f12 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	3368      	adds	r3, #104	@ 0x68
 8015e74:	4618      	mov	r0, r3
 8015e76:	f7ff fb64 	bl	8015542 <xTCPWindowPeekHead>
 8015e7a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 8015e7c:	6a3b      	ldr	r3, [r7, #32]
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d01f      	beq.n	8015ec2 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8015e82:	68fb      	ldr	r3, [r7, #12]
 8015e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015e86:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015e88:	6a3b      	ldr	r3, [r7, #32]
 8015e8a:	3310      	adds	r3, #16
 8015e8c:	4618      	mov	r0, r3
 8015e8e:	f7ff f9e4 	bl	801525a <ulTimerGetAge>
 8015e92:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 8015e94:	6a3b      	ldr	r3, [r7, #32]
 8015e96:	7d1b      	ldrb	r3, [r3, #20]
 8015e98:	461a      	mov	r2, r3
 8015e9a:	2301      	movs	r3, #1
 8015e9c:	4093      	lsls	r3, r2
 8015e9e:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 8015ea0:	697b      	ldr	r3, [r7, #20]
 8015ea2:	69fa      	ldr	r2, [r7, #28]
 8015ea4:	fb02 f303 	mul.w	r3, r2, r3
 8015ea8:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 8015eaa:	697a      	ldr	r2, [r7, #20]
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	429a      	cmp	r2, r3
 8015eb0:	d904      	bls.n	8015ebc <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 8015eb2:	697a      	ldr	r2, [r7, #20]
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	1ad2      	subs	r2, r2, r3
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ec0:	e027      	b.n	8015f12 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	3354      	adds	r3, #84	@ 0x54
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7ff fb3b 	bl	8015542 <xTCPWindowPeekHead>
 8015ecc:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 8015ece:	6a3b      	ldr	r3, [r7, #32]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d102      	bne.n	8015eda <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8015ed8:	e01b      	b.n	8015f12 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 8015eda:	68b9      	ldr	r1, [r7, #8]
 8015edc:	68f8      	ldr	r0, [r7, #12]
 8015ede:	f7ff ff71 	bl	8015dc4 <prvTCPWindowTxHasSpace>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d102      	bne.n	8015eee <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8015eec:	e011      	b.n	8015f12 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	781b      	ldrb	r3, [r3, #0]
 8015ef2:	f003 0302 	and.w	r3, r3, #2
 8015ef6:	b2db      	uxtb	r3, r3
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d008      	beq.n	8015f0e <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8015efc:	6a3b      	ldr	r3, [r7, #32]
 8015efe:	689a      	ldr	r2, [r3, #8]
 8015f00:	6a3b      	ldr	r3, [r7, #32]
 8015f02:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015f04:	429a      	cmp	r2, r3
 8015f06:	da02      	bge.n	8015f0e <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8015f08:	2300      	movs	r3, #0
 8015f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8015f0c:	e001      	b.n	8015f12 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 8015f0e:	2301      	movs	r3, #1
 8015f10:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 8015f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015f14:	4618      	mov	r0, r3
 8015f16:	3728      	adds	r7, #40	@ 0x28
 8015f18:	46bd      	mov	sp, r7
 8015f1a:	bd80      	pop	{r7, pc}

08015f1c <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 8015f1c:	b590      	push	{r4, r7, lr}
 8015f1e:	b087      	sub	sp, #28
 8015f20:	af02      	add	r7, sp, #8
 8015f22:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	3368      	adds	r3, #104	@ 0x68
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7ff fb0a 	bl	8015542 <xTCPWindowPeekHead>
 8015f2e:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d043      	beq.n	8015fbe <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8015f36:	68fb      	ldr	r3, [r7, #12]
 8015f38:	7d1b      	ldrb	r3, [r3, #20]
 8015f3a:	461a      	mov	r2, r3
 8015f3c:	2301      	movs	r3, #1
 8015f3e:	4093      	lsls	r3, r2
 8015f40:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015f46:	461a      	mov	r2, r3
 8015f48:	68bb      	ldr	r3, [r7, #8]
 8015f4a:	fb02 f303 	mul.w	r3, r2, r3
 8015f4e:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	3310      	adds	r3, #16
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7ff f980 	bl	801525a <ulTimerGetAge>
 8015f5a:	4602      	mov	r2, r0
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	4293      	cmp	r3, r2
 8015f60:	d22b      	bcs.n	8015fba <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	3368      	adds	r3, #104	@ 0x68
 8015f66:	4618      	mov	r0, r3
 8015f68:	f7ff fad2 	bl	8015510 <xTCPWindowGetHead>
 8015f6c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	2200      	movs	r2, #0
 8015f72:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015f74:	4b14      	ldr	r3, [pc, #80]	@ (8015fc8 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d020      	beq.n	8015fbe <pxTCPWindowTx_GetWaitQueue+0xa2>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015f82:	2b17      	cmp	r3, #23
 8015f84:	d01b      	beq.n	8015fbe <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015f94:	461c      	mov	r4, r3
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	6899      	ldr	r1, [r3, #8]
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	681a      	ldr	r2, [r3, #0]
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	69db      	ldr	r3, [r3, #28]
 8015fa2:	1ad3      	subs	r3, r2, r3
 8015fa4:	68fa      	ldr	r2, [r7, #12]
 8015fa6:	6812      	ldr	r2, [r2, #0]
 8015fa8:	9201      	str	r2, [sp, #4]
 8015faa:	9300      	str	r3, [sp, #0]
 8015fac:	460b      	mov	r3, r1
 8015fae:	4622      	mov	r2, r4
 8015fb0:	4601      	mov	r1, r0
 8015fb2:	4806      	ldr	r0, [pc, #24]	@ (8015fcc <pxTCPWindowTx_GetWaitQueue+0xb0>)
 8015fb4:	f00b ffa0 	bl	8021ef8 <lUDPLoggingPrintf>
 8015fb8:	e001      	b.n	8015fbe <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
        }
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	3714      	adds	r7, #20
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	bd90      	pop	{r4, r7, pc}
 8015fc8:	200015c4 	.word	0x200015c4
 8015fcc:	08026d40 	.word	0x08026d40

08015fd0 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 8015fd0:	b590      	push	{r4, r7, lr}
 8015fd2:	b087      	sub	sp, #28
 8015fd4:	af02      	add	r7, sp, #8
 8015fd6:	6078      	str	r0, [r7, #4]
 8015fd8:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	3354      	adds	r3, #84	@ 0x54
 8015fde:	4618      	mov	r0, r3
 8015fe0:	f7ff faaf 	bl	8015542 <xTCPWindowPeekHead>
 8015fe4:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d04f      	beq.n	801608c <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	781b      	ldrb	r3, [r3, #0]
 8015ff0:	f003 0302 	and.w	r3, r3, #2
 8015ff4:	b2db      	uxtb	r3, r3
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d008      	beq.n	801600c <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	689a      	ldr	r2, [r3, #8]
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8016002:	429a      	cmp	r2, r3
 8016004:	da02      	bge.n	801600c <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8016006:	2300      	movs	r3, #0
 8016008:	60fb      	str	r3, [r7, #12]
 801600a:	e03f      	b.n	801608c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801600c:	6839      	ldr	r1, [r7, #0]
 801600e:	6878      	ldr	r0, [r7, #4]
 8016010:	f7ff fed8 	bl	8015dc4 <prvTCPWindowTxHasSpace>
 8016014:	4603      	mov	r3, r0
 8016016:	2b00      	cmp	r3, #0
 8016018:	d102      	bne.n	8016020 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 801601a:	2300      	movs	r3, #0
 801601c:	60fb      	str	r3, [r7, #12]
 801601e:	e035      	b.n	801608c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	3354      	adds	r3, #84	@ 0x54
 8016024:	4618      	mov	r0, r3
 8016026:	f7ff fa73 	bl	8015510 <xTCPWindowGetHead>
 801602a:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8016030:	68fa      	ldr	r2, [r7, #12]
 8016032:	429a      	cmp	r2, r3
 8016034:	d102      	bne.n	801603c <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2200      	movs	r2, #0
 801603a:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	68fa      	ldr	r2, [r7, #12]
 8016042:	6892      	ldr	r2, [r2, #8]
 8016044:	441a      	add	r2, r3
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801604a:	4b13      	ldr	r3, [pc, #76]	@ (8016098 <pxTCPWindowTx_GetTXQueue+0xc8>)
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	2b01      	cmp	r3, #1
 8016050:	dd1c      	ble.n	801608c <pxTCPWindowTx_GetTXQueue+0xbc>
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016058:	2b17      	cmp	r3, #23
 801605a:	d017      	beq.n	801608c <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016062:	4618      	mov	r0, r3
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801606a:	461c      	mov	r4, r3
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	6899      	ldr	r1, [r3, #8]
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	681a      	ldr	r2, [r3, #0]
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	69db      	ldr	r3, [r3, #28]
 8016078:	1ad3      	subs	r3, r2, r3
 801607a:	683a      	ldr	r2, [r7, #0]
 801607c:	9201      	str	r2, [sp, #4]
 801607e:	9300      	str	r3, [sp, #0]
 8016080:	460b      	mov	r3, r1
 8016082:	4622      	mov	r2, r4
 8016084:	4601      	mov	r1, r0
 8016086:	4805      	ldr	r0, [pc, #20]	@ (801609c <pxTCPWindowTx_GetTXQueue+0xcc>)
 8016088:	f00b ff36 	bl	8021ef8 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 801608c:	68fb      	ldr	r3, [r7, #12]
        }
 801608e:	4618      	mov	r0, r3
 8016090:	3714      	adds	r7, #20
 8016092:	46bd      	mov	sp, r7
 8016094:	bd90      	pop	{r4, r7, pc}
 8016096:	bf00      	nop
 8016098:	200015c4 	.word	0x200015c4
 801609c:	08026d8c 	.word	0x08026d8c

080160a0 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 80160a0:	b590      	push	{r4, r7, lr}
 80160a2:	b08b      	sub	sp, #44	@ 0x2c
 80160a4:	af02      	add	r7, sp, #8
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 80160ac:	2300      	movs	r3, #0
 80160ae:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	3340      	adds	r3, #64	@ 0x40
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7ff fa2b 	bl	8015510 <xTCPWindowGetHead>
 80160ba:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 80160bc:	68fb      	ldr	r3, [r7, #12]
 80160be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 80160c4:	69fb      	ldr	r3, [r7, #28]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d01c      	beq.n	8016104 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 80160ca:	4b41      	ldr	r3, [pc, #260]	@ (80161d0 <ulTCPWindowTxGet+0x130>)
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	d024      	beq.n	801611c <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 80160d2:	68fb      	ldr	r3, [r7, #12]
 80160d4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80160d8:	4618      	mov	r0, r3
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80160e0:	461c      	mov	r4, r3
 80160e2:	69fb      	ldr	r3, [r7, #28]
 80160e4:	6899      	ldr	r1, [r3, #8]
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	681a      	ldr	r2, [r3, #0]
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	69db      	ldr	r3, [r3, #28]
 80160ee:	1ad3      	subs	r3, r2, r3
 80160f0:	68ba      	ldr	r2, [r7, #8]
 80160f2:	9201      	str	r2, [sp, #4]
 80160f4:	9300      	str	r3, [sp, #0]
 80160f6:	460b      	mov	r3, r1
 80160f8:	4622      	mov	r2, r4
 80160fa:	4601      	mov	r1, r0
 80160fc:	4835      	ldr	r0, [pc, #212]	@ (80161d4 <ulTCPWindowTxGet+0x134>)
 80160fe:	f00b fefb 	bl	8021ef8 <lUDPLoggingPrintf>
 8016102:	e00b      	b.n	801611c <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8016104:	68f8      	ldr	r0, [r7, #12]
 8016106:	f7ff ff09 	bl	8015f1c <pxTCPWindowTx_GetWaitQueue>
 801610a:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 801610c:	69fb      	ldr	r3, [r7, #28]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d104      	bne.n	801611c <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8016112:	68b9      	ldr	r1, [r7, #8]
 8016114:	68f8      	ldr	r0, [r7, #12]
 8016116:	f7ff ff5b 	bl	8015fd0 <pxTCPWindowTx_GetTXQueue>
 801611a:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 801611c:	69fb      	ldr	r3, [r7, #28]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d051      	beq.n	80161c6 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8016122:	69fb      	ldr	r3, [r7, #28]
 8016124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016126:	2b00      	cmp	r3, #0
 8016128:	d004      	beq.n	8016134 <ulTCPWindowTxGet+0x94>
 801612a:	f240 7136 	movw	r1, #1846	@ 0x736
 801612e:	482a      	ldr	r0, [pc, #168]	@ (80161d8 <ulTCPWindowTxGet+0x138>)
 8016130:	f7eb fc02 	bl	8001938 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801613a:	69fb      	ldr	r3, [r7, #28]
 801613c:	3318      	adds	r3, #24
 801613e:	4619      	mov	r1, r3
 8016140:	4610      	mov	r0, r2
 8016142:	f7ff f86d 	bl	8015220 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8016146:	69fa      	ldr	r2, [r7, #28]
 8016148:	7d93      	ldrb	r3, [r2, #22]
 801614a:	f043 0301 	orr.w	r3, r3, #1
 801614e:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8016150:	69fb      	ldr	r3, [r7, #28]
 8016152:	7d1b      	ldrb	r3, [r3, #20]
 8016154:	3301      	adds	r3, #1
 8016156:	b2da      	uxtb	r2, r3
 8016158:	69fb      	ldr	r3, [r7, #28]
 801615a:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 801615c:	69fb      	ldr	r3, [r7, #28]
 801615e:	7d1b      	ldrb	r3, [r3, #20]
 8016160:	2b04      	cmp	r3, #4
 8016162:	d120      	bne.n	80161a6 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8016164:	68fb      	ldr	r3, [r7, #12]
 8016166:	689a      	ldr	r2, [r3, #8]
 8016168:	68fb      	ldr	r3, [r7, #12]
 801616a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801616e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8016170:	429a      	cmp	r2, r3
 8016172:	d918      	bls.n	80161a6 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801617a:	005b      	lsls	r3, r3, #1
 801617c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016184:	4619      	mov	r1, r3
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801618c:	4618      	mov	r0, r3
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	689a      	ldr	r2, [r3, #8]
 8016192:	8afb      	ldrh	r3, [r7, #22]
 8016194:	9300      	str	r3, [sp, #0]
 8016196:	4613      	mov	r3, r2
 8016198:	4602      	mov	r2, r0
 801619a:	4810      	ldr	r0, [pc, #64]	@ (80161dc <ulTCPWindowTxGet+0x13c>)
 801619c:	f00b feac 	bl	8021ef8 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 80161a0:	8afa      	ldrh	r2, [r7, #22]
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 80161a6:	69fb      	ldr	r3, [r7, #28]
 80161a8:	3310      	adds	r3, #16
 80161aa:	4618      	mov	r0, r3
 80161ac:	f7ff f848 	bl	8015240 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80161b0:	69fb      	ldr	r3, [r7, #28]
 80161b2:	681a      	ldr	r2, [r3, #0]
 80161b4:	68fb      	ldr	r3, [r7, #12]
 80161b6:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 80161b8:	69fb      	ldr	r3, [r7, #28]
 80161ba:	68da      	ldr	r2, [r3, #12]
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 80161c0:	69fb      	ldr	r3, [r7, #28]
 80161c2:	689b      	ldr	r3, [r3, #8]
 80161c4:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 80161c6:	69bb      	ldr	r3, [r7, #24]
        }
 80161c8:	4618      	mov	r0, r3
 80161ca:	3724      	adds	r7, #36	@ 0x24
 80161cc:	46bd      	mov	sp, r7
 80161ce:	bd90      	pop	{r4, r7, pc}
 80161d0:	200015c4 	.word	0x200015c4
 80161d4:	08026dd8 	.word	0x08026dd8
 80161d8:	08026a74 	.word	0x08026a74
 80161dc:	08026e24 	.word	0x08026e24

080161e0 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 80161e0:	b580      	push	{r7, lr}
 80161e2:	b084      	sub	sp, #16
 80161e4:	af00      	add	r7, sp, #0
 80161e6:	6078      	str	r0, [r7, #4]
 80161e8:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 80161ea:	683b      	ldr	r3, [r7, #0]
 80161ec:	3310      	adds	r3, #16
 80161ee:	4618      	mov	r0, r3
 80161f0:	f7ff f833 	bl	801525a <ulTimerGetAge>
 80161f4:	4603      	mov	r3, r0
 80161f6:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80161fc:	68fa      	ldr	r2, [r7, #12]
 80161fe:	429a      	cmp	r2, r3
 8016200:	dc0e      	bgt.n	8016220 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016206:	4613      	mov	r3, r2
 8016208:	00db      	lsls	r3, r3, #3
 801620a:	1a9a      	subs	r2, r3, r2
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	4413      	add	r3, r2
 8016210:	2b00      	cmp	r3, #0
 8016212:	da00      	bge.n	8016216 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8016214:	3307      	adds	r3, #7
 8016216:	10db      	asrs	r3, r3, #3
 8016218:	461a      	mov	r2, r3
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	639a      	str	r2, [r3, #56]	@ 0x38
 801621e:	e00d      	b.n	801623c <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016224:	4613      	mov	r3, r2
 8016226:	005b      	lsls	r3, r3, #1
 8016228:	441a      	add	r2, r3
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	4413      	add	r3, r2
 801622e:	2b00      	cmp	r3, #0
 8016230:	da00      	bge.n	8016234 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8016232:	3303      	adds	r3, #3
 8016234:	109b      	asrs	r3, r3, #2
 8016236:	461a      	mov	r2, r3
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016240:	2b31      	cmp	r3, #49	@ 0x31
 8016242:	dc02      	bgt.n	801624a <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2232      	movs	r2, #50	@ 0x32
 8016248:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 801624a:	bf00      	nop
 801624c:	3710      	adds	r7, #16
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
	...

08016254 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8016254:	b5b0      	push	{r4, r5, r7, lr}
 8016256:	b090      	sub	sp, #64	@ 0x40
 8016258:	af04      	add	r7, sp, #16
 801625a:	60f8      	str	r0, [r7, #12]
 801625c:	60b9      	str	r1, [r7, #8]
 801625e:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8016260:	2300      	movs	r3, #0
 8016262:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8016264:	68bb      	ldr	r3, [r7, #8]
 8016266:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	3398      	adds	r3, #152	@ 0x98
 801626c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 801626e:	69fb      	ldr	r3, [r7, #28]
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8016274:	e0a6      	b.n	80163c4 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8016276:	2300      	movs	r3, #0
 8016278:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801627c:	68db      	ldr	r3, [r3, #12]
 801627e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8016280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8016286:	69bb      	ldr	r3, [r7, #24]
 8016288:	681b      	ldr	r3, [r3, #0]
 801628a:	4619      	mov	r1, r3
 801628c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801628e:	f7fe ff9c 	bl	80151ca <xSequenceGreaterThan>
 8016292:	4603      	mov	r3, r0
 8016294:	2b00      	cmp	r3, #0
 8016296:	f040 8094 	bne.w	80163c2 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 801629a:	69bb      	ldr	r3, [r7, #24]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80162a0:	429a      	cmp	r2, r3
 80162a2:	f040 809c 	bne.w	80163de <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80162a6:	69bb      	ldr	r3, [r7, #24]
 80162a8:	689b      	ldr	r3, [r3, #8]
 80162aa:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80162ac:	69bb      	ldr	r3, [r7, #24]
 80162ae:	7d9b      	ldrb	r3, [r3, #22]
 80162b0:	f003 0302 	and.w	r3, r3, #2
 80162b4:	b2db      	uxtb	r3, r3
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d144      	bne.n	8016344 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 80162ba:	69bb      	ldr	r3, [r7, #24]
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	697b      	ldr	r3, [r7, #20]
 80162c0:	4413      	add	r3, r2
 80162c2:	6879      	ldr	r1, [r7, #4]
 80162c4:	4618      	mov	r0, r3
 80162c6:	f7fe ff80 	bl	80151ca <xSequenceGreaterThan>
 80162ca:	4603      	mov	r3, r0
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d023      	beq.n	8016318 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 80162d0:	69bb      	ldr	r3, [r7, #24]
 80162d2:	681a      	ldr	r2, [r3, #0]
 80162d4:	68fb      	ldr	r3, [r7, #12]
 80162d6:	69db      	ldr	r3, [r3, #28]
 80162d8:	1ad3      	subs	r3, r2, r3
 80162da:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 80162dc:	68fb      	ldr	r3, [r7, #12]
 80162de:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80162e2:	461c      	mov	r4, r3
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80162ea:	461d      	mov	r5, r3
 80162ec:	68fb      	ldr	r3, [r7, #12]
 80162ee:	69db      	ldr	r3, [r3, #28]
 80162f0:	693a      	ldr	r2, [r7, #16]
 80162f2:	1ad0      	subs	r0, r2, r3
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	69db      	ldr	r3, [r3, #28]
 80162f8:	687a      	ldr	r2, [r7, #4]
 80162fa:	1ad3      	subs	r3, r2, r3
 80162fc:	6939      	ldr	r1, [r7, #16]
 80162fe:	697a      	ldr	r2, [r7, #20]
 8016300:	440a      	add	r2, r1
 8016302:	9202      	str	r2, [sp, #8]
 8016304:	693a      	ldr	r2, [r7, #16]
 8016306:	9201      	str	r2, [sp, #4]
 8016308:	9300      	str	r3, [sp, #0]
 801630a:	4603      	mov	r3, r0
 801630c:	462a      	mov	r2, r5
 801630e:	4621      	mov	r1, r4
 8016310:	4836      	ldr	r0, [pc, #216]	@ (80163ec <prvTCPWindowTxCheckAck+0x198>)
 8016312:	f00b fdf1 	bl	8021ef8 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8016316:	e063      	b.n	80163e0 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8016318:	69ba      	ldr	r2, [r7, #24]
 801631a:	7d93      	ldrb	r3, [r2, #22]
 801631c:	f043 0302 	orr.w	r3, r3, #2
 8016320:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016322:	69bb      	ldr	r3, [r7, #24]
 8016324:	7d1b      	ldrb	r3, [r3, #20]
 8016326:	2b01      	cmp	r3, #1
 8016328:	d10a      	bne.n	8016340 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 801632a:	69bb      	ldr	r3, [r7, #24]
 801632c:	681a      	ldr	r2, [r3, #0]
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8016332:	687a      	ldr	r2, [r7, #4]
 8016334:	429a      	cmp	r2, r3
 8016336:	d103      	bne.n	8016340 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8016338:	69b9      	ldr	r1, [r7, #24]
 801633a:	68f8      	ldr	r0, [r7, #12]
 801633c:	f7ff ff50 	bl	80161e0 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8016340:	2301      	movs	r3, #1
 8016342:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8016344:	68fb      	ldr	r3, [r7, #12]
 8016346:	6a1b      	ldr	r3, [r3, #32]
 8016348:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801634a:	429a      	cmp	r2, r3
 801634c:	d128      	bne.n	80163a0 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801634e:	4b28      	ldr	r3, [pc, #160]	@ (80163f0 <prvTCPWindowTxCheckAck+0x19c>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2b01      	cmp	r3, #1
 8016354:	dd15      	ble.n	8016382 <prvTCPWindowTxCheckAck+0x12e>
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801635c:	2b17      	cmp	r3, #23
 801635e:	d010      	beq.n	8016382 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	69db      	ldr	r3, [r3, #28]
 8016364:	68ba      	ldr	r2, [r7, #8]
 8016366:	1ad1      	subs	r1, r2, r3
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	69db      	ldr	r3, [r3, #28]
 801636c:	687a      	ldr	r2, [r7, #4]
 801636e:	1ad0      	subs	r0, r2, r3
 8016370:	69bb      	ldr	r3, [r7, #24]
 8016372:	681a      	ldr	r2, [r3, #0]
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	69db      	ldr	r3, [r3, #28]
 8016378:	1ad3      	subs	r3, r2, r3
 801637a:	4602      	mov	r2, r0
 801637c:	481d      	ldr	r0, [pc, #116]	@ (80163f4 <prvTCPWindowTxCheckAck+0x1a0>)
 801637e:	f00b fdbb 	bl	8021ef8 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8016382:	68fb      	ldr	r3, [r7, #12]
 8016384:	6a1a      	ldr	r2, [r3, #32]
 8016386:	697b      	ldr	r3, [r7, #20]
 8016388:	441a      	add	r2, r3
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 801638e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016390:	697b      	ldr	r3, [r7, #20]
 8016392:	4413      	add	r3, r2
 8016394:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 8016396:	69b8      	ldr	r0, [r7, #24]
 8016398:	f7ff f8ec 	bl	8015574 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 801639c:	2300      	movs	r3, #0
 801639e:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 80163a0:	6a3b      	ldr	r3, [r7, #32]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d008      	beq.n	80163b8 <prvTCPWindowTxCheckAck+0x164>
 80163a6:	69bb      	ldr	r3, [r7, #24]
 80163a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d004      	beq.n	80163b8 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 80163ae:	69bb      	ldr	r3, [r7, #24]
 80163b0:	3318      	adds	r3, #24
 80163b2:	4618      	mov	r0, r3
 80163b4:	f7ec fff6 	bl	80033a4 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 80163b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80163ba:	697b      	ldr	r3, [r7, #20]
 80163bc:	4413      	add	r3, r2
 80163be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80163c0:	e000      	b.n	80163c4 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 80163c2:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80163c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80163c6:	69fb      	ldr	r3, [r7, #28]
 80163c8:	429a      	cmp	r2, r3
 80163ca:	d009      	beq.n	80163e0 <prvTCPWindowTxCheckAck+0x18c>
 80163cc:	6879      	ldr	r1, [r7, #4]
 80163ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80163d0:	f7fe fee5 	bl	801519e <xSequenceLessThan>
 80163d4:	4603      	mov	r3, r0
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	f47f af4d 	bne.w	8016276 <prvTCPWindowTxCheckAck+0x22>
 80163dc:	e000      	b.n	80163e0 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 80163de:	bf00      	nop
            }

            return ulBytesConfirmed;
 80163e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80163e2:	4618      	mov	r0, r3
 80163e4:	3730      	adds	r7, #48	@ 0x30
 80163e6:	46bd      	mov	sp, r7
 80163e8:	bdb0      	pop	{r4, r5, r7, pc}
 80163ea:	bf00      	nop
 80163ec:	08026e5c 	.word	0x08026e5c
 80163f0:	200015c4 	.word	0x200015c4
 80163f4:	08026ea4 	.word	0x08026ea4

080163f8 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 80163f8:	b580      	push	{r7, lr}
 80163fa:	b086      	sub	sp, #24
 80163fc:	af00      	add	r7, sp, #0
 80163fe:	6078      	str	r0, [r7, #4]
 8016400:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8016402:	2300      	movs	r3, #0
 8016404:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	3370      	adds	r3, #112	@ 0x70
 801640a:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 801640c:	68fb      	ldr	r3, [r7, #12]
 801640e:	685b      	ldr	r3, [r3, #4]
 8016410:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8016412:	e049      	b.n	80164a8 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 801641a:	697b      	ldr	r3, [r7, #20]
 801641c:	685b      	ldr	r3, [r3, #4]
 801641e:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8016420:	68bb      	ldr	r3, [r7, #8]
 8016422:	7d9b      	ldrb	r3, [r3, #22]
 8016424:	f003 0302 	and.w	r3, r3, #2
 8016428:	b2db      	uxtb	r3, r3
 801642a:	2b00      	cmp	r3, #0
 801642c:	d13c      	bne.n	80164a8 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 801642e:	68bb      	ldr	r3, [r7, #8]
 8016430:	681b      	ldr	r3, [r3, #0]
 8016432:	6839      	ldr	r1, [r7, #0]
 8016434:	4618      	mov	r0, r3
 8016436:	f7fe feb2 	bl	801519e <xSequenceLessThan>
 801643a:	4603      	mov	r3, r0
 801643c:	2b00      	cmp	r3, #0
 801643e:	d033      	beq.n	80164a8 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	7d5b      	ldrb	r3, [r3, #21]
 8016444:	3301      	adds	r3, #1
 8016446:	b2da      	uxtb	r2, r3
 8016448:	68bb      	ldr	r3, [r7, #8]
 801644a:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	7d5b      	ldrb	r3, [r3, #21]
 8016450:	2b03      	cmp	r3, #3
 8016452:	d129      	bne.n	80164a8 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	2200      	movs	r2, #0
 8016458:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801645a:	4b18      	ldr	r3, [pc, #96]	@ (80164bc <prvTCPWindowFastRetransmit+0xc4>)
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	2b00      	cmp	r3, #0
 8016460:	db11      	blt.n	8016486 <prvTCPWindowFastRetransmit+0x8e>
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8016468:	2b17      	cmp	r3, #23
 801646a:	d00c      	beq.n	8016486 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 801646c:	68bb      	ldr	r3, [r7, #8]
 801646e:	681a      	ldr	r2, [r3, #0]
 8016470:	687b      	ldr	r3, [r7, #4]
 8016472:	69db      	ldr	r3, [r3, #28]
 8016474:	1ad1      	subs	r1, r2, r3
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	69db      	ldr	r3, [r3, #28]
 801647a:	683a      	ldr	r2, [r7, #0]
 801647c:	1ad3      	subs	r3, r2, r3
 801647e:	461a      	mov	r2, r3
 8016480:	480f      	ldr	r0, [pc, #60]	@ (80164c0 <prvTCPWindowFastRetransmit+0xc8>)
 8016482:	f00b fd39 	bl	8021ef8 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8016486:	68bb      	ldr	r3, [r7, #8]
 8016488:	3318      	adds	r3, #24
 801648a:	4618      	mov	r0, r3
 801648c:	f7ec ff8a 	bl	80033a4 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8016496:	68bb      	ldr	r3, [r7, #8]
 8016498:	3318      	adds	r3, #24
 801649a:	4619      	mov	r1, r3
 801649c:	4610      	mov	r0, r2
 801649e:	f7fe febf 	bl	8015220 <vListInsertFifo>
                            ulCount++;
 80164a2:	693b      	ldr	r3, [r7, #16]
 80164a4:	3301      	adds	r3, #1
 80164a6:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 80164a8:	697a      	ldr	r2, [r7, #20]
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	429a      	cmp	r2, r3
 80164ae:	d1b1      	bne.n	8016414 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 80164b0:	693b      	ldr	r3, [r7, #16]
        }
 80164b2:	4618      	mov	r0, r3
 80164b4:	3718      	adds	r7, #24
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bd80      	pop	{r7, pc}
 80164ba:	bf00      	nop
 80164bc:	200015c4 	.word	0x200015c4
 80164c0:	08026ee0 	.word	0x08026ee0

080164c4 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 80164c4:	b580      	push	{r7, lr}
 80164c6:	b084      	sub	sp, #16
 80164c8:	af00      	add	r7, sp, #0
 80164ca:	6078      	str	r0, [r7, #4]
 80164cc:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	6a1b      	ldr	r3, [r3, #32]
 80164d2:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 80164d4:	68b9      	ldr	r1, [r7, #8]
 80164d6:	6838      	ldr	r0, [r7, #0]
 80164d8:	f7fe fe4c 	bl	8015174 <xSequenceLessThanOrEqual>
 80164dc:	4603      	mov	r3, r0
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d002      	beq.n	80164e8 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 80164e2:	2300      	movs	r3, #0
 80164e4:	60fb      	str	r3, [r7, #12]
 80164e6:	e005      	b.n	80164f4 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 80164e8:	683a      	ldr	r2, [r7, #0]
 80164ea:	68b9      	ldr	r1, [r7, #8]
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f7ff feb1 	bl	8016254 <prvTCPWindowTxCheckAck>
 80164f2:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 80164f4:	68fb      	ldr	r3, [r7, #12]
        }
 80164f6:	4618      	mov	r0, r3
 80164f8:	3710      	adds	r7, #16
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
	...

08016500 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8016500:	b5b0      	push	{r4, r5, r7, lr}
 8016502:	b088      	sub	sp, #32
 8016504:	af02      	add	r7, sp, #8
 8016506:	60f8      	str	r0, [r7, #12]
 8016508:	60b9      	str	r1, [r7, #8]
 801650a:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 801650c:	68fb      	ldr	r3, [r7, #12]
 801650e:	6a1b      	ldr	r3, [r3, #32]
 8016510:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8016512:	687a      	ldr	r2, [r7, #4]
 8016514:	68b9      	ldr	r1, [r7, #8]
 8016516:	68f8      	ldr	r0, [r7, #12]
 8016518:	f7ff fe9c 	bl	8016254 <prvTCPWindowTxCheckAck>
 801651c:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 801651e:	68b9      	ldr	r1, [r7, #8]
 8016520:	68f8      	ldr	r0, [r7, #12]
 8016522:	f7ff ff69 	bl	80163f8 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8016526:	4b16      	ldr	r3, [pc, #88]	@ (8016580 <ulTCPWindowTxSack+0x80>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	2b00      	cmp	r3, #0
 801652c:	dd23      	ble.n	8016576 <ulTCPWindowTxSack+0x76>
 801652e:	6979      	ldr	r1, [r7, #20]
 8016530:	68b8      	ldr	r0, [r7, #8]
 8016532:	f7fe fe4a 	bl	80151ca <xSequenceGreaterThan>
 8016536:	4603      	mov	r3, r0
 8016538:	2b00      	cmp	r3, #0
 801653a:	d01c      	beq.n	8016576 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8016542:	461c      	mov	r4, r3
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801654a:	461d      	mov	r5, r3
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	69db      	ldr	r3, [r3, #28]
 8016550:	68ba      	ldr	r2, [r7, #8]
 8016552:	1ad0      	subs	r0, r2, r3
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	69db      	ldr	r3, [r3, #28]
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	1ad3      	subs	r3, r2, r3
 801655c:	68fa      	ldr	r2, [r7, #12]
 801655e:	6a11      	ldr	r1, [r2, #32]
 8016560:	68fa      	ldr	r2, [r7, #12]
 8016562:	69d2      	ldr	r2, [r2, #28]
 8016564:	1a8a      	subs	r2, r1, r2
 8016566:	9201      	str	r2, [sp, #4]
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	4603      	mov	r3, r0
 801656c:	462a      	mov	r2, r5
 801656e:	4621      	mov	r1, r4
 8016570:	4804      	ldr	r0, [pc, #16]	@ (8016584 <ulTCPWindowTxSack+0x84>)
 8016572:	f00b fcc1 	bl	8021ef8 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8016576:	693b      	ldr	r3, [r7, #16]
        }
 8016578:	4618      	mov	r0, r3
 801657a:	3718      	adds	r7, #24
 801657c:	46bd      	mov	sp, r7
 801657e:	bdb0      	pop	{r4, r5, r7, pc}
 8016580:	200015c4 	.word	0x200015c4
 8016584:	08026f20 	.word	0x08026f20

08016588 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016588:	b580      	push	{r7, lr}
 801658a:	b084      	sub	sp, #16
 801658c:	af00      	add	r7, sp, #0
 801658e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d014      	beq.n	80165c0 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801659a:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801659c:	68fb      	ldr	r3, [r7, #12]
 801659e:	899b      	ldrh	r3, [r3, #12]
 80165a0:	b29b      	uxth	r3, r3
 80165a2:	2b08      	cmp	r3, #8
 80165a4:	d004      	beq.n	80165b0 <vProcessGeneratedUDPPacket+0x28>
 80165a6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d004      	beq.n	80165b8 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 80165ae:	e007      	b.n	80165c0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 80165b0:	6878      	ldr	r0, [r7, #4]
 80165b2:	f000 f845 	bl	8016640 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 80165b6:	e003      	b.n	80165c0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f000 fae3 	bl	8016b84 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 80165be:	bf00      	nop
        }
    }
}
 80165c0:	bf00      	nop
 80165c2:	3710      	adds	r7, #16
 80165c4:	46bd      	mov	sp, r7
 80165c6:	bd80      	pop	{r7, pc}

080165c8 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b086      	sub	sp, #24
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	460b      	mov	r3, r1
 80165d2:	607a      	str	r2, [r7, #4]
 80165d4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 80165d6:	2300      	movs	r3, #0
 80165d8:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 80165da:	68fb      	ldr	r3, [r7, #12]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d103      	bne.n	80165e8 <xProcessReceivedUDPPacket+0x20>
 80165e0:	2178      	movs	r1, #120	@ 0x78
 80165e2:	4816      	ldr	r0, [pc, #88]	@ (801663c <xProcessReceivedUDPPacket+0x74>)
 80165e4:	f7eb f9a8 	bl	8001938 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80165e8:	68fb      	ldr	r3, [r7, #12]
 80165ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d103      	bne.n	80165f8 <xProcessReceivedUDPPacket+0x30>
 80165f0:	2179      	movs	r1, #121	@ 0x79
 80165f2:	4812      	ldr	r0, [pc, #72]	@ (801663c <xProcessReceivedUDPPacket+0x74>)
 80165f4:	f7eb f9a0 	bl	8001938 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80165fc:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 80165fe:	693b      	ldr	r3, [r7, #16]
 8016600:	899b      	ldrh	r3, [r3, #12]
 8016602:	b29b      	uxth	r3, r3
 8016604:	2b08      	cmp	r3, #8
 8016606:	d004      	beq.n	8016612 <xProcessReceivedUDPPacket+0x4a>
 8016608:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 801660c:	4293      	cmp	r3, r2
 801660e:	d008      	beq.n	8016622 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8016610:	e00f      	b.n	8016632 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8016612:	897b      	ldrh	r3, [r7, #10]
 8016614:	687a      	ldr	r2, [r7, #4]
 8016616:	4619      	mov	r1, r3
 8016618:	68f8      	ldr	r0, [r7, #12]
 801661a:	f000 f92f 	bl	801687c <xProcessReceivedUDPPacket_IPv4>
 801661e:	6178      	str	r0, [r7, #20]
                break;
 8016620:	e007      	b.n	8016632 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8016622:	897b      	ldrh	r3, [r7, #10]
 8016624:	687a      	ldr	r2, [r7, #4]
 8016626:	4619      	mov	r1, r3
 8016628:	68f8      	ldr	r0, [r7, #12]
 801662a:	f000 fbdd 	bl	8016de8 <xProcessReceivedUDPPacket_IPv6>
 801662e:	6178      	str	r0, [r7, #20]
                break;
 8016630:	bf00      	nop
    }

    return xReturn;
 8016632:	697b      	ldr	r3, [r7, #20]
}
 8016634:	4618      	mov	r0, r3
 8016636:	3718      	adds	r7, #24
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}
 801663c:	08026f54 	.word	0x08026f54

08016640 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016640:	b580      	push	{r7, lr}
 8016642:	b08e      	sub	sp, #56	@ 0x38
 8016644:	af00      	add	r7, sp, #0
 8016646:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016648:	687b      	ldr	r3, [r7, #4]
 801664a:	695b      	ldr	r3, [r3, #20]
 801664c:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016652:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016658:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801665e:	2b00      	cmp	r3, #0
 8016660:	d104      	bne.n	801666c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016666:	3b2a      	subs	r3, #42	@ 0x2a
 8016668:	633b      	str	r3, [r7, #48]	@ 0x30
 801666a:	e003      	b.n	8016674 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016670:	3b2a      	subs	r3, #42	@ 0x2a
 8016672:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8016674:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016676:	f107 0208 	add.w	r2, r7, #8
 801667a:	f107 030c 	add.w	r3, r7, #12
 801667e:	4618      	mov	r0, r3
 8016680:	f7f0 fd68 	bl	8007154 <eARPGetCacheEntry>
 8016684:	4603      	mov	r3, r0
 8016686:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801668e:	2b00      	cmp	r3, #0
 8016690:	d102      	bne.n	8016698 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016692:	68ba      	ldr	r2, [r7, #8]
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8016698:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801669c:	2b02      	cmp	r3, #2
 801669e:	f000 80a0 	beq.w	80167e2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 80166a2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80166a6:	2b01      	cmp	r3, #1
 80166a8:	d176      	bne.n	8016798 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 80166aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166ac:	330e      	adds	r3, #14
 80166ae:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d025      	beq.n	8016704 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 80166b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166ba:	3322      	adds	r3, #34	@ 0x22
 80166bc:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80166c2:	6a3b      	ldr	r3, [r7, #32]
 80166c4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80166ca:	6a3b      	ldr	r3, [r7, #32]
 80166cc:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 80166ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166d0:	b29b      	uxth	r3, r3
 80166d2:	3308      	adds	r3, #8
 80166d4:	b29a      	uxth	r2, r3
 80166d6:	6a3b      	ldr	r3, [r7, #32]
 80166d8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80166da:	6a3b      	ldr	r3, [r7, #32]
 80166dc:	889b      	ldrh	r3, [r3, #4]
 80166de:	b29b      	uxth	r3, r3
 80166e0:	021b      	lsls	r3, r3, #8
 80166e2:	b21a      	sxth	r2, r3
 80166e4:	6a3b      	ldr	r3, [r7, #32]
 80166e6:	889b      	ldrh	r3, [r3, #4]
 80166e8:	b29b      	uxth	r3, r3
 80166ea:	0a1b      	lsrs	r3, r3, #8
 80166ec:	b29b      	uxth	r3, r3
 80166ee:	b21b      	sxth	r3, r3
 80166f0:	4313      	orrs	r3, r2
 80166f2:	b21b      	sxth	r3, r3
 80166f4:	b29a      	uxth	r2, r3
 80166f6:	6a3b      	ldr	r3, [r7, #32]
 80166f8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 80166fa:	6a3b      	ldr	r3, [r7, #32]
 80166fc:	2200      	movs	r2, #0
 80166fe:	719a      	strb	r2, [r3, #6]
 8016700:	2200      	movs	r2, #0
 8016702:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8016704:	4b5b      	ldr	r3, [pc, #364]	@ (8016874 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8016706:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801670c:	3306      	adds	r3, #6
 801670e:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8016710:	2218      	movs	r2, #24
 8016712:	69f9      	ldr	r1, [r7, #28]
 8016714:	69b8      	ldr	r0, [r7, #24]
 8016716:	f00b fe0b 	bl	8022330 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801671e:	2b00      	cmp	r3, #0
 8016720:	d109      	bne.n	8016736 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8016722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016724:	2201      	movs	r2, #1
 8016726:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8016728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801672a:	b29b      	uxth	r3, r3
 801672c:	331c      	adds	r3, #28
 801672e:	b29a      	uxth	r2, r3
 8016730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016732:	805a      	strh	r2, [r3, #2]
 8016734:	e005      	b.n	8016742 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8016736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016738:	b29b      	uxth	r3, r3
 801673a:	331c      	adds	r3, #28
 801673c:	b29a      	uxth	r2, r3
 801673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016740:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8016742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016744:	885b      	ldrh	r3, [r3, #2]
 8016746:	b29b      	uxth	r3, r3
 8016748:	021b      	lsls	r3, r3, #8
 801674a:	b21a      	sxth	r2, r3
 801674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801674e:	885b      	ldrh	r3, [r3, #2]
 8016750:	b29b      	uxth	r3, r3
 8016752:	0a1b      	lsrs	r3, r3, #8
 8016754:	b29b      	uxth	r3, r3
 8016756:	b21b      	sxth	r3, r3
 8016758:	4313      	orrs	r3, r2
 801675a:	b21b      	sxth	r3, r3
 801675c:	b29a      	uxth	r2, r3
 801675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016760:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	695a      	ldr	r2, [r3, #20]
 8016766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016768:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801676e:	2b00      	cmp	r3, #0
 8016770:	d004      	beq.n	801677c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8016772:	687b      	ldr	r3, [r7, #4]
 8016774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016776:	681a      	ldr	r2, [r3, #0]
 8016778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801677a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801677c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801677e:	2200      	movs	r2, #0
 8016780:	719a      	strb	r2, [r3, #6]
 8016782:	2200      	movs	r2, #0
 8016784:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	695b      	ldr	r3, [r3, #20]
 801678a:	4a3b      	ldr	r2, [pc, #236]	@ (8016878 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 801678c:	4293      	cmp	r3, r2
 801678e:	d128      	bne.n	80167e2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8016790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016792:	2201      	movs	r2, #1
 8016794:	721a      	strb	r2, [r3, #8]
 8016796:	e024      	b.n	80167e2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016798:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801679c:	2b00      	cmp	r3, #0
 801679e:	d11d      	bne.n	80167dc <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	2200      	movs	r2, #0
 80167a4:	4619      	mov	r1, r3
 80167a6:	2000      	movs	r0, #0
 80167a8:	f7f0 fbc0 	bl	8006f2c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	695b      	ldr	r3, [r3, #20]
 80167b0:	210b      	movs	r1, #11
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7f6 ff58 	bl	800d668 <FreeRTOS_FindEndPointOnNetMask>
 80167b8:	4602      	mov	r2, r0
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d103      	bne.n	80167ce <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 80167c6:	2302      	movs	r3, #2
 80167c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80167cc:	e009      	b.n	80167e2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 80167ce:	68fa      	ldr	r2, [r7, #12]
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 80167d4:	6878      	ldr	r0, [r7, #4]
 80167d6:	f7f0 ff25 	bl	8007624 <vARPGenerateRequestPacket>
 80167da:	e002      	b.n	80167e2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80167dc:	2302      	movs	r3, #2
 80167de:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 80167e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80167e6:	2b02      	cmp	r3, #2
 80167e8:	d03d      	beq.n	8016866 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d035      	beq.n	801685e <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80167f6:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80167fa:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016800:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8016802:	693b      	ldr	r3, [r7, #16]
 8016804:	1d98      	adds	r0, r3, #6
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801680a:	33e8      	adds	r3, #232	@ 0xe8
 801680c:	2206      	movs	r2, #6
 801680e:	4619      	mov	r1, r3
 8016810:	f00b fd8e 	bl	8022330 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016818:	2b3b      	cmp	r3, #59	@ 0x3b
 801681a:	d812      	bhi.n	8016842 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016820:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016822:	e008      	b.n	8016836 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801682a:	4413      	add	r3, r2
 801682c:	2200      	movs	r2, #0
 801682e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016830:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016832:	3301      	adds	r3, #1
 8016834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016838:	2b3b      	cmp	r3, #59	@ 0x3b
 801683a:	ddf3      	ble.n	8016824 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	223c      	movs	r2, #60	@ 0x3c
 8016840:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	2b00      	cmp	r3, #0
 8016846:	d011      	beq.n	801686c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	68db      	ldr	r3, [r3, #12]
 801684c:	2b00      	cmp	r3, #0
 801684e:	d00d      	beq.n	801686c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016850:	697b      	ldr	r3, [r7, #20]
 8016852:	68db      	ldr	r3, [r3, #12]
 8016854:	2201      	movs	r2, #1
 8016856:	6879      	ldr	r1, [r7, #4]
 8016858:	6978      	ldr	r0, [r7, #20]
 801685a:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 801685c:	e006      	b.n	801686c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f000 fca2 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
}
 8016864:	e002      	b.n	801686c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016866:	6878      	ldr	r0, [r7, #4]
 8016868:	f000 fc9e 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
}
 801686c:	bf00      	nop
 801686e:	3738      	adds	r7, #56	@ 0x38
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}
 8016874:	08027678 	.word	0x08027678
 8016878:	fc0000e0 	.word	0xfc0000e0

0801687c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 801687c:	b590      	push	{r4, r7, lr}
 801687e:	b099      	sub	sp, #100	@ 0x64
 8016880:	af02      	add	r7, sp, #8
 8016882:	60f8      	str	r0, [r7, #12]
 8016884:	460b      	mov	r3, r1
 8016886:	607a      	str	r2, [r7, #4]
 8016888:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 801688a:	2301      	movs	r3, #1
 801688c:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d104      	bne.n	801689e <xProcessReceivedUDPPacket_IPv4+0x22>
 8016894:	f240 116f 	movw	r1, #367	@ 0x16f
 8016898:	4872      	ldr	r0, [pc, #456]	@ (8016a64 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 801689a:	f7eb f84d 	bl	8001938 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801689e:	68fb      	ldr	r3, [r7, #12]
 80168a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d104      	bne.n	80168b0 <xProcessReceivedUDPPacket_IPv4+0x34>
 80168a6:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80168aa:	486e      	ldr	r0, [pc, #440]	@ (8016a64 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 80168ac:	f7eb f844 	bl	8001938 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80168b0:	68fb      	ldr	r3, [r7, #12]
 80168b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168b4:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80168ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 80168bc:	897b      	ldrh	r3, [r7, #10]
 80168be:	4618      	mov	r0, r3
 80168c0:	f7f8 fc60 	bl	800f184 <pxUDPSocketLookup>
 80168c4:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	2200      	movs	r2, #0
 80168ca:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 80168cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	f000 8085 	beq.w	80169de <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 80168d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d018      	beq.n	801690c <xProcessReceivedUDPPacket_IPv4+0x90>
 80168da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d014      	beq.n	801690c <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80168e2:	68f8      	ldr	r0, [r7, #12]
 80168e4:	f7f0 fa0c 	bl	8006d00 <xCheckRequiresARPResolution>
 80168e8:	4603      	mov	r3, r0
 80168ea:	2b01      	cmp	r3, #1
 80168ec:	d105      	bne.n	80168fa <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	2201      	movs	r2, #1
 80168f2:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 80168f4:	2300      	movs	r3, #0
 80168f6:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 80168f8:	e0ae      	b.n	8016a58 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 80168fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80168fc:	1d9a      	adds	r2, r3, #6
 80168fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016900:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8016904:	4619      	mov	r1, r3
 8016906:	4610      	mov	r0, r2
 8016908:	f7f0 fada 	bl	8006ec0 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 801690c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801690e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016910:	2b00      	cmp	r3, #0
 8016912:	d02f      	beq.n	8016974 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016918:	332a      	adds	r3, #42	@ 0x2a
 801691a:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 801691c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801691e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016920:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016926:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	695b      	ldr	r3, [r3, #20]
 801692c:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 801692e:	2302      	movs	r3, #2
 8016930:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8016934:	2318      	movs	r3, #24
 8016936:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 801693a:	897b      	ldrh	r3, [r7, #10]
 801693c:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 801693e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016940:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8016944:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8016946:	2302      	movs	r3, #2
 8016948:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 801694a:	2318      	movs	r3, #24
 801694c:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016952:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8016956:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 801695a:	f107 0310 	add.w	r3, r7, #16
 801695e:	9300      	str	r3, [sp, #0]
 8016960:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8016962:	460b      	mov	r3, r1
 8016964:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8016966:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8016968:	47a0      	blx	r4
 801696a:	4603      	mov	r3, r0
 801696c:	2b00      	cmp	r3, #0
 801696e:	d001      	beq.n	8016974 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016970:	2300      	movs	r3, #0
 8016972:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016976:	2b01      	cmp	r3, #1
 8016978:	d16e      	bne.n	8016a58 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 801697a:	f7ed fd5d 	bl	8004438 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801697e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016980:	3354      	adds	r3, #84	@ 0x54
 8016982:	68fa      	ldr	r2, [r7, #12]
 8016984:	4611      	mov	r1, r2
 8016986:	4618      	mov	r0, r3
 8016988:	f7ec fcaf 	bl	80032ea <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 801698c:	f7ed fd62 	bl	8004454 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016990:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016992:	685b      	ldr	r3, [r3, #4]
 8016994:	2b00      	cmp	r3, #0
 8016996:	d005      	beq.n	80169a4 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016998:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801699a:	685b      	ldr	r3, [r3, #4]
 801699c:	2101      	movs	r1, #1
 801699e:	4618      	mov	r0, r3
 80169a0:	f7ec fb9e 	bl	80030e0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 80169a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80169a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d00c      	beq.n	80169c6 <xProcessReceivedUDPPacket_IPv4+0x14a>
 80169ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80169ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80169b0:	f003 0301 	and.w	r3, r3, #1
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d006      	beq.n	80169c6 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 80169b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80169ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2101      	movs	r1, #1
 80169c0:	4618      	mov	r0, r3
 80169c2:	f7ec fb8d 	bl	80030e0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 80169c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80169c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d044      	beq.n	8016a58 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 80169ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80169d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80169d2:	2300      	movs	r3, #0
 80169d4:	2200      	movs	r2, #0
 80169d6:	2100      	movs	r1, #0
 80169d8:	f7ec fe5e 	bl	8003698 <xQueueGenericSend>
 80169dc:	e03c      	b.n	8016a58 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 80169de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80169e0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80169e2:	b29b      	uxth	r3, r3
 80169e4:	021b      	lsls	r3, r3, #8
 80169e6:	b21a      	sxth	r2, r3
 80169e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80169ea:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80169ec:	b29b      	uxth	r3, r3
 80169ee:	0a1b      	lsrs	r3, r3, #8
 80169f0:	b29b      	uxth	r3, r3
 80169f2:	b21b      	sxth	r3, r3
 80169f4:	4313      	orrs	r3, r2
 80169f6:	b21b      	sxth	r3, r3
 80169f8:	2b35      	cmp	r3, #53	@ 0x35
 80169fa:	d10f      	bne.n	8016a1c <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 80169fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80169fe:	1d98      	adds	r0, r3, #6
 8016a00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016a02:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a0a:	461a      	mov	r2, r3
 8016a0c:	f7f0 fa8e 	bl	8006f2c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016a10:	68f8      	ldr	r0, [r7, #12]
 8016a12:	f7f0 ff20 	bl	8007856 <ulDNSHandlePacket>
 8016a16:	4603      	mov	r3, r0
 8016a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8016a1a:	e01d      	b.n	8016a58 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8016a1c:	897b      	ldrh	r3, [r7, #10]
 8016a1e:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016a22:	4293      	cmp	r3, r2
 8016a24:	d006      	beq.n	8016a34 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8016a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016a28:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8016a2a:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8016a2c:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016a30:	4293      	cmp	r3, r2
 8016a32:	d10f      	bne.n	8016a54 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8016a34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016a36:	1d98      	adds	r0, r3, #6
 8016a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016a3a:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016a42:	461a      	mov	r2, r3
 8016a44:	f7f0 fa72 	bl	8006f2c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016a48:	68f8      	ldr	r0, [r7, #12]
 8016a4a:	f7f0 ff04 	bl	8007856 <ulDNSHandlePacket>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	657b      	str	r3, [r7, #84]	@ 0x54
 8016a52:	e001      	b.n	8016a58 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016a54:	2300      	movs	r3, #0
 8016a56:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016a58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	375c      	adds	r7, #92	@ 0x5c
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd90      	pop	{r4, r7, pc}
 8016a62:	bf00      	nop
 8016a64:	08026f84 	.word	0x08026f84

08016a68 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b086      	sub	sp, #24
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
 8016a70:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8016a72:	2000      	movs	r0, #0
 8016a74:	f7f6 fd20 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 8016a78:	6178      	str	r0, [r7, #20]
 8016a7a:	e021      	b.n	8016ac0 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	2b60      	cmp	r3, #96	@ 0x60
 8016a80:	d119      	bne.n	8016ab6 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8016a82:	697b      	ldr	r3, [r7, #20]
 8016a84:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8016a88:	f003 0304 	and.w	r3, r3, #4
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d011      	beq.n	8016ab6 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	3338      	adds	r3, #56	@ 0x38
 8016a96:	4618      	mov	r0, r3
 8016a98:	f7f7 f8f2 	bl	800dc80 <xIPv6_GetIPType>
 8016a9c:	4603      	mov	r3, r0
 8016a9e:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016aa0:	7cfb      	ldrb	r3, [r7, #19]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d101      	bne.n	8016aaa <pxGetEndpoint+0x42>
 8016aa6:	2301      	movs	r3, #1
 8016aa8:	e000      	b.n	8016aac <pxGetEndpoint+0x44>
 8016aaa:	2300      	movs	r3, #0
 8016aac:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d008      	beq.n	8016ac8 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8016ab6:	6979      	ldr	r1, [r7, #20]
 8016ab8:	2000      	movs	r0, #0
 8016aba:	f7f6 fd1f 	bl	800d4fc <FreeRTOS_NextEndPoint>
 8016abe:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d1da      	bne.n	8016a7c <pxGetEndpoint+0x14>
 8016ac6:	e000      	b.n	8016aca <pxGetEndpoint+0x62>
                {
                    break;
 8016ac8:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8016aca:	697b      	ldr	r3, [r7, #20]
}
 8016acc:	4618      	mov	r0, r3
 8016ace:	3718      	adds	r7, #24
 8016ad0:	46bd      	mov	sp, r7
 8016ad2:	bd80      	pop	{r7, pc}

08016ad4 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b084      	sub	sp, #16
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 8016ade:	2300      	movs	r3, #0
 8016ae0:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	f103 0114 	add.w	r1, r3, #20
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d001      	beq.n	8016af4 <prvStartLookup+0x20>
 8016af0:	4b1e      	ldr	r3, [pc, #120]	@ (8016b6c <prvStartLookup+0x98>)
 8016af2:	e000      	b.n	8016af6 <prvStartLookup+0x22>
 8016af4:	4b1e      	ldr	r3, [pc, #120]	@ (8016b70 <prvStartLookup+0x9c>)
 8016af6:	461a      	mov	r2, r3
 8016af8:	481e      	ldr	r0, [pc, #120]	@ (8016b74 <prvStartLookup+0xa0>)
 8016afa:	f00b f9fd 	bl	8021ef8 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b02:	2b00      	cmp	r3, #0
 8016b04:	d11f      	bne.n	8016b46 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	3314      	adds	r3, #20
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	f7f7 f8b8 	bl	800dc80 <xIPv6_GetIPType>
 8016b10:	4603      	mov	r3, r0
 8016b12:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016b14:	7bbb      	ldrb	r3, [r7, #14]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d101      	bne.n	8016b1e <prvStartLookup+0x4a>
 8016b1a:	2301      	movs	r3, #1
 8016b1c:	e000      	b.n	8016b20 <prvStartLookup+0x4c>
 8016b1e:	2300      	movs	r3, #0
 8016b20:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 8016b22:	68b9      	ldr	r1, [r7, #8]
 8016b24:	2060      	movs	r0, #96	@ 0x60
 8016b26:	f7ff ff9f 	bl	8016a68 <pxGetEndpoint>
 8016b2a:	4602      	mov	r2, r0
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d001      	beq.n	8016b3c <prvStartLookup+0x68>
 8016b38:	4b0f      	ldr	r3, [pc, #60]	@ (8016b78 <prvStartLookup+0xa4>)
 8016b3a:	e000      	b.n	8016b3e <prvStartLookup+0x6a>
 8016b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8016b7c <prvStartLookup+0xa8>)
 8016b3e:	4619      	mov	r1, r3
 8016b40:	480f      	ldr	r0, [pc, #60]	@ (8016b80 <prvStartLookup+0xac>)
 8016b42:	f00b f9d9 	bl	8021ef8 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d008      	beq.n	8016b60 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	3314      	adds	r3, #20
 8016b52:	4619      	mov	r1, r3
 8016b54:	6878      	ldr	r0, [r7, #4]
 8016b56:	f7f5 f9d5 	bl	800bf04 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 8016b5a:	683b      	ldr	r3, [r7, #0]
 8016b5c:	2201      	movs	r2, #1
 8016b5e:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8016b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b62:	4618      	mov	r0, r3
 8016b64:	3710      	adds	r7, #16
 8016b66:	46bd      	mov	sp, r7
 8016b68:	bd80      	pop	{r7, pc}
 8016b6a:	bf00      	nop
 8016b6c:	08026fb8 	.word	0x08026fb8
 8016b70:	08026fbc 	.word	0x08026fbc
 8016b74:	08026fc0 	.word	0x08026fc0
 8016b78:	08026fe4 	.word	0x08026fe4
 8016b7c:	08026fe8 	.word	0x08026fe8
 8016b80:	08026fec 	.word	0x08026fec

08016b84 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8016b84:	b590      	push	{r4, r7, lr}
 8016b86:	b093      	sub	sp, #76	@ 0x4c
 8016b88:	af00      	add	r7, sp, #0
 8016b8a:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 8016b8c:	2300      	movs	r3, #0
 8016b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8016b90:	2300      	movs	r3, #0
 8016b92:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8016b94:	2300      	movs	r3, #0
 8016b96:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8016b98:	2300      	movs	r3, #0
 8016b9a:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ba0:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8016ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016ba4:	330e      	adds	r3, #14
 8016ba6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	3314      	adds	r3, #20
 8016bac:	f107 040c 	add.w	r4, r7, #12
 8016bb0:	6818      	ldr	r0, [r3, #0]
 8016bb2:	6859      	ldr	r1, [r3, #4]
 8016bb4:	689a      	ldr	r2, [r3, #8]
 8016bb6:	68db      	ldr	r3, [r3, #12]
 8016bb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d107      	bne.n	8016bd2 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 8016bc2:	233e      	movs	r3, #62	@ 0x3e
 8016bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8016bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016bcc:	1ad3      	subs	r3, r2, r3
 8016bce:	643b      	str	r3, [r7, #64]	@ 0x40
 8016bd0:	e003      	b.n	8016bda <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016bd6:	3b3e      	subs	r3, #62	@ 0x3e
 8016bd8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	3314      	adds	r3, #20
 8016bde:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016be0:	f107 021c 	add.w	r2, r7, #28
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7f4 ff21 	bl	800ba2c <eNDGetCacheEntry>
 8016bea:	4603      	mov	r3, r0
 8016bec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 8016bf0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016bf4:	2b02      	cmp	r3, #2
 8016bf6:	f000 80b1 	beq.w	8016d5c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 8016bfa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016bfe:	2b01      	cmp	r3, #1
 8016c00:	f040 8095 	bne.w	8016d2e <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016c04:	69fa      	ldr	r2, [r7, #28]
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d109      	bne.n	8016c26 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c14:	2260      	movs	r2, #96	@ 0x60
 8016c16:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8016c18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c1a:	223a      	movs	r2, #58	@ 0x3a
 8016c1c:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 8016c1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c20:	2280      	movs	r2, #128	@ 0x80
 8016c22:	71da      	strb	r2, [r3, #7]
 8016c24:	e05e      	b.n	8016ce4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8016c26:	2300      	movs	r3, #0
 8016c28:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 8016c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016c2c:	3336      	adds	r3, #54	@ 0x36
 8016c2e:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c32:	2260      	movs	r2, #96	@ 0x60
 8016c34:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8016c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c38:	2200      	movs	r2, #0
 8016c3a:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8016c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c3e:	2200      	movs	r2, #0
 8016c40:	709a      	strb	r2, [r3, #2]
 8016c42:	2200      	movs	r2, #0
 8016c44:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8016c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c48:	22ff      	movs	r2, #255	@ 0xff
 8016c4a:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	3b36      	subs	r3, #54	@ 0x36
 8016c54:	b29a      	uxth	r2, r3
 8016c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c58:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8016c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c5c:	2211      	movs	r2, #17
 8016c5e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c64:	b29b      	uxth	r3, r3
 8016c66:	3b36      	subs	r3, #54	@ 0x36
 8016c68:	b29a      	uxth	r2, r3
 8016c6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c6c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 8016c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c70:	889b      	ldrh	r3, [r3, #4]
 8016c72:	b29b      	uxth	r3, r3
 8016c74:	021b      	lsls	r3, r3, #8
 8016c76:	b21a      	sxth	r2, r3
 8016c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c7a:	889b      	ldrh	r3, [r3, #4]
 8016c7c:	b29b      	uxth	r3, r3
 8016c7e:	0a1b      	lsrs	r3, r3, #8
 8016c80:	b29b      	uxth	r3, r3
 8016c82:	b21b      	sxth	r3, r3
 8016c84:	4313      	orrs	r3, r2
 8016c86:	b21b      	sxth	r3, r3
 8016c88:	b29a      	uxth	r2, r3
 8016c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016c8c:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8016c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c94:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8016c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c9c:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8016c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ca0:	889b      	ldrh	r3, [r3, #4]
 8016ca2:	b29b      	uxth	r3, r3
 8016ca4:	021b      	lsls	r3, r3, #8
 8016ca6:	b21a      	sxth	r2, r3
 8016ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016caa:	889b      	ldrh	r3, [r3, #4]
 8016cac:	b29b      	uxth	r3, r3
 8016cae:	0a1b      	lsrs	r3, r3, #8
 8016cb0:	b29b      	uxth	r3, r3
 8016cb2:	b21b      	sxth	r3, r3
 8016cb4:	4313      	orrs	r3, r2
 8016cb6:	b21b      	sxth	r3, r3
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cbc:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8016cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cc0:	2200      	movs	r2, #0
 8016cc2:	719a      	strb	r2, [r3, #6]
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d009      	beq.n	8016ce4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8016cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016cd2:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016cda:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8016cdc:	2210      	movs	r2, #16
 8016cde:	4619      	mov	r1, r3
 8016ce0:	f00b fb26 	bl	8022330 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	d10e      	bne.n	8016d0a <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8016cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	3308      	adds	r3, #8
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	021b      	lsls	r3, r3, #8
 8016cf6:	b29a      	uxth	r2, r3
 8016cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016cfa:	3308      	adds	r3, #8
 8016cfc:	0a1b      	lsrs	r3, r3, #8
 8016cfe:	b29b      	uxth	r3, r3
 8016d00:	4313      	orrs	r3, r2
 8016d02:	b29a      	uxth	r2, r3
 8016d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d06:	809a      	strh	r2, [r3, #4]
 8016d08:	e028      	b.n	8016d5c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8016d0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d0c:	2211      	movs	r2, #17
 8016d0e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 8016d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	3308      	adds	r3, #8
 8016d16:	b29b      	uxth	r3, r3
 8016d18:	021b      	lsls	r3, r3, #8
 8016d1a:	b29a      	uxth	r2, r3
 8016d1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016d1e:	3308      	adds	r3, #8
 8016d20:	0a1b      	lsrs	r3, r3, #8
 8016d22:	b29b      	uxth	r3, r3
 8016d24:	4313      	orrs	r3, r2
 8016d26:	b29a      	uxth	r2, r3
 8016d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016d2a:	809a      	strh	r2, [r3, #4]
 8016d2c:	e016      	b.n	8016d5c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8016d2e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d10f      	bne.n	8016d56 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8016d36:	69fb      	ldr	r3, [r7, #28]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d002      	beq.n	8016d42 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016d3c:	69fa      	ldr	r2, [r7, #28]
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 8016d42:	f107 0320 	add.w	r3, r7, #32
 8016d46:	4619      	mov	r1, r3
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f7ff fec3 	bl	8016ad4 <prvStartLookup>
 8016d4e:	4603      	mov	r3, r0
 8016d50:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016d54:	e002      	b.n	8016d5c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8016d56:	2302      	movs	r3, #2
 8016d58:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 8016d5c:	6a3b      	ldr	r3, [r7, #32]
 8016d5e:	2b01      	cmp	r3, #1
 8016d60:	d03d      	beq.n	8016dde <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8016d62:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016d66:	2b02      	cmp	r3, #2
 8016d68:	d036      	beq.n	8016dd8 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	d02e      	beq.n	8016dd0 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d76:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8016d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d80:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016d84:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d8a:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8016d8c:	2206      	movs	r2, #6
 8016d8e:	4619      	mov	r1, r3
 8016d90:	f00b face 	bl	8022330 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d98:	2b3b      	cmp	r3, #59	@ 0x3b
 8016d9a:	d812      	bhi.n	8016dc2 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016da2:	e008      	b.n	8016db6 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016da8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016daa:	4413      	add	r3, r2
 8016dac:	2200      	movs	r2, #0
 8016dae:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8016db0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016db2:	3301      	adds	r3, #1
 8016db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016db6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016db8:	2b3b      	cmp	r3, #59	@ 0x3b
 8016dba:	ddf3      	ble.n	8016da4 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	223c      	movs	r2, #60	@ 0x3c
 8016dc0:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8016dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016dc4:	68db      	ldr	r3, [r3, #12]
 8016dc6:	2201      	movs	r2, #1
 8016dc8:	6879      	ldr	r1, [r7, #4]
 8016dca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016dcc:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8016dce:	e006      	b.n	8016dde <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016dd0:	6878      	ldr	r0, [r7, #4]
 8016dd2:	f000 f9e9 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
}
 8016dd6:	e002      	b.n	8016dde <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8016dd8:	6878      	ldr	r0, [r7, #4]
 8016dda:	f000 f9e5 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
}
 8016dde:	bf00      	nop
 8016de0:	374c      	adds	r7, #76	@ 0x4c
 8016de2:	46bd      	mov	sp, r7
 8016de4:	bd90      	pop	{r4, r7, pc}
	...

08016de8 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8016de8:	b590      	push	{r4, r7, lr}
 8016dea:	b09b      	sub	sp, #108	@ 0x6c
 8016dec:	af02      	add	r7, sp, #8
 8016dee:	60f8      	str	r0, [r7, #12]
 8016df0:	460b      	mov	r3, r1
 8016df2:	607a      	str	r2, [r7, #4]
 8016df4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8016df6:	2301      	movs	r3, #1
 8016df8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d104      	bne.n	8016e0a <xProcessReceivedUDPPacket_IPv6+0x22>
 8016e00:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8016e04:	4874      	ldr	r0, [pc, #464]	@ (8016fd8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016e06:	f7ea fd97 	bl	8001938 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d104      	bne.n	8016e1c <xProcessReceivedUDPPacket_IPv6+0x34>
 8016e12:	f240 1187 	movw	r1, #391	@ 0x187
 8016e16:	4870      	ldr	r0, [pc, #448]	@ (8016fd8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016e18:	f7ea fd8e 	bl	8001938 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e20:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8016e22:	897b      	ldrh	r3, [r7, #10]
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7f8 f9ad 	bl	800f184 <pxUDPSocketLookup>
 8016e2a:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 8016e32:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016e34:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016e36:	b29b      	uxth	r3, r3
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d109      	bne.n	8016e50 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 8016e3c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016e3e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016e40:	b29b      	uxth	r3, r3
 8016e42:	4619      	mov	r1, r3
 8016e44:	4865      	ldr	r0, [pc, #404]	@ (8016fdc <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8016e46:	f00b f857 	bl	8021ef8 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 8016e4e:	e0bd      	b.n	8016fcc <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 8016e50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e52:	2b00      	cmp	r3, #0
 8016e54:	f000 8091 	beq.w	8016f7a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016e58:	68f8      	ldr	r0, [r7, #12]
 8016e5a:	f7ef ff51 	bl	8006d00 <xCheckRequiresARPResolution>
 8016e5e:	4603      	mov	r3, r0
 8016e60:	2b01      	cmp	r3, #1
 8016e62:	d105      	bne.n	8016e70 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2201      	movs	r2, #1
 8016e68:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 8016e6e:	e0ad      	b.n	8016fcc <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016e70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016e72:	1d98      	adds	r0, r3, #6
 8016e74:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016e76:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016e7e:	461a      	mov	r2, r3
 8016e80:	f7f4 fe82 	bl	800bb88 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8016e84:	68f8      	ldr	r0, [r7, #12]
 8016e86:	f7f2 ff7f 	bl	8009d88 <uxIPHeaderSizePacket>
 8016e8a:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8016e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016e8e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d03d      	beq.n	8016f10 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016e9a:	3316      	adds	r3, #22
 8016e9c:	4413      	add	r3, r2
 8016e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8016ea0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016ea2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8016ea4:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016eaa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 8016eac:	897b      	ldrh	r3, [r7, #10]
 8016eae:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016eb0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016eb2:	3316      	adds	r3, #22
 8016eb4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8016eb8:	6818      	ldr	r0, [r3, #0]
 8016eba:	6859      	ldr	r1, [r3, #4]
 8016ebc:	689a      	ldr	r2, [r3, #8]
 8016ebe:	68db      	ldr	r3, [r3, #12]
 8016ec0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8016ec2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016ec4:	3326      	adds	r3, #38	@ 0x26
 8016ec6:	f107 041c 	add.w	r4, r7, #28
 8016eca:	6818      	ldr	r0, [r3, #0]
 8016ecc:	6859      	ldr	r1, [r3, #4]
 8016ece:	689a      	ldr	r2, [r3, #8]
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016ed4:	230a      	movs	r3, #10
 8016ed6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 8016eda:	230a      	movs	r3, #10
 8016edc:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8016ede:	2318      	movs	r3, #24
 8016ee0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8016ee4:	2318      	movs	r3, #24
 8016ee6:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8016ee8:	68fb      	ldr	r3, [r7, #12]
 8016eea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016eec:	3b3e      	subs	r3, #62	@ 0x3e
 8016eee:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 8016ef0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016ef4:	f107 0314 	add.w	r3, r7, #20
 8016ef8:	9300      	str	r3, [sp, #0]
 8016efa:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8016efc:	4613      	mov	r3, r2
 8016efe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016f00:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016f02:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016f04:	47a0      	blx	r4
 8016f06:	4603      	mov	r3, r0
 8016f08:	2b00      	cmp	r3, #0
 8016f0a:	d001      	beq.n	8016f10 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016f10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016f12:	2b01      	cmp	r3, #1
 8016f14:	d15a      	bne.n	8016fcc <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8016f16:	f7ed fa8f 	bl	8004438 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8016f1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f1c:	3354      	adds	r3, #84	@ 0x54
 8016f1e:	68fa      	ldr	r2, [r7, #12]
 8016f20:	4611      	mov	r1, r2
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7ec f9e1 	bl	80032ea <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8016f28:	f7ed fa94 	bl	8004454 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8016f2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d005      	beq.n	8016f40 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f36:	685b      	ldr	r3, [r3, #4]
 8016f38:	2101      	movs	r1, #1
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	f7ec f8d0 	bl	80030e0 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d00c      	beq.n	8016f62 <xProcessReceivedUDPPacket_IPv6+0x17a>
 8016f48:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f4c:	f003 0301 	and.w	r3, r3, #1
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d006      	beq.n	8016f62 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016f58:	681b      	ldr	r3, [r3, #0]
 8016f5a:	2101      	movs	r1, #1
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7ec f8bf 	bl	80030e0 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d030      	beq.n	8016fcc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8016f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f6c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8016f6e:	2300      	movs	r3, #0
 8016f70:	2200      	movs	r2, #0
 8016f72:	2100      	movs	r1, #0
 8016f74:	f7ec fb90 	bl	8003698 <xQueueGenericSend>
 8016f78:	e028      	b.n	8016fcc <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8016f7a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	021b      	lsls	r3, r3, #8
 8016f82:	b21a      	sxth	r2, r3
 8016f84:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016f86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	0a1b      	lsrs	r3, r3, #8
 8016f8c:	b29b      	uxth	r3, r3
 8016f8e:	b21b      	sxth	r3, r3
 8016f90:	4313      	orrs	r3, r2
 8016f92:	b21b      	sxth	r3, r3
 8016f94:	2b35      	cmp	r3, #53	@ 0x35
 8016f96:	d105      	bne.n	8016fa4 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016f98:	68f8      	ldr	r0, [r7, #12]
 8016f9a:	f7f0 fc5c 	bl	8007856 <ulDNSHandlePacket>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016fa2:	e013      	b.n	8016fcc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016fa4:	897b      	ldrh	r3, [r7, #10]
 8016fa6:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016faa:	4293      	cmp	r3, r2
 8016fac:	d006      	beq.n	8016fbc <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 8016fae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016fb2:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 8016fb4:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016fb8:	4293      	cmp	r3, r2
 8016fba:	d105      	bne.n	8016fc8 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016fbc:	68f8      	ldr	r0, [r7, #12]
 8016fbe:	f7f0 fc4a 	bl	8007856 <ulDNSHandlePacket>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8016fc6:	e001      	b.n	8016fcc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016fcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 8016fce:	4618      	mov	r0, r3
 8016fd0:	3764      	adds	r7, #100	@ 0x64
 8016fd2:	46bd      	mov	sp, r7
 8016fd4:	bd90      	pop	{r4, r7, pc}
 8016fd6:	bf00      	nop
 8016fd8:	08027014 	.word	0x08027014
 8016fdc:	08027048 	.word	0x08027048

08016fe0 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8016fe0:	b480      	push	{r7}
 8016fe2:	b083      	sub	sp, #12
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8016fe8:	2301      	movs	r3, #1
    }
 8016fea:	4618      	mov	r0, r3
 8016fec:	370c      	adds	r7, #12
 8016fee:	46bd      	mov	sp, r7
 8016ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ff4:	4770      	bx	lr

08016ff6 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8016ff6:	b480      	push	{r7}
 8016ff8:	af00      	add	r7, sp, #0
    }
 8016ffa:	bf00      	nop
 8016ffc:	46bd      	mov	sp, r7
 8016ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017002:	4770      	bx	lr

08017004 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b082      	sub	sp, #8
 8017008:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 801700a:	4b2e      	ldr	r3, [pc, #184]	@ (80170c4 <xNetworkBuffersInitialise+0xc0>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d149      	bne.n	80170a6 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8017012:	2140      	movs	r1, #64	@ 0x40
 8017014:	2040      	movs	r0, #64	@ 0x40
 8017016:	f7ec fb15 	bl	8003644 <xQueueCreateCountingSemaphore>
 801701a:	4603      	mov	r3, r0
 801701c:	4a29      	ldr	r2, [pc, #164]	@ (80170c4 <xNetworkBuffersInitialise+0xc0>)
 801701e:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8017020:	4b28      	ldr	r3, [pc, #160]	@ (80170c4 <xNetworkBuffersInitialise+0xc0>)
 8017022:	681b      	ldr	r3, [r3, #0]
 8017024:	2b00      	cmp	r3, #0
 8017026:	d103      	bne.n	8017030 <xNetworkBuffersInitialise+0x2c>
 8017028:	21c3      	movs	r1, #195	@ 0xc3
 801702a:	4827      	ldr	r0, [pc, #156]	@ (80170c8 <xNetworkBuffersInitialise+0xc4>)
 801702c:	f7ea fc84 	bl	8001938 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 8017030:	4b24      	ldr	r3, [pc, #144]	@ (80170c4 <xNetworkBuffersInitialise+0xc0>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	2b00      	cmp	r3, #0
 8017036:	d036      	beq.n	80170a6 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8017038:	4824      	ldr	r0, [pc, #144]	@ (80170cc <xNetworkBuffersInitialise+0xc8>)
 801703a:	f7ec f929 	bl	8003290 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 801703e:	4824      	ldr	r0, [pc, #144]	@ (80170d0 <xNetworkBuffersInitialise+0xcc>)
 8017040:	f001 fa24 	bl	801848c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017044:	2300      	movs	r3, #0
 8017046:	603b      	str	r3, [r7, #0]
 8017048:	e027      	b.n	801709a <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 801704a:	683a      	ldr	r2, [r7, #0]
 801704c:	4613      	mov	r3, r2
 801704e:	00db      	lsls	r3, r3, #3
 8017050:	1a9b      	subs	r3, r3, r2
 8017052:	00db      	lsls	r3, r3, #3
 8017054:	4a1e      	ldr	r2, [pc, #120]	@ (80170d0 <xNetworkBuffersInitialise+0xcc>)
 8017056:	4413      	add	r3, r2
 8017058:	4618      	mov	r0, r3
 801705a:	f7ec f939 	bl	80032d0 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 801705e:	683a      	ldr	r2, [r7, #0]
 8017060:	4613      	mov	r3, r2
 8017062:	00db      	lsls	r3, r3, #3
 8017064:	1a9b      	subs	r3, r3, r2
 8017066:	00db      	lsls	r3, r3, #3
 8017068:	4a19      	ldr	r2, [pc, #100]	@ (80170d0 <xNetworkBuffersInitialise+0xcc>)
 801706a:	1899      	adds	r1, r3, r2
 801706c:	4818      	ldr	r0, [pc, #96]	@ (80170d0 <xNetworkBuffersInitialise+0xcc>)
 801706e:	683a      	ldr	r2, [r7, #0]
 8017070:	4613      	mov	r3, r2
 8017072:	00db      	lsls	r3, r3, #3
 8017074:	1a9b      	subs	r3, r3, r2
 8017076:	00db      	lsls	r3, r3, #3
 8017078:	4403      	add	r3, r0
 801707a:	330c      	adds	r3, #12
 801707c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 801707e:	683a      	ldr	r2, [r7, #0]
 8017080:	4613      	mov	r3, r2
 8017082:	00db      	lsls	r3, r3, #3
 8017084:	1a9b      	subs	r3, r3, r2
 8017086:	00db      	lsls	r3, r3, #3
 8017088:	4a11      	ldr	r2, [pc, #68]	@ (80170d0 <xNetworkBuffersInitialise+0xcc>)
 801708a:	4413      	add	r3, r2
 801708c:	4619      	mov	r1, r3
 801708e:	480f      	ldr	r0, [pc, #60]	@ (80170cc <xNetworkBuffersInitialise+0xc8>)
 8017090:	f7ec f94f 	bl	8003332 <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	3301      	adds	r3, #1
 8017098:	603b      	str	r3, [r7, #0]
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	2b3f      	cmp	r3, #63	@ 0x3f
 801709e:	d9d4      	bls.n	801704a <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80170a0:	4b0c      	ldr	r3, [pc, #48]	@ (80170d4 <xNetworkBuffersInitialise+0xd0>)
 80170a2:	2240      	movs	r2, #64	@ 0x40
 80170a4:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 80170a6:	4b07      	ldr	r3, [pc, #28]	@ (80170c4 <xNetworkBuffersInitialise+0xc0>)
 80170a8:	681b      	ldr	r3, [r3, #0]
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d102      	bne.n	80170b4 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 80170ae:	2300      	movs	r3, #0
 80170b0:	607b      	str	r3, [r7, #4]
 80170b2:	e001      	b.n	80170b8 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 80170b4:	2301      	movs	r3, #1
 80170b6:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 80170b8:	687b      	ldr	r3, [r7, #4]
}
 80170ba:	4618      	mov	r0, r3
 80170bc:	3708      	adds	r7, #8
 80170be:	46bd      	mov	sp, r7
 80170c0:	bd80      	pop	{r7, pc}
 80170c2:	bf00      	nop
 80170c4:	200023e0 	.word	0x200023e0
 80170c8:	08027088 	.word	0x08027088
 80170cc:	200015c8 	.word	0x200015c8
 80170d0:	200015e0 	.word	0x200015e0
 80170d4:	200015dc 	.word	0x200015dc

080170d8 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 80170d8:	b580      	push	{r7, lr}
 80170da:	b086      	sub	sp, #24
 80170dc:	af00      	add	r7, sp, #0
 80170de:	6078      	str	r0, [r7, #4]
 80170e0:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 80170e2:	2300      	movs	r3, #0
 80170e4:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 80170e6:	2300      	movs	r3, #0
 80170e8:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 80170ea:	4b2a      	ldr	r3, [pc, #168]	@ (8017194 <pxGetNetworkBufferWithDescriptor+0xbc>)
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d04b      	beq.n	801718a <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 80170f2:	4b28      	ldr	r3, [pc, #160]	@ (8017194 <pxGetNetworkBufferWithDescriptor+0xbc>)
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	6839      	ldr	r1, [r7, #0]
 80170f8:	4618      	mov	r0, r3
 80170fa:	f7ec fc85 	bl	8003a08 <xQueueSemaphoreTake>
 80170fe:	4603      	mov	r3, r0
 8017100:	2b01      	cmp	r3, #1
 8017102:	d13d      	bne.n	8017180 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8017104:	f7ef f814 	bl	8006130 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8017108:	4b23      	ldr	r3, [pc, #140]	@ (8017198 <pxGetNetworkBufferWithDescriptor+0xc0>)
 801710a:	68db      	ldr	r3, [r3, #12]
 801710c:	68db      	ldr	r3, [r3, #12]
 801710e:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8017110:	6978      	ldr	r0, [r7, #20]
 8017112:	f7ff ff65 	bl	8016fe0 <bIsValidNetworkDescriptor>
 8017116:	4603      	mov	r3, r0
 8017118:	2b00      	cmp	r3, #0
 801711a:	d009      	beq.n	8017130 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 801711c:	697b      	ldr	r3, [r7, #20]
 801711e:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8017120:	4a1d      	ldr	r2, [pc, #116]	@ (8017198 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017122:	4293      	cmp	r3, r2
 8017124:	d104      	bne.n	8017130 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8017126:	697b      	ldr	r3, [r7, #20]
 8017128:	4618      	mov	r0, r3
 801712a:	f7ec f93b 	bl	80033a4 <uxListRemove>
 801712e:	e001      	b.n	8017134 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8017130:	2301      	movs	r3, #1
 8017132:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8017134:	f7ef f828 	bl	8006188 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	2b01      	cmp	r3, #1
 801713c:	d10b      	bne.n	8017156 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 801713e:	6978      	ldr	r0, [r7, #20]
 8017140:	f7ff ff4e 	bl	8016fe0 <bIsValidNetworkDescriptor>
 8017144:	4603      	mov	r3, r0
 8017146:	461a      	mov	r2, r3
 8017148:	6979      	ldr	r1, [r7, #20]
 801714a:	4814      	ldr	r0, [pc, #80]	@ (801719c <pxGetNetworkBufferWithDescriptor+0xc4>)
 801714c:	f00a fed4 	bl	8021ef8 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8017150:	2300      	movs	r3, #0
 8017152:	617b      	str	r3, [r7, #20]
 8017154:	e019      	b.n	801718a <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017156:	4b10      	ldr	r3, [pc, #64]	@ (8017198 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 801715c:	4b10      	ldr	r3, [pc, #64]	@ (80171a0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	68fa      	ldr	r2, [r7, #12]
 8017162:	429a      	cmp	r2, r3
 8017164:	d202      	bcs.n	801716c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8017166:	4a0e      	ldr	r2, [pc, #56]	@ (80171a0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 801716c:	697b      	ldr	r3, [r7, #20]
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8017172:	697b      	ldr	r3, [r7, #20]
 8017174:	2200      	movs	r2, #0
 8017176:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8017178:	697b      	ldr	r3, [r7, #20]
 801717a:	2200      	movs	r2, #0
 801717c:	631a      	str	r2, [r3, #48]	@ 0x30
 801717e:	e004      	b.n	801718a <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8017180:	f240 113b 	movw	r1, #315	@ 0x13b
 8017184:	4807      	ldr	r0, [pc, #28]	@ (80171a4 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8017186:	f7ea fbd7 	bl	8001938 <vAssertCalled>
        }
    }

    return pxReturn;
 801718a:	697b      	ldr	r3, [r7, #20]
}
 801718c:	4618      	mov	r0, r3
 801718e:	3718      	adds	r7, #24
 8017190:	46bd      	mov	sp, r7
 8017192:	bd80      	pop	{r7, pc}
 8017194:	200023e0 	.word	0x200023e0
 8017198:	200015c8 	.word	0x200015c8
 801719c:	080270d4 	.word	0x080270d4
 80171a0:	200015dc 	.word	0x200015dc
 80171a4:	08027088 	.word	0x08027088

080171a8 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80171a8:	b580      	push	{r7, lr}
 80171aa:	b084      	sub	sp, #16
 80171ac:	af00      	add	r7, sp, #0
 80171ae:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f7ff ff15 	bl	8016fe0 <bIsValidNetworkDescriptor>
 80171b6:	4603      	mov	r3, r0
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d104      	bne.n	80171c6 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 80171bc:	6879      	ldr	r1, [r7, #4]
 80171be:	4819      	ldr	r0, [pc, #100]	@ (8017224 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 80171c0:	f00a fe9a 	bl	8021ef8 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 80171c4:	e029      	b.n	801721a <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 80171c6:	f7ee ffb3 	bl	8006130 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	691b      	ldr	r3, [r3, #16]
 80171ce:	4a16      	ldr	r2, [pc, #88]	@ (8017228 <vReleaseNetworkBufferAndDescriptor+0x80>)
 80171d0:	4293      	cmp	r3, r2
 80171d2:	d101      	bne.n	80171d8 <vReleaseNetworkBufferAndDescriptor+0x30>
 80171d4:	2301      	movs	r3, #1
 80171d6:	e000      	b.n	80171da <vReleaseNetworkBufferAndDescriptor+0x32>
 80171d8:	2300      	movs	r3, #0
 80171da:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d104      	bne.n	80171ec <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	4619      	mov	r1, r3
 80171e6:	4810      	ldr	r0, [pc, #64]	@ (8017228 <vReleaseNetworkBufferAndDescriptor+0x80>)
 80171e8:	f7ec f87f 	bl	80032ea <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 80171ec:	f7ee ffcc 	bl	8006188 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d008      	beq.n	8017208 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 80171f6:	f000 f829 	bl	801724c <uxGetNumberOfFreeNetworkBuffers>
 80171fa:	4603      	mov	r3, r0
 80171fc:	461a      	mov	r2, r3
 80171fe:	6879      	ldr	r1, [r7, #4]
 8017200:	480a      	ldr	r0, [pc, #40]	@ (801722c <vReleaseNetworkBufferAndDescriptor+0x84>)
 8017202:	f00a fe79 	bl	8021ef8 <lUDPLoggingPrintf>
}
 8017206:	e008      	b.n	801721a <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8017208:	4b09      	ldr	r3, [pc, #36]	@ (8017230 <vReleaseNetworkBufferAndDescriptor+0x88>)
 801720a:	6818      	ldr	r0, [r3, #0]
 801720c:	2300      	movs	r3, #0
 801720e:	2200      	movs	r2, #0
 8017210:	2100      	movs	r1, #0
 8017212:	f7ec fa41 	bl	8003698 <xQueueGenericSend>
            prvShowWarnings();
 8017216:	f7ff feee 	bl	8016ff6 <prvShowWarnings>
}
 801721a:	bf00      	nop
 801721c:	3710      	adds	r7, #16
 801721e:	46bd      	mov	sp, r7
 8017220:	bd80      	pop	{r7, pc}
 8017222:	bf00      	nop
 8017224:	08027118 	.word	0x08027118
 8017228:	200015c8 	.word	0x200015c8
 801722c:	08027150 	.word	0x08027150
 8017230:	200023e0 	.word	0x200023e0

08017234 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8017234:	b480      	push	{r7}
 8017236:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8017238:	4b03      	ldr	r3, [pc, #12]	@ (8017248 <uxGetMinimumFreeNetworkBuffers+0x14>)
 801723a:	681b      	ldr	r3, [r3, #0]
}
 801723c:	4618      	mov	r0, r3
 801723e:	46bd      	mov	sp, r7
 8017240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017244:	4770      	bx	lr
 8017246:	bf00      	nop
 8017248:	200015dc 	.word	0x200015dc

0801724c <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 801724c:	b480      	push	{r7}
 801724e:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8017250:	4b03      	ldr	r3, [pc, #12]	@ (8017260 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8017252:	681b      	ldr	r3, [r3, #0]
}
 8017254:	4618      	mov	r0, r3
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	200015c8 	.word	0x200015c8

08017264 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8017264:	b480      	push	{r7}
 8017266:	b085      	sub	sp, #20
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 801726c:	2300      	movs	r3, #0
 801726e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	4a11      	ldr	r2, [pc, #68]	@ (80172b8 <xHas_1F_PHYSPCS+0x54>)
 8017274:	4293      	cmp	r3, r2
 8017276:	d016      	beq.n	80172a6 <xHas_1F_PHYSPCS+0x42>
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	4a0f      	ldr	r2, [pc, #60]	@ (80172b8 <xHas_1F_PHYSPCS+0x54>)
 801727c:	4293      	cmp	r3, r2
 801727e:	d80f      	bhi.n	80172a0 <xHas_1F_PHYSPCS+0x3c>
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	4a0e      	ldr	r2, [pc, #56]	@ (80172bc <xHas_1F_PHYSPCS+0x58>)
 8017284:	4293      	cmp	r3, r2
 8017286:	d00e      	beq.n	80172a6 <xHas_1F_PHYSPCS+0x42>
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	4a0c      	ldr	r2, [pc, #48]	@ (80172bc <xHas_1F_PHYSPCS+0x58>)
 801728c:	4293      	cmp	r3, r2
 801728e:	d807      	bhi.n	80172a0 <xHas_1F_PHYSPCS+0x3c>
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	4a0b      	ldr	r2, [pc, #44]	@ (80172c0 <xHas_1F_PHYSPCS+0x5c>)
 8017294:	4293      	cmp	r3, r2
 8017296:	d006      	beq.n	80172a6 <xHas_1F_PHYSPCS+0x42>
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	4a0a      	ldr	r2, [pc, #40]	@ (80172c4 <xHas_1F_PHYSPCS+0x60>)
 801729c:	4293      	cmp	r3, r2
 801729e:	d002      	beq.n	80172a6 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 80172a0:	2301      	movs	r3, #1
 80172a2:	60fb      	str	r3, [r7, #12]
            break;
 80172a4:	e000      	b.n	80172a8 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 80172a6:	bf00      	nop
    }

    return xResult;
 80172a8:	68fb      	ldr	r3, [r7, #12]
}
 80172aa:	4618      	mov	r0, r3
 80172ac:	3714      	adds	r7, #20
 80172ae:	46bd      	mov	sp, r7
 80172b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172b4:	4770      	bx	lr
 80172b6:	bf00      	nop
 80172b8:	ff000710 	.word	0xff000710
 80172bc:	2000a250 	.word	0x2000a250
 80172c0:	20005c90 	.word	0x20005c90
 80172c4:	2000a221 	.word	0x2000a221

080172c8 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 80172c8:	b480      	push	{r7}
 80172ca:	b085      	sub	sp, #20
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80172d0:	2300      	movs	r3, #0
 80172d2:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	4a0d      	ldr	r2, [pc, #52]	@ (801730c <xHas_19_PHYCR+0x44>)
 80172d8:	4293      	cmp	r3, r2
 80172da:	d00b      	beq.n	80172f4 <xHas_19_PHYCR+0x2c>
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	4a0b      	ldr	r2, [pc, #44]	@ (801730c <xHas_19_PHYCR+0x44>)
 80172e0:	4293      	cmp	r3, r2
 80172e2:	d80a      	bhi.n	80172fa <xHas_19_PHYCR+0x32>
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	4a0a      	ldr	r2, [pc, #40]	@ (8017310 <xHas_19_PHYCR+0x48>)
 80172e8:	4293      	cmp	r3, r2
 80172ea:	d003      	beq.n	80172f4 <xHas_19_PHYCR+0x2c>
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	4a09      	ldr	r2, [pc, #36]	@ (8017314 <xHas_19_PHYCR+0x4c>)
 80172f0:	4293      	cmp	r3, r2
 80172f2:	d102      	bne.n	80172fa <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 80172f4:	2301      	movs	r3, #1
 80172f6:	60fb      	str	r3, [r7, #12]
            break;
 80172f8:	e000      	b.n	80172fc <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 80172fa:	bf00      	nop
    }

    return xResult;
 80172fc:	68fb      	ldr	r3, [r7, #12]
}
 80172fe:	4618      	mov	r0, r3
 8017300:	3714      	adds	r7, #20
 8017302:	46bd      	mov	sp, r7
 8017304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017308:	4770      	bx	lr
 801730a:	bf00      	nop
 801730c:	2000a221 	.word	0x2000a221
 8017310:	0007c130 	.word	0x0007c130
 8017314:	20005c90 	.word	0x20005c90

08017318 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b084      	sub	sp, #16
 801731c:	af00      	add	r7, sp, #0
 801731e:	60f8      	str	r0, [r7, #12]
 8017320:	60b9      	str	r1, [r7, #8]
 8017322:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8017324:	2240      	movs	r2, #64	@ 0x40
 8017326:	2100      	movs	r1, #0
 8017328:	68f8      	ldr	r0, [r7, #12]
 801732a:	f00b f90e 	bl	802254a <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 801732e:	68fb      	ldr	r3, [r7, #12]
 8017330:	68ba      	ldr	r2, [r7, #8]
 8017332:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	687a      	ldr	r2, [r7, #4]
 8017338:	605a      	str	r2, [r3, #4]
}
 801733a:	bf00      	nop
 801733c:	3710      	adds	r7, #16
 801733e:	46bd      	mov	sp, r7
 8017340:	bd80      	pop	{r7, pc}
	...

08017344 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b086      	sub	sp, #24
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	2200      	movs	r2, #0
 8017350:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8017352:	2300      	movs	r3, #0
 8017354:	617b      	str	r3, [r7, #20]
 8017356:	e03a      	b.n	80173ce <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8017358:	2300      	movs	r3, #0
 801735a:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	681b      	ldr	r3, [r3, #0]
 8017360:	f107 020c 	add.w	r2, r7, #12
 8017364:	2103      	movs	r1, #3
 8017366:	6978      	ldr	r0, [r7, #20]
 8017368:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 801736a:	68fb      	ldr	r3, [r7, #12]
 801736c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017370:	4293      	cmp	r3, r2
 8017372:	d029      	beq.n	80173c8 <xPhyDiscover+0x84>
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d026      	beq.n	80173c8 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	f107 0208 	add.w	r2, r7, #8
 8017382:	2102      	movs	r1, #2
 8017384:	6978      	ldr	r0, [r7, #20]
 8017386:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8017388:	68bb      	ldr	r3, [r7, #8]
 801738a:	041a      	lsls	r2, r3, #16
 801738c:	68f9      	ldr	r1, [r7, #12]
 801738e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8017392:	400b      	ands	r3, r1
 8017394:	4313      	orrs	r3, r2
 8017396:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 8017398:	687b      	ldr	r3, [r7, #4]
 801739a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801739c:	697a      	ldr	r2, [r7, #20]
 801739e:	b2d1      	uxtb	r1, r2
 80173a0:	687a      	ldr	r2, [r7, #4]
 80173a2:	4413      	add	r3, r2
 80173a4:	460a      	mov	r2, r1
 80173a6:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	3202      	adds	r2, #2
 80173b0:	6939      	ldr	r1, [r7, #16]
 80173b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173ba:	1c5a      	adds	r2, r3, #1
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173c4:	2b04      	cmp	r3, #4
 80173c6:	d005      	beq.n	80173d4 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80173c8:	697b      	ldr	r3, [r7, #20]
 80173ca:	3301      	adds	r3, #1
 80173cc:	617b      	str	r3, [r7, #20]
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	2b1f      	cmp	r3, #31
 80173d2:	ddc1      	ble.n	8017358 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173d8:	2b00      	cmp	r3, #0
 80173da:	dd05      	ble.n	80173e8 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	689b      	ldr	r3, [r3, #8]
 80173e0:	4619      	mov	r1, r3
 80173e2:	4804      	ldr	r0, [pc, #16]	@ (80173f4 <xPhyDiscover+0xb0>)
 80173e4:	f00a fd88 	bl	8021ef8 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3718      	adds	r7, #24
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	08027194 	.word	0x08027194

080173f8 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b08c      	sub	sp, #48	@ 0x30
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	6078      	str	r0, [r7, #4]
 8017400:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8017402:	2300      	movs	r3, #0
 8017404:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017406:	2300      	movs	r3, #0
 8017408:	62bb      	str	r3, [r7, #40]	@ 0x28
 801740a:	e017      	b.n	801743c <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801740c:	687a      	ldr	r2, [r7, #4]
 801740e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017410:	4413      	add	r3, r2
 8017412:	3318      	adds	r3, #24
 8017414:	781b      	ldrb	r3, [r3, #0]
 8017416:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	f107 0218 	add.w	r2, r7, #24
 8017420:	2100      	movs	r1, #0
 8017422:	69f8      	ldr	r0, [r7, #28]
 8017424:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	685b      	ldr	r3, [r3, #4]
 801742a:	69ba      	ldr	r2, [r7, #24]
 801742c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017430:	2100      	movs	r1, #0
 8017432:	69f8      	ldr	r0, [r7, #28]
 8017434:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017438:	3301      	adds	r3, #1
 801743a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017442:	429a      	cmp	r2, r3
 8017444:	dbe2      	blt.n	801740c <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8017446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801744a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 801744c:	f107 030c 	add.w	r3, r7, #12
 8017450:	4618      	mov	r0, r3
 8017452:	f7ed fcad 	bl	8004db0 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017456:	2300      	movs	r3, #0
 8017458:	62bb      	str	r3, [r7, #40]	@ 0x28
 801745a:	e01f      	b.n	801749c <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801745c:	687a      	ldr	r2, [r7, #4]
 801745e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017460:	4413      	add	r3, r2
 8017462:	3318      	adds	r3, #24
 8017464:	781b      	ldrb	r3, [r3, #0]
 8017466:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	f107 0218 	add.w	r2, r7, #24
 8017470:	2100      	movs	r1, #0
 8017472:	6a38      	ldr	r0, [r7, #32]
 8017474:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8017476:	69bb      	ldr	r3, [r7, #24]
 8017478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801747c:	2b00      	cmp	r3, #0
 801747e:	d10a      	bne.n	8017496 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8017480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017482:	482d      	ldr	r0, [pc, #180]	@ (8017538 <xPhyReset+0x140>)
 8017484:	f00a fd38 	bl	8021ef8 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8017488:	2201      	movs	r2, #1
 801748a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801748c:	fa02 f303 	lsl.w	r3, r2, r3
 8017490:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017492:	4313      	orrs	r3, r2
 8017494:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017498:	3301      	adds	r3, #1
 801749a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80174a2:	429a      	cmp	r2, r3
 80174a4:	dbda      	blt.n	801745c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 80174a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	429a      	cmp	r2, r3
 80174ac:	d013      	beq.n	80174d6 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80174ae:	f107 0214 	add.w	r2, r7, #20
 80174b2:	f107 030c 	add.w	r3, r7, #12
 80174b6:	4611      	mov	r1, r2
 80174b8:	4618      	mov	r0, r3
 80174ba:	f7ed fcb1 	bl	8004e20 <xTaskCheckForTimeOut>
 80174be:	4603      	mov	r3, r0
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d004      	beq.n	80174ce <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80174c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80174c6:	481d      	ldr	r0, [pc, #116]	@ (801753c <xPhyReset+0x144>)
 80174c8:	f00a fd16 	bl	8021ef8 <lUDPLoggingPrintf>
            break;
 80174cc:	e004      	b.n	80174d8 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80174ce:	2032      	movs	r0, #50	@ 0x32
 80174d0:	f7ec fefa 	bl	80042c8 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80174d4:	e7bf      	b.n	8017456 <xPhyReset+0x5e>
            break;
 80174d6:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80174d8:	2300      	movs	r3, #0
 80174da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80174dc:	e01e      	b.n	801751c <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 80174de:	2201      	movs	r2, #1
 80174e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e2:	409a      	lsls	r2, r3
 80174e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80174e6:	4013      	ands	r3, r2
 80174e8:	2b00      	cmp	r3, #0
 80174ea:	d114      	bne.n	8017516 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80174ec:	687a      	ldr	r2, [r7, #4]
 80174ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174f0:	4413      	add	r3, r2
 80174f2:	3318      	adds	r3, #24
 80174f4:	781b      	ldrb	r3, [r3, #0]
 80174f6:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	f107 0218 	add.w	r2, r7, #24
 8017500:	2100      	movs	r1, #0
 8017502:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017504:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	685b      	ldr	r3, [r3, #4]
 801750a:	69ba      	ldr	r2, [r7, #24]
 801750c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017510:	2100      	movs	r1, #0
 8017512:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017514:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017518:	3301      	adds	r3, #1
 801751a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8017522:	429a      	cmp	r2, r3
 8017524:	dbdb      	blt.n	80174de <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017526:	2032      	movs	r0, #50	@ 0x32
 8017528:	f7ec fece 	bl	80042c8 <vTaskDelay>

    return ulDoneMask;
 801752c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801752e:	4618      	mov	r0, r3
 8017530:	3730      	adds	r7, #48	@ 0x30
 8017532:	46bd      	mov	sp, r7
 8017534:	bd80      	pop	{r7, pc}
 8017536:	bf00      	nop
 8017538:	080271a0 	.word	0x080271a0
 801753c:	080271c4 	.word	0x080271c4

08017540 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8017540:	b580      	push	{r7, lr}
 8017542:	b088      	sub	sp, #32
 8017544:	af00      	add	r7, sp, #0
 8017546:	6078      	str	r0, [r7, #4]
 8017548:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801754e:	2b00      	cmp	r3, #0
 8017550:	dc05      	bgt.n	801755e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8017552:	487c      	ldr	r0, [pc, #496]	@ (8017744 <xPhyConfigure+0x204>)
 8017554:	f00a fcd0 	bl	8021ef8 <lUDPLoggingPrintf>
        return -1;
 8017558:	f04f 33ff 	mov.w	r3, #4294967295
 801755c:	e0ed      	b.n	801773a <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	781b      	ldrb	r3, [r3, #0]
 8017562:	2b03      	cmp	r3, #3
 8017564:	d107      	bne.n	8017576 <xPhyConfigure+0x36>
 8017566:	683b      	ldr	r3, [r7, #0]
 8017568:	789b      	ldrb	r3, [r3, #2]
 801756a:	2b03      	cmp	r3, #3
 801756c:	d103      	bne.n	8017576 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 801756e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8017572:	61fb      	str	r3, [r7, #28]
 8017574:	e044      	b.n	8017600 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8017576:	2301      	movs	r3, #1
 8017578:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 801757a:	683b      	ldr	r3, [r7, #0]
 801757c:	781b      	ldrb	r3, [r3, #0]
 801757e:	2b03      	cmp	r3, #3
 8017580:	d10d      	bne.n	801759e <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8017582:	683b      	ldr	r3, [r7, #0]
 8017584:	789b      	ldrb	r3, [r3, #2]
 8017586:	2b02      	cmp	r3, #2
 8017588:	d104      	bne.n	8017594 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 801758a:	69fb      	ldr	r3, [r7, #28]
 801758c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8017590:	61fb      	str	r3, [r7, #28]
 8017592:	e035      	b.n	8017600 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8017594:	69fb      	ldr	r3, [r7, #28]
 8017596:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 801759a:	61fb      	str	r3, [r7, #28]
 801759c:	e030      	b.n	8017600 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 801759e:	683b      	ldr	r3, [r7, #0]
 80175a0:	789b      	ldrb	r3, [r3, #2]
 80175a2:	2b03      	cmp	r3, #3
 80175a4:	d10d      	bne.n	80175c2 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 80175a6:	683b      	ldr	r3, [r7, #0]
 80175a8:	781b      	ldrb	r3, [r3, #0]
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	d104      	bne.n	80175b8 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 80175ae:	69fb      	ldr	r3, [r7, #28]
 80175b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80175b4:	61fb      	str	r3, [r7, #28]
 80175b6:	e023      	b.n	8017600 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 80175b8:	69fb      	ldr	r3, [r7, #28]
 80175ba:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80175be:	61fb      	str	r3, [r7, #28]
 80175c0:	e01e      	b.n	8017600 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 80175c2:	683b      	ldr	r3, [r7, #0]
 80175c4:	781b      	ldrb	r3, [r3, #0]
 80175c6:	2b02      	cmp	r3, #2
 80175c8:	d10d      	bne.n	80175e6 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	789b      	ldrb	r3, [r3, #2]
 80175ce:	2b02      	cmp	r3, #2
 80175d0:	d104      	bne.n	80175dc <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 80175d2:	69fb      	ldr	r3, [r7, #28]
 80175d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80175d8:	61fb      	str	r3, [r7, #28]
 80175da:	e011      	b.n	8017600 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 80175dc:	69fb      	ldr	r3, [r7, #28]
 80175de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175e2:	61fb      	str	r3, [r7, #28]
 80175e4:	e00c      	b.n	8017600 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80175e6:	683b      	ldr	r3, [r7, #0]
 80175e8:	789b      	ldrb	r3, [r3, #2]
 80175ea:	2b02      	cmp	r3, #2
 80175ec:	d104      	bne.n	80175f8 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 80175ee:	69fb      	ldr	r3, [r7, #28]
 80175f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80175f4:	61fb      	str	r3, [r7, #28]
 80175f6:	e003      	b.n	8017600 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	f043 0320 	orr.w	r3, r3, #32
 80175fe:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8017600:	687b      	ldr	r3, [r7, #4]
 8017602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017604:	2201      	movs	r2, #1
 8017606:	fa02 f303 	lsl.w	r3, r2, r3
 801760a:	3b01      	subs	r3, #1
 801760c:	4619      	mov	r1, r3
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f7ff fef2 	bl	80173f8 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017614:	2300      	movs	r3, #0
 8017616:	61bb      	str	r3, [r7, #24]
 8017618:	e080      	b.n	801771c <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801761a:	687a      	ldr	r2, [r7, #4]
 801761c:	69bb      	ldr	r3, [r7, #24]
 801761e:	4413      	add	r3, r2
 8017620:	3318      	adds	r3, #24
 8017622:	781b      	ldrb	r3, [r3, #0]
 8017624:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	69ba      	ldr	r2, [r7, #24]
 801762a:	3202      	adds	r2, #2
 801762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017630:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	685b      	ldr	r3, [r3, #4]
 8017636:	69fa      	ldr	r2, [r7, #28]
 8017638:	2104      	movs	r1, #4
 801763a:	6978      	ldr	r0, [r7, #20]
 801763c:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	681b      	ldr	r3, [r3, #0]
 8017642:	f107 020c 	add.w	r2, r7, #12
 8017646:	2100      	movs	r1, #0
 8017648:	6978      	ldr	r0, [r7, #20]
 801764a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8017652:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801765a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 801765c:	683b      	ldr	r3, [r7, #0]
 801765e:	781b      	ldrb	r3, [r3, #0]
 8017660:	2b02      	cmp	r3, #2
 8017662:	d003      	beq.n	801766c <xPhyConfigure+0x12c>
 8017664:	683b      	ldr	r3, [r7, #0]
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	2b03      	cmp	r3, #3
 801766a:	d104      	bne.n	8017676 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801766c:	68fb      	ldr	r3, [r7, #12]
 801766e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8017672:	60fb      	str	r3, [r7, #12]
 8017674:	e007      	b.n	8017686 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	781b      	ldrb	r3, [r3, #0]
 801767a:	2b01      	cmp	r3, #1
 801767c:	d103      	bne.n	8017686 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8017684:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8017686:	683b      	ldr	r3, [r7, #0]
 8017688:	789b      	ldrb	r3, [r3, #2]
 801768a:	2b02      	cmp	r3, #2
 801768c:	d003      	beq.n	8017696 <xPhyConfigure+0x156>
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	789b      	ldrb	r3, [r3, #2]
 8017692:	2b03      	cmp	r3, #3
 8017694:	d104      	bne.n	80176a0 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801769c:	60fb      	str	r3, [r7, #12]
 801769e:	e007      	b.n	80176b0 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 80176a0:	683b      	ldr	r3, [r7, #0]
 80176a2:	789b      	ldrb	r3, [r3, #2]
 80176a4:	2b01      	cmp	r3, #1
 80176a6:	d103      	bne.n	80176b0 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80176ae:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 80176b0:	6938      	ldr	r0, [r7, #16]
 80176b2:	f7ff fe09 	bl	80172c8 <xHas_19_PHYCR>
 80176b6:	4603      	mov	r3, r0
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d026      	beq.n	801770a <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	681b      	ldr	r3, [r3, #0]
 80176c0:	f107 0208 	add.w	r2, r7, #8
 80176c4:	2119      	movs	r1, #25
 80176c6:	6978      	ldr	r0, [r7, #20]
 80176c8:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 80176ca:	68bb      	ldr	r3, [r7, #8]
 80176cc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80176d0:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 80176d2:	683b      	ldr	r3, [r7, #0]
 80176d4:	785b      	ldrb	r3, [r3, #1]
 80176d6:	2b03      	cmp	r3, #3
 80176d8:	d104      	bne.n	80176e4 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 80176da:	68bb      	ldr	r3, [r7, #8]
 80176dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80176e0:	60bb      	str	r3, [r7, #8]
 80176e2:	e00c      	b.n	80176fe <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 80176e4:	683b      	ldr	r3, [r7, #0]
 80176e6:	785b      	ldrb	r3, [r3, #1]
 80176e8:	2b02      	cmp	r3, #2
 80176ea:	d104      	bne.n	80176f6 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 80176ec:	68bb      	ldr	r3, [r7, #8]
 80176ee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80176f2:	60bb      	str	r3, [r7, #8]
 80176f4:	e003      	b.n	80176fe <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 80176f6:	68bb      	ldr	r3, [r7, #8]
 80176f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80176fc:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	685b      	ldr	r3, [r3, #4]
 8017702:	68ba      	ldr	r2, [r7, #8]
 8017704:	2119      	movs	r1, #25
 8017706:	6978      	ldr	r0, [r7, #20]
 8017708:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	461a      	mov	r2, r3
 801770e:	69f9      	ldr	r1, [r7, #28]
 8017710:	480d      	ldr	r0, [pc, #52]	@ (8017748 <xPhyConfigure+0x208>)
 8017712:	f00a fbf1 	bl	8021ef8 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8017716:	69bb      	ldr	r3, [r7, #24]
 8017718:	3301      	adds	r3, #1
 801771a:	61bb      	str	r3, [r7, #24]
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017720:	69ba      	ldr	r2, [r7, #24]
 8017722:	429a      	cmp	r2, r3
 8017724:	f6ff af79 	blt.w	801761a <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801772e:	687b      	ldr	r3, [r7, #4]
 8017730:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	69fa      	ldr	r2, [r7, #28]
 8017736:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8017738:	2300      	movs	r3, #0
}
 801773a:	4618      	mov	r0, r3
 801773c:	3720      	adds	r7, #32
 801773e:	46bd      	mov	sp, r7
 8017740:	bd80      	pop	{r7, pc}
 8017742:	bf00      	nop
 8017744:	080271f8 	.word	0x080271f8
 8017748:	0802721c 	.word	0x0802721c

0801774c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 801774c:	b590      	push	{r4, r7, lr}
 801774e:	b095      	sub	sp, #84	@ 0x54
 8017750:	af02      	add	r7, sp, #8
 8017752:	6078      	str	r0, [r7, #4]
 8017754:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8017756:	683b      	ldr	r3, [r7, #0]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d101      	bne.n	8017760 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 801775c:	2300      	movs	r3, #0
 801775e:	e18d      	b.n	8017a7c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8017760:	2300      	movs	r3, #0
 8017762:	647b      	str	r3, [r7, #68]	@ 0x44
 8017764:	e020      	b.n	80177a8 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8017766:	683a      	ldr	r2, [r7, #0]
 8017768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801776a:	fa22 f303 	lsr.w	r3, r2, r3
 801776e:	f003 0301 	and.w	r3, r3, #1
 8017772:	2b00      	cmp	r3, #0
 8017774:	d015      	beq.n	80177a2 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017776:	687a      	ldr	r2, [r7, #4]
 8017778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801777a:	4413      	add	r3, r2
 801777c:	3318      	adds	r3, #24
 801777e:	781b      	ldrb	r3, [r3, #0]
 8017780:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	685b      	ldr	r3, [r3, #4]
 8017786:	687a      	ldr	r2, [r7, #4]
 8017788:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801778a:	2104      	movs	r1, #4
 801778c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801778e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	685b      	ldr	r3, [r3, #4]
 8017794:	687a      	ldr	r2, [r7, #4]
 8017796:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8017798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801779c:	2100      	movs	r1, #0
 801779e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80177a0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80177a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177a4:	3301      	adds	r3, #1
 80177a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80177ac:	461a      	mov	r2, r3
 80177ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177b0:	4293      	cmp	r3, r2
 80177b2:	d3d8      	bcc.n	8017766 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 80177b4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80177b8:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 80177ba:	f107 0318 	add.w	r3, r7, #24
 80177be:	4618      	mov	r0, r3
 80177c0:	f7ed faf6 	bl	8004db0 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 80177c4:	2300      	movs	r3, #0
 80177c6:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 80177c8:	2301      	movs	r3, #1
 80177ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80177cc:	2300      	movs	r3, #0
 80177ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80177d0:	e025      	b.n	801781e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 80177d2:	683a      	ldr	r2, [r7, #0]
 80177d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80177d6:	4013      	ands	r3, r2
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d01a      	beq.n	8017812 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 80177dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80177de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80177e0:	4013      	ands	r3, r2
 80177e2:	2b00      	cmp	r3, #0
 80177e4:	d115      	bne.n	8017812 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80177ea:	4413      	add	r3, r2
 80177ec:	3318      	adds	r3, #24
 80177ee:	781b      	ldrb	r3, [r3, #0]
 80177f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80177f2:	687b      	ldr	r3, [r7, #4]
 80177f4:	681b      	ldr	r3, [r3, #0]
 80177f6:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80177fa:	2101      	movs	r1, #1
 80177fc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80177fe:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8017800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017802:	f003 0320 	and.w	r3, r3, #32
 8017806:	2b00      	cmp	r3, #0
 8017808:	d003      	beq.n	8017812 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 801780a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801780c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801780e:	4313      	orrs	r3, r2
 8017810:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017812:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017814:	3301      	adds	r3, #1
 8017816:	647b      	str	r3, [r7, #68]	@ 0x44
 8017818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801781a:	005b      	lsls	r3, r3, #1
 801781c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017822:	461a      	mov	r2, r3
 8017824:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017826:	4293      	cmp	r3, r2
 8017828:	d3d3      	bcc.n	80177d2 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 801782a:	683a      	ldr	r2, [r7, #0]
 801782c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801782e:	429a      	cmp	r2, r3
 8017830:	d013      	beq.n	801785a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8017832:	f107 0220 	add.w	r2, r7, #32
 8017836:	f107 0318 	add.w	r3, r7, #24
 801783a:	4611      	mov	r1, r2
 801783c:	4618      	mov	r0, r3
 801783e:	f7ed faef 	bl	8004e20 <xTaskCheckForTimeOut>
 8017842:	4603      	mov	r3, r0
 8017844:	2b00      	cmp	r3, #0
 8017846:	d004      	beq.n	8017852 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8017848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801784a:	488e      	ldr	r0, [pc, #568]	@ (8017a84 <xPhyStartAutoNegotiation+0x338>)
 801784c:	f00a fb54 	bl	8021ef8 <lUDPLoggingPrintf>
            break;
 8017850:	e004      	b.n	801785c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8017852:	2032      	movs	r0, #50	@ 0x32
 8017854:	f7ec fd38 	bl	80042c8 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8017858:	e7b6      	b.n	80177c8 <xPhyStartAutoNegotiation+0x7c>
            break;
 801785a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 801785c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801785e:	2b00      	cmp	r3, #0
 8017860:	f000 810b 	beq.w	8017a7a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8017864:	2301      	movs	r3, #1
 8017866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801786c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801786e:	43db      	mvns	r3, r3
 8017870:	401a      	ands	r2, r3
 8017872:	687b      	ldr	r3, [r7, #4]
 8017874:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017876:	2300      	movs	r3, #0
 8017878:	647b      	str	r3, [r7, #68]	@ 0x44
 801787a:	e0f7      	b.n	8017a6c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801787c:	687a      	ldr	r2, [r7, #4]
 801787e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017880:	4413      	add	r3, r2
 8017882:	3318      	adds	r3, #24
 8017884:	781b      	ldrb	r3, [r3, #0]
 8017886:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801788c:	3202      	adds	r2, #2
 801788e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017892:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8017894:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017898:	4013      	ands	r3, r2
 801789a:	2b00      	cmp	r3, #0
 801789c:	f000 80df 	beq.w	8017a5e <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	685b      	ldr	r3, [r3, #4]
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80178a8:	2100      	movs	r1, #0
 80178aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80178ac:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	681b      	ldr	r3, [r3, #0]
 80178b2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80178b6:	2101      	movs	r1, #1
 80178b8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80178ba:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 80178bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80178be:	f003 0304 	and.w	r3, r3, #4
 80178c2:	2b00      	cmp	r3, #0
 80178c4:	d005      	beq.n	80178d2 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80178ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80178cc:	431a      	orrs	r2, r3
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 80178d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80178d4:	4a6c      	ldr	r2, [pc, #432]	@ (8017a88 <xPhyStartAutoNegotiation+0x33c>)
 80178d6:	4293      	cmp	r3, r2
 80178d8:	d130      	bne.n	801793c <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	f107 0214 	add.w	r2, r7, #20
 80178e2:	211e      	movs	r1, #30
 80178e4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80178e6:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 80178e8:	697b      	ldr	r3, [r7, #20]
 80178ea:	f003 0307 	and.w	r3, r3, #7
 80178ee:	3b01      	subs	r3, #1
 80178f0:	2b05      	cmp	r3, #5
 80178f2:	d814      	bhi.n	801791e <xPhyStartAutoNegotiation+0x1d2>
 80178f4:	a201      	add	r2, pc, #4	@ (adr r2, 80178fc <xPhyStartAutoNegotiation+0x1b0>)
 80178f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80178fa:	bf00      	nop
 80178fc:	08017915 	.word	0x08017915
 8017900:	0801791f 	.word	0x0801791f
 8017904:	0801791f 	.word	0x0801791f
 8017908:	0801791f 	.word	0x0801791f
 801790c:	08017915 	.word	0x08017915
 8017910:	0801791f 	.word	0x0801791f
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017916:	f043 0302 	orr.w	r3, r3, #2
 801791a:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 801791c:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 801791e:	697b      	ldr	r3, [r7, #20]
 8017920:	f003 0307 	and.w	r3, r3, #7
 8017924:	2b02      	cmp	r3, #2
 8017926:	d801      	bhi.n	801792c <xPhyStartAutoNegotiation+0x1e0>
 8017928:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 801792a:	e05b      	b.n	80179e4 <xPhyStartAutoNegotiation+0x298>
 801792c:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 801792e:	2b01      	cmp	r3, #1
 8017930:	d858      	bhi.n	80179e4 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017934:	f043 0304 	orr.w	r3, r3, #4
 8017938:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 801793a:	e053      	b.n	80179e4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 801793c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801793e:	4a53      	ldr	r2, [pc, #332]	@ (8017a8c <xPhyStartAutoNegotiation+0x340>)
 8017940:	4293      	cmp	r3, r2
 8017942:	d126      	bne.n	8017992 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8017944:	2300      	movs	r3, #0
 8017946:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8017948:	2300      	movs	r3, #0
 801794a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	f107 0210 	add.w	r2, r7, #16
 8017954:	211f      	movs	r1, #31
 8017956:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017958:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 801795a:	693b      	ldr	r3, [r7, #16]
 801795c:	0a1b      	lsrs	r3, r3, #8
 801795e:	f003 0307 	and.w	r3, r3, #7
 8017962:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8017964:	2300      	movs	r3, #0
 8017966:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8017968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801796a:	2b02      	cmp	r3, #2
 801796c:	d002      	beq.n	8017974 <xPhyStartAutoNegotiation+0x228>
 801796e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017970:	2b05      	cmp	r3, #5
 8017972:	d103      	bne.n	801797c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8017974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017976:	f043 0302 	orr.w	r3, r3, #2
 801797a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 801797c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801797e:	2b05      	cmp	r3, #5
 8017980:	d002      	beq.n	8017988 <xPhyStartAutoNegotiation+0x23c>
 8017982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017984:	2b06      	cmp	r3, #6
 8017986:	d12d      	bne.n	80179e4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8017988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801798a:	f043 0304 	orr.w	r3, r3, #4
 801798e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017990:	e028      	b.n	80179e4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8017992:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8017994:	f7ff fc66 	bl	8017264 <xHas_1F_PHYSPCS>
 8017998:	4603      	mov	r3, r0
 801799a:	2b00      	cmp	r3, #0
 801799c:	d01b      	beq.n	80179d6 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	681b      	ldr	r3, [r3, #0]
 80179a2:	f107 020c 	add.w	r2, r7, #12
 80179a6:	211f      	movs	r1, #31
 80179a8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80179aa:	4798      	blx	r3
                ulRegValue = 0;
 80179ac:	2300      	movs	r3, #0
 80179ae:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	f003 0310 	and.w	r3, r3, #16
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d003      	beq.n	80179c2 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 80179ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179bc:	f043 0304 	orr.w	r3, r3, #4
 80179c0:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	f003 030c 	and.w	r3, r3, #12
 80179c8:	2b04      	cmp	r3, #4
 80179ca:	d10b      	bne.n	80179e4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 80179cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179ce:	f043 0302 	orr.w	r3, r3, #2
 80179d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80179d4:	e006      	b.n	80179e4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80179de:	2110      	movs	r1, #16
 80179e0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80179e2:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 80179e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80179e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179e8:	f003 0304 	and.w	r3, r3, #4
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d001      	beq.n	80179f4 <xPhyStartAutoNegotiation+0x2a8>
 80179f0:	4827      	ldr	r0, [pc, #156]	@ (8017a90 <xPhyStartAutoNegotiation+0x344>)
 80179f2:	e000      	b.n	80179f6 <xPhyStartAutoNegotiation+0x2aa>
 80179f4:	4827      	ldr	r0, [pc, #156]	@ (8017a94 <xPhyStartAutoNegotiation+0x348>)
 80179f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80179f8:	f003 0302 	and.w	r3, r3, #2
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d001      	beq.n	8017a04 <xPhyStartAutoNegotiation+0x2b8>
 8017a00:	240a      	movs	r4, #10
 8017a02:	e000      	b.n	8017a06 <xPhyStartAutoNegotiation+0x2ba>
 8017a04:	2464      	movs	r4, #100	@ 0x64
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a0c:	4013      	ands	r3, r2
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d001      	beq.n	8017a16 <xPhyStartAutoNegotiation+0x2ca>
 8017a12:	4b21      	ldr	r3, [pc, #132]	@ (8017a98 <xPhyStartAutoNegotiation+0x34c>)
 8017a14:	e000      	b.n	8017a18 <xPhyStartAutoNegotiation+0x2cc>
 8017a16:	4b21      	ldr	r3, [pc, #132]	@ (8017a9c <xPhyStartAutoNegotiation+0x350>)
 8017a18:	9300      	str	r3, [sp, #0]
 8017a1a:	4623      	mov	r3, r4
 8017a1c:	4602      	mov	r2, r0
 8017a1e:	4820      	ldr	r0, [pc, #128]	@ (8017aa0 <xPhyStartAutoNegotiation+0x354>)
 8017a20:	f00a fa6a 	bl	8021ef8 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8017a24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a26:	f003 0304 	and.w	r3, r3, #4
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d004      	beq.n	8017a38 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	2202      	movs	r2, #2
 8017a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017a36:	e003      	b.n	8017a40 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	2201      	movs	r2, #1
 8017a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8017a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017a42:	f003 0302 	and.w	r3, r3, #2
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d004      	beq.n	8017a54 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	2201      	movs	r2, #1
 8017a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017a52:	e005      	b.n	8017a60 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8017a54:	687b      	ldr	r3, [r7, #4]
 8017a56:	2202      	movs	r2, #2
 8017a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017a5c:	e000      	b.n	8017a60 <xPhyStartAutoNegotiation+0x314>
                continue;
 8017a5e:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017a60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a62:	3301      	adds	r3, #1
 8017a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8017a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017a68:	005b      	lsls	r3, r3, #1
 8017a6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a70:	461a      	mov	r2, r3
 8017a72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a74:	4293      	cmp	r3, r2
 8017a76:	f4ff af01 	bcc.w	801787c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8017a7a:	2300      	movs	r3, #0
}
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	374c      	adds	r7, #76	@ 0x4c
 8017a80:	46bd      	mov	sp, r7
 8017a82:	bd90      	pop	{r4, r7, pc}
 8017a84:	08027240 	.word	0x08027240
 8017a88:	00221560 	.word	0x00221560
 8017a8c:	00221550 	.word	0x00221550
 8017a90:	0802728c 	.word	0x0802728c
 8017a94:	08027294 	.word	0x08027294
 8017a98:	0802729c 	.word	0x0802729c
 8017a9c:	080272a4 	.word	0x080272a4
 8017aa0:	080272a8 	.word	0x080272a8

08017aa4 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b088      	sub	sp, #32
 8017aa8:	af00      	add	r7, sp, #0
 8017aaa:	6078      	str	r0, [r7, #4]
 8017aac:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8017aae:	2301      	movs	r3, #1
 8017ab0:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8017ab6:	683b      	ldr	r3, [r7, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	dd2b      	ble.n	8017b14 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	331c      	adds	r3, #28
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7ed f975 	bl	8004db0 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8017acc:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017ace:	2300      	movs	r3, #0
 8017ad0:	61bb      	str	r3, [r7, #24]
 8017ad2:	e019      	b.n	8017b08 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017ad8:	69fb      	ldr	r3, [r7, #28]
 8017ada:	4013      	ands	r3, r2
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d10d      	bne.n	8017afc <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017ae4:	69fb      	ldr	r3, [r7, #28]
 8017ae6:	431a      	orrs	r2, r3
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017af0:	4619      	mov	r1, r3
 8017af2:	4842      	ldr	r0, [pc, #264]	@ (8017bfc <xPhyCheckLinkStatus+0x158>)
 8017af4:	f00a fa00 	bl	8021ef8 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8017af8:	2301      	movs	r3, #1
 8017afa:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017afc:	69bb      	ldr	r3, [r7, #24]
 8017afe:	3301      	adds	r3, #1
 8017b00:	61bb      	str	r3, [r7, #24]
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	005b      	lsls	r3, r3, #1
 8017b06:	61fb      	str	r3, [r7, #28]
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b0c:	69ba      	ldr	r2, [r7, #24]
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	dbe0      	blt.n	8017ad4 <xPhyCheckLinkStatus+0x30>
 8017b12:	e06e      	b.n	8017bf2 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8017b14:	687b      	ldr	r3, [r7, #4]
 8017b16:	f103 021c 	add.w	r2, r3, #28
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	3324      	adds	r3, #36	@ 0x24
 8017b1e:	4619      	mov	r1, r3
 8017b20:	4610      	mov	r0, r2
 8017b22:	f7ed f97d 	bl	8004e20 <xTaskCheckForTimeOut>
 8017b26:	4603      	mov	r3, r0
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d062      	beq.n	8017bf2 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	61bb      	str	r3, [r7, #24]
 8017b30:	e045      	b.n	8017bbe <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017b32:	687a      	ldr	r2, [r7, #4]
 8017b34:	69bb      	ldr	r3, [r7, #24]
 8017b36:	4413      	add	r3, r2
 8017b38:	3318      	adds	r3, #24
 8017b3a:	781b      	ldrb	r3, [r3, #0]
 8017b3c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	f107 020c 	add.w	r2, r7, #12
 8017b46:	2101      	movs	r1, #1
 8017b48:	6938      	ldr	r0, [r7, #16]
 8017b4a:	4798      	blx	r3
 8017b4c:	4603      	mov	r3, r0
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d12f      	bne.n	8017bb2 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017b56:	69fb      	ldr	r3, [r7, #28]
 8017b58:	4013      	ands	r3, r2
 8017b5a:	2b00      	cmp	r3, #0
 8017b5c:	bf14      	ite	ne
 8017b5e:	2301      	movne	r3, #1
 8017b60:	2300      	moveq	r3, #0
 8017b62:	b2da      	uxtb	r2, r3
 8017b64:	68fb      	ldr	r3, [r7, #12]
 8017b66:	f003 0304 	and.w	r3, r3, #4
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	bf14      	ite	ne
 8017b6e:	2301      	movne	r3, #1
 8017b70:	2300      	moveq	r3, #0
 8017b72:	b2db      	uxtb	r3, r3
 8017b74:	4053      	eors	r3, r2
 8017b76:	b2db      	uxtb	r3, r3
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d01a      	beq.n	8017bb2 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8017b7c:	68fb      	ldr	r3, [r7, #12]
 8017b7e:	f003 0304 	and.w	r3, r3, #4
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d006      	beq.n	8017b94 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017b8a:	69fb      	ldr	r3, [r7, #28]
 8017b8c:	431a      	orrs	r2, r3
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	635a      	str	r2, [r3, #52]	@ 0x34
 8017b92:	e006      	b.n	8017ba2 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017b98:	69fb      	ldr	r3, [r7, #28]
 8017b9a:	43db      	mvns	r3, r3
 8017b9c:	401a      	ands	r2, r3
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ba6:	4619      	mov	r1, r3
 8017ba8:	4814      	ldr	r0, [pc, #80]	@ (8017bfc <xPhyCheckLinkStatus+0x158>)
 8017baa:	f00a f9a5 	bl	8021ef8 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 8017bae:	2301      	movs	r3, #1
 8017bb0:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017bb2:	69bb      	ldr	r3, [r7, #24]
 8017bb4:	3301      	adds	r3, #1
 8017bb6:	61bb      	str	r3, [r7, #24]
 8017bb8:	69fb      	ldr	r3, [r7, #28]
 8017bba:	005b      	lsls	r3, r3, #1
 8017bbc:	61fb      	str	r3, [r7, #28]
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017bc2:	69ba      	ldr	r2, [r7, #24]
 8017bc4:	429a      	cmp	r2, r3
 8017bc6:	dbb4      	blt.n	8017b32 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	331c      	adds	r3, #28
 8017bcc:	4618      	mov	r0, r3
 8017bce:	f7ed f8ef 	bl	8004db0 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8017bd2:	687b      	ldr	r3, [r7, #4]
 8017bd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017bd6:	69fb      	ldr	r3, [r7, #28]
 8017bd8:	085b      	lsrs	r3, r3, #1
 8017bda:	4013      	ands	r3, r2
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d004      	beq.n	8017bea <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017be0:	687b      	ldr	r3, [r7, #4]
 8017be2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8017be6:	625a      	str	r2, [r3, #36]	@ 0x24
 8017be8:	e003      	b.n	8017bf2 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8017bea:	687b      	ldr	r3, [r7, #4]
 8017bec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017bf0:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8017bf2:	697b      	ldr	r3, [r7, #20]
}
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	3720      	adds	r7, #32
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	080272dc 	.word	0x080272dc

08017c00 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 8017c00:	b480      	push	{r7}
 8017c02:	b085      	sub	sp, #20
 8017c04:	af00      	add	r7, sp, #0
 8017c06:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8017c08:	2300      	movs	r3, #0
 8017c0a:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 8017c0c:	2300      	movs	r3, #0
 8017c0e:	60bb      	str	r3, [r7, #8]
 8017c10:	e013      	b.n	8017c3a <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 8017c12:	2201      	movs	r2, #1
 8017c14:	68bb      	ldr	r3, [r7, #8]
 8017c16:	fa02 f303 	lsl.w	r3, r2, r3
 8017c1a:	461a      	mov	r2, r3
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	4013      	ands	r3, r2
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d007      	beq.n	8017c34 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8017c24:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017c28:	68bb      	ldr	r3, [r7, #8]
 8017c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8017c2e:	68fa      	ldr	r2, [r7, #12]
 8017c30:	4313      	orrs	r3, r2
 8017c32:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8017c34:	68bb      	ldr	r3, [r7, #8]
 8017c36:	3301      	adds	r3, #1
 8017c38:	60bb      	str	r3, [r7, #8]
 8017c3a:	68bb      	ldr	r3, [r7, #8]
 8017c3c:	2b1f      	cmp	r3, #31
 8017c3e:	dde8      	ble.n	8017c12 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 8017c40:	68fb      	ldr	r3, [r7, #12]
}
 8017c42:	4618      	mov	r0, r3
 8017c44:	3714      	adds	r7, #20
 8017c46:	46bd      	mov	sp, r7
 8017c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c4c:	4770      	bx	lr
	...

08017c50 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 8017c50:	b590      	push	{r4, r7, lr}
 8017c52:	b087      	sub	sp, #28
 8017c54:	af00      	add	r7, sp, #0
 8017c56:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8017c58:	f04f 33ff 	mov.w	r3, #4294967295
 8017c5c:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017c5e:	2300      	movs	r3, #0
 8017c60:	613b      	str	r3, [r7, #16]
 8017c62:	e024      	b.n	8017cae <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8017c64:	693b      	ldr	r3, [r7, #16]
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	4413      	add	r3, r2
 8017c6a:	781b      	ldrb	r3, [r3, #0]
 8017c6c:	461a      	mov	r2, r3
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	4053      	eors	r3, r2
 8017c72:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017c74:	2300      	movs	r3, #0
 8017c76:	617b      	str	r3, [r7, #20]
 8017c78:	e013      	b.n	8017ca2 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 8017c7a:	68fb      	ldr	r3, [r7, #12]
 8017c7c:	f003 0301 	and.w	r3, r3, #1
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d008      	beq.n	8017c96 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	085c      	lsrs	r4, r3, #1
 8017c88:	480e      	ldr	r0, [pc, #56]	@ (8017cc4 <prvComputeCRC32_MAC+0x74>)
 8017c8a:	f7ff ffb9 	bl	8017c00 <prvRevBits32>
 8017c8e:	4603      	mov	r3, r0
 8017c90:	4063      	eors	r3, r4
 8017c92:	60fb      	str	r3, [r7, #12]
 8017c94:	e002      	b.n	8017c9c <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	085b      	lsrs	r3, r3, #1
 8017c9a:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017c9c:	697b      	ldr	r3, [r7, #20]
 8017c9e:	3301      	adds	r3, #1
 8017ca0:	617b      	str	r3, [r7, #20]
 8017ca2:	697b      	ldr	r3, [r7, #20]
 8017ca4:	2b07      	cmp	r3, #7
 8017ca6:	dde8      	ble.n	8017c7a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8017ca8:	693b      	ldr	r3, [r7, #16]
 8017caa:	3301      	adds	r3, #1
 8017cac:	613b      	str	r3, [r7, #16]
 8017cae:	693b      	ldr	r3, [r7, #16]
 8017cb0:	2b05      	cmp	r3, #5
 8017cb2:	ddd7      	ble.n	8017c64 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	43db      	mvns	r3, r3
 8017cb8:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8017cba:	68fb      	ldr	r3, [r7, #12]
}
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	371c      	adds	r7, #28
 8017cc0:	46bd      	mov	sp, r7
 8017cc2:	bd90      	pop	{r4, r7, pc}
 8017cc4:	04c11db7 	.word	0x04c11db7

08017cc8 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8017cc8:	b580      	push	{r7, lr}
 8017cca:	b084      	sub	sp, #16
 8017ccc:	af00      	add	r7, sp, #0
 8017cce:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 8017cd0:	6878      	ldr	r0, [r7, #4]
 8017cd2:	f7ff ffbd 	bl	8017c50 <prvComputeCRC32_MAC>
 8017cd6:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8017cd8:	68f8      	ldr	r0, [r7, #12]
 8017cda:	f7ff ff91 	bl	8017c00 <prvRevBits32>
 8017cde:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	0e9b      	lsrs	r3, r3, #26
}
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	3710      	adds	r7, #16
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	bd80      	pop	{r7, pc}

08017cec <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8017cec:	b580      	push	{r7, lr}
 8017cee:	b084      	sub	sp, #16
 8017cf0:	af00      	add	r7, sp, #0
 8017cf2:	6078      	str	r0, [r7, #4]
 8017cf4:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8017cf6:	6838      	ldr	r0, [r7, #0]
 8017cf8:	f7ff ffe6 	bl	8017cc8 <prvComputeEthernet_MACHash>
 8017cfc:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2b1f      	cmp	r3, #31
 8017d02:	d80c      	bhi.n	8017d1e <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	691a      	ldr	r2, [r3, #16]
 8017d0a:	2101      	movs	r1, #1
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8017d12:	4619      	mov	r1, r3
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	430a      	orrs	r2, r1
 8017d1a:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8017d1c:	e00d      	b.n	8017d3a <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	695a      	ldr	r2, [r3, #20]
 8017d24:	68fb      	ldr	r3, [r7, #12]
 8017d26:	f003 031f 	and.w	r3, r3, #31
 8017d2a:	2101      	movs	r1, #1
 8017d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8017d30:	4619      	mov	r1, r3
 8017d32:	687b      	ldr	r3, [r7, #4]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	430a      	orrs	r2, r1
 8017d38:	615a      	str	r2, [r3, #20]
}
 8017d3a:	bf00      	nop
 8017d3c:	3710      	adds	r7, #16
 8017d3e:	46bd      	mov	sp, r7
 8017d40:	bd80      	pop	{r7, pc}

08017d42 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 8017d42:	b580      	push	{r7, lr}
 8017d44:	b086      	sub	sp, #24
 8017d46:	af00      	add	r7, sp, #0
 8017d48:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 8017d4a:	230a      	movs	r3, #10
 8017d4c:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8017d52:	6939      	ldr	r1, [r7, #16]
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f7ff f9bf 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 8017d5a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d002      	beq.n	8017d68 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8017d62:	68fb      	ldr	r3, [r7, #12]
 8017d64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d66:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8017d68:	697b      	ldr	r3, [r7, #20]
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	3718      	adds	r7, #24
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}
	...

08017d74 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b08e      	sub	sp, #56	@ 0x38
 8017d78:	af02      	add	r7, sp, #8
 8017d7a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8017d80:	2300      	movs	r3, #0
 8017d82:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8017d84:	4b8d      	ldr	r3, [pc, #564]	@ (8017fbc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017d86:	781b      	ldrb	r3, [r3, #0]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	f040 8104 	bne.w	8017f96 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 8017d8e:	4a8c      	ldr	r2, [pc, #560]	@ (8017fc0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8017d94:	6878      	ldr	r0, [r7, #4]
 8017d96:	f7f5 fb8f 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 8017d9a:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 8017d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017d9e:	2b00      	cmp	r3, #0
 8017da0:	d104      	bne.n	8017dac <xSTM32H_NetworkInterfaceInitialise+0x38>
 8017da2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8017da6:	4887      	ldr	r0, [pc, #540]	@ (8017fc4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017da8:	f7e9 fdc6 	bl	8001938 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8017dac:	4b86      	ldr	r3, [pc, #536]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017dae:	4a87      	ldr	r2, [pc, #540]	@ (8017fcc <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8017db0:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8017db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017db4:	33e8      	adds	r3, #232	@ 0xe8
 8017db6:	4a84      	ldr	r2, [pc, #528]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017db8:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8017dba:	4b83      	ldr	r3, [pc, #524]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017dbc:	2201      	movs	r2, #1
 8017dbe:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8017dc0:	4b81      	ldr	r3, [pc, #516]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017dc2:	4a83      	ldr	r2, [pc, #524]	@ (8017fd0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8017dc4:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8017dc6:	4b80      	ldr	r3, [pc, #512]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017dc8:	4a82      	ldr	r2, [pc, #520]	@ (8017fd4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8017dca:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8017dcc:	4b7e      	ldr	r3, [pc, #504]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017dce:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8017dd2:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017dd4:	2260      	movs	r2, #96	@ 0x60
 8017dd6:	2100      	movs	r1, #0
 8017dd8:	487d      	ldr	r0, [pc, #500]	@ (8017fd0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8017dda:	f00a fbb6 	bl	802254a <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 8017dde:	2260      	movs	r2, #96	@ 0x60
 8017de0:	2100      	movs	r1, #0
 8017de2:	487c      	ldr	r0, [pc, #496]	@ (8017fd4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8017de4:	f00a fbb1 	bl	802254a <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8017de8:	4877      	ldr	r0, [pc, #476]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017dea:	f000 fc71 	bl	80186d0 <HAL_ETH_Init>
 8017dee:	4603      	mov	r3, r0
 8017df0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8017df4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	f040 80c9 	bne.w	8017f90 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 8017dfe:	4b72      	ldr	r3, [pc, #456]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	6899      	ldr	r1, [r3, #8]
 8017e04:	4b70      	ldr	r3, [pc, #448]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017e06:	681a      	ldr	r2, [r3, #0]
 8017e08:	f240 4316 	movw	r3, #1046	@ 0x416
 8017e0c:	430b      	orrs	r3, r1
 8017e0e:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 8017e10:	2234      	movs	r2, #52	@ 0x34
 8017e12:	2100      	movs	r1, #0
 8017e14:	4870      	ldr	r0, [pc, #448]	@ (8017fd8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017e16:	f00a fb98 	bl	802254a <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 8017e1a:	4b6f      	ldr	r3, [pc, #444]	@ (8017fd8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017e1c:	2220      	movs	r2, #32
 8017e1e:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 8017e20:	4b6d      	ldr	r3, [pc, #436]	@ (8017fd8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017e22:	681b      	ldr	r3, [r3, #0]
 8017e24:	f043 0301 	orr.w	r3, r3, #1
 8017e28:	4a6b      	ldr	r2, [pc, #428]	@ (8017fd8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017e2a:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8017e2c:	4b6a      	ldr	r3, [pc, #424]	@ (8017fd8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017e2e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8017e32:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8017e34:	4b68      	ldr	r3, [pc, #416]	@ (8017fd8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017e36:	2200      	movs	r2, #0
 8017e38:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 8017e3a:	2104      	movs	r1, #4
 8017e3c:	2004      	movs	r0, #4
 8017e3e:	f7eb fc01 	bl	8003644 <xQueueCreateCountingSemaphore>
 8017e42:	4603      	mov	r3, r0
 8017e44:	4a65      	ldr	r2, [pc, #404]	@ (8017fdc <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8017e46:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8017e48:	4b64      	ldr	r3, [pc, #400]	@ (8017fdc <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d104      	bne.n	8017e5a <xSTM32H_NetworkInterfaceInitialise+0xe6>
 8017e50:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8017e54:	485b      	ldr	r0, [pc, #364]	@ (8017fc4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017e56:	f7e9 fd6f 	bl	8001938 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 8017e5a:	2001      	movs	r0, #1
 8017e5c:	f7eb fbd9 	bl	8003612 <xQueueCreateMutex>
 8017e60:	4603      	mov	r3, r0
 8017e62:	4a5f      	ldr	r2, [pc, #380]	@ (8017fe0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017e64:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017e66:	4b5e      	ldr	r3, [pc, #376]	@ (8017fe0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d104      	bne.n	8017e78 <xSTM32H_NetworkInterfaceInitialise+0x104>
 8017e6e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017e72:	4854      	ldr	r0, [pc, #336]	@ (8017fc4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017e74:	f7e9 fd60 	bl	8001938 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017e78:	2300      	movs	r3, #0
 8017e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e7c:	e015      	b.n	8017eaa <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 8017e7e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8017e82:	f7ff ff5e 	bl	8017d42 <pucGetRXBuffer>
 8017e86:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8017e88:	69fb      	ldr	r3, [r7, #28]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d104      	bne.n	8017e98 <xSTM32H_NetworkInterfaceInitialise+0x124>
 8017e8e:	f240 1189 	movw	r1, #393	@ 0x189
 8017e92:	484c      	ldr	r0, [pc, #304]	@ (8017fc4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017e94:	f7e9 fd50 	bl	8001938 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 8017e98:	2300      	movs	r3, #0
 8017e9a:	69fa      	ldr	r2, [r7, #28]
 8017e9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017e9e:	484a      	ldr	r0, [pc, #296]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017ea0:	f000 fd02 	bl	80188a8 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ea6:	3301      	adds	r3, #1
 8017ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017eac:	2b03      	cmp	r3, #3
 8017eae:	d9e6      	bls.n	8017e7e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 8017eb0:	494c      	ldr	r1, [pc, #304]	@ (8017fe4 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 8017eb2:	4845      	ldr	r0, [pc, #276]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017eb4:	f7ff ff1a 	bl	8017cec <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 8017eb8:	494b      	ldr	r1, [pc, #300]	@ (8017fe8 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 8017eba:	4843      	ldr	r0, [pc, #268]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017ebc:	f7ff ff16 	bl	8017cec <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 8017ec0:	e03a      	b.n	8017f38 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 8017ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ec4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8017ec8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017ecc:	b2db      	uxtb	r3, r3
 8017ece:	2b00      	cmp	r3, #0
 8017ed0:	d002      	beq.n	8017ed8 <xSTM32H_NetworkInterfaceInitialise+0x164>
 8017ed2:	2b01      	cmp	r3, #1
 8017ed4:	d00d      	beq.n	8017ef2 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 8017ed6:	e028      	b.n	8017f2a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 8017ed8:	4b3b      	ldr	r3, [pc, #236]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017eda:	685a      	ldr	r2, [r3, #4]
 8017edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ede:	33e8      	adds	r3, #232	@ 0xe8
 8017ee0:	429a      	cmp	r2, r3
 8017ee2:	d021      	beq.n	8017f28 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8017ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017ee6:	33e8      	adds	r3, #232	@ 0xe8
 8017ee8:	4619      	mov	r1, r3
 8017eea:	4837      	ldr	r0, [pc, #220]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017eec:	f7ff fefe 	bl	8017cec <prvSetMAC_HashFilter>
                                break;
 8017ef0:	e01a      	b.n	8017f28 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 8017ef2:	4a3e      	ldr	r2, [pc, #248]	@ (8017fec <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8017ef4:	f107 0314 	add.w	r3, r7, #20
 8017ef8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017efc:	6018      	str	r0, [r3, #0]
 8017efe:	3304      	adds	r3, #4
 8017f00:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 8017f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017f08:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 8017f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f0c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017f10:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 8017f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f14:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8017f18:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 8017f1a:	f107 0314 	add.w	r3, r7, #20
 8017f1e:	4619      	mov	r1, r3
 8017f20:	4829      	ldr	r0, [pc, #164]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017f22:	f7ff fee3 	bl	8017cec <prvSetMAC_HashFilter>
                               break;
 8017f26:	e000      	b.n	8017f2a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8017f28:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 8017f2a:	4b25      	ldr	r3, [pc, #148]	@ (8017fc0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017f30:	4618      	mov	r0, r3
 8017f32:	f7f5 fae3 	bl	800d4fc <FreeRTOS_NextEndPoint>
 8017f36:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8017f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d1c1      	bne.n	8017ec2 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 8017f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8017ff0 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 8017f40:	f107 030c 	add.w	r3, r7, #12
 8017f44:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017f48:	6018      	str	r0, [r3, #0]
 8017f4a:	3304      	adds	r3, #4
 8017f4c:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 8017f4e:	f107 030c 	add.w	r3, r7, #12
 8017f52:	4619      	mov	r1, r3
 8017f54:	481c      	ldr	r0, [pc, #112]	@ (8017fc8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017f56:	f7ff fec9 	bl	8017cec <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 8017f5a:	f000 f911 	bl	8018180 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 8017f5e:	2001      	movs	r0, #1
 8017f60:	f000 f926 	bl	80181b0 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017f64:	4b23      	ldr	r3, [pc, #140]	@ (8017ff4 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017f66:	9301      	str	r3, [sp, #4]
 8017f68:	2305      	movs	r3, #5
 8017f6a:	9300      	str	r3, [sp, #0]
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017f72:	4921      	ldr	r1, [pc, #132]	@ (8017ff8 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017f74:	4821      	ldr	r0, [pc, #132]	@ (8017ffc <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017f76:	f7ec f867 	bl	8004048 <xTaskCreate>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	2b01      	cmp	r3, #1
 8017f7e:	d103      	bne.n	8017f88 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 8017f80:	4b0e      	ldr	r3, [pc, #56]	@ (8017fbc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017f82:	2201      	movs	r2, #1
 8017f84:	701a      	strb	r2, [r3, #0]
 8017f86:	e006      	b.n	8017f96 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8017f88:	4b0c      	ldr	r3, [pc, #48]	@ (8017fbc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017f8a:	2202      	movs	r2, #2
 8017f8c:	701a      	strb	r2, [r3, #0]
 8017f8e:	e002      	b.n	8017f96 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 8017f90:	4b0a      	ldr	r3, [pc, #40]	@ (8017fbc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017f92:	2202      	movs	r2, #2
 8017f94:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 8017f96:	4b09      	ldr	r3, [pc, #36]	@ (8017fbc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017f98:	781b      	ldrb	r3, [r3, #0]
 8017f9a:	2b01      	cmp	r3, #1
 8017f9c:	d108      	bne.n	8017fb0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 8017f9e:	4b18      	ldr	r3, [pc, #96]	@ (8018000 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 8017fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d004      	beq.n	8017fb0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 8017faa:	4816      	ldr	r0, [pc, #88]	@ (8018004 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 8017fac:	f009 ffa4 	bl	8021ef8 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 8017fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	3730      	adds	r7, #48	@ 0x30
 8017fb6:	46bd      	mov	sp, r7
 8017fb8:	bd80      	pop	{r7, pc}
 8017fba:	bf00      	nop
 8017fbc:	200023e8 	.word	0x200023e8
 8017fc0:	2000249c 	.word	0x2000249c
 8017fc4:	08027304 	.word	0x08027304
 8017fc8:	200023f4 	.word	0x200023f4
 8017fcc:	40028000 	.word	0x40028000
 8017fd0:	24040060 	.word	0x24040060
 8017fd4:	24040000 	.word	0x24040000
 8017fd8:	20002468 	.word	0x20002468
 8017fdc:	200023ec 	.word	0x200023ec
 8017fe0:	200023f0 	.word	0x200023f0
 8017fe4:	08027594 	.word	0x08027594
 8017fe8:	0802759c 	.word	0x0802759c
 8017fec:	0802737c 	.word	0x0802737c
 8017ff0:	08027384 	.word	0x08027384
 8017ff4:	200024a0 	.word	0x200024a0
 8017ff8:	08027358 	.word	0x08027358
 8017ffc:	08018565 	.word	0x08018565
 8018000:	200024a4 	.word	0x200024a4
 8018004:	08027364 	.word	0x08027364

08018008 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8018008:	b480      	push	{r7}
 801800a:	b085      	sub	sp, #20
 801800c:	af00      	add	r7, sp, #0
 801800e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 8018010:	4b07      	ldr	r3, [pc, #28]	@ (8018030 <xSTM32H_GetPhyLinkStatus+0x28>)
 8018012:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018014:	2b00      	cmp	r3, #0
 8018016:	d002      	beq.n	801801e <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8018018:	2301      	movs	r3, #1
 801801a:	60fb      	str	r3, [r7, #12]
 801801c:	e001      	b.n	8018022 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 801801e:	2300      	movs	r3, #0
 8018020:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8018022:	68fb      	ldr	r3, [r7, #12]
}
 8018024:	4618      	mov	r0, r3
 8018026:	3714      	adds	r7, #20
 8018028:	46bd      	mov	sp, r7
 801802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801802e:	4770      	bx	lr
 8018030:	200024a4 	.word	0x200024a4

08018034 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8018034:	b580      	push	{r7, lr}
 8018036:	b082      	sub	sp, #8
 8018038:	af00      	add	r7, sp, #0
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	4a10      	ldr	r2, [pc, #64]	@ (8018084 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8018042:	2111      	movs	r1, #17
 8018044:	4810      	ldr	r0, [pc, #64]	@ (8018088 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018046:	f00a ff83 	bl	8022f50 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 801804a:	2228      	movs	r2, #40	@ 0x28
 801804c:	2100      	movs	r1, #0
 801804e:	6838      	ldr	r0, [r7, #0]
 8018050:	f00a fa7b 	bl	802254a <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8018054:	683b      	ldr	r3, [r7, #0]
 8018056:	4a0c      	ldr	r2, [pc, #48]	@ (8018088 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8018058:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 801805a:	687a      	ldr	r2, [r7, #4]
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8018060:	683b      	ldr	r3, [r7, #0]
 8018062:	4a0a      	ldr	r2, [pc, #40]	@ (801808c <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8018064:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8018066:	683b      	ldr	r3, [r7, #0]
 8018068:	4a09      	ldr	r2, [pc, #36]	@ (8018090 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 801806a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	4a09      	ldr	r2, [pc, #36]	@ (8018094 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8018070:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8018072:	6838      	ldr	r0, [r7, #0]
 8018074:	f7f5 f94c 	bl	800d310 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8018078:	683b      	ldr	r3, [r7, #0]
}
 801807a:	4618      	mov	r0, r3
 801807c:	3708      	adds	r7, #8
 801807e:	46bd      	mov	sp, r7
 8018080:	bd80      	pop	{r7, pc}
 8018082:	bf00      	nop
 8018084:	0802738c 	.word	0x0802738c
 8018088:	200024e4 	.word	0x200024e4
 801808c:	08017d75 	.word	0x08017d75
 8018090:	08018099 	.word	0x08018099
 8018094:	08018009 	.word	0x08018009

08018098 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 8018098:	b580      	push	{r7, lr}
 801809a:	b08a      	sub	sp, #40	@ 0x28
 801809c:	af00      	add	r7, sp, #0
 801809e:	60f8      	str	r0, [r7, #12]
 80180a0:	60b9      	str	r1, [r7, #8]
 80180a2:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80180a4:	2300      	movs	r3, #0
 80180a6:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 80180a8:	2364      	movs	r3, #100	@ 0x64
 80180aa:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 80180ac:	68f8      	ldr	r0, [r7, #12]
 80180ae:	f7ff ffab 	bl	8018008 <xSTM32H_GetPhyLinkStatus>
 80180b2:	4603      	mov	r3, r0
 80180b4:	2b01      	cmp	r3, #1
 80180b6:	d14c      	bne.n	8018152 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 80180b8:	68bb      	ldr	r3, [r7, #8]
 80180ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80180bc:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 80180be:	687b      	ldr	r3, [r7, #4]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d104      	bne.n	80180ce <xSTM32H_NetworkInterfaceOutput+0x36>
 80180c4:	f44f 7114 	mov.w	r1, #592	@ 0x250
 80180c8:	4827      	ldr	r0, [pc, #156]	@ (8018168 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 80180ca:	f7e9 fc35 	bl	8001938 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 80180ce:	69fb      	ldr	r3, [r7, #28]
 80180d0:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 80180d2:	68bb      	ldr	r3, [r7, #8]
 80180d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 80180d6:	617b      	str	r3, [r7, #20]
 80180d8:	2300      	movs	r3, #0
 80180da:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 80180dc:	68bb      	ldr	r3, [r7, #8]
 80180de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180e0:	4a22      	ldr	r2, [pc, #136]	@ (801816c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80180e2:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 80180e4:	4a21      	ldr	r2, [pc, #132]	@ (801816c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80180e6:	f107 0310 	add.w	r3, r7, #16
 80180ea:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 80180ec:	4b20      	ldr	r3, [pc, #128]	@ (8018170 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 80180ee:	681b      	ldr	r3, [r3, #0]
 80180f0:	6a39      	ldr	r1, [r7, #32]
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7eb fc88 	bl	8003a08 <xQueueSemaphoreTake>
 80180f8:	4603      	mov	r3, r0
 80180fa:	2b01      	cmp	r3, #1
 80180fc:	d003      	beq.n	8018106 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 80180fe:	481d      	ldr	r0, [pc, #116]	@ (8018174 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8018100:	f009 fefa 	bl	8021ef8 <lUDPLoggingPrintf>
 8018104:	e025      	b.n	8018152 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8018106:	f3bf 8f4f 	dsb	sy
}
 801810a:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 801810c:	4b1a      	ldr	r3, [pc, #104]	@ (8018178 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	6a39      	ldr	r1, [r7, #32]
 8018112:	4618      	mov	r0, r3
 8018114:	f7eb fc78 	bl	8003a08 <xQueueSemaphoreTake>
 8018118:	4603      	mov	r3, r0
 801811a:	2b00      	cmp	r3, #0
 801811c:	d019      	beq.n	8018152 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 801811e:	2300      	movs	r3, #0
 8018120:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8018122:	4912      	ldr	r1, [pc, #72]	@ (801816c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8018124:	4815      	ldr	r0, [pc, #84]	@ (801817c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8018126:	f000 fcef 	bl	8018b08 <HAL_ETH_Transmit_IT>
 801812a:	4603      	mov	r3, r0
 801812c:	2b00      	cmp	r3, #0
 801812e:	d102      	bne.n	8018136 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8018130:	2301      	movs	r3, #1
 8018132:	627b      	str	r3, [r7, #36]	@ 0x24
 8018134:	e006      	b.n	8018144 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8018136:	4b0e      	ldr	r3, [pc, #56]	@ (8018170 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8018138:	6818      	ldr	r0, [r3, #0]
 801813a:	2300      	movs	r3, #0
 801813c:	2200      	movs	r2, #0
 801813e:	2100      	movs	r1, #0
 8018140:	f7eb faaa 	bl	8003698 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8018144:	4b0c      	ldr	r3, [pc, #48]	@ (8018178 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8018146:	6818      	ldr	r0, [r3, #0]
 8018148:	2300      	movs	r3, #0
 801814a:	2200      	movs	r2, #0
 801814c:	2100      	movs	r1, #0
 801814e:	f7eb faa3 	bl	8003698 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d002      	beq.n	801815e <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8018158:	68b8      	ldr	r0, [r7, #8]
 801815a:	f7ff f825 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 801815e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8018160:	4618      	mov	r0, r3
 8018162:	3728      	adds	r7, #40	@ 0x28
 8018164:	46bd      	mov	sp, r7
 8018166:	bd80      	pop	{r7, pc}
 8018168:	08027304 	.word	0x08027304
 801816c:	20002468 	.word	0x20002468
 8018170:	200023ec 	.word	0x200023ec
 8018174:	08027394 	.word	0x08027394
 8018178:	200023f0 	.word	0x200023f0
 801817c:	200023f4 	.word	0x200023f4

08018180 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8018180:	b580      	push	{r7, lr}
 8018182:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8018184:	4a06      	ldr	r2, [pc, #24]	@ (80181a0 <prvMACBProbePhy+0x20>)
 8018186:	4907      	ldr	r1, [pc, #28]	@ (80181a4 <prvMACBProbePhy+0x24>)
 8018188:	4807      	ldr	r0, [pc, #28]	@ (80181a8 <prvMACBProbePhy+0x28>)
 801818a:	f7ff f8c5 	bl	8017318 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 801818e:	4806      	ldr	r0, [pc, #24]	@ (80181a8 <prvMACBProbePhy+0x28>)
 8018190:	f7ff f8d8 	bl	8017344 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 8018194:	4905      	ldr	r1, [pc, #20]	@ (80181ac <prvMACBProbePhy+0x2c>)
 8018196:	4804      	ldr	r0, [pc, #16]	@ (80181a8 <prvMACBProbePhy+0x28>)
 8018198:	f7ff f9d2 	bl	8017540 <xPhyConfigure>
}
 801819c:	bf00      	nop
 801819e:	bd80      	pop	{r7, pc}
 80181a0:	080183a1 	.word	0x080183a1
 80181a4:	08018369 	.word	0x08018369
 80181a8:	200024a4 	.word	0x200024a4
 80181ac:	08027694 	.word	0x08027694

080181b0 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 80181b0:	b580      	push	{r7, lr}
 80181b2:	b09e      	sub	sp, #120	@ 0x78
 80181b4:	af00      	add	r7, sp, #0
 80181b6:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 80181b8:	2300      	movs	r3, #0
 80181ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80181bc:	2300      	movs	r3, #0
 80181be:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 80181c0:	4b25      	ldr	r3, [pc, #148]	@ (8018258 <prvEthernetUpdateConfig+0xa8>)
 80181c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80181c4:	687a      	ldr	r2, [r7, #4]
 80181c6:	4619      	mov	r1, r3
 80181c8:	4824      	ldr	r0, [pc, #144]	@ (801825c <prvEthernetUpdateConfig+0xac>)
 80181ca:	f009 fe95 	bl	8021ef8 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	2b00      	cmp	r3, #0
 80181d2:	d103      	bne.n	80181dc <prvEthernetUpdateConfig+0x2c>
 80181d4:	4b20      	ldr	r3, [pc, #128]	@ (8018258 <prvEthernetUpdateConfig+0xa8>)
 80181d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80181d8:	2b00      	cmp	r3, #0
 80181da:	d035      	beq.n	8018248 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 80181dc:	4b1e      	ldr	r3, [pc, #120]	@ (8018258 <prvEthernetUpdateConfig+0xa8>)
 80181de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181e0:	2201      	movs	r2, #1
 80181e2:	fa02 f303 	lsl.w	r3, r2, r3
 80181e6:	3b01      	subs	r3, #1
 80181e8:	4619      	mov	r1, r3
 80181ea:	481b      	ldr	r0, [pc, #108]	@ (8018258 <prvEthernetUpdateConfig+0xa8>)
 80181ec:	f7ff faae 	bl	801774c <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 80181f0:	4b19      	ldr	r3, [pc, #100]	@ (8018258 <prvEthernetUpdateConfig+0xa8>)
 80181f2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80181f6:	2b02      	cmp	r3, #2
 80181f8:	d103      	bne.n	8018202 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 80181fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80181fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8018200:	e001      	b.n	8018206 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8018202:	2300      	movs	r3, #0
 8018204:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8018206:	4b14      	ldr	r3, [pc, #80]	@ (8018258 <prvEthernetUpdateConfig+0xa8>)
 8018208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801820c:	2b01      	cmp	r3, #1
 801820e:	d102      	bne.n	8018216 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8018210:	2300      	movs	r3, #0
 8018212:	677b      	str	r3, [r7, #116]	@ 0x74
 8018214:	e002      	b.n	801821c <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8018216:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801821a:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 801821c:	f107 030c 	add.w	r3, r7, #12
 8018220:	4619      	mov	r1, r3
 8018222:	480f      	ldr	r0, [pc, #60]	@ (8018260 <prvEthernetUpdateConfig+0xb0>)
 8018224:	f000 ffcc 	bl	80191c0 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8018228:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801822a:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 801822c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801822e:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8018230:	f107 030c 	add.w	r3, r7, #12
 8018234:	4619      	mov	r1, r3
 8018236:	480a      	ldr	r0, [pc, #40]	@ (8018260 <prvEthernetUpdateConfig+0xb0>)
 8018238:	f001 f996 	bl	8019568 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 801823c:	2301      	movs	r3, #1
 801823e:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8018240:	4807      	ldr	r0, [pc, #28]	@ (8018260 <prvEthernetUpdateConfig+0xb0>)
 8018242:	f000 fb64 	bl	801890e <HAL_ETH_Start_IT>
 8018246:	e003      	b.n	8018250 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018248:	4805      	ldr	r0, [pc, #20]	@ (8018260 <prvEthernetUpdateConfig+0xb0>)
 801824a:	f000 fbe5 	bl	8018a18 <HAL_ETH_Stop_IT>
    }
}
 801824e:	bf00      	nop
 8018250:	bf00      	nop
 8018252:	3778      	adds	r7, #120	@ 0x78
 8018254:	46bd      	mov	sp, r7
 8018256:	bd80      	pop	{r7, pc}
 8018258:	200024a4 	.word	0x200024a4
 801825c:	080273cc 	.word	0x080273cc
 8018260:	200023f4 	.word	0x200023f4

08018264 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b08c      	sub	sp, #48	@ 0x30
 8018268:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 801826a:	2300      	movs	r3, #0
 801826c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 801826e:	2300      	movs	r3, #0
 8018270:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8018272:	f107 0308 	add.w	r3, r7, #8
 8018276:	4619      	mov	r1, r3
 8018278:	4838      	ldr	r0, [pc, #224]	@ (801835c <prvNetworkInterfaceInput+0xf8>)
 801827a:	f000 fd19 	bl	8018cb0 <HAL_ETH_GetRxData>
 801827e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	2b00      	cmp	r3, #0
 8018284:	d101      	bne.n	801828a <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8018286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018288:	e064      	b.n	8018354 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 801828a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801828c:	3301      	adds	r3, #1
 801828e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 8018290:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8018294:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d004      	beq.n	80182a6 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 801829c:	68bb      	ldr	r3, [r7, #8]
 801829e:	4618      	mov	r0, r3
 80182a0:	f7f2 f8ab 	bl	800a3fa <pxPacketBuffer_to_NetworkBuffer>
 80182a4:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 80182a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d102      	bne.n	80182b2 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 80182ac:	482c      	ldr	r0, [pc, #176]	@ (8018360 <prvNetworkInterfaceInput+0xfc>)
 80182ae:	f009 fe23 	bl	8021ef8 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 80182b2:	2100      	movs	r1, #0
 80182b4:	69b8      	ldr	r0, [r7, #24]
 80182b6:	f7fe ff0f 	bl	80170d8 <pxGetNetworkBufferWithDescriptor>
 80182ba:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 80182bc:	697b      	ldr	r3, [r7, #20]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d102      	bne.n	80182c8 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 80182c2:	2300      	movs	r3, #0
 80182c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80182c6:	e005      	b.n	80182d4 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 80182c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d002      	beq.n	80182d4 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 80182ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182d0:	69fa      	ldr	r2, [r7, #28]
 80182d2:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 80182d4:	2300      	movs	r3, #0
 80182d6:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 80182d8:	697b      	ldr	r3, [r7, #20]
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d002      	beq.n	80182e4 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182e2:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 80182e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80182e6:	481d      	ldr	r0, [pc, #116]	@ (801835c <prvNetworkInterfaceInput+0xf8>)
 80182e8:	f000 fd2a 	bl	8018d40 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 80182ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d0bd      	beq.n	801826e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 80182f2:	2300      	movs	r3, #0
 80182f4:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 80182f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80182f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7f1 f9e4 	bl	80096c8 <eConsiderFrameForProcessing>
 8018300:	4603      	mov	r3, r0
 8018302:	2b01      	cmp	r3, #1
 8018304:	d002      	beq.n	801830c <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8018306:	2301      	movs	r3, #1
 8018308:	623b      	str	r3, [r7, #32]
 801830a:	e01c      	b.n	8018346 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 801830c:	2301      	movs	r3, #1
 801830e:	703b      	strb	r3, [r7, #0]
 8018310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018312:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8018314:	4b13      	ldr	r3, [pc, #76]	@ (8018364 <prvNetworkInterfaceInput+0x100>)
 8018316:	681a      	ldr	r2, [r3, #0]
 8018318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801831a:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 801831c:	4b11      	ldr	r3, [pc, #68]	@ (8018364 <prvNetworkInterfaceInput+0x100>)
 801831e:	681a      	ldr	r2, [r3, #0]
 8018320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018324:	4619      	mov	r1, r3
 8018326:	4610      	mov	r0, r2
 8018328:	f7f5 fb96 	bl	800da58 <FreeRTOS_MatchingEndpoint>
 801832c:	4602      	mov	r2, r0
 801832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018330:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8018332:	463b      	mov	r3, r7
 8018334:	2100      	movs	r1, #0
 8018336:	4618      	mov	r0, r3
 8018338:	f7f1 f972 	bl	8009620 <xSendEventStructToIPTask>
 801833c:	4603      	mov	r3, r0
 801833e:	2b00      	cmp	r3, #0
 8018340:	d101      	bne.n	8018346 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8018342:	2301      	movs	r3, #1
 8018344:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8018346:	6a3b      	ldr	r3, [r7, #32]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d090      	beq.n	801826e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 801834c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801834e:	f7fe ff2b 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
    {
 8018352:	e78c      	b.n	801826e <prvNetworkInterfaceInput+0xa>
}
 8018354:	4618      	mov	r0, r3
 8018356:	3730      	adds	r7, #48	@ 0x30
 8018358:	46bd      	mov	sp, r7
 801835a:	bd80      	pop	{r7, pc}
 801835c:	200023f4 	.word	0x200023f4
 8018360:	08027400 	.word	0x08027400
 8018364:	2000249c 	.word	0x2000249c

08018368 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b086      	sub	sp, #24
 801836c:	af00      	add	r7, sp, #0
 801836e:	60f8      	str	r0, [r7, #12]
 8018370:	60b9      	str	r1, [r7, #8]
 8018372:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8018374:	f04f 33ff 	mov.w	r3, #4294967295
 8018378:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 801837a:	687b      	ldr	r3, [r7, #4]
 801837c:	68ba      	ldr	r2, [r7, #8]
 801837e:	68f9      	ldr	r1, [r7, #12]
 8018380:	4806      	ldr	r0, [pc, #24]	@ (801839c <ETH_PHY_IO_ReadReg+0x34>)
 8018382:	f000 fe75 	bl	8019070 <HAL_ETH_ReadPHYRegister>
 8018386:	4603      	mov	r3, r0
 8018388:	2b00      	cmp	r3, #0
 801838a:	d101      	bne.n	8018390 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 801838c:	2300      	movs	r3, #0
 801838e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 8018390:	697b      	ldr	r3, [r7, #20]
}
 8018392:	4618      	mov	r0, r3
 8018394:	3718      	adds	r7, #24
 8018396:	46bd      	mov	sp, r7
 8018398:	bd80      	pop	{r7, pc}
 801839a:	bf00      	nop
 801839c:	200023f4 	.word	0x200023f4

080183a0 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 80183a0:	b580      	push	{r7, lr}
 80183a2:	b086      	sub	sp, #24
 80183a4:	af00      	add	r7, sp, #0
 80183a6:	60f8      	str	r0, [r7, #12]
 80183a8:	60b9      	str	r1, [r7, #8]
 80183aa:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 80183ac:	f04f 33ff 	mov.w	r3, #4294967295
 80183b0:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	68ba      	ldr	r2, [r7, #8]
 80183b6:	68f9      	ldr	r1, [r7, #12]
 80183b8:	4806      	ldr	r0, [pc, #24]	@ (80183d4 <ETH_PHY_IO_WriteReg+0x34>)
 80183ba:	f000 fead 	bl	8019118 <HAL_ETH_WritePHYRegister>
 80183be:	4603      	mov	r3, r0
 80183c0:	2b00      	cmp	r3, #0
 80183c2:	d101      	bne.n	80183c8 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 80183c4:	2300      	movs	r3, #0
 80183c6:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 80183c8:	697b      	ldr	r3, [r7, #20]
}
 80183ca:	4618      	mov	r0, r3
 80183cc:	3718      	adds	r7, #24
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	200023f4 	.word	0x200023f4

080183d8 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 80183d8:	b580      	push	{r7, lr}
 80183da:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 80183dc:	4802      	ldr	r0, [pc, #8]	@ (80183e8 <ETH_IRQHandler+0x10>)
 80183de:	f000 fd27 	bl	8018e30 <HAL_ETH_IRQHandler>
}
 80183e2:	bf00      	nop
 80183e4:	bd80      	pop	{r7, pc}
 80183e6:	bf00      	nop
 80183e8:	200023f4 	.word	0x200023f4

080183ec <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 80183ec:	b580      	push	{r7, lr}
 80183ee:	b084      	sub	sp, #16
 80183f0:	af00      	add	r7, sp, #0
 80183f2:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80183f4:	2300      	movs	r3, #0
 80183f6:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 80183f8:	4b10      	ldr	r3, [pc, #64]	@ (801843c <prvSetFlagsAndNotify+0x50>)
 80183fa:	681a      	ldr	r2, [r3, #0]
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	4313      	orrs	r3, r2
 8018400:	4a0e      	ldr	r2, [pc, #56]	@ (801843c <prvSetFlagsAndNotify+0x50>)
 8018402:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8018404:	4b0e      	ldr	r3, [pc, #56]	@ (8018440 <prvSetFlagsAndNotify+0x54>)
 8018406:	681b      	ldr	r3, [r3, #0]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d012      	beq.n	8018432 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 801840c:	4b0c      	ldr	r3, [pc, #48]	@ (8018440 <prvSetFlagsAndNotify+0x54>)
 801840e:	681b      	ldr	r3, [r3, #0]
 8018410:	f107 020c 	add.w	r2, r7, #12
 8018414:	2100      	movs	r1, #0
 8018416:	4618      	mov	r0, r3
 8018418:	f7ed fbd6 	bl	8005bc8 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d007      	beq.n	8018432 <prvSetFlagsAndNotify+0x46>
 8018422:	4b08      	ldr	r3, [pc, #32]	@ (8018444 <prvSetFlagsAndNotify+0x58>)
 8018424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018428:	601a      	str	r2, [r3, #0]
 801842a:	f3bf 8f4f 	dsb	sy
 801842e:	f3bf 8f6f 	isb	sy
    }
}
 8018432:	bf00      	nop
 8018434:	3710      	adds	r7, #16
 8018436:	46bd      	mov	sp, r7
 8018438:	bd80      	pop	{r7, pc}
 801843a:	bf00      	nop
 801843c:	200023e4 	.word	0x200023e4
 8018440:	200024a0 	.word	0x200024a0
 8018444:	e000ed04 	.word	0xe000ed04

08018448 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8018448:	b580      	push	{r7, lr}
 801844a:	b082      	sub	sp, #8
 801844c:	af00      	add	r7, sp, #0
 801844e:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8018450:	2002      	movs	r0, #2
 8018452:	f7ff ffcb 	bl	80183ec <prvSetFlagsAndNotify>
}
 8018456:	bf00      	nop
 8018458:	3708      	adds	r7, #8
 801845a:	46bd      	mov	sp, r7
 801845c:	bd80      	pop	{r7, pc}

0801845e <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 801845e:	b580      	push	{r7, lr}
 8018460:	b082      	sub	sp, #8
 8018462:	af00      	add	r7, sp, #0
 8018464:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8018466:	2001      	movs	r0, #1
 8018468:	f7ff ffc0 	bl	80183ec <prvSetFlagsAndNotify>
}
 801846c:	bf00      	nop
 801846e:	3708      	adds	r7, #8
 8018470:	46bd      	mov	sp, r7
 8018472:	bd80      	pop	{r7, pc}

08018474 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8018474:	b580      	push	{r7, lr}
 8018476:	b082      	sub	sp, #8
 8018478:	af00      	add	r7, sp, #0
 801847a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 801847c:	2004      	movs	r0, #4
 801847e:	f7ff ffb5 	bl	80183ec <prvSetFlagsAndNotify>
}
 8018482:	bf00      	nop
 8018484:	3708      	adds	r7, #8
 8018486:	46bd      	mov	sp, r7
 8018488:	bd80      	pop	{r7, pc}
	...

0801848c <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 801848c:	b480      	push	{r7}
 801848e:	b085      	sub	sp, #20
 8018490:	af00      	add	r7, sp, #0
 8018492:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8018494:	4b15      	ldr	r3, [pc, #84]	@ (80184ec <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8018496:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8018498:	2300      	movs	r3, #0
 801849a:	60bb      	str	r3, [r7, #8]
 801849c:	e01c      	b.n	80184d8 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 801849e:	68ba      	ldr	r2, [r7, #8]
 80184a0:	4613      	mov	r3, r2
 80184a2:	00db      	lsls	r3, r3, #3
 80184a4:	1a9b      	subs	r3, r3, r2
 80184a6:	00db      	lsls	r3, r3, #3
 80184a8:	461a      	mov	r2, r3
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	4413      	add	r3, r2
 80184ae:	68fa      	ldr	r2, [r7, #12]
 80184b0:	320a      	adds	r2, #10
 80184b2:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 80184b4:	68ba      	ldr	r2, [r7, #8]
 80184b6:	4613      	mov	r3, r2
 80184b8:	00db      	lsls	r3, r3, #3
 80184ba:	1a9b      	subs	r3, r3, r2
 80184bc:	00db      	lsls	r3, r3, #3
 80184be:	461a      	mov	r2, r3
 80184c0:	687b      	ldr	r3, [r7, #4]
 80184c2:	4413      	add	r3, r2
 80184c4:	461a      	mov	r2, r3
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80184d0:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80184d2:	68bb      	ldr	r3, [r7, #8]
 80184d4:	3301      	adds	r3, #1
 80184d6:	60bb      	str	r3, [r7, #8]
 80184d8:	68bb      	ldr	r3, [r7, #8]
 80184da:	2b3f      	cmp	r3, #63	@ 0x3f
 80184dc:	d9df      	bls.n	801849e <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 80184de:	bf00      	nop
 80184e0:	bf00      	nop
 80184e2:	3714      	adds	r7, #20
 80184e4:	46bd      	mov	sp, r7
 80184e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184ea:	4770      	bx	lr
 80184ec:	240400c0 	.word	0x240400c0

080184f0 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 80184f0:	b580      	push	{r7, lr}
 80184f2:	b082      	sub	sp, #8
 80184f4:	af00      	add	r7, sp, #0
 80184f6:	6078      	str	r0, [r7, #4]
 80184f8:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 80184fa:	f7ed fe19 	bl	8006130 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681a      	ldr	r2, [r3, #0]
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	43db      	mvns	r3, r3
 8018506:	401a      	ands	r2, r3
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 801850c:	f7ed fe3c 	bl	8006188 <vPortExitCritical>
}
 8018510:	bf00      	nop
 8018512:	3708      	adds	r7, #8
 8018514:	46bd      	mov	sp, r7
 8018516:	bd80      	pop	{r7, pc}

08018518 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8018518:	b480      	push	{r7}
 801851a:	b087      	sub	sp, #28
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8018520:	2300      	movs	r3, #0
 8018522:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	3330      	adds	r3, #48	@ 0x30
 8018528:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 801852a:	2300      	movs	r3, #0
 801852c:	617b      	str	r3, [r7, #20]
 801852e:	e00e      	b.n	801854e <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8018530:	68fb      	ldr	r3, [r7, #12]
 8018532:	697a      	ldr	r2, [r7, #20]
 8018534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8018538:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	68db      	ldr	r3, [r3, #12]
 801853e:	2b00      	cmp	r3, #0
 8018540:	da02      	bge.n	8018548 <uxGetOwnCount+0x30>
            {
                xCount++;
 8018542:	693b      	ldr	r3, [r7, #16]
 8018544:	3301      	adds	r3, #1
 8018546:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	3301      	adds	r3, #1
 801854c:	617b      	str	r3, [r7, #20]
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	2b03      	cmp	r3, #3
 8018552:	d9ed      	bls.n	8018530 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8018554:	693b      	ldr	r3, [r7, #16]
    }
 8018556:	4618      	mov	r0, r3
 8018558:	371c      	adds	r7, #28
 801855a:	46bd      	mov	sp, r7
 801855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018560:	4770      	bx	lr
	...

08018564 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b088      	sub	sp, #32
 8018568:	af00      	add	r7, sp, #0
 801856a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 801856c:	2364      	movs	r3, #100	@ 0x64
 801856e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8018570:	2300      	movs	r3, #0
 8018572:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8018574:	2304      	movs	r3, #4
 8018576:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8018578:	2300      	movs	r3, #0
 801857a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 801857c:	f7f2 f8d6 	bl	800a72c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8018580:	4b43      	ldr	r3, [pc, #268]	@ (8018690 <prvEMACHandlerTask+0x12c>)
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4618      	mov	r0, r3
 8018586:	f7eb fb2d 	bl	8003be4 <uxQueueMessagesWaiting>
 801858a:	4603      	mov	r3, r0
 801858c:	f1c3 0304 	rsb	r3, r3, #4
 8018590:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8018592:	69fa      	ldr	r2, [r7, #28]
 8018594:	68fb      	ldr	r3, [r7, #12]
 8018596:	429a      	cmp	r2, r3
 8018598:	d206      	bcs.n	80185a8 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 801859e:	2204      	movs	r2, #4
 80185a0:	69f9      	ldr	r1, [r7, #28]
 80185a2:	483c      	ldr	r0, [pc, #240]	@ (8018694 <prvEMACHandlerTask+0x130>)
 80185a4:	f009 fca8 	bl	8021ef8 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 80185a8:	483b      	ldr	r0, [pc, #236]	@ (8018698 <prvEMACHandlerTask+0x134>)
 80185aa:	f7ff ffb5 	bl	8018518 <uxGetOwnCount>
 80185ae:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 80185b0:	69ba      	ldr	r2, [r7, #24]
 80185b2:	68bb      	ldr	r3, [r7, #8]
 80185b4:	429a      	cmp	r2, r3
 80185b6:	d906      	bls.n	80185c6 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 80185b8:	68bb      	ldr	r3, [r7, #8]
 80185ba:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 80185bc:	2204      	movs	r2, #4
 80185be:	69b9      	ldr	r1, [r7, #24]
 80185c0:	4836      	ldr	r0, [pc, #216]	@ (801869c <prvEMACHandlerTask+0x138>)
 80185c2:	f009 fc99 	bl	8021ef8 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 80185c6:	693a      	ldr	r2, [r7, #16]
 80185c8:	2100      	movs	r1, #0
 80185ca:	2000      	movs	r0, #0
 80185cc:	f7ec ff8c 	bl	80054e8 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 80185d0:	4b33      	ldr	r3, [pc, #204]	@ (80186a0 <prvEMACHandlerTask+0x13c>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	f003 0301 	and.w	r3, r3, #1
 80185d8:	2b00      	cmp	r3, #0
 80185da:	d006      	beq.n	80185ea <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 80185dc:	2101      	movs	r1, #1
 80185de:	4830      	ldr	r0, [pc, #192]	@ (80186a0 <prvEMACHandlerTask+0x13c>)
 80185e0:	f7ff ff86 	bl	80184f0 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 80185e4:	f7ff fe3e 	bl	8018264 <prvNetworkInterfaceInput>
 80185e8:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 80185ea:	4b2d      	ldr	r3, [pc, #180]	@ (80186a0 <prvEMACHandlerTask+0x13c>)
 80185ec:	681b      	ldr	r3, [r3, #0]
 80185ee:	f003 0302 	and.w	r3, r3, #2
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d017      	beq.n	8018626 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 80185f6:	2102      	movs	r1, #2
 80185f8:	4829      	ldr	r0, [pc, #164]	@ (80186a0 <prvEMACHandlerTask+0x13c>)
 80185fa:	f7ff ff79 	bl	80184f0 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 80185fe:	4b29      	ldr	r3, [pc, #164]	@ (80186a4 <prvEMACHandlerTask+0x140>)
 8018600:	681b      	ldr	r3, [r3, #0]
 8018602:	f242 7110 	movw	r1, #10000	@ 0x2710
 8018606:	4618      	mov	r0, r3
 8018608:	f7eb f9fe 	bl	8003a08 <xQueueSemaphoreTake>
 801860c:	4603      	mov	r3, r0
 801860e:	2b00      	cmp	r3, #0
 8018610:	d009      	beq.n	8018626 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018612:	4821      	ldr	r0, [pc, #132]	@ (8018698 <prvEMACHandlerTask+0x134>)
 8018614:	f001 fb04 	bl	8019c20 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8018618:	4b22      	ldr	r3, [pc, #136]	@ (80186a4 <prvEMACHandlerTask+0x140>)
 801861a:	6818      	ldr	r0, [r3, #0]
 801861c:	2300      	movs	r3, #0
 801861e:	2200      	movs	r2, #0
 8018620:	2100      	movs	r1, #0
 8018622:	f7eb f839 	bl	8003698 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8018626:	4b1e      	ldr	r3, [pc, #120]	@ (80186a0 <prvEMACHandlerTask+0x13c>)
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	f003 0304 	and.w	r3, r3, #4
 801862e:	2b00      	cmp	r3, #0
 8018630:	d00f      	beq.n	8018652 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8018632:	2104      	movs	r1, #4
 8018634:	481a      	ldr	r0, [pc, #104]	@ (80186a0 <prvEMACHandlerTask+0x13c>)
 8018636:	f7ff ff5b 	bl	80184f0 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 801863a:	4b17      	ldr	r3, [pc, #92]	@ (8018698 <prvEMACHandlerTask+0x134>)
 801863c:	2210      	movs	r2, #16
 801863e:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8018640:	4815      	ldr	r0, [pc, #84]	@ (8018698 <prvEMACHandlerTask+0x134>)
 8018642:	f000 f964 	bl	801890e <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8018646:	f7ff fe0d 	bl	8018264 <prvNetworkInterfaceInput>
 801864a:	4602      	mov	r2, r0
 801864c:	697b      	ldr	r3, [r7, #20]
 801864e:	4413      	add	r3, r2
 8018650:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8018652:	6979      	ldr	r1, [r7, #20]
 8018654:	4814      	ldr	r0, [pc, #80]	@ (80186a8 <prvEMACHandlerTask+0x144>)
 8018656:	f7ff fa25 	bl	8017aa4 <xPhyCheckLinkStatus>
 801865a:	4603      	mov	r3, r0
 801865c:	2b00      	cmp	r3, #0
 801865e:	d08b      	beq.n	8018578 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8018660:	4b12      	ldr	r3, [pc, #72]	@ (80186ac <prvEMACHandlerTask+0x148>)
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	4618      	mov	r0, r3
 8018666:	f7ff fccf 	bl	8018008 <xSTM32H_GetPhyLinkStatus>
 801866a:	4603      	mov	r3, r0
 801866c:	2b00      	cmp	r3, #0
 801866e:	d10b      	bne.n	8018688 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8018670:	4809      	ldr	r0, [pc, #36]	@ (8018698 <prvEMACHandlerTask+0x134>)
 8018672:	f000 f9d1 	bl	8018a18 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8018676:	2260      	movs	r2, #96	@ 0x60
 8018678:	2100      	movs	r1, #0
 801867a:	480d      	ldr	r0, [pc, #52]	@ (80186b0 <prvEMACHandlerTask+0x14c>)
 801867c:	f009 ff65 	bl	802254a <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8018680:	4805      	ldr	r0, [pc, #20]	@ (8018698 <prvEMACHandlerTask+0x134>)
 8018682:	f001 facd 	bl	8019c20 <ETH_Clear_Tx_Descriptors>
 8018686:	e777      	b.n	8018578 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8018688:	2000      	movs	r0, #0
 801868a:	f7ff fd91 	bl	80181b0 <prvEthernetUpdateConfig>
    {
 801868e:	e773      	b.n	8018578 <prvEMACHandlerTask+0x14>
 8018690:	200023ec 	.word	0x200023ec
 8018694:	08027424 	.word	0x08027424
 8018698:	200023f4 	.word	0x200023f4
 801869c:	0802743c 	.word	0x0802743c
 80186a0:	200023e4 	.word	0x200023e4
 80186a4:	200023f0 	.word	0x200023f0
 80186a8:	200024a4 	.word	0x200024a4
 80186ac:	2000249c 	.word	0x2000249c
 80186b0:	24040060 	.word	0x24040060

080186b4 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 80186b4:	b480      	push	{r7}
 80186b6:	b083      	sub	sp, #12
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
 80186bc:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	683a      	ldr	r2, [r7, #0]
 80186c2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 80186c4:	bf00      	nop
 80186c6:	370c      	adds	r7, #12
 80186c8:	46bd      	mov	sp, r7
 80186ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ce:	4770      	bx	lr

080186d0 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 80186d0:	b580      	push	{r7, lr}
 80186d2:	b084      	sub	sp, #16
 80186d4:	af00      	add	r7, sp, #0
 80186d6:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d101      	bne.n	80186e2 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 80186de:	2301      	movs	r3, #1
 80186e0:	e0d4      	b.n	801888c <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d102      	bne.n	80186f0 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 80186ea:	6878      	ldr	r0, [r7, #4]
 80186ec:	f7e9 fc3e 	bl	8001f6c <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	2223      	movs	r2, #35	@ 0x23
 80186f4:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 80186f6:	4b67      	ldr	r3, [pc, #412]	@ (8018894 <HAL_ETH_Init+0x1c4>)
 80186f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80186fc:	4a65      	ldr	r2, [pc, #404]	@ (8018894 <HAL_ETH_Init+0x1c4>)
 80186fe:	f043 0302 	orr.w	r3, r3, #2
 8018702:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8018706:	4b63      	ldr	r3, [pc, #396]	@ (8018894 <HAL_ETH_Init+0x1c4>)
 8018708:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801870c:	f003 0302 	and.w	r3, r3, #2
 8018710:	60bb      	str	r3, [r7, #8]
 8018712:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	7a1b      	ldrb	r3, [r3, #8]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d103      	bne.n	8018724 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 801871c:	2000      	movs	r0, #0
 801871e:	f001 fc17 	bl	8019f50 <HAL_SYSCFG_ETHInterfaceSelect>
 8018722:	e003      	b.n	801872c <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8018724:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018728:	f001 fc12 	bl	8019f50 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	687a      	ldr	r2, [r7, #4]
 8018738:	6812      	ldr	r2, [r2, #0]
 801873a:	f043 0301 	orr.w	r3, r3, #1
 801873e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018742:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8018744:	f001 fbc8 	bl	8019ed8 <HAL_GetTick>
 8018748:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801874a:	e010      	b.n	801876e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 801874c:	f001 fbc4 	bl	8019ed8 <HAL_GetTick>
 8018750:	4602      	mov	r2, r0
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	1ad3      	subs	r3, r2, r3
 8018756:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801875a:	d908      	bls.n	801876e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	2204      	movs	r2, #4
 8018760:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018762:	21e0      	movs	r1, #224	@ 0xe0
 8018764:	6878      	ldr	r0, [r7, #4]
 8018766:	f7ff ffa5 	bl	80186b4 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 801876a:	2301      	movs	r3, #1
 801876c:	e08e      	b.n	801888c <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801876e:	687b      	ldr	r3, [r7, #4]
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	f003 0301 	and.w	r3, r3, #1
 801877c:	2b00      	cmp	r3, #0
 801877e:	d1e5      	bne.n	801874c <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8018780:	6878      	ldr	r0, [r7, #4]
 8018782:	f001 f94b 	bl	8019a1c <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8018786:	f004 ff49 	bl	801d61c <HAL_RCC_GetHCLKFreq>
 801878a:	4603      	mov	r3, r0
 801878c:	4a42      	ldr	r2, [pc, #264]	@ (8018898 <HAL_ETH_Init+0x1c8>)
 801878e:	fba2 2303 	umull	r2, r3, r2, r3
 8018792:	0c9a      	lsrs	r2, r3, #18
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	3a01      	subs	r2, #1
 801879a:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 801879e:	6878      	ldr	r0, [r7, #4]
 80187a0:	f001 f89e 	bl	80198e0 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	681b      	ldr	r3, [r3, #0]
 80187a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80187ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80187b0:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80187b4:	687a      	ldr	r2, [r7, #4]
 80187b6:	6812      	ldr	r2, [r2, #0]
 80187b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80187bc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80187c0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	695b      	ldr	r3, [r3, #20]
 80187c8:	f003 0303 	and.w	r3, r3, #3
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d008      	beq.n	80187e2 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	2201      	movs	r2, #1
 80187d4:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80187d6:	21e0      	movs	r1, #224	@ 0xe0
 80187d8:	6878      	ldr	r0, [r7, #4]
 80187da:	f7ff ff6b 	bl	80186b4 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 80187de:	2301      	movs	r3, #1
 80187e0:	e054      	b.n	801888c <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80187ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80187ee:	4b2b      	ldr	r3, [pc, #172]	@ (801889c <HAL_ETH_Init+0x1cc>)
 80187f0:	4013      	ands	r3, r2
 80187f2:	687a      	ldr	r2, [r7, #4]
 80187f4:	6952      	ldr	r2, [r2, #20]
 80187f6:	0051      	lsls	r1, r2, #1
 80187f8:	687a      	ldr	r2, [r7, #4]
 80187fa:	6812      	ldr	r2, [r2, #0]
 80187fc:	430b      	orrs	r3, r1
 80187fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018802:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8018806:	6878      	ldr	r0, [r7, #4]
 8018808:	f001 f960 	bl	8019acc <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	f001 f9a9 	bl	8019b64 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	685b      	ldr	r3, [r3, #4]
 8018816:	3305      	adds	r3, #5
 8018818:	781b      	ldrb	r3, [r3, #0]
 801881a:	021a      	lsls	r2, r3, #8
 801881c:	687b      	ldr	r3, [r7, #4]
 801881e:	685b      	ldr	r3, [r3, #4]
 8018820:	3304      	adds	r3, #4
 8018822:	781b      	ldrb	r3, [r3, #0]
 8018824:	4619      	mov	r1, r3
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	430a      	orrs	r2, r1
 801882c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	685b      	ldr	r3, [r3, #4]
 8018834:	3303      	adds	r3, #3
 8018836:	781b      	ldrb	r3, [r3, #0]
 8018838:	061a      	lsls	r2, r3, #24
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	685b      	ldr	r3, [r3, #4]
 801883e:	3302      	adds	r3, #2
 8018840:	781b      	ldrb	r3, [r3, #0]
 8018842:	041b      	lsls	r3, r3, #16
 8018844:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	685b      	ldr	r3, [r3, #4]
 801884a:	3301      	adds	r3, #1
 801884c:	781b      	ldrb	r3, [r3, #0]
 801884e:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018850:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	781b      	ldrb	r3, [r3, #0]
 8018858:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 801885e:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8018860:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2200      	movs	r2, #0
 8018868:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	2210      	movs	r2, #16
 801886e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2210      	movs	r2, #16
 8018874:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	4a09      	ldr	r2, [pc, #36]	@ (80188a0 <HAL_ETH_Init+0x1d0>)
 801887c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	681b      	ldr	r3, [r3, #0]
 8018884:	4a07      	ldr	r2, [pc, #28]	@ (80188a4 <HAL_ETH_Init+0x1d4>)
 8018886:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 801888a:	2300      	movs	r3, #0
        }
 801888c:	4618      	mov	r0, r3
 801888e:	3710      	adds	r7, #16
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}
 8018894:	58024400 	.word	0x58024400
 8018898:	431bde83 	.word	0x431bde83
 801889c:	ffff8001 	.word	0xffff8001
 80188a0:	0c020060 	.word	0x0c020060
 80188a4:	0c20c000 	.word	0x0c20c000

080188a8 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 80188a8:	b480      	push	{r7}
 80188aa:	b087      	sub	sp, #28
 80188ac:	af00      	add	r7, sp, #0
 80188ae:	60f8      	str	r0, [r7, #12]
 80188b0:	60b9      	str	r1, [r7, #8]
 80188b2:	607a      	str	r2, [r7, #4]
 80188b4:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	68ba      	ldr	r2, [r7, #8]
 80188ba:	320c      	adds	r2, #12
 80188bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80188c0:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 80188c2:	687b      	ldr	r3, [r7, #4]
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d002      	beq.n	80188ce <HAL_ETH_DescAssignMemory+0x26>
 80188c8:	68bb      	ldr	r3, [r7, #8]
 80188ca:	2b03      	cmp	r3, #3
 80188cc:	d904      	bls.n	80188d8 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80188ce:	68fb      	ldr	r3, [r7, #12]
 80188d0:	2201      	movs	r2, #1
 80188d2:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 80188d4:	2301      	movs	r3, #1
 80188d6:	e014      	b.n	8018902 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 80188d8:	687a      	ldr	r2, [r7, #4]
 80188da:	697b      	ldr	r3, [r7, #20]
 80188dc:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 80188de:	687a      	ldr	r2, [r7, #4]
 80188e0:	697b      	ldr	r3, [r7, #20]
 80188e2:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 80188e4:	697b      	ldr	r3, [r7, #20]
 80188e6:	68db      	ldr	r3, [r3, #12]
 80188e8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80188ec:	697b      	ldr	r3, [r7, #20]
 80188ee:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 80188f0:	697b      	ldr	r3, [r7, #20]
 80188f2:	68db      	ldr	r3, [r3, #12]
 80188f4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80188f8:	697b      	ldr	r3, [r7, #20]
 80188fa:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 80188fc:	697b      	ldr	r3, [r7, #20]
 80188fe:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 8018900:	2300      	movs	r3, #0
        }
 8018902:	4618      	mov	r0, r3
 8018904:	371c      	adds	r7, #28
 8018906:	46bd      	mov	sp, r7
 8018908:	f85d 7b04 	ldr.w	r7, [sp], #4
 801890c:	4770      	bx	lr

0801890e <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 801890e:	b480      	push	{r7}
 8018910:	b085      	sub	sp, #20
 8018912:	af00      	add	r7, sp, #0
 8018914:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801891a:	2b10      	cmp	r3, #16
 801891c:	d175      	bne.n	8018a0a <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 801891e:	687b      	ldr	r3, [r7, #4]
 8018920:	2223      	movs	r2, #35	@ 0x23
 8018922:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8018924:	2300      	movs	r3, #0
 8018926:	60fb      	str	r3, [r7, #12]
 8018928:	e00e      	b.n	8018948 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	68fa      	ldr	r2, [r7, #12]
 801892e:	320c      	adds	r2, #12
 8018930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018934:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	68db      	ldr	r3, [r3, #12]
 801893a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801893e:	68bb      	ldr	r3, [r7, #8]
 8018940:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8018942:	68fb      	ldr	r3, [r7, #12]
 8018944:	3301      	adds	r3, #1
 8018946:	60fb      	str	r3, [r7, #12]
 8018948:	68fb      	ldr	r3, [r7, #12]
 801894a:	2b03      	cmp	r3, #3
 801894c:	d9ed      	bls.n	801892a <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	2201      	movs	r2, #1
 8018952:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018954:	687b      	ldr	r3, [r7, #4]
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	681a      	ldr	r2, [r3, #0]
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	681b      	ldr	r3, [r3, #0]
 801895e:	f042 0202 	orr.w	r2, r2, #2
 8018962:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018964:	687b      	ldr	r3, [r7, #4]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	681a      	ldr	r2, [r3, #0]
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	f042 0201 	orr.w	r2, r2, #1
 8018972:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	681b      	ldr	r3, [r3, #0]
 8018978:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	f042 0201 	orr.w	r2, r2, #1
 8018984:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018990:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018994:	687a      	ldr	r2, [r7, #4]
 8018996:	6812      	ldr	r2, [r2, #0]
 8018998:	f043 0301 	orr.w	r3, r3, #1
 801899c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80189a0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 80189a4:	687b      	ldr	r3, [r7, #4]
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189ac:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80189b0:	687a      	ldr	r2, [r7, #4]
 80189b2:	6812      	ldr	r2, [r2, #0]
 80189b4:	f043 0301 	orr.w	r3, r3, #1
 80189b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80189bc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189c8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80189cc:	687a      	ldr	r2, [r7, #4]
 80189ce:	6812      	ldr	r2, [r2, #0]
 80189d0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 80189d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80189d8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189e4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681a      	ldr	r2, [r3, #0]
 80189ec:	f24d 0341 	movw	r3, #53313	@ 0xd041
 80189f0:	430b      	orrs	r3, r1
 80189f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80189f6:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	2210      	movs	r2, #16
 80189fe:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2222      	movs	r2, #34	@ 0x22
 8018a04:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8018a06:	2300      	movs	r3, #0
 8018a08:	e000      	b.n	8018a0c <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 8018a0a:	2301      	movs	r3, #1
            }
        }
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	3714      	adds	r7, #20
 8018a10:	46bd      	mov	sp, r7
 8018a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a16:	4770      	bx	lr

08018a18 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8018a18:	b480      	push	{r7}
 8018a1a:	b085      	sub	sp, #20
 8018a1c:	af00      	add	r7, sp, #0
 8018a1e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	d066      	beq.n	8018af6 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	2223      	movs	r2, #35	@ 0x23
 8018a2c:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a36:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8018a3a:	687b      	ldr	r3, [r7, #4]
 8018a3c:	681a      	ldr	r2, [r3, #0]
 8018a3e:	4b31      	ldr	r3, [pc, #196]	@ (8018b04 <HAL_ETH_Stop_IT+0xec>)
 8018a40:	400b      	ands	r3, r1
 8018a42:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a46:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	681b      	ldr	r3, [r3, #0]
 8018a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a52:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018a56:	687a      	ldr	r2, [r7, #4]
 8018a58:	6812      	ldr	r2, [r2, #0]
 8018a5a:	f023 0301 	bic.w	r3, r3, #1
 8018a5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a62:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a6e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	6812      	ldr	r2, [r2, #0]
 8018a76:	f023 0301 	bic.w	r3, r3, #1
 8018a7a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a7e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	681a      	ldr	r2, [r3, #0]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	f022 0201 	bic.w	r2, r2, #1
 8018a90:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	f042 0201 	orr.w	r2, r2, #1
 8018aa2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	681a      	ldr	r2, [r3, #0]
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	681b      	ldr	r3, [r3, #0]
 8018ab0:	f022 0202 	bic.w	r2, r2, #2
 8018ab4:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018ab6:	2300      	movs	r3, #0
 8018ab8:	60fb      	str	r3, [r7, #12]
 8018aba:	e00e      	b.n	8018ada <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8018abc:	687b      	ldr	r3, [r7, #4]
 8018abe:	68fa      	ldr	r2, [r7, #12]
 8018ac0:	320c      	adds	r2, #12
 8018ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018ac6:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8018ac8:	68bb      	ldr	r3, [r7, #8]
 8018aca:	68db      	ldr	r3, [r3, #12]
 8018acc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8018ad0:	68bb      	ldr	r3, [r7, #8]
 8018ad2:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	3301      	adds	r3, #1
 8018ad8:	60fb      	str	r3, [r7, #12]
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	2b03      	cmp	r3, #3
 8018ade:	d9ed      	bls.n	8018abc <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 8018ae0:	687b      	ldr	r3, [r7, #4]
 8018ae2:	2200      	movs	r2, #0
 8018ae4:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2210      	movs	r2, #16
 8018aea:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8018aec:	687b      	ldr	r3, [r7, #4]
 8018aee:	2210      	movs	r2, #16
 8018af0:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 8018af2:	2300      	movs	r3, #0
 8018af4:	e000      	b.n	8018af8 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8018af6:	2301      	movs	r3, #1
            }
        }
 8018af8:	4618      	mov	r0, r3
 8018afa:	3714      	adds	r7, #20
 8018afc:	46bd      	mov	sp, r7
 8018afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b02:	4770      	bx	lr
 8018b04:	ffff2fbe 	.word	0xffff2fbe

08018b08 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8018b08:	b580      	push	{r7, lr}
 8018b0a:	b082      	sub	sp, #8
 8018b0c:	af00      	add	r7, sp, #0
 8018b0e:	6078      	str	r0, [r7, #4]
 8018b10:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 8018b12:	683b      	ldr	r3, [r7, #0]
 8018b14:	2b00      	cmp	r3, #0
 8018b16:	d107      	bne.n	8018b28 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018b1c:	f043 0201 	orr.w	r2, r3, #1
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8018b24:	2301      	movs	r3, #1
 8018b26:	e039      	b.n	8018b9c <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018b2c:	2b10      	cmp	r3, #16
 8018b2e:	d134      	bne.n	8018b9a <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 8018b30:	2201      	movs	r2, #1
 8018b32:	6839      	ldr	r1, [r7, #0]
 8018b34:	6878      	ldr	r0, [r7, #4]
 8018b36:	f001 f8c1 	bl	8019cbc <ETH_Prepare_Tx_Descriptors>
 8018b3a:	4603      	mov	r3, r0
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d007      	beq.n	8018b50 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018b44:	f043 0202 	orr.w	r2, r3, #2
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 8018b4c:	2301      	movs	r3, #1
 8018b4e:	e025      	b.n	8018b9c <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b54:	1c5a      	adds	r2, r3, #1
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	629a      	str	r2, [r3, #40]	@ 0x28
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b5e:	2b03      	cmp	r3, #3
 8018b60:	d904      	bls.n	8018b6c <HAL_ETH_Transmit_IT+0x64>
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b66:	1f1a      	subs	r2, r3, #4
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681a      	ldr	r2, [r3, #0]
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	3106      	adds	r1, #6
 8018b78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018b7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018b80:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8018b84:	f3bf 8f4f 	dsb	sy
}
 8018b88:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018b92:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8018b96:	2300      	movs	r3, #0
 8018b98:	e000      	b.n	8018b9c <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 8018b9a:	2301      	movs	r3, #1
            }
        }
 8018b9c:	4618      	mov	r0, r3
 8018b9e:	3708      	adds	r7, #8
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}

08018ba4 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8018ba4:	b580      	push	{r7, lr}
 8018ba6:	b08a      	sub	sp, #40	@ 0x28
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	3330      	adds	r3, #48	@ 0x30
 8018bb0:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8018bb2:	69bb      	ldr	r3, [r7, #24]
 8018bb4:	691b      	ldr	r3, [r3, #16]
 8018bb6:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018bb8:	69bb      	ldr	r3, [r7, #24]
 8018bba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018bc0:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8018bc6:	2300      	movs	r3, #0
 8018bc8:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8018bca:	2300      	movs	r3, #0
 8018bcc:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8018bce:	e055      	b.n	8018c7c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	68db      	ldr	r3, [r3, #12]
 8018bd4:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8018bd6:	6a3b      	ldr	r3, [r7, #32]
 8018bd8:	3301      	adds	r3, #1
 8018bda:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018be2:	2b00      	cmp	r3, #0
 8018be4:	d006      	beq.n	8018bf4 <HAL_ETH_IsRxDataAvailable+0x50>
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d001      	beq.n	8018bf4 <HAL_ETH_IsRxDataAvailable+0x50>
 8018bf0:	2301      	movs	r3, #1
 8018bf2:	e000      	b.n	8018bf6 <HAL_ETH_IsRxDataAvailable+0x52>
 8018bf4:	2300      	movs	r3, #0
 8018bf6:	2b00      	cmp	r3, #0
 8018bf8:	d104      	bne.n	8018c04 <HAL_ETH_IsRxDataAvailable+0x60>
 8018bfa:	f240 4195 	movw	r1, #1173	@ 0x495
 8018bfe:	482b      	ldr	r0, [pc, #172]	@ (8018cac <HAL_ETH_IsRxDataAvailable+0x108>)
 8018c00:	f7e8 fe9a 	bl	8001938 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018c0a:	2b00      	cmp	r3, #0
 8018c0c:	d036      	beq.n	8018c7c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 8018c0e:	693b      	ldr	r3, [r7, #16]
 8018c10:	3301      	adds	r3, #1
 8018c12:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8018c14:	693b      	ldr	r3, [r7, #16]
 8018c16:	2b01      	cmp	r3, #1
 8018c18:	d101      	bne.n	8018c1e <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 8018c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c1c:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 8018c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c20:	3301      	adds	r3, #1
 8018c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8018c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c26:	2b03      	cmp	r3, #3
 8018c28:	d902      	bls.n	8018c30 <HAL_ETH_IsRxDataAvailable+0x8c>
 8018c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c2c:	3b04      	subs	r3, #4
 8018c2e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018c30:	69bb      	ldr	r3, [r7, #24]
 8018c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018c38:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8018c3a:	697b      	ldr	r3, [r7, #20]
 8018c3c:	68db      	ldr	r3, [r3, #12]
 8018c3e:	2b00      	cmp	r3, #0
 8018c40:	db11      	blt.n	8018c66 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8018c42:	697b      	ldr	r3, [r7, #20]
 8018c44:	68db      	ldr	r3, [r3, #12]
 8018c46:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d00b      	beq.n	8018c66 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 8018c4e:	69bb      	ldr	r3, [r7, #24]
 8018c50:	2201      	movs	r2, #1
 8018c52:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8018c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c56:	3301      	adds	r3, #1
 8018c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8018c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c5c:	2b03      	cmp	r3, #3
 8018c5e:	d902      	bls.n	8018c66 <HAL_ETH_IsRxDataAvailable+0xc2>
 8018c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018c62:	3b04      	subs	r3, #4
 8018c64:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8018c66:	69bb      	ldr	r3, [r7, #24]
 8018c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018c6a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8018c6c:	69bb      	ldr	r3, [r7, #24]
 8018c6e:	69fa      	ldr	r2, [r7, #28]
 8018c70:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8018c72:	69bb      	ldr	r3, [r7, #24]
 8018c74:	693a      	ldr	r2, [r7, #16]
 8018c76:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8018c78:	2301      	movs	r3, #1
 8018c7a:	e012      	b.n	8018ca2 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8018c7c:	697b      	ldr	r3, [r7, #20]
 8018c7e:	68db      	ldr	r3, [r3, #12]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	db02      	blt.n	8018c8a <HAL_ETH_IsRxDataAvailable+0xe6>
 8018c84:	6a3b      	ldr	r3, [r7, #32]
 8018c86:	2b03      	cmp	r3, #3
 8018c88:	d9a2      	bls.n	8018bd0 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 8018c8a:	693b      	ldr	r3, [r7, #16]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d004      	beq.n	8018c9a <HAL_ETH_IsRxDataAvailable+0xf6>
 8018c90:	f240 41db 	movw	r1, #1243	@ 0x4db
 8018c94:	4805      	ldr	r0, [pc, #20]	@ (8018cac <HAL_ETH_IsRxDataAvailable+0x108>)
 8018c96:	f7e8 fe4f 	bl	8001938 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 8018c9a:	69bb      	ldr	r3, [r7, #24]
 8018c9c:	2200      	movs	r2, #0
 8018c9e:	619a      	str	r2, [r3, #24]

            return 0;
 8018ca0:	2300      	movs	r3, #0
        }
 8018ca2:	4618      	mov	r0, r3
 8018ca4:	3728      	adds	r7, #40	@ 0x28
 8018ca6:	46bd      	mov	sp, r7
 8018ca8:	bd80      	pop	{r7, pc}
 8018caa:	bf00      	nop
 8018cac:	08027454 	.word	0x08027454

08018cb0 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b086      	sub	sp, #24
 8018cb4:	af00      	add	r7, sp, #0
 8018cb6:	6078      	str	r0, [r7, #4]
 8018cb8:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	3330      	adds	r3, #48	@ 0x30
 8018cbe:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 8018cc0:	683b      	ldr	r3, [r7, #0]
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	d104      	bne.n	8018cd0 <HAL_ETH_GetRxData+0x20>
 8018cc6:	f240 511f 	movw	r1, #1311	@ 0x51f
 8018cca:	481c      	ldr	r0, [pc, #112]	@ (8018d3c <HAL_ETH_GetRxData+0x8c>)
 8018ccc:	f7e8 fe34 	bl	8001938 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8018cd0:	6878      	ldr	r0, [r7, #4]
 8018cd2:	f7ff ff67 	bl	8018ba4 <HAL_ETH_IsRxDataAvailable>
 8018cd6:	4603      	mov	r3, r0
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d101      	bne.n	8018ce0 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8018cdc:	2300      	movs	r3, #0
 8018cde:	e028      	b.n	8018d32 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 8018ce0:	697b      	ldr	r3, [r7, #20]
 8018ce2:	695b      	ldr	r3, [r3, #20]
 8018ce4:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018ce6:	697b      	ldr	r3, [r7, #20]
 8018ce8:	693a      	ldr	r2, [r7, #16]
 8018cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018cee:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8018cf0:	697b      	ldr	r3, [r7, #20]
 8018cf2:	699b      	ldr	r3, [r3, #24]
 8018cf4:	2b01      	cmp	r3, #1
 8018cf6:	d004      	beq.n	8018d02 <HAL_ETH_GetRxData+0x52>
 8018cf8:	f240 512a 	movw	r1, #1322	@ 0x52a
 8018cfc:	480f      	ldr	r0, [pc, #60]	@ (8018d3c <HAL_ETH_GetRxData+0x8c>)
 8018cfe:	f7e8 fe1b 	bl	8001938 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	68db      	ldr	r3, [r3, #12]
 8018d06:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8018d0a:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	691b      	ldr	r3, [r3, #16]
 8018d10:	461a      	mov	r2, r3
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8018d16:	683b      	ldr	r3, [r7, #0]
 8018d18:	68ba      	ldr	r2, [r7, #8]
 8018d1a:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	695b      	ldr	r3, [r3, #20]
 8018d20:	68ba      	ldr	r2, [r7, #8]
 8018d22:	429a      	cmp	r2, r3
 8018d24:	d904      	bls.n	8018d30 <HAL_ETH_GetRxData+0x80>
 8018d26:	f240 5133 	movw	r1, #1331	@ 0x533
 8018d2a:	4804      	ldr	r0, [pc, #16]	@ (8018d3c <HAL_ETH_GetRxData+0x8c>)
 8018d2c:	f7e8 fe04 	bl	8001938 <vAssertCalled>

            return packet_length;
 8018d30:	68bb      	ldr	r3, [r7, #8]
        }
 8018d32:	4618      	mov	r0, r3
 8018d34:	3718      	adds	r7, #24
 8018d36:	46bd      	mov	sp, r7
 8018d38:	bd80      	pop	{r7, pc}
 8018d3a:	bf00      	nop
 8018d3c:	08027454 	.word	0x08027454

08018d40 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 8018d40:	b480      	push	{r7}
 8018d42:	b08b      	sub	sp, #44	@ 0x2c
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
 8018d48:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	3330      	adds	r3, #48	@ 0x30
 8018d4e:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8018d50:	68fb      	ldr	r3, [r7, #12]
 8018d52:	695b      	ldr	r3, [r3, #20]
 8018d54:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018d5e:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	699b      	ldr	r3, [r3, #24]
 8018d64:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8018d66:	68fb      	ldr	r3, [r7, #12]
 8018d68:	699b      	ldr	r3, [r3, #24]
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d101      	bne.n	8018d72 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 8018d6e:	2301      	movs	r3, #1
 8018d70:	e057      	b.n	8018e22 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	69db      	ldr	r3, [r3, #28]
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d002      	beq.n	8018d80 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 8018d7a:	69fb      	ldr	r3, [r7, #28]
 8018d7c:	3301      	adds	r3, #1
 8018d7e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018d80:	2300      	movs	r3, #0
 8018d82:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8018d84:	683b      	ldr	r3, [r7, #0]
 8018d86:	2b00      	cmp	r3, #0
 8018d88:	d005      	beq.n	8018d96 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 8018d8a:	683b      	ldr	r3, [r7, #0]
 8018d8c:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 8018d8e:	683a      	ldr	r2, [r7, #0]
 8018d90:	6a3b      	ldr	r3, [r7, #32]
 8018d92:	611a      	str	r2, [r3, #16]
 8018d94:	e002      	b.n	8018d9c <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8018d96:	6a3b      	ldr	r3, [r7, #32]
 8018d98:	691b      	ldr	r3, [r3, #16]
 8018d9a:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8018d9c:	693a      	ldr	r2, [r7, #16]
 8018d9e:	6a3b      	ldr	r3, [r7, #32]
 8018da0:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8018da2:	6a3b      	ldr	r3, [r7, #32]
 8018da4:	68db      	ldr	r3, [r3, #12]
 8018da6:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8018da8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018dac:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	6a1b      	ldr	r3, [r3, #32]
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	d003      	beq.n	8018dbe <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8018db6:	697b      	ldr	r3, [r7, #20]
 8018db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8018dbc:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 8018dbe:	697b      	ldr	r3, [r7, #20]
 8018dc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018dc4:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8018dc6:	6a3b      	ldr	r3, [r7, #32]
 8018dc8:	697a      	ldr	r2, [r7, #20]
 8018dca:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8018dcc:	f3bf 8f4f 	dsb	sy
}
 8018dd0:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8018dd2:	6a3b      	ldr	r3, [r7, #32]
 8018dd4:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8018dd6:	69fb      	ldr	r3, [r7, #28]
 8018dd8:	3b01      	subs	r3, #1
 8018dda:	69ba      	ldr	r2, [r7, #24]
 8018ddc:	429a      	cmp	r2, r3
 8018dde:	d211      	bcs.n	8018e04 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8018de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018de2:	3301      	adds	r3, #1
 8018de4:	627b      	str	r3, [r7, #36]	@ 0x24
 8018de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018de8:	2b03      	cmp	r3, #3
 8018dea:	d902      	bls.n	8018df2 <HAL_ETH_BuildRxDescriptors+0xb2>
 8018dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018dee:	3b04      	subs	r3, #4
 8018df0:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018dfa:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8018dfc:	69bb      	ldr	r3, [r7, #24]
 8018dfe:	3301      	adds	r3, #1
 8018e00:	61bb      	str	r3, [r7, #24]
            {
 8018e02:	e7bf      	b.n	8018d84 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8018e04:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	681a      	ldr	r2, [r3, #0]
 8018e0a:	6a3b      	ldr	r3, [r7, #32]
 8018e0c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018e10:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8018e14:	68fb      	ldr	r3, [r7, #12]
 8018e16:	2200      	movs	r2, #0
 8018e18:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	2200      	movs	r2, #0
 8018e1e:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 8018e20:	2300      	movs	r3, #0
        }
 8018e22:	4618      	mov	r0, r3
 8018e24:	372c      	adds	r7, #44	@ 0x2c
 8018e26:	46bd      	mov	sp, r7
 8018e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2c:	4770      	bx	lr
	...

08018e30 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b082      	sub	sp, #8
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	681b      	ldr	r3, [r3, #0]
 8018e3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e40:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018e48:	2b40      	cmp	r3, #64	@ 0x40
 8018e4a:	d115      	bne.n	8018e78 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e54:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018e5c:	2b40      	cmp	r3, #64	@ 0x40
 8018e5e:	d10b      	bne.n	8018e78 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018e60:	6878      	ldr	r0, [r7, #4]
 8018e62:	f7ff fafc 	bl	801845e <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018e66:	687b      	ldr	r3, [r7, #4]
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e6e:	461a      	mov	r2, r3
 8018e70:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018e74:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e80:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018e84:	f003 0301 	and.w	r3, r3, #1
 8018e88:	2b01      	cmp	r3, #1
 8018e8a:	d115      	bne.n	8018eb8 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e94:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018e98:	f003 0301 	and.w	r3, r3, #1
 8018e9c:	2b01      	cmp	r3, #1
 8018e9e:	d10b      	bne.n	8018eb8 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 8018ea0:	6878      	ldr	r0, [r7, #4]
 8018ea2:	f7ff fad1 	bl	8018448 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018eae:	461a      	mov	r2, r3
 8018eb0:	f248 0301 	movw	r3, #32769	@ 0x8001
 8018eb4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 8018eb8:	687b      	ldr	r3, [r7, #4]
 8018eba:	681b      	ldr	r3, [r3, #0]
 8018ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ec0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018ec8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018ecc:	d14f      	bne.n	8018f6e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	681b      	ldr	r3, [r3, #0]
 8018ed2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ed6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018eda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018ede:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018ee2:	d144      	bne.n	8018f6e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018ee8:	f043 0208 	orr.w	r2, r3, #8
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ef8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018efc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018f00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018f04:	d11d      	bne.n	8018f42 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8018f06:	687b      	ldr	r3, [r7, #4]
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018f0e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8018f12:	f241 1302 	movw	r3, #4354	@ 0x1102
 8018f16:	4013      	ands	r3, r2
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018f24:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018f28:	687a      	ldr	r2, [r7, #4]
 8018f2a:	6812      	ldr	r2, [r2, #0]
 8018f2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8018f30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018f34:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018f38:	21e0      	movs	r1, #224	@ 0xe0
 8018f3a:	6878      	ldr	r0, [r7, #4]
 8018f3c:	f7ff fbba 	bl	80186b4 <set_error_state>
 8018f40:	e012      	b.n	8018f68 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018f4a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018f4e:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	681b      	ldr	r3, [r3, #0]
 8018f5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018f5e:	461a      	mov	r2, r3
 8018f60:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018f64:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018f68:	6878      	ldr	r0, [r7, #4]
 8018f6a:	f7ff fa83 	bl	8018474 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 8018f6e:	687b      	ldr	r3, [r7, #4]
 8018f70:	681b      	ldr	r3, [r3, #0]
 8018f72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018f76:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 8018f7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8018f7e:	d10f      	bne.n	8018fa0 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018f8c:	21e0      	movs	r1, #224	@ 0xe0
 8018f8e:	6878      	ldr	r0, [r7, #4]
 8018f90:	f7ff fb90 	bl	80186b4 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 8018f94:	6878      	ldr	r0, [r7, #4]
 8018f96:	f000 f843 	bl	8019020 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	2200      	movs	r2, #0
 8018f9e:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018fa8:	f003 0310 	and.w	r3, r3, #16
 8018fac:	2b10      	cmp	r3, #16
 8018fae:	d10d      	bne.n	8018fcc <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	681b      	ldr	r3, [r3, #0]
 8018fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018fb8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018fbc:	687b      	ldr	r3, [r7, #4]
 8018fbe:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 8018fc0:	6878      	ldr	r0, [r7, #4]
 8018fc2:	f000 f837 	bl	8019034 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2200      	movs	r2, #0
 8018fca:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	681b      	ldr	r3, [r3, #0]
 8018fd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018fd4:	f003 0320 	and.w	r3, r3, #32
 8018fd8:	2b20      	cmp	r3, #32
 8018fda:	d10d      	bne.n	8018ff8 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018fe4:	f003 020f 	and.w	r2, r3, #15
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 8018fec:	6878      	ldr	r0, [r7, #4]
 8018fee:	f000 f82b 	bl	8019048 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8018ff2:	687b      	ldr	r3, [r7, #4]
 8018ff4:	2200      	movs	r2, #0
 8018ff6:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8018ff8:	4b08      	ldr	r3, [pc, #32]	@ (801901c <HAL_ETH_IRQHandler+0x1ec>)
 8018ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019000:	2b00      	cmp	r3, #0
 8019002:	d006      	beq.n	8019012 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8019004:	4b05      	ldr	r3, [pc, #20]	@ (801901c <HAL_ETH_IRQHandler+0x1ec>)
 8019006:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 801900a:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 801900c:	6878      	ldr	r0, [r7, #4]
 801900e:	f000 f825 	bl	801905c <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8019012:	bf00      	nop
 8019014:	3708      	adds	r7, #8
 8019016:	46bd      	mov	sp, r7
 8019018:	bd80      	pop	{r7, pc}
 801901a:	bf00      	nop
 801901c:	58000080 	.word	0x58000080

08019020 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8019020:	b480      	push	{r7}
 8019022:	b083      	sub	sp, #12
 8019024:	af00      	add	r7, sp, #0
 8019026:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8019028:	bf00      	nop
 801902a:	370c      	adds	r7, #12
 801902c:	46bd      	mov	sp, r7
 801902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019032:	4770      	bx	lr

08019034 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8019034:	b480      	push	{r7}
 8019036:	b083      	sub	sp, #12
 8019038:	af00      	add	r7, sp, #0
 801903a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 801903c:	bf00      	nop
 801903e:	370c      	adds	r7, #12
 8019040:	46bd      	mov	sp, r7
 8019042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019046:	4770      	bx	lr

08019048 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8019048:	b480      	push	{r7}
 801904a:	b083      	sub	sp, #12
 801904c:	af00      	add	r7, sp, #0
 801904e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8019050:	bf00      	nop
 8019052:	370c      	adds	r7, #12
 8019054:	46bd      	mov	sp, r7
 8019056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801905a:	4770      	bx	lr

0801905c <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 801905c:	b480      	push	{r7}
 801905e:	b083      	sub	sp, #12
 8019060:	af00      	add	r7, sp, #0
 8019062:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8019064:	bf00      	nop
 8019066:	370c      	adds	r7, #12
 8019068:	46bd      	mov	sp, r7
 801906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801906e:	4770      	bx	lr

08019070 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8019070:	b580      	push	{r7, lr}
 8019072:	b086      	sub	sp, #24
 8019074:	af00      	add	r7, sp, #0
 8019076:	60f8      	str	r0, [r7, #12]
 8019078:	60b9      	str	r1, [r7, #8]
 801907a:	607a      	str	r2, [r7, #4]
 801907c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 801907e:	68fb      	ldr	r3, [r7, #12]
 8019080:	681b      	ldr	r3, [r3, #0]
 8019082:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019086:	f003 0301 	and.w	r3, r3, #1
 801908a:	2b00      	cmp	r3, #0
 801908c:	d001      	beq.n	8019092 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 801908e:	2301      	movs	r3, #1
 8019090:	e03e      	b.n	8019110 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801909a:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 801909c:	697b      	ldr	r3, [r7, #20]
 801909e:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80190a2:	68bb      	ldr	r3, [r7, #8]
 80190a4:	055b      	lsls	r3, r3, #21
 80190a6:	4313      	orrs	r3, r2
 80190a8:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80190aa:	697b      	ldr	r3, [r7, #20]
 80190ac:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	041b      	lsls	r3, r3, #16
 80190b4:	4313      	orrs	r3, r2
 80190b6:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 80190b8:	697b      	ldr	r3, [r7, #20]
 80190ba:	f043 030c 	orr.w	r3, r3, #12
 80190be:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 80190c0:	697b      	ldr	r3, [r7, #20]
 80190c2:	f043 0301 	orr.w	r3, r3, #1
 80190c6:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	697a      	ldr	r2, [r7, #20]
 80190ce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 80190d2:	f000 ff01 	bl	8019ed8 <HAL_GetTick>
 80190d6:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80190d8:	e009      	b.n	80190ee <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80190da:	f000 fefd 	bl	8019ed8 <HAL_GetTick>
 80190de:	4602      	mov	r2, r0
 80190e0:	693b      	ldr	r3, [r7, #16]
 80190e2:	1ad3      	subs	r3, r2, r3
 80190e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80190e8:	d901      	bls.n	80190ee <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 80190ea:	2301      	movs	r3, #1
 80190ec:	e010      	b.n	8019110 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	681b      	ldr	r3, [r3, #0]
 80190f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80190f6:	f003 0301 	and.w	r3, r3, #1
 80190fa:	2b00      	cmp	r3, #0
 80190fc:	d1ed      	bne.n	80190da <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8019106:	b29b      	uxth	r3, r3
 8019108:	461a      	mov	r2, r3
 801910a:	683b      	ldr	r3, [r7, #0]
 801910c:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 801910e:	2300      	movs	r3, #0
        }
 8019110:	4618      	mov	r0, r3
 8019112:	3718      	adds	r7, #24
 8019114:	46bd      	mov	sp, r7
 8019116:	bd80      	pop	{r7, pc}

08019118 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8019118:	b580      	push	{r7, lr}
 801911a:	b086      	sub	sp, #24
 801911c:	af00      	add	r7, sp, #0
 801911e:	60f8      	str	r0, [r7, #12]
 8019120:	60b9      	str	r1, [r7, #8]
 8019122:	607a      	str	r2, [r7, #4]
 8019124:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801912e:	f003 0301 	and.w	r3, r3, #1
 8019132:	2b00      	cmp	r3, #0
 8019134:	d001      	beq.n	801913a <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8019136:	2301      	movs	r3, #1
 8019138:	e03c      	b.n	80191b4 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 801913a:	68fb      	ldr	r3, [r7, #12]
 801913c:	681b      	ldr	r3, [r3, #0]
 801913e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019142:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8019144:	697b      	ldr	r3, [r7, #20]
 8019146:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 801914a:	68bb      	ldr	r3, [r7, #8]
 801914c:	055b      	lsls	r3, r3, #21
 801914e:	4313      	orrs	r3, r2
 8019150:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8019152:	697b      	ldr	r3, [r7, #20]
 8019154:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	041b      	lsls	r3, r3, #16
 801915c:	4313      	orrs	r3, r2
 801915e:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8019160:	697b      	ldr	r3, [r7, #20]
 8019162:	f023 030c 	bic.w	r3, r3, #12
 8019166:	f043 0304 	orr.w	r3, r3, #4
 801916a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801916c:	697b      	ldr	r3, [r7, #20]
 801916e:	f043 0301 	orr.w	r3, r3, #1
 8019172:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8019174:	683b      	ldr	r3, [r7, #0]
 8019176:	b29a      	uxth	r2, r3
 8019178:	4b10      	ldr	r3, [pc, #64]	@ (80191bc <HAL_ETH_WritePHYRegister+0xa4>)
 801917a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 801917e:	4a0f      	ldr	r2, [pc, #60]	@ (80191bc <HAL_ETH_WritePHYRegister+0xa4>)
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8019186:	f000 fea7 	bl	8019ed8 <HAL_GetTick>
 801918a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801918c:	e009      	b.n	80191a2 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 801918e:	f000 fea3 	bl	8019ed8 <HAL_GetTick>
 8019192:	4602      	mov	r2, r0
 8019194:	693b      	ldr	r3, [r7, #16]
 8019196:	1ad3      	subs	r3, r2, r3
 8019198:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801919c:	d901      	bls.n	80191a2 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 801919e:	2301      	movs	r3, #1
 80191a0:	e008      	b.n	80191b4 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	681b      	ldr	r3, [r3, #0]
 80191a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80191aa:	f003 0301 	and.w	r3, r3, #1
 80191ae:	2b00      	cmp	r3, #0
 80191b0:	d1ed      	bne.n	801918e <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 80191b2:	2300      	movs	r3, #0
        }
 80191b4:	4618      	mov	r0, r3
 80191b6:	3718      	adds	r7, #24
 80191b8:	46bd      	mov	sp, r7
 80191ba:	bd80      	pop	{r7, pc}
 80191bc:	40028000 	.word	0x40028000

080191c0 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 80191c0:	b480      	push	{r7}
 80191c2:	b083      	sub	sp, #12
 80191c4:	af00      	add	r7, sp, #0
 80191c6:	6078      	str	r0, [r7, #4]
 80191c8:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 80191ca:	683b      	ldr	r3, [r7, #0]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d101      	bne.n	80191d4 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 80191d0:	2301      	movs	r3, #1
 80191d2:	e1c3      	b.n	801955c <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	f003 020c 	and.w	r2, r3, #12
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	f003 0310 	and.w	r3, r3, #16
 80191ec:	2b00      	cmp	r3, #0
 80191ee:	bf14      	ite	ne
 80191f0:	2301      	movne	r3, #1
 80191f2:	2300      	moveq	r3, #0
 80191f4:	b2db      	uxtb	r3, r3
 80191f6:	461a      	mov	r2, r3
 80191f8:	683b      	ldr	r3, [r7, #0]
 80191fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	681b      	ldr	r3, [r3, #0]
 8019204:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8019208:	683b      	ldr	r3, [r7, #0]
 801920a:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 801920c:	687b      	ldr	r3, [r7, #4]
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019216:	2b00      	cmp	r3, #0
 8019218:	bf0c      	ite	eq
 801921a:	2301      	moveq	r3, #1
 801921c:	2300      	movne	r3, #0
 801921e:	b2db      	uxtb	r3, r3
 8019220:	461a      	mov	r2, r3
 8019222:	683b      	ldr	r3, [r7, #0]
 8019224:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8019228:	687b      	ldr	r3, [r7, #4]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	681b      	ldr	r3, [r3, #0]
 801922e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8019232:	2b00      	cmp	r3, #0
 8019234:	bf14      	ite	ne
 8019236:	2301      	movne	r3, #1
 8019238:	2300      	moveq	r3, #0
 801923a:	b2db      	uxtb	r3, r3
 801923c:	461a      	mov	r2, r3
 801923e:	683b      	ldr	r3, [r7, #0]
 8019240:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	681b      	ldr	r3, [r3, #0]
 8019248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801924c:	2b00      	cmp	r3, #0
 801924e:	bf0c      	ite	eq
 8019250:	2301      	moveq	r3, #1
 8019252:	2300      	movne	r3, #0
 8019254:	b2db      	uxtb	r3, r3
 8019256:	461a      	mov	r2, r3
 8019258:	683b      	ldr	r3, [r7, #0]
 801925a:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019266:	2b00      	cmp	r3, #0
 8019268:	bf14      	ite	ne
 801926a:	2301      	movne	r3, #1
 801926c:	2300      	moveq	r3, #0
 801926e:	b2db      	uxtb	r3, r3
 8019270:	461a      	mov	r2, r3
 8019272:	683b      	ldr	r3, [r7, #0]
 8019274:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8019280:	2b00      	cmp	r3, #0
 8019282:	bf14      	ite	ne
 8019284:	2301      	movne	r3, #1
 8019286:	2300      	moveq	r3, #0
 8019288:	b2db      	uxtb	r3, r3
 801928a:	461a      	mov	r2, r3
 801928c:	683b      	ldr	r3, [r7, #0]
 801928e:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	681b      	ldr	r3, [r3, #0]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 801929a:	683b      	ldr	r3, [r7, #0]
 801929c:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	681b      	ldr	r3, [r3, #0]
 80192a4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80192a8:	683b      	ldr	r3, [r7, #0]
 80192aa:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 80192ac:	687b      	ldr	r3, [r7, #4]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	681b      	ldr	r3, [r3, #0]
 80192b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	bf14      	ite	ne
 80192ba:	2301      	movne	r3, #1
 80192bc:	2300      	moveq	r3, #0
 80192be:	b2db      	uxtb	r3, r3
 80192c0:	461a      	mov	r2, r3
 80192c2:	683b      	ldr	r3, [r7, #0]
 80192c4:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	bf0c      	ite	eq
 80192d4:	2301      	moveq	r3, #1
 80192d6:	2300      	movne	r3, #0
 80192d8:	b2db      	uxtb	r3, r3
 80192da:	461a      	mov	r2, r3
 80192dc:	683b      	ldr	r3, [r7, #0]
 80192de:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	681b      	ldr	r3, [r3, #0]
 80192e4:	681b      	ldr	r3, [r3, #0]
 80192e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80192ea:	2b00      	cmp	r3, #0
 80192ec:	bf0c      	ite	eq
 80192ee:	2301      	moveq	r3, #1
 80192f0:	2300      	movne	r3, #0
 80192f2:	b2db      	uxtb	r3, r3
 80192f4:	461a      	mov	r2, r3
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019304:	2b00      	cmp	r3, #0
 8019306:	bf14      	ite	ne
 8019308:	2301      	movne	r3, #1
 801930a:	2300      	moveq	r3, #0
 801930c:	b2db      	uxtb	r3, r3
 801930e:	461a      	mov	r2, r3
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801931e:	2b00      	cmp	r3, #0
 8019320:	bf14      	ite	ne
 8019322:	2301      	movne	r3, #1
 8019324:	2300      	moveq	r3, #0
 8019326:	b2db      	uxtb	r3, r3
 8019328:	461a      	mov	r2, r3
 801932a:	683b      	ldr	r3, [r7, #0]
 801932c:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	681b      	ldr	r3, [r3, #0]
 8019334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019338:	2b00      	cmp	r3, #0
 801933a:	bf14      	ite	ne
 801933c:	2301      	movne	r3, #1
 801933e:	2300      	moveq	r3, #0
 8019340:	b2db      	uxtb	r3, r3
 8019342:	461a      	mov	r2, r3
 8019344:	683b      	ldr	r3, [r7, #0]
 8019346:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	681b      	ldr	r3, [r3, #0]
 801934e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019352:	2b00      	cmp	r3, #0
 8019354:	bf14      	ite	ne
 8019356:	2301      	movne	r3, #1
 8019358:	2300      	moveq	r3, #0
 801935a:	b2db      	uxtb	r3, r3
 801935c:	461a      	mov	r2, r3
 801935e:	683b      	ldr	r3, [r7, #0]
 8019360:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 801936c:	683b      	ldr	r3, [r7, #0]
 801936e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801937a:	2b00      	cmp	r3, #0
 801937c:	bf14      	ite	ne
 801937e:	2301      	movne	r3, #1
 8019380:	2300      	moveq	r3, #0
 8019382:	b2db      	uxtb	r3, r3
 8019384:	461a      	mov	r2, r3
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	681b      	ldr	r3, [r3, #0]
 8019390:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8019394:	683b      	ldr	r3, [r7, #0]
 8019396:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	685b      	ldr	r3, [r3, #4]
 801939e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80193a2:	683b      	ldr	r3, [r7, #0]
 80193a4:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80193b0:	2b00      	cmp	r3, #0
 80193b2:	bf0c      	ite	eq
 80193b4:	2301      	moveq	r3, #1
 80193b6:	2300      	movne	r3, #0
 80193b8:	b2db      	uxtb	r3, r3
 80193ba:	461a      	mov	r2, r3
 80193bc:	683b      	ldr	r3, [r7, #0]
 80193be:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 80193c2:	687b      	ldr	r3, [r7, #4]
 80193c4:	681b      	ldr	r3, [r3, #0]
 80193c6:	685b      	ldr	r3, [r3, #4]
 80193c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	bf14      	ite	ne
 80193d0:	2301      	movne	r3, #1
 80193d2:	2300      	moveq	r3, #0
 80193d4:	b2db      	uxtb	r3, r3
 80193d6:	461a      	mov	r2, r3
 80193d8:	683b      	ldr	r3, [r7, #0]
 80193da:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	685b      	ldr	r3, [r3, #4]
 80193e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	bf14      	ite	ne
 80193ec:	2301      	movne	r3, #1
 80193ee:	2300      	moveq	r3, #0
 80193f0:	b2db      	uxtb	r3, r3
 80193f2:	461a      	mov	r2, r3
 80193f4:	683b      	ldr	r3, [r7, #0]
 80193f6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	685b      	ldr	r3, [r3, #4]
 8019400:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8019404:	2b00      	cmp	r3, #0
 8019406:	bf14      	ite	ne
 8019408:	2301      	movne	r3, #1
 801940a:	2300      	moveq	r3, #0
 801940c:	b2db      	uxtb	r3, r3
 801940e:	461a      	mov	r2, r3
 8019410:	683b      	ldr	r3, [r7, #0]
 8019412:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8019416:	687b      	ldr	r3, [r7, #4]
 8019418:	681b      	ldr	r3, [r3, #0]
 801941a:	685b      	ldr	r3, [r3, #4]
 801941c:	0e5b      	lsrs	r3, r3, #25
 801941e:	f003 021f 	and.w	r2, r3, #31
 8019422:	683b      	ldr	r3, [r7, #0]
 8019424:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8019426:	687b      	ldr	r3, [r7, #4]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	68db      	ldr	r3, [r3, #12]
 801942c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019430:	2b00      	cmp	r3, #0
 8019432:	bf14      	ite	ne
 8019434:	2301      	movne	r3, #1
 8019436:	2300      	moveq	r3, #0
 8019438:	b2db      	uxtb	r3, r3
 801943a:	461a      	mov	r2, r3
 801943c:	683b      	ldr	r3, [r7, #0]
 801943e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	68db      	ldr	r3, [r3, #12]
 8019448:	f003 020f 	and.w	r2, r3, #15
 801944c:	683b      	ldr	r3, [r7, #0]
 801944e:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019456:	f003 0302 	and.w	r3, r3, #2
 801945a:	2b00      	cmp	r3, #0
 801945c:	bf14      	ite	ne
 801945e:	2301      	movne	r3, #1
 8019460:	2300      	moveq	r3, #0
 8019462:	b2db      	uxtb	r3, r3
 8019464:	461a      	mov	r2, r3
 8019466:	683b      	ldr	r3, [r7, #0]
 8019468:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	681b      	ldr	r3, [r3, #0]
 8019470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019476:	2b00      	cmp	r3, #0
 8019478:	bf0c      	ite	eq
 801947a:	2301      	moveq	r3, #1
 801947c:	2300      	movne	r3, #0
 801947e:	b2db      	uxtb	r3, r3
 8019480:	461a      	mov	r2, r3
 8019482:	683b      	ldr	r3, [r7, #0]
 8019484:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801948e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8019492:	683b      	ldr	r3, [r7, #0]
 8019494:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801949c:	0c1b      	lsrs	r3, r3, #16
 801949e:	b29a      	uxth	r2, r3
 80194a0:	683b      	ldr	r3, [r7, #0]
 80194a2:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80194ac:	f003 0301 	and.w	r3, r3, #1
 80194b0:	2b00      	cmp	r3, #0
 80194b2:	bf14      	ite	ne
 80194b4:	2301      	movne	r3, #1
 80194b6:	2300      	moveq	r3, #0
 80194b8:	b2db      	uxtb	r3, r3
 80194ba:	461a      	mov	r2, r3
 80194bc:	683b      	ldr	r3, [r7, #0]
 80194be:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80194ca:	f003 0302 	and.w	r3, r3, #2
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	bf14      	ite	ne
 80194d2:	2301      	movne	r3, #1
 80194d4:	2300      	moveq	r3, #0
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	461a      	mov	r2, r3
 80194da:	683b      	ldr	r3, [r7, #0]
 80194dc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80194e8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80194ec:	683b      	ldr	r3, [r7, #0]
 80194ee:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 80194f0:	687b      	ldr	r3, [r7, #4]
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80194f8:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 80194fc:	683b      	ldr	r3, [r7, #0]
 80194fe:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019508:	f003 0308 	and.w	r3, r3, #8
 801950c:	2b00      	cmp	r3, #0
 801950e:	bf14      	ite	ne
 8019510:	2301      	movne	r3, #1
 8019512:	2300      	moveq	r3, #0
 8019514:	b2db      	uxtb	r3, r3
 8019516:	461a      	mov	r2, r3
 8019518:	683b      	ldr	r3, [r7, #0]
 801951a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019526:	f003 0310 	and.w	r3, r3, #16
 801952a:	2b00      	cmp	r3, #0
 801952c:	bf14      	ite	ne
 801952e:	2301      	movne	r3, #1
 8019530:	2300      	moveq	r3, #0
 8019532:	b2db      	uxtb	r3, r3
 8019534:	461a      	mov	r2, r3
 8019536:	683b      	ldr	r3, [r7, #0]
 8019538:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8019544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019548:	2b00      	cmp	r3, #0
 801954a:	bf0c      	ite	eq
 801954c:	2301      	moveq	r3, #1
 801954e:	2300      	movne	r3, #0
 8019550:	b2db      	uxtb	r3, r3
 8019552:	461a      	mov	r2, r3
 8019554:	683b      	ldr	r3, [r7, #0]
 8019556:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 801955a:	2300      	movs	r3, #0
        }
 801955c:	4618      	mov	r0, r3
 801955e:	370c      	adds	r7, #12
 8019560:	46bd      	mov	sp, r7
 8019562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019566:	4770      	bx	lr

08019568 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8019568:	b580      	push	{r7, lr}
 801956a:	b082      	sub	sp, #8
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
 8019570:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8019572:	683b      	ldr	r3, [r7, #0]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d101      	bne.n	801957c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8019578:	2301      	movs	r3, #1
 801957a:	e00a      	b.n	8019592 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 801957c:	687b      	ldr	r3, [r7, #4]
 801957e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019580:	2b10      	cmp	r3, #16
 8019582:	d105      	bne.n	8019590 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8019584:	6839      	ldr	r1, [r7, #0]
 8019586:	6878      	ldr	r0, [r7, #4]
 8019588:	f000 f808 	bl	801959c <ETH_SetMACConfig>

                return HAL_OK;
 801958c:	2300      	movs	r3, #0
 801958e:	e000      	b.n	8019592 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8019590:	2301      	movs	r3, #1
            }
        }
 8019592:	4618      	mov	r0, r3
 8019594:	3708      	adds	r7, #8
 8019596:	46bd      	mov	sp, r7
 8019598:	bd80      	pop	{r7, pc}
	...

0801959c <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 801959c:	b480      	push	{r7}
 801959e:	b085      	sub	sp, #20
 80195a0:	af00      	add	r7, sp, #0
 80195a2:	6078      	str	r0, [r7, #4]
 80195a4:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 80195a6:	683b      	ldr	r3, [r7, #0]
 80195a8:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 80195aa:	683b      	ldr	r3, [r7, #0]
 80195ac:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 80195ae:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	791b      	ldrb	r3, [r3, #4]
 80195b4:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 80195b6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80195b8:	683b      	ldr	r3, [r7, #0]
 80195ba:	7b1b      	ldrb	r3, [r3, #12]
 80195bc:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80195be:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80195c0:	683b      	ldr	r3, [r7, #0]
 80195c2:	7b5b      	ldrb	r3, [r3, #13]
 80195c4:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80195c6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	7b9b      	ldrb	r3, [r3, #14]
 80195cc:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80195ce:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80195d0:	683b      	ldr	r3, [r7, #0]
 80195d2:	7bdb      	ldrb	r3, [r3, #15]
 80195d4:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80195d6:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80195d8:	683a      	ldr	r2, [r7, #0]
 80195da:	7c12      	ldrb	r2, [r2, #16]
 80195dc:	2a00      	cmp	r2, #0
 80195de:	d102      	bne.n	80195e6 <ETH_SetMACConfig+0x4a>
 80195e0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80195e4:	e000      	b.n	80195e8 <ETH_SetMACConfig+0x4c>
 80195e6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80195e8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80195ea:	683a      	ldr	r2, [r7, #0]
 80195ec:	7c52      	ldrb	r2, [r2, #17]
 80195ee:	2a00      	cmp	r2, #0
 80195f0:	d102      	bne.n	80195f8 <ETH_SetMACConfig+0x5c>
 80195f2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80195f6:	e000      	b.n	80195fa <ETH_SetMACConfig+0x5e>
 80195f8:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80195fa:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 80195fc:	683b      	ldr	r3, [r7, #0]
 80195fe:	7c9b      	ldrb	r3, [r3, #18]
 8019600:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8019602:	431a      	orrs	r2, r3
                          macconf->Speed |
 8019604:	683b      	ldr	r3, [r7, #0]
 8019606:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8019608:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 801960a:	683b      	ldr	r3, [r7, #0]
 801960c:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 801960e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8019610:	683b      	ldr	r3, [r7, #0]
 8019612:	7f1b      	ldrb	r3, [r3, #28]
 8019614:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8019616:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019618:	683b      	ldr	r3, [r7, #0]
 801961a:	7f5b      	ldrb	r3, [r3, #29]
 801961c:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 801961e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019620:	683a      	ldr	r2, [r7, #0]
 8019622:	7f92      	ldrb	r2, [r2, #30]
 8019624:	2a00      	cmp	r2, #0
 8019626:	d102      	bne.n	801962e <ETH_SetMACConfig+0x92>
 8019628:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801962c:	e000      	b.n	8019630 <ETH_SetMACConfig+0x94>
 801962e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8019630:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8019632:	683b      	ldr	r3, [r7, #0]
 8019634:	7fdb      	ldrb	r3, [r3, #31]
 8019636:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8019638:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 801963a:	683a      	ldr	r2, [r7, #0]
 801963c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8019640:	2a00      	cmp	r2, #0
 8019642:	d102      	bne.n	801964a <ETH_SetMACConfig+0xae>
 8019644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019648:	e000      	b.n	801964c <ETH_SetMACConfig+0xb0>
 801964a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 801964c:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8019652:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8019654:	683b      	ldr	r3, [r7, #0]
 8019656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801965a:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 801965c:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 801965e:	683b      	ldr	r3, [r7, #0]
 8019660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8019662:	4313      	orrs	r3, r2
 8019664:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	681b      	ldr	r3, [r3, #0]
 801966a:	681a      	ldr	r2, [r3, #0]
 801966c:	4b56      	ldr	r3, [pc, #344]	@ (80197c8 <ETH_SetMACConfig+0x22c>)
 801966e:	4013      	ands	r3, r2
 8019670:	687a      	ldr	r2, [r7, #4]
 8019672:	6812      	ldr	r2, [r2, #0]
 8019674:	68f9      	ldr	r1, [r7, #12]
 8019676:	430b      	orrs	r3, r1
 8019678:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801967a:	683b      	ldr	r3, [r7, #0]
 801967c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801967e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019680:	683b      	ldr	r3, [r7, #0]
 8019682:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8019686:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8019688:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801968a:	683b      	ldr	r3, [r7, #0]
 801968c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019690:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8019692:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8019694:	683b      	ldr	r3, [r7, #0]
 8019696:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801969a:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801969c:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 801969e:	683a      	ldr	r2, [r7, #0]
 80196a0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80196a4:	2a00      	cmp	r2, #0
 80196a6:	d102      	bne.n	80196ae <ETH_SetMACConfig+0x112>
 80196a8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80196ac:	e000      	b.n	80196b0 <ETH_SetMACConfig+0x114>
 80196ae:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 80196b0:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 80196b2:	683b      	ldr	r3, [r7, #0]
 80196b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 80196b6:	4313      	orrs	r3, r2
 80196b8:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	681b      	ldr	r3, [r3, #0]
 80196be:	685a      	ldr	r2, [r3, #4]
 80196c0:	4b42      	ldr	r3, [pc, #264]	@ (80197cc <ETH_SetMACConfig+0x230>)
 80196c2:	4013      	ands	r3, r2
 80196c4:	687a      	ldr	r2, [r7, #4]
 80196c6:	6812      	ldr	r2, [r2, #0]
 80196c8:	68f9      	ldr	r1, [r7, #12]
 80196ca:	430b      	orrs	r3, r1
 80196cc:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80196d4:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 80196d6:	683b      	ldr	r3, [r7, #0]
 80196d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80196da:	4313      	orrs	r3, r2
 80196dc:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 80196de:	687b      	ldr	r3, [r7, #4]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	68da      	ldr	r2, [r3, #12]
 80196e4:	4b3a      	ldr	r3, [pc, #232]	@ (80197d0 <ETH_SetMACConfig+0x234>)
 80196e6:	4013      	ands	r3, r2
 80196e8:	687a      	ldr	r2, [r7, #4]
 80196ea:	6812      	ldr	r2, [r2, #0]
 80196ec:	68f9      	ldr	r1, [r7, #12]
 80196ee:	430b      	orrs	r3, r1
 80196f0:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80196f2:	683b      	ldr	r3, [r7, #0]
 80196f4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80196f8:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 80196fa:	683b      	ldr	r3, [r7, #0]
 80196fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 80196fe:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8019700:	683a      	ldr	r2, [r7, #0]
 8019702:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8019706:	2a00      	cmp	r2, #0
 8019708:	d101      	bne.n	801970e <ETH_SetMACConfig+0x172>
 801970a:	2280      	movs	r2, #128	@ 0x80
 801970c:	e000      	b.n	8019710 <ETH_SetMACConfig+0x174>
 801970e:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8019710:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8019712:	683b      	ldr	r3, [r7, #0]
 8019714:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019716:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8019718:	4313      	orrs	r3, r2
 801971a:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8019722:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8019726:	4013      	ands	r3, r2
 8019728:	687a      	ldr	r2, [r7, #4]
 801972a:	6812      	ldr	r2, [r2, #0]
 801972c:	68f9      	ldr	r1, [r7, #12]
 801972e:	430b      	orrs	r3, r1
 8019730:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019732:	683b      	ldr	r3, [r7, #0]
 8019734:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8019738:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 801973a:	683b      	ldr	r3, [r7, #0]
 801973c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8019740:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8019742:	4313      	orrs	r3, r2
 8019744:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801974e:	f023 0103 	bic.w	r1, r3, #3
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	681b      	ldr	r3, [r3, #0]
 8019756:	68fa      	ldr	r2, [r7, #12]
 8019758:	430a      	orrs	r2, r1
 801975a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801975e:	687b      	ldr	r3, [r7, #4]
 8019760:	681b      	ldr	r3, [r3, #0]
 8019762:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8019766:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801976a:	683b      	ldr	r3, [r7, #0]
 801976c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801976e:	687b      	ldr	r3, [r7, #4]
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	430a      	orrs	r2, r1
 8019774:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8019778:	683b      	ldr	r3, [r7, #0]
 801977a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801977c:	683a      	ldr	r2, [r7, #0]
 801977e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8019782:	2a00      	cmp	r2, #0
 8019784:	d101      	bne.n	801978a <ETH_SetMACConfig+0x1ee>
 8019786:	2240      	movs	r2, #64	@ 0x40
 8019788:	e000      	b.n	801978c <ETH_SetMACConfig+0x1f0>
 801978a:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801978c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801978e:	683b      	ldr	r3, [r7, #0]
 8019790:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8019794:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8019796:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8019798:	683b      	ldr	r3, [r7, #0]
 801979a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 801979e:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 80197a0:	4313      	orrs	r3, r2
 80197a2:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	681b      	ldr	r3, [r3, #0]
 80197a8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80197ac:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	681b      	ldr	r3, [r3, #0]
 80197b4:	68fa      	ldr	r2, [r7, #12]
 80197b6:	430a      	orrs	r2, r1
 80197b8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 80197bc:	bf00      	nop
 80197be:	3714      	adds	r7, #20
 80197c0:	46bd      	mov	sp, r7
 80197c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c6:	4770      	bx	lr
 80197c8:	00048083 	.word	0x00048083
 80197cc:	c0f88000 	.word	0xc0f88000
 80197d0:	fffffef0 	.word	0xfffffef0

080197d4 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 80197d4:	b480      	push	{r7}
 80197d6:	b085      	sub	sp, #20
 80197d8:	af00      	add	r7, sp, #0
 80197da:	6078      	str	r0, [r7, #4]
 80197dc:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	681b      	ldr	r3, [r3, #0]
 80197e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80197e6:	681a      	ldr	r2, [r3, #0]
 80197e8:	4b38      	ldr	r3, [pc, #224]	@ (80198cc <ETH_SetDMAConfig+0xf8>)
 80197ea:	4013      	ands	r3, r2
 80197ec:	683a      	ldr	r2, [r7, #0]
 80197ee:	6811      	ldr	r1, [r2, #0]
 80197f0:	687a      	ldr	r2, [r7, #4]
 80197f2:	6812      	ldr	r2, [r2, #0]
 80197f4:	430b      	orrs	r3, r1
 80197f6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80197fa:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 80197fc:	683b      	ldr	r3, [r7, #0]
 80197fe:	791b      	ldrb	r3, [r3, #4]
 8019800:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 8019802:	683b      	ldr	r3, [r7, #0]
 8019804:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8019806:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 8019808:	683b      	ldr	r3, [r7, #0]
 801980a:	7b1b      	ldrb	r3, [r3, #12]
 801980c:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 801980e:	4313      	orrs	r3, r2
 8019810:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801981a:	685a      	ldr	r2, [r3, #4]
 801981c:	4b2c      	ldr	r3, [pc, #176]	@ (80198d0 <ETH_SetDMAConfig+0xfc>)
 801981e:	4013      	ands	r3, r2
 8019820:	687a      	ldr	r2, [r7, #4]
 8019822:	6812      	ldr	r2, [r2, #0]
 8019824:	68f9      	ldr	r1, [r7, #12]
 8019826:	430b      	orrs	r3, r1
 8019828:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801982c:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 801982e:	683b      	ldr	r3, [r7, #0]
 8019830:	7b5b      	ldrb	r3, [r3, #13]
 8019832:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 8019834:	683b      	ldr	r3, [r7, #0]
 8019836:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8019838:	4313      	orrs	r3, r2
 801983a:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019844:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8019848:	4b22      	ldr	r3, [pc, #136]	@ (80198d4 <ETH_SetDMAConfig+0x100>)
 801984a:	4013      	ands	r3, r2
 801984c:	687a      	ldr	r2, [r7, #4]
 801984e:	6812      	ldr	r2, [r2, #0]
 8019850:	68f9      	ldr	r1, [r7, #12]
 8019852:	430b      	orrs	r3, r1
 8019854:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019858:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 801985c:	683b      	ldr	r3, [r7, #0]
 801985e:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	7d1b      	ldrb	r3, [r3, #20]
 8019864:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8019866:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	7f5b      	ldrb	r3, [r3, #29]
 801986c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 801986e:	4313      	orrs	r3, r2
 8019870:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801987a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 801987e:	4b16      	ldr	r3, [pc, #88]	@ (80198d8 <ETH_SetDMAConfig+0x104>)
 8019880:	4013      	ands	r3, r2
 8019882:	687a      	ldr	r2, [r7, #4]
 8019884:	6812      	ldr	r2, [r2, #0]
 8019886:	68f9      	ldr	r1, [r7, #12]
 8019888:	430b      	orrs	r3, r1
 801988a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801988e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8019892:	683b      	ldr	r3, [r7, #0]
 8019894:	7f1b      	ldrb	r3, [r3, #28]
 8019896:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8019898:	683b      	ldr	r3, [r7, #0]
 801989a:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 801989c:	4313      	orrs	r3, r2
 801989e:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	681b      	ldr	r3, [r3, #0]
 80198a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80198a8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80198ac:	4b0b      	ldr	r3, [pc, #44]	@ (80198dc <ETH_SetDMAConfig+0x108>)
 80198ae:	4013      	ands	r3, r2
 80198b0:	687a      	ldr	r2, [r7, #4]
 80198b2:	6812      	ldr	r2, [r2, #0]
 80198b4:	68f9      	ldr	r1, [r7, #12]
 80198b6:	430b      	orrs	r3, r1
 80198b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80198bc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 80198c0:	bf00      	nop
 80198c2:	3714      	adds	r7, #20
 80198c4:	46bd      	mov	sp, r7
 80198c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ca:	4770      	bx	lr
 80198cc:	ffff87fd 	.word	0xffff87fd
 80198d0:	ffff2ffe 	.word	0xffff2ffe
 80198d4:	fffec000 	.word	0xfffec000
 80198d8:	ffc0efef 	.word	0xffc0efef
 80198dc:	7fc0ffff 	.word	0x7fc0ffff

080198e0 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 80198e0:	b580      	push	{r7, lr}
 80198e2:	b0a4      	sub	sp, #144	@ 0x90
 80198e4:	af00      	add	r7, sp, #0
 80198e6:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80198e8:	2301      	movs	r3, #1
 80198ea:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80198ee:	2300      	movs	r3, #0
 80198f0:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80198f2:	2300      	movs	r3, #0
 80198f4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80198f8:	2300      	movs	r3, #0
 80198fa:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 80198fe:	2301      	movs	r3, #1
 8019900:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8019904:	2301      	movs	r3, #1
 8019906:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 801990a:	2301      	movs	r3, #1
 801990c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 8019910:	2300      	movs	r3, #0
 8019912:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8019916:	2301      	movs	r3, #1
 8019918:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801991c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8019920:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8019922:	2300      	movs	r3, #0
 8019924:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8019928:	2300      	movs	r3, #0
 801992a:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 801992c:	2300      	movs	r3, #0
 801992e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8019932:	2300      	movs	r3, #0
 8019934:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8019938:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 801993c:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 801993e:	2300      	movs	r3, #0
 8019940:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8019944:	2300      	movs	r3, #0
 8019946:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 8019948:	2301      	movs	r3, #1
 801994a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 801994e:	2300      	movs	r3, #0
 8019950:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8019954:	2300      	movs	r3, #0
 8019956:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 801995a:	2300      	movs	r3, #0
 801995c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 801995e:	2300      	movs	r3, #0
 8019960:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8019962:	2300      	movs	r3, #0
 8019964:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8019966:	2300      	movs	r3, #0
 8019968:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 801996c:	2300      	movs	r3, #0
 801996e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8019972:	2301      	movs	r3, #1
 8019974:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8019978:	2320      	movs	r3, #32
 801997a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 801997e:	2301      	movs	r3, #1
 8019980:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8019984:	2300      	movs	r3, #0
 8019986:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 801998a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 801998e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8019990:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019994:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8019996:	2300      	movs	r3, #0
 8019998:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 801999c:	2302      	movs	r3, #2
 801999e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 80199a2:	2300      	movs	r3, #0
 80199a4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80199a8:	2300      	movs	r3, #0
 80199aa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80199ae:	2300      	movs	r3, #0
 80199b0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 80199b4:	2301      	movs	r3, #1
 80199b6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 80199ba:	2300      	movs	r3, #0
 80199bc:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 80199be:	2301      	movs	r3, #1
 80199c0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 80199c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80199c8:	4619      	mov	r1, r3
 80199ca:	6878      	ldr	r0, [r7, #4]
 80199cc:	f7ff fde6 	bl	801959c <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80199d0:	2301      	movs	r3, #1
 80199d2:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80199d4:	2301      	movs	r3, #1
 80199d6:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80199d8:	2300      	movs	r3, #0
 80199da:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 80199dc:	2300      	movs	r3, #0
 80199de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 80199e2:	2300      	movs	r3, #0
 80199e4:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80199e6:	2300      	movs	r3, #0
 80199e8:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80199ea:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80199ee:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 80199f0:	2300      	movs	r3, #0
 80199f2:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80199f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80199f8:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 80199fa:	2300      	movs	r3, #0
 80199fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 8019a00:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8019a04:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8019a06:	f107 0308 	add.w	r3, r7, #8
 8019a0a:	4619      	mov	r1, r3
 8019a0c:	6878      	ldr	r0, [r7, #4]
 8019a0e:	f7ff fee1 	bl	80197d4 <ETH_SetDMAConfig>
        }
 8019a12:	bf00      	nop
 8019a14:	3790      	adds	r7, #144	@ 0x90
 8019a16:	46bd      	mov	sp, r7
 8019a18:	bd80      	pop	{r7, pc}
	...

08019a1c <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 8019a1c:	b580      	push	{r7, lr}
 8019a1e:	b084      	sub	sp, #16
 8019a20:	af00      	add	r7, sp, #0
 8019a22:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8019a2c:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8019a2e:	68fb      	ldr	r3, [r7, #12]
 8019a30:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8019a34:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8019a36:	f003 fdf1 	bl	801d61c <HAL_RCC_GetHCLKFreq>
 8019a3a:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8019a3c:	68bb      	ldr	r3, [r7, #8]
 8019a3e:	4a1e      	ldr	r2, [pc, #120]	@ (8019ab8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8019a40:	4293      	cmp	r3, r2
 8019a42:	d908      	bls.n	8019a56 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8019a44:	68bb      	ldr	r3, [r7, #8]
 8019a46:	4a1d      	ldr	r2, [pc, #116]	@ (8019abc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8019a48:	4293      	cmp	r3, r2
 8019a4a:	d804      	bhi.n	8019a56 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8019a4c:	68fb      	ldr	r3, [r7, #12]
 8019a4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019a52:	60fb      	str	r3, [r7, #12]
 8019a54:	e027      	b.n	8019aa6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8019a56:	68bb      	ldr	r3, [r7, #8]
 8019a58:	4a18      	ldr	r2, [pc, #96]	@ (8019abc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8019a5a:	4293      	cmp	r3, r2
 8019a5c:	d908      	bls.n	8019a70 <ETH_MAC_MDIO_ClkConfig+0x54>
 8019a5e:	68bb      	ldr	r3, [r7, #8]
 8019a60:	4a17      	ldr	r2, [pc, #92]	@ (8019ac0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019a62:	4293      	cmp	r3, r2
 8019a64:	d204      	bcs.n	8019a70 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8019a6c:	60fb      	str	r3, [r7, #12]
 8019a6e:	e01a      	b.n	8019aa6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8019a70:	68bb      	ldr	r3, [r7, #8]
 8019a72:	4a13      	ldr	r2, [pc, #76]	@ (8019ac0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019a74:	4293      	cmp	r3, r2
 8019a76:	d303      	bcc.n	8019a80 <ETH_MAC_MDIO_ClkConfig+0x64>
 8019a78:	68bb      	ldr	r3, [r7, #8]
 8019a7a:	4a12      	ldr	r2, [pc, #72]	@ (8019ac4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	d911      	bls.n	8019aa4 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8019a80:	68bb      	ldr	r3, [r7, #8]
 8019a82:	4a10      	ldr	r2, [pc, #64]	@ (8019ac4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8019a84:	4293      	cmp	r3, r2
 8019a86:	d908      	bls.n	8019a9a <ETH_MAC_MDIO_ClkConfig+0x7e>
 8019a88:	68bb      	ldr	r3, [r7, #8]
 8019a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8019ac8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8019a8c:	4293      	cmp	r3, r2
 8019a8e:	d804      	bhi.n	8019a9a <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8019a90:	68fb      	ldr	r3, [r7, #12]
 8019a92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8019a96:	60fb      	str	r3, [r7, #12]
 8019a98:	e005      	b.n	8019aa6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8019aa0:	60fb      	str	r3, [r7, #12]
 8019aa2:	e000      	b.n	8019aa6 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8019aa4:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	681b      	ldr	r3, [r3, #0]
 8019aaa:	68fa      	ldr	r2, [r7, #12]
 8019aac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 8019ab0:	bf00      	nop
 8019ab2:	3710      	adds	r7, #16
 8019ab4:	46bd      	mov	sp, r7
 8019ab6:	bd80      	pop	{r7, pc}
 8019ab8:	01312cff 	.word	0x01312cff
 8019abc:	02160ebf 	.word	0x02160ebf
 8019ac0:	03938700 	.word	0x03938700
 8019ac4:	05f5e0ff 	.word	0x05f5e0ff
 8019ac8:	08f0d17f 	.word	0x08f0d17f

08019acc <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019acc:	b480      	push	{r7}
 8019ace:	b085      	sub	sp, #20
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019ad4:	2300      	movs	r3, #0
 8019ad6:	60fb      	str	r3, [r7, #12]
 8019ad8:	e01d      	b.n	8019b16 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	68d9      	ldr	r1, [r3, #12]
 8019ade:	68fa      	ldr	r2, [r7, #12]
 8019ae0:	4613      	mov	r3, r2
 8019ae2:	005b      	lsls	r3, r3, #1
 8019ae4:	4413      	add	r3, r2
 8019ae6:	00db      	lsls	r3, r3, #3
 8019ae8:	440b      	add	r3, r1
 8019aea:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 8019aec:	68bb      	ldr	r3, [r7, #8]
 8019aee:	2200      	movs	r2, #0
 8019af0:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019af2:	68bb      	ldr	r3, [r7, #8]
 8019af4:	2200      	movs	r2, #0
 8019af6:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8019af8:	68bb      	ldr	r3, [r7, #8]
 8019afa:	2200      	movs	r2, #0
 8019afc:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 8019afe:	68bb      	ldr	r3, [r7, #8]
 8019b00:	2200      	movs	r2, #0
 8019b02:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 8019b04:	68b9      	ldr	r1, [r7, #8]
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	68fa      	ldr	r2, [r7, #12]
 8019b0a:	3206      	adds	r2, #6
 8019b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	3301      	adds	r3, #1
 8019b14:	60fb      	str	r3, [r7, #12]
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	2b03      	cmp	r3, #3
 8019b1a:	d9de      	bls.n	8019ada <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 8019b1c:	687b      	ldr	r3, [r7, #4]
 8019b1e:	2200      	movs	r2, #0
 8019b20:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	2200      	movs	r2, #0
 8019b26:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019b30:	461a      	mov	r2, r3
 8019b32:	2303      	movs	r3, #3
 8019b34:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8019b38:	687b      	ldr	r3, [r7, #4]
 8019b3a:	68da      	ldr	r2, [r3, #12]
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019b44:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	68da      	ldr	r2, [r3, #12]
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019b54:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 8019b58:	bf00      	nop
 8019b5a:	3714      	adds	r7, #20
 8019b5c:	46bd      	mov	sp, r7
 8019b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b62:	4770      	bx	lr

08019b64 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019b64:	b480      	push	{r7}
 8019b66:	b085      	sub	sp, #20
 8019b68:	af00      	add	r7, sp, #0
 8019b6a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8019b6c:	2300      	movs	r3, #0
 8019b6e:	60fb      	str	r3, [r7, #12]
 8019b70:	e023      	b.n	8019bba <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	6919      	ldr	r1, [r3, #16]
 8019b76:	68fa      	ldr	r2, [r7, #12]
 8019b78:	4613      	mov	r3, r2
 8019b7a:	005b      	lsls	r3, r3, #1
 8019b7c:	4413      	add	r3, r2
 8019b7e:	00db      	lsls	r3, r3, #3
 8019b80:	440b      	add	r3, r1
 8019b82:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	2200      	movs	r2, #0
 8019b88:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 8019b8a:	68bb      	ldr	r3, [r7, #8]
 8019b8c:	2200      	movs	r2, #0
 8019b8e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8019b90:	68bb      	ldr	r3, [r7, #8]
 8019b92:	2200      	movs	r2, #0
 8019b94:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8019b96:	68bb      	ldr	r3, [r7, #8]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 8019b9c:	68bb      	ldr	r3, [r7, #8]
 8019b9e:	2200      	movs	r2, #0
 8019ba0:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8019ba2:	68bb      	ldr	r3, [r7, #8]
 8019ba4:	2200      	movs	r2, #0
 8019ba6:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8019ba8:	68b9      	ldr	r1, [r7, #8]
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	68fa      	ldr	r2, [r7, #12]
 8019bae:	320c      	adds	r2, #12
 8019bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	3301      	adds	r3, #1
 8019bb8:	60fb      	str	r3, [r7, #12]
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	2b03      	cmp	r3, #3
 8019bbe:	d9d8      	bls.n	8019b72 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	2200      	movs	r2, #0
 8019bc4:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	2200      	movs	r2, #0
 8019bca:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2200      	movs	r2, #0
 8019bd0:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	2200      	movs	r2, #0
 8019bd6:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	2200      	movs	r2, #0
 8019bdc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019be6:	461a      	mov	r2, r3
 8019be8:	2303      	movs	r3, #3
 8019bea:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	691a      	ldr	r2, [r3, #16]
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	681b      	ldr	r3, [r3, #0]
 8019bf6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019bfa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	691b      	ldr	r3, [r3, #16]
 8019c02:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	681b      	ldr	r3, [r3, #0]
 8019c0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019c0e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 8019c12:	bf00      	nop
 8019c14:	3714      	adds	r7, #20
 8019c16:	46bd      	mov	sp, r7
 8019c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1c:	4770      	bx	lr
	...

08019c20 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 8019c20:	b580      	push	{r7, lr}
 8019c22:	b086      	sub	sp, #24
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019c2c:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019c2e:	e032      	b.n	8019c96 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	697a      	ldr	r2, [r7, #20]
 8019c34:	3206      	adds	r2, #6
 8019c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c3a:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 8019c3c:	693b      	ldr	r3, [r7, #16]
 8019c3e:	68db      	ldr	r3, [r3, #12]
 8019c40:	2b00      	cmp	r3, #0
 8019c42:	db31      	blt.n	8019ca8 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 8019c44:	693b      	ldr	r3, [r7, #16]
 8019c46:	681b      	ldr	r3, [r3, #0]
 8019c48:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d02d      	beq.n	8019cac <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8019c50:	68f8      	ldr	r0, [r7, #12]
 8019c52:	f7f0 fbd2 	bl	800a3fa <pxPacketBuffer_to_NetworkBuffer>
 8019c56:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 8019c58:	68bb      	ldr	r3, [r7, #8]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d002      	beq.n	8019c64 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8019c5e:	68b8      	ldr	r0, [r7, #8]
 8019c60:	f7fd faa2 	bl	80171a8 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8019c64:	693b      	ldr	r3, [r7, #16]
 8019c66:	2200      	movs	r2, #0
 8019c68:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 8019c6a:	697b      	ldr	r3, [r7, #20]
 8019c6c:	3301      	adds	r3, #1
 8019c6e:	617b      	str	r3, [r7, #20]
 8019c70:	697b      	ldr	r3, [r7, #20]
 8019c72:	2b03      	cmp	r3, #3
 8019c74:	d902      	bls.n	8019c7c <ETH_Clear_Tx_Descriptors+0x5c>
 8019c76:	697b      	ldr	r3, [r7, #20]
 8019c78:	3b04      	subs	r3, #4
 8019c7a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	697a      	ldr	r2, [r7, #20]
 8019c80:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8019c82:	f3bf 8f4f 	dsb	sy
}
 8019c86:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8019c88:	4b0b      	ldr	r3, [pc, #44]	@ (8019cb8 <ETH_Clear_Tx_Descriptors+0x98>)
 8019c8a:	6818      	ldr	r0, [r3, #0]
 8019c8c:	2300      	movs	r3, #0
 8019c8e:	2200      	movs	r2, #0
 8019c90:	2100      	movs	r1, #0
 8019c92:	f7e9 fd01 	bl	8003698 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8019c96:	4b08      	ldr	r3, [pc, #32]	@ (8019cb8 <ETH_Clear_Tx_Descriptors+0x98>)
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	f7e9 ffa2 	bl	8003be4 <uxQueueMessagesWaiting>
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	2b04      	cmp	r3, #4
 8019ca4:	d1c4      	bne.n	8019c30 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8019ca6:	e002      	b.n	8019cae <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8019ca8:	bf00      	nop
 8019caa:	e000      	b.n	8019cae <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 8019cac:	bf00      	nop
        }
 8019cae:	bf00      	nop
 8019cb0:	3718      	adds	r7, #24
 8019cb2:	46bd      	mov	sp, r7
 8019cb4:	bd80      	pop	{r7, pc}
 8019cb6:	bf00      	nop
 8019cb8:	200023ec 	.word	0x200023ec

08019cbc <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 8019cbc:	b480      	push	{r7}
 8019cbe:	b08b      	sub	sp, #44	@ 0x2c
 8019cc0:	af00      	add	r7, sp, #0
 8019cc2:	60f8      	str	r0, [r7, #12]
 8019cc4:	60b9      	str	r1, [r7, #8]
 8019cc6:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8019cc8:	68fb      	ldr	r3, [r7, #12]
 8019cca:	3318      	adds	r3, #24
 8019ccc:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8019cce:	6a3b      	ldr	r3, [r7, #32]
 8019cd0:	691b      	ldr	r3, [r3, #16]
 8019cd2:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 8019cd4:	6a3b      	ldr	r3, [r7, #32]
 8019cd6:	69fa      	ldr	r2, [r7, #28]
 8019cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019cdc:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 8019cde:	68bb      	ldr	r3, [r7, #8]
 8019ce0:	689b      	ldr	r3, [r3, #8]
 8019ce2:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 8019cea:	69bb      	ldr	r3, [r7, #24]
 8019cec:	68db      	ldr	r3, [r3, #12]
 8019cee:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 8019cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	da01      	bge.n	8019cfa <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 8019cf6:	2302      	movs	r3, #2
 8019cf8:	e05c      	b.n	8019db4 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 8019cfa:	697b      	ldr	r3, [r7, #20]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	461a      	mov	r2, r3
 8019d00:	69bb      	ldr	r3, [r7, #24]
 8019d02:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 8019d04:	69bb      	ldr	r3, [r7, #24]
 8019d06:	689a      	ldr	r2, [r3, #8]
 8019d08:	4b2d      	ldr	r3, [pc, #180]	@ (8019dc0 <ETH_Prepare_Tx_Descriptors+0x104>)
 8019d0a:	4013      	ands	r3, r2
 8019d0c:	697a      	ldr	r2, [r7, #20]
 8019d0e:	6852      	ldr	r2, [r2, #4]
 8019d10:	431a      	orrs	r2, r3
 8019d12:	69bb      	ldr	r3, [r7, #24]
 8019d14:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019d16:	69bb      	ldr	r3, [r7, #24]
 8019d18:	2200      	movs	r2, #0
 8019d1a:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 8019d1c:	69bb      	ldr	r3, [r7, #24]
 8019d1e:	689a      	ldr	r2, [r3, #8]
 8019d20:	4b28      	ldr	r3, [pc, #160]	@ (8019dc4 <ETH_Prepare_Tx_Descriptors+0x108>)
 8019d22:	4013      	ands	r3, r2
 8019d24:	69ba      	ldr	r2, [r7, #24]
 8019d26:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 8019d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019d2a:	4b27      	ldr	r3, [pc, #156]	@ (8019dc8 <ETH_Prepare_Tx_Descriptors+0x10c>)
 8019d2c:	4013      	ands	r3, r2
 8019d2e:	68ba      	ldr	r2, [r7, #8]
 8019d30:	6852      	ldr	r2, [r2, #4]
 8019d32:	4313      	orrs	r3, r2
 8019d34:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 8019d36:	68bb      	ldr	r3, [r7, #8]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	f003 0301 	and.w	r3, r3, #1
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	d006      	beq.n	8019d50 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8019d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d44:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8019d48:	68bb      	ldr	r3, [r7, #8]
 8019d4a:	695b      	ldr	r3, [r3, #20]
 8019d4c:	4313      	orrs	r3, r2
 8019d4e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8019d50:	68bb      	ldr	r3, [r7, #8]
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f003 0320 	and.w	r3, r3, #32
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d006      	beq.n	8019d6a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 8019d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d5e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019d62:	68bb      	ldr	r3, [r7, #8]
 8019d64:	691b      	ldr	r3, [r3, #16]
 8019d66:	4313      	orrs	r3, r2
 8019d68:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 8019d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d6c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8019d70:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8019d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d74:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8019d78:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 8019d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019d7c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8019d80:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d006      	beq.n	8019d96 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019d88:	69bb      	ldr	r3, [r7, #24]
 8019d8a:	689b      	ldr	r3, [r3, #8]
 8019d8c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8019d90:	69bb      	ldr	r3, [r7, #24]
 8019d92:	609a      	str	r2, [r3, #8]
 8019d94:	e005      	b.n	8019da2 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8019d96:	69bb      	ldr	r3, [r7, #24]
 8019d98:	689b      	ldr	r3, [r3, #8]
 8019d9a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8019d9e:	69bb      	ldr	r3, [r7, #24]
 8019da0:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8019da2:	69bb      	ldr	r3, [r7, #24]
 8019da4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8019da6:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8019da8:	69bb      	ldr	r3, [r7, #24]
 8019daa:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8019dac:	f3bf 8f4f 	dsb	sy
}
 8019db0:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8019db2:	2300      	movs	r3, #0
        }
 8019db4:	4618      	mov	r0, r3
 8019db6:	372c      	adds	r7, #44	@ 0x2c
 8019db8:	46bd      	mov	sp, r7
 8019dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dbe:	4770      	bx	lr
 8019dc0:	ffffc000 	.word	0xffffc000
 8019dc4:	c000ffff 	.word	0xc000ffff
 8019dc8:	ffff8000 	.word	0xffff8000

08019dcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8019dcc:	b580      	push	{r7, lr}
 8019dce:	b082      	sub	sp, #8
 8019dd0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8019dd2:	2003      	movs	r0, #3
 8019dd4:	f000 f9a0 	bl	801a118 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8019dd8:	f003 faa6 	bl	801d328 <HAL_RCC_GetSysClockFreq>
 8019ddc:	4602      	mov	r2, r0
 8019dde:	4b15      	ldr	r3, [pc, #84]	@ (8019e34 <HAL_Init+0x68>)
 8019de0:	699b      	ldr	r3, [r3, #24]
 8019de2:	0a1b      	lsrs	r3, r3, #8
 8019de4:	f003 030f 	and.w	r3, r3, #15
 8019de8:	4913      	ldr	r1, [pc, #76]	@ (8019e38 <HAL_Init+0x6c>)
 8019dea:	5ccb      	ldrb	r3, [r1, r3]
 8019dec:	f003 031f 	and.w	r3, r3, #31
 8019df0:	fa22 f303 	lsr.w	r3, r2, r3
 8019df4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8019df6:	4b0f      	ldr	r3, [pc, #60]	@ (8019e34 <HAL_Init+0x68>)
 8019df8:	699b      	ldr	r3, [r3, #24]
 8019dfa:	f003 030f 	and.w	r3, r3, #15
 8019dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8019e38 <HAL_Init+0x6c>)
 8019e00:	5cd3      	ldrb	r3, [r2, r3]
 8019e02:	f003 031f 	and.w	r3, r3, #31
 8019e06:	687a      	ldr	r2, [r7, #4]
 8019e08:	fa22 f303 	lsr.w	r3, r2, r3
 8019e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8019e3c <HAL_Init+0x70>)
 8019e0e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8019e10:	4a0b      	ldr	r2, [pc, #44]	@ (8019e40 <HAL_Init+0x74>)
 8019e12:	687b      	ldr	r3, [r7, #4]
 8019e14:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8019e16:	200f      	movs	r0, #15
 8019e18:	f000 f814 	bl	8019e44 <HAL_InitTick>
 8019e1c:	4603      	mov	r3, r0
 8019e1e:	2b00      	cmp	r3, #0
 8019e20:	d001      	beq.n	8019e26 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8019e22:	2301      	movs	r3, #1
 8019e24:	e002      	b.n	8019e2c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8019e26:	f7e8 f887 	bl	8001f38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8019e2a:	2300      	movs	r3, #0
}
 8019e2c:	4618      	mov	r0, r3
 8019e2e:	3708      	adds	r7, #8
 8019e30:	46bd      	mov	sp, r7
 8019e32:	bd80      	pop	{r7, pc}
 8019e34:	58024400 	.word	0x58024400
 8019e38:	0802755c 	.word	0x0802755c
 8019e3c:	20000004 	.word	0x20000004
 8019e40:	20000000 	.word	0x20000000

08019e44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019e44:	b580      	push	{r7, lr}
 8019e46:	b082      	sub	sp, #8
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8019e4c:	4b15      	ldr	r3, [pc, #84]	@ (8019ea4 <HAL_InitTick+0x60>)
 8019e4e:	781b      	ldrb	r3, [r3, #0]
 8019e50:	2b00      	cmp	r3, #0
 8019e52:	d101      	bne.n	8019e58 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8019e54:	2301      	movs	r3, #1
 8019e56:	e021      	b.n	8019e9c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8019e58:	4b13      	ldr	r3, [pc, #76]	@ (8019ea8 <HAL_InitTick+0x64>)
 8019e5a:	681a      	ldr	r2, [r3, #0]
 8019e5c:	4b11      	ldr	r3, [pc, #68]	@ (8019ea4 <HAL_InitTick+0x60>)
 8019e5e:	781b      	ldrb	r3, [r3, #0]
 8019e60:	4619      	mov	r1, r3
 8019e62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8019e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e6e:	4618      	mov	r0, r3
 8019e70:	f000 f985 	bl	801a17e <HAL_SYSTICK_Config>
 8019e74:	4603      	mov	r3, r0
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d001      	beq.n	8019e7e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8019e7a:	2301      	movs	r3, #1
 8019e7c:	e00e      	b.n	8019e9c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	2b0f      	cmp	r3, #15
 8019e82:	d80a      	bhi.n	8019e9a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019e84:	2200      	movs	r2, #0
 8019e86:	6879      	ldr	r1, [r7, #4]
 8019e88:	f04f 30ff 	mov.w	r0, #4294967295
 8019e8c:	f000 f94f 	bl	801a12e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8019e90:	4a06      	ldr	r2, [pc, #24]	@ (8019eac <HAL_InitTick+0x68>)
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019e96:	2300      	movs	r3, #0
 8019e98:	e000      	b.n	8019e9c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8019e9a:	2301      	movs	r3, #1
}
 8019e9c:	4618      	mov	r0, r3
 8019e9e:	3708      	adds	r7, #8
 8019ea0:	46bd      	mov	sp, r7
 8019ea2:	bd80      	pop	{r7, pc}
 8019ea4:	20000024 	.word	0x20000024
 8019ea8:	20000000 	.word	0x20000000
 8019eac:	20000020 	.word	0x20000020

08019eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8019eb0:	b480      	push	{r7}
 8019eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8019eb4:	4b06      	ldr	r3, [pc, #24]	@ (8019ed0 <HAL_IncTick+0x20>)
 8019eb6:	781b      	ldrb	r3, [r3, #0]
 8019eb8:	461a      	mov	r2, r3
 8019eba:	4b06      	ldr	r3, [pc, #24]	@ (8019ed4 <HAL_IncTick+0x24>)
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	4413      	add	r3, r2
 8019ec0:	4a04      	ldr	r2, [pc, #16]	@ (8019ed4 <HAL_IncTick+0x24>)
 8019ec2:	6013      	str	r3, [r2, #0]
}
 8019ec4:	bf00      	nop
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ecc:	4770      	bx	lr
 8019ece:	bf00      	nop
 8019ed0:	20000024 	.word	0x20000024
 8019ed4:	200024f8 	.word	0x200024f8

08019ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019ed8:	b480      	push	{r7}
 8019eda:	af00      	add	r7, sp, #0
  return uwTick;
 8019edc:	4b03      	ldr	r3, [pc, #12]	@ (8019eec <HAL_GetTick+0x14>)
 8019ede:	681b      	ldr	r3, [r3, #0]
}
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	46bd      	mov	sp, r7
 8019ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ee8:	4770      	bx	lr
 8019eea:	bf00      	nop
 8019eec:	200024f8 	.word	0x200024f8

08019ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b084      	sub	sp, #16
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019ef8:	f7ff ffee 	bl	8019ed8 <HAL_GetTick>
 8019efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019f02:	68fb      	ldr	r3, [r7, #12]
 8019f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f08:	d005      	beq.n	8019f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8019f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8019f34 <HAL_Delay+0x44>)
 8019f0c:	781b      	ldrb	r3, [r3, #0]
 8019f0e:	461a      	mov	r2, r3
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	4413      	add	r3, r2
 8019f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019f16:	bf00      	nop
 8019f18:	f7ff ffde 	bl	8019ed8 <HAL_GetTick>
 8019f1c:	4602      	mov	r2, r0
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	1ad3      	subs	r3, r2, r3
 8019f22:	68fa      	ldr	r2, [r7, #12]
 8019f24:	429a      	cmp	r2, r3
 8019f26:	d8f7      	bhi.n	8019f18 <HAL_Delay+0x28>
  {
  }
}
 8019f28:	bf00      	nop
 8019f2a:	bf00      	nop
 8019f2c:	3710      	adds	r7, #16
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bd80      	pop	{r7, pc}
 8019f32:	bf00      	nop
 8019f34:	20000024 	.word	0x20000024

08019f38 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8019f38:	b480      	push	{r7}
 8019f3a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8019f3c:	4b03      	ldr	r3, [pc, #12]	@ (8019f4c <HAL_GetREVID+0x14>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	0c1b      	lsrs	r3, r3, #16
}
 8019f42:	4618      	mov	r0, r3
 8019f44:	46bd      	mov	sp, r7
 8019f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f4a:	4770      	bx	lr
 8019f4c:	5c001000 	.word	0x5c001000

08019f50 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8019f50:	b480      	push	{r7}
 8019f52:	b083      	sub	sp, #12
 8019f54:	af00      	add	r7, sp, #0
 8019f56:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8019f58:	4b06      	ldr	r3, [pc, #24]	@ (8019f74 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019f5a:	685b      	ldr	r3, [r3, #4]
 8019f5c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8019f60:	4904      	ldr	r1, [pc, #16]	@ (8019f74 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	4313      	orrs	r3, r2
 8019f66:	604b      	str	r3, [r1, #4]
}
 8019f68:	bf00      	nop
 8019f6a:	370c      	adds	r7, #12
 8019f6c:	46bd      	mov	sp, r7
 8019f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f72:	4770      	bx	lr
 8019f74:	58000400 	.word	0x58000400

08019f78 <__NVIC_SetPriorityGrouping>:
{
 8019f78:	b480      	push	{r7}
 8019f7a:	b085      	sub	sp, #20
 8019f7c:	af00      	add	r7, sp, #0
 8019f7e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	f003 0307 	and.w	r3, r3, #7
 8019f86:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019f88:	4b0b      	ldr	r3, [pc, #44]	@ (8019fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8019f8a:	68db      	ldr	r3, [r3, #12]
 8019f8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019f8e:	68ba      	ldr	r2, [r7, #8]
 8019f90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8019f94:	4013      	ands	r3, r2
 8019f96:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019f98:	68fb      	ldr	r3, [r7, #12]
 8019f9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019fa0:	4b06      	ldr	r3, [pc, #24]	@ (8019fbc <__NVIC_SetPriorityGrouping+0x44>)
 8019fa2:	4313      	orrs	r3, r2
 8019fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019fa6:	4a04      	ldr	r2, [pc, #16]	@ (8019fb8 <__NVIC_SetPriorityGrouping+0x40>)
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	60d3      	str	r3, [r2, #12]
}
 8019fac:	bf00      	nop
 8019fae:	3714      	adds	r7, #20
 8019fb0:	46bd      	mov	sp, r7
 8019fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fb6:	4770      	bx	lr
 8019fb8:	e000ed00 	.word	0xe000ed00
 8019fbc:	05fa0000 	.word	0x05fa0000

08019fc0 <__NVIC_GetPriorityGrouping>:
{
 8019fc0:	b480      	push	{r7}
 8019fc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019fc4:	4b04      	ldr	r3, [pc, #16]	@ (8019fd8 <__NVIC_GetPriorityGrouping+0x18>)
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	0a1b      	lsrs	r3, r3, #8
 8019fca:	f003 0307 	and.w	r3, r3, #7
}
 8019fce:	4618      	mov	r0, r3
 8019fd0:	46bd      	mov	sp, r7
 8019fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fd6:	4770      	bx	lr
 8019fd8:	e000ed00 	.word	0xe000ed00

08019fdc <__NVIC_EnableIRQ>:
{
 8019fdc:	b480      	push	{r7}
 8019fde:	b083      	sub	sp, #12
 8019fe0:	af00      	add	r7, sp, #0
 8019fe2:	4603      	mov	r3, r0
 8019fe4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019fe6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	db0b      	blt.n	801a006 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019fee:	88fb      	ldrh	r3, [r7, #6]
 8019ff0:	f003 021f 	and.w	r2, r3, #31
 8019ff4:	4907      	ldr	r1, [pc, #28]	@ (801a014 <__NVIC_EnableIRQ+0x38>)
 8019ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019ffa:	095b      	lsrs	r3, r3, #5
 8019ffc:	2001      	movs	r0, #1
 8019ffe:	fa00 f202 	lsl.w	r2, r0, r2
 801a002:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801a006:	bf00      	nop
 801a008:	370c      	adds	r7, #12
 801a00a:	46bd      	mov	sp, r7
 801a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a010:	4770      	bx	lr
 801a012:	bf00      	nop
 801a014:	e000e100 	.word	0xe000e100

0801a018 <__NVIC_SetPriority>:
{
 801a018:	b480      	push	{r7}
 801a01a:	b083      	sub	sp, #12
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	4603      	mov	r3, r0
 801a020:	6039      	str	r1, [r7, #0]
 801a022:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801a024:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	db0a      	blt.n	801a042 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a02c:	683b      	ldr	r3, [r7, #0]
 801a02e:	b2da      	uxtb	r2, r3
 801a030:	490c      	ldr	r1, [pc, #48]	@ (801a064 <__NVIC_SetPriority+0x4c>)
 801a032:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a036:	0112      	lsls	r2, r2, #4
 801a038:	b2d2      	uxtb	r2, r2
 801a03a:	440b      	add	r3, r1
 801a03c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801a040:	e00a      	b.n	801a058 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801a042:	683b      	ldr	r3, [r7, #0]
 801a044:	b2da      	uxtb	r2, r3
 801a046:	4908      	ldr	r1, [pc, #32]	@ (801a068 <__NVIC_SetPriority+0x50>)
 801a048:	88fb      	ldrh	r3, [r7, #6]
 801a04a:	f003 030f 	and.w	r3, r3, #15
 801a04e:	3b04      	subs	r3, #4
 801a050:	0112      	lsls	r2, r2, #4
 801a052:	b2d2      	uxtb	r2, r2
 801a054:	440b      	add	r3, r1
 801a056:	761a      	strb	r2, [r3, #24]
}
 801a058:	bf00      	nop
 801a05a:	370c      	adds	r7, #12
 801a05c:	46bd      	mov	sp, r7
 801a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a062:	4770      	bx	lr
 801a064:	e000e100 	.word	0xe000e100
 801a068:	e000ed00 	.word	0xe000ed00

0801a06c <NVIC_EncodePriority>:
{
 801a06c:	b480      	push	{r7}
 801a06e:	b089      	sub	sp, #36	@ 0x24
 801a070:	af00      	add	r7, sp, #0
 801a072:	60f8      	str	r0, [r7, #12]
 801a074:	60b9      	str	r1, [r7, #8]
 801a076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801a078:	68fb      	ldr	r3, [r7, #12]
 801a07a:	f003 0307 	and.w	r3, r3, #7
 801a07e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801a080:	69fb      	ldr	r3, [r7, #28]
 801a082:	f1c3 0307 	rsb	r3, r3, #7
 801a086:	2b04      	cmp	r3, #4
 801a088:	bf28      	it	cs
 801a08a:	2304      	movcs	r3, #4
 801a08c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801a08e:	69fb      	ldr	r3, [r7, #28]
 801a090:	3304      	adds	r3, #4
 801a092:	2b06      	cmp	r3, #6
 801a094:	d902      	bls.n	801a09c <NVIC_EncodePriority+0x30>
 801a096:	69fb      	ldr	r3, [r7, #28]
 801a098:	3b03      	subs	r3, #3
 801a09a:	e000      	b.n	801a09e <NVIC_EncodePriority+0x32>
 801a09c:	2300      	movs	r3, #0
 801a09e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a0a0:	f04f 32ff 	mov.w	r2, #4294967295
 801a0a4:	69bb      	ldr	r3, [r7, #24]
 801a0a6:	fa02 f303 	lsl.w	r3, r2, r3
 801a0aa:	43da      	mvns	r2, r3
 801a0ac:	68bb      	ldr	r3, [r7, #8]
 801a0ae:	401a      	ands	r2, r3
 801a0b0:	697b      	ldr	r3, [r7, #20]
 801a0b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801a0b4:	f04f 31ff 	mov.w	r1, #4294967295
 801a0b8:	697b      	ldr	r3, [r7, #20]
 801a0ba:	fa01 f303 	lsl.w	r3, r1, r3
 801a0be:	43d9      	mvns	r1, r3
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801a0c4:	4313      	orrs	r3, r2
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	3724      	adds	r7, #36	@ 0x24
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d0:	4770      	bx	lr
	...

0801a0d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b082      	sub	sp, #8
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	3b01      	subs	r3, #1
 801a0e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801a0e4:	d301      	bcc.n	801a0ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801a0e6:	2301      	movs	r3, #1
 801a0e8:	e00f      	b.n	801a10a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801a0ea:	4a0a      	ldr	r2, [pc, #40]	@ (801a114 <SysTick_Config+0x40>)
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	3b01      	subs	r3, #1
 801a0f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801a0f2:	210f      	movs	r1, #15
 801a0f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a0f8:	f7ff ff8e 	bl	801a018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801a0fc:	4b05      	ldr	r3, [pc, #20]	@ (801a114 <SysTick_Config+0x40>)
 801a0fe:	2200      	movs	r2, #0
 801a100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801a102:	4b04      	ldr	r3, [pc, #16]	@ (801a114 <SysTick_Config+0x40>)
 801a104:	2207      	movs	r2, #7
 801a106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 801a108:	2300      	movs	r3, #0
}
 801a10a:	4618      	mov	r0, r3
 801a10c:	3708      	adds	r7, #8
 801a10e:	46bd      	mov	sp, r7
 801a110:	bd80      	pop	{r7, pc}
 801a112:	bf00      	nop
 801a114:	e000e010 	.word	0xe000e010

0801a118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 801a118:	b580      	push	{r7, lr}
 801a11a:	b082      	sub	sp, #8
 801a11c:	af00      	add	r7, sp, #0
 801a11e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801a120:	6878      	ldr	r0, [r7, #4]
 801a122:	f7ff ff29 	bl	8019f78 <__NVIC_SetPriorityGrouping>
}
 801a126:	bf00      	nop
 801a128:	3708      	adds	r7, #8
 801a12a:	46bd      	mov	sp, r7
 801a12c:	bd80      	pop	{r7, pc}

0801a12e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801a12e:	b580      	push	{r7, lr}
 801a130:	b086      	sub	sp, #24
 801a132:	af00      	add	r7, sp, #0
 801a134:	4603      	mov	r3, r0
 801a136:	60b9      	str	r1, [r7, #8]
 801a138:	607a      	str	r2, [r7, #4]
 801a13a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801a13c:	f7ff ff40 	bl	8019fc0 <__NVIC_GetPriorityGrouping>
 801a140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801a142:	687a      	ldr	r2, [r7, #4]
 801a144:	68b9      	ldr	r1, [r7, #8]
 801a146:	6978      	ldr	r0, [r7, #20]
 801a148:	f7ff ff90 	bl	801a06c <NVIC_EncodePriority>
 801a14c:	4602      	mov	r2, r0
 801a14e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801a152:	4611      	mov	r1, r2
 801a154:	4618      	mov	r0, r3
 801a156:	f7ff ff5f 	bl	801a018 <__NVIC_SetPriority>
}
 801a15a:	bf00      	nop
 801a15c:	3718      	adds	r7, #24
 801a15e:	46bd      	mov	sp, r7
 801a160:	bd80      	pop	{r7, pc}

0801a162 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801a162:	b580      	push	{r7, lr}
 801a164:	b082      	sub	sp, #8
 801a166:	af00      	add	r7, sp, #0
 801a168:	4603      	mov	r3, r0
 801a16a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801a16c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801a170:	4618      	mov	r0, r3
 801a172:	f7ff ff33 	bl	8019fdc <__NVIC_EnableIRQ>
}
 801a176:	bf00      	nop
 801a178:	3708      	adds	r7, #8
 801a17a:	46bd      	mov	sp, r7
 801a17c:	bd80      	pop	{r7, pc}

0801a17e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801a17e:	b580      	push	{r7, lr}
 801a180:	b082      	sub	sp, #8
 801a182:	af00      	add	r7, sp, #0
 801a184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801a186:	6878      	ldr	r0, [r7, #4]
 801a188:	f7ff ffa4 	bl	801a0d4 <SysTick_Config>
 801a18c:	4603      	mov	r3, r0
}
 801a18e:	4618      	mov	r0, r3
 801a190:	3708      	adds	r7, #8
 801a192:	46bd      	mov	sp, r7
 801a194:	bd80      	pop	{r7, pc}
	...

0801a198 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 801a198:	b480      	push	{r7}
 801a19a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 801a19c:	f3bf 8f5f 	dmb	sy
}
 801a1a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801a1a2:	4b07      	ldr	r3, [pc, #28]	@ (801a1c0 <HAL_MPU_Disable+0x28>)
 801a1a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1a6:	4a06      	ldr	r2, [pc, #24]	@ (801a1c0 <HAL_MPU_Disable+0x28>)
 801a1a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a1ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801a1ae:	4b05      	ldr	r3, [pc, #20]	@ (801a1c4 <HAL_MPU_Disable+0x2c>)
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	605a      	str	r2, [r3, #4]
}
 801a1b4:	bf00      	nop
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1bc:	4770      	bx	lr
 801a1be:	bf00      	nop
 801a1c0:	e000ed00 	.word	0xe000ed00
 801a1c4:	e000ed90 	.word	0xe000ed90

0801a1c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801a1c8:	b480      	push	{r7}
 801a1ca:	b083      	sub	sp, #12
 801a1cc:	af00      	add	r7, sp, #0
 801a1ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801a1d0:	4a0b      	ldr	r2, [pc, #44]	@ (801a200 <HAL_MPU_Enable+0x38>)
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	f043 0301 	orr.w	r3, r3, #1
 801a1d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801a1da:	4b0a      	ldr	r3, [pc, #40]	@ (801a204 <HAL_MPU_Enable+0x3c>)
 801a1dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1de:	4a09      	ldr	r2, [pc, #36]	@ (801a204 <HAL_MPU_Enable+0x3c>)
 801a1e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a1e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801a1e6:	f3bf 8f4f 	dsb	sy
}
 801a1ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a1ec:	f3bf 8f6f 	isb	sy
}
 801a1f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801a1f2:	bf00      	nop
 801a1f4:	370c      	adds	r7, #12
 801a1f6:	46bd      	mov	sp, r7
 801a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1fc:	4770      	bx	lr
 801a1fe:	bf00      	nop
 801a200:	e000ed90 	.word	0xe000ed90
 801a204:	e000ed00 	.word	0xe000ed00

0801a208 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801a208:	b480      	push	{r7}
 801a20a:	b083      	sub	sp, #12
 801a20c:	af00      	add	r7, sp, #0
 801a20e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801a210:	687b      	ldr	r3, [r7, #4]
 801a212:	785a      	ldrb	r2, [r3, #1]
 801a214:	4b1b      	ldr	r3, [pc, #108]	@ (801a284 <HAL_MPU_ConfigRegion+0x7c>)
 801a216:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 801a218:	4b1a      	ldr	r3, [pc, #104]	@ (801a284 <HAL_MPU_ConfigRegion+0x7c>)
 801a21a:	691b      	ldr	r3, [r3, #16]
 801a21c:	4a19      	ldr	r2, [pc, #100]	@ (801a284 <HAL_MPU_ConfigRegion+0x7c>)
 801a21e:	f023 0301 	bic.w	r3, r3, #1
 801a222:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 801a224:	4a17      	ldr	r2, [pc, #92]	@ (801a284 <HAL_MPU_ConfigRegion+0x7c>)
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	685b      	ldr	r3, [r3, #4]
 801a22a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	7b1b      	ldrb	r3, [r3, #12]
 801a230:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	7adb      	ldrb	r3, [r3, #11]
 801a236:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a238:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	7a9b      	ldrb	r3, [r3, #10]
 801a23e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a240:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	7b5b      	ldrb	r3, [r3, #13]
 801a246:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a248:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	7b9b      	ldrb	r3, [r3, #14]
 801a24e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a250:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	7bdb      	ldrb	r3, [r3, #15]
 801a256:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a258:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	7a5b      	ldrb	r3, [r3, #9]
 801a25e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a260:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	7a1b      	ldrb	r3, [r3, #8]
 801a266:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a268:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801a26a:	687a      	ldr	r2, [r7, #4]
 801a26c:	7812      	ldrb	r2, [r2, #0]
 801a26e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a270:	4a04      	ldr	r2, [pc, #16]	@ (801a284 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a272:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a274:	6113      	str	r3, [r2, #16]
}
 801a276:	bf00      	nop
 801a278:	370c      	adds	r7, #12
 801a27a:	46bd      	mov	sp, r7
 801a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a280:	4770      	bx	lr
 801a282:	bf00      	nop
 801a284:	e000ed90 	.word	0xe000ed90

0801a288 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 801a288:	b580      	push	{r7, lr}
 801a28a:	b086      	sub	sp, #24
 801a28c:	af00      	add	r7, sp, #0
 801a28e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801a290:	f7ff fe22 	bl	8019ed8 <HAL_GetTick>
 801a294:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	2b00      	cmp	r3, #0
 801a29a:	d101      	bne.n	801a2a0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 801a29c:	2301      	movs	r3, #1
 801a29e:	e316      	b.n	801a8ce <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	4a66      	ldr	r2, [pc, #408]	@ (801a440 <HAL_DMA_Init+0x1b8>)
 801a2a6:	4293      	cmp	r3, r2
 801a2a8:	d04a      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	681b      	ldr	r3, [r3, #0]
 801a2ae:	4a65      	ldr	r2, [pc, #404]	@ (801a444 <HAL_DMA_Init+0x1bc>)
 801a2b0:	4293      	cmp	r3, r2
 801a2b2:	d045      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	4a63      	ldr	r2, [pc, #396]	@ (801a448 <HAL_DMA_Init+0x1c0>)
 801a2ba:	4293      	cmp	r3, r2
 801a2bc:	d040      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	681b      	ldr	r3, [r3, #0]
 801a2c2:	4a62      	ldr	r2, [pc, #392]	@ (801a44c <HAL_DMA_Init+0x1c4>)
 801a2c4:	4293      	cmp	r3, r2
 801a2c6:	d03b      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	681b      	ldr	r3, [r3, #0]
 801a2cc:	4a60      	ldr	r2, [pc, #384]	@ (801a450 <HAL_DMA_Init+0x1c8>)
 801a2ce:	4293      	cmp	r3, r2
 801a2d0:	d036      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	681b      	ldr	r3, [r3, #0]
 801a2d6:	4a5f      	ldr	r2, [pc, #380]	@ (801a454 <HAL_DMA_Init+0x1cc>)
 801a2d8:	4293      	cmp	r3, r2
 801a2da:	d031      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	4a5d      	ldr	r2, [pc, #372]	@ (801a458 <HAL_DMA_Init+0x1d0>)
 801a2e2:	4293      	cmp	r3, r2
 801a2e4:	d02c      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	4a5c      	ldr	r2, [pc, #368]	@ (801a45c <HAL_DMA_Init+0x1d4>)
 801a2ec:	4293      	cmp	r3, r2
 801a2ee:	d027      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	681b      	ldr	r3, [r3, #0]
 801a2f4:	4a5a      	ldr	r2, [pc, #360]	@ (801a460 <HAL_DMA_Init+0x1d8>)
 801a2f6:	4293      	cmp	r3, r2
 801a2f8:	d022      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	4a59      	ldr	r2, [pc, #356]	@ (801a464 <HAL_DMA_Init+0x1dc>)
 801a300:	4293      	cmp	r3, r2
 801a302:	d01d      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a304:	687b      	ldr	r3, [r7, #4]
 801a306:	681b      	ldr	r3, [r3, #0]
 801a308:	4a57      	ldr	r2, [pc, #348]	@ (801a468 <HAL_DMA_Init+0x1e0>)
 801a30a:	4293      	cmp	r3, r2
 801a30c:	d018      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	4a56      	ldr	r2, [pc, #344]	@ (801a46c <HAL_DMA_Init+0x1e4>)
 801a314:	4293      	cmp	r3, r2
 801a316:	d013      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	681b      	ldr	r3, [r3, #0]
 801a31c:	4a54      	ldr	r2, [pc, #336]	@ (801a470 <HAL_DMA_Init+0x1e8>)
 801a31e:	4293      	cmp	r3, r2
 801a320:	d00e      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	4a53      	ldr	r2, [pc, #332]	@ (801a474 <HAL_DMA_Init+0x1ec>)
 801a328:	4293      	cmp	r3, r2
 801a32a:	d009      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	681b      	ldr	r3, [r3, #0]
 801a330:	4a51      	ldr	r2, [pc, #324]	@ (801a478 <HAL_DMA_Init+0x1f0>)
 801a332:	4293      	cmp	r3, r2
 801a334:	d004      	beq.n	801a340 <HAL_DMA_Init+0xb8>
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	4a50      	ldr	r2, [pc, #320]	@ (801a47c <HAL_DMA_Init+0x1f4>)
 801a33c:	4293      	cmp	r3, r2
 801a33e:	d101      	bne.n	801a344 <HAL_DMA_Init+0xbc>
 801a340:	2301      	movs	r3, #1
 801a342:	e000      	b.n	801a346 <HAL_DMA_Init+0xbe>
 801a344:	2300      	movs	r3, #0
 801a346:	2b00      	cmp	r3, #0
 801a348:	f000 813b 	beq.w	801a5c2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	2202      	movs	r2, #2
 801a350:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	2200      	movs	r2, #0
 801a358:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	4a37      	ldr	r2, [pc, #220]	@ (801a440 <HAL_DMA_Init+0x1b8>)
 801a362:	4293      	cmp	r3, r2
 801a364:	d04a      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a366:	687b      	ldr	r3, [r7, #4]
 801a368:	681b      	ldr	r3, [r3, #0]
 801a36a:	4a36      	ldr	r2, [pc, #216]	@ (801a444 <HAL_DMA_Init+0x1bc>)
 801a36c:	4293      	cmp	r3, r2
 801a36e:	d045      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	681b      	ldr	r3, [r3, #0]
 801a374:	4a34      	ldr	r2, [pc, #208]	@ (801a448 <HAL_DMA_Init+0x1c0>)
 801a376:	4293      	cmp	r3, r2
 801a378:	d040      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	4a33      	ldr	r2, [pc, #204]	@ (801a44c <HAL_DMA_Init+0x1c4>)
 801a380:	4293      	cmp	r3, r2
 801a382:	d03b      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	681b      	ldr	r3, [r3, #0]
 801a388:	4a31      	ldr	r2, [pc, #196]	@ (801a450 <HAL_DMA_Init+0x1c8>)
 801a38a:	4293      	cmp	r3, r2
 801a38c:	d036      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a38e:	687b      	ldr	r3, [r7, #4]
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	4a30      	ldr	r2, [pc, #192]	@ (801a454 <HAL_DMA_Init+0x1cc>)
 801a394:	4293      	cmp	r3, r2
 801a396:	d031      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	4a2e      	ldr	r2, [pc, #184]	@ (801a458 <HAL_DMA_Init+0x1d0>)
 801a39e:	4293      	cmp	r3, r2
 801a3a0:	d02c      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	4a2d      	ldr	r2, [pc, #180]	@ (801a45c <HAL_DMA_Init+0x1d4>)
 801a3a8:	4293      	cmp	r3, r2
 801a3aa:	d027      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	4a2b      	ldr	r2, [pc, #172]	@ (801a460 <HAL_DMA_Init+0x1d8>)
 801a3b2:	4293      	cmp	r3, r2
 801a3b4:	d022      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	4a2a      	ldr	r2, [pc, #168]	@ (801a464 <HAL_DMA_Init+0x1dc>)
 801a3bc:	4293      	cmp	r3, r2
 801a3be:	d01d      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	4a28      	ldr	r2, [pc, #160]	@ (801a468 <HAL_DMA_Init+0x1e0>)
 801a3c6:	4293      	cmp	r3, r2
 801a3c8:	d018      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	4a27      	ldr	r2, [pc, #156]	@ (801a46c <HAL_DMA_Init+0x1e4>)
 801a3d0:	4293      	cmp	r3, r2
 801a3d2:	d013      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	4a25      	ldr	r2, [pc, #148]	@ (801a470 <HAL_DMA_Init+0x1e8>)
 801a3da:	4293      	cmp	r3, r2
 801a3dc:	d00e      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3de:	687b      	ldr	r3, [r7, #4]
 801a3e0:	681b      	ldr	r3, [r3, #0]
 801a3e2:	4a24      	ldr	r2, [pc, #144]	@ (801a474 <HAL_DMA_Init+0x1ec>)
 801a3e4:	4293      	cmp	r3, r2
 801a3e6:	d009      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	4a22      	ldr	r2, [pc, #136]	@ (801a478 <HAL_DMA_Init+0x1f0>)
 801a3ee:	4293      	cmp	r3, r2
 801a3f0:	d004      	beq.n	801a3fc <HAL_DMA_Init+0x174>
 801a3f2:	687b      	ldr	r3, [r7, #4]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4a21      	ldr	r2, [pc, #132]	@ (801a47c <HAL_DMA_Init+0x1f4>)
 801a3f8:	4293      	cmp	r3, r2
 801a3fa:	d108      	bne.n	801a40e <HAL_DMA_Init+0x186>
 801a3fc:	687b      	ldr	r3, [r7, #4]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	681a      	ldr	r2, [r3, #0]
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	f022 0201 	bic.w	r2, r2, #1
 801a40a:	601a      	str	r2, [r3, #0]
 801a40c:	e007      	b.n	801a41e <HAL_DMA_Init+0x196>
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	681a      	ldr	r2, [r3, #0]
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	f022 0201 	bic.w	r2, r2, #1
 801a41c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a41e:	e02f      	b.n	801a480 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801a420:	f7ff fd5a 	bl	8019ed8 <HAL_GetTick>
 801a424:	4602      	mov	r2, r0
 801a426:	693b      	ldr	r3, [r7, #16]
 801a428:	1ad3      	subs	r3, r2, r3
 801a42a:	2b05      	cmp	r3, #5
 801a42c:	d928      	bls.n	801a480 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	2220      	movs	r2, #32
 801a432:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	2203      	movs	r2, #3
 801a438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 801a43c:	2301      	movs	r3, #1
 801a43e:	e246      	b.n	801a8ce <HAL_DMA_Init+0x646>
 801a440:	40020010 	.word	0x40020010
 801a444:	40020028 	.word	0x40020028
 801a448:	40020040 	.word	0x40020040
 801a44c:	40020058 	.word	0x40020058
 801a450:	40020070 	.word	0x40020070
 801a454:	40020088 	.word	0x40020088
 801a458:	400200a0 	.word	0x400200a0
 801a45c:	400200b8 	.word	0x400200b8
 801a460:	40020410 	.word	0x40020410
 801a464:	40020428 	.word	0x40020428
 801a468:	40020440 	.word	0x40020440
 801a46c:	40020458 	.word	0x40020458
 801a470:	40020470 	.word	0x40020470
 801a474:	40020488 	.word	0x40020488
 801a478:	400204a0 	.word	0x400204a0
 801a47c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	681b      	ldr	r3, [r3, #0]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	f003 0301 	and.w	r3, r3, #1
 801a48a:	2b00      	cmp	r3, #0
 801a48c:	d1c8      	bne.n	801a420 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801a48e:	687b      	ldr	r3, [r7, #4]
 801a490:	681b      	ldr	r3, [r3, #0]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801a496:	697a      	ldr	r2, [r7, #20]
 801a498:	4b83      	ldr	r3, [pc, #524]	@ (801a6a8 <HAL_DMA_Init+0x420>)
 801a49a:	4013      	ands	r3, r2
 801a49c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801a49e:	687b      	ldr	r3, [r7, #4]
 801a4a0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801a4a6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a4a8:	687b      	ldr	r3, [r7, #4]
 801a4aa:	691b      	ldr	r3, [r3, #16]
 801a4ac:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801a4b2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	699b      	ldr	r3, [r3, #24]
 801a4b8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801a4ba:	687b      	ldr	r3, [r7, #4]
 801a4bc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801a4be:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	6a1b      	ldr	r3, [r3, #32]
 801a4c4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801a4c6:	697a      	ldr	r2, [r7, #20]
 801a4c8:	4313      	orrs	r3, r2
 801a4ca:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a4d0:	2b04      	cmp	r3, #4
 801a4d2:	d107      	bne.n	801a4e4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801a4d4:	687b      	ldr	r3, [r7, #4]
 801a4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a4dc:	4313      	orrs	r3, r2
 801a4de:	697a      	ldr	r2, [r7, #20]
 801a4e0:	4313      	orrs	r3, r2
 801a4e2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 801a4e4:	4b71      	ldr	r3, [pc, #452]	@ (801a6ac <HAL_DMA_Init+0x424>)
 801a4e6:	681a      	ldr	r2, [r3, #0]
 801a4e8:	4b71      	ldr	r3, [pc, #452]	@ (801a6b0 <HAL_DMA_Init+0x428>)
 801a4ea:	4013      	ands	r3, r2
 801a4ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a4f0:	d328      	bcc.n	801a544 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	685b      	ldr	r3, [r3, #4]
 801a4f6:	2b28      	cmp	r3, #40	@ 0x28
 801a4f8:	d903      	bls.n	801a502 <HAL_DMA_Init+0x27a>
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	685b      	ldr	r3, [r3, #4]
 801a4fe:	2b2e      	cmp	r3, #46	@ 0x2e
 801a500:	d917      	bls.n	801a532 <HAL_DMA_Init+0x2aa>
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	685b      	ldr	r3, [r3, #4]
 801a506:	2b3e      	cmp	r3, #62	@ 0x3e
 801a508:	d903      	bls.n	801a512 <HAL_DMA_Init+0x28a>
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	685b      	ldr	r3, [r3, #4]
 801a50e:	2b42      	cmp	r3, #66	@ 0x42
 801a510:	d90f      	bls.n	801a532 <HAL_DMA_Init+0x2aa>
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	685b      	ldr	r3, [r3, #4]
 801a516:	2b46      	cmp	r3, #70	@ 0x46
 801a518:	d903      	bls.n	801a522 <HAL_DMA_Init+0x29a>
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	685b      	ldr	r3, [r3, #4]
 801a51e:	2b48      	cmp	r3, #72	@ 0x48
 801a520:	d907      	bls.n	801a532 <HAL_DMA_Init+0x2aa>
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	685b      	ldr	r3, [r3, #4]
 801a526:	2b4e      	cmp	r3, #78	@ 0x4e
 801a528:	d905      	bls.n	801a536 <HAL_DMA_Init+0x2ae>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	685b      	ldr	r3, [r3, #4]
 801a52e:	2b52      	cmp	r3, #82	@ 0x52
 801a530:	d801      	bhi.n	801a536 <HAL_DMA_Init+0x2ae>
 801a532:	2301      	movs	r3, #1
 801a534:	e000      	b.n	801a538 <HAL_DMA_Init+0x2b0>
 801a536:	2300      	movs	r3, #0
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d003      	beq.n	801a544 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801a53c:	697b      	ldr	r3, [r7, #20]
 801a53e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801a542:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	697a      	ldr	r2, [r7, #20]
 801a54a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	695b      	ldr	r3, [r3, #20]
 801a552:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801a554:	697b      	ldr	r3, [r7, #20]
 801a556:	f023 0307 	bic.w	r3, r3, #7
 801a55a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a560:	697a      	ldr	r2, [r7, #20]
 801a562:	4313      	orrs	r3, r2
 801a564:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a56a:	2b04      	cmp	r3, #4
 801a56c:	d117      	bne.n	801a59e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a572:	697a      	ldr	r2, [r7, #20]
 801a574:	4313      	orrs	r3, r2
 801a576:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801a578:	687b      	ldr	r3, [r7, #4]
 801a57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a57c:	2b00      	cmp	r3, #0
 801a57e:	d00e      	beq.n	801a59e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801a580:	6878      	ldr	r0, [r7, #4]
 801a582:	f001 fbff 	bl	801bd84 <DMA_CheckFifoParam>
 801a586:	4603      	mov	r3, r0
 801a588:	2b00      	cmp	r3, #0
 801a58a:	d008      	beq.n	801a59e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a58c:	687b      	ldr	r3, [r7, #4]
 801a58e:	2240      	movs	r2, #64	@ 0x40
 801a590:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	2201      	movs	r2, #1
 801a596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 801a59a:	2301      	movs	r3, #1
 801a59c:	e197      	b.n	801a8ce <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	697a      	ldr	r2, [r7, #20]
 801a5a4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a5a6:	6878      	ldr	r0, [r7, #4]
 801a5a8:	f001 fb3a 	bl	801bc20 <DMA_CalcBaseAndBitshift>
 801a5ac:	4603      	mov	r3, r0
 801a5ae:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a5b0:	687b      	ldr	r3, [r7, #4]
 801a5b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a5b4:	f003 031f 	and.w	r3, r3, #31
 801a5b8:	223f      	movs	r2, #63	@ 0x3f
 801a5ba:	409a      	lsls	r2, r3
 801a5bc:	68bb      	ldr	r3, [r7, #8]
 801a5be:	609a      	str	r2, [r3, #8]
 801a5c0:	e0cd      	b.n	801a75e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	4a3b      	ldr	r2, [pc, #236]	@ (801a6b4 <HAL_DMA_Init+0x42c>)
 801a5c8:	4293      	cmp	r3, r2
 801a5ca:	d022      	beq.n	801a612 <HAL_DMA_Init+0x38a>
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	4a39      	ldr	r2, [pc, #228]	@ (801a6b8 <HAL_DMA_Init+0x430>)
 801a5d2:	4293      	cmp	r3, r2
 801a5d4:	d01d      	beq.n	801a612 <HAL_DMA_Init+0x38a>
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	4a38      	ldr	r2, [pc, #224]	@ (801a6bc <HAL_DMA_Init+0x434>)
 801a5dc:	4293      	cmp	r3, r2
 801a5de:	d018      	beq.n	801a612 <HAL_DMA_Init+0x38a>
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	4a36      	ldr	r2, [pc, #216]	@ (801a6c0 <HAL_DMA_Init+0x438>)
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	d013      	beq.n	801a612 <HAL_DMA_Init+0x38a>
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	4a35      	ldr	r2, [pc, #212]	@ (801a6c4 <HAL_DMA_Init+0x43c>)
 801a5f0:	4293      	cmp	r3, r2
 801a5f2:	d00e      	beq.n	801a612 <HAL_DMA_Init+0x38a>
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	681b      	ldr	r3, [r3, #0]
 801a5f8:	4a33      	ldr	r2, [pc, #204]	@ (801a6c8 <HAL_DMA_Init+0x440>)
 801a5fa:	4293      	cmp	r3, r2
 801a5fc:	d009      	beq.n	801a612 <HAL_DMA_Init+0x38a>
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	4a32      	ldr	r2, [pc, #200]	@ (801a6cc <HAL_DMA_Init+0x444>)
 801a604:	4293      	cmp	r3, r2
 801a606:	d004      	beq.n	801a612 <HAL_DMA_Init+0x38a>
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	681b      	ldr	r3, [r3, #0]
 801a60c:	4a30      	ldr	r2, [pc, #192]	@ (801a6d0 <HAL_DMA_Init+0x448>)
 801a60e:	4293      	cmp	r3, r2
 801a610:	d101      	bne.n	801a616 <HAL_DMA_Init+0x38e>
 801a612:	2301      	movs	r3, #1
 801a614:	e000      	b.n	801a618 <HAL_DMA_Init+0x390>
 801a616:	2300      	movs	r3, #0
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f000 8097 	beq.w	801a74c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	4a24      	ldr	r2, [pc, #144]	@ (801a6b4 <HAL_DMA_Init+0x42c>)
 801a624:	4293      	cmp	r3, r2
 801a626:	d021      	beq.n	801a66c <HAL_DMA_Init+0x3e4>
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	681b      	ldr	r3, [r3, #0]
 801a62c:	4a22      	ldr	r2, [pc, #136]	@ (801a6b8 <HAL_DMA_Init+0x430>)
 801a62e:	4293      	cmp	r3, r2
 801a630:	d01c      	beq.n	801a66c <HAL_DMA_Init+0x3e4>
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	4a21      	ldr	r2, [pc, #132]	@ (801a6bc <HAL_DMA_Init+0x434>)
 801a638:	4293      	cmp	r3, r2
 801a63a:	d017      	beq.n	801a66c <HAL_DMA_Init+0x3e4>
 801a63c:	687b      	ldr	r3, [r7, #4]
 801a63e:	681b      	ldr	r3, [r3, #0]
 801a640:	4a1f      	ldr	r2, [pc, #124]	@ (801a6c0 <HAL_DMA_Init+0x438>)
 801a642:	4293      	cmp	r3, r2
 801a644:	d012      	beq.n	801a66c <HAL_DMA_Init+0x3e4>
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	4a1e      	ldr	r2, [pc, #120]	@ (801a6c4 <HAL_DMA_Init+0x43c>)
 801a64c:	4293      	cmp	r3, r2
 801a64e:	d00d      	beq.n	801a66c <HAL_DMA_Init+0x3e4>
 801a650:	687b      	ldr	r3, [r7, #4]
 801a652:	681b      	ldr	r3, [r3, #0]
 801a654:	4a1c      	ldr	r2, [pc, #112]	@ (801a6c8 <HAL_DMA_Init+0x440>)
 801a656:	4293      	cmp	r3, r2
 801a658:	d008      	beq.n	801a66c <HAL_DMA_Init+0x3e4>
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	4a1b      	ldr	r2, [pc, #108]	@ (801a6cc <HAL_DMA_Init+0x444>)
 801a660:	4293      	cmp	r3, r2
 801a662:	d003      	beq.n	801a66c <HAL_DMA_Init+0x3e4>
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	4a19      	ldr	r2, [pc, #100]	@ (801a6d0 <HAL_DMA_Init+0x448>)
 801a66a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	2202      	movs	r2, #2
 801a670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	2200      	movs	r2, #0
 801a678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	681b      	ldr	r3, [r3, #0]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801a684:	697a      	ldr	r2, [r7, #20]
 801a686:	4b13      	ldr	r3, [pc, #76]	@ (801a6d4 <HAL_DMA_Init+0x44c>)
 801a688:	4013      	ands	r3, r2
 801a68a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	689b      	ldr	r3, [r3, #8]
 801a690:	2b40      	cmp	r3, #64	@ 0x40
 801a692:	d021      	beq.n	801a6d8 <HAL_DMA_Init+0x450>
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	689b      	ldr	r3, [r3, #8]
 801a698:	2b80      	cmp	r3, #128	@ 0x80
 801a69a:	d102      	bne.n	801a6a2 <HAL_DMA_Init+0x41a>
 801a69c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801a6a0:	e01b      	b.n	801a6da <HAL_DMA_Init+0x452>
 801a6a2:	2300      	movs	r3, #0
 801a6a4:	e019      	b.n	801a6da <HAL_DMA_Init+0x452>
 801a6a6:	bf00      	nop
 801a6a8:	fe10803f 	.word	0xfe10803f
 801a6ac:	5c001000 	.word	0x5c001000
 801a6b0:	ffff0000 	.word	0xffff0000
 801a6b4:	58025408 	.word	0x58025408
 801a6b8:	5802541c 	.word	0x5802541c
 801a6bc:	58025430 	.word	0x58025430
 801a6c0:	58025444 	.word	0x58025444
 801a6c4:	58025458 	.word	0x58025458
 801a6c8:	5802546c 	.word	0x5802546c
 801a6cc:	58025480 	.word	0x58025480
 801a6d0:	58025494 	.word	0x58025494
 801a6d4:	fffe000f 	.word	0xfffe000f
 801a6d8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a6da:	687a      	ldr	r2, [r7, #4]
 801a6dc:	68d2      	ldr	r2, [r2, #12]
 801a6de:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a6e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a6e2:	687b      	ldr	r3, [r7, #4]
 801a6e4:	691b      	ldr	r3, [r3, #16]
 801a6e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801a6e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	695b      	ldr	r3, [r3, #20]
 801a6ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801a6f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	699b      	ldr	r3, [r3, #24]
 801a6f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801a6f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	69db      	ldr	r3, [r3, #28]
 801a6fe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 801a700:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	6a1b      	ldr	r3, [r3, #32]
 801a706:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801a708:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801a70a:	697a      	ldr	r2, [r7, #20]
 801a70c:	4313      	orrs	r3, r2
 801a70e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	697a      	ldr	r2, [r7, #20]
 801a716:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	461a      	mov	r2, r3
 801a71e:	4b6e      	ldr	r3, [pc, #440]	@ (801a8d8 <HAL_DMA_Init+0x650>)
 801a720:	4413      	add	r3, r2
 801a722:	4a6e      	ldr	r2, [pc, #440]	@ (801a8dc <HAL_DMA_Init+0x654>)
 801a724:	fba2 2303 	umull	r2, r3, r2, r3
 801a728:	091b      	lsrs	r3, r3, #4
 801a72a:	009a      	lsls	r2, r3, #2
 801a72c:	687b      	ldr	r3, [r7, #4]
 801a72e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801a730:	6878      	ldr	r0, [r7, #4]
 801a732:	f001 fa75 	bl	801bc20 <DMA_CalcBaseAndBitshift>
 801a736:	4603      	mov	r3, r0
 801a738:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a73e:	f003 031f 	and.w	r3, r3, #31
 801a742:	2201      	movs	r2, #1
 801a744:	409a      	lsls	r2, r3
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	605a      	str	r2, [r3, #4]
 801a74a:	e008      	b.n	801a75e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	2240      	movs	r2, #64	@ 0x40
 801a750:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	2203      	movs	r2, #3
 801a756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801a75a:	2301      	movs	r3, #1
 801a75c:	e0b7      	b.n	801a8ce <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a75e:	687b      	ldr	r3, [r7, #4]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	4a5f      	ldr	r2, [pc, #380]	@ (801a8e0 <HAL_DMA_Init+0x658>)
 801a764:	4293      	cmp	r3, r2
 801a766:	d072      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	681b      	ldr	r3, [r3, #0]
 801a76c:	4a5d      	ldr	r2, [pc, #372]	@ (801a8e4 <HAL_DMA_Init+0x65c>)
 801a76e:	4293      	cmp	r3, r2
 801a770:	d06d      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	4a5c      	ldr	r2, [pc, #368]	@ (801a8e8 <HAL_DMA_Init+0x660>)
 801a778:	4293      	cmp	r3, r2
 801a77a:	d068      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	4a5a      	ldr	r2, [pc, #360]	@ (801a8ec <HAL_DMA_Init+0x664>)
 801a782:	4293      	cmp	r3, r2
 801a784:	d063      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	4a59      	ldr	r2, [pc, #356]	@ (801a8f0 <HAL_DMA_Init+0x668>)
 801a78c:	4293      	cmp	r3, r2
 801a78e:	d05e      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a790:	687b      	ldr	r3, [r7, #4]
 801a792:	681b      	ldr	r3, [r3, #0]
 801a794:	4a57      	ldr	r2, [pc, #348]	@ (801a8f4 <HAL_DMA_Init+0x66c>)
 801a796:	4293      	cmp	r3, r2
 801a798:	d059      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	4a56      	ldr	r2, [pc, #344]	@ (801a8f8 <HAL_DMA_Init+0x670>)
 801a7a0:	4293      	cmp	r3, r2
 801a7a2:	d054      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	681b      	ldr	r3, [r3, #0]
 801a7a8:	4a54      	ldr	r2, [pc, #336]	@ (801a8fc <HAL_DMA_Init+0x674>)
 801a7aa:	4293      	cmp	r3, r2
 801a7ac:	d04f      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	681b      	ldr	r3, [r3, #0]
 801a7b2:	4a53      	ldr	r2, [pc, #332]	@ (801a900 <HAL_DMA_Init+0x678>)
 801a7b4:	4293      	cmp	r3, r2
 801a7b6:	d04a      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	4a51      	ldr	r2, [pc, #324]	@ (801a904 <HAL_DMA_Init+0x67c>)
 801a7be:	4293      	cmp	r3, r2
 801a7c0:	d045      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	4a50      	ldr	r2, [pc, #320]	@ (801a908 <HAL_DMA_Init+0x680>)
 801a7c8:	4293      	cmp	r3, r2
 801a7ca:	d040      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	681b      	ldr	r3, [r3, #0]
 801a7d0:	4a4e      	ldr	r2, [pc, #312]	@ (801a90c <HAL_DMA_Init+0x684>)
 801a7d2:	4293      	cmp	r3, r2
 801a7d4:	d03b      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	4a4d      	ldr	r2, [pc, #308]	@ (801a910 <HAL_DMA_Init+0x688>)
 801a7dc:	4293      	cmp	r3, r2
 801a7de:	d036      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	681b      	ldr	r3, [r3, #0]
 801a7e4:	4a4b      	ldr	r2, [pc, #300]	@ (801a914 <HAL_DMA_Init+0x68c>)
 801a7e6:	4293      	cmp	r3, r2
 801a7e8:	d031      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	681b      	ldr	r3, [r3, #0]
 801a7ee:	4a4a      	ldr	r2, [pc, #296]	@ (801a918 <HAL_DMA_Init+0x690>)
 801a7f0:	4293      	cmp	r3, r2
 801a7f2:	d02c      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	4a48      	ldr	r2, [pc, #288]	@ (801a91c <HAL_DMA_Init+0x694>)
 801a7fa:	4293      	cmp	r3, r2
 801a7fc:	d027      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	4a47      	ldr	r2, [pc, #284]	@ (801a920 <HAL_DMA_Init+0x698>)
 801a804:	4293      	cmp	r3, r2
 801a806:	d022      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	681b      	ldr	r3, [r3, #0]
 801a80c:	4a45      	ldr	r2, [pc, #276]	@ (801a924 <HAL_DMA_Init+0x69c>)
 801a80e:	4293      	cmp	r3, r2
 801a810:	d01d      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	4a44      	ldr	r2, [pc, #272]	@ (801a928 <HAL_DMA_Init+0x6a0>)
 801a818:	4293      	cmp	r3, r2
 801a81a:	d018      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	681b      	ldr	r3, [r3, #0]
 801a820:	4a42      	ldr	r2, [pc, #264]	@ (801a92c <HAL_DMA_Init+0x6a4>)
 801a822:	4293      	cmp	r3, r2
 801a824:	d013      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	4a41      	ldr	r2, [pc, #260]	@ (801a930 <HAL_DMA_Init+0x6a8>)
 801a82c:	4293      	cmp	r3, r2
 801a82e:	d00e      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	4a3f      	ldr	r2, [pc, #252]	@ (801a934 <HAL_DMA_Init+0x6ac>)
 801a836:	4293      	cmp	r3, r2
 801a838:	d009      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	681b      	ldr	r3, [r3, #0]
 801a83e:	4a3e      	ldr	r2, [pc, #248]	@ (801a938 <HAL_DMA_Init+0x6b0>)
 801a840:	4293      	cmp	r3, r2
 801a842:	d004      	beq.n	801a84e <HAL_DMA_Init+0x5c6>
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	681b      	ldr	r3, [r3, #0]
 801a848:	4a3c      	ldr	r2, [pc, #240]	@ (801a93c <HAL_DMA_Init+0x6b4>)
 801a84a:	4293      	cmp	r3, r2
 801a84c:	d101      	bne.n	801a852 <HAL_DMA_Init+0x5ca>
 801a84e:	2301      	movs	r3, #1
 801a850:	e000      	b.n	801a854 <HAL_DMA_Init+0x5cc>
 801a852:	2300      	movs	r3, #0
 801a854:	2b00      	cmp	r3, #0
 801a856:	d032      	beq.n	801a8be <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801a858:	6878      	ldr	r0, [r7, #4]
 801a85a:	f001 fb0f 	bl	801be7c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	689b      	ldr	r3, [r3, #8]
 801a862:	2b80      	cmp	r3, #128	@ 0x80
 801a864:	d102      	bne.n	801a86c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	2200      	movs	r2, #0
 801a86a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	685a      	ldr	r2, [r3, #4]
 801a870:	687b      	ldr	r3, [r7, #4]
 801a872:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a874:	b2d2      	uxtb	r2, r2
 801a876:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a87c:	687a      	ldr	r2, [r7, #4]
 801a87e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a880:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	685b      	ldr	r3, [r3, #4]
 801a886:	2b00      	cmp	r3, #0
 801a888:	d010      	beq.n	801a8ac <HAL_DMA_Init+0x624>
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	685b      	ldr	r3, [r3, #4]
 801a88e:	2b08      	cmp	r3, #8
 801a890:	d80c      	bhi.n	801a8ac <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801a892:	6878      	ldr	r0, [r7, #4]
 801a894:	f001 fb8c 	bl	801bfb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a89c:	2200      	movs	r2, #0
 801a89e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a8a4:	687a      	ldr	r2, [r7, #4]
 801a8a6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a8a8:	605a      	str	r2, [r3, #4]
 801a8aa:	e008      	b.n	801a8be <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	2200      	movs	r2, #0
 801a8b6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	2200      	movs	r2, #0
 801a8bc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	2200      	movs	r2, #0
 801a8c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2201      	movs	r2, #1
 801a8c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 801a8cc:	2300      	movs	r3, #0
}
 801a8ce:	4618      	mov	r0, r3
 801a8d0:	3718      	adds	r7, #24
 801a8d2:	46bd      	mov	sp, r7
 801a8d4:	bd80      	pop	{r7, pc}
 801a8d6:	bf00      	nop
 801a8d8:	a7fdabf8 	.word	0xa7fdabf8
 801a8dc:	cccccccd 	.word	0xcccccccd
 801a8e0:	40020010 	.word	0x40020010
 801a8e4:	40020028 	.word	0x40020028
 801a8e8:	40020040 	.word	0x40020040
 801a8ec:	40020058 	.word	0x40020058
 801a8f0:	40020070 	.word	0x40020070
 801a8f4:	40020088 	.word	0x40020088
 801a8f8:	400200a0 	.word	0x400200a0
 801a8fc:	400200b8 	.word	0x400200b8
 801a900:	40020410 	.word	0x40020410
 801a904:	40020428 	.word	0x40020428
 801a908:	40020440 	.word	0x40020440
 801a90c:	40020458 	.word	0x40020458
 801a910:	40020470 	.word	0x40020470
 801a914:	40020488 	.word	0x40020488
 801a918:	400204a0 	.word	0x400204a0
 801a91c:	400204b8 	.word	0x400204b8
 801a920:	58025408 	.word	0x58025408
 801a924:	5802541c 	.word	0x5802541c
 801a928:	58025430 	.word	0x58025430
 801a92c:	58025444 	.word	0x58025444
 801a930:	58025458 	.word	0x58025458
 801a934:	5802546c 	.word	0x5802546c
 801a938:	58025480 	.word	0x58025480
 801a93c:	58025494 	.word	0x58025494

0801a940 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a940:	b580      	push	{r7, lr}
 801a942:	b084      	sub	sp, #16
 801a944:	af00      	add	r7, sp, #0
 801a946:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d101      	bne.n	801a952 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 801a94e:	2301      	movs	r3, #1
 801a950:	e237      	b.n	801adc2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a952:	687b      	ldr	r3, [r7, #4]
 801a954:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a958:	b2db      	uxtb	r3, r3
 801a95a:	2b02      	cmp	r3, #2
 801a95c:	d004      	beq.n	801a968 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a95e:	687b      	ldr	r3, [r7, #4]
 801a960:	2280      	movs	r2, #128	@ 0x80
 801a962:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 801a964:	2301      	movs	r3, #1
 801a966:	e22c      	b.n	801adc2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	4a5c      	ldr	r2, [pc, #368]	@ (801aae0 <HAL_DMA_Abort_IT+0x1a0>)
 801a96e:	4293      	cmp	r3, r2
 801a970:	d04a      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	681b      	ldr	r3, [r3, #0]
 801a976:	4a5b      	ldr	r2, [pc, #364]	@ (801aae4 <HAL_DMA_Abort_IT+0x1a4>)
 801a978:	4293      	cmp	r3, r2
 801a97a:	d045      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	4a59      	ldr	r2, [pc, #356]	@ (801aae8 <HAL_DMA_Abort_IT+0x1a8>)
 801a982:	4293      	cmp	r3, r2
 801a984:	d040      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4a58      	ldr	r2, [pc, #352]	@ (801aaec <HAL_DMA_Abort_IT+0x1ac>)
 801a98c:	4293      	cmp	r3, r2
 801a98e:	d03b      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	4a56      	ldr	r2, [pc, #344]	@ (801aaf0 <HAL_DMA_Abort_IT+0x1b0>)
 801a996:	4293      	cmp	r3, r2
 801a998:	d036      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a99a:	687b      	ldr	r3, [r7, #4]
 801a99c:	681b      	ldr	r3, [r3, #0]
 801a99e:	4a55      	ldr	r2, [pc, #340]	@ (801aaf4 <HAL_DMA_Abort_IT+0x1b4>)
 801a9a0:	4293      	cmp	r3, r2
 801a9a2:	d031      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	4a53      	ldr	r2, [pc, #332]	@ (801aaf8 <HAL_DMA_Abort_IT+0x1b8>)
 801a9aa:	4293      	cmp	r3, r2
 801a9ac:	d02c      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	4a52      	ldr	r2, [pc, #328]	@ (801aafc <HAL_DMA_Abort_IT+0x1bc>)
 801a9b4:	4293      	cmp	r3, r2
 801a9b6:	d027      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	4a50      	ldr	r2, [pc, #320]	@ (801ab00 <HAL_DMA_Abort_IT+0x1c0>)
 801a9be:	4293      	cmp	r3, r2
 801a9c0:	d022      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9c2:	687b      	ldr	r3, [r7, #4]
 801a9c4:	681b      	ldr	r3, [r3, #0]
 801a9c6:	4a4f      	ldr	r2, [pc, #316]	@ (801ab04 <HAL_DMA_Abort_IT+0x1c4>)
 801a9c8:	4293      	cmp	r3, r2
 801a9ca:	d01d      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	4a4d      	ldr	r2, [pc, #308]	@ (801ab08 <HAL_DMA_Abort_IT+0x1c8>)
 801a9d2:	4293      	cmp	r3, r2
 801a9d4:	d018      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	4a4c      	ldr	r2, [pc, #304]	@ (801ab0c <HAL_DMA_Abort_IT+0x1cc>)
 801a9dc:	4293      	cmp	r3, r2
 801a9de:	d013      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	4a4a      	ldr	r2, [pc, #296]	@ (801ab10 <HAL_DMA_Abort_IT+0x1d0>)
 801a9e6:	4293      	cmp	r3, r2
 801a9e8:	d00e      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9ea:	687b      	ldr	r3, [r7, #4]
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	4a49      	ldr	r2, [pc, #292]	@ (801ab14 <HAL_DMA_Abort_IT+0x1d4>)
 801a9f0:	4293      	cmp	r3, r2
 801a9f2:	d009      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	4a47      	ldr	r2, [pc, #284]	@ (801ab18 <HAL_DMA_Abort_IT+0x1d8>)
 801a9fa:	4293      	cmp	r3, r2
 801a9fc:	d004      	beq.n	801aa08 <HAL_DMA_Abort_IT+0xc8>
 801a9fe:	687b      	ldr	r3, [r7, #4]
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	4a46      	ldr	r2, [pc, #280]	@ (801ab1c <HAL_DMA_Abort_IT+0x1dc>)
 801aa04:	4293      	cmp	r3, r2
 801aa06:	d101      	bne.n	801aa0c <HAL_DMA_Abort_IT+0xcc>
 801aa08:	2301      	movs	r3, #1
 801aa0a:	e000      	b.n	801aa0e <HAL_DMA_Abort_IT+0xce>
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	f000 8086 	beq.w	801ab20 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	2204      	movs	r2, #4
 801aa18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	4a2f      	ldr	r2, [pc, #188]	@ (801aae0 <HAL_DMA_Abort_IT+0x1a0>)
 801aa22:	4293      	cmp	r3, r2
 801aa24:	d04a      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	4a2e      	ldr	r2, [pc, #184]	@ (801aae4 <HAL_DMA_Abort_IT+0x1a4>)
 801aa2c:	4293      	cmp	r3, r2
 801aa2e:	d045      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	4a2c      	ldr	r2, [pc, #176]	@ (801aae8 <HAL_DMA_Abort_IT+0x1a8>)
 801aa36:	4293      	cmp	r3, r2
 801aa38:	d040      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	681b      	ldr	r3, [r3, #0]
 801aa3e:	4a2b      	ldr	r2, [pc, #172]	@ (801aaec <HAL_DMA_Abort_IT+0x1ac>)
 801aa40:	4293      	cmp	r3, r2
 801aa42:	d03b      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	4a29      	ldr	r2, [pc, #164]	@ (801aaf0 <HAL_DMA_Abort_IT+0x1b0>)
 801aa4a:	4293      	cmp	r3, r2
 801aa4c:	d036      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	4a28      	ldr	r2, [pc, #160]	@ (801aaf4 <HAL_DMA_Abort_IT+0x1b4>)
 801aa54:	4293      	cmp	r3, r2
 801aa56:	d031      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa58:	687b      	ldr	r3, [r7, #4]
 801aa5a:	681b      	ldr	r3, [r3, #0]
 801aa5c:	4a26      	ldr	r2, [pc, #152]	@ (801aaf8 <HAL_DMA_Abort_IT+0x1b8>)
 801aa5e:	4293      	cmp	r3, r2
 801aa60:	d02c      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	681b      	ldr	r3, [r3, #0]
 801aa66:	4a25      	ldr	r2, [pc, #148]	@ (801aafc <HAL_DMA_Abort_IT+0x1bc>)
 801aa68:	4293      	cmp	r3, r2
 801aa6a:	d027      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	4a23      	ldr	r2, [pc, #140]	@ (801ab00 <HAL_DMA_Abort_IT+0x1c0>)
 801aa72:	4293      	cmp	r3, r2
 801aa74:	d022      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	4a22      	ldr	r2, [pc, #136]	@ (801ab04 <HAL_DMA_Abort_IT+0x1c4>)
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	d01d      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	4a20      	ldr	r2, [pc, #128]	@ (801ab08 <HAL_DMA_Abort_IT+0x1c8>)
 801aa86:	4293      	cmp	r3, r2
 801aa88:	d018      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa8a:	687b      	ldr	r3, [r7, #4]
 801aa8c:	681b      	ldr	r3, [r3, #0]
 801aa8e:	4a1f      	ldr	r2, [pc, #124]	@ (801ab0c <HAL_DMA_Abort_IT+0x1cc>)
 801aa90:	4293      	cmp	r3, r2
 801aa92:	d013      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	681b      	ldr	r3, [r3, #0]
 801aa98:	4a1d      	ldr	r2, [pc, #116]	@ (801ab10 <HAL_DMA_Abort_IT+0x1d0>)
 801aa9a:	4293      	cmp	r3, r2
 801aa9c:	d00e      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aa9e:	687b      	ldr	r3, [r7, #4]
 801aaa0:	681b      	ldr	r3, [r3, #0]
 801aaa2:	4a1c      	ldr	r2, [pc, #112]	@ (801ab14 <HAL_DMA_Abort_IT+0x1d4>)
 801aaa4:	4293      	cmp	r3, r2
 801aaa6:	d009      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aaa8:	687b      	ldr	r3, [r7, #4]
 801aaaa:	681b      	ldr	r3, [r3, #0]
 801aaac:	4a1a      	ldr	r2, [pc, #104]	@ (801ab18 <HAL_DMA_Abort_IT+0x1d8>)
 801aaae:	4293      	cmp	r3, r2
 801aab0:	d004      	beq.n	801aabc <HAL_DMA_Abort_IT+0x17c>
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	4a19      	ldr	r2, [pc, #100]	@ (801ab1c <HAL_DMA_Abort_IT+0x1dc>)
 801aab8:	4293      	cmp	r3, r2
 801aaba:	d108      	bne.n	801aace <HAL_DMA_Abort_IT+0x18e>
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	681a      	ldr	r2, [r3, #0]
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	f022 0201 	bic.w	r2, r2, #1
 801aaca:	601a      	str	r2, [r3, #0]
 801aacc:	e178      	b.n	801adc0 <HAL_DMA_Abort_IT+0x480>
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	681b      	ldr	r3, [r3, #0]
 801aad2:	681a      	ldr	r2, [r3, #0]
 801aad4:	687b      	ldr	r3, [r7, #4]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	f022 0201 	bic.w	r2, r2, #1
 801aadc:	601a      	str	r2, [r3, #0]
 801aade:	e16f      	b.n	801adc0 <HAL_DMA_Abort_IT+0x480>
 801aae0:	40020010 	.word	0x40020010
 801aae4:	40020028 	.word	0x40020028
 801aae8:	40020040 	.word	0x40020040
 801aaec:	40020058 	.word	0x40020058
 801aaf0:	40020070 	.word	0x40020070
 801aaf4:	40020088 	.word	0x40020088
 801aaf8:	400200a0 	.word	0x400200a0
 801aafc:	400200b8 	.word	0x400200b8
 801ab00:	40020410 	.word	0x40020410
 801ab04:	40020428 	.word	0x40020428
 801ab08:	40020440 	.word	0x40020440
 801ab0c:	40020458 	.word	0x40020458
 801ab10:	40020470 	.word	0x40020470
 801ab14:	40020488 	.word	0x40020488
 801ab18:	400204a0 	.word	0x400204a0
 801ab1c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	681b      	ldr	r3, [r3, #0]
 801ab24:	681a      	ldr	r2, [r3, #0]
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	f022 020e 	bic.w	r2, r2, #14
 801ab2e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	4a6c      	ldr	r2, [pc, #432]	@ (801ace8 <HAL_DMA_Abort_IT+0x3a8>)
 801ab36:	4293      	cmp	r3, r2
 801ab38:	d04a      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab3a:	687b      	ldr	r3, [r7, #4]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	4a6b      	ldr	r2, [pc, #428]	@ (801acec <HAL_DMA_Abort_IT+0x3ac>)
 801ab40:	4293      	cmp	r3, r2
 801ab42:	d045      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab44:	687b      	ldr	r3, [r7, #4]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	4a69      	ldr	r2, [pc, #420]	@ (801acf0 <HAL_DMA_Abort_IT+0x3b0>)
 801ab4a:	4293      	cmp	r3, r2
 801ab4c:	d040      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	4a68      	ldr	r2, [pc, #416]	@ (801acf4 <HAL_DMA_Abort_IT+0x3b4>)
 801ab54:	4293      	cmp	r3, r2
 801ab56:	d03b      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	4a66      	ldr	r2, [pc, #408]	@ (801acf8 <HAL_DMA_Abort_IT+0x3b8>)
 801ab5e:	4293      	cmp	r3, r2
 801ab60:	d036      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	4a65      	ldr	r2, [pc, #404]	@ (801acfc <HAL_DMA_Abort_IT+0x3bc>)
 801ab68:	4293      	cmp	r3, r2
 801ab6a:	d031      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	4a63      	ldr	r2, [pc, #396]	@ (801ad00 <HAL_DMA_Abort_IT+0x3c0>)
 801ab72:	4293      	cmp	r3, r2
 801ab74:	d02c      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	4a62      	ldr	r2, [pc, #392]	@ (801ad04 <HAL_DMA_Abort_IT+0x3c4>)
 801ab7c:	4293      	cmp	r3, r2
 801ab7e:	d027      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	681b      	ldr	r3, [r3, #0]
 801ab84:	4a60      	ldr	r2, [pc, #384]	@ (801ad08 <HAL_DMA_Abort_IT+0x3c8>)
 801ab86:	4293      	cmp	r3, r2
 801ab88:	d022      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	4a5f      	ldr	r2, [pc, #380]	@ (801ad0c <HAL_DMA_Abort_IT+0x3cc>)
 801ab90:	4293      	cmp	r3, r2
 801ab92:	d01d      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	4a5d      	ldr	r2, [pc, #372]	@ (801ad10 <HAL_DMA_Abort_IT+0x3d0>)
 801ab9a:	4293      	cmp	r3, r2
 801ab9c:	d018      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	681b      	ldr	r3, [r3, #0]
 801aba2:	4a5c      	ldr	r2, [pc, #368]	@ (801ad14 <HAL_DMA_Abort_IT+0x3d4>)
 801aba4:	4293      	cmp	r3, r2
 801aba6:	d013      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801aba8:	687b      	ldr	r3, [r7, #4]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	4a5a      	ldr	r2, [pc, #360]	@ (801ad18 <HAL_DMA_Abort_IT+0x3d8>)
 801abae:	4293      	cmp	r3, r2
 801abb0:	d00e      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	4a59      	ldr	r2, [pc, #356]	@ (801ad1c <HAL_DMA_Abort_IT+0x3dc>)
 801abb8:	4293      	cmp	r3, r2
 801abba:	d009      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	4a57      	ldr	r2, [pc, #348]	@ (801ad20 <HAL_DMA_Abort_IT+0x3e0>)
 801abc2:	4293      	cmp	r3, r2
 801abc4:	d004      	beq.n	801abd0 <HAL_DMA_Abort_IT+0x290>
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	681b      	ldr	r3, [r3, #0]
 801abca:	4a56      	ldr	r2, [pc, #344]	@ (801ad24 <HAL_DMA_Abort_IT+0x3e4>)
 801abcc:	4293      	cmp	r3, r2
 801abce:	d108      	bne.n	801abe2 <HAL_DMA_Abort_IT+0x2a2>
 801abd0:	687b      	ldr	r3, [r7, #4]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	681a      	ldr	r2, [r3, #0]
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	f022 0201 	bic.w	r2, r2, #1
 801abde:	601a      	str	r2, [r3, #0]
 801abe0:	e007      	b.n	801abf2 <HAL_DMA_Abort_IT+0x2b2>
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	681a      	ldr	r2, [r3, #0]
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	f022 0201 	bic.w	r2, r2, #1
 801abf0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	4a3c      	ldr	r2, [pc, #240]	@ (801ace8 <HAL_DMA_Abort_IT+0x3a8>)
 801abf8:	4293      	cmp	r3, r2
 801abfa:	d072      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	4a3a      	ldr	r2, [pc, #232]	@ (801acec <HAL_DMA_Abort_IT+0x3ac>)
 801ac02:	4293      	cmp	r3, r2
 801ac04:	d06d      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	4a39      	ldr	r2, [pc, #228]	@ (801acf0 <HAL_DMA_Abort_IT+0x3b0>)
 801ac0c:	4293      	cmp	r3, r2
 801ac0e:	d068      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	4a37      	ldr	r2, [pc, #220]	@ (801acf4 <HAL_DMA_Abort_IT+0x3b4>)
 801ac16:	4293      	cmp	r3, r2
 801ac18:	d063      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	4a36      	ldr	r2, [pc, #216]	@ (801acf8 <HAL_DMA_Abort_IT+0x3b8>)
 801ac20:	4293      	cmp	r3, r2
 801ac22:	d05e      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	681b      	ldr	r3, [r3, #0]
 801ac28:	4a34      	ldr	r2, [pc, #208]	@ (801acfc <HAL_DMA_Abort_IT+0x3bc>)
 801ac2a:	4293      	cmp	r3, r2
 801ac2c:	d059      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	4a33      	ldr	r2, [pc, #204]	@ (801ad00 <HAL_DMA_Abort_IT+0x3c0>)
 801ac34:	4293      	cmp	r3, r2
 801ac36:	d054      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	4a31      	ldr	r2, [pc, #196]	@ (801ad04 <HAL_DMA_Abort_IT+0x3c4>)
 801ac3e:	4293      	cmp	r3, r2
 801ac40:	d04f      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	4a30      	ldr	r2, [pc, #192]	@ (801ad08 <HAL_DMA_Abort_IT+0x3c8>)
 801ac48:	4293      	cmp	r3, r2
 801ac4a:	d04a      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	4a2e      	ldr	r2, [pc, #184]	@ (801ad0c <HAL_DMA_Abort_IT+0x3cc>)
 801ac52:	4293      	cmp	r3, r2
 801ac54:	d045      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	681b      	ldr	r3, [r3, #0]
 801ac5a:	4a2d      	ldr	r2, [pc, #180]	@ (801ad10 <HAL_DMA_Abort_IT+0x3d0>)
 801ac5c:	4293      	cmp	r3, r2
 801ac5e:	d040      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	681b      	ldr	r3, [r3, #0]
 801ac64:	4a2b      	ldr	r2, [pc, #172]	@ (801ad14 <HAL_DMA_Abort_IT+0x3d4>)
 801ac66:	4293      	cmp	r3, r2
 801ac68:	d03b      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	4a2a      	ldr	r2, [pc, #168]	@ (801ad18 <HAL_DMA_Abort_IT+0x3d8>)
 801ac70:	4293      	cmp	r3, r2
 801ac72:	d036      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	4a28      	ldr	r2, [pc, #160]	@ (801ad1c <HAL_DMA_Abort_IT+0x3dc>)
 801ac7a:	4293      	cmp	r3, r2
 801ac7c:	d031      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	4a27      	ldr	r2, [pc, #156]	@ (801ad20 <HAL_DMA_Abort_IT+0x3e0>)
 801ac84:	4293      	cmp	r3, r2
 801ac86:	d02c      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	4a25      	ldr	r2, [pc, #148]	@ (801ad24 <HAL_DMA_Abort_IT+0x3e4>)
 801ac8e:	4293      	cmp	r3, r2
 801ac90:	d027      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac92:	687b      	ldr	r3, [r7, #4]
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	4a24      	ldr	r2, [pc, #144]	@ (801ad28 <HAL_DMA_Abort_IT+0x3e8>)
 801ac98:	4293      	cmp	r3, r2
 801ac9a:	d022      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801ac9c:	687b      	ldr	r3, [r7, #4]
 801ac9e:	681b      	ldr	r3, [r3, #0]
 801aca0:	4a22      	ldr	r2, [pc, #136]	@ (801ad2c <HAL_DMA_Abort_IT+0x3ec>)
 801aca2:	4293      	cmp	r3, r2
 801aca4:	d01d      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	4a21      	ldr	r2, [pc, #132]	@ (801ad30 <HAL_DMA_Abort_IT+0x3f0>)
 801acac:	4293      	cmp	r3, r2
 801acae:	d018      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801acb0:	687b      	ldr	r3, [r7, #4]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	4a1f      	ldr	r2, [pc, #124]	@ (801ad34 <HAL_DMA_Abort_IT+0x3f4>)
 801acb6:	4293      	cmp	r3, r2
 801acb8:	d013      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	681b      	ldr	r3, [r3, #0]
 801acbe:	4a1e      	ldr	r2, [pc, #120]	@ (801ad38 <HAL_DMA_Abort_IT+0x3f8>)
 801acc0:	4293      	cmp	r3, r2
 801acc2:	d00e      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801acc4:	687b      	ldr	r3, [r7, #4]
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	4a1c      	ldr	r2, [pc, #112]	@ (801ad3c <HAL_DMA_Abort_IT+0x3fc>)
 801acca:	4293      	cmp	r3, r2
 801accc:	d009      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	681b      	ldr	r3, [r3, #0]
 801acd2:	4a1b      	ldr	r2, [pc, #108]	@ (801ad40 <HAL_DMA_Abort_IT+0x400>)
 801acd4:	4293      	cmp	r3, r2
 801acd6:	d004      	beq.n	801ace2 <HAL_DMA_Abort_IT+0x3a2>
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	681b      	ldr	r3, [r3, #0]
 801acdc:	4a19      	ldr	r2, [pc, #100]	@ (801ad44 <HAL_DMA_Abort_IT+0x404>)
 801acde:	4293      	cmp	r3, r2
 801ace0:	d132      	bne.n	801ad48 <HAL_DMA_Abort_IT+0x408>
 801ace2:	2301      	movs	r3, #1
 801ace4:	e031      	b.n	801ad4a <HAL_DMA_Abort_IT+0x40a>
 801ace6:	bf00      	nop
 801ace8:	40020010 	.word	0x40020010
 801acec:	40020028 	.word	0x40020028
 801acf0:	40020040 	.word	0x40020040
 801acf4:	40020058 	.word	0x40020058
 801acf8:	40020070 	.word	0x40020070
 801acfc:	40020088 	.word	0x40020088
 801ad00:	400200a0 	.word	0x400200a0
 801ad04:	400200b8 	.word	0x400200b8
 801ad08:	40020410 	.word	0x40020410
 801ad0c:	40020428 	.word	0x40020428
 801ad10:	40020440 	.word	0x40020440
 801ad14:	40020458 	.word	0x40020458
 801ad18:	40020470 	.word	0x40020470
 801ad1c:	40020488 	.word	0x40020488
 801ad20:	400204a0 	.word	0x400204a0
 801ad24:	400204b8 	.word	0x400204b8
 801ad28:	58025408 	.word	0x58025408
 801ad2c:	5802541c 	.word	0x5802541c
 801ad30:	58025430 	.word	0x58025430
 801ad34:	58025444 	.word	0x58025444
 801ad38:	58025458 	.word	0x58025458
 801ad3c:	5802546c 	.word	0x5802546c
 801ad40:	58025480 	.word	0x58025480
 801ad44:	58025494 	.word	0x58025494
 801ad48:	2300      	movs	r3, #0
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d028      	beq.n	801ada0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ad52:	681a      	ldr	r2, [r3, #0]
 801ad54:	687b      	ldr	r3, [r7, #4]
 801ad56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ad58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ad5c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ad62:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801ad64:	687b      	ldr	r3, [r7, #4]
 801ad66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad68:	f003 031f 	and.w	r3, r3, #31
 801ad6c:	2201      	movs	r2, #1
 801ad6e:	409a      	lsls	r2, r3
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ad78:	687a      	ldr	r2, [r7, #4]
 801ad7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801ad7c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d00c      	beq.n	801ada0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad8a:	681a      	ldr	r2, [r3, #0]
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ad90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ad94:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ad9a:	687a      	ldr	r2, [r7, #4]
 801ad9c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801ad9e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	2201      	movs	r2, #1
 801ada4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	2200      	movs	r2, #0
 801adac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801adb4:	2b00      	cmp	r3, #0
 801adb6:	d003      	beq.n	801adc0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801adbc:	6878      	ldr	r0, [r7, #4]
 801adbe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801adc0:	2300      	movs	r3, #0
}
 801adc2:	4618      	mov	r0, r3
 801adc4:	3710      	adds	r7, #16
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bd80      	pop	{r7, pc}
 801adca:	bf00      	nop

0801adcc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801adcc:	b580      	push	{r7, lr}
 801adce:	b08a      	sub	sp, #40	@ 0x28
 801add0:	af00      	add	r7, sp, #0
 801add2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801add4:	2300      	movs	r3, #0
 801add6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801add8:	4b67      	ldr	r3, [pc, #412]	@ (801af78 <HAL_DMA_IRQHandler+0x1ac>)
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	4a67      	ldr	r2, [pc, #412]	@ (801af7c <HAL_DMA_IRQHandler+0x1b0>)
 801adde:	fba2 2303 	umull	r2, r3, r2, r3
 801ade2:	0a9b      	lsrs	r3, r3, #10
 801ade4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801ade6:	687b      	ldr	r3, [r7, #4]
 801ade8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801adea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801adf0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801adf2:	6a3b      	ldr	r3, [r7, #32]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801adf8:	69fb      	ldr	r3, [r7, #28]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	4a5f      	ldr	r2, [pc, #380]	@ (801af80 <HAL_DMA_IRQHandler+0x1b4>)
 801ae04:	4293      	cmp	r3, r2
 801ae06:	d04a      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	681b      	ldr	r3, [r3, #0]
 801ae0c:	4a5d      	ldr	r2, [pc, #372]	@ (801af84 <HAL_DMA_IRQHandler+0x1b8>)
 801ae0e:	4293      	cmp	r3, r2
 801ae10:	d045      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	4a5c      	ldr	r2, [pc, #368]	@ (801af88 <HAL_DMA_IRQHandler+0x1bc>)
 801ae18:	4293      	cmp	r3, r2
 801ae1a:	d040      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae1c:	687b      	ldr	r3, [r7, #4]
 801ae1e:	681b      	ldr	r3, [r3, #0]
 801ae20:	4a5a      	ldr	r2, [pc, #360]	@ (801af8c <HAL_DMA_IRQHandler+0x1c0>)
 801ae22:	4293      	cmp	r3, r2
 801ae24:	d03b      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae26:	687b      	ldr	r3, [r7, #4]
 801ae28:	681b      	ldr	r3, [r3, #0]
 801ae2a:	4a59      	ldr	r2, [pc, #356]	@ (801af90 <HAL_DMA_IRQHandler+0x1c4>)
 801ae2c:	4293      	cmp	r3, r2
 801ae2e:	d036      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	4a57      	ldr	r2, [pc, #348]	@ (801af94 <HAL_DMA_IRQHandler+0x1c8>)
 801ae36:	4293      	cmp	r3, r2
 801ae38:	d031      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae3a:	687b      	ldr	r3, [r7, #4]
 801ae3c:	681b      	ldr	r3, [r3, #0]
 801ae3e:	4a56      	ldr	r2, [pc, #344]	@ (801af98 <HAL_DMA_IRQHandler+0x1cc>)
 801ae40:	4293      	cmp	r3, r2
 801ae42:	d02c      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	4a54      	ldr	r2, [pc, #336]	@ (801af9c <HAL_DMA_IRQHandler+0x1d0>)
 801ae4a:	4293      	cmp	r3, r2
 801ae4c:	d027      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	681b      	ldr	r3, [r3, #0]
 801ae52:	4a53      	ldr	r2, [pc, #332]	@ (801afa0 <HAL_DMA_IRQHandler+0x1d4>)
 801ae54:	4293      	cmp	r3, r2
 801ae56:	d022      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae58:	687b      	ldr	r3, [r7, #4]
 801ae5a:	681b      	ldr	r3, [r3, #0]
 801ae5c:	4a51      	ldr	r2, [pc, #324]	@ (801afa4 <HAL_DMA_IRQHandler+0x1d8>)
 801ae5e:	4293      	cmp	r3, r2
 801ae60:	d01d      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	681b      	ldr	r3, [r3, #0]
 801ae66:	4a50      	ldr	r2, [pc, #320]	@ (801afa8 <HAL_DMA_IRQHandler+0x1dc>)
 801ae68:	4293      	cmp	r3, r2
 801ae6a:	d018      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	681b      	ldr	r3, [r3, #0]
 801ae70:	4a4e      	ldr	r2, [pc, #312]	@ (801afac <HAL_DMA_IRQHandler+0x1e0>)
 801ae72:	4293      	cmp	r3, r2
 801ae74:	d013      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	681b      	ldr	r3, [r3, #0]
 801ae7a:	4a4d      	ldr	r2, [pc, #308]	@ (801afb0 <HAL_DMA_IRQHandler+0x1e4>)
 801ae7c:	4293      	cmp	r3, r2
 801ae7e:	d00e      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	681b      	ldr	r3, [r3, #0]
 801ae84:	4a4b      	ldr	r2, [pc, #300]	@ (801afb4 <HAL_DMA_IRQHandler+0x1e8>)
 801ae86:	4293      	cmp	r3, r2
 801ae88:	d009      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae8a:	687b      	ldr	r3, [r7, #4]
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	4a4a      	ldr	r2, [pc, #296]	@ (801afb8 <HAL_DMA_IRQHandler+0x1ec>)
 801ae90:	4293      	cmp	r3, r2
 801ae92:	d004      	beq.n	801ae9e <HAL_DMA_IRQHandler+0xd2>
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	681b      	ldr	r3, [r3, #0]
 801ae98:	4a48      	ldr	r2, [pc, #288]	@ (801afbc <HAL_DMA_IRQHandler+0x1f0>)
 801ae9a:	4293      	cmp	r3, r2
 801ae9c:	d101      	bne.n	801aea2 <HAL_DMA_IRQHandler+0xd6>
 801ae9e:	2301      	movs	r3, #1
 801aea0:	e000      	b.n	801aea4 <HAL_DMA_IRQHandler+0xd8>
 801aea2:	2300      	movs	r3, #0
 801aea4:	2b00      	cmp	r3, #0
 801aea6:	f000 842b 	beq.w	801b700 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801aeaa:	687b      	ldr	r3, [r7, #4]
 801aeac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aeae:	f003 031f 	and.w	r3, r3, #31
 801aeb2:	2208      	movs	r2, #8
 801aeb4:	409a      	lsls	r2, r3
 801aeb6:	69bb      	ldr	r3, [r7, #24]
 801aeb8:	4013      	ands	r3, r2
 801aeba:	2b00      	cmp	r3, #0
 801aebc:	f000 80a2 	beq.w	801b004 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	4a2e      	ldr	r2, [pc, #184]	@ (801af80 <HAL_DMA_IRQHandler+0x1b4>)
 801aec6:	4293      	cmp	r3, r2
 801aec8:	d04a      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	4a2d      	ldr	r2, [pc, #180]	@ (801af84 <HAL_DMA_IRQHandler+0x1b8>)
 801aed0:	4293      	cmp	r3, r2
 801aed2:	d045      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	4a2b      	ldr	r2, [pc, #172]	@ (801af88 <HAL_DMA_IRQHandler+0x1bc>)
 801aeda:	4293      	cmp	r3, r2
 801aedc:	d040      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801aede:	687b      	ldr	r3, [r7, #4]
 801aee0:	681b      	ldr	r3, [r3, #0]
 801aee2:	4a2a      	ldr	r2, [pc, #168]	@ (801af8c <HAL_DMA_IRQHandler+0x1c0>)
 801aee4:	4293      	cmp	r3, r2
 801aee6:	d03b      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	4a28      	ldr	r2, [pc, #160]	@ (801af90 <HAL_DMA_IRQHandler+0x1c4>)
 801aeee:	4293      	cmp	r3, r2
 801aef0:	d036      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	681b      	ldr	r3, [r3, #0]
 801aef6:	4a27      	ldr	r2, [pc, #156]	@ (801af94 <HAL_DMA_IRQHandler+0x1c8>)
 801aef8:	4293      	cmp	r3, r2
 801aefa:	d031      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	4a25      	ldr	r2, [pc, #148]	@ (801af98 <HAL_DMA_IRQHandler+0x1cc>)
 801af02:	4293      	cmp	r3, r2
 801af04:	d02c      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af06:	687b      	ldr	r3, [r7, #4]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	4a24      	ldr	r2, [pc, #144]	@ (801af9c <HAL_DMA_IRQHandler+0x1d0>)
 801af0c:	4293      	cmp	r3, r2
 801af0e:	d027      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	4a22      	ldr	r2, [pc, #136]	@ (801afa0 <HAL_DMA_IRQHandler+0x1d4>)
 801af16:	4293      	cmp	r3, r2
 801af18:	d022      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	4a21      	ldr	r2, [pc, #132]	@ (801afa4 <HAL_DMA_IRQHandler+0x1d8>)
 801af20:	4293      	cmp	r3, r2
 801af22:	d01d      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af24:	687b      	ldr	r3, [r7, #4]
 801af26:	681b      	ldr	r3, [r3, #0]
 801af28:	4a1f      	ldr	r2, [pc, #124]	@ (801afa8 <HAL_DMA_IRQHandler+0x1dc>)
 801af2a:	4293      	cmp	r3, r2
 801af2c:	d018      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	4a1e      	ldr	r2, [pc, #120]	@ (801afac <HAL_DMA_IRQHandler+0x1e0>)
 801af34:	4293      	cmp	r3, r2
 801af36:	d013      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	4a1c      	ldr	r2, [pc, #112]	@ (801afb0 <HAL_DMA_IRQHandler+0x1e4>)
 801af3e:	4293      	cmp	r3, r2
 801af40:	d00e      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	4a1b      	ldr	r2, [pc, #108]	@ (801afb4 <HAL_DMA_IRQHandler+0x1e8>)
 801af48:	4293      	cmp	r3, r2
 801af4a:	d009      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	4a19      	ldr	r2, [pc, #100]	@ (801afb8 <HAL_DMA_IRQHandler+0x1ec>)
 801af52:	4293      	cmp	r3, r2
 801af54:	d004      	beq.n	801af60 <HAL_DMA_IRQHandler+0x194>
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	4a18      	ldr	r2, [pc, #96]	@ (801afbc <HAL_DMA_IRQHandler+0x1f0>)
 801af5c:	4293      	cmp	r3, r2
 801af5e:	d12f      	bne.n	801afc0 <HAL_DMA_IRQHandler+0x1f4>
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	681b      	ldr	r3, [r3, #0]
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	f003 0304 	and.w	r3, r3, #4
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	bf14      	ite	ne
 801af6e:	2301      	movne	r3, #1
 801af70:	2300      	moveq	r3, #0
 801af72:	b2db      	uxtb	r3, r3
 801af74:	e02e      	b.n	801afd4 <HAL_DMA_IRQHandler+0x208>
 801af76:	bf00      	nop
 801af78:	20000000 	.word	0x20000000
 801af7c:	1b4e81b5 	.word	0x1b4e81b5
 801af80:	40020010 	.word	0x40020010
 801af84:	40020028 	.word	0x40020028
 801af88:	40020040 	.word	0x40020040
 801af8c:	40020058 	.word	0x40020058
 801af90:	40020070 	.word	0x40020070
 801af94:	40020088 	.word	0x40020088
 801af98:	400200a0 	.word	0x400200a0
 801af9c:	400200b8 	.word	0x400200b8
 801afa0:	40020410 	.word	0x40020410
 801afa4:	40020428 	.word	0x40020428
 801afa8:	40020440 	.word	0x40020440
 801afac:	40020458 	.word	0x40020458
 801afb0:	40020470 	.word	0x40020470
 801afb4:	40020488 	.word	0x40020488
 801afb8:	400204a0 	.word	0x400204a0
 801afbc:	400204b8 	.word	0x400204b8
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	681b      	ldr	r3, [r3, #0]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	f003 0308 	and.w	r3, r3, #8
 801afca:	2b00      	cmp	r3, #0
 801afcc:	bf14      	ite	ne
 801afce:	2301      	movne	r3, #1
 801afd0:	2300      	moveq	r3, #0
 801afd2:	b2db      	uxtb	r3, r3
 801afd4:	2b00      	cmp	r3, #0
 801afd6:	d015      	beq.n	801b004 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	681b      	ldr	r3, [r3, #0]
 801afdc:	681a      	ldr	r2, [r3, #0]
 801afde:	687b      	ldr	r3, [r7, #4]
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	f022 0204 	bic.w	r2, r2, #4
 801afe6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801afe8:	687b      	ldr	r3, [r7, #4]
 801afea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801afec:	f003 031f 	and.w	r3, r3, #31
 801aff0:	2208      	movs	r2, #8
 801aff2:	409a      	lsls	r2, r3
 801aff4:	6a3b      	ldr	r3, [r7, #32]
 801aff6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801aff8:	687b      	ldr	r3, [r7, #4]
 801affa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801affc:	f043 0201 	orr.w	r2, r3, #1
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b008:	f003 031f 	and.w	r3, r3, #31
 801b00c:	69ba      	ldr	r2, [r7, #24]
 801b00e:	fa22 f303 	lsr.w	r3, r2, r3
 801b012:	f003 0301 	and.w	r3, r3, #1
 801b016:	2b00      	cmp	r3, #0
 801b018:	d06e      	beq.n	801b0f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801b01a:	687b      	ldr	r3, [r7, #4]
 801b01c:	681b      	ldr	r3, [r3, #0]
 801b01e:	4a69      	ldr	r2, [pc, #420]	@ (801b1c4 <HAL_DMA_IRQHandler+0x3f8>)
 801b020:	4293      	cmp	r3, r2
 801b022:	d04a      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b024:	687b      	ldr	r3, [r7, #4]
 801b026:	681b      	ldr	r3, [r3, #0]
 801b028:	4a67      	ldr	r2, [pc, #412]	@ (801b1c8 <HAL_DMA_IRQHandler+0x3fc>)
 801b02a:	4293      	cmp	r3, r2
 801b02c:	d045      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	681b      	ldr	r3, [r3, #0]
 801b032:	4a66      	ldr	r2, [pc, #408]	@ (801b1cc <HAL_DMA_IRQHandler+0x400>)
 801b034:	4293      	cmp	r3, r2
 801b036:	d040      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	681b      	ldr	r3, [r3, #0]
 801b03c:	4a64      	ldr	r2, [pc, #400]	@ (801b1d0 <HAL_DMA_IRQHandler+0x404>)
 801b03e:	4293      	cmp	r3, r2
 801b040:	d03b      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b042:	687b      	ldr	r3, [r7, #4]
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	4a63      	ldr	r2, [pc, #396]	@ (801b1d4 <HAL_DMA_IRQHandler+0x408>)
 801b048:	4293      	cmp	r3, r2
 801b04a:	d036      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	4a61      	ldr	r2, [pc, #388]	@ (801b1d8 <HAL_DMA_IRQHandler+0x40c>)
 801b052:	4293      	cmp	r3, r2
 801b054:	d031      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	4a60      	ldr	r2, [pc, #384]	@ (801b1dc <HAL_DMA_IRQHandler+0x410>)
 801b05c:	4293      	cmp	r3, r2
 801b05e:	d02c      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	4a5e      	ldr	r2, [pc, #376]	@ (801b1e0 <HAL_DMA_IRQHandler+0x414>)
 801b066:	4293      	cmp	r3, r2
 801b068:	d027      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b06a:	687b      	ldr	r3, [r7, #4]
 801b06c:	681b      	ldr	r3, [r3, #0]
 801b06e:	4a5d      	ldr	r2, [pc, #372]	@ (801b1e4 <HAL_DMA_IRQHandler+0x418>)
 801b070:	4293      	cmp	r3, r2
 801b072:	d022      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	681b      	ldr	r3, [r3, #0]
 801b078:	4a5b      	ldr	r2, [pc, #364]	@ (801b1e8 <HAL_DMA_IRQHandler+0x41c>)
 801b07a:	4293      	cmp	r3, r2
 801b07c:	d01d      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	681b      	ldr	r3, [r3, #0]
 801b082:	4a5a      	ldr	r2, [pc, #360]	@ (801b1ec <HAL_DMA_IRQHandler+0x420>)
 801b084:	4293      	cmp	r3, r2
 801b086:	d018      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b088:	687b      	ldr	r3, [r7, #4]
 801b08a:	681b      	ldr	r3, [r3, #0]
 801b08c:	4a58      	ldr	r2, [pc, #352]	@ (801b1f0 <HAL_DMA_IRQHandler+0x424>)
 801b08e:	4293      	cmp	r3, r2
 801b090:	d013      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	681b      	ldr	r3, [r3, #0]
 801b096:	4a57      	ldr	r2, [pc, #348]	@ (801b1f4 <HAL_DMA_IRQHandler+0x428>)
 801b098:	4293      	cmp	r3, r2
 801b09a:	d00e      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b09c:	687b      	ldr	r3, [r7, #4]
 801b09e:	681b      	ldr	r3, [r3, #0]
 801b0a0:	4a55      	ldr	r2, [pc, #340]	@ (801b1f8 <HAL_DMA_IRQHandler+0x42c>)
 801b0a2:	4293      	cmp	r3, r2
 801b0a4:	d009      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	4a54      	ldr	r2, [pc, #336]	@ (801b1fc <HAL_DMA_IRQHandler+0x430>)
 801b0ac:	4293      	cmp	r3, r2
 801b0ae:	d004      	beq.n	801b0ba <HAL_DMA_IRQHandler+0x2ee>
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	681b      	ldr	r3, [r3, #0]
 801b0b4:	4a52      	ldr	r2, [pc, #328]	@ (801b200 <HAL_DMA_IRQHandler+0x434>)
 801b0b6:	4293      	cmp	r3, r2
 801b0b8:	d10a      	bne.n	801b0d0 <HAL_DMA_IRQHandler+0x304>
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	695b      	ldr	r3, [r3, #20]
 801b0c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	bf14      	ite	ne
 801b0c8:	2301      	movne	r3, #1
 801b0ca:	2300      	moveq	r3, #0
 801b0cc:	b2db      	uxtb	r3, r3
 801b0ce:	e003      	b.n	801b0d8 <HAL_DMA_IRQHandler+0x30c>
 801b0d0:	687b      	ldr	r3, [r7, #4]
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	681b      	ldr	r3, [r3, #0]
 801b0d6:	2300      	movs	r3, #0
 801b0d8:	2b00      	cmp	r3, #0
 801b0da:	d00d      	beq.n	801b0f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b0e0:	f003 031f 	and.w	r3, r3, #31
 801b0e4:	2201      	movs	r2, #1
 801b0e6:	409a      	lsls	r2, r3
 801b0e8:	6a3b      	ldr	r3, [r7, #32]
 801b0ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b0f0:	f043 0202 	orr.w	r2, r3, #2
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b0fc:	f003 031f 	and.w	r3, r3, #31
 801b100:	2204      	movs	r2, #4
 801b102:	409a      	lsls	r2, r3
 801b104:	69bb      	ldr	r3, [r7, #24]
 801b106:	4013      	ands	r3, r2
 801b108:	2b00      	cmp	r3, #0
 801b10a:	f000 808f 	beq.w	801b22c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	4a2c      	ldr	r2, [pc, #176]	@ (801b1c4 <HAL_DMA_IRQHandler+0x3f8>)
 801b114:	4293      	cmp	r3, r2
 801b116:	d04a      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	4a2a      	ldr	r2, [pc, #168]	@ (801b1c8 <HAL_DMA_IRQHandler+0x3fc>)
 801b11e:	4293      	cmp	r3, r2
 801b120:	d045      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	681b      	ldr	r3, [r3, #0]
 801b126:	4a29      	ldr	r2, [pc, #164]	@ (801b1cc <HAL_DMA_IRQHandler+0x400>)
 801b128:	4293      	cmp	r3, r2
 801b12a:	d040      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	681b      	ldr	r3, [r3, #0]
 801b130:	4a27      	ldr	r2, [pc, #156]	@ (801b1d0 <HAL_DMA_IRQHandler+0x404>)
 801b132:	4293      	cmp	r3, r2
 801b134:	d03b      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	4a26      	ldr	r2, [pc, #152]	@ (801b1d4 <HAL_DMA_IRQHandler+0x408>)
 801b13c:	4293      	cmp	r3, r2
 801b13e:	d036      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	681b      	ldr	r3, [r3, #0]
 801b144:	4a24      	ldr	r2, [pc, #144]	@ (801b1d8 <HAL_DMA_IRQHandler+0x40c>)
 801b146:	4293      	cmp	r3, r2
 801b148:	d031      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	4a23      	ldr	r2, [pc, #140]	@ (801b1dc <HAL_DMA_IRQHandler+0x410>)
 801b150:	4293      	cmp	r3, r2
 801b152:	d02c      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b154:	687b      	ldr	r3, [r7, #4]
 801b156:	681b      	ldr	r3, [r3, #0]
 801b158:	4a21      	ldr	r2, [pc, #132]	@ (801b1e0 <HAL_DMA_IRQHandler+0x414>)
 801b15a:	4293      	cmp	r3, r2
 801b15c:	d027      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	681b      	ldr	r3, [r3, #0]
 801b162:	4a20      	ldr	r2, [pc, #128]	@ (801b1e4 <HAL_DMA_IRQHandler+0x418>)
 801b164:	4293      	cmp	r3, r2
 801b166:	d022      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	4a1e      	ldr	r2, [pc, #120]	@ (801b1e8 <HAL_DMA_IRQHandler+0x41c>)
 801b16e:	4293      	cmp	r3, r2
 801b170:	d01d      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4a1d      	ldr	r2, [pc, #116]	@ (801b1ec <HAL_DMA_IRQHandler+0x420>)
 801b178:	4293      	cmp	r3, r2
 801b17a:	d018      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	4a1b      	ldr	r2, [pc, #108]	@ (801b1f0 <HAL_DMA_IRQHandler+0x424>)
 801b182:	4293      	cmp	r3, r2
 801b184:	d013      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b186:	687b      	ldr	r3, [r7, #4]
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	4a1a      	ldr	r2, [pc, #104]	@ (801b1f4 <HAL_DMA_IRQHandler+0x428>)
 801b18c:	4293      	cmp	r3, r2
 801b18e:	d00e      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	4a18      	ldr	r2, [pc, #96]	@ (801b1f8 <HAL_DMA_IRQHandler+0x42c>)
 801b196:	4293      	cmp	r3, r2
 801b198:	d009      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	681b      	ldr	r3, [r3, #0]
 801b19e:	4a17      	ldr	r2, [pc, #92]	@ (801b1fc <HAL_DMA_IRQHandler+0x430>)
 801b1a0:	4293      	cmp	r3, r2
 801b1a2:	d004      	beq.n	801b1ae <HAL_DMA_IRQHandler+0x3e2>
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	681b      	ldr	r3, [r3, #0]
 801b1a8:	4a15      	ldr	r2, [pc, #84]	@ (801b200 <HAL_DMA_IRQHandler+0x434>)
 801b1aa:	4293      	cmp	r3, r2
 801b1ac:	d12a      	bne.n	801b204 <HAL_DMA_IRQHandler+0x438>
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	f003 0302 	and.w	r3, r3, #2
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	bf14      	ite	ne
 801b1bc:	2301      	movne	r3, #1
 801b1be:	2300      	moveq	r3, #0
 801b1c0:	b2db      	uxtb	r3, r3
 801b1c2:	e023      	b.n	801b20c <HAL_DMA_IRQHandler+0x440>
 801b1c4:	40020010 	.word	0x40020010
 801b1c8:	40020028 	.word	0x40020028
 801b1cc:	40020040 	.word	0x40020040
 801b1d0:	40020058 	.word	0x40020058
 801b1d4:	40020070 	.word	0x40020070
 801b1d8:	40020088 	.word	0x40020088
 801b1dc:	400200a0 	.word	0x400200a0
 801b1e0:	400200b8 	.word	0x400200b8
 801b1e4:	40020410 	.word	0x40020410
 801b1e8:	40020428 	.word	0x40020428
 801b1ec:	40020440 	.word	0x40020440
 801b1f0:	40020458 	.word	0x40020458
 801b1f4:	40020470 	.word	0x40020470
 801b1f8:	40020488 	.word	0x40020488
 801b1fc:	400204a0 	.word	0x400204a0
 801b200:	400204b8 	.word	0x400204b8
 801b204:	687b      	ldr	r3, [r7, #4]
 801b206:	681b      	ldr	r3, [r3, #0]
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	2300      	movs	r3, #0
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d00d      	beq.n	801b22c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b210:	687b      	ldr	r3, [r7, #4]
 801b212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b214:	f003 031f 	and.w	r3, r3, #31
 801b218:	2204      	movs	r2, #4
 801b21a:	409a      	lsls	r2, r3
 801b21c:	6a3b      	ldr	r3, [r7, #32]
 801b21e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b224:	f043 0204 	orr.w	r2, r3, #4
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b230:	f003 031f 	and.w	r3, r3, #31
 801b234:	2210      	movs	r2, #16
 801b236:	409a      	lsls	r2, r3
 801b238:	69bb      	ldr	r3, [r7, #24]
 801b23a:	4013      	ands	r3, r2
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	f000 80a6 	beq.w	801b38e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801b242:	687b      	ldr	r3, [r7, #4]
 801b244:	681b      	ldr	r3, [r3, #0]
 801b246:	4a85      	ldr	r2, [pc, #532]	@ (801b45c <HAL_DMA_IRQHandler+0x690>)
 801b248:	4293      	cmp	r3, r2
 801b24a:	d04a      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b24c:	687b      	ldr	r3, [r7, #4]
 801b24e:	681b      	ldr	r3, [r3, #0]
 801b250:	4a83      	ldr	r2, [pc, #524]	@ (801b460 <HAL_DMA_IRQHandler+0x694>)
 801b252:	4293      	cmp	r3, r2
 801b254:	d045      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	4a82      	ldr	r2, [pc, #520]	@ (801b464 <HAL_DMA_IRQHandler+0x698>)
 801b25c:	4293      	cmp	r3, r2
 801b25e:	d040      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b260:	687b      	ldr	r3, [r7, #4]
 801b262:	681b      	ldr	r3, [r3, #0]
 801b264:	4a80      	ldr	r2, [pc, #512]	@ (801b468 <HAL_DMA_IRQHandler+0x69c>)
 801b266:	4293      	cmp	r3, r2
 801b268:	d03b      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	681b      	ldr	r3, [r3, #0]
 801b26e:	4a7f      	ldr	r2, [pc, #508]	@ (801b46c <HAL_DMA_IRQHandler+0x6a0>)
 801b270:	4293      	cmp	r3, r2
 801b272:	d036      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b274:	687b      	ldr	r3, [r7, #4]
 801b276:	681b      	ldr	r3, [r3, #0]
 801b278:	4a7d      	ldr	r2, [pc, #500]	@ (801b470 <HAL_DMA_IRQHandler+0x6a4>)
 801b27a:	4293      	cmp	r3, r2
 801b27c:	d031      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b27e:	687b      	ldr	r3, [r7, #4]
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	4a7c      	ldr	r2, [pc, #496]	@ (801b474 <HAL_DMA_IRQHandler+0x6a8>)
 801b284:	4293      	cmp	r3, r2
 801b286:	d02c      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b288:	687b      	ldr	r3, [r7, #4]
 801b28a:	681b      	ldr	r3, [r3, #0]
 801b28c:	4a7a      	ldr	r2, [pc, #488]	@ (801b478 <HAL_DMA_IRQHandler+0x6ac>)
 801b28e:	4293      	cmp	r3, r2
 801b290:	d027      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	4a79      	ldr	r2, [pc, #484]	@ (801b47c <HAL_DMA_IRQHandler+0x6b0>)
 801b298:	4293      	cmp	r3, r2
 801b29a:	d022      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	4a77      	ldr	r2, [pc, #476]	@ (801b480 <HAL_DMA_IRQHandler+0x6b4>)
 801b2a2:	4293      	cmp	r3, r2
 801b2a4:	d01d      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	681b      	ldr	r3, [r3, #0]
 801b2aa:	4a76      	ldr	r2, [pc, #472]	@ (801b484 <HAL_DMA_IRQHandler+0x6b8>)
 801b2ac:	4293      	cmp	r3, r2
 801b2ae:	d018      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	4a74      	ldr	r2, [pc, #464]	@ (801b488 <HAL_DMA_IRQHandler+0x6bc>)
 801b2b6:	4293      	cmp	r3, r2
 801b2b8:	d013      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	681b      	ldr	r3, [r3, #0]
 801b2be:	4a73      	ldr	r2, [pc, #460]	@ (801b48c <HAL_DMA_IRQHandler+0x6c0>)
 801b2c0:	4293      	cmp	r3, r2
 801b2c2:	d00e      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	4a71      	ldr	r2, [pc, #452]	@ (801b490 <HAL_DMA_IRQHandler+0x6c4>)
 801b2ca:	4293      	cmp	r3, r2
 801b2cc:	d009      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	4a70      	ldr	r2, [pc, #448]	@ (801b494 <HAL_DMA_IRQHandler+0x6c8>)
 801b2d4:	4293      	cmp	r3, r2
 801b2d6:	d004      	beq.n	801b2e2 <HAL_DMA_IRQHandler+0x516>
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	4a6e      	ldr	r2, [pc, #440]	@ (801b498 <HAL_DMA_IRQHandler+0x6cc>)
 801b2de:	4293      	cmp	r3, r2
 801b2e0:	d10a      	bne.n	801b2f8 <HAL_DMA_IRQHandler+0x52c>
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	681b      	ldr	r3, [r3, #0]
 801b2e8:	f003 0308 	and.w	r3, r3, #8
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	bf14      	ite	ne
 801b2f0:	2301      	movne	r3, #1
 801b2f2:	2300      	moveq	r3, #0
 801b2f4:	b2db      	uxtb	r3, r3
 801b2f6:	e009      	b.n	801b30c <HAL_DMA_IRQHandler+0x540>
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	f003 0304 	and.w	r3, r3, #4
 801b302:	2b00      	cmp	r3, #0
 801b304:	bf14      	ite	ne
 801b306:	2301      	movne	r3, #1
 801b308:	2300      	moveq	r3, #0
 801b30a:	b2db      	uxtb	r3, r3
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d03e      	beq.n	801b38e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b314:	f003 031f 	and.w	r3, r3, #31
 801b318:	2210      	movs	r2, #16
 801b31a:	409a      	lsls	r2, r3
 801b31c:	6a3b      	ldr	r3, [r7, #32]
 801b31e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d018      	beq.n	801b360 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	681b      	ldr	r3, [r3, #0]
 801b332:	681b      	ldr	r3, [r3, #0]
 801b334:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d108      	bne.n	801b34e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b340:	2b00      	cmp	r3, #0
 801b342:	d024      	beq.n	801b38e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b348:	6878      	ldr	r0, [r7, #4]
 801b34a:	4798      	blx	r3
 801b34c:	e01f      	b.n	801b38e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b352:	2b00      	cmp	r3, #0
 801b354:	d01b      	beq.n	801b38e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801b356:	687b      	ldr	r3, [r7, #4]
 801b358:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b35a:	6878      	ldr	r0, [r7, #4]
 801b35c:	4798      	blx	r3
 801b35e:	e016      	b.n	801b38e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801b360:	687b      	ldr	r3, [r7, #4]
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b36a:	2b00      	cmp	r3, #0
 801b36c:	d107      	bne.n	801b37e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	681a      	ldr	r2, [r3, #0]
 801b374:	687b      	ldr	r3, [r7, #4]
 801b376:	681b      	ldr	r3, [r3, #0]
 801b378:	f022 0208 	bic.w	r2, r2, #8
 801b37c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b382:	2b00      	cmp	r3, #0
 801b384:	d003      	beq.n	801b38e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b38a:	6878      	ldr	r0, [r7, #4]
 801b38c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b392:	f003 031f 	and.w	r3, r3, #31
 801b396:	2220      	movs	r2, #32
 801b398:	409a      	lsls	r2, r3
 801b39a:	69bb      	ldr	r3, [r7, #24]
 801b39c:	4013      	ands	r3, r2
 801b39e:	2b00      	cmp	r3, #0
 801b3a0:	f000 8110 	beq.w	801b5c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801b3a4:	687b      	ldr	r3, [r7, #4]
 801b3a6:	681b      	ldr	r3, [r3, #0]
 801b3a8:	4a2c      	ldr	r2, [pc, #176]	@ (801b45c <HAL_DMA_IRQHandler+0x690>)
 801b3aa:	4293      	cmp	r3, r2
 801b3ac:	d04a      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3ae:	687b      	ldr	r3, [r7, #4]
 801b3b0:	681b      	ldr	r3, [r3, #0]
 801b3b2:	4a2b      	ldr	r2, [pc, #172]	@ (801b460 <HAL_DMA_IRQHandler+0x694>)
 801b3b4:	4293      	cmp	r3, r2
 801b3b6:	d045      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	681b      	ldr	r3, [r3, #0]
 801b3bc:	4a29      	ldr	r2, [pc, #164]	@ (801b464 <HAL_DMA_IRQHandler+0x698>)
 801b3be:	4293      	cmp	r3, r2
 801b3c0:	d040      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	681b      	ldr	r3, [r3, #0]
 801b3c6:	4a28      	ldr	r2, [pc, #160]	@ (801b468 <HAL_DMA_IRQHandler+0x69c>)
 801b3c8:	4293      	cmp	r3, r2
 801b3ca:	d03b      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3cc:	687b      	ldr	r3, [r7, #4]
 801b3ce:	681b      	ldr	r3, [r3, #0]
 801b3d0:	4a26      	ldr	r2, [pc, #152]	@ (801b46c <HAL_DMA_IRQHandler+0x6a0>)
 801b3d2:	4293      	cmp	r3, r2
 801b3d4:	d036      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	4a25      	ldr	r2, [pc, #148]	@ (801b470 <HAL_DMA_IRQHandler+0x6a4>)
 801b3dc:	4293      	cmp	r3, r2
 801b3de:	d031      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3e0:	687b      	ldr	r3, [r7, #4]
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	4a23      	ldr	r2, [pc, #140]	@ (801b474 <HAL_DMA_IRQHandler+0x6a8>)
 801b3e6:	4293      	cmp	r3, r2
 801b3e8:	d02c      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	681b      	ldr	r3, [r3, #0]
 801b3ee:	4a22      	ldr	r2, [pc, #136]	@ (801b478 <HAL_DMA_IRQHandler+0x6ac>)
 801b3f0:	4293      	cmp	r3, r2
 801b3f2:	d027      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3f4:	687b      	ldr	r3, [r7, #4]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	4a20      	ldr	r2, [pc, #128]	@ (801b47c <HAL_DMA_IRQHandler+0x6b0>)
 801b3fa:	4293      	cmp	r3, r2
 801b3fc:	d022      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	681b      	ldr	r3, [r3, #0]
 801b402:	4a1f      	ldr	r2, [pc, #124]	@ (801b480 <HAL_DMA_IRQHandler+0x6b4>)
 801b404:	4293      	cmp	r3, r2
 801b406:	d01d      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b408:	687b      	ldr	r3, [r7, #4]
 801b40a:	681b      	ldr	r3, [r3, #0]
 801b40c:	4a1d      	ldr	r2, [pc, #116]	@ (801b484 <HAL_DMA_IRQHandler+0x6b8>)
 801b40e:	4293      	cmp	r3, r2
 801b410:	d018      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	4a1c      	ldr	r2, [pc, #112]	@ (801b488 <HAL_DMA_IRQHandler+0x6bc>)
 801b418:	4293      	cmp	r3, r2
 801b41a:	d013      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b41c:	687b      	ldr	r3, [r7, #4]
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	4a1a      	ldr	r2, [pc, #104]	@ (801b48c <HAL_DMA_IRQHandler+0x6c0>)
 801b422:	4293      	cmp	r3, r2
 801b424:	d00e      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	681b      	ldr	r3, [r3, #0]
 801b42a:	4a19      	ldr	r2, [pc, #100]	@ (801b490 <HAL_DMA_IRQHandler+0x6c4>)
 801b42c:	4293      	cmp	r3, r2
 801b42e:	d009      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b430:	687b      	ldr	r3, [r7, #4]
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	4a17      	ldr	r2, [pc, #92]	@ (801b494 <HAL_DMA_IRQHandler+0x6c8>)
 801b436:	4293      	cmp	r3, r2
 801b438:	d004      	beq.n	801b444 <HAL_DMA_IRQHandler+0x678>
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	681b      	ldr	r3, [r3, #0]
 801b43e:	4a16      	ldr	r2, [pc, #88]	@ (801b498 <HAL_DMA_IRQHandler+0x6cc>)
 801b440:	4293      	cmp	r3, r2
 801b442:	d12b      	bne.n	801b49c <HAL_DMA_IRQHandler+0x6d0>
 801b444:	687b      	ldr	r3, [r7, #4]
 801b446:	681b      	ldr	r3, [r3, #0]
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	f003 0310 	and.w	r3, r3, #16
 801b44e:	2b00      	cmp	r3, #0
 801b450:	bf14      	ite	ne
 801b452:	2301      	movne	r3, #1
 801b454:	2300      	moveq	r3, #0
 801b456:	b2db      	uxtb	r3, r3
 801b458:	e02a      	b.n	801b4b0 <HAL_DMA_IRQHandler+0x6e4>
 801b45a:	bf00      	nop
 801b45c:	40020010 	.word	0x40020010
 801b460:	40020028 	.word	0x40020028
 801b464:	40020040 	.word	0x40020040
 801b468:	40020058 	.word	0x40020058
 801b46c:	40020070 	.word	0x40020070
 801b470:	40020088 	.word	0x40020088
 801b474:	400200a0 	.word	0x400200a0
 801b478:	400200b8 	.word	0x400200b8
 801b47c:	40020410 	.word	0x40020410
 801b480:	40020428 	.word	0x40020428
 801b484:	40020440 	.word	0x40020440
 801b488:	40020458 	.word	0x40020458
 801b48c:	40020470 	.word	0x40020470
 801b490:	40020488 	.word	0x40020488
 801b494:	400204a0 	.word	0x400204a0
 801b498:	400204b8 	.word	0x400204b8
 801b49c:	687b      	ldr	r3, [r7, #4]
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	f003 0302 	and.w	r3, r3, #2
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	bf14      	ite	ne
 801b4aa:	2301      	movne	r3, #1
 801b4ac:	2300      	moveq	r3, #0
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	f000 8087 	beq.w	801b5c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b4ba:	f003 031f 	and.w	r3, r3, #31
 801b4be:	2220      	movs	r2, #32
 801b4c0:	409a      	lsls	r2, r3
 801b4c2:	6a3b      	ldr	r3, [r7, #32]
 801b4c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801b4c6:	687b      	ldr	r3, [r7, #4]
 801b4c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801b4cc:	b2db      	uxtb	r3, r3
 801b4ce:	2b04      	cmp	r3, #4
 801b4d0:	d139      	bne.n	801b546 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	681a      	ldr	r2, [r3, #0]
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	f022 0216 	bic.w	r2, r2, #22
 801b4e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	695a      	ldr	r2, [r3, #20]
 801b4e8:	687b      	ldr	r3, [r7, #4]
 801b4ea:	681b      	ldr	r3, [r3, #0]
 801b4ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801b4f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d103      	bne.n	801b502 <HAL_DMA_IRQHandler+0x736>
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d007      	beq.n	801b512 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	681b      	ldr	r3, [r3, #0]
 801b506:	681a      	ldr	r2, [r3, #0]
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	681b      	ldr	r3, [r3, #0]
 801b50c:	f022 0208 	bic.w	r2, r2, #8
 801b510:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b516:	f003 031f 	and.w	r3, r3, #31
 801b51a:	223f      	movs	r2, #63	@ 0x3f
 801b51c:	409a      	lsls	r2, r3
 801b51e:	6a3b      	ldr	r3, [r7, #32]
 801b520:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b522:	687b      	ldr	r3, [r7, #4]
 801b524:	2201      	movs	r2, #1
 801b526:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	2200      	movs	r2, #0
 801b52e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b536:	2b00      	cmp	r3, #0
 801b538:	f000 834a 	beq.w	801bbd0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b540:	6878      	ldr	r0, [r7, #4]
 801b542:	4798      	blx	r3
          }
          return;
 801b544:	e344      	b.n	801bbd0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801b550:	2b00      	cmp	r3, #0
 801b552:	d018      	beq.n	801b586 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801b554:	687b      	ldr	r3, [r7, #4]
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d108      	bne.n	801b574 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b566:	2b00      	cmp	r3, #0
 801b568:	d02c      	beq.n	801b5c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801b56a:	687b      	ldr	r3, [r7, #4]
 801b56c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b56e:	6878      	ldr	r0, [r7, #4]
 801b570:	4798      	blx	r3
 801b572:	e027      	b.n	801b5c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d023      	beq.n	801b5c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b580:	6878      	ldr	r0, [r7, #4]
 801b582:	4798      	blx	r3
 801b584:	e01e      	b.n	801b5c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801b586:	687b      	ldr	r3, [r7, #4]
 801b588:	681b      	ldr	r3, [r3, #0]
 801b58a:	681b      	ldr	r3, [r3, #0]
 801b58c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b590:	2b00      	cmp	r3, #0
 801b592:	d10f      	bne.n	801b5b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801b594:	687b      	ldr	r3, [r7, #4]
 801b596:	681b      	ldr	r3, [r3, #0]
 801b598:	681a      	ldr	r2, [r3, #0]
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	f022 0210 	bic.w	r2, r2, #16
 801b5a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801b5a4:	687b      	ldr	r3, [r7, #4]
 801b5a6:	2201      	movs	r2, #1
 801b5a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801b5ac:	687b      	ldr	r3, [r7, #4]
 801b5ae:	2200      	movs	r2, #0
 801b5b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801b5b4:	687b      	ldr	r3, [r7, #4]
 801b5b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b5b8:	2b00      	cmp	r3, #0
 801b5ba:	d003      	beq.n	801b5c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b5c0:	6878      	ldr	r0, [r7, #4]
 801b5c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801b5c4:	687b      	ldr	r3, [r7, #4]
 801b5c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b5c8:	2b00      	cmp	r3, #0
 801b5ca:	f000 8306 	beq.w	801bbda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801b5ce:	687b      	ldr	r3, [r7, #4]
 801b5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801b5d2:	f003 0301 	and.w	r3, r3, #1
 801b5d6:	2b00      	cmp	r3, #0
 801b5d8:	f000 8088 	beq.w	801b6ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	2204      	movs	r2, #4
 801b5e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	4a7a      	ldr	r2, [pc, #488]	@ (801b7d4 <HAL_DMA_IRQHandler+0xa08>)
 801b5ea:	4293      	cmp	r3, r2
 801b5ec:	d04a      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b5ee:	687b      	ldr	r3, [r7, #4]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	4a79      	ldr	r2, [pc, #484]	@ (801b7d8 <HAL_DMA_IRQHandler+0xa0c>)
 801b5f4:	4293      	cmp	r3, r2
 801b5f6:	d045      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	4a77      	ldr	r2, [pc, #476]	@ (801b7dc <HAL_DMA_IRQHandler+0xa10>)
 801b5fe:	4293      	cmp	r3, r2
 801b600:	d040      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	681b      	ldr	r3, [r3, #0]
 801b606:	4a76      	ldr	r2, [pc, #472]	@ (801b7e0 <HAL_DMA_IRQHandler+0xa14>)
 801b608:	4293      	cmp	r3, r2
 801b60a:	d03b      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	681b      	ldr	r3, [r3, #0]
 801b610:	4a74      	ldr	r2, [pc, #464]	@ (801b7e4 <HAL_DMA_IRQHandler+0xa18>)
 801b612:	4293      	cmp	r3, r2
 801b614:	d036      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b616:	687b      	ldr	r3, [r7, #4]
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	4a73      	ldr	r2, [pc, #460]	@ (801b7e8 <HAL_DMA_IRQHandler+0xa1c>)
 801b61c:	4293      	cmp	r3, r2
 801b61e:	d031      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b620:	687b      	ldr	r3, [r7, #4]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	4a71      	ldr	r2, [pc, #452]	@ (801b7ec <HAL_DMA_IRQHandler+0xa20>)
 801b626:	4293      	cmp	r3, r2
 801b628:	d02c      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	4a70      	ldr	r2, [pc, #448]	@ (801b7f0 <HAL_DMA_IRQHandler+0xa24>)
 801b630:	4293      	cmp	r3, r2
 801b632:	d027      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	681b      	ldr	r3, [r3, #0]
 801b638:	4a6e      	ldr	r2, [pc, #440]	@ (801b7f4 <HAL_DMA_IRQHandler+0xa28>)
 801b63a:	4293      	cmp	r3, r2
 801b63c:	d022      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	4a6d      	ldr	r2, [pc, #436]	@ (801b7f8 <HAL_DMA_IRQHandler+0xa2c>)
 801b644:	4293      	cmp	r3, r2
 801b646:	d01d      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	4a6b      	ldr	r2, [pc, #428]	@ (801b7fc <HAL_DMA_IRQHandler+0xa30>)
 801b64e:	4293      	cmp	r3, r2
 801b650:	d018      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b652:	687b      	ldr	r3, [r7, #4]
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	4a6a      	ldr	r2, [pc, #424]	@ (801b800 <HAL_DMA_IRQHandler+0xa34>)
 801b658:	4293      	cmp	r3, r2
 801b65a:	d013      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	4a68      	ldr	r2, [pc, #416]	@ (801b804 <HAL_DMA_IRQHandler+0xa38>)
 801b662:	4293      	cmp	r3, r2
 801b664:	d00e      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	681b      	ldr	r3, [r3, #0]
 801b66a:	4a67      	ldr	r2, [pc, #412]	@ (801b808 <HAL_DMA_IRQHandler+0xa3c>)
 801b66c:	4293      	cmp	r3, r2
 801b66e:	d009      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b670:	687b      	ldr	r3, [r7, #4]
 801b672:	681b      	ldr	r3, [r3, #0]
 801b674:	4a65      	ldr	r2, [pc, #404]	@ (801b80c <HAL_DMA_IRQHandler+0xa40>)
 801b676:	4293      	cmp	r3, r2
 801b678:	d004      	beq.n	801b684 <HAL_DMA_IRQHandler+0x8b8>
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	4a64      	ldr	r2, [pc, #400]	@ (801b810 <HAL_DMA_IRQHandler+0xa44>)
 801b680:	4293      	cmp	r3, r2
 801b682:	d108      	bne.n	801b696 <HAL_DMA_IRQHandler+0x8ca>
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	681a      	ldr	r2, [r3, #0]
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	f022 0201 	bic.w	r2, r2, #1
 801b692:	601a      	str	r2, [r3, #0]
 801b694:	e007      	b.n	801b6a6 <HAL_DMA_IRQHandler+0x8da>
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	681b      	ldr	r3, [r3, #0]
 801b69a:	681a      	ldr	r2, [r3, #0]
 801b69c:	687b      	ldr	r3, [r7, #4]
 801b69e:	681b      	ldr	r3, [r3, #0]
 801b6a0:	f022 0201 	bic.w	r2, r2, #1
 801b6a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	3301      	adds	r3, #1
 801b6aa:	60fb      	str	r3, [r7, #12]
 801b6ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801b6ae:	429a      	cmp	r2, r3
 801b6b0:	d307      	bcc.n	801b6c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	681b      	ldr	r3, [r3, #0]
 801b6b8:	f003 0301 	and.w	r3, r3, #1
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d1f2      	bne.n	801b6a6 <HAL_DMA_IRQHandler+0x8da>
 801b6c0:	e000      	b.n	801b6c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801b6c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	681b      	ldr	r3, [r3, #0]
 801b6c8:	681b      	ldr	r3, [r3, #0]
 801b6ca:	f003 0301 	and.w	r3, r3, #1
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d004      	beq.n	801b6dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	2203      	movs	r2, #3
 801b6d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801b6da:	e003      	b.n	801b6e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801b6dc:	687b      	ldr	r3, [r7, #4]
 801b6de:	2201      	movs	r2, #1
 801b6e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801b6e4:	687b      	ldr	r3, [r7, #4]
 801b6e6:	2200      	movs	r2, #0
 801b6e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	f000 8272 	beq.w	801bbda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b6f6:	687b      	ldr	r3, [r7, #4]
 801b6f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b6fa:	6878      	ldr	r0, [r7, #4]
 801b6fc:	4798      	blx	r3
 801b6fe:	e26c      	b.n	801bbda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801b700:	687b      	ldr	r3, [r7, #4]
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	4a43      	ldr	r2, [pc, #268]	@ (801b814 <HAL_DMA_IRQHandler+0xa48>)
 801b706:	4293      	cmp	r3, r2
 801b708:	d022      	beq.n	801b750 <HAL_DMA_IRQHandler+0x984>
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	681b      	ldr	r3, [r3, #0]
 801b70e:	4a42      	ldr	r2, [pc, #264]	@ (801b818 <HAL_DMA_IRQHandler+0xa4c>)
 801b710:	4293      	cmp	r3, r2
 801b712:	d01d      	beq.n	801b750 <HAL_DMA_IRQHandler+0x984>
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	681b      	ldr	r3, [r3, #0]
 801b718:	4a40      	ldr	r2, [pc, #256]	@ (801b81c <HAL_DMA_IRQHandler+0xa50>)
 801b71a:	4293      	cmp	r3, r2
 801b71c:	d018      	beq.n	801b750 <HAL_DMA_IRQHandler+0x984>
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	4a3f      	ldr	r2, [pc, #252]	@ (801b820 <HAL_DMA_IRQHandler+0xa54>)
 801b724:	4293      	cmp	r3, r2
 801b726:	d013      	beq.n	801b750 <HAL_DMA_IRQHandler+0x984>
 801b728:	687b      	ldr	r3, [r7, #4]
 801b72a:	681b      	ldr	r3, [r3, #0]
 801b72c:	4a3d      	ldr	r2, [pc, #244]	@ (801b824 <HAL_DMA_IRQHandler+0xa58>)
 801b72e:	4293      	cmp	r3, r2
 801b730:	d00e      	beq.n	801b750 <HAL_DMA_IRQHandler+0x984>
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	4a3c      	ldr	r2, [pc, #240]	@ (801b828 <HAL_DMA_IRQHandler+0xa5c>)
 801b738:	4293      	cmp	r3, r2
 801b73a:	d009      	beq.n	801b750 <HAL_DMA_IRQHandler+0x984>
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	681b      	ldr	r3, [r3, #0]
 801b740:	4a3a      	ldr	r2, [pc, #232]	@ (801b82c <HAL_DMA_IRQHandler+0xa60>)
 801b742:	4293      	cmp	r3, r2
 801b744:	d004      	beq.n	801b750 <HAL_DMA_IRQHandler+0x984>
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	4a39      	ldr	r2, [pc, #228]	@ (801b830 <HAL_DMA_IRQHandler+0xa64>)
 801b74c:	4293      	cmp	r3, r2
 801b74e:	d101      	bne.n	801b754 <HAL_DMA_IRQHandler+0x988>
 801b750:	2301      	movs	r3, #1
 801b752:	e000      	b.n	801b756 <HAL_DMA_IRQHandler+0x98a>
 801b754:	2300      	movs	r3, #0
 801b756:	2b00      	cmp	r3, #0
 801b758:	f000 823f 	beq.w	801bbda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801b764:	687b      	ldr	r3, [r7, #4]
 801b766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b768:	f003 031f 	and.w	r3, r3, #31
 801b76c:	2204      	movs	r2, #4
 801b76e:	409a      	lsls	r2, r3
 801b770:	697b      	ldr	r3, [r7, #20]
 801b772:	4013      	ands	r3, r2
 801b774:	2b00      	cmp	r3, #0
 801b776:	f000 80cd 	beq.w	801b914 <HAL_DMA_IRQHandler+0xb48>
 801b77a:	693b      	ldr	r3, [r7, #16]
 801b77c:	f003 0304 	and.w	r3, r3, #4
 801b780:	2b00      	cmp	r3, #0
 801b782:	f000 80c7 	beq.w	801b914 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b78a:	f003 031f 	and.w	r3, r3, #31
 801b78e:	2204      	movs	r2, #4
 801b790:	409a      	lsls	r2, r3
 801b792:	69fb      	ldr	r3, [r7, #28]
 801b794:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b796:	693b      	ldr	r3, [r7, #16]
 801b798:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b79c:	2b00      	cmp	r3, #0
 801b79e:	d049      	beq.n	801b834 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b7a0:	693b      	ldr	r3, [r7, #16]
 801b7a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d109      	bne.n	801b7be <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b7ae:	2b00      	cmp	r3, #0
 801b7b0:	f000 8210 	beq.w	801bbd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b7b8:	6878      	ldr	r0, [r7, #4]
 801b7ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b7bc:	e20a      	b.n	801bbd4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801b7be:	687b      	ldr	r3, [r7, #4]
 801b7c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	f000 8206 	beq.w	801bbd4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801b7c8:	687b      	ldr	r3, [r7, #4]
 801b7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b7cc:	6878      	ldr	r0, [r7, #4]
 801b7ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b7d0:	e200      	b.n	801bbd4 <HAL_DMA_IRQHandler+0xe08>
 801b7d2:	bf00      	nop
 801b7d4:	40020010 	.word	0x40020010
 801b7d8:	40020028 	.word	0x40020028
 801b7dc:	40020040 	.word	0x40020040
 801b7e0:	40020058 	.word	0x40020058
 801b7e4:	40020070 	.word	0x40020070
 801b7e8:	40020088 	.word	0x40020088
 801b7ec:	400200a0 	.word	0x400200a0
 801b7f0:	400200b8 	.word	0x400200b8
 801b7f4:	40020410 	.word	0x40020410
 801b7f8:	40020428 	.word	0x40020428
 801b7fc:	40020440 	.word	0x40020440
 801b800:	40020458 	.word	0x40020458
 801b804:	40020470 	.word	0x40020470
 801b808:	40020488 	.word	0x40020488
 801b80c:	400204a0 	.word	0x400204a0
 801b810:	400204b8 	.word	0x400204b8
 801b814:	58025408 	.word	0x58025408
 801b818:	5802541c 	.word	0x5802541c
 801b81c:	58025430 	.word	0x58025430
 801b820:	58025444 	.word	0x58025444
 801b824:	58025458 	.word	0x58025458
 801b828:	5802546c 	.word	0x5802546c
 801b82c:	58025480 	.word	0x58025480
 801b830:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b834:	693b      	ldr	r3, [r7, #16]
 801b836:	f003 0320 	and.w	r3, r3, #32
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d160      	bne.n	801b900 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	681b      	ldr	r3, [r3, #0]
 801b842:	4a7f      	ldr	r2, [pc, #508]	@ (801ba40 <HAL_DMA_IRQHandler+0xc74>)
 801b844:	4293      	cmp	r3, r2
 801b846:	d04a      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	4a7d      	ldr	r2, [pc, #500]	@ (801ba44 <HAL_DMA_IRQHandler+0xc78>)
 801b84e:	4293      	cmp	r3, r2
 801b850:	d045      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b852:	687b      	ldr	r3, [r7, #4]
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	4a7c      	ldr	r2, [pc, #496]	@ (801ba48 <HAL_DMA_IRQHandler+0xc7c>)
 801b858:	4293      	cmp	r3, r2
 801b85a:	d040      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b85c:	687b      	ldr	r3, [r7, #4]
 801b85e:	681b      	ldr	r3, [r3, #0]
 801b860:	4a7a      	ldr	r2, [pc, #488]	@ (801ba4c <HAL_DMA_IRQHandler+0xc80>)
 801b862:	4293      	cmp	r3, r2
 801b864:	d03b      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b866:	687b      	ldr	r3, [r7, #4]
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	4a79      	ldr	r2, [pc, #484]	@ (801ba50 <HAL_DMA_IRQHandler+0xc84>)
 801b86c:	4293      	cmp	r3, r2
 801b86e:	d036      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	4a77      	ldr	r2, [pc, #476]	@ (801ba54 <HAL_DMA_IRQHandler+0xc88>)
 801b876:	4293      	cmp	r3, r2
 801b878:	d031      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	681b      	ldr	r3, [r3, #0]
 801b87e:	4a76      	ldr	r2, [pc, #472]	@ (801ba58 <HAL_DMA_IRQHandler+0xc8c>)
 801b880:	4293      	cmp	r3, r2
 801b882:	d02c      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	4a74      	ldr	r2, [pc, #464]	@ (801ba5c <HAL_DMA_IRQHandler+0xc90>)
 801b88a:	4293      	cmp	r3, r2
 801b88c:	d027      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	681b      	ldr	r3, [r3, #0]
 801b892:	4a73      	ldr	r2, [pc, #460]	@ (801ba60 <HAL_DMA_IRQHandler+0xc94>)
 801b894:	4293      	cmp	r3, r2
 801b896:	d022      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b898:	687b      	ldr	r3, [r7, #4]
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	4a71      	ldr	r2, [pc, #452]	@ (801ba64 <HAL_DMA_IRQHandler+0xc98>)
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	d01d      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	681b      	ldr	r3, [r3, #0]
 801b8a6:	4a70      	ldr	r2, [pc, #448]	@ (801ba68 <HAL_DMA_IRQHandler+0xc9c>)
 801b8a8:	4293      	cmp	r3, r2
 801b8aa:	d018      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b8ac:	687b      	ldr	r3, [r7, #4]
 801b8ae:	681b      	ldr	r3, [r3, #0]
 801b8b0:	4a6e      	ldr	r2, [pc, #440]	@ (801ba6c <HAL_DMA_IRQHandler+0xca0>)
 801b8b2:	4293      	cmp	r3, r2
 801b8b4:	d013      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b8b6:	687b      	ldr	r3, [r7, #4]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	4a6d      	ldr	r2, [pc, #436]	@ (801ba70 <HAL_DMA_IRQHandler+0xca4>)
 801b8bc:	4293      	cmp	r3, r2
 801b8be:	d00e      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	4a6b      	ldr	r2, [pc, #428]	@ (801ba74 <HAL_DMA_IRQHandler+0xca8>)
 801b8c6:	4293      	cmp	r3, r2
 801b8c8:	d009      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	4a6a      	ldr	r2, [pc, #424]	@ (801ba78 <HAL_DMA_IRQHandler+0xcac>)
 801b8d0:	4293      	cmp	r3, r2
 801b8d2:	d004      	beq.n	801b8de <HAL_DMA_IRQHandler+0xb12>
 801b8d4:	687b      	ldr	r3, [r7, #4]
 801b8d6:	681b      	ldr	r3, [r3, #0]
 801b8d8:	4a68      	ldr	r2, [pc, #416]	@ (801ba7c <HAL_DMA_IRQHandler+0xcb0>)
 801b8da:	4293      	cmp	r3, r2
 801b8dc:	d108      	bne.n	801b8f0 <HAL_DMA_IRQHandler+0xb24>
 801b8de:	687b      	ldr	r3, [r7, #4]
 801b8e0:	681b      	ldr	r3, [r3, #0]
 801b8e2:	681a      	ldr	r2, [r3, #0]
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	f022 0208 	bic.w	r2, r2, #8
 801b8ec:	601a      	str	r2, [r3, #0]
 801b8ee:	e007      	b.n	801b900 <HAL_DMA_IRQHandler+0xb34>
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	681b      	ldr	r3, [r3, #0]
 801b8f4:	681a      	ldr	r2, [r3, #0]
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	681b      	ldr	r3, [r3, #0]
 801b8fa:	f022 0204 	bic.w	r2, r2, #4
 801b8fe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801b900:	687b      	ldr	r3, [r7, #4]
 801b902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b904:	2b00      	cmp	r3, #0
 801b906:	f000 8165 	beq.w	801bbd4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801b90a:	687b      	ldr	r3, [r7, #4]
 801b90c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801b90e:	6878      	ldr	r0, [r7, #4]
 801b910:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b912:	e15f      	b.n	801bbd4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801b914:	687b      	ldr	r3, [r7, #4]
 801b916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b918:	f003 031f 	and.w	r3, r3, #31
 801b91c:	2202      	movs	r2, #2
 801b91e:	409a      	lsls	r2, r3
 801b920:	697b      	ldr	r3, [r7, #20]
 801b922:	4013      	ands	r3, r2
 801b924:	2b00      	cmp	r3, #0
 801b926:	f000 80c5 	beq.w	801bab4 <HAL_DMA_IRQHandler+0xce8>
 801b92a:	693b      	ldr	r3, [r7, #16]
 801b92c:	f003 0302 	and.w	r3, r3, #2
 801b930:	2b00      	cmp	r3, #0
 801b932:	f000 80bf 	beq.w	801bab4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b93a:	f003 031f 	and.w	r3, r3, #31
 801b93e:	2202      	movs	r2, #2
 801b940:	409a      	lsls	r2, r3
 801b942:	69fb      	ldr	r3, [r7, #28]
 801b944:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b946:	693b      	ldr	r3, [r7, #16]
 801b948:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	d018      	beq.n	801b982 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801b950:	693b      	ldr	r3, [r7, #16]
 801b952:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b956:	2b00      	cmp	r3, #0
 801b958:	d109      	bne.n	801b96e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b95e:	2b00      	cmp	r3, #0
 801b960:	f000 813a 	beq.w	801bbd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801b968:	6878      	ldr	r0, [r7, #4]
 801b96a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b96c:	e134      	b.n	801bbd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b972:	2b00      	cmp	r3, #0
 801b974:	f000 8130 	beq.w	801bbd8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b97c:	6878      	ldr	r0, [r7, #4]
 801b97e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b980:	e12a      	b.n	801bbd8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801b982:	693b      	ldr	r3, [r7, #16]
 801b984:	f003 0320 	and.w	r3, r3, #32
 801b988:	2b00      	cmp	r3, #0
 801b98a:	f040 8089 	bne.w	801baa0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	681b      	ldr	r3, [r3, #0]
 801b992:	4a2b      	ldr	r2, [pc, #172]	@ (801ba40 <HAL_DMA_IRQHandler+0xc74>)
 801b994:	4293      	cmp	r3, r2
 801b996:	d04a      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	4a29      	ldr	r2, [pc, #164]	@ (801ba44 <HAL_DMA_IRQHandler+0xc78>)
 801b99e:	4293      	cmp	r3, r2
 801b9a0:	d045      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	681b      	ldr	r3, [r3, #0]
 801b9a6:	4a28      	ldr	r2, [pc, #160]	@ (801ba48 <HAL_DMA_IRQHandler+0xc7c>)
 801b9a8:	4293      	cmp	r3, r2
 801b9aa:	d040      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	4a26      	ldr	r2, [pc, #152]	@ (801ba4c <HAL_DMA_IRQHandler+0xc80>)
 801b9b2:	4293      	cmp	r3, r2
 801b9b4:	d03b      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	4a25      	ldr	r2, [pc, #148]	@ (801ba50 <HAL_DMA_IRQHandler+0xc84>)
 801b9bc:	4293      	cmp	r3, r2
 801b9be:	d036      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	4a23      	ldr	r2, [pc, #140]	@ (801ba54 <HAL_DMA_IRQHandler+0xc88>)
 801b9c6:	4293      	cmp	r3, r2
 801b9c8:	d031      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	4a22      	ldr	r2, [pc, #136]	@ (801ba58 <HAL_DMA_IRQHandler+0xc8c>)
 801b9d0:	4293      	cmp	r3, r2
 801b9d2:	d02c      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9d4:	687b      	ldr	r3, [r7, #4]
 801b9d6:	681b      	ldr	r3, [r3, #0]
 801b9d8:	4a20      	ldr	r2, [pc, #128]	@ (801ba5c <HAL_DMA_IRQHandler+0xc90>)
 801b9da:	4293      	cmp	r3, r2
 801b9dc:	d027      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	681b      	ldr	r3, [r3, #0]
 801b9e2:	4a1f      	ldr	r2, [pc, #124]	@ (801ba60 <HAL_DMA_IRQHandler+0xc94>)
 801b9e4:	4293      	cmp	r3, r2
 801b9e6:	d022      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	681b      	ldr	r3, [r3, #0]
 801b9ec:	4a1d      	ldr	r2, [pc, #116]	@ (801ba64 <HAL_DMA_IRQHandler+0xc98>)
 801b9ee:	4293      	cmp	r3, r2
 801b9f0:	d01d      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	681b      	ldr	r3, [r3, #0]
 801b9f6:	4a1c      	ldr	r2, [pc, #112]	@ (801ba68 <HAL_DMA_IRQHandler+0xc9c>)
 801b9f8:	4293      	cmp	r3, r2
 801b9fa:	d018      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801b9fc:	687b      	ldr	r3, [r7, #4]
 801b9fe:	681b      	ldr	r3, [r3, #0]
 801ba00:	4a1a      	ldr	r2, [pc, #104]	@ (801ba6c <HAL_DMA_IRQHandler+0xca0>)
 801ba02:	4293      	cmp	r3, r2
 801ba04:	d013      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801ba06:	687b      	ldr	r3, [r7, #4]
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	4a19      	ldr	r2, [pc, #100]	@ (801ba70 <HAL_DMA_IRQHandler+0xca4>)
 801ba0c:	4293      	cmp	r3, r2
 801ba0e:	d00e      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	681b      	ldr	r3, [r3, #0]
 801ba14:	4a17      	ldr	r2, [pc, #92]	@ (801ba74 <HAL_DMA_IRQHandler+0xca8>)
 801ba16:	4293      	cmp	r3, r2
 801ba18:	d009      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	4a16      	ldr	r2, [pc, #88]	@ (801ba78 <HAL_DMA_IRQHandler+0xcac>)
 801ba20:	4293      	cmp	r3, r2
 801ba22:	d004      	beq.n	801ba2e <HAL_DMA_IRQHandler+0xc62>
 801ba24:	687b      	ldr	r3, [r7, #4]
 801ba26:	681b      	ldr	r3, [r3, #0]
 801ba28:	4a14      	ldr	r2, [pc, #80]	@ (801ba7c <HAL_DMA_IRQHandler+0xcb0>)
 801ba2a:	4293      	cmp	r3, r2
 801ba2c:	d128      	bne.n	801ba80 <HAL_DMA_IRQHandler+0xcb4>
 801ba2e:	687b      	ldr	r3, [r7, #4]
 801ba30:	681b      	ldr	r3, [r3, #0]
 801ba32:	681a      	ldr	r2, [r3, #0]
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	f022 0214 	bic.w	r2, r2, #20
 801ba3c:	601a      	str	r2, [r3, #0]
 801ba3e:	e027      	b.n	801ba90 <HAL_DMA_IRQHandler+0xcc4>
 801ba40:	40020010 	.word	0x40020010
 801ba44:	40020028 	.word	0x40020028
 801ba48:	40020040 	.word	0x40020040
 801ba4c:	40020058 	.word	0x40020058
 801ba50:	40020070 	.word	0x40020070
 801ba54:	40020088 	.word	0x40020088
 801ba58:	400200a0 	.word	0x400200a0
 801ba5c:	400200b8 	.word	0x400200b8
 801ba60:	40020410 	.word	0x40020410
 801ba64:	40020428 	.word	0x40020428
 801ba68:	40020440 	.word	0x40020440
 801ba6c:	40020458 	.word	0x40020458
 801ba70:	40020470 	.word	0x40020470
 801ba74:	40020488 	.word	0x40020488
 801ba78:	400204a0 	.word	0x400204a0
 801ba7c:	400204b8 	.word	0x400204b8
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	681a      	ldr	r2, [r3, #0]
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	f022 020a 	bic.w	r2, r2, #10
 801ba8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	2201      	movs	r2, #1
 801ba94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801ba98:	687b      	ldr	r3, [r7, #4]
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801baa0:	687b      	ldr	r3, [r7, #4]
 801baa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801baa4:	2b00      	cmp	r3, #0
 801baa6:	f000 8097 	beq.w	801bbd8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801baae:	6878      	ldr	r0, [r7, #4]
 801bab0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bab2:	e091      	b.n	801bbd8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801bab4:	687b      	ldr	r3, [r7, #4]
 801bab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bab8:	f003 031f 	and.w	r3, r3, #31
 801babc:	2208      	movs	r2, #8
 801babe:	409a      	lsls	r2, r3
 801bac0:	697b      	ldr	r3, [r7, #20]
 801bac2:	4013      	ands	r3, r2
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	f000 8088 	beq.w	801bbda <HAL_DMA_IRQHandler+0xe0e>
 801baca:	693b      	ldr	r3, [r7, #16]
 801bacc:	f003 0308 	and.w	r3, r3, #8
 801bad0:	2b00      	cmp	r3, #0
 801bad2:	f000 8082 	beq.w	801bbda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	681b      	ldr	r3, [r3, #0]
 801bada:	4a41      	ldr	r2, [pc, #260]	@ (801bbe0 <HAL_DMA_IRQHandler+0xe14>)
 801badc:	4293      	cmp	r3, r2
 801bade:	d04a      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	4a3f      	ldr	r2, [pc, #252]	@ (801bbe4 <HAL_DMA_IRQHandler+0xe18>)
 801bae6:	4293      	cmp	r3, r2
 801bae8:	d045      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	681b      	ldr	r3, [r3, #0]
 801baee:	4a3e      	ldr	r2, [pc, #248]	@ (801bbe8 <HAL_DMA_IRQHandler+0xe1c>)
 801baf0:	4293      	cmp	r3, r2
 801baf2:	d040      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	4a3c      	ldr	r2, [pc, #240]	@ (801bbec <HAL_DMA_IRQHandler+0xe20>)
 801bafa:	4293      	cmp	r3, r2
 801bafc:	d03b      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	4a3b      	ldr	r2, [pc, #236]	@ (801bbf0 <HAL_DMA_IRQHandler+0xe24>)
 801bb04:	4293      	cmp	r3, r2
 801bb06:	d036      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	681b      	ldr	r3, [r3, #0]
 801bb0c:	4a39      	ldr	r2, [pc, #228]	@ (801bbf4 <HAL_DMA_IRQHandler+0xe28>)
 801bb0e:	4293      	cmp	r3, r2
 801bb10:	d031      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	4a38      	ldr	r2, [pc, #224]	@ (801bbf8 <HAL_DMA_IRQHandler+0xe2c>)
 801bb18:	4293      	cmp	r3, r2
 801bb1a:	d02c      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb1c:	687b      	ldr	r3, [r7, #4]
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	4a36      	ldr	r2, [pc, #216]	@ (801bbfc <HAL_DMA_IRQHandler+0xe30>)
 801bb22:	4293      	cmp	r3, r2
 801bb24:	d027      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb26:	687b      	ldr	r3, [r7, #4]
 801bb28:	681b      	ldr	r3, [r3, #0]
 801bb2a:	4a35      	ldr	r2, [pc, #212]	@ (801bc00 <HAL_DMA_IRQHandler+0xe34>)
 801bb2c:	4293      	cmp	r3, r2
 801bb2e:	d022      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	4a33      	ldr	r2, [pc, #204]	@ (801bc04 <HAL_DMA_IRQHandler+0xe38>)
 801bb36:	4293      	cmp	r3, r2
 801bb38:	d01d      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	681b      	ldr	r3, [r3, #0]
 801bb3e:	4a32      	ldr	r2, [pc, #200]	@ (801bc08 <HAL_DMA_IRQHandler+0xe3c>)
 801bb40:	4293      	cmp	r3, r2
 801bb42:	d018      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	4a30      	ldr	r2, [pc, #192]	@ (801bc0c <HAL_DMA_IRQHandler+0xe40>)
 801bb4a:	4293      	cmp	r3, r2
 801bb4c:	d013      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	4a2f      	ldr	r2, [pc, #188]	@ (801bc10 <HAL_DMA_IRQHandler+0xe44>)
 801bb54:	4293      	cmp	r3, r2
 801bb56:	d00e      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	681b      	ldr	r3, [r3, #0]
 801bb5c:	4a2d      	ldr	r2, [pc, #180]	@ (801bc14 <HAL_DMA_IRQHandler+0xe48>)
 801bb5e:	4293      	cmp	r3, r2
 801bb60:	d009      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	4a2c      	ldr	r2, [pc, #176]	@ (801bc18 <HAL_DMA_IRQHandler+0xe4c>)
 801bb68:	4293      	cmp	r3, r2
 801bb6a:	d004      	beq.n	801bb76 <HAL_DMA_IRQHandler+0xdaa>
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	4a2a      	ldr	r2, [pc, #168]	@ (801bc1c <HAL_DMA_IRQHandler+0xe50>)
 801bb72:	4293      	cmp	r3, r2
 801bb74:	d108      	bne.n	801bb88 <HAL_DMA_IRQHandler+0xdbc>
 801bb76:	687b      	ldr	r3, [r7, #4]
 801bb78:	681b      	ldr	r3, [r3, #0]
 801bb7a:	681a      	ldr	r2, [r3, #0]
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	f022 021c 	bic.w	r2, r2, #28
 801bb84:	601a      	str	r2, [r3, #0]
 801bb86:	e007      	b.n	801bb98 <HAL_DMA_IRQHandler+0xdcc>
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	681a      	ldr	r2, [r3, #0]
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	f022 020e 	bic.w	r2, r2, #14
 801bb96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801bb9c:	f003 031f 	and.w	r3, r3, #31
 801bba0:	2201      	movs	r2, #1
 801bba2:	409a      	lsls	r2, r3
 801bba4:	69fb      	ldr	r3, [r7, #28]
 801bba6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	2201      	movs	r2, #1
 801bbac:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801bbae:	687b      	ldr	r3, [r7, #4]
 801bbb0:	2201      	movs	r2, #1
 801bbb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801bbb6:	687b      	ldr	r3, [r7, #4]
 801bbb8:	2200      	movs	r2, #0
 801bbba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d009      	beq.n	801bbda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801bbca:	6878      	ldr	r0, [r7, #4]
 801bbcc:	4798      	blx	r3
 801bbce:	e004      	b.n	801bbda <HAL_DMA_IRQHandler+0xe0e>
          return;
 801bbd0:	bf00      	nop
 801bbd2:	e002      	b.n	801bbda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bbd4:	bf00      	nop
 801bbd6:	e000      	b.n	801bbda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801bbd8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801bbda:	3728      	adds	r7, #40	@ 0x28
 801bbdc:	46bd      	mov	sp, r7
 801bbde:	bd80      	pop	{r7, pc}
 801bbe0:	40020010 	.word	0x40020010
 801bbe4:	40020028 	.word	0x40020028
 801bbe8:	40020040 	.word	0x40020040
 801bbec:	40020058 	.word	0x40020058
 801bbf0:	40020070 	.word	0x40020070
 801bbf4:	40020088 	.word	0x40020088
 801bbf8:	400200a0 	.word	0x400200a0
 801bbfc:	400200b8 	.word	0x400200b8
 801bc00:	40020410 	.word	0x40020410
 801bc04:	40020428 	.word	0x40020428
 801bc08:	40020440 	.word	0x40020440
 801bc0c:	40020458 	.word	0x40020458
 801bc10:	40020470 	.word	0x40020470
 801bc14:	40020488 	.word	0x40020488
 801bc18:	400204a0 	.word	0x400204a0
 801bc1c:	400204b8 	.word	0x400204b8

0801bc20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801bc20:	b480      	push	{r7}
 801bc22:	b085      	sub	sp, #20
 801bc24:	af00      	add	r7, sp, #0
 801bc26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	681b      	ldr	r3, [r3, #0]
 801bc2c:	4a42      	ldr	r2, [pc, #264]	@ (801bd38 <DMA_CalcBaseAndBitshift+0x118>)
 801bc2e:	4293      	cmp	r3, r2
 801bc30:	d04a      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	4a41      	ldr	r2, [pc, #260]	@ (801bd3c <DMA_CalcBaseAndBitshift+0x11c>)
 801bc38:	4293      	cmp	r3, r2
 801bc3a:	d045      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	4a3f      	ldr	r2, [pc, #252]	@ (801bd40 <DMA_CalcBaseAndBitshift+0x120>)
 801bc42:	4293      	cmp	r3, r2
 801bc44:	d040      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	4a3e      	ldr	r2, [pc, #248]	@ (801bd44 <DMA_CalcBaseAndBitshift+0x124>)
 801bc4c:	4293      	cmp	r3, r2
 801bc4e:	d03b      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	4a3c      	ldr	r2, [pc, #240]	@ (801bd48 <DMA_CalcBaseAndBitshift+0x128>)
 801bc56:	4293      	cmp	r3, r2
 801bc58:	d036      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc5a:	687b      	ldr	r3, [r7, #4]
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	4a3b      	ldr	r2, [pc, #236]	@ (801bd4c <DMA_CalcBaseAndBitshift+0x12c>)
 801bc60:	4293      	cmp	r3, r2
 801bc62:	d031      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc64:	687b      	ldr	r3, [r7, #4]
 801bc66:	681b      	ldr	r3, [r3, #0]
 801bc68:	4a39      	ldr	r2, [pc, #228]	@ (801bd50 <DMA_CalcBaseAndBitshift+0x130>)
 801bc6a:	4293      	cmp	r3, r2
 801bc6c:	d02c      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc6e:	687b      	ldr	r3, [r7, #4]
 801bc70:	681b      	ldr	r3, [r3, #0]
 801bc72:	4a38      	ldr	r2, [pc, #224]	@ (801bd54 <DMA_CalcBaseAndBitshift+0x134>)
 801bc74:	4293      	cmp	r3, r2
 801bc76:	d027      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	4a36      	ldr	r2, [pc, #216]	@ (801bd58 <DMA_CalcBaseAndBitshift+0x138>)
 801bc7e:	4293      	cmp	r3, r2
 801bc80:	d022      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc82:	687b      	ldr	r3, [r7, #4]
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	4a35      	ldr	r2, [pc, #212]	@ (801bd5c <DMA_CalcBaseAndBitshift+0x13c>)
 801bc88:	4293      	cmp	r3, r2
 801bc8a:	d01d      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc8c:	687b      	ldr	r3, [r7, #4]
 801bc8e:	681b      	ldr	r3, [r3, #0]
 801bc90:	4a33      	ldr	r2, [pc, #204]	@ (801bd60 <DMA_CalcBaseAndBitshift+0x140>)
 801bc92:	4293      	cmp	r3, r2
 801bc94:	d018      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bc96:	687b      	ldr	r3, [r7, #4]
 801bc98:	681b      	ldr	r3, [r3, #0]
 801bc9a:	4a32      	ldr	r2, [pc, #200]	@ (801bd64 <DMA_CalcBaseAndBitshift+0x144>)
 801bc9c:	4293      	cmp	r3, r2
 801bc9e:	d013      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bca0:	687b      	ldr	r3, [r7, #4]
 801bca2:	681b      	ldr	r3, [r3, #0]
 801bca4:	4a30      	ldr	r2, [pc, #192]	@ (801bd68 <DMA_CalcBaseAndBitshift+0x148>)
 801bca6:	4293      	cmp	r3, r2
 801bca8:	d00e      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bcaa:	687b      	ldr	r3, [r7, #4]
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	4a2f      	ldr	r2, [pc, #188]	@ (801bd6c <DMA_CalcBaseAndBitshift+0x14c>)
 801bcb0:	4293      	cmp	r3, r2
 801bcb2:	d009      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bcb4:	687b      	ldr	r3, [r7, #4]
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	4a2d      	ldr	r2, [pc, #180]	@ (801bd70 <DMA_CalcBaseAndBitshift+0x150>)
 801bcba:	4293      	cmp	r3, r2
 801bcbc:	d004      	beq.n	801bcc8 <DMA_CalcBaseAndBitshift+0xa8>
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	4a2c      	ldr	r2, [pc, #176]	@ (801bd74 <DMA_CalcBaseAndBitshift+0x154>)
 801bcc4:	4293      	cmp	r3, r2
 801bcc6:	d101      	bne.n	801bccc <DMA_CalcBaseAndBitshift+0xac>
 801bcc8:	2301      	movs	r3, #1
 801bcca:	e000      	b.n	801bcce <DMA_CalcBaseAndBitshift+0xae>
 801bccc:	2300      	movs	r3, #0
 801bcce:	2b00      	cmp	r3, #0
 801bcd0:	d024      	beq.n	801bd1c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	681b      	ldr	r3, [r3, #0]
 801bcd6:	b2db      	uxtb	r3, r3
 801bcd8:	3b10      	subs	r3, #16
 801bcda:	4a27      	ldr	r2, [pc, #156]	@ (801bd78 <DMA_CalcBaseAndBitshift+0x158>)
 801bcdc:	fba2 2303 	umull	r2, r3, r2, r3
 801bce0:	091b      	lsrs	r3, r3, #4
 801bce2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	f003 0307 	and.w	r3, r3, #7
 801bcea:	4a24      	ldr	r2, [pc, #144]	@ (801bd7c <DMA_CalcBaseAndBitshift+0x15c>)
 801bcec:	5cd3      	ldrb	r3, [r2, r3]
 801bcee:	461a      	mov	r2, r3
 801bcf0:	687b      	ldr	r3, [r7, #4]
 801bcf2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801bcf4:	68fb      	ldr	r3, [r7, #12]
 801bcf6:	2b03      	cmp	r3, #3
 801bcf8:	d908      	bls.n	801bd0c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	681b      	ldr	r3, [r3, #0]
 801bcfe:	461a      	mov	r2, r3
 801bd00:	4b1f      	ldr	r3, [pc, #124]	@ (801bd80 <DMA_CalcBaseAndBitshift+0x160>)
 801bd02:	4013      	ands	r3, r2
 801bd04:	1d1a      	adds	r2, r3, #4
 801bd06:	687b      	ldr	r3, [r7, #4]
 801bd08:	659a      	str	r2, [r3, #88]	@ 0x58
 801bd0a:	e00d      	b.n	801bd28 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801bd0c:	687b      	ldr	r3, [r7, #4]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	461a      	mov	r2, r3
 801bd12:	4b1b      	ldr	r3, [pc, #108]	@ (801bd80 <DMA_CalcBaseAndBitshift+0x160>)
 801bd14:	4013      	ands	r3, r2
 801bd16:	687a      	ldr	r2, [r7, #4]
 801bd18:	6593      	str	r3, [r2, #88]	@ 0x58
 801bd1a:	e005      	b.n	801bd28 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	681b      	ldr	r3, [r3, #0]
 801bd20:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801bd2c:	4618      	mov	r0, r3
 801bd2e:	3714      	adds	r7, #20
 801bd30:	46bd      	mov	sp, r7
 801bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd36:	4770      	bx	lr
 801bd38:	40020010 	.word	0x40020010
 801bd3c:	40020028 	.word	0x40020028
 801bd40:	40020040 	.word	0x40020040
 801bd44:	40020058 	.word	0x40020058
 801bd48:	40020070 	.word	0x40020070
 801bd4c:	40020088 	.word	0x40020088
 801bd50:	400200a0 	.word	0x400200a0
 801bd54:	400200b8 	.word	0x400200b8
 801bd58:	40020410 	.word	0x40020410
 801bd5c:	40020428 	.word	0x40020428
 801bd60:	40020440 	.word	0x40020440
 801bd64:	40020458 	.word	0x40020458
 801bd68:	40020470 	.word	0x40020470
 801bd6c:	40020488 	.word	0x40020488
 801bd70:	400204a0 	.word	0x400204a0
 801bd74:	400204b8 	.word	0x400204b8
 801bd78:	aaaaaaab 	.word	0xaaaaaaab
 801bd7c:	08027698 	.word	0x08027698
 801bd80:	fffffc00 	.word	0xfffffc00

0801bd84 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801bd84:	b480      	push	{r7}
 801bd86:	b085      	sub	sp, #20
 801bd88:	af00      	add	r7, sp, #0
 801bd8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bd8c:	2300      	movs	r3, #0
 801bd8e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801bd90:	687b      	ldr	r3, [r7, #4]
 801bd92:	699b      	ldr	r3, [r3, #24]
 801bd94:	2b00      	cmp	r3, #0
 801bd96:	d120      	bne.n	801bdda <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801bd98:	687b      	ldr	r3, [r7, #4]
 801bd9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bd9c:	2b03      	cmp	r3, #3
 801bd9e:	d858      	bhi.n	801be52 <DMA_CheckFifoParam+0xce>
 801bda0:	a201      	add	r2, pc, #4	@ (adr r2, 801bda8 <DMA_CheckFifoParam+0x24>)
 801bda2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bda6:	bf00      	nop
 801bda8:	0801bdb9 	.word	0x0801bdb9
 801bdac:	0801bdcb 	.word	0x0801bdcb
 801bdb0:	0801bdb9 	.word	0x0801bdb9
 801bdb4:	0801be53 	.word	0x0801be53
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801bdc0:	2b00      	cmp	r3, #0
 801bdc2:	d048      	beq.n	801be56 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801bdc4:	2301      	movs	r3, #1
 801bdc6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801bdc8:	e045      	b.n	801be56 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801bdca:	687b      	ldr	r3, [r7, #4]
 801bdcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bdce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801bdd2:	d142      	bne.n	801be5a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801bdd4:	2301      	movs	r3, #1
 801bdd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801bdd8:	e03f      	b.n	801be5a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	699b      	ldr	r3, [r3, #24]
 801bdde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801bde2:	d123      	bne.n	801be2c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801bde4:	687b      	ldr	r3, [r7, #4]
 801bde6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bde8:	2b03      	cmp	r3, #3
 801bdea:	d838      	bhi.n	801be5e <DMA_CheckFifoParam+0xda>
 801bdec:	a201      	add	r2, pc, #4	@ (adr r2, 801bdf4 <DMA_CheckFifoParam+0x70>)
 801bdee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bdf2:	bf00      	nop
 801bdf4:	0801be05 	.word	0x0801be05
 801bdf8:	0801be0b 	.word	0x0801be0b
 801bdfc:	0801be05 	.word	0x0801be05
 801be00:	0801be1d 	.word	0x0801be1d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801be04:	2301      	movs	r3, #1
 801be06:	73fb      	strb	r3, [r7, #15]
        break;
 801be08:	e030      	b.n	801be6c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801be12:	2b00      	cmp	r3, #0
 801be14:	d025      	beq.n	801be62 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801be16:	2301      	movs	r3, #1
 801be18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801be1a:	e022      	b.n	801be62 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801be1c:	687b      	ldr	r3, [r7, #4]
 801be1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be20:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801be24:	d11f      	bne.n	801be66 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801be26:	2301      	movs	r3, #1
 801be28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801be2a:	e01c      	b.n	801be66 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801be2c:	687b      	ldr	r3, [r7, #4]
 801be2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be30:	2b02      	cmp	r3, #2
 801be32:	d902      	bls.n	801be3a <DMA_CheckFifoParam+0xb6>
 801be34:	2b03      	cmp	r3, #3
 801be36:	d003      	beq.n	801be40 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801be38:	e018      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801be3a:	2301      	movs	r3, #1
 801be3c:	73fb      	strb	r3, [r7, #15]
        break;
 801be3e:	e015      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801be40:	687b      	ldr	r3, [r7, #4]
 801be42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801be48:	2b00      	cmp	r3, #0
 801be4a:	d00e      	beq.n	801be6a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801be4c:	2301      	movs	r3, #1
 801be4e:	73fb      	strb	r3, [r7, #15]
    break;
 801be50:	e00b      	b.n	801be6a <DMA_CheckFifoParam+0xe6>
        break;
 801be52:	bf00      	nop
 801be54:	e00a      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
        break;
 801be56:	bf00      	nop
 801be58:	e008      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
        break;
 801be5a:	bf00      	nop
 801be5c:	e006      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
        break;
 801be5e:	bf00      	nop
 801be60:	e004      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
        break;
 801be62:	bf00      	nop
 801be64:	e002      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
        break;
 801be66:	bf00      	nop
 801be68:	e000      	b.n	801be6c <DMA_CheckFifoParam+0xe8>
    break;
 801be6a:	bf00      	nop
    }
  }

  return status;
 801be6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801be6e:	4618      	mov	r0, r3
 801be70:	3714      	adds	r7, #20
 801be72:	46bd      	mov	sp, r7
 801be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be78:	4770      	bx	lr
 801be7a:	bf00      	nop

0801be7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801be7c:	b480      	push	{r7}
 801be7e:	b085      	sub	sp, #20
 801be80:	af00      	add	r7, sp, #0
 801be82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	681b      	ldr	r3, [r3, #0]
 801be88:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	681b      	ldr	r3, [r3, #0]
 801be8e:	4a38      	ldr	r2, [pc, #224]	@ (801bf70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801be90:	4293      	cmp	r3, r2
 801be92:	d022      	beq.n	801beda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801be94:	687b      	ldr	r3, [r7, #4]
 801be96:	681b      	ldr	r3, [r3, #0]
 801be98:	4a36      	ldr	r2, [pc, #216]	@ (801bf74 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801be9a:	4293      	cmp	r3, r2
 801be9c:	d01d      	beq.n	801beda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	4a35      	ldr	r2, [pc, #212]	@ (801bf78 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801bea4:	4293      	cmp	r3, r2
 801bea6:	d018      	beq.n	801beda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	681b      	ldr	r3, [r3, #0]
 801beac:	4a33      	ldr	r2, [pc, #204]	@ (801bf7c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801beae:	4293      	cmp	r3, r2
 801beb0:	d013      	beq.n	801beda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801beb2:	687b      	ldr	r3, [r7, #4]
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	4a32      	ldr	r2, [pc, #200]	@ (801bf80 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801beb8:	4293      	cmp	r3, r2
 801beba:	d00e      	beq.n	801beda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	681b      	ldr	r3, [r3, #0]
 801bec0:	4a30      	ldr	r2, [pc, #192]	@ (801bf84 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801bec2:	4293      	cmp	r3, r2
 801bec4:	d009      	beq.n	801beda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	681b      	ldr	r3, [r3, #0]
 801beca:	4a2f      	ldr	r2, [pc, #188]	@ (801bf88 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801becc:	4293      	cmp	r3, r2
 801bece:	d004      	beq.n	801beda <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	4a2d      	ldr	r2, [pc, #180]	@ (801bf8c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801bed6:	4293      	cmp	r3, r2
 801bed8:	d101      	bne.n	801bede <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801beda:	2301      	movs	r3, #1
 801bedc:	e000      	b.n	801bee0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801bede:	2300      	movs	r3, #0
 801bee0:	2b00      	cmp	r3, #0
 801bee2:	d01a      	beq.n	801bf1a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801bee4:	687b      	ldr	r3, [r7, #4]
 801bee6:	681b      	ldr	r3, [r3, #0]
 801bee8:	b2db      	uxtb	r3, r3
 801beea:	3b08      	subs	r3, #8
 801beec:	4a28      	ldr	r2, [pc, #160]	@ (801bf90 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801beee:	fba2 2303 	umull	r2, r3, r2, r3
 801bef2:	091b      	lsrs	r3, r3, #4
 801bef4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801bef6:	68fa      	ldr	r2, [r7, #12]
 801bef8:	4b26      	ldr	r3, [pc, #152]	@ (801bf94 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801befa:	4413      	add	r3, r2
 801befc:	009b      	lsls	r3, r3, #2
 801befe:	461a      	mov	r2, r3
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801bf04:	687b      	ldr	r3, [r7, #4]
 801bf06:	4a24      	ldr	r2, [pc, #144]	@ (801bf98 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801bf08:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801bf0a:	68fb      	ldr	r3, [r7, #12]
 801bf0c:	f003 031f 	and.w	r3, r3, #31
 801bf10:	2201      	movs	r2, #1
 801bf12:	409a      	lsls	r2, r3
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801bf18:	e024      	b.n	801bf64 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	b2db      	uxtb	r3, r3
 801bf20:	3b10      	subs	r3, #16
 801bf22:	4a1e      	ldr	r2, [pc, #120]	@ (801bf9c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801bf24:	fba2 2303 	umull	r2, r3, r2, r3
 801bf28:	091b      	lsrs	r3, r3, #4
 801bf2a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801bf2c:	68bb      	ldr	r3, [r7, #8]
 801bf2e:	4a1c      	ldr	r2, [pc, #112]	@ (801bfa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801bf30:	4293      	cmp	r3, r2
 801bf32:	d806      	bhi.n	801bf42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801bf34:	68bb      	ldr	r3, [r7, #8]
 801bf36:	4a1b      	ldr	r2, [pc, #108]	@ (801bfa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801bf38:	4293      	cmp	r3, r2
 801bf3a:	d902      	bls.n	801bf42 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801bf3c:	68fb      	ldr	r3, [r7, #12]
 801bf3e:	3308      	adds	r3, #8
 801bf40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801bf42:	68fa      	ldr	r2, [r7, #12]
 801bf44:	4b18      	ldr	r3, [pc, #96]	@ (801bfa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801bf46:	4413      	add	r3, r2
 801bf48:	009b      	lsls	r3, r3, #2
 801bf4a:	461a      	mov	r2, r3
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	4a16      	ldr	r2, [pc, #88]	@ (801bfac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801bf54:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801bf56:	68fb      	ldr	r3, [r7, #12]
 801bf58:	f003 031f 	and.w	r3, r3, #31
 801bf5c:	2201      	movs	r2, #1
 801bf5e:	409a      	lsls	r2, r3
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801bf64:	bf00      	nop
 801bf66:	3714      	adds	r7, #20
 801bf68:	46bd      	mov	sp, r7
 801bf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf6e:	4770      	bx	lr
 801bf70:	58025408 	.word	0x58025408
 801bf74:	5802541c 	.word	0x5802541c
 801bf78:	58025430 	.word	0x58025430
 801bf7c:	58025444 	.word	0x58025444
 801bf80:	58025458 	.word	0x58025458
 801bf84:	5802546c 	.word	0x5802546c
 801bf88:	58025480 	.word	0x58025480
 801bf8c:	58025494 	.word	0x58025494
 801bf90:	cccccccd 	.word	0xcccccccd
 801bf94:	16009600 	.word	0x16009600
 801bf98:	58025880 	.word	0x58025880
 801bf9c:	aaaaaaab 	.word	0xaaaaaaab
 801bfa0:	400204b8 	.word	0x400204b8
 801bfa4:	4002040f 	.word	0x4002040f
 801bfa8:	10008200 	.word	0x10008200
 801bfac:	40020880 	.word	0x40020880

0801bfb0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801bfb0:	b480      	push	{r7}
 801bfb2:	b085      	sub	sp, #20
 801bfb4:	af00      	add	r7, sp, #0
 801bfb6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801bfb8:	687b      	ldr	r3, [r7, #4]
 801bfba:	685b      	ldr	r3, [r3, #4]
 801bfbc:	b2db      	uxtb	r3, r3
 801bfbe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801bfc0:	68fb      	ldr	r3, [r7, #12]
 801bfc2:	2b00      	cmp	r3, #0
 801bfc4:	d04a      	beq.n	801c05c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801bfc6:	68fb      	ldr	r3, [r7, #12]
 801bfc8:	2b08      	cmp	r3, #8
 801bfca:	d847      	bhi.n	801c05c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	681b      	ldr	r3, [r3, #0]
 801bfd0:	4a25      	ldr	r2, [pc, #148]	@ (801c068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801bfd2:	4293      	cmp	r3, r2
 801bfd4:	d022      	beq.n	801c01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bfd6:	687b      	ldr	r3, [r7, #4]
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	4a24      	ldr	r2, [pc, #144]	@ (801c06c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801bfdc:	4293      	cmp	r3, r2
 801bfde:	d01d      	beq.n	801c01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	4a22      	ldr	r2, [pc, #136]	@ (801c070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801bfe6:	4293      	cmp	r3, r2
 801bfe8:	d018      	beq.n	801c01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bfea:	687b      	ldr	r3, [r7, #4]
 801bfec:	681b      	ldr	r3, [r3, #0]
 801bfee:	4a21      	ldr	r2, [pc, #132]	@ (801c074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801bff0:	4293      	cmp	r3, r2
 801bff2:	d013      	beq.n	801c01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	681b      	ldr	r3, [r3, #0]
 801bff8:	4a1f      	ldr	r2, [pc, #124]	@ (801c078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801bffa:	4293      	cmp	r3, r2
 801bffc:	d00e      	beq.n	801c01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	681b      	ldr	r3, [r3, #0]
 801c002:	4a1e      	ldr	r2, [pc, #120]	@ (801c07c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801c004:	4293      	cmp	r3, r2
 801c006:	d009      	beq.n	801c01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	4a1c      	ldr	r2, [pc, #112]	@ (801c080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801c00e:	4293      	cmp	r3, r2
 801c010:	d004      	beq.n	801c01c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	4a1b      	ldr	r2, [pc, #108]	@ (801c084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801c018:	4293      	cmp	r3, r2
 801c01a:	d101      	bne.n	801c020 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801c01c:	2301      	movs	r3, #1
 801c01e:	e000      	b.n	801c022 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801c020:	2300      	movs	r3, #0
 801c022:	2b00      	cmp	r3, #0
 801c024:	d00a      	beq.n	801c03c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801c026:	68fa      	ldr	r2, [r7, #12]
 801c028:	4b17      	ldr	r3, [pc, #92]	@ (801c088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801c02a:	4413      	add	r3, r2
 801c02c:	009b      	lsls	r3, r3, #2
 801c02e:	461a      	mov	r2, r3
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801c034:	687b      	ldr	r3, [r7, #4]
 801c036:	4a15      	ldr	r2, [pc, #84]	@ (801c08c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801c038:	671a      	str	r2, [r3, #112]	@ 0x70
 801c03a:	e009      	b.n	801c050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801c03c:	68fa      	ldr	r2, [r7, #12]
 801c03e:	4b14      	ldr	r3, [pc, #80]	@ (801c090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801c040:	4413      	add	r3, r2
 801c042:	009b      	lsls	r3, r3, #2
 801c044:	461a      	mov	r2, r3
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	4a11      	ldr	r2, [pc, #68]	@ (801c094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801c04e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801c050:	68fb      	ldr	r3, [r7, #12]
 801c052:	3b01      	subs	r3, #1
 801c054:	2201      	movs	r2, #1
 801c056:	409a      	lsls	r2, r3
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801c05c:	bf00      	nop
 801c05e:	3714      	adds	r7, #20
 801c060:	46bd      	mov	sp, r7
 801c062:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c066:	4770      	bx	lr
 801c068:	58025408 	.word	0x58025408
 801c06c:	5802541c 	.word	0x5802541c
 801c070:	58025430 	.word	0x58025430
 801c074:	58025444 	.word	0x58025444
 801c078:	58025458 	.word	0x58025458
 801c07c:	5802546c 	.word	0x5802546c
 801c080:	58025480 	.word	0x58025480
 801c084:	58025494 	.word	0x58025494
 801c088:	1600963f 	.word	0x1600963f
 801c08c:	58025940 	.word	0x58025940
 801c090:	1000823f 	.word	0x1000823f
 801c094:	40020940 	.word	0x40020940

0801c098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801c098:	b480      	push	{r7}
 801c09a:	b089      	sub	sp, #36	@ 0x24
 801c09c:	af00      	add	r7, sp, #0
 801c09e:	6078      	str	r0, [r7, #4]
 801c0a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801c0a2:	2300      	movs	r3, #0
 801c0a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801c0a6:	4b89      	ldr	r3, [pc, #548]	@ (801c2cc <HAL_GPIO_Init+0x234>)
 801c0a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c0aa:	e194      	b.n	801c3d6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801c0ac:	683b      	ldr	r3, [r7, #0]
 801c0ae:	681a      	ldr	r2, [r3, #0]
 801c0b0:	2101      	movs	r1, #1
 801c0b2:	69fb      	ldr	r3, [r7, #28]
 801c0b4:	fa01 f303 	lsl.w	r3, r1, r3
 801c0b8:	4013      	ands	r3, r2
 801c0ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801c0bc:	693b      	ldr	r3, [r7, #16]
 801c0be:	2b00      	cmp	r3, #0
 801c0c0:	f000 8186 	beq.w	801c3d0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801c0c4:	683b      	ldr	r3, [r7, #0]
 801c0c6:	685b      	ldr	r3, [r3, #4]
 801c0c8:	f003 0303 	and.w	r3, r3, #3
 801c0cc:	2b01      	cmp	r3, #1
 801c0ce:	d005      	beq.n	801c0dc <HAL_GPIO_Init+0x44>
 801c0d0:	683b      	ldr	r3, [r7, #0]
 801c0d2:	685b      	ldr	r3, [r3, #4]
 801c0d4:	f003 0303 	and.w	r3, r3, #3
 801c0d8:	2b02      	cmp	r3, #2
 801c0da:	d130      	bne.n	801c13e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	689b      	ldr	r3, [r3, #8]
 801c0e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801c0e2:	69fb      	ldr	r3, [r7, #28]
 801c0e4:	005b      	lsls	r3, r3, #1
 801c0e6:	2203      	movs	r2, #3
 801c0e8:	fa02 f303 	lsl.w	r3, r2, r3
 801c0ec:	43db      	mvns	r3, r3
 801c0ee:	69ba      	ldr	r2, [r7, #24]
 801c0f0:	4013      	ands	r3, r2
 801c0f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801c0f4:	683b      	ldr	r3, [r7, #0]
 801c0f6:	68da      	ldr	r2, [r3, #12]
 801c0f8:	69fb      	ldr	r3, [r7, #28]
 801c0fa:	005b      	lsls	r3, r3, #1
 801c0fc:	fa02 f303 	lsl.w	r3, r2, r3
 801c100:	69ba      	ldr	r2, [r7, #24]
 801c102:	4313      	orrs	r3, r2
 801c104:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	69ba      	ldr	r2, [r7, #24]
 801c10a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801c10c:	687b      	ldr	r3, [r7, #4]
 801c10e:	685b      	ldr	r3, [r3, #4]
 801c110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801c112:	2201      	movs	r2, #1
 801c114:	69fb      	ldr	r3, [r7, #28]
 801c116:	fa02 f303 	lsl.w	r3, r2, r3
 801c11a:	43db      	mvns	r3, r3
 801c11c:	69ba      	ldr	r2, [r7, #24]
 801c11e:	4013      	ands	r3, r2
 801c120:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	685b      	ldr	r3, [r3, #4]
 801c126:	091b      	lsrs	r3, r3, #4
 801c128:	f003 0201 	and.w	r2, r3, #1
 801c12c:	69fb      	ldr	r3, [r7, #28]
 801c12e:	fa02 f303 	lsl.w	r3, r2, r3
 801c132:	69ba      	ldr	r2, [r7, #24]
 801c134:	4313      	orrs	r3, r2
 801c136:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801c138:	687b      	ldr	r3, [r7, #4]
 801c13a:	69ba      	ldr	r2, [r7, #24]
 801c13c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801c13e:	683b      	ldr	r3, [r7, #0]
 801c140:	685b      	ldr	r3, [r3, #4]
 801c142:	f003 0303 	and.w	r3, r3, #3
 801c146:	2b03      	cmp	r3, #3
 801c148:	d017      	beq.n	801c17a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	68db      	ldr	r3, [r3, #12]
 801c14e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801c150:	69fb      	ldr	r3, [r7, #28]
 801c152:	005b      	lsls	r3, r3, #1
 801c154:	2203      	movs	r2, #3
 801c156:	fa02 f303 	lsl.w	r3, r2, r3
 801c15a:	43db      	mvns	r3, r3
 801c15c:	69ba      	ldr	r2, [r7, #24]
 801c15e:	4013      	ands	r3, r2
 801c160:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801c162:	683b      	ldr	r3, [r7, #0]
 801c164:	689a      	ldr	r2, [r3, #8]
 801c166:	69fb      	ldr	r3, [r7, #28]
 801c168:	005b      	lsls	r3, r3, #1
 801c16a:	fa02 f303 	lsl.w	r3, r2, r3
 801c16e:	69ba      	ldr	r2, [r7, #24]
 801c170:	4313      	orrs	r3, r2
 801c172:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	69ba      	ldr	r2, [r7, #24]
 801c178:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801c17a:	683b      	ldr	r3, [r7, #0]
 801c17c:	685b      	ldr	r3, [r3, #4]
 801c17e:	f003 0303 	and.w	r3, r3, #3
 801c182:	2b02      	cmp	r3, #2
 801c184:	d123      	bne.n	801c1ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801c186:	69fb      	ldr	r3, [r7, #28]
 801c188:	08da      	lsrs	r2, r3, #3
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	3208      	adds	r2, #8
 801c18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801c192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801c194:	69fb      	ldr	r3, [r7, #28]
 801c196:	f003 0307 	and.w	r3, r3, #7
 801c19a:	009b      	lsls	r3, r3, #2
 801c19c:	220f      	movs	r2, #15
 801c19e:	fa02 f303 	lsl.w	r3, r2, r3
 801c1a2:	43db      	mvns	r3, r3
 801c1a4:	69ba      	ldr	r2, [r7, #24]
 801c1a6:	4013      	ands	r3, r2
 801c1a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801c1aa:	683b      	ldr	r3, [r7, #0]
 801c1ac:	691a      	ldr	r2, [r3, #16]
 801c1ae:	69fb      	ldr	r3, [r7, #28]
 801c1b0:	f003 0307 	and.w	r3, r3, #7
 801c1b4:	009b      	lsls	r3, r3, #2
 801c1b6:	fa02 f303 	lsl.w	r3, r2, r3
 801c1ba:	69ba      	ldr	r2, [r7, #24]
 801c1bc:	4313      	orrs	r3, r2
 801c1be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801c1c0:	69fb      	ldr	r3, [r7, #28]
 801c1c2:	08da      	lsrs	r2, r3, #3
 801c1c4:	687b      	ldr	r3, [r7, #4]
 801c1c6:	3208      	adds	r2, #8
 801c1c8:	69b9      	ldr	r1, [r7, #24]
 801c1ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801c1d4:	69fb      	ldr	r3, [r7, #28]
 801c1d6:	005b      	lsls	r3, r3, #1
 801c1d8:	2203      	movs	r2, #3
 801c1da:	fa02 f303 	lsl.w	r3, r2, r3
 801c1de:	43db      	mvns	r3, r3
 801c1e0:	69ba      	ldr	r2, [r7, #24]
 801c1e2:	4013      	ands	r3, r2
 801c1e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801c1e6:	683b      	ldr	r3, [r7, #0]
 801c1e8:	685b      	ldr	r3, [r3, #4]
 801c1ea:	f003 0203 	and.w	r2, r3, #3
 801c1ee:	69fb      	ldr	r3, [r7, #28]
 801c1f0:	005b      	lsls	r3, r3, #1
 801c1f2:	fa02 f303 	lsl.w	r3, r2, r3
 801c1f6:	69ba      	ldr	r2, [r7, #24]
 801c1f8:	4313      	orrs	r3, r2
 801c1fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	69ba      	ldr	r2, [r7, #24]
 801c200:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801c202:	683b      	ldr	r3, [r7, #0]
 801c204:	685b      	ldr	r3, [r3, #4]
 801c206:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801c20a:	2b00      	cmp	r3, #0
 801c20c:	f000 80e0 	beq.w	801c3d0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801c210:	4b2f      	ldr	r3, [pc, #188]	@ (801c2d0 <HAL_GPIO_Init+0x238>)
 801c212:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c216:	4a2e      	ldr	r2, [pc, #184]	@ (801c2d0 <HAL_GPIO_Init+0x238>)
 801c218:	f043 0302 	orr.w	r3, r3, #2
 801c21c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801c220:	4b2b      	ldr	r3, [pc, #172]	@ (801c2d0 <HAL_GPIO_Init+0x238>)
 801c222:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801c226:	f003 0302 	and.w	r3, r3, #2
 801c22a:	60fb      	str	r3, [r7, #12]
 801c22c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801c22e:	4a29      	ldr	r2, [pc, #164]	@ (801c2d4 <HAL_GPIO_Init+0x23c>)
 801c230:	69fb      	ldr	r3, [r7, #28]
 801c232:	089b      	lsrs	r3, r3, #2
 801c234:	3302      	adds	r3, #2
 801c236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801c23a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801c23c:	69fb      	ldr	r3, [r7, #28]
 801c23e:	f003 0303 	and.w	r3, r3, #3
 801c242:	009b      	lsls	r3, r3, #2
 801c244:	220f      	movs	r2, #15
 801c246:	fa02 f303 	lsl.w	r3, r2, r3
 801c24a:	43db      	mvns	r3, r3
 801c24c:	69ba      	ldr	r2, [r7, #24]
 801c24e:	4013      	ands	r3, r2
 801c250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	4a20      	ldr	r2, [pc, #128]	@ (801c2d8 <HAL_GPIO_Init+0x240>)
 801c256:	4293      	cmp	r3, r2
 801c258:	d052      	beq.n	801c300 <HAL_GPIO_Init+0x268>
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	4a1f      	ldr	r2, [pc, #124]	@ (801c2dc <HAL_GPIO_Init+0x244>)
 801c25e:	4293      	cmp	r3, r2
 801c260:	d031      	beq.n	801c2c6 <HAL_GPIO_Init+0x22e>
 801c262:	687b      	ldr	r3, [r7, #4]
 801c264:	4a1e      	ldr	r2, [pc, #120]	@ (801c2e0 <HAL_GPIO_Init+0x248>)
 801c266:	4293      	cmp	r3, r2
 801c268:	d02b      	beq.n	801c2c2 <HAL_GPIO_Init+0x22a>
 801c26a:	687b      	ldr	r3, [r7, #4]
 801c26c:	4a1d      	ldr	r2, [pc, #116]	@ (801c2e4 <HAL_GPIO_Init+0x24c>)
 801c26e:	4293      	cmp	r3, r2
 801c270:	d025      	beq.n	801c2be <HAL_GPIO_Init+0x226>
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	4a1c      	ldr	r2, [pc, #112]	@ (801c2e8 <HAL_GPIO_Init+0x250>)
 801c276:	4293      	cmp	r3, r2
 801c278:	d01f      	beq.n	801c2ba <HAL_GPIO_Init+0x222>
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	4a1b      	ldr	r2, [pc, #108]	@ (801c2ec <HAL_GPIO_Init+0x254>)
 801c27e:	4293      	cmp	r3, r2
 801c280:	d019      	beq.n	801c2b6 <HAL_GPIO_Init+0x21e>
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	4a1a      	ldr	r2, [pc, #104]	@ (801c2f0 <HAL_GPIO_Init+0x258>)
 801c286:	4293      	cmp	r3, r2
 801c288:	d013      	beq.n	801c2b2 <HAL_GPIO_Init+0x21a>
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	4a19      	ldr	r2, [pc, #100]	@ (801c2f4 <HAL_GPIO_Init+0x25c>)
 801c28e:	4293      	cmp	r3, r2
 801c290:	d00d      	beq.n	801c2ae <HAL_GPIO_Init+0x216>
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	4a18      	ldr	r2, [pc, #96]	@ (801c2f8 <HAL_GPIO_Init+0x260>)
 801c296:	4293      	cmp	r3, r2
 801c298:	d007      	beq.n	801c2aa <HAL_GPIO_Init+0x212>
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	4a17      	ldr	r2, [pc, #92]	@ (801c2fc <HAL_GPIO_Init+0x264>)
 801c29e:	4293      	cmp	r3, r2
 801c2a0:	d101      	bne.n	801c2a6 <HAL_GPIO_Init+0x20e>
 801c2a2:	2309      	movs	r3, #9
 801c2a4:	e02d      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2a6:	230a      	movs	r3, #10
 801c2a8:	e02b      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2aa:	2308      	movs	r3, #8
 801c2ac:	e029      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2ae:	2307      	movs	r3, #7
 801c2b0:	e027      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2b2:	2306      	movs	r3, #6
 801c2b4:	e025      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2b6:	2305      	movs	r3, #5
 801c2b8:	e023      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2ba:	2304      	movs	r3, #4
 801c2bc:	e021      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2be:	2303      	movs	r3, #3
 801c2c0:	e01f      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2c2:	2302      	movs	r3, #2
 801c2c4:	e01d      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2c6:	2301      	movs	r3, #1
 801c2c8:	e01b      	b.n	801c302 <HAL_GPIO_Init+0x26a>
 801c2ca:	bf00      	nop
 801c2cc:	58000080 	.word	0x58000080
 801c2d0:	58024400 	.word	0x58024400
 801c2d4:	58000400 	.word	0x58000400
 801c2d8:	58020000 	.word	0x58020000
 801c2dc:	58020400 	.word	0x58020400
 801c2e0:	58020800 	.word	0x58020800
 801c2e4:	58020c00 	.word	0x58020c00
 801c2e8:	58021000 	.word	0x58021000
 801c2ec:	58021400 	.word	0x58021400
 801c2f0:	58021800 	.word	0x58021800
 801c2f4:	58021c00 	.word	0x58021c00
 801c2f8:	58022000 	.word	0x58022000
 801c2fc:	58022400 	.word	0x58022400
 801c300:	2300      	movs	r3, #0
 801c302:	69fa      	ldr	r2, [r7, #28]
 801c304:	f002 0203 	and.w	r2, r2, #3
 801c308:	0092      	lsls	r2, r2, #2
 801c30a:	4093      	lsls	r3, r2
 801c30c:	69ba      	ldr	r2, [r7, #24]
 801c30e:	4313      	orrs	r3, r2
 801c310:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801c312:	4938      	ldr	r1, [pc, #224]	@ (801c3f4 <HAL_GPIO_Init+0x35c>)
 801c314:	69fb      	ldr	r3, [r7, #28]
 801c316:	089b      	lsrs	r3, r3, #2
 801c318:	3302      	adds	r3, #2
 801c31a:	69ba      	ldr	r2, [r7, #24]
 801c31c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801c320:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c324:	681b      	ldr	r3, [r3, #0]
 801c326:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c328:	693b      	ldr	r3, [r7, #16]
 801c32a:	43db      	mvns	r3, r3
 801c32c:	69ba      	ldr	r2, [r7, #24]
 801c32e:	4013      	ands	r3, r2
 801c330:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801c332:	683b      	ldr	r3, [r7, #0]
 801c334:	685b      	ldr	r3, [r3, #4]
 801c336:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801c33a:	2b00      	cmp	r3, #0
 801c33c:	d003      	beq.n	801c346 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801c33e:	69ba      	ldr	r2, [r7, #24]
 801c340:	693b      	ldr	r3, [r7, #16]
 801c342:	4313      	orrs	r3, r2
 801c344:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801c346:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c34a:	69bb      	ldr	r3, [r7, #24]
 801c34c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801c34e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801c352:	685b      	ldr	r3, [r3, #4]
 801c354:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c356:	693b      	ldr	r3, [r7, #16]
 801c358:	43db      	mvns	r3, r3
 801c35a:	69ba      	ldr	r2, [r7, #24]
 801c35c:	4013      	ands	r3, r2
 801c35e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801c360:	683b      	ldr	r3, [r7, #0]
 801c362:	685b      	ldr	r3, [r3, #4]
 801c364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801c368:	2b00      	cmp	r3, #0
 801c36a:	d003      	beq.n	801c374 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801c36c:	69ba      	ldr	r2, [r7, #24]
 801c36e:	693b      	ldr	r3, [r7, #16]
 801c370:	4313      	orrs	r3, r2
 801c372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801c374:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801c378:	69bb      	ldr	r3, [r7, #24]
 801c37a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801c37c:	697b      	ldr	r3, [r7, #20]
 801c37e:	685b      	ldr	r3, [r3, #4]
 801c380:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c382:	693b      	ldr	r3, [r7, #16]
 801c384:	43db      	mvns	r3, r3
 801c386:	69ba      	ldr	r2, [r7, #24]
 801c388:	4013      	ands	r3, r2
 801c38a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801c38c:	683b      	ldr	r3, [r7, #0]
 801c38e:	685b      	ldr	r3, [r3, #4]
 801c390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c394:	2b00      	cmp	r3, #0
 801c396:	d003      	beq.n	801c3a0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801c398:	69ba      	ldr	r2, [r7, #24]
 801c39a:	693b      	ldr	r3, [r7, #16]
 801c39c:	4313      	orrs	r3, r2
 801c39e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	69ba      	ldr	r2, [r7, #24]
 801c3a4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801c3a6:	697b      	ldr	r3, [r7, #20]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801c3ac:	693b      	ldr	r3, [r7, #16]
 801c3ae:	43db      	mvns	r3, r3
 801c3b0:	69ba      	ldr	r2, [r7, #24]
 801c3b2:	4013      	ands	r3, r2
 801c3b4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801c3b6:	683b      	ldr	r3, [r7, #0]
 801c3b8:	685b      	ldr	r3, [r3, #4]
 801c3ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d003      	beq.n	801c3ca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801c3c2:	69ba      	ldr	r2, [r7, #24]
 801c3c4:	693b      	ldr	r3, [r7, #16]
 801c3c6:	4313      	orrs	r3, r2
 801c3c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801c3ca:	697b      	ldr	r3, [r7, #20]
 801c3cc:	69ba      	ldr	r2, [r7, #24]
 801c3ce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801c3d0:	69fb      	ldr	r3, [r7, #28]
 801c3d2:	3301      	adds	r3, #1
 801c3d4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801c3d6:	683b      	ldr	r3, [r7, #0]
 801c3d8:	681a      	ldr	r2, [r3, #0]
 801c3da:	69fb      	ldr	r3, [r7, #28]
 801c3dc:	fa22 f303 	lsr.w	r3, r2, r3
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	f47f ae63 	bne.w	801c0ac <HAL_GPIO_Init+0x14>
  }
}
 801c3e6:	bf00      	nop
 801c3e8:	bf00      	nop
 801c3ea:	3724      	adds	r7, #36	@ 0x24
 801c3ec:	46bd      	mov	sp, r7
 801c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3f2:	4770      	bx	lr
 801c3f4:	58000400 	.word	0x58000400

0801c3f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801c3f8:	b480      	push	{r7}
 801c3fa:	b083      	sub	sp, #12
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
 801c400:	460b      	mov	r3, r1
 801c402:	807b      	strh	r3, [r7, #2]
 801c404:	4613      	mov	r3, r2
 801c406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801c408:	787b      	ldrb	r3, [r7, #1]
 801c40a:	2b00      	cmp	r3, #0
 801c40c:	d003      	beq.n	801c416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801c40e:	887a      	ldrh	r2, [r7, #2]
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801c414:	e003      	b.n	801c41e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801c416:	887b      	ldrh	r3, [r7, #2]
 801c418:	041a      	lsls	r2, r3, #16
 801c41a:	687b      	ldr	r3, [r7, #4]
 801c41c:	619a      	str	r2, [r3, #24]
}
 801c41e:	bf00      	nop
 801c420:	370c      	adds	r7, #12
 801c422:	46bd      	mov	sp, r7
 801c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c428:	4770      	bx	lr
	...

0801c42c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801c42c:	b580      	push	{r7, lr}
 801c42e:	b082      	sub	sp, #8
 801c430:	af00      	add	r7, sp, #0
 801c432:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801c434:	687b      	ldr	r3, [r7, #4]
 801c436:	2b00      	cmp	r3, #0
 801c438:	d101      	bne.n	801c43e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801c43a:	2301      	movs	r3, #1
 801c43c:	e08b      	b.n	801c556 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801c43e:	687b      	ldr	r3, [r7, #4]
 801c440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c444:	b2db      	uxtb	r3, r3
 801c446:	2b00      	cmp	r3, #0
 801c448:	d106      	bne.n	801c458 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2200      	movs	r2, #0
 801c44e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801c452:	6878      	ldr	r0, [r7, #4]
 801c454:	f7e5 fe66 	bl	8002124 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	2224      	movs	r2, #36	@ 0x24
 801c45c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801c460:	687b      	ldr	r3, [r7, #4]
 801c462:	681b      	ldr	r3, [r3, #0]
 801c464:	681a      	ldr	r2, [r3, #0]
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	681b      	ldr	r3, [r3, #0]
 801c46a:	f022 0201 	bic.w	r2, r2, #1
 801c46e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	685a      	ldr	r2, [r3, #4]
 801c474:	687b      	ldr	r3, [r7, #4]
 801c476:	681b      	ldr	r3, [r3, #0]
 801c478:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801c47c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801c47e:	687b      	ldr	r3, [r7, #4]
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	689a      	ldr	r2, [r3, #8]
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801c48c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	68db      	ldr	r3, [r3, #12]
 801c492:	2b01      	cmp	r3, #1
 801c494:	d107      	bne.n	801c4a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801c496:	687b      	ldr	r3, [r7, #4]
 801c498:	689a      	ldr	r2, [r3, #8]
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801c4a2:	609a      	str	r2, [r3, #8]
 801c4a4:	e006      	b.n	801c4b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801c4a6:	687b      	ldr	r3, [r7, #4]
 801c4a8:	689a      	ldr	r2, [r3, #8]
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	681b      	ldr	r3, [r3, #0]
 801c4ae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801c4b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801c4b4:	687b      	ldr	r3, [r7, #4]
 801c4b6:	68db      	ldr	r3, [r3, #12]
 801c4b8:	2b02      	cmp	r3, #2
 801c4ba:	d108      	bne.n	801c4ce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801c4bc:	687b      	ldr	r3, [r7, #4]
 801c4be:	681b      	ldr	r3, [r3, #0]
 801c4c0:	685a      	ldr	r2, [r3, #4]
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	681b      	ldr	r3, [r3, #0]
 801c4c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801c4ca:	605a      	str	r2, [r3, #4]
 801c4cc:	e007      	b.n	801c4de <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	681b      	ldr	r3, [r3, #0]
 801c4d2:	685a      	ldr	r2, [r3, #4]
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	681b      	ldr	r3, [r3, #0]
 801c4d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801c4dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	6859      	ldr	r1, [r3, #4]
 801c4e4:	687b      	ldr	r3, [r7, #4]
 801c4e6:	681a      	ldr	r2, [r3, #0]
 801c4e8:	4b1d      	ldr	r3, [pc, #116]	@ (801c560 <HAL_I2C_Init+0x134>)
 801c4ea:	430b      	orrs	r3, r1
 801c4ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801c4ee:	687b      	ldr	r3, [r7, #4]
 801c4f0:	681b      	ldr	r3, [r3, #0]
 801c4f2:	68da      	ldr	r2, [r3, #12]
 801c4f4:	687b      	ldr	r3, [r7, #4]
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801c4fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	691a      	ldr	r2, [r3, #16]
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	695b      	ldr	r3, [r3, #20]
 801c506:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	699b      	ldr	r3, [r3, #24]
 801c50e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	430a      	orrs	r2, r1
 801c516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	69d9      	ldr	r1, [r3, #28]
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	6a1a      	ldr	r2, [r3, #32]
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	430a      	orrs	r2, r1
 801c526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	681a      	ldr	r2, [r3, #0]
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	681b      	ldr	r3, [r3, #0]
 801c532:	f042 0201 	orr.w	r2, r2, #1
 801c536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	2200      	movs	r2, #0
 801c53c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	2220      	movs	r2, #32
 801c542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	2200      	movs	r2, #0
 801c54a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	2200      	movs	r2, #0
 801c550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801c554:	2300      	movs	r3, #0
}
 801c556:	4618      	mov	r0, r3
 801c558:	3708      	adds	r7, #8
 801c55a:	46bd      	mov	sp, r7
 801c55c:	bd80      	pop	{r7, pc}
 801c55e:	bf00      	nop
 801c560:	02008000 	.word	0x02008000

0801c564 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801c564:	b480      	push	{r7}
 801c566:	b083      	sub	sp, #12
 801c568:	af00      	add	r7, sp, #0
 801c56a:	6078      	str	r0, [r7, #4]
 801c56c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c574:	b2db      	uxtb	r3, r3
 801c576:	2b20      	cmp	r3, #32
 801c578:	d138      	bne.n	801c5ec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c580:	2b01      	cmp	r3, #1
 801c582:	d101      	bne.n	801c588 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801c584:	2302      	movs	r3, #2
 801c586:	e032      	b.n	801c5ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	2201      	movs	r2, #1
 801c58c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	2224      	movs	r2, #36	@ 0x24
 801c594:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c598:	687b      	ldr	r3, [r7, #4]
 801c59a:	681b      	ldr	r3, [r3, #0]
 801c59c:	681a      	ldr	r2, [r3, #0]
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	681b      	ldr	r3, [r3, #0]
 801c5a2:	f022 0201 	bic.w	r2, r2, #1
 801c5a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	681a      	ldr	r2, [r3, #0]
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801c5b6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	681b      	ldr	r3, [r3, #0]
 801c5bc:	6819      	ldr	r1, [r3, #0]
 801c5be:	687b      	ldr	r3, [r7, #4]
 801c5c0:	681b      	ldr	r3, [r3, #0]
 801c5c2:	683a      	ldr	r2, [r7, #0]
 801c5c4:	430a      	orrs	r2, r1
 801c5c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c5c8:	687b      	ldr	r3, [r7, #4]
 801c5ca:	681b      	ldr	r3, [r3, #0]
 801c5cc:	681a      	ldr	r2, [r3, #0]
 801c5ce:	687b      	ldr	r3, [r7, #4]
 801c5d0:	681b      	ldr	r3, [r3, #0]
 801c5d2:	f042 0201 	orr.w	r2, r2, #1
 801c5d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	2220      	movs	r2, #32
 801c5dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c5e0:	687b      	ldr	r3, [r7, #4]
 801c5e2:	2200      	movs	r2, #0
 801c5e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c5e8:	2300      	movs	r3, #0
 801c5ea:	e000      	b.n	801c5ee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c5ec:	2302      	movs	r3, #2
  }
}
 801c5ee:	4618      	mov	r0, r3
 801c5f0:	370c      	adds	r7, #12
 801c5f2:	46bd      	mov	sp, r7
 801c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5f8:	4770      	bx	lr

0801c5fa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801c5fa:	b480      	push	{r7}
 801c5fc:	b085      	sub	sp, #20
 801c5fe:	af00      	add	r7, sp, #0
 801c600:	6078      	str	r0, [r7, #4]
 801c602:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c604:	687b      	ldr	r3, [r7, #4]
 801c606:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801c60a:	b2db      	uxtb	r3, r3
 801c60c:	2b20      	cmp	r3, #32
 801c60e:	d139      	bne.n	801c684 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c610:	687b      	ldr	r3, [r7, #4]
 801c612:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801c616:	2b01      	cmp	r3, #1
 801c618:	d101      	bne.n	801c61e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801c61a:	2302      	movs	r3, #2
 801c61c:	e033      	b.n	801c686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	2201      	movs	r2, #1
 801c622:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	2224      	movs	r2, #36	@ 0x24
 801c62a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	681b      	ldr	r3, [r3, #0]
 801c632:	681a      	ldr	r2, [r3, #0]
 801c634:	687b      	ldr	r3, [r7, #4]
 801c636:	681b      	ldr	r3, [r3, #0]
 801c638:	f022 0201 	bic.w	r2, r2, #1
 801c63c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801c63e:	687b      	ldr	r3, [r7, #4]
 801c640:	681b      	ldr	r3, [r3, #0]
 801c642:	681b      	ldr	r3, [r3, #0]
 801c644:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801c646:	68fb      	ldr	r3, [r7, #12]
 801c648:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801c64c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801c64e:	683b      	ldr	r3, [r7, #0]
 801c650:	021b      	lsls	r3, r3, #8
 801c652:	68fa      	ldr	r2, [r7, #12]
 801c654:	4313      	orrs	r3, r2
 801c656:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	68fa      	ldr	r2, [r7, #12]
 801c65e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c660:	687b      	ldr	r3, [r7, #4]
 801c662:	681b      	ldr	r3, [r3, #0]
 801c664:	681a      	ldr	r2, [r3, #0]
 801c666:	687b      	ldr	r3, [r7, #4]
 801c668:	681b      	ldr	r3, [r3, #0]
 801c66a:	f042 0201 	orr.w	r2, r2, #1
 801c66e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	2220      	movs	r2, #32
 801c674:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c678:	687b      	ldr	r3, [r7, #4]
 801c67a:	2200      	movs	r2, #0
 801c67c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801c680:	2300      	movs	r3, #0
 801c682:	e000      	b.n	801c686 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c684:	2302      	movs	r3, #2
  }
}
 801c686:	4618      	mov	r0, r3
 801c688:	3714      	adds	r7, #20
 801c68a:	46bd      	mov	sp, r7
 801c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c690:	4770      	bx	lr
	...

0801c694 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801c694:	b580      	push	{r7, lr}
 801c696:	b084      	sub	sp, #16
 801c698:	af00      	add	r7, sp, #0
 801c69a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801c69c:	4b19      	ldr	r3, [pc, #100]	@ (801c704 <HAL_PWREx_ConfigSupply+0x70>)
 801c69e:	68db      	ldr	r3, [r3, #12]
 801c6a0:	f003 0304 	and.w	r3, r3, #4
 801c6a4:	2b04      	cmp	r3, #4
 801c6a6:	d00a      	beq.n	801c6be <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801c6a8:	4b16      	ldr	r3, [pc, #88]	@ (801c704 <HAL_PWREx_ConfigSupply+0x70>)
 801c6aa:	68db      	ldr	r3, [r3, #12]
 801c6ac:	f003 0307 	and.w	r3, r3, #7
 801c6b0:	687a      	ldr	r2, [r7, #4]
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	d001      	beq.n	801c6ba <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801c6b6:	2301      	movs	r3, #1
 801c6b8:	e01f      	b.n	801c6fa <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801c6ba:	2300      	movs	r3, #0
 801c6bc:	e01d      	b.n	801c6fa <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801c6be:	4b11      	ldr	r3, [pc, #68]	@ (801c704 <HAL_PWREx_ConfigSupply+0x70>)
 801c6c0:	68db      	ldr	r3, [r3, #12]
 801c6c2:	f023 0207 	bic.w	r2, r3, #7
 801c6c6:	490f      	ldr	r1, [pc, #60]	@ (801c704 <HAL_PWREx_ConfigSupply+0x70>)
 801c6c8:	687b      	ldr	r3, [r7, #4]
 801c6ca:	4313      	orrs	r3, r2
 801c6cc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801c6ce:	f7fd fc03 	bl	8019ed8 <HAL_GetTick>
 801c6d2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c6d4:	e009      	b.n	801c6ea <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801c6d6:	f7fd fbff 	bl	8019ed8 <HAL_GetTick>
 801c6da:	4602      	mov	r2, r0
 801c6dc:	68fb      	ldr	r3, [r7, #12]
 801c6de:	1ad3      	subs	r3, r2, r3
 801c6e0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801c6e4:	d901      	bls.n	801c6ea <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801c6e6:	2301      	movs	r3, #1
 801c6e8:	e007      	b.n	801c6fa <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801c6ea:	4b06      	ldr	r3, [pc, #24]	@ (801c704 <HAL_PWREx_ConfigSupply+0x70>)
 801c6ec:	685b      	ldr	r3, [r3, #4]
 801c6ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c6f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801c6f6:	d1ee      	bne.n	801c6d6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801c6f8:	2300      	movs	r3, #0
}
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	3710      	adds	r7, #16
 801c6fe:	46bd      	mov	sp, r7
 801c700:	bd80      	pop	{r7, pc}
 801c702:	bf00      	nop
 801c704:	58024800 	.word	0x58024800

0801c708 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c708:	b580      	push	{r7, lr}
 801c70a:	b08c      	sub	sp, #48	@ 0x30
 801c70c:	af00      	add	r7, sp, #0
 801c70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c710:	687b      	ldr	r3, [r7, #4]
 801c712:	2b00      	cmp	r3, #0
 801c714:	d102      	bne.n	801c71c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801c716:	2301      	movs	r3, #1
 801c718:	f000 bc48 	b.w	801cfac <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	681b      	ldr	r3, [r3, #0]
 801c720:	f003 0301 	and.w	r3, r3, #1
 801c724:	2b00      	cmp	r3, #0
 801c726:	f000 8088 	beq.w	801c83a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c72a:	4b99      	ldr	r3, [pc, #612]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c72c:	691b      	ldr	r3, [r3, #16]
 801c72e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c734:	4b96      	ldr	r3, [pc, #600]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c738:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801c73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c73c:	2b10      	cmp	r3, #16
 801c73e:	d007      	beq.n	801c750 <HAL_RCC_OscConfig+0x48>
 801c740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c742:	2b18      	cmp	r3, #24
 801c744:	d111      	bne.n	801c76a <HAL_RCC_OscConfig+0x62>
 801c746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c748:	f003 0303 	and.w	r3, r3, #3
 801c74c:	2b02      	cmp	r3, #2
 801c74e:	d10c      	bne.n	801c76a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c750:	4b8f      	ldr	r3, [pc, #572]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c752:	681b      	ldr	r3, [r3, #0]
 801c754:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c758:	2b00      	cmp	r3, #0
 801c75a:	d06d      	beq.n	801c838 <HAL_RCC_OscConfig+0x130>
 801c75c:	687b      	ldr	r3, [r7, #4]
 801c75e:	685b      	ldr	r3, [r3, #4]
 801c760:	2b00      	cmp	r3, #0
 801c762:	d169      	bne.n	801c838 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c764:	2301      	movs	r3, #1
 801c766:	f000 bc21 	b.w	801cfac <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c76a:	687b      	ldr	r3, [r7, #4]
 801c76c:	685b      	ldr	r3, [r3, #4]
 801c76e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c772:	d106      	bne.n	801c782 <HAL_RCC_OscConfig+0x7a>
 801c774:	4b86      	ldr	r3, [pc, #536]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c776:	681b      	ldr	r3, [r3, #0]
 801c778:	4a85      	ldr	r2, [pc, #532]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c77a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c77e:	6013      	str	r3, [r2, #0]
 801c780:	e02e      	b.n	801c7e0 <HAL_RCC_OscConfig+0xd8>
 801c782:	687b      	ldr	r3, [r7, #4]
 801c784:	685b      	ldr	r3, [r3, #4]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d10c      	bne.n	801c7a4 <HAL_RCC_OscConfig+0x9c>
 801c78a:	4b81      	ldr	r3, [pc, #516]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	4a80      	ldr	r2, [pc, #512]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c790:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c794:	6013      	str	r3, [r2, #0]
 801c796:	4b7e      	ldr	r3, [pc, #504]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c798:	681b      	ldr	r3, [r3, #0]
 801c79a:	4a7d      	ldr	r2, [pc, #500]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c79c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c7a0:	6013      	str	r3, [r2, #0]
 801c7a2:	e01d      	b.n	801c7e0 <HAL_RCC_OscConfig+0xd8>
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	685b      	ldr	r3, [r3, #4]
 801c7a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801c7ac:	d10c      	bne.n	801c7c8 <HAL_RCC_OscConfig+0xc0>
 801c7ae:	4b78      	ldr	r3, [pc, #480]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7b0:	681b      	ldr	r3, [r3, #0]
 801c7b2:	4a77      	ldr	r2, [pc, #476]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c7b8:	6013      	str	r3, [r2, #0]
 801c7ba:	4b75      	ldr	r3, [pc, #468]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	4a74      	ldr	r2, [pc, #464]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c7c4:	6013      	str	r3, [r2, #0]
 801c7c6:	e00b      	b.n	801c7e0 <HAL_RCC_OscConfig+0xd8>
 801c7c8:	4b71      	ldr	r3, [pc, #452]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	4a70      	ldr	r2, [pc, #448]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801c7d2:	6013      	str	r3, [r2, #0]
 801c7d4:	4b6e      	ldr	r3, [pc, #440]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7d6:	681b      	ldr	r3, [r3, #0]
 801c7d8:	4a6d      	ldr	r2, [pc, #436]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c7da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801c7de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	685b      	ldr	r3, [r3, #4]
 801c7e4:	2b00      	cmp	r3, #0
 801c7e6:	d013      	beq.n	801c810 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7e8:	f7fd fb76 	bl	8019ed8 <HAL_GetTick>
 801c7ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c7ee:	e008      	b.n	801c802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c7f0:	f7fd fb72 	bl	8019ed8 <HAL_GetTick>
 801c7f4:	4602      	mov	r2, r0
 801c7f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c7f8:	1ad3      	subs	r3, r2, r3
 801c7fa:	2b64      	cmp	r3, #100	@ 0x64
 801c7fc:	d901      	bls.n	801c802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c7fe:	2303      	movs	r3, #3
 801c800:	e3d4      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c802:	4b63      	ldr	r3, [pc, #396]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d0f0      	beq.n	801c7f0 <HAL_RCC_OscConfig+0xe8>
 801c80e:	e014      	b.n	801c83a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c810:	f7fd fb62 	bl	8019ed8 <HAL_GetTick>
 801c814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c816:	e008      	b.n	801c82a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c818:	f7fd fb5e 	bl	8019ed8 <HAL_GetTick>
 801c81c:	4602      	mov	r2, r0
 801c81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c820:	1ad3      	subs	r3, r2, r3
 801c822:	2b64      	cmp	r3, #100	@ 0x64
 801c824:	d901      	bls.n	801c82a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c826:	2303      	movs	r3, #3
 801c828:	e3c0      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801c82a:	4b59      	ldr	r3, [pc, #356]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c82c:	681b      	ldr	r3, [r3, #0]
 801c82e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c832:	2b00      	cmp	r3, #0
 801c834:	d1f0      	bne.n	801c818 <HAL_RCC_OscConfig+0x110>
 801c836:	e000      	b.n	801c83a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c838:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	681b      	ldr	r3, [r3, #0]
 801c83e:	f003 0302 	and.w	r3, r3, #2
 801c842:	2b00      	cmp	r3, #0
 801c844:	f000 80ca 	beq.w	801c9dc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c848:	4b51      	ldr	r3, [pc, #324]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c84a:	691b      	ldr	r3, [r3, #16]
 801c84c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c850:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c852:	4b4f      	ldr	r3, [pc, #316]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c856:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801c858:	6a3b      	ldr	r3, [r7, #32]
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d007      	beq.n	801c86e <HAL_RCC_OscConfig+0x166>
 801c85e:	6a3b      	ldr	r3, [r7, #32]
 801c860:	2b18      	cmp	r3, #24
 801c862:	d156      	bne.n	801c912 <HAL_RCC_OscConfig+0x20a>
 801c864:	69fb      	ldr	r3, [r7, #28]
 801c866:	f003 0303 	and.w	r3, r3, #3
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d151      	bne.n	801c912 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c86e:	4b48      	ldr	r3, [pc, #288]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c870:	681b      	ldr	r3, [r3, #0]
 801c872:	f003 0304 	and.w	r3, r3, #4
 801c876:	2b00      	cmp	r3, #0
 801c878:	d005      	beq.n	801c886 <HAL_RCC_OscConfig+0x17e>
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	68db      	ldr	r3, [r3, #12]
 801c87e:	2b00      	cmp	r3, #0
 801c880:	d101      	bne.n	801c886 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801c882:	2301      	movs	r3, #1
 801c884:	e392      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c886:	4b42      	ldr	r3, [pc, #264]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	f023 0219 	bic.w	r2, r3, #25
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	68db      	ldr	r3, [r3, #12]
 801c892:	493f      	ldr	r1, [pc, #252]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c894:	4313      	orrs	r3, r2
 801c896:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c898:	f7fd fb1e 	bl	8019ed8 <HAL_GetTick>
 801c89c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c89e:	e008      	b.n	801c8b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c8a0:	f7fd fb1a 	bl	8019ed8 <HAL_GetTick>
 801c8a4:	4602      	mov	r2, r0
 801c8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c8a8:	1ad3      	subs	r3, r2, r3
 801c8aa:	2b02      	cmp	r3, #2
 801c8ac:	d901      	bls.n	801c8b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801c8ae:	2303      	movs	r3, #3
 801c8b0:	e37c      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c8b2:	4b37      	ldr	r3, [pc, #220]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c8b4:	681b      	ldr	r3, [r3, #0]
 801c8b6:	f003 0304 	and.w	r3, r3, #4
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d0f0      	beq.n	801c8a0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c8be:	f7fd fb3b 	bl	8019f38 <HAL_GetREVID>
 801c8c2:	4603      	mov	r3, r0
 801c8c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c8c8:	4293      	cmp	r3, r2
 801c8ca:	d817      	bhi.n	801c8fc <HAL_RCC_OscConfig+0x1f4>
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	691b      	ldr	r3, [r3, #16]
 801c8d0:	2b40      	cmp	r3, #64	@ 0x40
 801c8d2:	d108      	bne.n	801c8e6 <HAL_RCC_OscConfig+0x1de>
 801c8d4:	4b2e      	ldr	r3, [pc, #184]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c8d6:	685b      	ldr	r3, [r3, #4]
 801c8d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c8dc:	4a2c      	ldr	r2, [pc, #176]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c8de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c8e2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c8e4:	e07a      	b.n	801c9dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c8e6:	4b2a      	ldr	r3, [pc, #168]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c8e8:	685b      	ldr	r3, [r3, #4]
 801c8ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	691b      	ldr	r3, [r3, #16]
 801c8f2:	031b      	lsls	r3, r3, #12
 801c8f4:	4926      	ldr	r1, [pc, #152]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c8f6:	4313      	orrs	r3, r2
 801c8f8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c8fa:	e06f      	b.n	801c9dc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c8fc:	4b24      	ldr	r3, [pc, #144]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c8fe:	685b      	ldr	r3, [r3, #4]
 801c900:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c904:	687b      	ldr	r3, [r7, #4]
 801c906:	691b      	ldr	r3, [r3, #16]
 801c908:	061b      	lsls	r3, r3, #24
 801c90a:	4921      	ldr	r1, [pc, #132]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c90c:	4313      	orrs	r3, r2
 801c90e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801c910:	e064      	b.n	801c9dc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	68db      	ldr	r3, [r3, #12]
 801c916:	2b00      	cmp	r3, #0
 801c918:	d047      	beq.n	801c9aa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801c91a:	4b1d      	ldr	r3, [pc, #116]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	f023 0219 	bic.w	r2, r3, #25
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	68db      	ldr	r3, [r3, #12]
 801c926:	491a      	ldr	r1, [pc, #104]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c928:	4313      	orrs	r3, r2
 801c92a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c92c:	f7fd fad4 	bl	8019ed8 <HAL_GetTick>
 801c930:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c932:	e008      	b.n	801c946 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c934:	f7fd fad0 	bl	8019ed8 <HAL_GetTick>
 801c938:	4602      	mov	r2, r0
 801c93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c93c:	1ad3      	subs	r3, r2, r3
 801c93e:	2b02      	cmp	r3, #2
 801c940:	d901      	bls.n	801c946 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801c942:	2303      	movs	r3, #3
 801c944:	e332      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c946:	4b12      	ldr	r3, [pc, #72]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	f003 0304 	and.w	r3, r3, #4
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d0f0      	beq.n	801c934 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c952:	f7fd faf1 	bl	8019f38 <HAL_GetREVID>
 801c956:	4603      	mov	r3, r0
 801c958:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c95c:	4293      	cmp	r3, r2
 801c95e:	d819      	bhi.n	801c994 <HAL_RCC_OscConfig+0x28c>
 801c960:	687b      	ldr	r3, [r7, #4]
 801c962:	691b      	ldr	r3, [r3, #16]
 801c964:	2b40      	cmp	r3, #64	@ 0x40
 801c966:	d108      	bne.n	801c97a <HAL_RCC_OscConfig+0x272>
 801c968:	4b09      	ldr	r3, [pc, #36]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c96a:	685b      	ldr	r3, [r3, #4]
 801c96c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801c970:	4a07      	ldr	r2, [pc, #28]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c972:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c976:	6053      	str	r3, [r2, #4]
 801c978:	e030      	b.n	801c9dc <HAL_RCC_OscConfig+0x2d4>
 801c97a:	4b05      	ldr	r3, [pc, #20]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c97c:	685b      	ldr	r3, [r3, #4]
 801c97e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	691b      	ldr	r3, [r3, #16]
 801c986:	031b      	lsls	r3, r3, #12
 801c988:	4901      	ldr	r1, [pc, #4]	@ (801c990 <HAL_RCC_OscConfig+0x288>)
 801c98a:	4313      	orrs	r3, r2
 801c98c:	604b      	str	r3, [r1, #4]
 801c98e:	e025      	b.n	801c9dc <HAL_RCC_OscConfig+0x2d4>
 801c990:	58024400 	.word	0x58024400
 801c994:	4b9a      	ldr	r3, [pc, #616]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801c996:	685b      	ldr	r3, [r3, #4]
 801c998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	691b      	ldr	r3, [r3, #16]
 801c9a0:	061b      	lsls	r3, r3, #24
 801c9a2:	4997      	ldr	r1, [pc, #604]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801c9a4:	4313      	orrs	r3, r2
 801c9a6:	604b      	str	r3, [r1, #4]
 801c9a8:	e018      	b.n	801c9dc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c9aa:	4b95      	ldr	r3, [pc, #596]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801c9ac:	681b      	ldr	r3, [r3, #0]
 801c9ae:	4a94      	ldr	r2, [pc, #592]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801c9b0:	f023 0301 	bic.w	r3, r3, #1
 801c9b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c9b6:	f7fd fa8f 	bl	8019ed8 <HAL_GetTick>
 801c9ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c9bc:	e008      	b.n	801c9d0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c9be:	f7fd fa8b 	bl	8019ed8 <HAL_GetTick>
 801c9c2:	4602      	mov	r2, r0
 801c9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c9c6:	1ad3      	subs	r3, r2, r3
 801c9c8:	2b02      	cmp	r3, #2
 801c9ca:	d901      	bls.n	801c9d0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801c9cc:	2303      	movs	r3, #3
 801c9ce:	e2ed      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801c9d0:	4b8b      	ldr	r3, [pc, #556]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	f003 0304 	and.w	r3, r3, #4
 801c9d8:	2b00      	cmp	r3, #0
 801c9da:	d1f0      	bne.n	801c9be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	681b      	ldr	r3, [r3, #0]
 801c9e0:	f003 0310 	and.w	r3, r3, #16
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	f000 80a9 	beq.w	801cb3c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c9ea:	4b85      	ldr	r3, [pc, #532]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801c9ec:	691b      	ldr	r3, [r3, #16]
 801c9ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c9f2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c9f4:	4b82      	ldr	r3, [pc, #520]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801c9f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c9f8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c9fa:	69bb      	ldr	r3, [r7, #24]
 801c9fc:	2b08      	cmp	r3, #8
 801c9fe:	d007      	beq.n	801ca10 <HAL_RCC_OscConfig+0x308>
 801ca00:	69bb      	ldr	r3, [r7, #24]
 801ca02:	2b18      	cmp	r3, #24
 801ca04:	d13a      	bne.n	801ca7c <HAL_RCC_OscConfig+0x374>
 801ca06:	697b      	ldr	r3, [r7, #20]
 801ca08:	f003 0303 	and.w	r3, r3, #3
 801ca0c:	2b01      	cmp	r3, #1
 801ca0e:	d135      	bne.n	801ca7c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ca10:	4b7b      	ldr	r3, [pc, #492]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca12:	681b      	ldr	r3, [r3, #0]
 801ca14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ca18:	2b00      	cmp	r3, #0
 801ca1a:	d005      	beq.n	801ca28 <HAL_RCC_OscConfig+0x320>
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	69db      	ldr	r3, [r3, #28]
 801ca20:	2b80      	cmp	r3, #128	@ 0x80
 801ca22:	d001      	beq.n	801ca28 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801ca24:	2301      	movs	r3, #1
 801ca26:	e2c1      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ca28:	f7fd fa86 	bl	8019f38 <HAL_GetREVID>
 801ca2c:	4603      	mov	r3, r0
 801ca2e:	f241 0203 	movw	r2, #4099	@ 0x1003
 801ca32:	4293      	cmp	r3, r2
 801ca34:	d817      	bhi.n	801ca66 <HAL_RCC_OscConfig+0x35e>
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	6a1b      	ldr	r3, [r3, #32]
 801ca3a:	2b20      	cmp	r3, #32
 801ca3c:	d108      	bne.n	801ca50 <HAL_RCC_OscConfig+0x348>
 801ca3e:	4b70      	ldr	r3, [pc, #448]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca40:	685b      	ldr	r3, [r3, #4]
 801ca42:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ca46:	4a6e      	ldr	r2, [pc, #440]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ca4c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ca4e:	e075      	b.n	801cb3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ca50:	4b6b      	ldr	r3, [pc, #428]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca52:	685b      	ldr	r3, [r3, #4]
 801ca54:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	6a1b      	ldr	r3, [r3, #32]
 801ca5c:	069b      	lsls	r3, r3, #26
 801ca5e:	4968      	ldr	r1, [pc, #416]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca60:	4313      	orrs	r3, r2
 801ca62:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ca64:	e06a      	b.n	801cb3c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801ca66:	4b66      	ldr	r3, [pc, #408]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca68:	68db      	ldr	r3, [r3, #12]
 801ca6a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ca6e:	687b      	ldr	r3, [r7, #4]
 801ca70:	6a1b      	ldr	r3, [r3, #32]
 801ca72:	061b      	lsls	r3, r3, #24
 801ca74:	4962      	ldr	r1, [pc, #392]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca76:	4313      	orrs	r3, r2
 801ca78:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801ca7a:	e05f      	b.n	801cb3c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	69db      	ldr	r3, [r3, #28]
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d042      	beq.n	801cb0a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801ca84:	4b5e      	ldr	r3, [pc, #376]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca86:	681b      	ldr	r3, [r3, #0]
 801ca88:	4a5d      	ldr	r2, [pc, #372]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801ca8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ca8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ca90:	f7fd fa22 	bl	8019ed8 <HAL_GetTick>
 801ca94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ca96:	e008      	b.n	801caaa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ca98:	f7fd fa1e 	bl	8019ed8 <HAL_GetTick>
 801ca9c:	4602      	mov	r2, r0
 801ca9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caa0:	1ad3      	subs	r3, r2, r3
 801caa2:	2b02      	cmp	r3, #2
 801caa4:	d901      	bls.n	801caaa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801caa6:	2303      	movs	r3, #3
 801caa8:	e280      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801caaa:	4b55      	ldr	r3, [pc, #340]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d0f0      	beq.n	801ca98 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801cab6:	f7fd fa3f 	bl	8019f38 <HAL_GetREVID>
 801caba:	4603      	mov	r3, r0
 801cabc:	f241 0203 	movw	r2, #4099	@ 0x1003
 801cac0:	4293      	cmp	r3, r2
 801cac2:	d817      	bhi.n	801caf4 <HAL_RCC_OscConfig+0x3ec>
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	6a1b      	ldr	r3, [r3, #32]
 801cac8:	2b20      	cmp	r3, #32
 801caca:	d108      	bne.n	801cade <HAL_RCC_OscConfig+0x3d6>
 801cacc:	4b4c      	ldr	r3, [pc, #304]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cace:	685b      	ldr	r3, [r3, #4]
 801cad0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801cad4:	4a4a      	ldr	r2, [pc, #296]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cad6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801cada:	6053      	str	r3, [r2, #4]
 801cadc:	e02e      	b.n	801cb3c <HAL_RCC_OscConfig+0x434>
 801cade:	4b48      	ldr	r3, [pc, #288]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cae0:	685b      	ldr	r3, [r3, #4]
 801cae2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	6a1b      	ldr	r3, [r3, #32]
 801caea:	069b      	lsls	r3, r3, #26
 801caec:	4944      	ldr	r1, [pc, #272]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801caee:	4313      	orrs	r3, r2
 801caf0:	604b      	str	r3, [r1, #4]
 801caf2:	e023      	b.n	801cb3c <HAL_RCC_OscConfig+0x434>
 801caf4:	4b42      	ldr	r3, [pc, #264]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801caf6:	68db      	ldr	r3, [r3, #12]
 801caf8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	6a1b      	ldr	r3, [r3, #32]
 801cb00:	061b      	lsls	r3, r3, #24
 801cb02:	493f      	ldr	r1, [pc, #252]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb04:	4313      	orrs	r3, r2
 801cb06:	60cb      	str	r3, [r1, #12]
 801cb08:	e018      	b.n	801cb3c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801cb0a:	4b3d      	ldr	r3, [pc, #244]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb0c:	681b      	ldr	r3, [r3, #0]
 801cb0e:	4a3c      	ldr	r2, [pc, #240]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb10:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801cb14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb16:	f7fd f9df 	bl	8019ed8 <HAL_GetTick>
 801cb1a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801cb1c:	e008      	b.n	801cb30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801cb1e:	f7fd f9db 	bl	8019ed8 <HAL_GetTick>
 801cb22:	4602      	mov	r2, r0
 801cb24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb26:	1ad3      	subs	r3, r2, r3
 801cb28:	2b02      	cmp	r3, #2
 801cb2a:	d901      	bls.n	801cb30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801cb2c:	2303      	movs	r3, #3
 801cb2e:	e23d      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801cb30:	4b33      	ldr	r3, [pc, #204]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb32:	681b      	ldr	r3, [r3, #0]
 801cb34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cb38:	2b00      	cmp	r3, #0
 801cb3a:	d1f0      	bne.n	801cb1e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801cb3c:	687b      	ldr	r3, [r7, #4]
 801cb3e:	681b      	ldr	r3, [r3, #0]
 801cb40:	f003 0308 	and.w	r3, r3, #8
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d036      	beq.n	801cbb6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	695b      	ldr	r3, [r3, #20]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d019      	beq.n	801cb84 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801cb50:	4b2b      	ldr	r3, [pc, #172]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cb54:	4a2a      	ldr	r2, [pc, #168]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb56:	f043 0301 	orr.w	r3, r3, #1
 801cb5a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cb5c:	f7fd f9bc 	bl	8019ed8 <HAL_GetTick>
 801cb60:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801cb62:	e008      	b.n	801cb76 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cb64:	f7fd f9b8 	bl	8019ed8 <HAL_GetTick>
 801cb68:	4602      	mov	r2, r0
 801cb6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cb6c:	1ad3      	subs	r3, r2, r3
 801cb6e:	2b02      	cmp	r3, #2
 801cb70:	d901      	bls.n	801cb76 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801cb72:	2303      	movs	r3, #3
 801cb74:	e21a      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801cb76:	4b22      	ldr	r3, [pc, #136]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cb7a:	f003 0302 	and.w	r3, r3, #2
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d0f0      	beq.n	801cb64 <HAL_RCC_OscConfig+0x45c>
 801cb82:	e018      	b.n	801cbb6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801cb84:	4b1e      	ldr	r3, [pc, #120]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cb88:	4a1d      	ldr	r2, [pc, #116]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cb8a:	f023 0301 	bic.w	r3, r3, #1
 801cb8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cb90:	f7fd f9a2 	bl	8019ed8 <HAL_GetTick>
 801cb94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801cb96:	e008      	b.n	801cbaa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801cb98:	f7fd f99e 	bl	8019ed8 <HAL_GetTick>
 801cb9c:	4602      	mov	r2, r0
 801cb9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cba0:	1ad3      	subs	r3, r2, r3
 801cba2:	2b02      	cmp	r3, #2
 801cba4:	d901      	bls.n	801cbaa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801cba6:	2303      	movs	r3, #3
 801cba8:	e200      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801cbaa:	4b15      	ldr	r3, [pc, #84]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cbac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801cbae:	f003 0302 	and.w	r3, r3, #2
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d1f0      	bne.n	801cb98 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	681b      	ldr	r3, [r3, #0]
 801cbba:	f003 0320 	and.w	r3, r3, #32
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d039      	beq.n	801cc36 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	699b      	ldr	r3, [r3, #24]
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d01c      	beq.n	801cc04 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801cbca:	4b0d      	ldr	r3, [pc, #52]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cbcc:	681b      	ldr	r3, [r3, #0]
 801cbce:	4a0c      	ldr	r2, [pc, #48]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cbd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801cbd4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801cbd6:	f7fd f97f 	bl	8019ed8 <HAL_GetTick>
 801cbda:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801cbdc:	e008      	b.n	801cbf0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801cbde:	f7fd f97b 	bl	8019ed8 <HAL_GetTick>
 801cbe2:	4602      	mov	r2, r0
 801cbe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cbe6:	1ad3      	subs	r3, r2, r3
 801cbe8:	2b02      	cmp	r3, #2
 801cbea:	d901      	bls.n	801cbf0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801cbec:	2303      	movs	r3, #3
 801cbee:	e1dd      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801cbf0:	4b03      	ldr	r3, [pc, #12]	@ (801cc00 <HAL_RCC_OscConfig+0x4f8>)
 801cbf2:	681b      	ldr	r3, [r3, #0]
 801cbf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	d0f0      	beq.n	801cbde <HAL_RCC_OscConfig+0x4d6>
 801cbfc:	e01b      	b.n	801cc36 <HAL_RCC_OscConfig+0x52e>
 801cbfe:	bf00      	nop
 801cc00:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801cc04:	4b9b      	ldr	r3, [pc, #620]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cc06:	681b      	ldr	r3, [r3, #0]
 801cc08:	4a9a      	ldr	r2, [pc, #616]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cc0a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801cc0e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801cc10:	f7fd f962 	bl	8019ed8 <HAL_GetTick>
 801cc14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801cc16:	e008      	b.n	801cc2a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801cc18:	f7fd f95e 	bl	8019ed8 <HAL_GetTick>
 801cc1c:	4602      	mov	r2, r0
 801cc1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc20:	1ad3      	subs	r3, r2, r3
 801cc22:	2b02      	cmp	r3, #2
 801cc24:	d901      	bls.n	801cc2a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801cc26:	2303      	movs	r3, #3
 801cc28:	e1c0      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801cc2a:	4b92      	ldr	r3, [pc, #584]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d1f0      	bne.n	801cc18 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801cc36:	687b      	ldr	r3, [r7, #4]
 801cc38:	681b      	ldr	r3, [r3, #0]
 801cc3a:	f003 0304 	and.w	r3, r3, #4
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	f000 8081 	beq.w	801cd46 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801cc44:	4b8c      	ldr	r3, [pc, #560]	@ (801ce78 <HAL_RCC_OscConfig+0x770>)
 801cc46:	681b      	ldr	r3, [r3, #0]
 801cc48:	4a8b      	ldr	r2, [pc, #556]	@ (801ce78 <HAL_RCC_OscConfig+0x770>)
 801cc4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801cc4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cc50:	f7fd f942 	bl	8019ed8 <HAL_GetTick>
 801cc54:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cc56:	e008      	b.n	801cc6a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cc58:	f7fd f93e 	bl	8019ed8 <HAL_GetTick>
 801cc5c:	4602      	mov	r2, r0
 801cc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cc60:	1ad3      	subs	r3, r2, r3
 801cc62:	2b64      	cmp	r3, #100	@ 0x64
 801cc64:	d901      	bls.n	801cc6a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801cc66:	2303      	movs	r3, #3
 801cc68:	e1a0      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cc6a:	4b83      	ldr	r3, [pc, #524]	@ (801ce78 <HAL_RCC_OscConfig+0x770>)
 801cc6c:	681b      	ldr	r3, [r3, #0]
 801cc6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d0f0      	beq.n	801cc58 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	689b      	ldr	r3, [r3, #8]
 801cc7a:	2b01      	cmp	r3, #1
 801cc7c:	d106      	bne.n	801cc8c <HAL_RCC_OscConfig+0x584>
 801cc7e:	4b7d      	ldr	r3, [pc, #500]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cc80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cc82:	4a7c      	ldr	r2, [pc, #496]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cc84:	f043 0301 	orr.w	r3, r3, #1
 801cc88:	6713      	str	r3, [r2, #112]	@ 0x70
 801cc8a:	e02d      	b.n	801cce8 <HAL_RCC_OscConfig+0x5e0>
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	689b      	ldr	r3, [r3, #8]
 801cc90:	2b00      	cmp	r3, #0
 801cc92:	d10c      	bne.n	801ccae <HAL_RCC_OscConfig+0x5a6>
 801cc94:	4b77      	ldr	r3, [pc, #476]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cc96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cc98:	4a76      	ldr	r2, [pc, #472]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cc9a:	f023 0301 	bic.w	r3, r3, #1
 801cc9e:	6713      	str	r3, [r2, #112]	@ 0x70
 801cca0:	4b74      	ldr	r3, [pc, #464]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cca4:	4a73      	ldr	r2, [pc, #460]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cca6:	f023 0304 	bic.w	r3, r3, #4
 801ccaa:	6713      	str	r3, [r2, #112]	@ 0x70
 801ccac:	e01c      	b.n	801cce8 <HAL_RCC_OscConfig+0x5e0>
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	689b      	ldr	r3, [r3, #8]
 801ccb2:	2b05      	cmp	r3, #5
 801ccb4:	d10c      	bne.n	801ccd0 <HAL_RCC_OscConfig+0x5c8>
 801ccb6:	4b6f      	ldr	r3, [pc, #444]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ccb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccba:	4a6e      	ldr	r2, [pc, #440]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ccbc:	f043 0304 	orr.w	r3, r3, #4
 801ccc0:	6713      	str	r3, [r2, #112]	@ 0x70
 801ccc2:	4b6c      	ldr	r3, [pc, #432]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ccc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccc6:	4a6b      	ldr	r2, [pc, #428]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ccc8:	f043 0301 	orr.w	r3, r3, #1
 801cccc:	6713      	str	r3, [r2, #112]	@ 0x70
 801ccce:	e00b      	b.n	801cce8 <HAL_RCC_OscConfig+0x5e0>
 801ccd0:	4b68      	ldr	r3, [pc, #416]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ccd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccd4:	4a67      	ldr	r2, [pc, #412]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ccd6:	f023 0301 	bic.w	r3, r3, #1
 801ccda:	6713      	str	r3, [r2, #112]	@ 0x70
 801ccdc:	4b65      	ldr	r3, [pc, #404]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ccde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cce0:	4a64      	ldr	r2, [pc, #400]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cce2:	f023 0304 	bic.w	r3, r3, #4
 801cce6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801cce8:	687b      	ldr	r3, [r7, #4]
 801ccea:	689b      	ldr	r3, [r3, #8]
 801ccec:	2b00      	cmp	r3, #0
 801ccee:	d015      	beq.n	801cd1c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ccf0:	f7fd f8f2 	bl	8019ed8 <HAL_GetTick>
 801ccf4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ccf6:	e00a      	b.n	801cd0e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ccf8:	f7fd f8ee 	bl	8019ed8 <HAL_GetTick>
 801ccfc:	4602      	mov	r2, r0
 801ccfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd00:	1ad3      	subs	r3, r2, r3
 801cd02:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cd06:	4293      	cmp	r3, r2
 801cd08:	d901      	bls.n	801cd0e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801cd0a:	2303      	movs	r3, #3
 801cd0c:	e14e      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801cd0e:	4b59      	ldr	r3, [pc, #356]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cd10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cd12:	f003 0302 	and.w	r3, r3, #2
 801cd16:	2b00      	cmp	r3, #0
 801cd18:	d0ee      	beq.n	801ccf8 <HAL_RCC_OscConfig+0x5f0>
 801cd1a:	e014      	b.n	801cd46 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801cd1c:	f7fd f8dc 	bl	8019ed8 <HAL_GetTick>
 801cd20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801cd22:	e00a      	b.n	801cd3a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801cd24:	f7fd f8d8 	bl	8019ed8 <HAL_GetTick>
 801cd28:	4602      	mov	r2, r0
 801cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd2c:	1ad3      	subs	r3, r2, r3
 801cd2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801cd32:	4293      	cmp	r3, r2
 801cd34:	d901      	bls.n	801cd3a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801cd36:	2303      	movs	r3, #3
 801cd38:	e138      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801cd3a:	4b4e      	ldr	r3, [pc, #312]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cd3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cd3e:	f003 0302 	and.w	r3, r3, #2
 801cd42:	2b00      	cmp	r3, #0
 801cd44:	d1ee      	bne.n	801cd24 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801cd46:	687b      	ldr	r3, [r7, #4]
 801cd48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	f000 812d 	beq.w	801cfaa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801cd50:	4b48      	ldr	r3, [pc, #288]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cd52:	691b      	ldr	r3, [r3, #16]
 801cd54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801cd58:	2b18      	cmp	r3, #24
 801cd5a:	f000 80bd 	beq.w	801ced8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cd62:	2b02      	cmp	r3, #2
 801cd64:	f040 809e 	bne.w	801cea4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cd68:	4b42      	ldr	r3, [pc, #264]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cd6a:	681b      	ldr	r3, [r3, #0]
 801cd6c:	4a41      	ldr	r2, [pc, #260]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cd6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801cd72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cd74:	f7fd f8b0 	bl	8019ed8 <HAL_GetTick>
 801cd78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cd7a:	e008      	b.n	801cd8e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cd7c:	f7fd f8ac 	bl	8019ed8 <HAL_GetTick>
 801cd80:	4602      	mov	r2, r0
 801cd82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cd84:	1ad3      	subs	r3, r2, r3
 801cd86:	2b02      	cmp	r3, #2
 801cd88:	d901      	bls.n	801cd8e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801cd8a:	2303      	movs	r3, #3
 801cd8c:	e10e      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801cd8e:	4b39      	ldr	r3, [pc, #228]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cd90:	681b      	ldr	r3, [r3, #0]
 801cd92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cd96:	2b00      	cmp	r3, #0
 801cd98:	d1f0      	bne.n	801cd7c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801cd9a:	4b36      	ldr	r3, [pc, #216]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cd9c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801cd9e:	4b37      	ldr	r3, [pc, #220]	@ (801ce7c <HAL_RCC_OscConfig+0x774>)
 801cda0:	4013      	ands	r3, r2
 801cda2:	687a      	ldr	r2, [r7, #4]
 801cda4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801cda6:	687a      	ldr	r2, [r7, #4]
 801cda8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801cdaa:	0112      	lsls	r2, r2, #4
 801cdac:	430a      	orrs	r2, r1
 801cdae:	4931      	ldr	r1, [pc, #196]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cdb0:	4313      	orrs	r3, r2
 801cdb2:	628b      	str	r3, [r1, #40]	@ 0x28
 801cdb4:	687b      	ldr	r3, [r7, #4]
 801cdb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cdb8:	3b01      	subs	r3, #1
 801cdba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cdc2:	3b01      	subs	r3, #1
 801cdc4:	025b      	lsls	r3, r3, #9
 801cdc6:	b29b      	uxth	r3, r3
 801cdc8:	431a      	orrs	r2, r3
 801cdca:	687b      	ldr	r3, [r7, #4]
 801cdcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cdce:	3b01      	subs	r3, #1
 801cdd0:	041b      	lsls	r3, r3, #16
 801cdd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801cdd6:	431a      	orrs	r2, r3
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cddc:	3b01      	subs	r3, #1
 801cdde:	061b      	lsls	r3, r3, #24
 801cde0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801cde4:	4923      	ldr	r1, [pc, #140]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cde6:	4313      	orrs	r3, r2
 801cde8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801cdea:	4b22      	ldr	r3, [pc, #136]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cdec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdee:	4a21      	ldr	r2, [pc, #132]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cdf0:	f023 0301 	bic.w	r3, r3, #1
 801cdf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cdf6:	4b1f      	ldr	r3, [pc, #124]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801cdf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cdfa:	4b21      	ldr	r3, [pc, #132]	@ (801ce80 <HAL_RCC_OscConfig+0x778>)
 801cdfc:	4013      	ands	r3, r2
 801cdfe:	687a      	ldr	r2, [r7, #4]
 801ce00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801ce02:	00d2      	lsls	r2, r2, #3
 801ce04:	491b      	ldr	r1, [pc, #108]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce06:	4313      	orrs	r3, r2
 801ce08:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801ce0a:	4b1a      	ldr	r3, [pc, #104]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce0e:	f023 020c 	bic.w	r2, r3, #12
 801ce12:	687b      	ldr	r3, [r7, #4]
 801ce14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ce16:	4917      	ldr	r1, [pc, #92]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce18:	4313      	orrs	r3, r2
 801ce1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801ce1c:	4b15      	ldr	r3, [pc, #84]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce20:	f023 0202 	bic.w	r2, r3, #2
 801ce24:	687b      	ldr	r3, [r7, #4]
 801ce26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ce28:	4912      	ldr	r1, [pc, #72]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce2a:	4313      	orrs	r3, r2
 801ce2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801ce2e:	4b11      	ldr	r3, [pc, #68]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce32:	4a10      	ldr	r2, [pc, #64]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ce38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ce3a:	4b0e      	ldr	r3, [pc, #56]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce3e:	4a0d      	ldr	r2, [pc, #52]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ce44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801ce46:	4b0b      	ldr	r3, [pc, #44]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce4a:	4a0a      	ldr	r2, [pc, #40]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801ce50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801ce52:	4b08      	ldr	r3, [pc, #32]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ce56:	4a07      	ldr	r2, [pc, #28]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce58:	f043 0301 	orr.w	r3, r3, #1
 801ce5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801ce5e:	4b05      	ldr	r3, [pc, #20]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	4a04      	ldr	r2, [pc, #16]	@ (801ce74 <HAL_RCC_OscConfig+0x76c>)
 801ce64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801ce68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ce6a:	f7fd f835 	bl	8019ed8 <HAL_GetTick>
 801ce6e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ce70:	e011      	b.n	801ce96 <HAL_RCC_OscConfig+0x78e>
 801ce72:	bf00      	nop
 801ce74:	58024400 	.word	0x58024400
 801ce78:	58024800 	.word	0x58024800
 801ce7c:	fffffc0c 	.word	0xfffffc0c
 801ce80:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ce84:	f7fd f828 	bl	8019ed8 <HAL_GetTick>
 801ce88:	4602      	mov	r2, r0
 801ce8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce8c:	1ad3      	subs	r3, r2, r3
 801ce8e:	2b02      	cmp	r3, #2
 801ce90:	d901      	bls.n	801ce96 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801ce92:	2303      	movs	r3, #3
 801ce94:	e08a      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ce96:	4b47      	ldr	r3, [pc, #284]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801ce98:	681b      	ldr	r3, [r3, #0]
 801ce9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ce9e:	2b00      	cmp	r3, #0
 801cea0:	d0f0      	beq.n	801ce84 <HAL_RCC_OscConfig+0x77c>
 801cea2:	e082      	b.n	801cfaa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cea4:	4b43      	ldr	r3, [pc, #268]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	4a42      	ldr	r2, [pc, #264]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801ceaa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801ceae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ceb0:	f7fd f812 	bl	8019ed8 <HAL_GetTick>
 801ceb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ceb6:	e008      	b.n	801ceca <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801ceb8:	f7fd f80e 	bl	8019ed8 <HAL_GetTick>
 801cebc:	4602      	mov	r2, r0
 801cebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cec0:	1ad3      	subs	r3, r2, r3
 801cec2:	2b02      	cmp	r3, #2
 801cec4:	d901      	bls.n	801ceca <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801cec6:	2303      	movs	r3, #3
 801cec8:	e070      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801ceca:	4b3a      	ldr	r3, [pc, #232]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d1f0      	bne.n	801ceb8 <HAL_RCC_OscConfig+0x7b0>
 801ced6:	e068      	b.n	801cfaa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801ced8:	4b36      	ldr	r3, [pc, #216]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801ceda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801cedc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801cede:	4b35      	ldr	r3, [pc, #212]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cee2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801cee8:	2b01      	cmp	r3, #1
 801ceea:	d031      	beq.n	801cf50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801ceec:	693b      	ldr	r3, [r7, #16]
 801ceee:	f003 0203 	and.w	r2, r3, #3
 801cef2:	687b      	ldr	r3, [r7, #4]
 801cef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cef6:	429a      	cmp	r2, r3
 801cef8:	d12a      	bne.n	801cf50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cefa:	693b      	ldr	r3, [r7, #16]
 801cefc:	091b      	lsrs	r3, r3, #4
 801cefe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801cf02:	687b      	ldr	r3, [r7, #4]
 801cf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cf06:	429a      	cmp	r2, r3
 801cf08:	d122      	bne.n	801cf50 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cf0a:	68fb      	ldr	r3, [r7, #12]
 801cf0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801cf10:	687b      	ldr	r3, [r7, #4]
 801cf12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cf14:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801cf16:	429a      	cmp	r2, r3
 801cf18:	d11a      	bne.n	801cf50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cf1a:	68fb      	ldr	r3, [r7, #12]
 801cf1c:	0a5b      	lsrs	r3, r3, #9
 801cf1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf26:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801cf28:	429a      	cmp	r2, r3
 801cf2a:	d111      	bne.n	801cf50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cf2c:	68fb      	ldr	r3, [r7, #12]
 801cf2e:	0c1b      	lsrs	r3, r3, #16
 801cf30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801cf38:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801cf3a:	429a      	cmp	r2, r3
 801cf3c:	d108      	bne.n	801cf50 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801cf3e:	68fb      	ldr	r3, [r7, #12]
 801cf40:	0e1b      	lsrs	r3, r3, #24
 801cf42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801cf46:	687b      	ldr	r3, [r7, #4]
 801cf48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801cf4a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801cf4c:	429a      	cmp	r2, r3
 801cf4e:	d001      	beq.n	801cf54 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801cf50:	2301      	movs	r3, #1
 801cf52:	e02b      	b.n	801cfac <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801cf54:	4b17      	ldr	r3, [pc, #92]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cf56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801cf58:	08db      	lsrs	r3, r3, #3
 801cf5a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cf5e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cf64:	693a      	ldr	r2, [r7, #16]
 801cf66:	429a      	cmp	r2, r3
 801cf68:	d01f      	beq.n	801cfaa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801cf6a:	4b12      	ldr	r3, [pc, #72]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cf6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf6e:	4a11      	ldr	r2, [pc, #68]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cf70:	f023 0301 	bic.w	r3, r3, #1
 801cf74:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801cf76:	f7fc ffaf 	bl	8019ed8 <HAL_GetTick>
 801cf7a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801cf7c:	bf00      	nop
 801cf7e:	f7fc ffab 	bl	8019ed8 <HAL_GetTick>
 801cf82:	4602      	mov	r2, r0
 801cf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cf86:	4293      	cmp	r3, r2
 801cf88:	d0f9      	beq.n	801cf7e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801cf8a:	4b0a      	ldr	r3, [pc, #40]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cf8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801cf8e:	4b0a      	ldr	r3, [pc, #40]	@ (801cfb8 <HAL_RCC_OscConfig+0x8b0>)
 801cf90:	4013      	ands	r3, r2
 801cf92:	687a      	ldr	r2, [r7, #4]
 801cf94:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801cf96:	00d2      	lsls	r2, r2, #3
 801cf98:	4906      	ldr	r1, [pc, #24]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cf9a:	4313      	orrs	r3, r2
 801cf9c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801cf9e:	4b05      	ldr	r3, [pc, #20]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cfa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cfa2:	4a04      	ldr	r2, [pc, #16]	@ (801cfb4 <HAL_RCC_OscConfig+0x8ac>)
 801cfa4:	f043 0301 	orr.w	r3, r3, #1
 801cfa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801cfaa:	2300      	movs	r3, #0
}
 801cfac:	4618      	mov	r0, r3
 801cfae:	3730      	adds	r7, #48	@ 0x30
 801cfb0:	46bd      	mov	sp, r7
 801cfb2:	bd80      	pop	{r7, pc}
 801cfb4:	58024400 	.word	0x58024400
 801cfb8:	ffff0007 	.word	0xffff0007

0801cfbc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801cfbc:	b580      	push	{r7, lr}
 801cfbe:	b086      	sub	sp, #24
 801cfc0:	af00      	add	r7, sp, #0
 801cfc2:	6078      	str	r0, [r7, #4]
 801cfc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d101      	bne.n	801cfd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801cfcc:	2301      	movs	r3, #1
 801cfce:	e19c      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801cfd0:	4b8a      	ldr	r3, [pc, #552]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801cfd2:	681b      	ldr	r3, [r3, #0]
 801cfd4:	f003 030f 	and.w	r3, r3, #15
 801cfd8:	683a      	ldr	r2, [r7, #0]
 801cfda:	429a      	cmp	r2, r3
 801cfdc:	d910      	bls.n	801d000 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cfde:	4b87      	ldr	r3, [pc, #540]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801cfe0:	681b      	ldr	r3, [r3, #0]
 801cfe2:	f023 020f 	bic.w	r2, r3, #15
 801cfe6:	4985      	ldr	r1, [pc, #532]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801cfe8:	683b      	ldr	r3, [r7, #0]
 801cfea:	4313      	orrs	r3, r2
 801cfec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cfee:	4b83      	ldr	r3, [pc, #524]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801cff0:	681b      	ldr	r3, [r3, #0]
 801cff2:	f003 030f 	and.w	r3, r3, #15
 801cff6:	683a      	ldr	r2, [r7, #0]
 801cff8:	429a      	cmp	r2, r3
 801cffa:	d001      	beq.n	801d000 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801cffc:	2301      	movs	r3, #1
 801cffe:	e184      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	f003 0304 	and.w	r3, r3, #4
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d010      	beq.n	801d02e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d00c:	687b      	ldr	r3, [r7, #4]
 801d00e:	691a      	ldr	r2, [r3, #16]
 801d010:	4b7b      	ldr	r3, [pc, #492]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d012:	699b      	ldr	r3, [r3, #24]
 801d014:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d018:	429a      	cmp	r2, r3
 801d01a:	d908      	bls.n	801d02e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d01c:	4b78      	ldr	r3, [pc, #480]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d01e:	699b      	ldr	r3, [r3, #24]
 801d020:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	691b      	ldr	r3, [r3, #16]
 801d028:	4975      	ldr	r1, [pc, #468]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d02a:	4313      	orrs	r3, r2
 801d02c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d02e:	687b      	ldr	r3, [r7, #4]
 801d030:	681b      	ldr	r3, [r3, #0]
 801d032:	f003 0308 	and.w	r3, r3, #8
 801d036:	2b00      	cmp	r3, #0
 801d038:	d010      	beq.n	801d05c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	695a      	ldr	r2, [r3, #20]
 801d03e:	4b70      	ldr	r3, [pc, #448]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d040:	69db      	ldr	r3, [r3, #28]
 801d042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d046:	429a      	cmp	r2, r3
 801d048:	d908      	bls.n	801d05c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d04a:	4b6d      	ldr	r3, [pc, #436]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d04c:	69db      	ldr	r3, [r3, #28]
 801d04e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d052:	687b      	ldr	r3, [r7, #4]
 801d054:	695b      	ldr	r3, [r3, #20]
 801d056:	496a      	ldr	r1, [pc, #424]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d058:	4313      	orrs	r3, r2
 801d05a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d05c:	687b      	ldr	r3, [r7, #4]
 801d05e:	681b      	ldr	r3, [r3, #0]
 801d060:	f003 0310 	and.w	r3, r3, #16
 801d064:	2b00      	cmp	r3, #0
 801d066:	d010      	beq.n	801d08a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d068:	687b      	ldr	r3, [r7, #4]
 801d06a:	699a      	ldr	r2, [r3, #24]
 801d06c:	4b64      	ldr	r3, [pc, #400]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d06e:	69db      	ldr	r3, [r3, #28]
 801d070:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d074:	429a      	cmp	r2, r3
 801d076:	d908      	bls.n	801d08a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d078:	4b61      	ldr	r3, [pc, #388]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d07a:	69db      	ldr	r3, [r3, #28]
 801d07c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d080:	687b      	ldr	r3, [r7, #4]
 801d082:	699b      	ldr	r3, [r3, #24]
 801d084:	495e      	ldr	r1, [pc, #376]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d086:	4313      	orrs	r3, r2
 801d088:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d08a:	687b      	ldr	r3, [r7, #4]
 801d08c:	681b      	ldr	r3, [r3, #0]
 801d08e:	f003 0320 	and.w	r3, r3, #32
 801d092:	2b00      	cmp	r3, #0
 801d094:	d010      	beq.n	801d0b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	69da      	ldr	r2, [r3, #28]
 801d09a:	4b59      	ldr	r3, [pc, #356]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d09c:	6a1b      	ldr	r3, [r3, #32]
 801d09e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d0a2:	429a      	cmp	r2, r3
 801d0a4:	d908      	bls.n	801d0b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d0a6:	4b56      	ldr	r3, [pc, #344]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d0a8:	6a1b      	ldr	r3, [r3, #32]
 801d0aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d0ae:	687b      	ldr	r3, [r7, #4]
 801d0b0:	69db      	ldr	r3, [r3, #28]
 801d0b2:	4953      	ldr	r1, [pc, #332]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d0b4:	4313      	orrs	r3, r2
 801d0b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	f003 0302 	and.w	r3, r3, #2
 801d0c0:	2b00      	cmp	r3, #0
 801d0c2:	d010      	beq.n	801d0e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d0c4:	687b      	ldr	r3, [r7, #4]
 801d0c6:	68da      	ldr	r2, [r3, #12]
 801d0c8:	4b4d      	ldr	r3, [pc, #308]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d0ca:	699b      	ldr	r3, [r3, #24]
 801d0cc:	f003 030f 	and.w	r3, r3, #15
 801d0d0:	429a      	cmp	r2, r3
 801d0d2:	d908      	bls.n	801d0e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d0d4:	4b4a      	ldr	r3, [pc, #296]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d0d6:	699b      	ldr	r3, [r3, #24]
 801d0d8:	f023 020f 	bic.w	r2, r3, #15
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	68db      	ldr	r3, [r3, #12]
 801d0e0:	4947      	ldr	r1, [pc, #284]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d0e2:	4313      	orrs	r3, r2
 801d0e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801d0e6:	687b      	ldr	r3, [r7, #4]
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	f003 0301 	and.w	r3, r3, #1
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d055      	beq.n	801d19e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801d0f2:	4b43      	ldr	r3, [pc, #268]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d0f4:	699b      	ldr	r3, [r3, #24]
 801d0f6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801d0fa:	687b      	ldr	r3, [r7, #4]
 801d0fc:	689b      	ldr	r3, [r3, #8]
 801d0fe:	4940      	ldr	r1, [pc, #256]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d100:	4313      	orrs	r3, r2
 801d102:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801d104:	687b      	ldr	r3, [r7, #4]
 801d106:	685b      	ldr	r3, [r3, #4]
 801d108:	2b02      	cmp	r3, #2
 801d10a:	d107      	bne.n	801d11c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801d10c:	4b3c      	ldr	r3, [pc, #240]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d114:	2b00      	cmp	r3, #0
 801d116:	d121      	bne.n	801d15c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d118:	2301      	movs	r3, #1
 801d11a:	e0f6      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801d11c:	687b      	ldr	r3, [r7, #4]
 801d11e:	685b      	ldr	r3, [r3, #4]
 801d120:	2b03      	cmp	r3, #3
 801d122:	d107      	bne.n	801d134 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801d124:	4b36      	ldr	r3, [pc, #216]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d12c:	2b00      	cmp	r3, #0
 801d12e:	d115      	bne.n	801d15c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d130:	2301      	movs	r3, #1
 801d132:	e0ea      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	685b      	ldr	r3, [r3, #4]
 801d138:	2b01      	cmp	r3, #1
 801d13a:	d107      	bne.n	801d14c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801d13c:	4b30      	ldr	r3, [pc, #192]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d144:	2b00      	cmp	r3, #0
 801d146:	d109      	bne.n	801d15c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d148:	2301      	movs	r3, #1
 801d14a:	e0de      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801d14c:	4b2c      	ldr	r3, [pc, #176]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d14e:	681b      	ldr	r3, [r3, #0]
 801d150:	f003 0304 	and.w	r3, r3, #4
 801d154:	2b00      	cmp	r3, #0
 801d156:	d101      	bne.n	801d15c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801d158:	2301      	movs	r3, #1
 801d15a:	e0d6      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801d15c:	4b28      	ldr	r3, [pc, #160]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d15e:	691b      	ldr	r3, [r3, #16]
 801d160:	f023 0207 	bic.w	r2, r3, #7
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	685b      	ldr	r3, [r3, #4]
 801d168:	4925      	ldr	r1, [pc, #148]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d16a:	4313      	orrs	r3, r2
 801d16c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d16e:	f7fc feb3 	bl	8019ed8 <HAL_GetTick>
 801d172:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d174:	e00a      	b.n	801d18c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801d176:	f7fc feaf 	bl	8019ed8 <HAL_GetTick>
 801d17a:	4602      	mov	r2, r0
 801d17c:	697b      	ldr	r3, [r7, #20]
 801d17e:	1ad3      	subs	r3, r2, r3
 801d180:	f241 3288 	movw	r2, #5000	@ 0x1388
 801d184:	4293      	cmp	r3, r2
 801d186:	d901      	bls.n	801d18c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801d188:	2303      	movs	r3, #3
 801d18a:	e0be      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801d18c:	4b1c      	ldr	r3, [pc, #112]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d18e:	691b      	ldr	r3, [r3, #16]
 801d190:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801d194:	687b      	ldr	r3, [r7, #4]
 801d196:	685b      	ldr	r3, [r3, #4]
 801d198:	00db      	lsls	r3, r3, #3
 801d19a:	429a      	cmp	r2, r3
 801d19c:	d1eb      	bne.n	801d176 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	f003 0302 	and.w	r3, r3, #2
 801d1a6:	2b00      	cmp	r3, #0
 801d1a8:	d010      	beq.n	801d1cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801d1aa:	687b      	ldr	r3, [r7, #4]
 801d1ac:	68da      	ldr	r2, [r3, #12]
 801d1ae:	4b14      	ldr	r3, [pc, #80]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d1b0:	699b      	ldr	r3, [r3, #24]
 801d1b2:	f003 030f 	and.w	r3, r3, #15
 801d1b6:	429a      	cmp	r2, r3
 801d1b8:	d208      	bcs.n	801d1cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801d1ba:	4b11      	ldr	r3, [pc, #68]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d1bc:	699b      	ldr	r3, [r3, #24]
 801d1be:	f023 020f 	bic.w	r2, r3, #15
 801d1c2:	687b      	ldr	r3, [r7, #4]
 801d1c4:	68db      	ldr	r3, [r3, #12]
 801d1c6:	490e      	ldr	r1, [pc, #56]	@ (801d200 <HAL_RCC_ClockConfig+0x244>)
 801d1c8:	4313      	orrs	r3, r2
 801d1ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801d1cc:	4b0b      	ldr	r3, [pc, #44]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801d1ce:	681b      	ldr	r3, [r3, #0]
 801d1d0:	f003 030f 	and.w	r3, r3, #15
 801d1d4:	683a      	ldr	r2, [r7, #0]
 801d1d6:	429a      	cmp	r2, r3
 801d1d8:	d214      	bcs.n	801d204 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801d1da:	4b08      	ldr	r3, [pc, #32]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	f023 020f 	bic.w	r2, r3, #15
 801d1e2:	4906      	ldr	r1, [pc, #24]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801d1e4:	683b      	ldr	r3, [r7, #0]
 801d1e6:	4313      	orrs	r3, r2
 801d1e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801d1ea:	4b04      	ldr	r3, [pc, #16]	@ (801d1fc <HAL_RCC_ClockConfig+0x240>)
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	f003 030f 	and.w	r3, r3, #15
 801d1f2:	683a      	ldr	r2, [r7, #0]
 801d1f4:	429a      	cmp	r2, r3
 801d1f6:	d005      	beq.n	801d204 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801d1f8:	2301      	movs	r3, #1
 801d1fa:	e086      	b.n	801d30a <HAL_RCC_ClockConfig+0x34e>
 801d1fc:	52002000 	.word	0x52002000
 801d200:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801d204:	687b      	ldr	r3, [r7, #4]
 801d206:	681b      	ldr	r3, [r3, #0]
 801d208:	f003 0304 	and.w	r3, r3, #4
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d010      	beq.n	801d232 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	691a      	ldr	r2, [r3, #16]
 801d214:	4b3f      	ldr	r3, [pc, #252]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d216:	699b      	ldr	r3, [r3, #24]
 801d218:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d21c:	429a      	cmp	r2, r3
 801d21e:	d208      	bcs.n	801d232 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801d220:	4b3c      	ldr	r3, [pc, #240]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d222:	699b      	ldr	r3, [r3, #24]
 801d224:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	691b      	ldr	r3, [r3, #16]
 801d22c:	4939      	ldr	r1, [pc, #228]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d22e:	4313      	orrs	r3, r2
 801d230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	681b      	ldr	r3, [r3, #0]
 801d236:	f003 0308 	and.w	r3, r3, #8
 801d23a:	2b00      	cmp	r3, #0
 801d23c:	d010      	beq.n	801d260 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	695a      	ldr	r2, [r3, #20]
 801d242:	4b34      	ldr	r3, [pc, #208]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d244:	69db      	ldr	r3, [r3, #28]
 801d246:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d24a:	429a      	cmp	r2, r3
 801d24c:	d208      	bcs.n	801d260 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801d24e:	4b31      	ldr	r3, [pc, #196]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d250:	69db      	ldr	r3, [r3, #28]
 801d252:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	695b      	ldr	r3, [r3, #20]
 801d25a:	492e      	ldr	r1, [pc, #184]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d25c:	4313      	orrs	r3, r2
 801d25e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801d260:	687b      	ldr	r3, [r7, #4]
 801d262:	681b      	ldr	r3, [r3, #0]
 801d264:	f003 0310 	and.w	r3, r3, #16
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d010      	beq.n	801d28e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	699a      	ldr	r2, [r3, #24]
 801d270:	4b28      	ldr	r3, [pc, #160]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d272:	69db      	ldr	r3, [r3, #28]
 801d274:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801d278:	429a      	cmp	r2, r3
 801d27a:	d208      	bcs.n	801d28e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801d27c:	4b25      	ldr	r3, [pc, #148]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d27e:	69db      	ldr	r3, [r3, #28]
 801d280:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801d284:	687b      	ldr	r3, [r7, #4]
 801d286:	699b      	ldr	r3, [r3, #24]
 801d288:	4922      	ldr	r1, [pc, #136]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d28a:	4313      	orrs	r3, r2
 801d28c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801d28e:	687b      	ldr	r3, [r7, #4]
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	f003 0320 	and.w	r3, r3, #32
 801d296:	2b00      	cmp	r3, #0
 801d298:	d010      	beq.n	801d2bc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801d29a:	687b      	ldr	r3, [r7, #4]
 801d29c:	69da      	ldr	r2, [r3, #28]
 801d29e:	4b1d      	ldr	r3, [pc, #116]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d2a0:	6a1b      	ldr	r3, [r3, #32]
 801d2a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801d2a6:	429a      	cmp	r2, r3
 801d2a8:	d208      	bcs.n	801d2bc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801d2aa:	4b1a      	ldr	r3, [pc, #104]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d2ac:	6a1b      	ldr	r3, [r3, #32]
 801d2ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801d2b2:	687b      	ldr	r3, [r7, #4]
 801d2b4:	69db      	ldr	r3, [r3, #28]
 801d2b6:	4917      	ldr	r1, [pc, #92]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d2b8:	4313      	orrs	r3, r2
 801d2ba:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801d2bc:	f000 f834 	bl	801d328 <HAL_RCC_GetSysClockFreq>
 801d2c0:	4602      	mov	r2, r0
 801d2c2:	4b14      	ldr	r3, [pc, #80]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d2c4:	699b      	ldr	r3, [r3, #24]
 801d2c6:	0a1b      	lsrs	r3, r3, #8
 801d2c8:	f003 030f 	and.w	r3, r3, #15
 801d2cc:	4912      	ldr	r1, [pc, #72]	@ (801d318 <HAL_RCC_ClockConfig+0x35c>)
 801d2ce:	5ccb      	ldrb	r3, [r1, r3]
 801d2d0:	f003 031f 	and.w	r3, r3, #31
 801d2d4:	fa22 f303 	lsr.w	r3, r2, r3
 801d2d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d2da:	4b0e      	ldr	r3, [pc, #56]	@ (801d314 <HAL_RCC_ClockConfig+0x358>)
 801d2dc:	699b      	ldr	r3, [r3, #24]
 801d2de:	f003 030f 	and.w	r3, r3, #15
 801d2e2:	4a0d      	ldr	r2, [pc, #52]	@ (801d318 <HAL_RCC_ClockConfig+0x35c>)
 801d2e4:	5cd3      	ldrb	r3, [r2, r3]
 801d2e6:	f003 031f 	and.w	r3, r3, #31
 801d2ea:	693a      	ldr	r2, [r7, #16]
 801d2ec:	fa22 f303 	lsr.w	r3, r2, r3
 801d2f0:	4a0a      	ldr	r2, [pc, #40]	@ (801d31c <HAL_RCC_ClockConfig+0x360>)
 801d2f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d2f4:	4a0a      	ldr	r2, [pc, #40]	@ (801d320 <HAL_RCC_ClockConfig+0x364>)
 801d2f6:	693b      	ldr	r3, [r7, #16]
 801d2f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801d2fa:	4b0a      	ldr	r3, [pc, #40]	@ (801d324 <HAL_RCC_ClockConfig+0x368>)
 801d2fc:	681b      	ldr	r3, [r3, #0]
 801d2fe:	4618      	mov	r0, r3
 801d300:	f7fc fda0 	bl	8019e44 <HAL_InitTick>
 801d304:	4603      	mov	r3, r0
 801d306:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801d308:	7bfb      	ldrb	r3, [r7, #15]
}
 801d30a:	4618      	mov	r0, r3
 801d30c:	3718      	adds	r7, #24
 801d30e:	46bd      	mov	sp, r7
 801d310:	bd80      	pop	{r7, pc}
 801d312:	bf00      	nop
 801d314:	58024400 	.word	0x58024400
 801d318:	0802755c 	.word	0x0802755c
 801d31c:	20000004 	.word	0x20000004
 801d320:	20000000 	.word	0x20000000
 801d324:	20000020 	.word	0x20000020

0801d328 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801d328:	b480      	push	{r7}
 801d32a:	b089      	sub	sp, #36	@ 0x24
 801d32c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801d32e:	4bb3      	ldr	r3, [pc, #716]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d330:	691b      	ldr	r3, [r3, #16]
 801d332:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801d336:	2b18      	cmp	r3, #24
 801d338:	f200 8155 	bhi.w	801d5e6 <HAL_RCC_GetSysClockFreq+0x2be>
 801d33c:	a201      	add	r2, pc, #4	@ (adr r2, 801d344 <HAL_RCC_GetSysClockFreq+0x1c>)
 801d33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d342:	bf00      	nop
 801d344:	0801d3a9 	.word	0x0801d3a9
 801d348:	0801d5e7 	.word	0x0801d5e7
 801d34c:	0801d5e7 	.word	0x0801d5e7
 801d350:	0801d5e7 	.word	0x0801d5e7
 801d354:	0801d5e7 	.word	0x0801d5e7
 801d358:	0801d5e7 	.word	0x0801d5e7
 801d35c:	0801d5e7 	.word	0x0801d5e7
 801d360:	0801d5e7 	.word	0x0801d5e7
 801d364:	0801d3cf 	.word	0x0801d3cf
 801d368:	0801d5e7 	.word	0x0801d5e7
 801d36c:	0801d5e7 	.word	0x0801d5e7
 801d370:	0801d5e7 	.word	0x0801d5e7
 801d374:	0801d5e7 	.word	0x0801d5e7
 801d378:	0801d5e7 	.word	0x0801d5e7
 801d37c:	0801d5e7 	.word	0x0801d5e7
 801d380:	0801d5e7 	.word	0x0801d5e7
 801d384:	0801d3d5 	.word	0x0801d3d5
 801d388:	0801d5e7 	.word	0x0801d5e7
 801d38c:	0801d5e7 	.word	0x0801d5e7
 801d390:	0801d5e7 	.word	0x0801d5e7
 801d394:	0801d5e7 	.word	0x0801d5e7
 801d398:	0801d5e7 	.word	0x0801d5e7
 801d39c:	0801d5e7 	.word	0x0801d5e7
 801d3a0:	0801d5e7 	.word	0x0801d5e7
 801d3a4:	0801d3db 	.word	0x0801d3db
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d3a8:	4b94      	ldr	r3, [pc, #592]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3aa:	681b      	ldr	r3, [r3, #0]
 801d3ac:	f003 0320 	and.w	r3, r3, #32
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d009      	beq.n	801d3c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d3b4:	4b91      	ldr	r3, [pc, #580]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3b6:	681b      	ldr	r3, [r3, #0]
 801d3b8:	08db      	lsrs	r3, r3, #3
 801d3ba:	f003 0303 	and.w	r3, r3, #3
 801d3be:	4a90      	ldr	r2, [pc, #576]	@ (801d600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d3c0:	fa22 f303 	lsr.w	r3, r2, r3
 801d3c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801d3c6:	e111      	b.n	801d5ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801d3c8:	4b8d      	ldr	r3, [pc, #564]	@ (801d600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d3ca:	61bb      	str	r3, [r7, #24]
      break;
 801d3cc:	e10e      	b.n	801d5ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801d3ce:	4b8d      	ldr	r3, [pc, #564]	@ (801d604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d3d0:	61bb      	str	r3, [r7, #24]
      break;
 801d3d2:	e10b      	b.n	801d5ec <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801d3d4:	4b8c      	ldr	r3, [pc, #560]	@ (801d608 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801d3d6:	61bb      	str	r3, [r7, #24]
      break;
 801d3d8:	e108      	b.n	801d5ec <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d3da:	4b88      	ldr	r3, [pc, #544]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d3de:	f003 0303 	and.w	r3, r3, #3
 801d3e2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801d3e4:	4b85      	ldr	r3, [pc, #532]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d3e8:	091b      	lsrs	r3, r3, #4
 801d3ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d3ee:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801d3f0:	4b82      	ldr	r3, [pc, #520]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3f4:	f003 0301 	and.w	r3, r3, #1
 801d3f8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d3fa:	4b80      	ldr	r3, [pc, #512]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d3fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d3fe:	08db      	lsrs	r3, r3, #3
 801d400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d404:	68fa      	ldr	r2, [r7, #12]
 801d406:	fb02 f303 	mul.w	r3, r2, r3
 801d40a:	ee07 3a90 	vmov	s15, r3
 801d40e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d412:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801d416:	693b      	ldr	r3, [r7, #16]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	f000 80e1 	beq.w	801d5e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 801d41e:	697b      	ldr	r3, [r7, #20]
 801d420:	2b02      	cmp	r3, #2
 801d422:	f000 8083 	beq.w	801d52c <HAL_RCC_GetSysClockFreq+0x204>
 801d426:	697b      	ldr	r3, [r7, #20]
 801d428:	2b02      	cmp	r3, #2
 801d42a:	f200 80a1 	bhi.w	801d570 <HAL_RCC_GetSysClockFreq+0x248>
 801d42e:	697b      	ldr	r3, [r7, #20]
 801d430:	2b00      	cmp	r3, #0
 801d432:	d003      	beq.n	801d43c <HAL_RCC_GetSysClockFreq+0x114>
 801d434:	697b      	ldr	r3, [r7, #20]
 801d436:	2b01      	cmp	r3, #1
 801d438:	d056      	beq.n	801d4e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 801d43a:	e099      	b.n	801d570 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d43c:	4b6f      	ldr	r3, [pc, #444]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	f003 0320 	and.w	r3, r3, #32
 801d444:	2b00      	cmp	r3, #0
 801d446:	d02d      	beq.n	801d4a4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d448:	4b6c      	ldr	r3, [pc, #432]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d44a:	681b      	ldr	r3, [r3, #0]
 801d44c:	08db      	lsrs	r3, r3, #3
 801d44e:	f003 0303 	and.w	r3, r3, #3
 801d452:	4a6b      	ldr	r2, [pc, #428]	@ (801d600 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801d454:	fa22 f303 	lsr.w	r3, r2, r3
 801d458:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	ee07 3a90 	vmov	s15, r3
 801d460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d464:	693b      	ldr	r3, [r7, #16]
 801d466:	ee07 3a90 	vmov	s15, r3
 801d46a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d46e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d472:	4b62      	ldr	r3, [pc, #392]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d47a:	ee07 3a90 	vmov	s15, r3
 801d47e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d482:	ed97 6a02 	vldr	s12, [r7, #8]
 801d486:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801d60c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d48a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d48e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d49a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d49e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801d4a2:	e087      	b.n	801d5b4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d4a4:	693b      	ldr	r3, [r7, #16]
 801d4a6:	ee07 3a90 	vmov	s15, r3
 801d4aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801d610 <HAL_RCC_GetSysClockFreq+0x2e8>
 801d4b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d4b6:	4b51      	ldr	r3, [pc, #324]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d4ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d4be:	ee07 3a90 	vmov	s15, r3
 801d4c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d4c6:	ed97 6a02 	vldr	s12, [r7, #8]
 801d4ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801d60c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d4ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d4d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d4d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d4da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4de:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d4e6:	e065      	b.n	801d5b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d4e8:	693b      	ldr	r3, [r7, #16]
 801d4ea:	ee07 3a90 	vmov	s15, r3
 801d4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801d614 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d4f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d4fa:	4b40      	ldr	r3, [pc, #256]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d4fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d4fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d502:	ee07 3a90 	vmov	s15, r3
 801d506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d50a:	ed97 6a02 	vldr	s12, [r7, #8]
 801d50e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801d60c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d51a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d51e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d522:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d52a:	e043      	b.n	801d5b4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d52c:	693b      	ldr	r3, [r7, #16]
 801d52e:	ee07 3a90 	vmov	s15, r3
 801d532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d536:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801d618 <HAL_RCC_GetSysClockFreq+0x2f0>
 801d53a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d53e:	4b2f      	ldr	r3, [pc, #188]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d546:	ee07 3a90 	vmov	s15, r3
 801d54a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d54e:	ed97 6a02 	vldr	s12, [r7, #8]
 801d552:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801d60c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d556:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d55a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d55e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d562:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d566:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d56a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d56e:	e021      	b.n	801d5b4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801d570:	693b      	ldr	r3, [r7, #16]
 801d572:	ee07 3a90 	vmov	s15, r3
 801d576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d57a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801d614 <HAL_RCC_GetSysClockFreq+0x2ec>
 801d57e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d582:	4b1e      	ldr	r3, [pc, #120]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d58a:	ee07 3a90 	vmov	s15, r3
 801d58e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d592:	ed97 6a02 	vldr	s12, [r7, #8]
 801d596:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801d60c <HAL_RCC_GetSysClockFreq+0x2e4>
 801d59a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d59e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d5a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d5a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d5aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d5ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801d5b2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801d5b4:	4b11      	ldr	r3, [pc, #68]	@ (801d5fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 801d5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801d5b8:	0a5b      	lsrs	r3, r3, #9
 801d5ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d5be:	3301      	adds	r3, #1
 801d5c0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801d5c2:	683b      	ldr	r3, [r7, #0]
 801d5c4:	ee07 3a90 	vmov	s15, r3
 801d5c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801d5cc:	edd7 6a07 	vldr	s13, [r7, #28]
 801d5d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d5d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d5d8:	ee17 3a90 	vmov	r3, s15
 801d5dc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801d5de:	e005      	b.n	801d5ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801d5e0:	2300      	movs	r3, #0
 801d5e2:	61bb      	str	r3, [r7, #24]
      break;
 801d5e4:	e002      	b.n	801d5ec <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801d5e6:	4b07      	ldr	r3, [pc, #28]	@ (801d604 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801d5e8:	61bb      	str	r3, [r7, #24]
      break;
 801d5ea:	bf00      	nop
  }

  return sysclockfreq;
 801d5ec:	69bb      	ldr	r3, [r7, #24]
}
 801d5ee:	4618      	mov	r0, r3
 801d5f0:	3724      	adds	r7, #36	@ 0x24
 801d5f2:	46bd      	mov	sp, r7
 801d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5f8:	4770      	bx	lr
 801d5fa:	bf00      	nop
 801d5fc:	58024400 	.word	0x58024400
 801d600:	03d09000 	.word	0x03d09000
 801d604:	003d0900 	.word	0x003d0900
 801d608:	017d7840 	.word	0x017d7840
 801d60c:	46000000 	.word	0x46000000
 801d610:	4c742400 	.word	0x4c742400
 801d614:	4a742400 	.word	0x4a742400
 801d618:	4bbebc20 	.word	0x4bbebc20

0801d61c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801d61c:	b580      	push	{r7, lr}
 801d61e:	b082      	sub	sp, #8
 801d620:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801d622:	f7ff fe81 	bl	801d328 <HAL_RCC_GetSysClockFreq>
 801d626:	4602      	mov	r2, r0
 801d628:	4b10      	ldr	r3, [pc, #64]	@ (801d66c <HAL_RCC_GetHCLKFreq+0x50>)
 801d62a:	699b      	ldr	r3, [r3, #24]
 801d62c:	0a1b      	lsrs	r3, r3, #8
 801d62e:	f003 030f 	and.w	r3, r3, #15
 801d632:	490f      	ldr	r1, [pc, #60]	@ (801d670 <HAL_RCC_GetHCLKFreq+0x54>)
 801d634:	5ccb      	ldrb	r3, [r1, r3]
 801d636:	f003 031f 	and.w	r3, r3, #31
 801d63a:	fa22 f303 	lsr.w	r3, r2, r3
 801d63e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801d640:	4b0a      	ldr	r3, [pc, #40]	@ (801d66c <HAL_RCC_GetHCLKFreq+0x50>)
 801d642:	699b      	ldr	r3, [r3, #24]
 801d644:	f003 030f 	and.w	r3, r3, #15
 801d648:	4a09      	ldr	r2, [pc, #36]	@ (801d670 <HAL_RCC_GetHCLKFreq+0x54>)
 801d64a:	5cd3      	ldrb	r3, [r2, r3]
 801d64c:	f003 031f 	and.w	r3, r3, #31
 801d650:	687a      	ldr	r2, [r7, #4]
 801d652:	fa22 f303 	lsr.w	r3, r2, r3
 801d656:	4a07      	ldr	r2, [pc, #28]	@ (801d674 <HAL_RCC_GetHCLKFreq+0x58>)
 801d658:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801d65a:	4a07      	ldr	r2, [pc, #28]	@ (801d678 <HAL_RCC_GetHCLKFreq+0x5c>)
 801d65c:	687b      	ldr	r3, [r7, #4]
 801d65e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801d660:	4b04      	ldr	r3, [pc, #16]	@ (801d674 <HAL_RCC_GetHCLKFreq+0x58>)
 801d662:	681b      	ldr	r3, [r3, #0]
}
 801d664:	4618      	mov	r0, r3
 801d666:	3708      	adds	r7, #8
 801d668:	46bd      	mov	sp, r7
 801d66a:	bd80      	pop	{r7, pc}
 801d66c:	58024400 	.word	0x58024400
 801d670:	0802755c 	.word	0x0802755c
 801d674:	20000004 	.word	0x20000004
 801d678:	20000000 	.word	0x20000000

0801d67c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801d67c:	b580      	push	{r7, lr}
 801d67e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801d680:	f7ff ffcc 	bl	801d61c <HAL_RCC_GetHCLKFreq>
 801d684:	4602      	mov	r2, r0
 801d686:	4b06      	ldr	r3, [pc, #24]	@ (801d6a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801d688:	69db      	ldr	r3, [r3, #28]
 801d68a:	091b      	lsrs	r3, r3, #4
 801d68c:	f003 0307 	and.w	r3, r3, #7
 801d690:	4904      	ldr	r1, [pc, #16]	@ (801d6a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801d692:	5ccb      	ldrb	r3, [r1, r3]
 801d694:	f003 031f 	and.w	r3, r3, #31
 801d698:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801d69c:	4618      	mov	r0, r3
 801d69e:	bd80      	pop	{r7, pc}
 801d6a0:	58024400 	.word	0x58024400
 801d6a4:	0802755c 	.word	0x0802755c

0801d6a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801d6ac:	f7ff ffb6 	bl	801d61c <HAL_RCC_GetHCLKFreq>
 801d6b0:	4602      	mov	r2, r0
 801d6b2:	4b06      	ldr	r3, [pc, #24]	@ (801d6cc <HAL_RCC_GetPCLK2Freq+0x24>)
 801d6b4:	69db      	ldr	r3, [r3, #28]
 801d6b6:	0a1b      	lsrs	r3, r3, #8
 801d6b8:	f003 0307 	and.w	r3, r3, #7
 801d6bc:	4904      	ldr	r1, [pc, #16]	@ (801d6d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801d6be:	5ccb      	ldrb	r3, [r1, r3]
 801d6c0:	f003 031f 	and.w	r3, r3, #31
 801d6c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	bd80      	pop	{r7, pc}
 801d6cc:	58024400 	.word	0x58024400
 801d6d0:	0802755c 	.word	0x0802755c

0801d6d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801d6d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801d6d8:	b0ca      	sub	sp, #296	@ 0x128
 801d6da:	af00      	add	r7, sp, #0
 801d6dc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801d6e0:	2300      	movs	r3, #0
 801d6e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801d6e6:	2300      	movs	r3, #0
 801d6e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801d6f8:	2500      	movs	r5, #0
 801d6fa:	ea54 0305 	orrs.w	r3, r4, r5
 801d6fe:	d049      	beq.n	801d794 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801d700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d704:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d706:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d70a:	d02f      	beq.n	801d76c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801d70c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d710:	d828      	bhi.n	801d764 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d712:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d716:	d01a      	beq.n	801d74e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801d718:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d71c:	d822      	bhi.n	801d764 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801d71e:	2b00      	cmp	r3, #0
 801d720:	d003      	beq.n	801d72a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801d722:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d726:	d007      	beq.n	801d738 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801d728:	e01c      	b.n	801d764 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d72a:	4bb8      	ldr	r3, [pc, #736]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d72c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d72e:	4ab7      	ldr	r2, [pc, #732]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d730:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d734:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d736:	e01a      	b.n	801d76e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d73c:	3308      	adds	r3, #8
 801d73e:	2102      	movs	r1, #2
 801d740:	4618      	mov	r0, r3
 801d742:	f001 fc8f 	bl	801f064 <RCCEx_PLL2_Config>
 801d746:	4603      	mov	r3, r0
 801d748:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d74c:	e00f      	b.n	801d76e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d74e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d752:	3328      	adds	r3, #40	@ 0x28
 801d754:	2102      	movs	r1, #2
 801d756:	4618      	mov	r0, r3
 801d758:	f001 fd36 	bl	801f1c8 <RCCEx_PLL3_Config>
 801d75c:	4603      	mov	r3, r0
 801d75e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801d762:	e004      	b.n	801d76e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d764:	2301      	movs	r3, #1
 801d766:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d76a:	e000      	b.n	801d76e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801d76c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d76e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d772:	2b00      	cmp	r3, #0
 801d774:	d10a      	bne.n	801d78c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801d776:	4ba5      	ldr	r3, [pc, #660]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d77a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d782:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801d784:	4aa1      	ldr	r2, [pc, #644]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d786:	430b      	orrs	r3, r1
 801d788:	6513      	str	r3, [r2, #80]	@ 0x50
 801d78a:	e003      	b.n	801d794 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d78c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d790:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801d794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d798:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d79c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801d7a0:	f04f 0900 	mov.w	r9, #0
 801d7a4:	ea58 0309 	orrs.w	r3, r8, r9
 801d7a8:	d047      	beq.n	801d83a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801d7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d7b0:	2b04      	cmp	r3, #4
 801d7b2:	d82a      	bhi.n	801d80a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801d7b4:	a201      	add	r2, pc, #4	@ (adr r2, 801d7bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801d7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d7ba:	bf00      	nop
 801d7bc:	0801d7d1 	.word	0x0801d7d1
 801d7c0:	0801d7df 	.word	0x0801d7df
 801d7c4:	0801d7f5 	.word	0x0801d7f5
 801d7c8:	0801d813 	.word	0x0801d813
 801d7cc:	0801d813 	.word	0x0801d813
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d7d0:	4b8e      	ldr	r3, [pc, #568]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d7d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d7d4:	4a8d      	ldr	r2, [pc, #564]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d7d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d7da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d7dc:	e01a      	b.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d7de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7e2:	3308      	adds	r3, #8
 801d7e4:	2100      	movs	r1, #0
 801d7e6:	4618      	mov	r0, r3
 801d7e8:	f001 fc3c 	bl	801f064 <RCCEx_PLL2_Config>
 801d7ec:	4603      	mov	r3, r0
 801d7ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d7f2:	e00f      	b.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7f8:	3328      	adds	r3, #40	@ 0x28
 801d7fa:	2100      	movs	r1, #0
 801d7fc:	4618      	mov	r0, r3
 801d7fe:	f001 fce3 	bl	801f1c8 <RCCEx_PLL3_Config>
 801d802:	4603      	mov	r3, r0
 801d804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d808:	e004      	b.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d80a:	2301      	movs	r3, #1
 801d80c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d810:	e000      	b.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801d812:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d10a      	bne.n	801d832 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d81c:	4b7b      	ldr	r3, [pc, #492]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d81e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d820:	f023 0107 	bic.w	r1, r3, #7
 801d824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d82a:	4a78      	ldr	r2, [pc, #480]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d82c:	430b      	orrs	r3, r1
 801d82e:	6513      	str	r3, [r2, #80]	@ 0x50
 801d830:	e003      	b.n	801d83a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801d83a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d83e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d842:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801d846:	f04f 0b00 	mov.w	fp, #0
 801d84a:	ea5a 030b 	orrs.w	r3, sl, fp
 801d84e:	d04c      	beq.n	801d8ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801d850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d854:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d856:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d85a:	d030      	beq.n	801d8be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801d85c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d860:	d829      	bhi.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d862:	2bc0      	cmp	r3, #192	@ 0xc0
 801d864:	d02d      	beq.n	801d8c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801d866:	2bc0      	cmp	r3, #192	@ 0xc0
 801d868:	d825      	bhi.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d86a:	2b80      	cmp	r3, #128	@ 0x80
 801d86c:	d018      	beq.n	801d8a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801d86e:	2b80      	cmp	r3, #128	@ 0x80
 801d870:	d821      	bhi.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801d872:	2b00      	cmp	r3, #0
 801d874:	d002      	beq.n	801d87c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801d876:	2b40      	cmp	r3, #64	@ 0x40
 801d878:	d007      	beq.n	801d88a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801d87a:	e01c      	b.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d87c:	4b63      	ldr	r3, [pc, #396]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d880:	4a62      	ldr	r2, [pc, #392]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d886:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d888:	e01c      	b.n	801d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d88e:	3308      	adds	r3, #8
 801d890:	2100      	movs	r1, #0
 801d892:	4618      	mov	r0, r3
 801d894:	f001 fbe6 	bl	801f064 <RCCEx_PLL2_Config>
 801d898:	4603      	mov	r3, r0
 801d89a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d89e:	e011      	b.n	801d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8a4:	3328      	adds	r3, #40	@ 0x28
 801d8a6:	2100      	movs	r1, #0
 801d8a8:	4618      	mov	r0, r3
 801d8aa:	f001 fc8d 	bl	801f1c8 <RCCEx_PLL3_Config>
 801d8ae:	4603      	mov	r3, r0
 801d8b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801d8b4:	e006      	b.n	801d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d8b6:	2301      	movs	r3, #1
 801d8b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d8bc:	e002      	b.n	801d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d8be:	bf00      	nop
 801d8c0:	e000      	b.n	801d8c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801d8c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d8c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	d10a      	bne.n	801d8e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801d8cc:	4b4f      	ldr	r3, [pc, #316]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d8ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d8d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801d8d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801d8da:	4a4c      	ldr	r2, [pc, #304]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d8dc:	430b      	orrs	r3, r1
 801d8de:	6513      	str	r3, [r2, #80]	@ 0x50
 801d8e0:	e003      	b.n	801d8ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801d8ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801d8f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801d8fa:	2300      	movs	r3, #0
 801d8fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801d900:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801d904:	460b      	mov	r3, r1
 801d906:	4313      	orrs	r3, r2
 801d908:	d053      	beq.n	801d9b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801d90a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d90e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d912:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d916:	d035      	beq.n	801d984 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801d918:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801d91c:	d82e      	bhi.n	801d97c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d91e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d922:	d031      	beq.n	801d988 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801d924:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801d928:	d828      	bhi.n	801d97c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d92a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d92e:	d01a      	beq.n	801d966 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801d930:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801d934:	d822      	bhi.n	801d97c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801d936:	2b00      	cmp	r3, #0
 801d938:	d003      	beq.n	801d942 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801d93a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d93e:	d007      	beq.n	801d950 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801d940:	e01c      	b.n	801d97c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d942:	4b32      	ldr	r3, [pc, #200]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d946:	4a31      	ldr	r2, [pc, #196]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d94c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d94e:	e01c      	b.n	801d98a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d954:	3308      	adds	r3, #8
 801d956:	2100      	movs	r1, #0
 801d958:	4618      	mov	r0, r3
 801d95a:	f001 fb83 	bl	801f064 <RCCEx_PLL2_Config>
 801d95e:	4603      	mov	r3, r0
 801d960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d964:	e011      	b.n	801d98a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d96a:	3328      	adds	r3, #40	@ 0x28
 801d96c:	2100      	movs	r1, #0
 801d96e:	4618      	mov	r0, r3
 801d970:	f001 fc2a 	bl	801f1c8 <RCCEx_PLL3_Config>
 801d974:	4603      	mov	r3, r0
 801d976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d97a:	e006      	b.n	801d98a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d97c:	2301      	movs	r3, #1
 801d97e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d982:	e002      	b.n	801d98a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d984:	bf00      	nop
 801d986:	e000      	b.n	801d98a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801d988:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d98a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d98e:	2b00      	cmp	r3, #0
 801d990:	d10b      	bne.n	801d9aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801d992:	4b1e      	ldr	r3, [pc, #120]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d994:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d996:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801d99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d99e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801d9a2:	4a1a      	ldr	r2, [pc, #104]	@ (801da0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801d9a4:	430b      	orrs	r3, r1
 801d9a6:	6593      	str	r3, [r2, #88]	@ 0x58
 801d9a8:	e003      	b.n	801d9b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d9aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801d9b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801d9be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801d9c2:	2300      	movs	r3, #0
 801d9c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801d9c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801d9cc:	460b      	mov	r3, r1
 801d9ce:	4313      	orrs	r3, r2
 801d9d0:	d056      	beq.n	801da80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801d9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d9da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d9de:	d038      	beq.n	801da52 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d9e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d9e4:	d831      	bhi.n	801da4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d9e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d9ea:	d034      	beq.n	801da56 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d9ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d9f0:	d82b      	bhi.n	801da4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d9f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d9f6:	d01d      	beq.n	801da34 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d9f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d9fc:	d825      	bhi.n	801da4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d9fe:	2b00      	cmp	r3, #0
 801da00:	d006      	beq.n	801da10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801da02:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801da06:	d00a      	beq.n	801da1e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801da08:	e01f      	b.n	801da4a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801da0a:	bf00      	nop
 801da0c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801da10:	4ba2      	ldr	r3, [pc, #648]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801da12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da14:	4aa1      	ldr	r2, [pc, #644]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801da16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801da1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801da1c:	e01c      	b.n	801da58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801da1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da22:	3308      	adds	r3, #8
 801da24:	2100      	movs	r1, #0
 801da26:	4618      	mov	r0, r3
 801da28:	f001 fb1c 	bl	801f064 <RCCEx_PLL2_Config>
 801da2c:	4603      	mov	r3, r0
 801da2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801da32:	e011      	b.n	801da58 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801da34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da38:	3328      	adds	r3, #40	@ 0x28
 801da3a:	2100      	movs	r1, #0
 801da3c:	4618      	mov	r0, r3
 801da3e:	f001 fbc3 	bl	801f1c8 <RCCEx_PLL3_Config>
 801da42:	4603      	mov	r3, r0
 801da44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801da48:	e006      	b.n	801da58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801da4a:	2301      	movs	r3, #1
 801da4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801da50:	e002      	b.n	801da58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801da52:	bf00      	nop
 801da54:	e000      	b.n	801da58 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801da56:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da5c:	2b00      	cmp	r3, #0
 801da5e:	d10b      	bne.n	801da78 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801da60:	4b8e      	ldr	r3, [pc, #568]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801da62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da64:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801da68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801da70:	4a8a      	ldr	r2, [pc, #552]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801da72:	430b      	orrs	r3, r1
 801da74:	6593      	str	r3, [r2, #88]	@ 0x58
 801da76:	e003      	b.n	801da80 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801da80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da88:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801da8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801da90:	2300      	movs	r3, #0
 801da92:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801da96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801da9a:	460b      	mov	r3, r1
 801da9c:	4313      	orrs	r3, r2
 801da9e:	d03a      	beq.n	801db16 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801daa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801daa6:	2b30      	cmp	r3, #48	@ 0x30
 801daa8:	d01f      	beq.n	801daea <HAL_RCCEx_PeriphCLKConfig+0x416>
 801daaa:	2b30      	cmp	r3, #48	@ 0x30
 801daac:	d819      	bhi.n	801dae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801daae:	2b20      	cmp	r3, #32
 801dab0:	d00c      	beq.n	801dacc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801dab2:	2b20      	cmp	r3, #32
 801dab4:	d815      	bhi.n	801dae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d019      	beq.n	801daee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801daba:	2b10      	cmp	r3, #16
 801dabc:	d111      	bne.n	801dae2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dabe:	4b77      	ldr	r3, [pc, #476]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dac2:	4a76      	ldr	r2, [pc, #472]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801daca:	e011      	b.n	801daf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dacc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dad0:	3308      	adds	r3, #8
 801dad2:	2102      	movs	r1, #2
 801dad4:	4618      	mov	r0, r3
 801dad6:	f001 fac5 	bl	801f064 <RCCEx_PLL2_Config>
 801dada:	4603      	mov	r3, r0
 801dadc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801dae0:	e006      	b.n	801daf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801dae2:	2301      	movs	r3, #1
 801dae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dae8:	e002      	b.n	801daf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801daea:	bf00      	nop
 801daec:	e000      	b.n	801daf0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801daee:	bf00      	nop
    }

    if (ret == HAL_OK)
 801daf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801daf4:	2b00      	cmp	r3, #0
 801daf6:	d10a      	bne.n	801db0e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801daf8:	4b68      	ldr	r3, [pc, #416]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dafa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dafc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801db00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801db06:	4a65      	ldr	r2, [pc, #404]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801db08:	430b      	orrs	r3, r1
 801db0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801db0c:	e003      	b.n	801db16 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801db0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801db16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db1e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801db22:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801db26:	2300      	movs	r3, #0
 801db28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801db2c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801db30:	460b      	mov	r3, r1
 801db32:	4313      	orrs	r3, r2
 801db34:	d051      	beq.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801db36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801db3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801db40:	d035      	beq.n	801dbae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801db42:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801db46:	d82e      	bhi.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801db48:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801db4c:	d031      	beq.n	801dbb2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801db4e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801db52:	d828      	bhi.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801db54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801db58:	d01a      	beq.n	801db90 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801db5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801db5e:	d822      	bhi.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801db60:	2b00      	cmp	r3, #0
 801db62:	d003      	beq.n	801db6c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801db64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801db68:	d007      	beq.n	801db7a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801db6a:	e01c      	b.n	801dba6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801db6c:	4b4b      	ldr	r3, [pc, #300]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801db6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801db70:	4a4a      	ldr	r2, [pc, #296]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801db72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801db76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801db78:	e01c      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801db7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db7e:	3308      	adds	r3, #8
 801db80:	2100      	movs	r1, #0
 801db82:	4618      	mov	r0, r3
 801db84:	f001 fa6e 	bl	801f064 <RCCEx_PLL2_Config>
 801db88:	4603      	mov	r3, r0
 801db8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801db8e:	e011      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801db90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db94:	3328      	adds	r3, #40	@ 0x28
 801db96:	2100      	movs	r1, #0
 801db98:	4618      	mov	r0, r3
 801db9a:	f001 fb15 	bl	801f1c8 <RCCEx_PLL3_Config>
 801db9e:	4603      	mov	r3, r0
 801dba0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801dba4:	e006      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dba6:	2301      	movs	r3, #1
 801dba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dbac:	e002      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801dbae:	bf00      	nop
 801dbb0:	e000      	b.n	801dbb4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801dbb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dbb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d10a      	bne.n	801dbd2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801dbbc:	4b37      	ldr	r3, [pc, #220]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dbbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dbc0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801dbc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801dbca:	4a34      	ldr	r2, [pc, #208]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dbcc:	430b      	orrs	r3, r1
 801dbce:	6513      	str	r3, [r2, #80]	@ 0x50
 801dbd0:	e003      	b.n	801dbda <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dbd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dbd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801dbda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbe2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801dbe6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801dbea:	2300      	movs	r3, #0
 801dbec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801dbf0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801dbf4:	460b      	mov	r3, r1
 801dbf6:	4313      	orrs	r3, r2
 801dbf8:	d056      	beq.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801dbfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801dc00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801dc04:	d033      	beq.n	801dc6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801dc06:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801dc0a:	d82c      	bhi.n	801dc66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801dc0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801dc10:	d02f      	beq.n	801dc72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801dc12:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801dc16:	d826      	bhi.n	801dc66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801dc18:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801dc1c:	d02b      	beq.n	801dc76 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801dc1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801dc22:	d820      	bhi.n	801dc66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801dc24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801dc28:	d012      	beq.n	801dc50 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801dc2a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801dc2e:	d81a      	bhi.n	801dc66 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d022      	beq.n	801dc7a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801dc34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dc38:	d115      	bne.n	801dc66 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dc3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc3e:	3308      	adds	r3, #8
 801dc40:	2101      	movs	r1, #1
 801dc42:	4618      	mov	r0, r3
 801dc44:	f001 fa0e 	bl	801f064 <RCCEx_PLL2_Config>
 801dc48:	4603      	mov	r3, r0
 801dc4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801dc4e:	e015      	b.n	801dc7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc54:	3328      	adds	r3, #40	@ 0x28
 801dc56:	2101      	movs	r1, #1
 801dc58:	4618      	mov	r0, r3
 801dc5a:	f001 fab5 	bl	801f1c8 <RCCEx_PLL3_Config>
 801dc5e:	4603      	mov	r3, r0
 801dc60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801dc64:	e00a      	b.n	801dc7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dc66:	2301      	movs	r3, #1
 801dc68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dc6c:	e006      	b.n	801dc7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dc6e:	bf00      	nop
 801dc70:	e004      	b.n	801dc7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dc72:	bf00      	nop
 801dc74:	e002      	b.n	801dc7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dc76:	bf00      	nop
 801dc78:	e000      	b.n	801dc7c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801dc7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dc7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d10d      	bne.n	801dca0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801dc84:	4b05      	ldr	r3, [pc, #20]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dc86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dc88:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801dc8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801dc92:	4a02      	ldr	r2, [pc, #8]	@ (801dc9c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801dc94:	430b      	orrs	r3, r1
 801dc96:	6513      	str	r3, [r2, #80]	@ 0x50
 801dc98:	e006      	b.n	801dca8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801dc9a:	bf00      	nop
 801dc9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dca0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dca4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801dca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcac:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcb0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801dcb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801dcb8:	2300      	movs	r3, #0
 801dcba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801dcbe:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801dcc2:	460b      	mov	r3, r1
 801dcc4:	4313      	orrs	r3, r2
 801dcc6:	d055      	beq.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801dcc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801dcd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dcd4:	d033      	beq.n	801dd3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801dcd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801dcda:	d82c      	bhi.n	801dd36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801dcdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dce0:	d02f      	beq.n	801dd42 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801dce2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801dce6:	d826      	bhi.n	801dd36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801dce8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dcec:	d02b      	beq.n	801dd46 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801dcee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801dcf2:	d820      	bhi.n	801dd36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801dcf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dcf8:	d012      	beq.n	801dd20 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801dcfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dcfe:	d81a      	bhi.n	801dd36 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	d022      	beq.n	801dd4a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801dd04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801dd08:	d115      	bne.n	801dd36 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd0e:	3308      	adds	r3, #8
 801dd10:	2101      	movs	r1, #1
 801dd12:	4618      	mov	r0, r3
 801dd14:	f001 f9a6 	bl	801f064 <RCCEx_PLL2_Config>
 801dd18:	4603      	mov	r3, r0
 801dd1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801dd1e:	e015      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dd20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd24:	3328      	adds	r3, #40	@ 0x28
 801dd26:	2101      	movs	r1, #1
 801dd28:	4618      	mov	r0, r3
 801dd2a:	f001 fa4d 	bl	801f1c8 <RCCEx_PLL3_Config>
 801dd2e:	4603      	mov	r3, r0
 801dd30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801dd34:	e00a      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801dd36:	2301      	movs	r3, #1
 801dd38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd3c:	e006      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dd3e:	bf00      	nop
 801dd40:	e004      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dd42:	bf00      	nop
 801dd44:	e002      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dd46:	bf00      	nop
 801dd48:	e000      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801dd4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dd4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d10b      	bne.n	801dd6c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801dd54:	4ba3      	ldr	r3, [pc, #652]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dd58:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801dd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd60:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801dd64:	4a9f      	ldr	r2, [pc, #636]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dd66:	430b      	orrs	r3, r1
 801dd68:	6593      	str	r3, [r2, #88]	@ 0x58
 801dd6a:	e003      	b.n	801dd74 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801dd74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd7c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801dd80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801dd84:	2300      	movs	r3, #0
 801dd86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801dd8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801dd8e:	460b      	mov	r3, r1
 801dd90:	4313      	orrs	r3, r2
 801dd92:	d037      	beq.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801dd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801dd9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dd9e:	d00e      	beq.n	801ddbe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801dda0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801dda4:	d816      	bhi.n	801ddd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801dda6:	2b00      	cmp	r3, #0
 801dda8:	d018      	beq.n	801dddc <HAL_RCCEx_PeriphCLKConfig+0x708>
 801ddaa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ddae:	d111      	bne.n	801ddd4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ddb0:	4b8c      	ldr	r3, [pc, #560]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ddb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ddb4:	4a8b      	ldr	r2, [pc, #556]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ddb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ddba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801ddbc:	e00f      	b.n	801ddde <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ddbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddc2:	3308      	adds	r3, #8
 801ddc4:	2101      	movs	r1, #1
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	f001 f94c 	bl	801f064 <RCCEx_PLL2_Config>
 801ddcc:	4603      	mov	r3, r0
 801ddce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801ddd2:	e004      	b.n	801ddde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ddd4:	2301      	movs	r3, #1
 801ddd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ddda:	e000      	b.n	801ddde <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801dddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ddde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dde2:	2b00      	cmp	r3, #0
 801dde4:	d10a      	bne.n	801ddfc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801dde6:	4b7f      	ldr	r3, [pc, #508]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dde8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ddea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801ddee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ddf4:	4a7b      	ldr	r2, [pc, #492]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ddf6:	430b      	orrs	r3, r1
 801ddf8:	6513      	str	r3, [r2, #80]	@ 0x50
 801ddfa:	e003      	b.n	801de04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ddfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801de04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de0c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801de10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801de14:	2300      	movs	r3, #0
 801de16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801de1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801de1e:	460b      	mov	r3, r1
 801de20:	4313      	orrs	r3, r2
 801de22:	d039      	beq.n	801de98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801de24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801de2a:	2b03      	cmp	r3, #3
 801de2c:	d81c      	bhi.n	801de68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801de2e:	a201      	add	r2, pc, #4	@ (adr r2, 801de34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801de30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801de34:	0801de71 	.word	0x0801de71
 801de38:	0801de45 	.word	0x0801de45
 801de3c:	0801de53 	.word	0x0801de53
 801de40:	0801de71 	.word	0x0801de71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801de44:	4b67      	ldr	r3, [pc, #412]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de48:	4a66      	ldr	r2, [pc, #408]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801de4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801de50:	e00f      	b.n	801de72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801de52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de56:	3308      	adds	r3, #8
 801de58:	2102      	movs	r1, #2
 801de5a:	4618      	mov	r0, r3
 801de5c:	f001 f902 	bl	801f064 <RCCEx_PLL2_Config>
 801de60:	4603      	mov	r3, r0
 801de62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801de66:	e004      	b.n	801de72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801de68:	2301      	movs	r3, #1
 801de6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de6e:	e000      	b.n	801de72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801de70:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de76:	2b00      	cmp	r3, #0
 801de78:	d10a      	bne.n	801de90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801de7a:	4b5a      	ldr	r3, [pc, #360]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801de7e:	f023 0103 	bic.w	r1, r3, #3
 801de82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801de88:	4a56      	ldr	r2, [pc, #344]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801de8a:	430b      	orrs	r3, r1
 801de8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801de8e:	e003      	b.n	801de98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801de98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dea0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801dea4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801dea8:	2300      	movs	r3, #0
 801deaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801deae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801deb2:	460b      	mov	r3, r1
 801deb4:	4313      	orrs	r3, r2
 801deb6:	f000 809f 	beq.w	801dff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801deba:	4b4b      	ldr	r3, [pc, #300]	@ (801dfe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801debc:	681b      	ldr	r3, [r3, #0]
 801debe:	4a4a      	ldr	r2, [pc, #296]	@ (801dfe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801dec0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801dec4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801dec6:	f7fc f807 	bl	8019ed8 <HAL_GetTick>
 801deca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dece:	e00b      	b.n	801dee8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801ded0:	f7fc f802 	bl	8019ed8 <HAL_GetTick>
 801ded4:	4602      	mov	r2, r0
 801ded6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801deda:	1ad3      	subs	r3, r2, r3
 801dedc:	2b64      	cmp	r3, #100	@ 0x64
 801dede:	d903      	bls.n	801dee8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801dee0:	2303      	movs	r3, #3
 801dee2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dee6:	e005      	b.n	801def4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801dee8:	4b3f      	ldr	r3, [pc, #252]	@ (801dfe8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801def0:	2b00      	cmp	r3, #0
 801def2:	d0ed      	beq.n	801ded0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801def4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801def8:	2b00      	cmp	r3, #0
 801defa:	d179      	bne.n	801dff0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801defc:	4b39      	ldr	r3, [pc, #228]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801defe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801df00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801df08:	4053      	eors	r3, r2
 801df0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d015      	beq.n	801df3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801df12:	4b34      	ldr	r3, [pc, #208]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801df16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801df1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801df1e:	4b31      	ldr	r3, [pc, #196]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801df22:	4a30      	ldr	r2, [pc, #192]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801df28:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801df2a:	4b2e      	ldr	r3, [pc, #184]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801df2e:	4a2d      	ldr	r2, [pc, #180]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801df34:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801df36:	4a2b      	ldr	r2, [pc, #172]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801df3c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801df3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801df46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801df4a:	d118      	bne.n	801df7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801df4c:	f7fb ffc4 	bl	8019ed8 <HAL_GetTick>
 801df50:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801df54:	e00d      	b.n	801df72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801df56:	f7fb ffbf 	bl	8019ed8 <HAL_GetTick>
 801df5a:	4602      	mov	r2, r0
 801df5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801df60:	1ad2      	subs	r2, r2, r3
 801df62:	f241 3388 	movw	r3, #5000	@ 0x1388
 801df66:	429a      	cmp	r2, r3
 801df68:	d903      	bls.n	801df72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801df6a:	2303      	movs	r3, #3
 801df6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801df70:	e005      	b.n	801df7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801df72:	4b1c      	ldr	r3, [pc, #112]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801df76:	f003 0302 	and.w	r3, r3, #2
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d0eb      	beq.n	801df56 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801df7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df82:	2b00      	cmp	r3, #0
 801df84:	d129      	bne.n	801dfda <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801df86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801df8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801df92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801df96:	d10e      	bne.n	801dfb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801df98:	4b12      	ldr	r3, [pc, #72]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801df9a:	691b      	ldr	r3, [r3, #16]
 801df9c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801dfa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfa4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dfa8:	091a      	lsrs	r2, r3, #4
 801dfaa:	4b10      	ldr	r3, [pc, #64]	@ (801dfec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801dfac:	4013      	ands	r3, r2
 801dfae:	4a0d      	ldr	r2, [pc, #52]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dfb0:	430b      	orrs	r3, r1
 801dfb2:	6113      	str	r3, [r2, #16]
 801dfb4:	e005      	b.n	801dfc2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801dfb6:	4b0b      	ldr	r3, [pc, #44]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dfb8:	691b      	ldr	r3, [r3, #16]
 801dfba:	4a0a      	ldr	r2, [pc, #40]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dfbc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801dfc0:	6113      	str	r3, [r2, #16]
 801dfc2:	4b08      	ldr	r3, [pc, #32]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dfc4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801dfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801dfce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801dfd2:	4a04      	ldr	r2, [pc, #16]	@ (801dfe4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801dfd4:	430b      	orrs	r3, r1
 801dfd6:	6713      	str	r3, [r2, #112]	@ 0x70
 801dfd8:	e00e      	b.n	801dff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801dfda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801dfe2:	e009      	b.n	801dff8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801dfe4:	58024400 	.word	0x58024400
 801dfe8:	58024800 	.word	0x58024800
 801dfec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dff0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dff4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801dff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e000:	f002 0301 	and.w	r3, r2, #1
 801e004:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801e008:	2300      	movs	r3, #0
 801e00a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801e00e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801e012:	460b      	mov	r3, r1
 801e014:	4313      	orrs	r3, r2
 801e016:	f000 8089 	beq.w	801e12c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801e01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e01e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e020:	2b28      	cmp	r3, #40	@ 0x28
 801e022:	d86b      	bhi.n	801e0fc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801e024:	a201      	add	r2, pc, #4	@ (adr r2, 801e02c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801e026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e02a:	bf00      	nop
 801e02c:	0801e105 	.word	0x0801e105
 801e030:	0801e0fd 	.word	0x0801e0fd
 801e034:	0801e0fd 	.word	0x0801e0fd
 801e038:	0801e0fd 	.word	0x0801e0fd
 801e03c:	0801e0fd 	.word	0x0801e0fd
 801e040:	0801e0fd 	.word	0x0801e0fd
 801e044:	0801e0fd 	.word	0x0801e0fd
 801e048:	0801e0fd 	.word	0x0801e0fd
 801e04c:	0801e0d1 	.word	0x0801e0d1
 801e050:	0801e0fd 	.word	0x0801e0fd
 801e054:	0801e0fd 	.word	0x0801e0fd
 801e058:	0801e0fd 	.word	0x0801e0fd
 801e05c:	0801e0fd 	.word	0x0801e0fd
 801e060:	0801e0fd 	.word	0x0801e0fd
 801e064:	0801e0fd 	.word	0x0801e0fd
 801e068:	0801e0fd 	.word	0x0801e0fd
 801e06c:	0801e0e7 	.word	0x0801e0e7
 801e070:	0801e0fd 	.word	0x0801e0fd
 801e074:	0801e0fd 	.word	0x0801e0fd
 801e078:	0801e0fd 	.word	0x0801e0fd
 801e07c:	0801e0fd 	.word	0x0801e0fd
 801e080:	0801e0fd 	.word	0x0801e0fd
 801e084:	0801e0fd 	.word	0x0801e0fd
 801e088:	0801e0fd 	.word	0x0801e0fd
 801e08c:	0801e105 	.word	0x0801e105
 801e090:	0801e0fd 	.word	0x0801e0fd
 801e094:	0801e0fd 	.word	0x0801e0fd
 801e098:	0801e0fd 	.word	0x0801e0fd
 801e09c:	0801e0fd 	.word	0x0801e0fd
 801e0a0:	0801e0fd 	.word	0x0801e0fd
 801e0a4:	0801e0fd 	.word	0x0801e0fd
 801e0a8:	0801e0fd 	.word	0x0801e0fd
 801e0ac:	0801e105 	.word	0x0801e105
 801e0b0:	0801e0fd 	.word	0x0801e0fd
 801e0b4:	0801e0fd 	.word	0x0801e0fd
 801e0b8:	0801e0fd 	.word	0x0801e0fd
 801e0bc:	0801e0fd 	.word	0x0801e0fd
 801e0c0:	0801e0fd 	.word	0x0801e0fd
 801e0c4:	0801e0fd 	.word	0x0801e0fd
 801e0c8:	0801e0fd 	.word	0x0801e0fd
 801e0cc:	0801e105 	.word	0x0801e105
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e0d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0d4:	3308      	adds	r3, #8
 801e0d6:	2101      	movs	r1, #1
 801e0d8:	4618      	mov	r0, r3
 801e0da:	f000 ffc3 	bl	801f064 <RCCEx_PLL2_Config>
 801e0de:	4603      	mov	r3, r0
 801e0e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e0e4:	e00f      	b.n	801e106 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ea:	3328      	adds	r3, #40	@ 0x28
 801e0ec:	2101      	movs	r1, #1
 801e0ee:	4618      	mov	r0, r3
 801e0f0:	f001 f86a 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e0f4:	4603      	mov	r3, r0
 801e0f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801e0fa:	e004      	b.n	801e106 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e0fc:	2301      	movs	r3, #1
 801e0fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e102:	e000      	b.n	801e106 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801e104:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e106:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e10a:	2b00      	cmp	r3, #0
 801e10c:	d10a      	bne.n	801e124 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801e10e:	4bbf      	ldr	r3, [pc, #764]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e110:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e112:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801e116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e11a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e11c:	4abb      	ldr	r2, [pc, #748]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e11e:	430b      	orrs	r3, r1
 801e120:	6553      	str	r3, [r2, #84]	@ 0x54
 801e122:	e003      	b.n	801e12c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801e12c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e130:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e134:	f002 0302 	and.w	r3, r2, #2
 801e138:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801e13c:	2300      	movs	r3, #0
 801e13e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801e142:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801e146:	460b      	mov	r3, r1
 801e148:	4313      	orrs	r3, r2
 801e14a:	d041      	beq.n	801e1d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801e14c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e150:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e152:	2b05      	cmp	r3, #5
 801e154:	d824      	bhi.n	801e1a0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801e156:	a201      	add	r2, pc, #4	@ (adr r2, 801e15c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801e158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e15c:	0801e1a9 	.word	0x0801e1a9
 801e160:	0801e175 	.word	0x0801e175
 801e164:	0801e18b 	.word	0x0801e18b
 801e168:	0801e1a9 	.word	0x0801e1a9
 801e16c:	0801e1a9 	.word	0x0801e1a9
 801e170:	0801e1a9 	.word	0x0801e1a9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e178:	3308      	adds	r3, #8
 801e17a:	2101      	movs	r1, #1
 801e17c:	4618      	mov	r0, r3
 801e17e:	f000 ff71 	bl	801f064 <RCCEx_PLL2_Config>
 801e182:	4603      	mov	r3, r0
 801e184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e188:	e00f      	b.n	801e1aa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e18a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e18e:	3328      	adds	r3, #40	@ 0x28
 801e190:	2101      	movs	r1, #1
 801e192:	4618      	mov	r0, r3
 801e194:	f001 f818 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e198:	4603      	mov	r3, r0
 801e19a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801e19e:	e004      	b.n	801e1aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e1a0:	2301      	movs	r3, #1
 801e1a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e1a6:	e000      	b.n	801e1aa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801e1a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1ae:	2b00      	cmp	r3, #0
 801e1b0:	d10a      	bne.n	801e1c8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801e1b2:	4b96      	ldr	r3, [pc, #600]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e1b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e1b6:	f023 0107 	bic.w	r1, r3, #7
 801e1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1be:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e1c0:	4a92      	ldr	r2, [pc, #584]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e1c2:	430b      	orrs	r3, r1
 801e1c4:	6553      	str	r3, [r2, #84]	@ 0x54
 801e1c6:	e003      	b.n	801e1d0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e1c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e1cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801e1d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e1d8:	f002 0304 	and.w	r3, r2, #4
 801e1dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801e1e6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801e1ea:	460b      	mov	r3, r1
 801e1ec:	4313      	orrs	r3, r2
 801e1ee:	d044      	beq.n	801e27a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801e1f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e1f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e1f8:	2b05      	cmp	r3, #5
 801e1fa:	d825      	bhi.n	801e248 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801e1fc:	a201      	add	r2, pc, #4	@ (adr r2, 801e204 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801e1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e202:	bf00      	nop
 801e204:	0801e251 	.word	0x0801e251
 801e208:	0801e21d 	.word	0x0801e21d
 801e20c:	0801e233 	.word	0x0801e233
 801e210:	0801e251 	.word	0x0801e251
 801e214:	0801e251 	.word	0x0801e251
 801e218:	0801e251 	.word	0x0801e251
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e21c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e220:	3308      	adds	r3, #8
 801e222:	2101      	movs	r1, #1
 801e224:	4618      	mov	r0, r3
 801e226:	f000 ff1d 	bl	801f064 <RCCEx_PLL2_Config>
 801e22a:	4603      	mov	r3, r0
 801e22c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e230:	e00f      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e236:	3328      	adds	r3, #40	@ 0x28
 801e238:	2101      	movs	r1, #1
 801e23a:	4618      	mov	r0, r3
 801e23c:	f000 ffc4 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e240:	4603      	mov	r3, r0
 801e242:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801e246:	e004      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e248:	2301      	movs	r3, #1
 801e24a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e24e:	e000      	b.n	801e252 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801e250:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e256:	2b00      	cmp	r3, #0
 801e258:	d10b      	bne.n	801e272 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801e25a:	4b6c      	ldr	r3, [pc, #432]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e25c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e25e:	f023 0107 	bic.w	r1, r3, #7
 801e262:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e266:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e26a:	4a68      	ldr	r2, [pc, #416]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e26c:	430b      	orrs	r3, r1
 801e26e:	6593      	str	r3, [r2, #88]	@ 0x58
 801e270:	e003      	b.n	801e27a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801e27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e282:	f002 0320 	and.w	r3, r2, #32
 801e286:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801e28a:	2300      	movs	r3, #0
 801e28c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801e290:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801e294:	460b      	mov	r3, r1
 801e296:	4313      	orrs	r3, r2
 801e298:	d055      	beq.n	801e346 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801e29a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e29e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e2a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e2a6:	d033      	beq.n	801e310 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801e2a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801e2ac:	d82c      	bhi.n	801e308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e2ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e2b2:	d02f      	beq.n	801e314 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801e2b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801e2b8:	d826      	bhi.n	801e308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e2ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e2be:	d02b      	beq.n	801e318 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801e2c0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801e2c4:	d820      	bhi.n	801e308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e2c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e2ca:	d012      	beq.n	801e2f2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801e2cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801e2d0:	d81a      	bhi.n	801e308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d022      	beq.n	801e31c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801e2d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e2da:	d115      	bne.n	801e308 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2e0:	3308      	adds	r3, #8
 801e2e2:	2100      	movs	r1, #0
 801e2e4:	4618      	mov	r0, r3
 801e2e6:	f000 febd 	bl	801f064 <RCCEx_PLL2_Config>
 801e2ea:	4603      	mov	r3, r0
 801e2ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e2f0:	e015      	b.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e2f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e2f6:	3328      	adds	r3, #40	@ 0x28
 801e2f8:	2102      	movs	r1, #2
 801e2fa:	4618      	mov	r0, r3
 801e2fc:	f000 ff64 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e300:	4603      	mov	r3, r0
 801e302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801e306:	e00a      	b.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e308:	2301      	movs	r3, #1
 801e30a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e30e:	e006      	b.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e310:	bf00      	nop
 801e312:	e004      	b.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e314:	bf00      	nop
 801e316:	e002      	b.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e318:	bf00      	nop
 801e31a:	e000      	b.n	801e31e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801e31c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e31e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e322:	2b00      	cmp	r3, #0
 801e324:	d10b      	bne.n	801e33e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801e326:	4b39      	ldr	r3, [pc, #228]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e328:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e32a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801e32e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e332:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801e336:	4a35      	ldr	r2, [pc, #212]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e338:	430b      	orrs	r3, r1
 801e33a:	6553      	str	r3, [r2, #84]	@ 0x54
 801e33c:	e003      	b.n	801e346 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e33e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801e346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e34e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801e352:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801e356:	2300      	movs	r3, #0
 801e358:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801e35c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801e360:	460b      	mov	r3, r1
 801e362:	4313      	orrs	r3, r2
 801e364:	d058      	beq.n	801e418 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801e366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e36a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e36e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e372:	d033      	beq.n	801e3dc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801e374:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801e378:	d82c      	bhi.n	801e3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e37a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e37e:	d02f      	beq.n	801e3e0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801e380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e384:	d826      	bhi.n	801e3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e386:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e38a:	d02b      	beq.n	801e3e4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801e38c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801e390:	d820      	bhi.n	801e3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e392:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e396:	d012      	beq.n	801e3be <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801e398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801e39c:	d81a      	bhi.n	801e3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	d022      	beq.n	801e3e8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801e3a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e3a6:	d115      	bne.n	801e3d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3ac:	3308      	adds	r3, #8
 801e3ae:	2100      	movs	r1, #0
 801e3b0:	4618      	mov	r0, r3
 801e3b2:	f000 fe57 	bl	801f064 <RCCEx_PLL2_Config>
 801e3b6:	4603      	mov	r3, r0
 801e3b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e3bc:	e015      	b.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e3be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3c2:	3328      	adds	r3, #40	@ 0x28
 801e3c4:	2102      	movs	r1, #2
 801e3c6:	4618      	mov	r0, r3
 801e3c8:	f000 fefe 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e3cc:	4603      	mov	r3, r0
 801e3ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801e3d2:	e00a      	b.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e3d4:	2301      	movs	r3, #1
 801e3d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e3da:	e006      	b.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e3dc:	bf00      	nop
 801e3de:	e004      	b.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e3e0:	bf00      	nop
 801e3e2:	e002      	b.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e3e4:	bf00      	nop
 801e3e6:	e000      	b.n	801e3ea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801e3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d10e      	bne.n	801e410 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801e3f2:	4b06      	ldr	r3, [pc, #24]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e3f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e3f6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801e3fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e3fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801e402:	4a02      	ldr	r2, [pc, #8]	@ (801e40c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801e404:	430b      	orrs	r3, r1
 801e406:	6593      	str	r3, [r2, #88]	@ 0x58
 801e408:	e006      	b.n	801e418 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801e40a:	bf00      	nop
 801e40c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e410:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e414:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801e418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e420:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801e424:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801e428:	2300      	movs	r3, #0
 801e42a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801e42e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801e432:	460b      	mov	r3, r1
 801e434:	4313      	orrs	r3, r2
 801e436:	d055      	beq.n	801e4e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801e438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e43c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e440:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e444:	d033      	beq.n	801e4ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801e446:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801e44a:	d82c      	bhi.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e44c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e450:	d02f      	beq.n	801e4b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801e452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801e456:	d826      	bhi.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e458:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e45c:	d02b      	beq.n	801e4b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801e45e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801e462:	d820      	bhi.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e464:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e468:	d012      	beq.n	801e490 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801e46a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801e46e:	d81a      	bhi.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801e470:	2b00      	cmp	r3, #0
 801e472:	d022      	beq.n	801e4ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801e474:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e478:	d115      	bne.n	801e4a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e47e:	3308      	adds	r3, #8
 801e480:	2100      	movs	r1, #0
 801e482:	4618      	mov	r0, r3
 801e484:	f000 fdee 	bl	801f064 <RCCEx_PLL2_Config>
 801e488:	4603      	mov	r3, r0
 801e48a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e48e:	e015      	b.n	801e4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e494:	3328      	adds	r3, #40	@ 0x28
 801e496:	2102      	movs	r1, #2
 801e498:	4618      	mov	r0, r3
 801e49a:	f000 fe95 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e49e:	4603      	mov	r3, r0
 801e4a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801e4a4:	e00a      	b.n	801e4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e4a6:	2301      	movs	r3, #1
 801e4a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e4ac:	e006      	b.n	801e4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e4ae:	bf00      	nop
 801e4b0:	e004      	b.n	801e4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e4b2:	bf00      	nop
 801e4b4:	e002      	b.n	801e4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e4b6:	bf00      	nop
 801e4b8:	e000      	b.n	801e4bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801e4ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e4bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d10b      	bne.n	801e4dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801e4c4:	4ba1      	ldr	r3, [pc, #644]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e4c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e4c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801e4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801e4d4:	4a9d      	ldr	r2, [pc, #628]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e4d6:	430b      	orrs	r3, r1
 801e4d8:	6593      	str	r3, [r2, #88]	@ 0x58
 801e4da:	e003      	b.n	801e4e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e4dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e4e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801e4e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e4ec:	f002 0308 	and.w	r3, r2, #8
 801e4f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801e4fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801e4fe:	460b      	mov	r3, r1
 801e500:	4313      	orrs	r3, r2
 801e502:	d01e      	beq.n	801e542 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801e504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e508:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e50c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801e510:	d10c      	bne.n	801e52c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e516:	3328      	adds	r3, #40	@ 0x28
 801e518:	2102      	movs	r1, #2
 801e51a:	4618      	mov	r0, r3
 801e51c:	f000 fe54 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e520:	4603      	mov	r3, r0
 801e522:	2b00      	cmp	r3, #0
 801e524:	d002      	beq.n	801e52c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801e526:	2301      	movs	r3, #1
 801e528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801e52c:	4b87      	ldr	r3, [pc, #540]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e52e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e530:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801e534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e538:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e53c:	4a83      	ldr	r2, [pc, #524]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e53e:	430b      	orrs	r3, r1
 801e540:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801e542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e54a:	f002 0310 	and.w	r3, r2, #16
 801e54e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801e552:	2300      	movs	r3, #0
 801e554:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801e558:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801e55c:	460b      	mov	r3, r1
 801e55e:	4313      	orrs	r3, r2
 801e560:	d01e      	beq.n	801e5a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801e562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e566:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e56a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e56e:	d10c      	bne.n	801e58a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e574:	3328      	adds	r3, #40	@ 0x28
 801e576:	2102      	movs	r1, #2
 801e578:	4618      	mov	r0, r3
 801e57a:	f000 fe25 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e57e:	4603      	mov	r3, r0
 801e580:	2b00      	cmp	r3, #0
 801e582:	d002      	beq.n	801e58a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801e584:	2301      	movs	r3, #1
 801e586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801e58a:	4b70      	ldr	r3, [pc, #448]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e58c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e58e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e596:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801e59a:	4a6c      	ldr	r2, [pc, #432]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e59c:	430b      	orrs	r3, r1
 801e59e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801e5a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e5a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801e5ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801e5b0:	2300      	movs	r3, #0
 801e5b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801e5b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801e5ba:	460b      	mov	r3, r1
 801e5bc:	4313      	orrs	r3, r2
 801e5be:	d03e      	beq.n	801e63e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801e5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e5c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e5cc:	d022      	beq.n	801e614 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801e5ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801e5d2:	d81b      	bhi.n	801e60c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801e5d4:	2b00      	cmp	r3, #0
 801e5d6:	d003      	beq.n	801e5e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801e5d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e5dc:	d00b      	beq.n	801e5f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801e5de:	e015      	b.n	801e60c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5e4:	3308      	adds	r3, #8
 801e5e6:	2100      	movs	r1, #0
 801e5e8:	4618      	mov	r0, r3
 801e5ea:	f000 fd3b 	bl	801f064 <RCCEx_PLL2_Config>
 801e5ee:	4603      	mov	r3, r0
 801e5f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e5f4:	e00f      	b.n	801e616 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e5fa:	3328      	adds	r3, #40	@ 0x28
 801e5fc:	2102      	movs	r1, #2
 801e5fe:	4618      	mov	r0, r3
 801e600:	f000 fde2 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e604:	4603      	mov	r3, r0
 801e606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801e60a:	e004      	b.n	801e616 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e60c:	2301      	movs	r3, #1
 801e60e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e612:	e000      	b.n	801e616 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801e614:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e61a:	2b00      	cmp	r3, #0
 801e61c:	d10b      	bne.n	801e636 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801e61e:	4b4b      	ldr	r3, [pc, #300]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e622:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801e626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e62a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801e62e:	4a47      	ldr	r2, [pc, #284]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e630:	430b      	orrs	r3, r1
 801e632:	6593      	str	r3, [r2, #88]	@ 0x58
 801e634:	e003      	b.n	801e63e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e63a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801e63e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e642:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e646:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801e64a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801e64c:	2300      	movs	r3, #0
 801e64e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801e650:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801e654:	460b      	mov	r3, r1
 801e656:	4313      	orrs	r3, r2
 801e658:	d03b      	beq.n	801e6d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801e65a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e662:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e666:	d01f      	beq.n	801e6a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801e668:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801e66c:	d818      	bhi.n	801e6a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801e66e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801e672:	d003      	beq.n	801e67c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801e674:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801e678:	d007      	beq.n	801e68a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801e67a:	e011      	b.n	801e6a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e67c:	4b33      	ldr	r3, [pc, #204]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e67e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e680:	4a32      	ldr	r2, [pc, #200]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e686:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801e688:	e00f      	b.n	801e6aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e68e:	3328      	adds	r3, #40	@ 0x28
 801e690:	2101      	movs	r1, #1
 801e692:	4618      	mov	r0, r3
 801e694:	f000 fd98 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e698:	4603      	mov	r3, r0
 801e69a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801e69e:	e004      	b.n	801e6aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e6a0:	2301      	movs	r3, #1
 801e6a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e6a6:	e000      	b.n	801e6aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801e6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d10b      	bne.n	801e6ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801e6b2:	4b26      	ldr	r3, [pc, #152]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e6b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e6b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801e6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801e6c2:	4a22      	ldr	r2, [pc, #136]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e6c4:	430b      	orrs	r3, r1
 801e6c6:	6553      	str	r3, [r2, #84]	@ 0x54
 801e6c8:	e003      	b.n	801e6d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e6ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e6ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801e6d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e6da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801e6de:	673b      	str	r3, [r7, #112]	@ 0x70
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	677b      	str	r3, [r7, #116]	@ 0x74
 801e6e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801e6e8:	460b      	mov	r3, r1
 801e6ea:	4313      	orrs	r3, r2
 801e6ec:	d034      	beq.n	801e758 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801e6ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e6f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d003      	beq.n	801e700 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801e6f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801e6fc:	d007      	beq.n	801e70e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801e6fe:	e011      	b.n	801e724 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e700:	4b12      	ldr	r3, [pc, #72]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e704:	4a11      	ldr	r2, [pc, #68]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e70a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e70c:	e00e      	b.n	801e72c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e70e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e712:	3308      	adds	r3, #8
 801e714:	2102      	movs	r1, #2
 801e716:	4618      	mov	r0, r3
 801e718:	f000 fca4 	bl	801f064 <RCCEx_PLL2_Config>
 801e71c:	4603      	mov	r3, r0
 801e71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801e722:	e003      	b.n	801e72c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801e724:	2301      	movs	r3, #1
 801e726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e72a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e72c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e730:	2b00      	cmp	r3, #0
 801e732:	d10d      	bne.n	801e750 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801e734:	4b05      	ldr	r3, [pc, #20]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e738:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801e73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e740:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e742:	4a02      	ldr	r2, [pc, #8]	@ (801e74c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801e744:	430b      	orrs	r3, r1
 801e746:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801e748:	e006      	b.n	801e758 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801e74a:	bf00      	nop
 801e74c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e754:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801e758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e760:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801e764:	66bb      	str	r3, [r7, #104]	@ 0x68
 801e766:	2300      	movs	r3, #0
 801e768:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801e76a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801e76e:	460b      	mov	r3, r1
 801e770:	4313      	orrs	r3, r2
 801e772:	d00c      	beq.n	801e78e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801e774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e778:	3328      	adds	r3, #40	@ 0x28
 801e77a:	2102      	movs	r1, #2
 801e77c:	4618      	mov	r0, r3
 801e77e:	f000 fd23 	bl	801f1c8 <RCCEx_PLL3_Config>
 801e782:	4603      	mov	r3, r0
 801e784:	2b00      	cmp	r3, #0
 801e786:	d002      	beq.n	801e78e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801e788:	2301      	movs	r3, #1
 801e78a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801e78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e792:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e796:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801e79a:	663b      	str	r3, [r7, #96]	@ 0x60
 801e79c:	2300      	movs	r3, #0
 801e79e:	667b      	str	r3, [r7, #100]	@ 0x64
 801e7a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801e7a4:	460b      	mov	r3, r1
 801e7a6:	4313      	orrs	r3, r2
 801e7a8:	d038      	beq.n	801e81c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801e7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e7b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e7b6:	d018      	beq.n	801e7ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801e7b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801e7bc:	d811      	bhi.n	801e7e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e7be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e7c2:	d014      	beq.n	801e7ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801e7c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e7c8:	d80b      	bhi.n	801e7e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801e7ca:	2b00      	cmp	r3, #0
 801e7cc:	d011      	beq.n	801e7f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801e7ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801e7d2:	d106      	bne.n	801e7e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801e7d4:	4bc3      	ldr	r3, [pc, #780]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e7d8:	4ac2      	ldr	r2, [pc, #776]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e7da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801e7de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801e7e0:	e008      	b.n	801e7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801e7e2:	2301      	movs	r3, #1
 801e7e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801e7e8:	e004      	b.n	801e7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e7ea:	bf00      	nop
 801e7ec:	e002      	b.n	801e7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e7ee:	bf00      	nop
 801e7f0:	e000      	b.n	801e7f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801e7f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801e7f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e7f8:	2b00      	cmp	r3, #0
 801e7fa:	d10b      	bne.n	801e814 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801e7fc:	4bb9      	ldr	r3, [pc, #740]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e7fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e800:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801e804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e808:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e80c:	4ab5      	ldr	r2, [pc, #724]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e80e:	430b      	orrs	r3, r1
 801e810:	6553      	str	r3, [r2, #84]	@ 0x54
 801e812:	e003      	b.n	801e81c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e818:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801e81c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e824:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801e828:	65bb      	str	r3, [r7, #88]	@ 0x58
 801e82a:	2300      	movs	r3, #0
 801e82c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801e82e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801e832:	460b      	mov	r3, r1
 801e834:	4313      	orrs	r3, r2
 801e836:	d009      	beq.n	801e84c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801e838:	4baa      	ldr	r3, [pc, #680]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e83a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e83c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e846:	4aa7      	ldr	r2, [pc, #668]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e848:	430b      	orrs	r3, r1
 801e84a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801e84c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e854:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801e858:	653b      	str	r3, [r7, #80]	@ 0x50
 801e85a:	2300      	movs	r3, #0
 801e85c:	657b      	str	r3, [r7, #84]	@ 0x54
 801e85e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801e862:	460b      	mov	r3, r1
 801e864:	4313      	orrs	r3, r2
 801e866:	d00a      	beq.n	801e87e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801e868:	4b9e      	ldr	r3, [pc, #632]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e86a:	691b      	ldr	r3, [r3, #16]
 801e86c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801e870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e874:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801e878:	4a9a      	ldr	r2, [pc, #616]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e87a:	430b      	orrs	r3, r1
 801e87c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801e87e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e882:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e886:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801e88a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801e88c:	2300      	movs	r3, #0
 801e88e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801e890:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801e894:	460b      	mov	r3, r1
 801e896:	4313      	orrs	r3, r2
 801e898:	d009      	beq.n	801e8ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801e89a:	4b92      	ldr	r3, [pc, #584]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e89c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e89e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801e8a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e8a8:	4a8e      	ldr	r2, [pc, #568]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e8aa:	430b      	orrs	r3, r1
 801e8ac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801e8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801e8ba:	643b      	str	r3, [r7, #64]	@ 0x40
 801e8bc:	2300      	movs	r3, #0
 801e8be:	647b      	str	r3, [r7, #68]	@ 0x44
 801e8c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801e8c4:	460b      	mov	r3, r1
 801e8c6:	4313      	orrs	r3, r2
 801e8c8:	d00e      	beq.n	801e8e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801e8ca:	4b86      	ldr	r3, [pc, #536]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e8cc:	691b      	ldr	r3, [r3, #16]
 801e8ce:	4a85      	ldr	r2, [pc, #532]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e8d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801e8d4:	6113      	str	r3, [r2, #16]
 801e8d6:	4b83      	ldr	r3, [pc, #524]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e8d8:	6919      	ldr	r1, [r3, #16]
 801e8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801e8e2:	4a80      	ldr	r2, [pc, #512]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e8e4:	430b      	orrs	r3, r1
 801e8e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801e8e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801e8f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 801e8f6:	2300      	movs	r3, #0
 801e8f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801e8fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801e8fe:	460b      	mov	r3, r1
 801e900:	4313      	orrs	r3, r2
 801e902:	d009      	beq.n	801e918 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801e904:	4b77      	ldr	r3, [pc, #476]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e908:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801e90c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e912:	4a74      	ldr	r2, [pc, #464]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e914:	430b      	orrs	r3, r1
 801e916:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801e918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e920:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801e924:	633b      	str	r3, [r7, #48]	@ 0x30
 801e926:	2300      	movs	r3, #0
 801e928:	637b      	str	r3, [r7, #52]	@ 0x34
 801e92a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801e92e:	460b      	mov	r3, r1
 801e930:	4313      	orrs	r3, r2
 801e932:	d00a      	beq.n	801e94a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801e934:	4b6b      	ldr	r3, [pc, #428]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e936:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e938:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801e93c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e940:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801e944:	4a67      	ldr	r2, [pc, #412]	@ (801eae4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801e946:	430b      	orrs	r3, r1
 801e948:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801e94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e952:	2100      	movs	r1, #0
 801e954:	62b9      	str	r1, [r7, #40]	@ 0x28
 801e956:	f003 0301 	and.w	r3, r3, #1
 801e95a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801e95c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801e960:	460b      	mov	r3, r1
 801e962:	4313      	orrs	r3, r2
 801e964:	d011      	beq.n	801e98a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801e966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e96a:	3308      	adds	r3, #8
 801e96c:	2100      	movs	r1, #0
 801e96e:	4618      	mov	r0, r3
 801e970:	f000 fb78 	bl	801f064 <RCCEx_PLL2_Config>
 801e974:	4603      	mov	r3, r0
 801e976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e97a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d003      	beq.n	801e98a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e986:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801e98a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e992:	2100      	movs	r1, #0
 801e994:	6239      	str	r1, [r7, #32]
 801e996:	f003 0302 	and.w	r3, r3, #2
 801e99a:	627b      	str	r3, [r7, #36]	@ 0x24
 801e99c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801e9a0:	460b      	mov	r3, r1
 801e9a2:	4313      	orrs	r3, r2
 801e9a4:	d011      	beq.n	801e9ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801e9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9aa:	3308      	adds	r3, #8
 801e9ac:	2101      	movs	r1, #1
 801e9ae:	4618      	mov	r0, r3
 801e9b0:	f000 fb58 	bl	801f064 <RCCEx_PLL2_Config>
 801e9b4:	4603      	mov	r3, r0
 801e9b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e9ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d003      	beq.n	801e9ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e9c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801e9ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e9d2:	2100      	movs	r1, #0
 801e9d4:	61b9      	str	r1, [r7, #24]
 801e9d6:	f003 0304 	and.w	r3, r3, #4
 801e9da:	61fb      	str	r3, [r7, #28]
 801e9dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e9e0:	460b      	mov	r3, r1
 801e9e2:	4313      	orrs	r3, r2
 801e9e4:	d011      	beq.n	801ea0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e9e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e9ea:	3308      	adds	r3, #8
 801e9ec:	2102      	movs	r1, #2
 801e9ee:	4618      	mov	r0, r3
 801e9f0:	f000 fb38 	bl	801f064 <RCCEx_PLL2_Config>
 801e9f4:	4603      	mov	r3, r0
 801e9f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e9fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e9fe:	2b00      	cmp	r3, #0
 801ea00:	d003      	beq.n	801ea0a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801ea0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea12:	2100      	movs	r1, #0
 801ea14:	6139      	str	r1, [r7, #16]
 801ea16:	f003 0308 	and.w	r3, r3, #8
 801ea1a:	617b      	str	r3, [r7, #20]
 801ea1c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801ea20:	460b      	mov	r3, r1
 801ea22:	4313      	orrs	r3, r2
 801ea24:	d011      	beq.n	801ea4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ea26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea2a:	3328      	adds	r3, #40	@ 0x28
 801ea2c:	2100      	movs	r1, #0
 801ea2e:	4618      	mov	r0, r3
 801ea30:	f000 fbca 	bl	801f1c8 <RCCEx_PLL3_Config>
 801ea34:	4603      	mov	r3, r0
 801ea36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801ea3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea3e:	2b00      	cmp	r3, #0
 801ea40:	d003      	beq.n	801ea4a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801ea4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea52:	2100      	movs	r1, #0
 801ea54:	60b9      	str	r1, [r7, #8]
 801ea56:	f003 0310 	and.w	r3, r3, #16
 801ea5a:	60fb      	str	r3, [r7, #12]
 801ea5c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801ea60:	460b      	mov	r3, r1
 801ea62:	4313      	orrs	r3, r2
 801ea64:	d011      	beq.n	801ea8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801ea66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea6a:	3328      	adds	r3, #40	@ 0x28
 801ea6c:	2101      	movs	r1, #1
 801ea6e:	4618      	mov	r0, r3
 801ea70:	f000 fbaa 	bl	801f1c8 <RCCEx_PLL3_Config>
 801ea74:	4603      	mov	r3, r0
 801ea76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801ea7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea7e:	2b00      	cmp	r3, #0
 801ea80:	d003      	beq.n	801ea8a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ea82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ea86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801ea8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ea8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ea92:	2100      	movs	r1, #0
 801ea94:	6039      	str	r1, [r7, #0]
 801ea96:	f003 0320 	and.w	r3, r3, #32
 801ea9a:	607b      	str	r3, [r7, #4]
 801ea9c:	e9d7 1200 	ldrd	r1, r2, [r7]
 801eaa0:	460b      	mov	r3, r1
 801eaa2:	4313      	orrs	r3, r2
 801eaa4:	d011      	beq.n	801eaca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801eaa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801eaaa:	3328      	adds	r3, #40	@ 0x28
 801eaac:	2102      	movs	r1, #2
 801eaae:	4618      	mov	r0, r3
 801eab0:	f000 fb8a 	bl	801f1c8 <RCCEx_PLL3_Config>
 801eab4:	4603      	mov	r3, r0
 801eab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801eaba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eabe:	2b00      	cmp	r3, #0
 801eac0:	d003      	beq.n	801eaca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801eac2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801eac6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801eaca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801eace:	2b00      	cmp	r3, #0
 801ead0:	d101      	bne.n	801ead6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801ead2:	2300      	movs	r3, #0
 801ead4:	e000      	b.n	801ead8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801ead6:	2301      	movs	r3, #1
}
 801ead8:	4618      	mov	r0, r3
 801eada:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801eade:	46bd      	mov	sp, r7
 801eae0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801eae4:	58024400 	.word	0x58024400

0801eae8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801eae8:	b580      	push	{r7, lr}
 801eaea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801eaec:	f7fe fd96 	bl	801d61c <HAL_RCC_GetHCLKFreq>
 801eaf0:	4602      	mov	r2, r0
 801eaf2:	4b06      	ldr	r3, [pc, #24]	@ (801eb0c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801eaf4:	6a1b      	ldr	r3, [r3, #32]
 801eaf6:	091b      	lsrs	r3, r3, #4
 801eaf8:	f003 0307 	and.w	r3, r3, #7
 801eafc:	4904      	ldr	r1, [pc, #16]	@ (801eb10 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801eafe:	5ccb      	ldrb	r3, [r1, r3]
 801eb00:	f003 031f 	and.w	r3, r3, #31
 801eb04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801eb08:	4618      	mov	r0, r3
 801eb0a:	bd80      	pop	{r7, pc}
 801eb0c:	58024400 	.word	0x58024400
 801eb10:	0802755c 	.word	0x0802755c

0801eb14 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801eb14:	b480      	push	{r7}
 801eb16:	b089      	sub	sp, #36	@ 0x24
 801eb18:	af00      	add	r7, sp, #0
 801eb1a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801eb1c:	4ba1      	ldr	r3, [pc, #644]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb20:	f003 0303 	and.w	r3, r3, #3
 801eb24:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801eb26:	4b9f      	ldr	r3, [pc, #636]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eb2a:	0b1b      	lsrs	r3, r3, #12
 801eb2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801eb30:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801eb32:	4b9c      	ldr	r3, [pc, #624]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801eb36:	091b      	lsrs	r3, r3, #4
 801eb38:	f003 0301 	and.w	r3, r3, #1
 801eb3c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801eb3e:	4b99      	ldr	r3, [pc, #612]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eb42:	08db      	lsrs	r3, r3, #3
 801eb44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801eb48:	693a      	ldr	r2, [r7, #16]
 801eb4a:	fb02 f303 	mul.w	r3, r2, r3
 801eb4e:	ee07 3a90 	vmov	s15, r3
 801eb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eb56:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801eb5a:	697b      	ldr	r3, [r7, #20]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	f000 8111 	beq.w	801ed84 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801eb62:	69bb      	ldr	r3, [r7, #24]
 801eb64:	2b02      	cmp	r3, #2
 801eb66:	f000 8083 	beq.w	801ec70 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801eb6a:	69bb      	ldr	r3, [r7, #24]
 801eb6c:	2b02      	cmp	r3, #2
 801eb6e:	f200 80a1 	bhi.w	801ecb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801eb72:	69bb      	ldr	r3, [r7, #24]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d003      	beq.n	801eb80 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801eb78:	69bb      	ldr	r3, [r7, #24]
 801eb7a:	2b01      	cmp	r3, #1
 801eb7c:	d056      	beq.n	801ec2c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801eb7e:	e099      	b.n	801ecb4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801eb80:	4b88      	ldr	r3, [pc, #544]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	f003 0320 	and.w	r3, r3, #32
 801eb88:	2b00      	cmp	r3, #0
 801eb8a:	d02d      	beq.n	801ebe8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801eb8c:	4b85      	ldr	r3, [pc, #532]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801eb8e:	681b      	ldr	r3, [r3, #0]
 801eb90:	08db      	lsrs	r3, r3, #3
 801eb92:	f003 0303 	and.w	r3, r3, #3
 801eb96:	4a84      	ldr	r2, [pc, #528]	@ (801eda8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801eb98:	fa22 f303 	lsr.w	r3, r2, r3
 801eb9c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801eb9e:	68bb      	ldr	r3, [r7, #8]
 801eba0:	ee07 3a90 	vmov	s15, r3
 801eba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eba8:	697b      	ldr	r3, [r7, #20]
 801ebaa:	ee07 3a90 	vmov	s15, r3
 801ebae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ebb6:	4b7b      	ldr	r3, [pc, #492]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ebb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ebba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ebbe:	ee07 3a90 	vmov	s15, r3
 801ebc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ebc6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ebca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ebce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ebd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ebd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ebda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ebde:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ebe2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ebe6:	e087      	b.n	801ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ebe8:	697b      	ldr	r3, [r7, #20]
 801ebea:	ee07 3a90 	vmov	s15, r3
 801ebee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ebf2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801edb0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801ebf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ebfa:	4b6a      	ldr	r3, [pc, #424]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ebfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ebfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec02:	ee07 3a90 	vmov	s15, r3
 801ec06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec0a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec0e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ec12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec22:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ec2a:	e065      	b.n	801ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ec2c:	697b      	ldr	r3, [r7, #20]
 801ec2e:	ee07 3a90 	vmov	s15, r3
 801ec32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec36:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801edb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ec3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec3e:	4b59      	ldr	r3, [pc, #356]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ec40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec46:	ee07 3a90 	vmov	s15, r3
 801ec4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec4e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec52:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ec56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ec5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ec62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ec66:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ec6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ec6e:	e043      	b.n	801ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ec70:	697b      	ldr	r3, [r7, #20]
 801ec72:	ee07 3a90 	vmov	s15, r3
 801ec76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ec7a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801edb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801ec7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ec82:	4b48      	ldr	r3, [pc, #288]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ec84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ec8a:	ee07 3a90 	vmov	s15, r3
 801ec8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ec92:	ed97 6a03 	vldr	s12, [r7, #12]
 801ec96:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ec9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ec9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ecaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ecae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ecb2:	e021      	b.n	801ecf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801ecb4:	697b      	ldr	r3, [r7, #20]
 801ecb6:	ee07 3a90 	vmov	s15, r3
 801ecba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ecbe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801edb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801ecc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ecc6:	4b37      	ldr	r3, [pc, #220]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ecc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ecce:	ee07 3a90 	vmov	s15, r3
 801ecd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ecd6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ecda:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801edac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801ecde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ece2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ece6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ecea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ecee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ecf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ecf6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801ecf8:	4b2a      	ldr	r3, [pc, #168]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ecfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ecfc:	0a5b      	lsrs	r3, r3, #9
 801ecfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ed02:	ee07 3a90 	vmov	s15, r3
 801ed06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ed12:	edd7 6a07 	vldr	s13, [r7, #28]
 801ed16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ed1e:	ee17 2a90 	vmov	r2, s15
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801ed26:	4b1f      	ldr	r3, [pc, #124]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ed28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ed2a:	0c1b      	lsrs	r3, r3, #16
 801ed2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ed30:	ee07 3a90 	vmov	s15, r3
 801ed34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ed40:	edd7 6a07 	vldr	s13, [r7, #28]
 801ed44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ed4c:	ee17 2a90 	vmov	r2, s15
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801ed54:	4b13      	ldr	r3, [pc, #76]	@ (801eda4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801ed56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ed58:	0e1b      	lsrs	r3, r3, #24
 801ed5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ed5e:	ee07 3a90 	vmov	s15, r3
 801ed62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ed66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801ed6e:	edd7 6a07 	vldr	s13, [r7, #28]
 801ed72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801ed76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801ed7a:	ee17 2a90 	vmov	r2, s15
 801ed7e:	687b      	ldr	r3, [r7, #4]
 801ed80:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801ed82:	e008      	b.n	801ed96 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	2200      	movs	r2, #0
 801ed88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801ed8a:	687b      	ldr	r3, [r7, #4]
 801ed8c:	2200      	movs	r2, #0
 801ed8e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	2200      	movs	r2, #0
 801ed94:	609a      	str	r2, [r3, #8]
}
 801ed96:	bf00      	nop
 801ed98:	3724      	adds	r7, #36	@ 0x24
 801ed9a:	46bd      	mov	sp, r7
 801ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eda0:	4770      	bx	lr
 801eda2:	bf00      	nop
 801eda4:	58024400 	.word	0x58024400
 801eda8:	03d09000 	.word	0x03d09000
 801edac:	46000000 	.word	0x46000000
 801edb0:	4c742400 	.word	0x4c742400
 801edb4:	4a742400 	.word	0x4a742400
 801edb8:	4bbebc20 	.word	0x4bbebc20

0801edbc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801edbc:	b480      	push	{r7}
 801edbe:	b089      	sub	sp, #36	@ 0x24
 801edc0:	af00      	add	r7, sp, #0
 801edc2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801edc4:	4ba1      	ldr	r3, [pc, #644]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801edc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edc8:	f003 0303 	and.w	r3, r3, #3
 801edcc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801edce:	4b9f      	ldr	r3, [pc, #636]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801edd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801edd2:	0d1b      	lsrs	r3, r3, #20
 801edd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801edd8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801edda:	4b9c      	ldr	r3, [pc, #624]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801edde:	0a1b      	lsrs	r3, r3, #8
 801ede0:	f003 0301 	and.w	r3, r3, #1
 801ede4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801ede6:	4b99      	ldr	r3, [pc, #612]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ede8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801edea:	08db      	lsrs	r3, r3, #3
 801edec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801edf0:	693a      	ldr	r2, [r7, #16]
 801edf2:	fb02 f303 	mul.w	r3, r2, r3
 801edf6:	ee07 3a90 	vmov	s15, r3
 801edfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801edfe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801ee02:	697b      	ldr	r3, [r7, #20]
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	f000 8111 	beq.w	801f02c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801ee0a:	69bb      	ldr	r3, [r7, #24]
 801ee0c:	2b02      	cmp	r3, #2
 801ee0e:	f000 8083 	beq.w	801ef18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801ee12:	69bb      	ldr	r3, [r7, #24]
 801ee14:	2b02      	cmp	r3, #2
 801ee16:	f200 80a1 	bhi.w	801ef5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801ee1a:	69bb      	ldr	r3, [r7, #24]
 801ee1c:	2b00      	cmp	r3, #0
 801ee1e:	d003      	beq.n	801ee28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801ee20:	69bb      	ldr	r3, [r7, #24]
 801ee22:	2b01      	cmp	r3, #1
 801ee24:	d056      	beq.n	801eed4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801ee26:	e099      	b.n	801ef5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ee28:	4b88      	ldr	r3, [pc, #544]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee2a:	681b      	ldr	r3, [r3, #0]
 801ee2c:	f003 0320 	and.w	r3, r3, #32
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d02d      	beq.n	801ee90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ee34:	4b85      	ldr	r3, [pc, #532]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee36:	681b      	ldr	r3, [r3, #0]
 801ee38:	08db      	lsrs	r3, r3, #3
 801ee3a:	f003 0303 	and.w	r3, r3, #3
 801ee3e:	4a84      	ldr	r2, [pc, #528]	@ (801f050 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801ee40:	fa22 f303 	lsr.w	r3, r2, r3
 801ee44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ee46:	68bb      	ldr	r3, [r7, #8]
 801ee48:	ee07 3a90 	vmov	s15, r3
 801ee4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ee50:	697b      	ldr	r3, [r7, #20]
 801ee52:	ee07 3a90 	vmov	s15, r3
 801ee56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ee5e:	4b7b      	ldr	r3, [pc, #492]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ee60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ee62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ee66:	ee07 3a90 	vmov	s15, r3
 801ee6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ee6e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ee72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ee76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ee7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ee7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ee82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ee86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ee8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ee8e:	e087      	b.n	801efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ee90:	697b      	ldr	r3, [r7, #20]
 801ee92:	ee07 3a90 	vmov	s15, r3
 801ee96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ee9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801f058 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801ee9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eea2:	4b6a      	ldr	r3, [pc, #424]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eeaa:	ee07 3a90 	vmov	s15, r3
 801eeae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eeb2:	ed97 6a03 	vldr	s12, [r7, #12]
 801eeb6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801eeba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801eebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801eec2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801eec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801eeca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801eece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801eed2:	e065      	b.n	801efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801eed4:	697b      	ldr	r3, [r7, #20]
 801eed6:	ee07 3a90 	vmov	s15, r3
 801eeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801eede:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801f05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801eee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801eee6:	4b59      	ldr	r3, [pc, #356]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801eee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801eeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801eeee:	ee07 3a90 	vmov	s15, r3
 801eef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801eef6:	ed97 6a03 	vldr	s12, [r7, #12]
 801eefa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801eefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ef02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ef06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ef0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ef16:	e043      	b.n	801efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ef18:	697b      	ldr	r3, [r7, #20]
 801ef1a:	ee07 3a90 	vmov	s15, r3
 801ef1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801f060 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ef26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ef2a:	4b48      	ldr	r3, [pc, #288]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ef2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ef2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ef32:	ee07 3a90 	vmov	s15, r3
 801ef36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ef3a:	ed97 6a03 	vldr	s12, [r7, #12]
 801ef3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ef42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ef46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ef4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ef52:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ef5a:	e021      	b.n	801efa0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ef5c:	697b      	ldr	r3, [r7, #20]
 801ef5e:	ee07 3a90 	vmov	s15, r3
 801ef62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ef66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801f05c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ef6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ef6e:	4b37      	ldr	r3, [pc, #220]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ef70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ef72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ef76:	ee07 3a90 	vmov	s15, r3
 801ef7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ef7e:	ed97 6a03 	vldr	s12, [r7, #12]
 801ef82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801f054 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ef86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ef8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ef8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ef92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ef96:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ef9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ef9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801efa0:	4b2a      	ldr	r3, [pc, #168]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801efa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801efa4:	0a5b      	lsrs	r3, r3, #9
 801efa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801efaa:	ee07 3a90 	vmov	s15, r3
 801efae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801efb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801efba:	edd7 6a07 	vldr	s13, [r7, #28]
 801efbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801efc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801efc6:	ee17 2a90 	vmov	r2, s15
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801efce:	4b1f      	ldr	r3, [pc, #124]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801efd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801efd2:	0c1b      	lsrs	r3, r3, #16
 801efd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801efd8:	ee07 3a90 	vmov	s15, r3
 801efdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801efe0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801efe4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801efe8:	edd7 6a07 	vldr	s13, [r7, #28]
 801efec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801eff0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801eff4:	ee17 2a90 	vmov	r2, s15
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801effc:	4b13      	ldr	r3, [pc, #76]	@ (801f04c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801effe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801f000:	0e1b      	lsrs	r3, r3, #24
 801f002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801f006:	ee07 3a90 	vmov	s15, r3
 801f00a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801f00e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f012:	ee37 7a87 	vadd.f32	s14, s15, s14
 801f016:	edd7 6a07 	vldr	s13, [r7, #28]
 801f01a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f01e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801f022:	ee17 2a90 	vmov	r2, s15
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801f02a:	e008      	b.n	801f03e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	2200      	movs	r2, #0
 801f030:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	2200      	movs	r2, #0
 801f036:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	2200      	movs	r2, #0
 801f03c:	609a      	str	r2, [r3, #8]
}
 801f03e:	bf00      	nop
 801f040:	3724      	adds	r7, #36	@ 0x24
 801f042:	46bd      	mov	sp, r7
 801f044:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f048:	4770      	bx	lr
 801f04a:	bf00      	nop
 801f04c:	58024400 	.word	0x58024400
 801f050:	03d09000 	.word	0x03d09000
 801f054:	46000000 	.word	0x46000000
 801f058:	4c742400 	.word	0x4c742400
 801f05c:	4a742400 	.word	0x4a742400
 801f060:	4bbebc20 	.word	0x4bbebc20

0801f064 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801f064:	b580      	push	{r7, lr}
 801f066:	b084      	sub	sp, #16
 801f068:	af00      	add	r7, sp, #0
 801f06a:	6078      	str	r0, [r7, #4]
 801f06c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f06e:	2300      	movs	r3, #0
 801f070:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f072:	4b53      	ldr	r3, [pc, #332]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f076:	f003 0303 	and.w	r3, r3, #3
 801f07a:	2b03      	cmp	r3, #3
 801f07c:	d101      	bne.n	801f082 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801f07e:	2301      	movs	r3, #1
 801f080:	e099      	b.n	801f1b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801f082:	4b4f      	ldr	r3, [pc, #316]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f084:	681b      	ldr	r3, [r3, #0]
 801f086:	4a4e      	ldr	r2, [pc, #312]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f088:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801f08c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f08e:	f7fa ff23 	bl	8019ed8 <HAL_GetTick>
 801f092:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f094:	e008      	b.n	801f0a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f096:	f7fa ff1f 	bl	8019ed8 <HAL_GetTick>
 801f09a:	4602      	mov	r2, r0
 801f09c:	68bb      	ldr	r3, [r7, #8]
 801f09e:	1ad3      	subs	r3, r2, r3
 801f0a0:	2b02      	cmp	r3, #2
 801f0a2:	d901      	bls.n	801f0a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f0a4:	2303      	movs	r3, #3
 801f0a6:	e086      	b.n	801f1b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801f0a8:	4b45      	ldr	r3, [pc, #276]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f0aa:	681b      	ldr	r3, [r3, #0]
 801f0ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f0b0:	2b00      	cmp	r3, #0
 801f0b2:	d1f0      	bne.n	801f096 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801f0b4:	4b42      	ldr	r3, [pc, #264]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f0b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f0b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	031b      	lsls	r3, r3, #12
 801f0c2:	493f      	ldr	r1, [pc, #252]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f0c4:	4313      	orrs	r3, r2
 801f0c6:	628b      	str	r3, [r1, #40]	@ 0x28
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	685b      	ldr	r3, [r3, #4]
 801f0cc:	3b01      	subs	r3, #1
 801f0ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	689b      	ldr	r3, [r3, #8]
 801f0d6:	3b01      	subs	r3, #1
 801f0d8:	025b      	lsls	r3, r3, #9
 801f0da:	b29b      	uxth	r3, r3
 801f0dc:	431a      	orrs	r2, r3
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	68db      	ldr	r3, [r3, #12]
 801f0e2:	3b01      	subs	r3, #1
 801f0e4:	041b      	lsls	r3, r3, #16
 801f0e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f0ea:	431a      	orrs	r2, r3
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	691b      	ldr	r3, [r3, #16]
 801f0f0:	3b01      	subs	r3, #1
 801f0f2:	061b      	lsls	r3, r3, #24
 801f0f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f0f8:	4931      	ldr	r1, [pc, #196]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f0fa:	4313      	orrs	r3, r2
 801f0fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801f0fe:	4b30      	ldr	r3, [pc, #192]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f102:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801f106:	687b      	ldr	r3, [r7, #4]
 801f108:	695b      	ldr	r3, [r3, #20]
 801f10a:	492d      	ldr	r1, [pc, #180]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f10c:	4313      	orrs	r3, r2
 801f10e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801f110:	4b2b      	ldr	r3, [pc, #172]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f114:	f023 0220 	bic.w	r2, r3, #32
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	699b      	ldr	r3, [r3, #24]
 801f11c:	4928      	ldr	r1, [pc, #160]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f11e:	4313      	orrs	r3, r2
 801f120:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801f122:	4b27      	ldr	r3, [pc, #156]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f126:	4a26      	ldr	r2, [pc, #152]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f128:	f023 0310 	bic.w	r3, r3, #16
 801f12c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801f12e:	4b24      	ldr	r3, [pc, #144]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f130:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f132:	4b24      	ldr	r3, [pc, #144]	@ (801f1c4 <RCCEx_PLL2_Config+0x160>)
 801f134:	4013      	ands	r3, r2
 801f136:	687a      	ldr	r2, [r7, #4]
 801f138:	69d2      	ldr	r2, [r2, #28]
 801f13a:	00d2      	lsls	r2, r2, #3
 801f13c:	4920      	ldr	r1, [pc, #128]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f13e:	4313      	orrs	r3, r2
 801f140:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801f142:	4b1f      	ldr	r3, [pc, #124]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f146:	4a1e      	ldr	r2, [pc, #120]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f148:	f043 0310 	orr.w	r3, r3, #16
 801f14c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f14e:	683b      	ldr	r3, [r7, #0]
 801f150:	2b00      	cmp	r3, #0
 801f152:	d106      	bne.n	801f162 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801f154:	4b1a      	ldr	r3, [pc, #104]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f158:	4a19      	ldr	r2, [pc, #100]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f15a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801f15e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f160:	e00f      	b.n	801f182 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f162:	683b      	ldr	r3, [r7, #0]
 801f164:	2b01      	cmp	r3, #1
 801f166:	d106      	bne.n	801f176 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801f168:	4b15      	ldr	r3, [pc, #84]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f16c:	4a14      	ldr	r2, [pc, #80]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f16e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f172:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f174:	e005      	b.n	801f182 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801f176:	4b12      	ldr	r3, [pc, #72]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f17a:	4a11      	ldr	r2, [pc, #68]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f17c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801f180:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801f182:	4b0f      	ldr	r3, [pc, #60]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	4a0e      	ldr	r2, [pc, #56]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f188:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801f18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f18e:	f7fa fea3 	bl	8019ed8 <HAL_GetTick>
 801f192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f194:	e008      	b.n	801f1a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801f196:	f7fa fe9f 	bl	8019ed8 <HAL_GetTick>
 801f19a:	4602      	mov	r2, r0
 801f19c:	68bb      	ldr	r3, [r7, #8]
 801f19e:	1ad3      	subs	r3, r2, r3
 801f1a0:	2b02      	cmp	r3, #2
 801f1a2:	d901      	bls.n	801f1a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f1a4:	2303      	movs	r3, #3
 801f1a6:	e006      	b.n	801f1b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801f1a8:	4b05      	ldr	r3, [pc, #20]	@ (801f1c0 <RCCEx_PLL2_Config+0x15c>)
 801f1aa:	681b      	ldr	r3, [r3, #0]
 801f1ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d0f0      	beq.n	801f196 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801f1b4:	7bfb      	ldrb	r3, [r7, #15]
}
 801f1b6:	4618      	mov	r0, r3
 801f1b8:	3710      	adds	r7, #16
 801f1ba:	46bd      	mov	sp, r7
 801f1bc:	bd80      	pop	{r7, pc}
 801f1be:	bf00      	nop
 801f1c0:	58024400 	.word	0x58024400
 801f1c4:	ffff0007 	.word	0xffff0007

0801f1c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801f1c8:	b580      	push	{r7, lr}
 801f1ca:	b084      	sub	sp, #16
 801f1cc:	af00      	add	r7, sp, #0
 801f1ce:	6078      	str	r0, [r7, #4]
 801f1d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801f1d2:	2300      	movs	r3, #0
 801f1d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801f1d6:	4b53      	ldr	r3, [pc, #332]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f1d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1da:	f003 0303 	and.w	r3, r3, #3
 801f1de:	2b03      	cmp	r3, #3
 801f1e0:	d101      	bne.n	801f1e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801f1e2:	2301      	movs	r3, #1
 801f1e4:	e099      	b.n	801f31a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801f1e6:	4b4f      	ldr	r3, [pc, #316]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f1e8:	681b      	ldr	r3, [r3, #0]
 801f1ea:	4a4e      	ldr	r2, [pc, #312]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f1ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801f1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f1f2:	f7fa fe71 	bl	8019ed8 <HAL_GetTick>
 801f1f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f1f8:	e008      	b.n	801f20c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f1fa:	f7fa fe6d 	bl	8019ed8 <HAL_GetTick>
 801f1fe:	4602      	mov	r2, r0
 801f200:	68bb      	ldr	r3, [r7, #8]
 801f202:	1ad3      	subs	r3, r2, r3
 801f204:	2b02      	cmp	r3, #2
 801f206:	d901      	bls.n	801f20c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801f208:	2303      	movs	r3, #3
 801f20a:	e086      	b.n	801f31a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801f20c:	4b45      	ldr	r3, [pc, #276]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f214:	2b00      	cmp	r3, #0
 801f216:	d1f0      	bne.n	801f1fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801f218:	4b42      	ldr	r3, [pc, #264]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f21a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f21c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801f220:	687b      	ldr	r3, [r7, #4]
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	051b      	lsls	r3, r3, #20
 801f226:	493f      	ldr	r1, [pc, #252]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f228:	4313      	orrs	r3, r2
 801f22a:	628b      	str	r3, [r1, #40]	@ 0x28
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	685b      	ldr	r3, [r3, #4]
 801f230:	3b01      	subs	r3, #1
 801f232:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801f236:	687b      	ldr	r3, [r7, #4]
 801f238:	689b      	ldr	r3, [r3, #8]
 801f23a:	3b01      	subs	r3, #1
 801f23c:	025b      	lsls	r3, r3, #9
 801f23e:	b29b      	uxth	r3, r3
 801f240:	431a      	orrs	r2, r3
 801f242:	687b      	ldr	r3, [r7, #4]
 801f244:	68db      	ldr	r3, [r3, #12]
 801f246:	3b01      	subs	r3, #1
 801f248:	041b      	lsls	r3, r3, #16
 801f24a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801f24e:	431a      	orrs	r2, r3
 801f250:	687b      	ldr	r3, [r7, #4]
 801f252:	691b      	ldr	r3, [r3, #16]
 801f254:	3b01      	subs	r3, #1
 801f256:	061b      	lsls	r3, r3, #24
 801f258:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801f25c:	4931      	ldr	r1, [pc, #196]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f25e:	4313      	orrs	r3, r2
 801f260:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801f262:	4b30      	ldr	r3, [pc, #192]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f266:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801f26a:	687b      	ldr	r3, [r7, #4]
 801f26c:	695b      	ldr	r3, [r3, #20]
 801f26e:	492d      	ldr	r1, [pc, #180]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f270:	4313      	orrs	r3, r2
 801f272:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801f274:	4b2b      	ldr	r3, [pc, #172]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f278:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801f27c:	687b      	ldr	r3, [r7, #4]
 801f27e:	699b      	ldr	r3, [r3, #24]
 801f280:	4928      	ldr	r1, [pc, #160]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f282:	4313      	orrs	r3, r2
 801f284:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801f286:	4b27      	ldr	r3, [pc, #156]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f28a:	4a26      	ldr	r2, [pc, #152]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f28c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801f290:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801f292:	4b24      	ldr	r3, [pc, #144]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f294:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801f296:	4b24      	ldr	r3, [pc, #144]	@ (801f328 <RCCEx_PLL3_Config+0x160>)
 801f298:	4013      	ands	r3, r2
 801f29a:	687a      	ldr	r2, [r7, #4]
 801f29c:	69d2      	ldr	r2, [r2, #28]
 801f29e:	00d2      	lsls	r2, r2, #3
 801f2a0:	4920      	ldr	r1, [pc, #128]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2a2:	4313      	orrs	r3, r2
 801f2a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801f2a6:	4b1f      	ldr	r3, [pc, #124]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2aa:	4a1e      	ldr	r2, [pc, #120]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801f2b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801f2b2:	683b      	ldr	r3, [r7, #0]
 801f2b4:	2b00      	cmp	r3, #0
 801f2b6:	d106      	bne.n	801f2c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801f2b8:	4b1a      	ldr	r3, [pc, #104]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2bc:	4a19      	ldr	r2, [pc, #100]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801f2c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f2c4:	e00f      	b.n	801f2e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801f2c6:	683b      	ldr	r3, [r7, #0]
 801f2c8:	2b01      	cmp	r3, #1
 801f2ca:	d106      	bne.n	801f2da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801f2cc:	4b15      	ldr	r3, [pc, #84]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2d0:	4a14      	ldr	r2, [pc, #80]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801f2d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801f2d8:	e005      	b.n	801f2e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801f2da:	4b12      	ldr	r3, [pc, #72]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2de:	4a11      	ldr	r2, [pc, #68]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801f2e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801f2e6:	4b0f      	ldr	r3, [pc, #60]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2e8:	681b      	ldr	r3, [r3, #0]
 801f2ea:	4a0e      	ldr	r2, [pc, #56]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f2ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801f2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801f2f2:	f7fa fdf1 	bl	8019ed8 <HAL_GetTick>
 801f2f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f2f8:	e008      	b.n	801f30c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801f2fa:	f7fa fded 	bl	8019ed8 <HAL_GetTick>
 801f2fe:	4602      	mov	r2, r0
 801f300:	68bb      	ldr	r3, [r7, #8]
 801f302:	1ad3      	subs	r3, r2, r3
 801f304:	2b02      	cmp	r3, #2
 801f306:	d901      	bls.n	801f30c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801f308:	2303      	movs	r3, #3
 801f30a:	e006      	b.n	801f31a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801f30c:	4b05      	ldr	r3, [pc, #20]	@ (801f324 <RCCEx_PLL3_Config+0x15c>)
 801f30e:	681b      	ldr	r3, [r3, #0]
 801f310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801f314:	2b00      	cmp	r3, #0
 801f316:	d0f0      	beq.n	801f2fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801f318:	7bfb      	ldrb	r3, [r7, #15]
}
 801f31a:	4618      	mov	r0, r3
 801f31c:	3710      	adds	r7, #16
 801f31e:	46bd      	mov	sp, r7
 801f320:	bd80      	pop	{r7, pc}
 801f322:	bf00      	nop
 801f324:	58024400 	.word	0x58024400
 801f328:	ffff0007 	.word	0xffff0007

0801f32c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801f32c:	b580      	push	{r7, lr}
 801f32e:	b084      	sub	sp, #16
 801f330:	af00      	add	r7, sp, #0
 801f332:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801f334:	687b      	ldr	r3, [r7, #4]
 801f336:	2b00      	cmp	r3, #0
 801f338:	d101      	bne.n	801f33e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801f33a:	2301      	movs	r3, #1
 801f33c:	e10f      	b.n	801f55e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	2200      	movs	r2, #0
 801f342:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801f344:	687b      	ldr	r3, [r7, #4]
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	4a87      	ldr	r2, [pc, #540]	@ (801f568 <HAL_SPI_Init+0x23c>)
 801f34a:	4293      	cmp	r3, r2
 801f34c:	d00f      	beq.n	801f36e <HAL_SPI_Init+0x42>
 801f34e:	687b      	ldr	r3, [r7, #4]
 801f350:	681b      	ldr	r3, [r3, #0]
 801f352:	4a86      	ldr	r2, [pc, #536]	@ (801f56c <HAL_SPI_Init+0x240>)
 801f354:	4293      	cmp	r3, r2
 801f356:	d00a      	beq.n	801f36e <HAL_SPI_Init+0x42>
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	4a84      	ldr	r2, [pc, #528]	@ (801f570 <HAL_SPI_Init+0x244>)
 801f35e:	4293      	cmp	r3, r2
 801f360:	d005      	beq.n	801f36e <HAL_SPI_Init+0x42>
 801f362:	687b      	ldr	r3, [r7, #4]
 801f364:	68db      	ldr	r3, [r3, #12]
 801f366:	2b0f      	cmp	r3, #15
 801f368:	d901      	bls.n	801f36e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801f36a:	2301      	movs	r3, #1
 801f36c:	e0f7      	b.n	801f55e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801f36e:	6878      	ldr	r0, [r7, #4]
 801f370:	f000 fbba 	bl	801fae8 <SPI_GetPacketSize>
 801f374:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	681b      	ldr	r3, [r3, #0]
 801f37a:	4a7b      	ldr	r2, [pc, #492]	@ (801f568 <HAL_SPI_Init+0x23c>)
 801f37c:	4293      	cmp	r3, r2
 801f37e:	d00c      	beq.n	801f39a <HAL_SPI_Init+0x6e>
 801f380:	687b      	ldr	r3, [r7, #4]
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	4a79      	ldr	r2, [pc, #484]	@ (801f56c <HAL_SPI_Init+0x240>)
 801f386:	4293      	cmp	r3, r2
 801f388:	d007      	beq.n	801f39a <HAL_SPI_Init+0x6e>
 801f38a:	687b      	ldr	r3, [r7, #4]
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	4a78      	ldr	r2, [pc, #480]	@ (801f570 <HAL_SPI_Init+0x244>)
 801f390:	4293      	cmp	r3, r2
 801f392:	d002      	beq.n	801f39a <HAL_SPI_Init+0x6e>
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	2b08      	cmp	r3, #8
 801f398:	d811      	bhi.n	801f3be <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801f39e:	4a72      	ldr	r2, [pc, #456]	@ (801f568 <HAL_SPI_Init+0x23c>)
 801f3a0:	4293      	cmp	r3, r2
 801f3a2:	d009      	beq.n	801f3b8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	4a70      	ldr	r2, [pc, #448]	@ (801f56c <HAL_SPI_Init+0x240>)
 801f3aa:	4293      	cmp	r3, r2
 801f3ac:	d004      	beq.n	801f3b8 <HAL_SPI_Init+0x8c>
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	681b      	ldr	r3, [r3, #0]
 801f3b2:	4a6f      	ldr	r2, [pc, #444]	@ (801f570 <HAL_SPI_Init+0x244>)
 801f3b4:	4293      	cmp	r3, r2
 801f3b6:	d104      	bne.n	801f3c2 <HAL_SPI_Init+0x96>
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	2b10      	cmp	r3, #16
 801f3bc:	d901      	bls.n	801f3c2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801f3be:	2301      	movs	r3, #1
 801f3c0:	e0cd      	b.n	801f55e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f3c8:	b2db      	uxtb	r3, r3
 801f3ca:	2b00      	cmp	r3, #0
 801f3cc:	d106      	bne.n	801f3dc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801f3ce:	687b      	ldr	r3, [r7, #4]
 801f3d0:	2200      	movs	r2, #0
 801f3d2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801f3d6:	6878      	ldr	r0, [r7, #4]
 801f3d8:	f7e2 ff0e 	bl	80021f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801f3dc:	687b      	ldr	r3, [r7, #4]
 801f3de:	2202      	movs	r2, #2
 801f3e0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f3e4:	687b      	ldr	r3, [r7, #4]
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	681a      	ldr	r2, [r3, #0]
 801f3ea:	687b      	ldr	r3, [r7, #4]
 801f3ec:	681b      	ldr	r3, [r3, #0]
 801f3ee:	f022 0201 	bic.w	r2, r2, #1
 801f3f2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801f3f4:	687b      	ldr	r3, [r7, #4]
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	689b      	ldr	r3, [r3, #8]
 801f3fa:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801f3fe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	699b      	ldr	r3, [r3, #24]
 801f404:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801f408:	d119      	bne.n	801f43e <HAL_SPI_Init+0x112>
 801f40a:	687b      	ldr	r3, [r7, #4]
 801f40c:	685b      	ldr	r3, [r3, #4]
 801f40e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801f412:	d103      	bne.n	801f41c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801f418:	2b00      	cmp	r3, #0
 801f41a:	d008      	beq.n	801f42e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801f420:	2b00      	cmp	r3, #0
 801f422:	d10c      	bne.n	801f43e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801f428:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f42c:	d107      	bne.n	801f43e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801f42e:	687b      	ldr	r3, [r7, #4]
 801f430:	681b      	ldr	r3, [r3, #0]
 801f432:	681a      	ldr	r2, [r3, #0]
 801f434:	687b      	ldr	r3, [r7, #4]
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801f43c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801f43e:	687b      	ldr	r3, [r7, #4]
 801f440:	685b      	ldr	r3, [r3, #4]
 801f442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f446:	2b00      	cmp	r3, #0
 801f448:	d00f      	beq.n	801f46a <HAL_SPI_Init+0x13e>
 801f44a:	687b      	ldr	r3, [r7, #4]
 801f44c:	68db      	ldr	r3, [r3, #12]
 801f44e:	2b06      	cmp	r3, #6
 801f450:	d90b      	bls.n	801f46a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801f452:	687b      	ldr	r3, [r7, #4]
 801f454:	681b      	ldr	r3, [r3, #0]
 801f456:	681b      	ldr	r3, [r3, #0]
 801f458:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f460:	687b      	ldr	r3, [r7, #4]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	430a      	orrs	r2, r1
 801f466:	601a      	str	r2, [r3, #0]
 801f468:	e007      	b.n	801f47a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801f46a:	687b      	ldr	r3, [r7, #4]
 801f46c:	681b      	ldr	r3, [r3, #0]
 801f46e:	681a      	ldr	r2, [r3, #0]
 801f470:	687b      	ldr	r3, [r7, #4]
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801f478:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	69da      	ldr	r2, [r3, #28]
 801f47e:	687b      	ldr	r3, [r7, #4]
 801f480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f482:	431a      	orrs	r2, r3
 801f484:	68bb      	ldr	r3, [r7, #8]
 801f486:	431a      	orrs	r2, r3
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f48c:	ea42 0103 	orr.w	r1, r2, r3
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	68da      	ldr	r2, [r3, #12]
 801f494:	687b      	ldr	r3, [r7, #4]
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	430a      	orrs	r2, r1
 801f49a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f4a4:	431a      	orrs	r2, r3
 801f4a6:	687b      	ldr	r3, [r7, #4]
 801f4a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4aa:	431a      	orrs	r2, r3
 801f4ac:	687b      	ldr	r3, [r7, #4]
 801f4ae:	699b      	ldr	r3, [r3, #24]
 801f4b0:	431a      	orrs	r2, r3
 801f4b2:	687b      	ldr	r3, [r7, #4]
 801f4b4:	691b      	ldr	r3, [r3, #16]
 801f4b6:	431a      	orrs	r2, r3
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	695b      	ldr	r3, [r3, #20]
 801f4bc:	431a      	orrs	r2, r3
 801f4be:	687b      	ldr	r3, [r7, #4]
 801f4c0:	6a1b      	ldr	r3, [r3, #32]
 801f4c2:	431a      	orrs	r2, r3
 801f4c4:	687b      	ldr	r3, [r7, #4]
 801f4c6:	685b      	ldr	r3, [r3, #4]
 801f4c8:	431a      	orrs	r2, r3
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801f4ce:	431a      	orrs	r2, r3
 801f4d0:	687b      	ldr	r3, [r7, #4]
 801f4d2:	689b      	ldr	r3, [r3, #8]
 801f4d4:	431a      	orrs	r2, r3
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801f4da:	ea42 0103 	orr.w	r1, r2, r3
 801f4de:	687b      	ldr	r3, [r7, #4]
 801f4e0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801f4e2:	687b      	ldr	r3, [r7, #4]
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	430a      	orrs	r2, r1
 801f4e8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801f4ea:	687b      	ldr	r3, [r7, #4]
 801f4ec:	685b      	ldr	r3, [r3, #4]
 801f4ee:	2b00      	cmp	r3, #0
 801f4f0:	d113      	bne.n	801f51a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801f4f2:	687b      	ldr	r3, [r7, #4]
 801f4f4:	681b      	ldr	r3, [r3, #0]
 801f4f6:	689b      	ldr	r3, [r3, #8]
 801f4f8:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f504:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801f506:	687b      	ldr	r3, [r7, #4]
 801f508:	681b      	ldr	r3, [r3, #0]
 801f50a:	689b      	ldr	r3, [r3, #8]
 801f50c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801f510:	687b      	ldr	r3, [r7, #4]
 801f512:	681b      	ldr	r3, [r3, #0]
 801f514:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801f518:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801f51a:	687b      	ldr	r3, [r7, #4]
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801f520:	687b      	ldr	r3, [r7, #4]
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	f022 0201 	bic.w	r2, r2, #1
 801f528:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801f52a:	687b      	ldr	r3, [r7, #4]
 801f52c:	685b      	ldr	r3, [r3, #4]
 801f52e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801f532:	2b00      	cmp	r3, #0
 801f534:	d00a      	beq.n	801f54c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	68db      	ldr	r3, [r3, #12]
 801f53c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801f540:	687b      	ldr	r3, [r7, #4]
 801f542:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801f544:	687b      	ldr	r3, [r7, #4]
 801f546:	681b      	ldr	r3, [r3, #0]
 801f548:	430a      	orrs	r2, r1
 801f54a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801f54c:	687b      	ldr	r3, [r7, #4]
 801f54e:	2200      	movs	r2, #0
 801f550:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801f554:	687b      	ldr	r3, [r7, #4]
 801f556:	2201      	movs	r2, #1
 801f558:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801f55c:	2300      	movs	r3, #0
}
 801f55e:	4618      	mov	r0, r3
 801f560:	3710      	adds	r7, #16
 801f562:	46bd      	mov	sp, r7
 801f564:	bd80      	pop	{r7, pc}
 801f566:	bf00      	nop
 801f568:	40013000 	.word	0x40013000
 801f56c:	40003800 	.word	0x40003800
 801f570:	40003c00 	.word	0x40003c00

0801f574 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801f574:	b580      	push	{r7, lr}
 801f576:	b08a      	sub	sp, #40	@ 0x28
 801f578:	af00      	add	r7, sp, #0
 801f57a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801f57c:	687b      	ldr	r3, [r7, #4]
 801f57e:	681b      	ldr	r3, [r3, #0]
 801f580:	691b      	ldr	r3, [r3, #16]
 801f582:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801f584:	687b      	ldr	r3, [r7, #4]
 801f586:	681b      	ldr	r3, [r3, #0]
 801f588:	695b      	ldr	r3, [r3, #20]
 801f58a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801f58c:	6a3a      	ldr	r2, [r7, #32]
 801f58e:	69fb      	ldr	r3, [r7, #28]
 801f590:	4013      	ands	r3, r2
 801f592:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801f594:	687b      	ldr	r3, [r7, #4]
 801f596:	681b      	ldr	r3, [r3, #0]
 801f598:	689b      	ldr	r3, [r3, #8]
 801f59a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801f59c:	2300      	movs	r3, #0
 801f59e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801f5a0:	687b      	ldr	r3, [r7, #4]
 801f5a2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f5a6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801f5a8:	687b      	ldr	r3, [r7, #4]
 801f5aa:	681b      	ldr	r3, [r3, #0]
 801f5ac:	3330      	adds	r3, #48	@ 0x30
 801f5ae:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801f5b0:	69fb      	ldr	r3, [r7, #28]
 801f5b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	d010      	beq.n	801f5dc <HAL_SPI_IRQHandler+0x68>
 801f5ba:	6a3b      	ldr	r3, [r7, #32]
 801f5bc:	f003 0308 	and.w	r3, r3, #8
 801f5c0:	2b00      	cmp	r3, #0
 801f5c2:	d00b      	beq.n	801f5dc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f5c4:	687b      	ldr	r3, [r7, #4]
 801f5c6:	681b      	ldr	r3, [r3, #0]
 801f5c8:	699a      	ldr	r2, [r3, #24]
 801f5ca:	687b      	ldr	r3, [r7, #4]
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f5d2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801f5d4:	6878      	ldr	r0, [r7, #4]
 801f5d6:	f000 f9c3 	bl	801f960 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801f5da:	e192      	b.n	801f902 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f5dc:	69bb      	ldr	r3, [r7, #24]
 801f5de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	d113      	bne.n	801f60e <HAL_SPI_IRQHandler+0x9a>
 801f5e6:	69bb      	ldr	r3, [r7, #24]
 801f5e8:	f003 0320 	and.w	r3, r3, #32
 801f5ec:	2b00      	cmp	r3, #0
 801f5ee:	d10e      	bne.n	801f60e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801f5f0:	69bb      	ldr	r3, [r7, #24]
 801f5f2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d009      	beq.n	801f60e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f5fe:	6878      	ldr	r0, [r7, #4]
 801f600:	4798      	blx	r3
    hspi->RxISR(hspi);
 801f602:	687b      	ldr	r3, [r7, #4]
 801f604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f606:	6878      	ldr	r0, [r7, #4]
 801f608:	4798      	blx	r3
    handled = 1UL;
 801f60a:	2301      	movs	r3, #1
 801f60c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f60e:	69bb      	ldr	r3, [r7, #24]
 801f610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f614:	2b00      	cmp	r3, #0
 801f616:	d10f      	bne.n	801f638 <HAL_SPI_IRQHandler+0xc4>
 801f618:	69bb      	ldr	r3, [r7, #24]
 801f61a:	f003 0301 	and.w	r3, r3, #1
 801f61e:	2b00      	cmp	r3, #0
 801f620:	d00a      	beq.n	801f638 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f622:	69bb      	ldr	r3, [r7, #24]
 801f624:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d105      	bne.n	801f638 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801f62c:	687b      	ldr	r3, [r7, #4]
 801f62e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801f630:	6878      	ldr	r0, [r7, #4]
 801f632:	4798      	blx	r3
    handled = 1UL;
 801f634:	2301      	movs	r3, #1
 801f636:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f638:	69bb      	ldr	r3, [r7, #24]
 801f63a:	f003 0320 	and.w	r3, r3, #32
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d10f      	bne.n	801f662 <HAL_SPI_IRQHandler+0xee>
 801f642:	69bb      	ldr	r3, [r7, #24]
 801f644:	f003 0302 	and.w	r3, r3, #2
 801f648:	2b00      	cmp	r3, #0
 801f64a:	d00a      	beq.n	801f662 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801f64c:	69bb      	ldr	r3, [r7, #24]
 801f64e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801f652:	2b00      	cmp	r3, #0
 801f654:	d105      	bne.n	801f662 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801f656:	687b      	ldr	r3, [r7, #4]
 801f658:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801f65a:	6878      	ldr	r0, [r7, #4]
 801f65c:	4798      	blx	r3
    handled = 1UL;
 801f65e:	2301      	movs	r3, #1
 801f660:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801f662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801f664:	2b00      	cmp	r3, #0
 801f666:	f040 8147 	bne.w	801f8f8 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801f66a:	69bb      	ldr	r3, [r7, #24]
 801f66c:	f003 0308 	and.w	r3, r3, #8
 801f670:	2b00      	cmp	r3, #0
 801f672:	f000 808b 	beq.w	801f78c <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f676:	687b      	ldr	r3, [r7, #4]
 801f678:	681b      	ldr	r3, [r3, #0]
 801f67a:	699a      	ldr	r2, [r3, #24]
 801f67c:	687b      	ldr	r3, [r7, #4]
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	f042 0208 	orr.w	r2, r2, #8
 801f684:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f686:	687b      	ldr	r3, [r7, #4]
 801f688:	681b      	ldr	r3, [r3, #0]
 801f68a:	699a      	ldr	r2, [r3, #24]
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	f042 0210 	orr.w	r2, r2, #16
 801f694:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801f696:	687b      	ldr	r3, [r7, #4]
 801f698:	681b      	ldr	r3, [r3, #0]
 801f69a:	699a      	ldr	r2, [r3, #24]
 801f69c:	687b      	ldr	r3, [r7, #4]
 801f69e:	681b      	ldr	r3, [r3, #0]
 801f6a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801f6a4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801f6a6:	687b      	ldr	r3, [r7, #4]
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	691a      	ldr	r2, [r3, #16]
 801f6ac:	687b      	ldr	r3, [r7, #4]
 801f6ae:	681b      	ldr	r3, [r3, #0]
 801f6b0:	f022 0208 	bic.w	r2, r2, #8
 801f6b4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	681b      	ldr	r3, [r3, #0]
 801f6ba:	689b      	ldr	r3, [r3, #8]
 801f6bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	d13d      	bne.n	801f740 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801f6c4:	e036      	b.n	801f734 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801f6c6:	687b      	ldr	r3, [r7, #4]
 801f6c8:	68db      	ldr	r3, [r3, #12]
 801f6ca:	2b0f      	cmp	r3, #15
 801f6cc:	d90b      	bls.n	801f6e6 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801f6ce:	687b      	ldr	r3, [r7, #4]
 801f6d0:	681a      	ldr	r2, [r3, #0]
 801f6d2:	687b      	ldr	r3, [r7, #4]
 801f6d4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f6d6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801f6d8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f6de:	1d1a      	adds	r2, r3, #4
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	665a      	str	r2, [r3, #100]	@ 0x64
 801f6e4:	e01d      	b.n	801f722 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801f6e6:	687b      	ldr	r3, [r7, #4]
 801f6e8:	68db      	ldr	r3, [r3, #12]
 801f6ea:	2b07      	cmp	r3, #7
 801f6ec:	d90b      	bls.n	801f706 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801f6ee:	687b      	ldr	r3, [r7, #4]
 801f6f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f6f2:	68fa      	ldr	r2, [r7, #12]
 801f6f4:	8812      	ldrh	r2, [r2, #0]
 801f6f6:	b292      	uxth	r2, r2
 801f6f8:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801f6fa:	687b      	ldr	r3, [r7, #4]
 801f6fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f6fe:	1c9a      	adds	r2, r3, #2
 801f700:	687b      	ldr	r3, [r7, #4]
 801f702:	665a      	str	r2, [r3, #100]	@ 0x64
 801f704:	e00d      	b.n	801f722 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801f706:	687b      	ldr	r3, [r7, #4]
 801f708:	681b      	ldr	r3, [r3, #0]
 801f70a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801f70e:	687b      	ldr	r3, [r7, #4]
 801f710:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f712:	7812      	ldrb	r2, [r2, #0]
 801f714:	b2d2      	uxtb	r2, r2
 801f716:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801f718:	687b      	ldr	r3, [r7, #4]
 801f71a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801f71c:	1c5a      	adds	r2, r3, #1
 801f71e:	687b      	ldr	r3, [r7, #4]
 801f720:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801f722:	687b      	ldr	r3, [r7, #4]
 801f724:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f728:	b29b      	uxth	r3, r3
 801f72a:	3b01      	subs	r3, #1
 801f72c:	b29a      	uxth	r2, r3
 801f72e:	687b      	ldr	r3, [r7, #4]
 801f730:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801f73a:	b29b      	uxth	r3, r3
 801f73c:	2b00      	cmp	r3, #0
 801f73e:	d1c2      	bne.n	801f6c6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801f740:	6878      	ldr	r0, [r7, #4]
 801f742:	f000 f931 	bl	801f9a8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801f746:	687b      	ldr	r3, [r7, #4]
 801f748:	2201      	movs	r2, #1
 801f74a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f754:	2b00      	cmp	r3, #0
 801f756:	d003      	beq.n	801f760 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801f758:	6878      	ldr	r0, [r7, #4]
 801f75a:	f000 f8f7 	bl	801f94c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801f75e:	e0d0      	b.n	801f902 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801f760:	7cfb      	ldrb	r3, [r7, #19]
 801f762:	2b05      	cmp	r3, #5
 801f764:	d103      	bne.n	801f76e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801f766:	6878      	ldr	r0, [r7, #4]
 801f768:	f000 f8e6 	bl	801f938 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801f76c:	e0c6      	b.n	801f8fc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801f76e:	7cfb      	ldrb	r3, [r7, #19]
 801f770:	2b04      	cmp	r3, #4
 801f772:	d103      	bne.n	801f77c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801f774:	6878      	ldr	r0, [r7, #4]
 801f776:	f000 f8d5 	bl	801f924 <HAL_SPI_RxCpltCallback>
    return;
 801f77a:	e0bf      	b.n	801f8fc <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801f77c:	7cfb      	ldrb	r3, [r7, #19]
 801f77e:	2b03      	cmp	r3, #3
 801f780:	f040 80bc 	bne.w	801f8fc <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801f784:	6878      	ldr	r0, [r7, #4]
 801f786:	f000 f8c3 	bl	801f910 <HAL_SPI_TxCpltCallback>
    return;
 801f78a:	e0b7      	b.n	801f8fc <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801f78c:	69bb      	ldr	r3, [r7, #24]
 801f78e:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801f792:	2b00      	cmp	r3, #0
 801f794:	f000 80b5 	beq.w	801f902 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801f798:	69bb      	ldr	r3, [r7, #24]
 801f79a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d00f      	beq.n	801f7c2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f7a2:	687b      	ldr	r3, [r7, #4]
 801f7a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f7a8:	f043 0204 	orr.w	r2, r3, #4
 801f7ac:	687b      	ldr	r3, [r7, #4]
 801f7ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f7b2:	687b      	ldr	r3, [r7, #4]
 801f7b4:	681b      	ldr	r3, [r3, #0]
 801f7b6:	699a      	ldr	r2, [r3, #24]
 801f7b8:	687b      	ldr	r3, [r7, #4]
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f7c0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801f7c2:	69bb      	ldr	r3, [r7, #24]
 801f7c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d00f      	beq.n	801f7ec <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f7d2:	f043 0201 	orr.w	r2, r3, #1
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	681b      	ldr	r3, [r3, #0]
 801f7e0:	699a      	ldr	r2, [r3, #24]
 801f7e2:	687b      	ldr	r3, [r7, #4]
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f7ea:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801f7ec:	69bb      	ldr	r3, [r7, #24]
 801f7ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d00f      	beq.n	801f816 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f7fc:	f043 0208 	orr.w	r2, r3, #8
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	681b      	ldr	r3, [r3, #0]
 801f80a:	699a      	ldr	r2, [r3, #24]
 801f80c:	687b      	ldr	r3, [r7, #4]
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f814:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801f816:	69bb      	ldr	r3, [r7, #24]
 801f818:	f003 0320 	and.w	r3, r3, #32
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	d00f      	beq.n	801f840 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f820:	687b      	ldr	r3, [r7, #4]
 801f822:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f826:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f82a:	687b      	ldr	r3, [r7, #4]
 801f82c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f830:	687b      	ldr	r3, [r7, #4]
 801f832:	681b      	ldr	r3, [r3, #0]
 801f834:	699a      	ldr	r2, [r3, #24]
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	681b      	ldr	r3, [r3, #0]
 801f83a:	f042 0220 	orr.w	r2, r2, #32
 801f83e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801f840:	687b      	ldr	r3, [r7, #4]
 801f842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f846:	2b00      	cmp	r3, #0
 801f848:	d05a      	beq.n	801f900 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801f84a:	687b      	ldr	r3, [r7, #4]
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	681a      	ldr	r2, [r3, #0]
 801f850:	687b      	ldr	r3, [r7, #4]
 801f852:	681b      	ldr	r3, [r3, #0]
 801f854:	f022 0201 	bic.w	r2, r2, #1
 801f858:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	6919      	ldr	r1, [r3, #16]
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	681a      	ldr	r2, [r3, #0]
 801f864:	4b28      	ldr	r3, [pc, #160]	@ (801f908 <HAL_SPI_IRQHandler+0x394>)
 801f866:	400b      	ands	r3, r1
 801f868:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801f86a:	697b      	ldr	r3, [r7, #20]
 801f86c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801f870:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801f874:	d138      	bne.n	801f8e8 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f876:	687b      	ldr	r3, [r7, #4]
 801f878:	681b      	ldr	r3, [r3, #0]
 801f87a:	689a      	ldr	r2, [r3, #8]
 801f87c:	687b      	ldr	r3, [r7, #4]
 801f87e:	681b      	ldr	r3, [r3, #0]
 801f880:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f884:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801f886:	687b      	ldr	r3, [r7, #4]
 801f888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f88a:	2b00      	cmp	r3, #0
 801f88c:	d013      	beq.n	801f8b6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801f88e:	687b      	ldr	r3, [r7, #4]
 801f890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f892:	4a1e      	ldr	r2, [pc, #120]	@ (801f90c <HAL_SPI_IRQHandler+0x398>)
 801f894:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801f89a:	4618      	mov	r0, r3
 801f89c:	f7fb f850 	bl	801a940 <HAL_DMA_Abort_IT>
 801f8a0:	4603      	mov	r3, r0
 801f8a2:	2b00      	cmp	r3, #0
 801f8a4:	d007      	beq.n	801f8b6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f8ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801f8b6:	687b      	ldr	r3, [r7, #4]
 801f8b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f8ba:	2b00      	cmp	r3, #0
 801f8bc:	d020      	beq.n	801f900 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801f8be:	687b      	ldr	r3, [r7, #4]
 801f8c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f8c2:	4a12      	ldr	r2, [pc, #72]	@ (801f90c <HAL_SPI_IRQHandler+0x398>)
 801f8c4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801f8ca:	4618      	mov	r0, r3
 801f8cc:	f7fb f838 	bl	801a940 <HAL_DMA_Abort_IT>
 801f8d0:	4603      	mov	r3, r0
 801f8d2:	2b00      	cmp	r3, #0
 801f8d4:	d014      	beq.n	801f900 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f8dc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801f8e6:	e00b      	b.n	801f900 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801f8e8:	687b      	ldr	r3, [r7, #4]
 801f8ea:	2201      	movs	r2, #1
 801f8ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801f8f0:	6878      	ldr	r0, [r7, #4]
 801f8f2:	f000 f82b 	bl	801f94c <HAL_SPI_ErrorCallback>
    return;
 801f8f6:	e003      	b.n	801f900 <HAL_SPI_IRQHandler+0x38c>
    return;
 801f8f8:	bf00      	nop
 801f8fa:	e002      	b.n	801f902 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f8fc:	bf00      	nop
 801f8fe:	e000      	b.n	801f902 <HAL_SPI_IRQHandler+0x38e>
    return;
 801f900:	bf00      	nop
  }
}
 801f902:	3728      	adds	r7, #40	@ 0x28
 801f904:	46bd      	mov	sp, r7
 801f906:	bd80      	pop	{r7, pc}
 801f908:	fffffc94 	.word	0xfffffc94
 801f90c:	0801f975 	.word	0x0801f975

0801f910 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f910:	b480      	push	{r7}
 801f912:	b083      	sub	sp, #12
 801f914:	af00      	add	r7, sp, #0
 801f916:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801f918:	bf00      	nop
 801f91a:	370c      	adds	r7, #12
 801f91c:	46bd      	mov	sp, r7
 801f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f922:	4770      	bx	lr

0801f924 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f924:	b480      	push	{r7}
 801f926:	b083      	sub	sp, #12
 801f928:	af00      	add	r7, sp, #0
 801f92a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801f92c:	bf00      	nop
 801f92e:	370c      	adds	r7, #12
 801f930:	46bd      	mov	sp, r7
 801f932:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f936:	4770      	bx	lr

0801f938 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f938:	b480      	push	{r7}
 801f93a:	b083      	sub	sp, #12
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801f940:	bf00      	nop
 801f942:	370c      	adds	r7, #12
 801f944:	46bd      	mov	sp, r7
 801f946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f94a:	4770      	bx	lr

0801f94c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f94c:	b480      	push	{r7}
 801f94e:	b083      	sub	sp, #12
 801f950:	af00      	add	r7, sp, #0
 801f952:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801f954:	bf00      	nop
 801f956:	370c      	adds	r7, #12
 801f958:	46bd      	mov	sp, r7
 801f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f95e:	4770      	bx	lr

0801f960 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801f960:	b480      	push	{r7}
 801f962:	b083      	sub	sp, #12
 801f964:	af00      	add	r7, sp, #0
 801f966:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801f968:	bf00      	nop
 801f96a:	370c      	adds	r7, #12
 801f96c:	46bd      	mov	sp, r7
 801f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f972:	4770      	bx	lr

0801f974 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f974:	b580      	push	{r7, lr}
 801f976:	b084      	sub	sp, #16
 801f978:	af00      	add	r7, sp, #0
 801f97a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801f97c:	687b      	ldr	r3, [r7, #4]
 801f97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f980:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801f982:	68fb      	ldr	r3, [r7, #12]
 801f984:	2200      	movs	r2, #0
 801f986:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801f98a:	68fb      	ldr	r3, [r7, #12]
 801f98c:	2200      	movs	r2, #0
 801f98e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801f992:	68fb      	ldr	r3, [r7, #12]
 801f994:	2201      	movs	r2, #1
 801f996:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801f99a:	68f8      	ldr	r0, [r7, #12]
 801f99c:	f7ff ffd6 	bl	801f94c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801f9a0:	bf00      	nop
 801f9a2:	3710      	adds	r7, #16
 801f9a4:	46bd      	mov	sp, r7
 801f9a6:	bd80      	pop	{r7, pc}

0801f9a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801f9a8:	b480      	push	{r7}
 801f9aa:	b085      	sub	sp, #20
 801f9ac:	af00      	add	r7, sp, #0
 801f9ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	695b      	ldr	r3, [r3, #20]
 801f9b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801f9b8:	687b      	ldr	r3, [r7, #4]
 801f9ba:	681b      	ldr	r3, [r3, #0]
 801f9bc:	699a      	ldr	r2, [r3, #24]
 801f9be:	687b      	ldr	r3, [r7, #4]
 801f9c0:	681b      	ldr	r3, [r3, #0]
 801f9c2:	f042 0208 	orr.w	r2, r2, #8
 801f9c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	699a      	ldr	r2, [r3, #24]
 801f9ce:	687b      	ldr	r3, [r7, #4]
 801f9d0:	681b      	ldr	r3, [r3, #0]
 801f9d2:	f042 0210 	orr.w	r2, r2, #16
 801f9d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	681b      	ldr	r3, [r3, #0]
 801f9dc:	681a      	ldr	r2, [r3, #0]
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	f022 0201 	bic.w	r2, r2, #1
 801f9e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801f9e8:	687b      	ldr	r3, [r7, #4]
 801f9ea:	681b      	ldr	r3, [r3, #0]
 801f9ec:	6919      	ldr	r1, [r3, #16]
 801f9ee:	687b      	ldr	r3, [r7, #4]
 801f9f0:	681a      	ldr	r2, [r3, #0]
 801f9f2:	4b3c      	ldr	r3, [pc, #240]	@ (801fae4 <SPI_CloseTransfer+0x13c>)
 801f9f4:	400b      	ands	r3, r1
 801f9f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	689a      	ldr	r2, [r3, #8]
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	681b      	ldr	r3, [r3, #0]
 801fa02:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801fa06:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801fa08:	687b      	ldr	r3, [r7, #4]
 801fa0a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fa0e:	b2db      	uxtb	r3, r3
 801fa10:	2b04      	cmp	r3, #4
 801fa12:	d014      	beq.n	801fa3e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	f003 0320 	and.w	r3, r3, #32
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d00f      	beq.n	801fa3e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801fa1e:	687b      	ldr	r3, [r7, #4]
 801fa20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa24:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801fa28:	687b      	ldr	r3, [r7, #4]
 801fa2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	681b      	ldr	r3, [r3, #0]
 801fa32:	699a      	ldr	r2, [r3, #24]
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	681b      	ldr	r3, [r3, #0]
 801fa38:	f042 0220 	orr.w	r2, r2, #32
 801fa3c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801fa44:	b2db      	uxtb	r3, r3
 801fa46:	2b03      	cmp	r3, #3
 801fa48:	d014      	beq.n	801fa74 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801fa4a:	68fb      	ldr	r3, [r7, #12]
 801fa4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fa50:	2b00      	cmp	r3, #0
 801fa52:	d00f      	beq.n	801fa74 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801fa54:	687b      	ldr	r3, [r7, #4]
 801fa56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa5a:	f043 0204 	orr.w	r2, r3, #4
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801fa64:	687b      	ldr	r3, [r7, #4]
 801fa66:	681b      	ldr	r3, [r3, #0]
 801fa68:	699a      	ldr	r2, [r3, #24]
 801fa6a:	687b      	ldr	r3, [r7, #4]
 801fa6c:	681b      	ldr	r3, [r3, #0]
 801fa6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801fa72:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801fa74:	68fb      	ldr	r3, [r7, #12]
 801fa76:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801fa7a:	2b00      	cmp	r3, #0
 801fa7c:	d00f      	beq.n	801fa9e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801fa7e:	687b      	ldr	r3, [r7, #4]
 801fa80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801fa84:	f043 0201 	orr.w	r2, r3, #1
 801fa88:	687b      	ldr	r3, [r7, #4]
 801fa8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	699a      	ldr	r2, [r3, #24]
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	681b      	ldr	r3, [r3, #0]
 801fa98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801fa9c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801fa9e:	68fb      	ldr	r3, [r7, #12]
 801faa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801faa4:	2b00      	cmp	r3, #0
 801faa6:	d00f      	beq.n	801fac8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801faae:	f043 0208 	orr.w	r2, r3, #8
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801fab8:	687b      	ldr	r3, [r7, #4]
 801faba:	681b      	ldr	r3, [r3, #0]
 801fabc:	699a      	ldr	r2, [r3, #24]
 801fabe:	687b      	ldr	r3, [r7, #4]
 801fac0:	681b      	ldr	r3, [r3, #0]
 801fac2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801fac6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801fac8:	687b      	ldr	r3, [r7, #4]
 801faca:	2200      	movs	r2, #0
 801facc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801fad0:	687b      	ldr	r3, [r7, #4]
 801fad2:	2200      	movs	r2, #0
 801fad4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801fad8:	bf00      	nop
 801fada:	3714      	adds	r7, #20
 801fadc:	46bd      	mov	sp, r7
 801fade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fae2:	4770      	bx	lr
 801fae4:	fffffc90 	.word	0xfffffc90

0801fae8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801fae8:	b480      	push	{r7}
 801faea:	b085      	sub	sp, #20
 801faec:	af00      	add	r7, sp, #0
 801faee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801faf0:	687b      	ldr	r3, [r7, #4]
 801faf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801faf4:	095b      	lsrs	r3, r3, #5
 801faf6:	3301      	adds	r3, #1
 801faf8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801fafa:	687b      	ldr	r3, [r7, #4]
 801fafc:	68db      	ldr	r3, [r3, #12]
 801fafe:	3301      	adds	r3, #1
 801fb00:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801fb02:	68bb      	ldr	r3, [r7, #8]
 801fb04:	3307      	adds	r3, #7
 801fb06:	08db      	lsrs	r3, r3, #3
 801fb08:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801fb0a:	68bb      	ldr	r3, [r7, #8]
 801fb0c:	68fa      	ldr	r2, [r7, #12]
 801fb0e:	fb02 f303 	mul.w	r3, r2, r3
}
 801fb12:	4618      	mov	r0, r3
 801fb14:	3714      	adds	r7, #20
 801fb16:	46bd      	mov	sp, r7
 801fb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb1c:	4770      	bx	lr

0801fb1e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801fb1e:	b580      	push	{r7, lr}
 801fb20:	b082      	sub	sp, #8
 801fb22:	af00      	add	r7, sp, #0
 801fb24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fb26:	687b      	ldr	r3, [r7, #4]
 801fb28:	2b00      	cmp	r3, #0
 801fb2a:	d101      	bne.n	801fb30 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801fb2c:	2301      	movs	r3, #1
 801fb2e:	e049      	b.n	801fbc4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fb30:	687b      	ldr	r3, [r7, #4]
 801fb32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801fb36:	b2db      	uxtb	r3, r3
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d106      	bne.n	801fb4a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	2200      	movs	r2, #0
 801fb40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801fb44:	6878      	ldr	r0, [r7, #4]
 801fb46:	f7e2 fd23 	bl	8002590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	2202      	movs	r2, #2
 801fb4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	681a      	ldr	r2, [r3, #0]
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	3304      	adds	r3, #4
 801fb5a:	4619      	mov	r1, r3
 801fb5c:	4610      	mov	r0, r2
 801fb5e:	f000 fb1b 	bl	8020198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fb62:	687b      	ldr	r3, [r7, #4]
 801fb64:	2201      	movs	r2, #1
 801fb66:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	2201      	movs	r2, #1
 801fb6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801fb72:	687b      	ldr	r3, [r7, #4]
 801fb74:	2201      	movs	r2, #1
 801fb76:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	2201      	movs	r2, #1
 801fb7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	2201      	movs	r2, #1
 801fb86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	2201      	movs	r2, #1
 801fb8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	2201      	movs	r2, #1
 801fb96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	2201      	movs	r2, #1
 801fb9e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801fba2:	687b      	ldr	r3, [r7, #4]
 801fba4:	2201      	movs	r2, #1
 801fba6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	2201      	movs	r2, #1
 801fbae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801fbb2:	687b      	ldr	r3, [r7, #4]
 801fbb4:	2201      	movs	r2, #1
 801fbb6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	2201      	movs	r2, #1
 801fbbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801fbc2:	2300      	movs	r3, #0
}
 801fbc4:	4618      	mov	r0, r3
 801fbc6:	3708      	adds	r7, #8
 801fbc8:	46bd      	mov	sp, r7
 801fbca:	bd80      	pop	{r7, pc}

0801fbcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801fbcc:	b480      	push	{r7}
 801fbce:	b085      	sub	sp, #20
 801fbd0:	af00      	add	r7, sp, #0
 801fbd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801fbd4:	687b      	ldr	r3, [r7, #4]
 801fbd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801fbda:	b2db      	uxtb	r3, r3
 801fbdc:	2b01      	cmp	r3, #1
 801fbde:	d001      	beq.n	801fbe4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801fbe0:	2301      	movs	r3, #1
 801fbe2:	e054      	b.n	801fc8e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	2202      	movs	r2, #2
 801fbe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	681b      	ldr	r3, [r3, #0]
 801fbf0:	68da      	ldr	r2, [r3, #12]
 801fbf2:	687b      	ldr	r3, [r7, #4]
 801fbf4:	681b      	ldr	r3, [r3, #0]
 801fbf6:	f042 0201 	orr.w	r2, r2, #1
 801fbfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	681b      	ldr	r3, [r3, #0]
 801fc00:	4a26      	ldr	r2, [pc, #152]	@ (801fc9c <HAL_TIM_Base_Start_IT+0xd0>)
 801fc02:	4293      	cmp	r3, r2
 801fc04:	d022      	beq.n	801fc4c <HAL_TIM_Base_Start_IT+0x80>
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	681b      	ldr	r3, [r3, #0]
 801fc0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fc0e:	d01d      	beq.n	801fc4c <HAL_TIM_Base_Start_IT+0x80>
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	681b      	ldr	r3, [r3, #0]
 801fc14:	4a22      	ldr	r2, [pc, #136]	@ (801fca0 <HAL_TIM_Base_Start_IT+0xd4>)
 801fc16:	4293      	cmp	r3, r2
 801fc18:	d018      	beq.n	801fc4c <HAL_TIM_Base_Start_IT+0x80>
 801fc1a:	687b      	ldr	r3, [r7, #4]
 801fc1c:	681b      	ldr	r3, [r3, #0]
 801fc1e:	4a21      	ldr	r2, [pc, #132]	@ (801fca4 <HAL_TIM_Base_Start_IT+0xd8>)
 801fc20:	4293      	cmp	r3, r2
 801fc22:	d013      	beq.n	801fc4c <HAL_TIM_Base_Start_IT+0x80>
 801fc24:	687b      	ldr	r3, [r7, #4]
 801fc26:	681b      	ldr	r3, [r3, #0]
 801fc28:	4a1f      	ldr	r2, [pc, #124]	@ (801fca8 <HAL_TIM_Base_Start_IT+0xdc>)
 801fc2a:	4293      	cmp	r3, r2
 801fc2c:	d00e      	beq.n	801fc4c <HAL_TIM_Base_Start_IT+0x80>
 801fc2e:	687b      	ldr	r3, [r7, #4]
 801fc30:	681b      	ldr	r3, [r3, #0]
 801fc32:	4a1e      	ldr	r2, [pc, #120]	@ (801fcac <HAL_TIM_Base_Start_IT+0xe0>)
 801fc34:	4293      	cmp	r3, r2
 801fc36:	d009      	beq.n	801fc4c <HAL_TIM_Base_Start_IT+0x80>
 801fc38:	687b      	ldr	r3, [r7, #4]
 801fc3a:	681b      	ldr	r3, [r3, #0]
 801fc3c:	4a1c      	ldr	r2, [pc, #112]	@ (801fcb0 <HAL_TIM_Base_Start_IT+0xe4>)
 801fc3e:	4293      	cmp	r3, r2
 801fc40:	d004      	beq.n	801fc4c <HAL_TIM_Base_Start_IT+0x80>
 801fc42:	687b      	ldr	r3, [r7, #4]
 801fc44:	681b      	ldr	r3, [r3, #0]
 801fc46:	4a1b      	ldr	r2, [pc, #108]	@ (801fcb4 <HAL_TIM_Base_Start_IT+0xe8>)
 801fc48:	4293      	cmp	r3, r2
 801fc4a:	d115      	bne.n	801fc78 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	689a      	ldr	r2, [r3, #8]
 801fc52:	4b19      	ldr	r3, [pc, #100]	@ (801fcb8 <HAL_TIM_Base_Start_IT+0xec>)
 801fc54:	4013      	ands	r3, r2
 801fc56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fc58:	68fb      	ldr	r3, [r7, #12]
 801fc5a:	2b06      	cmp	r3, #6
 801fc5c:	d015      	beq.n	801fc8a <HAL_TIM_Base_Start_IT+0xbe>
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fc64:	d011      	beq.n	801fc8a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801fc66:	687b      	ldr	r3, [r7, #4]
 801fc68:	681b      	ldr	r3, [r3, #0]
 801fc6a:	681a      	ldr	r2, [r3, #0]
 801fc6c:	687b      	ldr	r3, [r7, #4]
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	f042 0201 	orr.w	r2, r2, #1
 801fc74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fc76:	e008      	b.n	801fc8a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801fc78:	687b      	ldr	r3, [r7, #4]
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	681a      	ldr	r2, [r3, #0]
 801fc7e:	687b      	ldr	r3, [r7, #4]
 801fc80:	681b      	ldr	r3, [r3, #0]
 801fc82:	f042 0201 	orr.w	r2, r2, #1
 801fc86:	601a      	str	r2, [r3, #0]
 801fc88:	e000      	b.n	801fc8c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801fc8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801fc8c:	2300      	movs	r3, #0
}
 801fc8e:	4618      	mov	r0, r3
 801fc90:	3714      	adds	r7, #20
 801fc92:	46bd      	mov	sp, r7
 801fc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc98:	4770      	bx	lr
 801fc9a:	bf00      	nop
 801fc9c:	40010000 	.word	0x40010000
 801fca0:	40000400 	.word	0x40000400
 801fca4:	40000800 	.word	0x40000800
 801fca8:	40000c00 	.word	0x40000c00
 801fcac:	40010400 	.word	0x40010400
 801fcb0:	40001800 	.word	0x40001800
 801fcb4:	40014000 	.word	0x40014000
 801fcb8:	00010007 	.word	0x00010007

0801fcbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801fcbc:	b580      	push	{r7, lr}
 801fcbe:	b082      	sub	sp, #8
 801fcc0:	af00      	add	r7, sp, #0
 801fcc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	2b00      	cmp	r3, #0
 801fcc8:	d101      	bne.n	801fcce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801fcca:	2301      	movs	r3, #1
 801fccc:	e049      	b.n	801fd62 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801fcd4:	b2db      	uxtb	r3, r3
 801fcd6:	2b00      	cmp	r3, #0
 801fcd8:	d106      	bne.n	801fce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	2200      	movs	r2, #0
 801fcde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801fce2:	6878      	ldr	r0, [r7, #4]
 801fce4:	f000 f841 	bl	801fd6a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801fce8:	687b      	ldr	r3, [r7, #4]
 801fcea:	2202      	movs	r2, #2
 801fcec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801fcf0:	687b      	ldr	r3, [r7, #4]
 801fcf2:	681a      	ldr	r2, [r3, #0]
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	3304      	adds	r3, #4
 801fcf8:	4619      	mov	r1, r3
 801fcfa:	4610      	mov	r0, r2
 801fcfc:	f000 fa4c 	bl	8020198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	2201      	movs	r2, #1
 801fd04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fd08:	687b      	ldr	r3, [r7, #4]
 801fd0a:	2201      	movs	r2, #1
 801fd0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801fd10:	687b      	ldr	r3, [r7, #4]
 801fd12:	2201      	movs	r2, #1
 801fd14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801fd18:	687b      	ldr	r3, [r7, #4]
 801fd1a:	2201      	movs	r2, #1
 801fd1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	2201      	movs	r2, #1
 801fd24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	2201      	movs	r2, #1
 801fd2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	2201      	movs	r2, #1
 801fd34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	2201      	movs	r2, #1
 801fd3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	2201      	movs	r2, #1
 801fd44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801fd48:	687b      	ldr	r3, [r7, #4]
 801fd4a:	2201      	movs	r2, #1
 801fd4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801fd50:	687b      	ldr	r3, [r7, #4]
 801fd52:	2201      	movs	r2, #1
 801fd54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801fd58:	687b      	ldr	r3, [r7, #4]
 801fd5a:	2201      	movs	r2, #1
 801fd5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801fd60:	2300      	movs	r3, #0
}
 801fd62:	4618      	mov	r0, r3
 801fd64:	3708      	adds	r7, #8
 801fd66:	46bd      	mov	sp, r7
 801fd68:	bd80      	pop	{r7, pc}

0801fd6a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801fd6a:	b480      	push	{r7}
 801fd6c:	b083      	sub	sp, #12
 801fd6e:	af00      	add	r7, sp, #0
 801fd70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801fd72:	bf00      	nop
 801fd74:	370c      	adds	r7, #12
 801fd76:	46bd      	mov	sp, r7
 801fd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd7c:	4770      	bx	lr
	...

0801fd80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801fd80:	b580      	push	{r7, lr}
 801fd82:	b086      	sub	sp, #24
 801fd84:	af00      	add	r7, sp, #0
 801fd86:	60f8      	str	r0, [r7, #12]
 801fd88:	60b9      	str	r1, [r7, #8]
 801fd8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801fd8c:	2300      	movs	r3, #0
 801fd8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801fd90:	68fb      	ldr	r3, [r7, #12]
 801fd92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801fd96:	2b01      	cmp	r3, #1
 801fd98:	d101      	bne.n	801fd9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 801fd9a:	2302      	movs	r3, #2
 801fd9c:	e0ff      	b.n	801ff9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 801fd9e:	68fb      	ldr	r3, [r7, #12]
 801fda0:	2201      	movs	r2, #1
 801fda2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	2b14      	cmp	r3, #20
 801fdaa:	f200 80f0 	bhi.w	801ff8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 801fdae:	a201      	add	r2, pc, #4	@ (adr r2, 801fdb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801fdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fdb4:	0801fe09 	.word	0x0801fe09
 801fdb8:	0801ff8f 	.word	0x0801ff8f
 801fdbc:	0801ff8f 	.word	0x0801ff8f
 801fdc0:	0801ff8f 	.word	0x0801ff8f
 801fdc4:	0801fe49 	.word	0x0801fe49
 801fdc8:	0801ff8f 	.word	0x0801ff8f
 801fdcc:	0801ff8f 	.word	0x0801ff8f
 801fdd0:	0801ff8f 	.word	0x0801ff8f
 801fdd4:	0801fe8b 	.word	0x0801fe8b
 801fdd8:	0801ff8f 	.word	0x0801ff8f
 801fddc:	0801ff8f 	.word	0x0801ff8f
 801fde0:	0801ff8f 	.word	0x0801ff8f
 801fde4:	0801fecb 	.word	0x0801fecb
 801fde8:	0801ff8f 	.word	0x0801ff8f
 801fdec:	0801ff8f 	.word	0x0801ff8f
 801fdf0:	0801ff8f 	.word	0x0801ff8f
 801fdf4:	0801ff0d 	.word	0x0801ff0d
 801fdf8:	0801ff8f 	.word	0x0801ff8f
 801fdfc:	0801ff8f 	.word	0x0801ff8f
 801fe00:	0801ff8f 	.word	0x0801ff8f
 801fe04:	0801ff4d 	.word	0x0801ff4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801fe08:	68fb      	ldr	r3, [r7, #12]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	68b9      	ldr	r1, [r7, #8]
 801fe0e:	4618      	mov	r0, r3
 801fe10:	f000 fa68 	bl	80202e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801fe14:	68fb      	ldr	r3, [r7, #12]
 801fe16:	681b      	ldr	r3, [r3, #0]
 801fe18:	699a      	ldr	r2, [r3, #24]
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	681b      	ldr	r3, [r3, #0]
 801fe1e:	f042 0208 	orr.w	r2, r2, #8
 801fe22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	699a      	ldr	r2, [r3, #24]
 801fe2a:	68fb      	ldr	r3, [r7, #12]
 801fe2c:	681b      	ldr	r3, [r3, #0]
 801fe2e:	f022 0204 	bic.w	r2, r2, #4
 801fe32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801fe34:	68fb      	ldr	r3, [r7, #12]
 801fe36:	681b      	ldr	r3, [r3, #0]
 801fe38:	6999      	ldr	r1, [r3, #24]
 801fe3a:	68bb      	ldr	r3, [r7, #8]
 801fe3c:	691a      	ldr	r2, [r3, #16]
 801fe3e:	68fb      	ldr	r3, [r7, #12]
 801fe40:	681b      	ldr	r3, [r3, #0]
 801fe42:	430a      	orrs	r2, r1
 801fe44:	619a      	str	r2, [r3, #24]
      break;
 801fe46:	e0a5      	b.n	801ff94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801fe48:	68fb      	ldr	r3, [r7, #12]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	68b9      	ldr	r1, [r7, #8]
 801fe4e:	4618      	mov	r0, r3
 801fe50:	f000 fad8 	bl	8020404 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801fe54:	68fb      	ldr	r3, [r7, #12]
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	699a      	ldr	r2, [r3, #24]
 801fe5a:	68fb      	ldr	r3, [r7, #12]
 801fe5c:	681b      	ldr	r3, [r3, #0]
 801fe5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fe62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801fe64:	68fb      	ldr	r3, [r7, #12]
 801fe66:	681b      	ldr	r3, [r3, #0]
 801fe68:	699a      	ldr	r2, [r3, #24]
 801fe6a:	68fb      	ldr	r3, [r7, #12]
 801fe6c:	681b      	ldr	r3, [r3, #0]
 801fe6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801fe72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801fe74:	68fb      	ldr	r3, [r7, #12]
 801fe76:	681b      	ldr	r3, [r3, #0]
 801fe78:	6999      	ldr	r1, [r3, #24]
 801fe7a:	68bb      	ldr	r3, [r7, #8]
 801fe7c:	691b      	ldr	r3, [r3, #16]
 801fe7e:	021a      	lsls	r2, r3, #8
 801fe80:	68fb      	ldr	r3, [r7, #12]
 801fe82:	681b      	ldr	r3, [r3, #0]
 801fe84:	430a      	orrs	r2, r1
 801fe86:	619a      	str	r2, [r3, #24]
      break;
 801fe88:	e084      	b.n	801ff94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801fe8a:	68fb      	ldr	r3, [r7, #12]
 801fe8c:	681b      	ldr	r3, [r3, #0]
 801fe8e:	68b9      	ldr	r1, [r7, #8]
 801fe90:	4618      	mov	r0, r3
 801fe92:	f000 fb41 	bl	8020518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801fe96:	68fb      	ldr	r3, [r7, #12]
 801fe98:	681b      	ldr	r3, [r3, #0]
 801fe9a:	69da      	ldr	r2, [r3, #28]
 801fe9c:	68fb      	ldr	r3, [r7, #12]
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	f042 0208 	orr.w	r2, r2, #8
 801fea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801fea6:	68fb      	ldr	r3, [r7, #12]
 801fea8:	681b      	ldr	r3, [r3, #0]
 801feaa:	69da      	ldr	r2, [r3, #28]
 801feac:	68fb      	ldr	r3, [r7, #12]
 801feae:	681b      	ldr	r3, [r3, #0]
 801feb0:	f022 0204 	bic.w	r2, r2, #4
 801feb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801feb6:	68fb      	ldr	r3, [r7, #12]
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	69d9      	ldr	r1, [r3, #28]
 801febc:	68bb      	ldr	r3, [r7, #8]
 801febe:	691a      	ldr	r2, [r3, #16]
 801fec0:	68fb      	ldr	r3, [r7, #12]
 801fec2:	681b      	ldr	r3, [r3, #0]
 801fec4:	430a      	orrs	r2, r1
 801fec6:	61da      	str	r2, [r3, #28]
      break;
 801fec8:	e064      	b.n	801ff94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801feca:	68fb      	ldr	r3, [r7, #12]
 801fecc:	681b      	ldr	r3, [r3, #0]
 801fece:	68b9      	ldr	r1, [r7, #8]
 801fed0:	4618      	mov	r0, r3
 801fed2:	f000 fba9 	bl	8020628 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801fed6:	68fb      	ldr	r3, [r7, #12]
 801fed8:	681b      	ldr	r3, [r3, #0]
 801feda:	69da      	ldr	r2, [r3, #28]
 801fedc:	68fb      	ldr	r3, [r7, #12]
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801fee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801fee6:	68fb      	ldr	r3, [r7, #12]
 801fee8:	681b      	ldr	r3, [r3, #0]
 801feea:	69da      	ldr	r2, [r3, #28]
 801feec:	68fb      	ldr	r3, [r7, #12]
 801feee:	681b      	ldr	r3, [r3, #0]
 801fef0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801fef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801fef6:	68fb      	ldr	r3, [r7, #12]
 801fef8:	681b      	ldr	r3, [r3, #0]
 801fefa:	69d9      	ldr	r1, [r3, #28]
 801fefc:	68bb      	ldr	r3, [r7, #8]
 801fefe:	691b      	ldr	r3, [r3, #16]
 801ff00:	021a      	lsls	r2, r3, #8
 801ff02:	68fb      	ldr	r3, [r7, #12]
 801ff04:	681b      	ldr	r3, [r3, #0]
 801ff06:	430a      	orrs	r2, r1
 801ff08:	61da      	str	r2, [r3, #28]
      break;
 801ff0a:	e043      	b.n	801ff94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801ff0c:	68fb      	ldr	r3, [r7, #12]
 801ff0e:	681b      	ldr	r3, [r3, #0]
 801ff10:	68b9      	ldr	r1, [r7, #8]
 801ff12:	4618      	mov	r0, r3
 801ff14:	f000 fbf2 	bl	80206fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801ff18:	68fb      	ldr	r3, [r7, #12]
 801ff1a:	681b      	ldr	r3, [r3, #0]
 801ff1c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	681b      	ldr	r3, [r3, #0]
 801ff22:	f042 0208 	orr.w	r2, r2, #8
 801ff26:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801ff28:	68fb      	ldr	r3, [r7, #12]
 801ff2a:	681b      	ldr	r3, [r3, #0]
 801ff2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ff2e:	68fb      	ldr	r3, [r7, #12]
 801ff30:	681b      	ldr	r3, [r3, #0]
 801ff32:	f022 0204 	bic.w	r2, r2, #4
 801ff36:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801ff38:	68fb      	ldr	r3, [r7, #12]
 801ff3a:	681b      	ldr	r3, [r3, #0]
 801ff3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801ff3e:	68bb      	ldr	r3, [r7, #8]
 801ff40:	691a      	ldr	r2, [r3, #16]
 801ff42:	68fb      	ldr	r3, [r7, #12]
 801ff44:	681b      	ldr	r3, [r3, #0]
 801ff46:	430a      	orrs	r2, r1
 801ff48:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801ff4a:	e023      	b.n	801ff94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801ff4c:	68fb      	ldr	r3, [r7, #12]
 801ff4e:	681b      	ldr	r3, [r3, #0]
 801ff50:	68b9      	ldr	r1, [r7, #8]
 801ff52:	4618      	mov	r0, r3
 801ff54:	f000 fc36 	bl	80207c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801ff58:	68fb      	ldr	r3, [r7, #12]
 801ff5a:	681b      	ldr	r3, [r3, #0]
 801ff5c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ff5e:	68fb      	ldr	r3, [r7, #12]
 801ff60:	681b      	ldr	r3, [r3, #0]
 801ff62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ff66:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801ff68:	68fb      	ldr	r3, [r7, #12]
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801ff6e:	68fb      	ldr	r3, [r7, #12]
 801ff70:	681b      	ldr	r3, [r3, #0]
 801ff72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 801ff76:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801ff78:	68fb      	ldr	r3, [r7, #12]
 801ff7a:	681b      	ldr	r3, [r3, #0]
 801ff7c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801ff7e:	68bb      	ldr	r3, [r7, #8]
 801ff80:	691b      	ldr	r3, [r3, #16]
 801ff82:	021a      	lsls	r2, r3, #8
 801ff84:	68fb      	ldr	r3, [r7, #12]
 801ff86:	681b      	ldr	r3, [r3, #0]
 801ff88:	430a      	orrs	r2, r1
 801ff8a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 801ff8c:	e002      	b.n	801ff94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801ff8e:	2301      	movs	r3, #1
 801ff90:	75fb      	strb	r3, [r7, #23]
      break;
 801ff92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801ff94:	68fb      	ldr	r3, [r7, #12]
 801ff96:	2200      	movs	r2, #0
 801ff98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801ff9c:	7dfb      	ldrb	r3, [r7, #23]
}
 801ff9e:	4618      	mov	r0, r3
 801ffa0:	3718      	adds	r7, #24
 801ffa2:	46bd      	mov	sp, r7
 801ffa4:	bd80      	pop	{r7, pc}
 801ffa6:	bf00      	nop

0801ffa8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801ffa8:	b580      	push	{r7, lr}
 801ffaa:	b084      	sub	sp, #16
 801ffac:	af00      	add	r7, sp, #0
 801ffae:	6078      	str	r0, [r7, #4]
 801ffb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ffb2:	2300      	movs	r3, #0
 801ffb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801ffbc:	2b01      	cmp	r3, #1
 801ffbe:	d101      	bne.n	801ffc4 <HAL_TIM_ConfigClockSource+0x1c>
 801ffc0:	2302      	movs	r3, #2
 801ffc2:	e0dc      	b.n	802017e <HAL_TIM_ConfigClockSource+0x1d6>
 801ffc4:	687b      	ldr	r3, [r7, #4]
 801ffc6:	2201      	movs	r2, #1
 801ffc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	2202      	movs	r2, #2
 801ffd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801ffd4:	687b      	ldr	r3, [r7, #4]
 801ffd6:	681b      	ldr	r3, [r3, #0]
 801ffd8:	689b      	ldr	r3, [r3, #8]
 801ffda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801ffdc:	68ba      	ldr	r2, [r7, #8]
 801ffde:	4b6a      	ldr	r3, [pc, #424]	@ (8020188 <HAL_TIM_ConfigClockSource+0x1e0>)
 801ffe0:	4013      	ands	r3, r2
 801ffe2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ffe4:	68bb      	ldr	r3, [r7, #8]
 801ffe6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801ffea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801ffec:	687b      	ldr	r3, [r7, #4]
 801ffee:	681b      	ldr	r3, [r3, #0]
 801fff0:	68ba      	ldr	r2, [r7, #8]
 801fff2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801fff4:	683b      	ldr	r3, [r7, #0]
 801fff6:	681b      	ldr	r3, [r3, #0]
 801fff8:	4a64      	ldr	r2, [pc, #400]	@ (802018c <HAL_TIM_ConfigClockSource+0x1e4>)
 801fffa:	4293      	cmp	r3, r2
 801fffc:	f000 80a9 	beq.w	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020000:	4a62      	ldr	r2, [pc, #392]	@ (802018c <HAL_TIM_ConfigClockSource+0x1e4>)
 8020002:	4293      	cmp	r3, r2
 8020004:	f200 80ae 	bhi.w	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020008:	4a61      	ldr	r2, [pc, #388]	@ (8020190 <HAL_TIM_ConfigClockSource+0x1e8>)
 802000a:	4293      	cmp	r3, r2
 802000c:	f000 80a1 	beq.w	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020010:	4a5f      	ldr	r2, [pc, #380]	@ (8020190 <HAL_TIM_ConfigClockSource+0x1e8>)
 8020012:	4293      	cmp	r3, r2
 8020014:	f200 80a6 	bhi.w	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020018:	4a5e      	ldr	r2, [pc, #376]	@ (8020194 <HAL_TIM_ConfigClockSource+0x1ec>)
 802001a:	4293      	cmp	r3, r2
 802001c:	f000 8099 	beq.w	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020020:	4a5c      	ldr	r2, [pc, #368]	@ (8020194 <HAL_TIM_ConfigClockSource+0x1ec>)
 8020022:	4293      	cmp	r3, r2
 8020024:	f200 809e 	bhi.w	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020028:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 802002c:	f000 8091 	beq.w	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020030:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8020034:	f200 8096 	bhi.w	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020038:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802003c:	f000 8089 	beq.w	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020040:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8020044:	f200 808e 	bhi.w	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 802004c:	d03e      	beq.n	80200cc <HAL_TIM_ConfigClockSource+0x124>
 802004e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8020052:	f200 8087 	bhi.w	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 802005a:	f000 8086 	beq.w	802016a <HAL_TIM_ConfigClockSource+0x1c2>
 802005e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8020062:	d87f      	bhi.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020064:	2b70      	cmp	r3, #112	@ 0x70
 8020066:	d01a      	beq.n	802009e <HAL_TIM_ConfigClockSource+0xf6>
 8020068:	2b70      	cmp	r3, #112	@ 0x70
 802006a:	d87b      	bhi.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 802006c:	2b60      	cmp	r3, #96	@ 0x60
 802006e:	d050      	beq.n	8020112 <HAL_TIM_ConfigClockSource+0x16a>
 8020070:	2b60      	cmp	r3, #96	@ 0x60
 8020072:	d877      	bhi.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020074:	2b50      	cmp	r3, #80	@ 0x50
 8020076:	d03c      	beq.n	80200f2 <HAL_TIM_ConfigClockSource+0x14a>
 8020078:	2b50      	cmp	r3, #80	@ 0x50
 802007a:	d873      	bhi.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 802007c:	2b40      	cmp	r3, #64	@ 0x40
 802007e:	d058      	beq.n	8020132 <HAL_TIM_ConfigClockSource+0x18a>
 8020080:	2b40      	cmp	r3, #64	@ 0x40
 8020082:	d86f      	bhi.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020084:	2b30      	cmp	r3, #48	@ 0x30
 8020086:	d064      	beq.n	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020088:	2b30      	cmp	r3, #48	@ 0x30
 802008a:	d86b      	bhi.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 802008c:	2b20      	cmp	r3, #32
 802008e:	d060      	beq.n	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020090:	2b20      	cmp	r3, #32
 8020092:	d867      	bhi.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
 8020094:	2b00      	cmp	r3, #0
 8020096:	d05c      	beq.n	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 8020098:	2b10      	cmp	r3, #16
 802009a:	d05a      	beq.n	8020152 <HAL_TIM_ConfigClockSource+0x1aa>
 802009c:	e062      	b.n	8020164 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 802009e:	687b      	ldr	r3, [r7, #4]
 80200a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80200a2:	683b      	ldr	r3, [r7, #0]
 80200a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80200a6:	683b      	ldr	r3, [r7, #0]
 80200a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80200aa:	683b      	ldr	r3, [r7, #0]
 80200ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80200ae:	f000 fc6d 	bl	802098c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	689b      	ldr	r3, [r3, #8]
 80200b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80200ba:	68bb      	ldr	r3, [r7, #8]
 80200bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80200c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80200c2:	687b      	ldr	r3, [r7, #4]
 80200c4:	681b      	ldr	r3, [r3, #0]
 80200c6:	68ba      	ldr	r2, [r7, #8]
 80200c8:	609a      	str	r2, [r3, #8]
      break;
 80200ca:	e04f      	b.n	802016c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80200cc:	687b      	ldr	r3, [r7, #4]
 80200ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80200d0:	683b      	ldr	r3, [r7, #0]
 80200d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80200d4:	683b      	ldr	r3, [r7, #0]
 80200d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80200d8:	683b      	ldr	r3, [r7, #0]
 80200da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80200dc:	f000 fc56 	bl	802098c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	681b      	ldr	r3, [r3, #0]
 80200e4:	689a      	ldr	r2, [r3, #8]
 80200e6:	687b      	ldr	r3, [r7, #4]
 80200e8:	681b      	ldr	r3, [r3, #0]
 80200ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80200ee:	609a      	str	r2, [r3, #8]
      break;
 80200f0:	e03c      	b.n	802016c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80200f2:	687b      	ldr	r3, [r7, #4]
 80200f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80200f6:	683b      	ldr	r3, [r7, #0]
 80200f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80200fa:	683b      	ldr	r3, [r7, #0]
 80200fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80200fe:	461a      	mov	r2, r3
 8020100:	f000 fbc6 	bl	8020890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	681b      	ldr	r3, [r3, #0]
 8020108:	2150      	movs	r1, #80	@ 0x50
 802010a:	4618      	mov	r0, r3
 802010c:	f000 fc20 	bl	8020950 <TIM_ITRx_SetConfig>
      break;
 8020110:	e02c      	b.n	802016c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8020112:	687b      	ldr	r3, [r7, #4]
 8020114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020116:	683b      	ldr	r3, [r7, #0]
 8020118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 802011a:	683b      	ldr	r3, [r7, #0]
 802011c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 802011e:	461a      	mov	r2, r3
 8020120:	f000 fbe5 	bl	80208ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8020124:	687b      	ldr	r3, [r7, #4]
 8020126:	681b      	ldr	r3, [r3, #0]
 8020128:	2160      	movs	r1, #96	@ 0x60
 802012a:	4618      	mov	r0, r3
 802012c:	f000 fc10 	bl	8020950 <TIM_ITRx_SetConfig>
      break;
 8020130:	e01c      	b.n	802016c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8020136:	683b      	ldr	r3, [r7, #0]
 8020138:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 802013a:	683b      	ldr	r3, [r7, #0]
 802013c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 802013e:	461a      	mov	r2, r3
 8020140:	f000 fba6 	bl	8020890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8020144:	687b      	ldr	r3, [r7, #4]
 8020146:	681b      	ldr	r3, [r3, #0]
 8020148:	2140      	movs	r1, #64	@ 0x40
 802014a:	4618      	mov	r0, r3
 802014c:	f000 fc00 	bl	8020950 <TIM_ITRx_SetConfig>
      break;
 8020150:	e00c      	b.n	802016c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	681a      	ldr	r2, [r3, #0]
 8020156:	683b      	ldr	r3, [r7, #0]
 8020158:	681b      	ldr	r3, [r3, #0]
 802015a:	4619      	mov	r1, r3
 802015c:	4610      	mov	r0, r2
 802015e:	f000 fbf7 	bl	8020950 <TIM_ITRx_SetConfig>
      break;
 8020162:	e003      	b.n	802016c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8020164:	2301      	movs	r3, #1
 8020166:	73fb      	strb	r3, [r7, #15]
      break;
 8020168:	e000      	b.n	802016c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 802016a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	2201      	movs	r2, #1
 8020170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020174:	687b      	ldr	r3, [r7, #4]
 8020176:	2200      	movs	r2, #0
 8020178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 802017c:	7bfb      	ldrb	r3, [r7, #15]
}
 802017e:	4618      	mov	r0, r3
 8020180:	3710      	adds	r7, #16
 8020182:	46bd      	mov	sp, r7
 8020184:	bd80      	pop	{r7, pc}
 8020186:	bf00      	nop
 8020188:	ffceff88 	.word	0xffceff88
 802018c:	00100040 	.word	0x00100040
 8020190:	00100030 	.word	0x00100030
 8020194:	00100020 	.word	0x00100020

08020198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8020198:	b480      	push	{r7}
 802019a:	b085      	sub	sp, #20
 802019c:	af00      	add	r7, sp, #0
 802019e:	6078      	str	r0, [r7, #4]
 80201a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80201a2:	687b      	ldr	r3, [r7, #4]
 80201a4:	681b      	ldr	r3, [r3, #0]
 80201a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	4a46      	ldr	r2, [pc, #280]	@ (80202c4 <TIM_Base_SetConfig+0x12c>)
 80201ac:	4293      	cmp	r3, r2
 80201ae:	d013      	beq.n	80201d8 <TIM_Base_SetConfig+0x40>
 80201b0:	687b      	ldr	r3, [r7, #4]
 80201b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80201b6:	d00f      	beq.n	80201d8 <TIM_Base_SetConfig+0x40>
 80201b8:	687b      	ldr	r3, [r7, #4]
 80201ba:	4a43      	ldr	r2, [pc, #268]	@ (80202c8 <TIM_Base_SetConfig+0x130>)
 80201bc:	4293      	cmp	r3, r2
 80201be:	d00b      	beq.n	80201d8 <TIM_Base_SetConfig+0x40>
 80201c0:	687b      	ldr	r3, [r7, #4]
 80201c2:	4a42      	ldr	r2, [pc, #264]	@ (80202cc <TIM_Base_SetConfig+0x134>)
 80201c4:	4293      	cmp	r3, r2
 80201c6:	d007      	beq.n	80201d8 <TIM_Base_SetConfig+0x40>
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	4a41      	ldr	r2, [pc, #260]	@ (80202d0 <TIM_Base_SetConfig+0x138>)
 80201cc:	4293      	cmp	r3, r2
 80201ce:	d003      	beq.n	80201d8 <TIM_Base_SetConfig+0x40>
 80201d0:	687b      	ldr	r3, [r7, #4]
 80201d2:	4a40      	ldr	r2, [pc, #256]	@ (80202d4 <TIM_Base_SetConfig+0x13c>)
 80201d4:	4293      	cmp	r3, r2
 80201d6:	d108      	bne.n	80201ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80201d8:	68fb      	ldr	r3, [r7, #12]
 80201da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80201de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80201e0:	683b      	ldr	r3, [r7, #0]
 80201e2:	685b      	ldr	r3, [r3, #4]
 80201e4:	68fa      	ldr	r2, [r7, #12]
 80201e6:	4313      	orrs	r3, r2
 80201e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80201ea:	687b      	ldr	r3, [r7, #4]
 80201ec:	4a35      	ldr	r2, [pc, #212]	@ (80202c4 <TIM_Base_SetConfig+0x12c>)
 80201ee:	4293      	cmp	r3, r2
 80201f0:	d01f      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 80201f2:	687b      	ldr	r3, [r7, #4]
 80201f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80201f8:	d01b      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 80201fa:	687b      	ldr	r3, [r7, #4]
 80201fc:	4a32      	ldr	r2, [pc, #200]	@ (80202c8 <TIM_Base_SetConfig+0x130>)
 80201fe:	4293      	cmp	r3, r2
 8020200:	d017      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 8020202:	687b      	ldr	r3, [r7, #4]
 8020204:	4a31      	ldr	r2, [pc, #196]	@ (80202cc <TIM_Base_SetConfig+0x134>)
 8020206:	4293      	cmp	r3, r2
 8020208:	d013      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	4a30      	ldr	r2, [pc, #192]	@ (80202d0 <TIM_Base_SetConfig+0x138>)
 802020e:	4293      	cmp	r3, r2
 8020210:	d00f      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 8020212:	687b      	ldr	r3, [r7, #4]
 8020214:	4a2f      	ldr	r2, [pc, #188]	@ (80202d4 <TIM_Base_SetConfig+0x13c>)
 8020216:	4293      	cmp	r3, r2
 8020218:	d00b      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 802021a:	687b      	ldr	r3, [r7, #4]
 802021c:	4a2e      	ldr	r2, [pc, #184]	@ (80202d8 <TIM_Base_SetConfig+0x140>)
 802021e:	4293      	cmp	r3, r2
 8020220:	d007      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 8020222:	687b      	ldr	r3, [r7, #4]
 8020224:	4a2d      	ldr	r2, [pc, #180]	@ (80202dc <TIM_Base_SetConfig+0x144>)
 8020226:	4293      	cmp	r3, r2
 8020228:	d003      	beq.n	8020232 <TIM_Base_SetConfig+0x9a>
 802022a:	687b      	ldr	r3, [r7, #4]
 802022c:	4a2c      	ldr	r2, [pc, #176]	@ (80202e0 <TIM_Base_SetConfig+0x148>)
 802022e:	4293      	cmp	r3, r2
 8020230:	d108      	bne.n	8020244 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8020232:	68fb      	ldr	r3, [r7, #12]
 8020234:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8020238:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802023a:	683b      	ldr	r3, [r7, #0]
 802023c:	68db      	ldr	r3, [r3, #12]
 802023e:	68fa      	ldr	r2, [r7, #12]
 8020240:	4313      	orrs	r3, r2
 8020242:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8020244:	68fb      	ldr	r3, [r7, #12]
 8020246:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 802024a:	683b      	ldr	r3, [r7, #0]
 802024c:	695b      	ldr	r3, [r3, #20]
 802024e:	4313      	orrs	r3, r2
 8020250:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8020252:	687b      	ldr	r3, [r7, #4]
 8020254:	68fa      	ldr	r2, [r7, #12]
 8020256:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8020258:	683b      	ldr	r3, [r7, #0]
 802025a:	689a      	ldr	r2, [r3, #8]
 802025c:	687b      	ldr	r3, [r7, #4]
 802025e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8020260:	683b      	ldr	r3, [r7, #0]
 8020262:	681a      	ldr	r2, [r3, #0]
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8020268:	687b      	ldr	r3, [r7, #4]
 802026a:	4a16      	ldr	r2, [pc, #88]	@ (80202c4 <TIM_Base_SetConfig+0x12c>)
 802026c:	4293      	cmp	r3, r2
 802026e:	d00f      	beq.n	8020290 <TIM_Base_SetConfig+0xf8>
 8020270:	687b      	ldr	r3, [r7, #4]
 8020272:	4a18      	ldr	r2, [pc, #96]	@ (80202d4 <TIM_Base_SetConfig+0x13c>)
 8020274:	4293      	cmp	r3, r2
 8020276:	d00b      	beq.n	8020290 <TIM_Base_SetConfig+0xf8>
 8020278:	687b      	ldr	r3, [r7, #4]
 802027a:	4a17      	ldr	r2, [pc, #92]	@ (80202d8 <TIM_Base_SetConfig+0x140>)
 802027c:	4293      	cmp	r3, r2
 802027e:	d007      	beq.n	8020290 <TIM_Base_SetConfig+0xf8>
 8020280:	687b      	ldr	r3, [r7, #4]
 8020282:	4a16      	ldr	r2, [pc, #88]	@ (80202dc <TIM_Base_SetConfig+0x144>)
 8020284:	4293      	cmp	r3, r2
 8020286:	d003      	beq.n	8020290 <TIM_Base_SetConfig+0xf8>
 8020288:	687b      	ldr	r3, [r7, #4]
 802028a:	4a15      	ldr	r2, [pc, #84]	@ (80202e0 <TIM_Base_SetConfig+0x148>)
 802028c:	4293      	cmp	r3, r2
 802028e:	d103      	bne.n	8020298 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8020290:	683b      	ldr	r3, [r7, #0]
 8020292:	691a      	ldr	r2, [r3, #16]
 8020294:	687b      	ldr	r3, [r7, #4]
 8020296:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8020298:	687b      	ldr	r3, [r7, #4]
 802029a:	2201      	movs	r2, #1
 802029c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 802029e:	687b      	ldr	r3, [r7, #4]
 80202a0:	691b      	ldr	r3, [r3, #16]
 80202a2:	f003 0301 	and.w	r3, r3, #1
 80202a6:	2b01      	cmp	r3, #1
 80202a8:	d105      	bne.n	80202b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80202aa:	687b      	ldr	r3, [r7, #4]
 80202ac:	691b      	ldr	r3, [r3, #16]
 80202ae:	f023 0201 	bic.w	r2, r3, #1
 80202b2:	687b      	ldr	r3, [r7, #4]
 80202b4:	611a      	str	r2, [r3, #16]
  }
}
 80202b6:	bf00      	nop
 80202b8:	3714      	adds	r7, #20
 80202ba:	46bd      	mov	sp, r7
 80202bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202c0:	4770      	bx	lr
 80202c2:	bf00      	nop
 80202c4:	40010000 	.word	0x40010000
 80202c8:	40000400 	.word	0x40000400
 80202cc:	40000800 	.word	0x40000800
 80202d0:	40000c00 	.word	0x40000c00
 80202d4:	40010400 	.word	0x40010400
 80202d8:	40014000 	.word	0x40014000
 80202dc:	40014400 	.word	0x40014400
 80202e0:	40014800 	.word	0x40014800

080202e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80202e4:	b480      	push	{r7}
 80202e6:	b087      	sub	sp, #28
 80202e8:	af00      	add	r7, sp, #0
 80202ea:	6078      	str	r0, [r7, #4]
 80202ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80202ee:	687b      	ldr	r3, [r7, #4]
 80202f0:	6a1b      	ldr	r3, [r3, #32]
 80202f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80202f4:	687b      	ldr	r3, [r7, #4]
 80202f6:	6a1b      	ldr	r3, [r3, #32]
 80202f8:	f023 0201 	bic.w	r2, r3, #1
 80202fc:	687b      	ldr	r3, [r7, #4]
 80202fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	685b      	ldr	r3, [r3, #4]
 8020304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020306:	687b      	ldr	r3, [r7, #4]
 8020308:	699b      	ldr	r3, [r3, #24]
 802030a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 802030c:	68fa      	ldr	r2, [r7, #12]
 802030e:	4b37      	ldr	r3, [pc, #220]	@ (80203ec <TIM_OC1_SetConfig+0x108>)
 8020310:	4013      	ands	r3, r2
 8020312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8020314:	68fb      	ldr	r3, [r7, #12]
 8020316:	f023 0303 	bic.w	r3, r3, #3
 802031a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802031c:	683b      	ldr	r3, [r7, #0]
 802031e:	681b      	ldr	r3, [r3, #0]
 8020320:	68fa      	ldr	r2, [r7, #12]
 8020322:	4313      	orrs	r3, r2
 8020324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8020326:	697b      	ldr	r3, [r7, #20]
 8020328:	f023 0302 	bic.w	r3, r3, #2
 802032c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 802032e:	683b      	ldr	r3, [r7, #0]
 8020330:	689b      	ldr	r3, [r3, #8]
 8020332:	697a      	ldr	r2, [r7, #20]
 8020334:	4313      	orrs	r3, r2
 8020336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8020338:	687b      	ldr	r3, [r7, #4]
 802033a:	4a2d      	ldr	r2, [pc, #180]	@ (80203f0 <TIM_OC1_SetConfig+0x10c>)
 802033c:	4293      	cmp	r3, r2
 802033e:	d00f      	beq.n	8020360 <TIM_OC1_SetConfig+0x7c>
 8020340:	687b      	ldr	r3, [r7, #4]
 8020342:	4a2c      	ldr	r2, [pc, #176]	@ (80203f4 <TIM_OC1_SetConfig+0x110>)
 8020344:	4293      	cmp	r3, r2
 8020346:	d00b      	beq.n	8020360 <TIM_OC1_SetConfig+0x7c>
 8020348:	687b      	ldr	r3, [r7, #4]
 802034a:	4a2b      	ldr	r2, [pc, #172]	@ (80203f8 <TIM_OC1_SetConfig+0x114>)
 802034c:	4293      	cmp	r3, r2
 802034e:	d007      	beq.n	8020360 <TIM_OC1_SetConfig+0x7c>
 8020350:	687b      	ldr	r3, [r7, #4]
 8020352:	4a2a      	ldr	r2, [pc, #168]	@ (80203fc <TIM_OC1_SetConfig+0x118>)
 8020354:	4293      	cmp	r3, r2
 8020356:	d003      	beq.n	8020360 <TIM_OC1_SetConfig+0x7c>
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	4a29      	ldr	r2, [pc, #164]	@ (8020400 <TIM_OC1_SetConfig+0x11c>)
 802035c:	4293      	cmp	r3, r2
 802035e:	d10c      	bne.n	802037a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8020360:	697b      	ldr	r3, [r7, #20]
 8020362:	f023 0308 	bic.w	r3, r3, #8
 8020366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8020368:	683b      	ldr	r3, [r7, #0]
 802036a:	68db      	ldr	r3, [r3, #12]
 802036c:	697a      	ldr	r2, [r7, #20]
 802036e:	4313      	orrs	r3, r2
 8020370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8020372:	697b      	ldr	r3, [r7, #20]
 8020374:	f023 0304 	bic.w	r3, r3, #4
 8020378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802037a:	687b      	ldr	r3, [r7, #4]
 802037c:	4a1c      	ldr	r2, [pc, #112]	@ (80203f0 <TIM_OC1_SetConfig+0x10c>)
 802037e:	4293      	cmp	r3, r2
 8020380:	d00f      	beq.n	80203a2 <TIM_OC1_SetConfig+0xbe>
 8020382:	687b      	ldr	r3, [r7, #4]
 8020384:	4a1b      	ldr	r2, [pc, #108]	@ (80203f4 <TIM_OC1_SetConfig+0x110>)
 8020386:	4293      	cmp	r3, r2
 8020388:	d00b      	beq.n	80203a2 <TIM_OC1_SetConfig+0xbe>
 802038a:	687b      	ldr	r3, [r7, #4]
 802038c:	4a1a      	ldr	r2, [pc, #104]	@ (80203f8 <TIM_OC1_SetConfig+0x114>)
 802038e:	4293      	cmp	r3, r2
 8020390:	d007      	beq.n	80203a2 <TIM_OC1_SetConfig+0xbe>
 8020392:	687b      	ldr	r3, [r7, #4]
 8020394:	4a19      	ldr	r2, [pc, #100]	@ (80203fc <TIM_OC1_SetConfig+0x118>)
 8020396:	4293      	cmp	r3, r2
 8020398:	d003      	beq.n	80203a2 <TIM_OC1_SetConfig+0xbe>
 802039a:	687b      	ldr	r3, [r7, #4]
 802039c:	4a18      	ldr	r2, [pc, #96]	@ (8020400 <TIM_OC1_SetConfig+0x11c>)
 802039e:	4293      	cmp	r3, r2
 80203a0:	d111      	bne.n	80203c6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80203a2:	693b      	ldr	r3, [r7, #16]
 80203a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80203a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80203aa:	693b      	ldr	r3, [r7, #16]
 80203ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80203b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80203b2:	683b      	ldr	r3, [r7, #0]
 80203b4:	695b      	ldr	r3, [r3, #20]
 80203b6:	693a      	ldr	r2, [r7, #16]
 80203b8:	4313      	orrs	r3, r2
 80203ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80203bc:	683b      	ldr	r3, [r7, #0]
 80203be:	699b      	ldr	r3, [r3, #24]
 80203c0:	693a      	ldr	r2, [r7, #16]
 80203c2:	4313      	orrs	r3, r2
 80203c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80203c6:	687b      	ldr	r3, [r7, #4]
 80203c8:	693a      	ldr	r2, [r7, #16]
 80203ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	68fa      	ldr	r2, [r7, #12]
 80203d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80203d2:	683b      	ldr	r3, [r7, #0]
 80203d4:	685a      	ldr	r2, [r3, #4]
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80203da:	687b      	ldr	r3, [r7, #4]
 80203dc:	697a      	ldr	r2, [r7, #20]
 80203de:	621a      	str	r2, [r3, #32]
}
 80203e0:	bf00      	nop
 80203e2:	371c      	adds	r7, #28
 80203e4:	46bd      	mov	sp, r7
 80203e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203ea:	4770      	bx	lr
 80203ec:	fffeff8f 	.word	0xfffeff8f
 80203f0:	40010000 	.word	0x40010000
 80203f4:	40010400 	.word	0x40010400
 80203f8:	40014000 	.word	0x40014000
 80203fc:	40014400 	.word	0x40014400
 8020400:	40014800 	.word	0x40014800

08020404 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020404:	b480      	push	{r7}
 8020406:	b087      	sub	sp, #28
 8020408:	af00      	add	r7, sp, #0
 802040a:	6078      	str	r0, [r7, #4]
 802040c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	6a1b      	ldr	r3, [r3, #32]
 8020412:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	6a1b      	ldr	r3, [r3, #32]
 8020418:	f023 0210 	bic.w	r2, r3, #16
 802041c:	687b      	ldr	r3, [r7, #4]
 802041e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	685b      	ldr	r3, [r3, #4]
 8020424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	699b      	ldr	r3, [r3, #24]
 802042a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 802042c:	68fa      	ldr	r2, [r7, #12]
 802042e:	4b34      	ldr	r3, [pc, #208]	@ (8020500 <TIM_OC2_SetConfig+0xfc>)
 8020430:	4013      	ands	r3, r2
 8020432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8020434:	68fb      	ldr	r3, [r7, #12]
 8020436:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802043a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 802043c:	683b      	ldr	r3, [r7, #0]
 802043e:	681b      	ldr	r3, [r3, #0]
 8020440:	021b      	lsls	r3, r3, #8
 8020442:	68fa      	ldr	r2, [r7, #12]
 8020444:	4313      	orrs	r3, r2
 8020446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8020448:	697b      	ldr	r3, [r7, #20]
 802044a:	f023 0320 	bic.w	r3, r3, #32
 802044e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8020450:	683b      	ldr	r3, [r7, #0]
 8020452:	689b      	ldr	r3, [r3, #8]
 8020454:	011b      	lsls	r3, r3, #4
 8020456:	697a      	ldr	r2, [r7, #20]
 8020458:	4313      	orrs	r3, r2
 802045a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 802045c:	687b      	ldr	r3, [r7, #4]
 802045e:	4a29      	ldr	r2, [pc, #164]	@ (8020504 <TIM_OC2_SetConfig+0x100>)
 8020460:	4293      	cmp	r3, r2
 8020462:	d003      	beq.n	802046c <TIM_OC2_SetConfig+0x68>
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	4a28      	ldr	r2, [pc, #160]	@ (8020508 <TIM_OC2_SetConfig+0x104>)
 8020468:	4293      	cmp	r3, r2
 802046a:	d10d      	bne.n	8020488 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 802046c:	697b      	ldr	r3, [r7, #20]
 802046e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020472:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8020474:	683b      	ldr	r3, [r7, #0]
 8020476:	68db      	ldr	r3, [r3, #12]
 8020478:	011b      	lsls	r3, r3, #4
 802047a:	697a      	ldr	r2, [r7, #20]
 802047c:	4313      	orrs	r3, r2
 802047e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8020480:	697b      	ldr	r3, [r7, #20]
 8020482:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8020486:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	4a1e      	ldr	r2, [pc, #120]	@ (8020504 <TIM_OC2_SetConfig+0x100>)
 802048c:	4293      	cmp	r3, r2
 802048e:	d00f      	beq.n	80204b0 <TIM_OC2_SetConfig+0xac>
 8020490:	687b      	ldr	r3, [r7, #4]
 8020492:	4a1d      	ldr	r2, [pc, #116]	@ (8020508 <TIM_OC2_SetConfig+0x104>)
 8020494:	4293      	cmp	r3, r2
 8020496:	d00b      	beq.n	80204b0 <TIM_OC2_SetConfig+0xac>
 8020498:	687b      	ldr	r3, [r7, #4]
 802049a:	4a1c      	ldr	r2, [pc, #112]	@ (802050c <TIM_OC2_SetConfig+0x108>)
 802049c:	4293      	cmp	r3, r2
 802049e:	d007      	beq.n	80204b0 <TIM_OC2_SetConfig+0xac>
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	4a1b      	ldr	r2, [pc, #108]	@ (8020510 <TIM_OC2_SetConfig+0x10c>)
 80204a4:	4293      	cmp	r3, r2
 80204a6:	d003      	beq.n	80204b0 <TIM_OC2_SetConfig+0xac>
 80204a8:	687b      	ldr	r3, [r7, #4]
 80204aa:	4a1a      	ldr	r2, [pc, #104]	@ (8020514 <TIM_OC2_SetConfig+0x110>)
 80204ac:	4293      	cmp	r3, r2
 80204ae:	d113      	bne.n	80204d8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80204b0:	693b      	ldr	r3, [r7, #16]
 80204b2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80204b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80204b8:	693b      	ldr	r3, [r7, #16]
 80204ba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80204be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80204c0:	683b      	ldr	r3, [r7, #0]
 80204c2:	695b      	ldr	r3, [r3, #20]
 80204c4:	009b      	lsls	r3, r3, #2
 80204c6:	693a      	ldr	r2, [r7, #16]
 80204c8:	4313      	orrs	r3, r2
 80204ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80204cc:	683b      	ldr	r3, [r7, #0]
 80204ce:	699b      	ldr	r3, [r3, #24]
 80204d0:	009b      	lsls	r3, r3, #2
 80204d2:	693a      	ldr	r2, [r7, #16]
 80204d4:	4313      	orrs	r3, r2
 80204d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80204d8:	687b      	ldr	r3, [r7, #4]
 80204da:	693a      	ldr	r2, [r7, #16]
 80204dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80204de:	687b      	ldr	r3, [r7, #4]
 80204e0:	68fa      	ldr	r2, [r7, #12]
 80204e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80204e4:	683b      	ldr	r3, [r7, #0]
 80204e6:	685a      	ldr	r2, [r3, #4]
 80204e8:	687b      	ldr	r3, [r7, #4]
 80204ea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80204ec:	687b      	ldr	r3, [r7, #4]
 80204ee:	697a      	ldr	r2, [r7, #20]
 80204f0:	621a      	str	r2, [r3, #32]
}
 80204f2:	bf00      	nop
 80204f4:	371c      	adds	r7, #28
 80204f6:	46bd      	mov	sp, r7
 80204f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204fc:	4770      	bx	lr
 80204fe:	bf00      	nop
 8020500:	feff8fff 	.word	0xfeff8fff
 8020504:	40010000 	.word	0x40010000
 8020508:	40010400 	.word	0x40010400
 802050c:	40014000 	.word	0x40014000
 8020510:	40014400 	.word	0x40014400
 8020514:	40014800 	.word	0x40014800

08020518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020518:	b480      	push	{r7}
 802051a:	b087      	sub	sp, #28
 802051c:	af00      	add	r7, sp, #0
 802051e:	6078      	str	r0, [r7, #4]
 8020520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020522:	687b      	ldr	r3, [r7, #4]
 8020524:	6a1b      	ldr	r3, [r3, #32]
 8020526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8020528:	687b      	ldr	r3, [r7, #4]
 802052a:	6a1b      	ldr	r3, [r3, #32]
 802052c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8020530:	687b      	ldr	r3, [r7, #4]
 8020532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020534:	687b      	ldr	r3, [r7, #4]
 8020536:	685b      	ldr	r3, [r3, #4]
 8020538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	69db      	ldr	r3, [r3, #28]
 802053e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8020540:	68fa      	ldr	r2, [r7, #12]
 8020542:	4b33      	ldr	r3, [pc, #204]	@ (8020610 <TIM_OC3_SetConfig+0xf8>)
 8020544:	4013      	ands	r3, r2
 8020546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8020548:	68fb      	ldr	r3, [r7, #12]
 802054a:	f023 0303 	bic.w	r3, r3, #3
 802054e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8020550:	683b      	ldr	r3, [r7, #0]
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	68fa      	ldr	r2, [r7, #12]
 8020556:	4313      	orrs	r3, r2
 8020558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 802055a:	697b      	ldr	r3, [r7, #20]
 802055c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8020560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8020562:	683b      	ldr	r3, [r7, #0]
 8020564:	689b      	ldr	r3, [r3, #8]
 8020566:	021b      	lsls	r3, r3, #8
 8020568:	697a      	ldr	r2, [r7, #20]
 802056a:	4313      	orrs	r3, r2
 802056c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 802056e:	687b      	ldr	r3, [r7, #4]
 8020570:	4a28      	ldr	r2, [pc, #160]	@ (8020614 <TIM_OC3_SetConfig+0xfc>)
 8020572:	4293      	cmp	r3, r2
 8020574:	d003      	beq.n	802057e <TIM_OC3_SetConfig+0x66>
 8020576:	687b      	ldr	r3, [r7, #4]
 8020578:	4a27      	ldr	r2, [pc, #156]	@ (8020618 <TIM_OC3_SetConfig+0x100>)
 802057a:	4293      	cmp	r3, r2
 802057c:	d10d      	bne.n	802059a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 802057e:	697b      	ldr	r3, [r7, #20]
 8020580:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8020584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8020586:	683b      	ldr	r3, [r7, #0]
 8020588:	68db      	ldr	r3, [r3, #12]
 802058a:	021b      	lsls	r3, r3, #8
 802058c:	697a      	ldr	r2, [r7, #20]
 802058e:	4313      	orrs	r3, r2
 8020590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8020592:	697b      	ldr	r3, [r7, #20]
 8020594:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8020598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	4a1d      	ldr	r2, [pc, #116]	@ (8020614 <TIM_OC3_SetConfig+0xfc>)
 802059e:	4293      	cmp	r3, r2
 80205a0:	d00f      	beq.n	80205c2 <TIM_OC3_SetConfig+0xaa>
 80205a2:	687b      	ldr	r3, [r7, #4]
 80205a4:	4a1c      	ldr	r2, [pc, #112]	@ (8020618 <TIM_OC3_SetConfig+0x100>)
 80205a6:	4293      	cmp	r3, r2
 80205a8:	d00b      	beq.n	80205c2 <TIM_OC3_SetConfig+0xaa>
 80205aa:	687b      	ldr	r3, [r7, #4]
 80205ac:	4a1b      	ldr	r2, [pc, #108]	@ (802061c <TIM_OC3_SetConfig+0x104>)
 80205ae:	4293      	cmp	r3, r2
 80205b0:	d007      	beq.n	80205c2 <TIM_OC3_SetConfig+0xaa>
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	4a1a      	ldr	r2, [pc, #104]	@ (8020620 <TIM_OC3_SetConfig+0x108>)
 80205b6:	4293      	cmp	r3, r2
 80205b8:	d003      	beq.n	80205c2 <TIM_OC3_SetConfig+0xaa>
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	4a19      	ldr	r2, [pc, #100]	@ (8020624 <TIM_OC3_SetConfig+0x10c>)
 80205be:	4293      	cmp	r3, r2
 80205c0:	d113      	bne.n	80205ea <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80205c2:	693b      	ldr	r3, [r7, #16]
 80205c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80205c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80205ca:	693b      	ldr	r3, [r7, #16]
 80205cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80205d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80205d2:	683b      	ldr	r3, [r7, #0]
 80205d4:	695b      	ldr	r3, [r3, #20]
 80205d6:	011b      	lsls	r3, r3, #4
 80205d8:	693a      	ldr	r2, [r7, #16]
 80205da:	4313      	orrs	r3, r2
 80205dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80205de:	683b      	ldr	r3, [r7, #0]
 80205e0:	699b      	ldr	r3, [r3, #24]
 80205e2:	011b      	lsls	r3, r3, #4
 80205e4:	693a      	ldr	r2, [r7, #16]
 80205e6:	4313      	orrs	r3, r2
 80205e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80205ea:	687b      	ldr	r3, [r7, #4]
 80205ec:	693a      	ldr	r2, [r7, #16]
 80205ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	68fa      	ldr	r2, [r7, #12]
 80205f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80205f6:	683b      	ldr	r3, [r7, #0]
 80205f8:	685a      	ldr	r2, [r3, #4]
 80205fa:	687b      	ldr	r3, [r7, #4]
 80205fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80205fe:	687b      	ldr	r3, [r7, #4]
 8020600:	697a      	ldr	r2, [r7, #20]
 8020602:	621a      	str	r2, [r3, #32]
}
 8020604:	bf00      	nop
 8020606:	371c      	adds	r7, #28
 8020608:	46bd      	mov	sp, r7
 802060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802060e:	4770      	bx	lr
 8020610:	fffeff8f 	.word	0xfffeff8f
 8020614:	40010000 	.word	0x40010000
 8020618:	40010400 	.word	0x40010400
 802061c:	40014000 	.word	0x40014000
 8020620:	40014400 	.word	0x40014400
 8020624:	40014800 	.word	0x40014800

08020628 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8020628:	b480      	push	{r7}
 802062a:	b087      	sub	sp, #28
 802062c:	af00      	add	r7, sp, #0
 802062e:	6078      	str	r0, [r7, #4]
 8020630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020632:	687b      	ldr	r3, [r7, #4]
 8020634:	6a1b      	ldr	r3, [r3, #32]
 8020636:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8020638:	687b      	ldr	r3, [r7, #4]
 802063a:	6a1b      	ldr	r3, [r3, #32]
 802063c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8020640:	687b      	ldr	r3, [r7, #4]
 8020642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020644:	687b      	ldr	r3, [r7, #4]
 8020646:	685b      	ldr	r3, [r3, #4]
 8020648:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	69db      	ldr	r3, [r3, #28]
 802064e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8020650:	68fa      	ldr	r2, [r7, #12]
 8020652:	4b24      	ldr	r3, [pc, #144]	@ (80206e4 <TIM_OC4_SetConfig+0xbc>)
 8020654:	4013      	ands	r3, r2
 8020656:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8020658:	68fb      	ldr	r3, [r7, #12]
 802065a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 802065e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020660:	683b      	ldr	r3, [r7, #0]
 8020662:	681b      	ldr	r3, [r3, #0]
 8020664:	021b      	lsls	r3, r3, #8
 8020666:	68fa      	ldr	r2, [r7, #12]
 8020668:	4313      	orrs	r3, r2
 802066a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 802066c:	693b      	ldr	r3, [r7, #16]
 802066e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8020672:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8020674:	683b      	ldr	r3, [r7, #0]
 8020676:	689b      	ldr	r3, [r3, #8]
 8020678:	031b      	lsls	r3, r3, #12
 802067a:	693a      	ldr	r2, [r7, #16]
 802067c:	4313      	orrs	r3, r2
 802067e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020680:	687b      	ldr	r3, [r7, #4]
 8020682:	4a19      	ldr	r2, [pc, #100]	@ (80206e8 <TIM_OC4_SetConfig+0xc0>)
 8020684:	4293      	cmp	r3, r2
 8020686:	d00f      	beq.n	80206a8 <TIM_OC4_SetConfig+0x80>
 8020688:	687b      	ldr	r3, [r7, #4]
 802068a:	4a18      	ldr	r2, [pc, #96]	@ (80206ec <TIM_OC4_SetConfig+0xc4>)
 802068c:	4293      	cmp	r3, r2
 802068e:	d00b      	beq.n	80206a8 <TIM_OC4_SetConfig+0x80>
 8020690:	687b      	ldr	r3, [r7, #4]
 8020692:	4a17      	ldr	r2, [pc, #92]	@ (80206f0 <TIM_OC4_SetConfig+0xc8>)
 8020694:	4293      	cmp	r3, r2
 8020696:	d007      	beq.n	80206a8 <TIM_OC4_SetConfig+0x80>
 8020698:	687b      	ldr	r3, [r7, #4]
 802069a:	4a16      	ldr	r2, [pc, #88]	@ (80206f4 <TIM_OC4_SetConfig+0xcc>)
 802069c:	4293      	cmp	r3, r2
 802069e:	d003      	beq.n	80206a8 <TIM_OC4_SetConfig+0x80>
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	4a15      	ldr	r2, [pc, #84]	@ (80206f8 <TIM_OC4_SetConfig+0xd0>)
 80206a4:	4293      	cmp	r3, r2
 80206a6:	d109      	bne.n	80206bc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80206a8:	697b      	ldr	r3, [r7, #20]
 80206aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80206ae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80206b0:	683b      	ldr	r3, [r7, #0]
 80206b2:	695b      	ldr	r3, [r3, #20]
 80206b4:	019b      	lsls	r3, r3, #6
 80206b6:	697a      	ldr	r2, [r7, #20]
 80206b8:	4313      	orrs	r3, r2
 80206ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	697a      	ldr	r2, [r7, #20]
 80206c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80206c2:	687b      	ldr	r3, [r7, #4]
 80206c4:	68fa      	ldr	r2, [r7, #12]
 80206c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80206c8:	683b      	ldr	r3, [r7, #0]
 80206ca:	685a      	ldr	r2, [r3, #4]
 80206cc:	687b      	ldr	r3, [r7, #4]
 80206ce:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	693a      	ldr	r2, [r7, #16]
 80206d4:	621a      	str	r2, [r3, #32]
}
 80206d6:	bf00      	nop
 80206d8:	371c      	adds	r7, #28
 80206da:	46bd      	mov	sp, r7
 80206dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80206e0:	4770      	bx	lr
 80206e2:	bf00      	nop
 80206e4:	feff8fff 	.word	0xfeff8fff
 80206e8:	40010000 	.word	0x40010000
 80206ec:	40010400 	.word	0x40010400
 80206f0:	40014000 	.word	0x40014000
 80206f4:	40014400 	.word	0x40014400
 80206f8:	40014800 	.word	0x40014800

080206fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80206fc:	b480      	push	{r7}
 80206fe:	b087      	sub	sp, #28
 8020700:	af00      	add	r7, sp, #0
 8020702:	6078      	str	r0, [r7, #4]
 8020704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020706:	687b      	ldr	r3, [r7, #4]
 8020708:	6a1b      	ldr	r3, [r3, #32]
 802070a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	6a1b      	ldr	r3, [r3, #32]
 8020710:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8020714:	687b      	ldr	r3, [r7, #4]
 8020716:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8020718:	687b      	ldr	r3, [r7, #4]
 802071a:	685b      	ldr	r3, [r3, #4]
 802071c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 802071e:	687b      	ldr	r3, [r7, #4]
 8020720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8020724:	68fa      	ldr	r2, [r7, #12]
 8020726:	4b21      	ldr	r3, [pc, #132]	@ (80207ac <TIM_OC5_SetConfig+0xb0>)
 8020728:	4013      	ands	r3, r2
 802072a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 802072c:	683b      	ldr	r3, [r7, #0]
 802072e:	681b      	ldr	r3, [r3, #0]
 8020730:	68fa      	ldr	r2, [r7, #12]
 8020732:	4313      	orrs	r3, r2
 8020734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8020736:	693b      	ldr	r3, [r7, #16]
 8020738:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 802073c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 802073e:	683b      	ldr	r3, [r7, #0]
 8020740:	689b      	ldr	r3, [r3, #8]
 8020742:	041b      	lsls	r3, r3, #16
 8020744:	693a      	ldr	r2, [r7, #16]
 8020746:	4313      	orrs	r3, r2
 8020748:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	4a18      	ldr	r2, [pc, #96]	@ (80207b0 <TIM_OC5_SetConfig+0xb4>)
 802074e:	4293      	cmp	r3, r2
 8020750:	d00f      	beq.n	8020772 <TIM_OC5_SetConfig+0x76>
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	4a17      	ldr	r2, [pc, #92]	@ (80207b4 <TIM_OC5_SetConfig+0xb8>)
 8020756:	4293      	cmp	r3, r2
 8020758:	d00b      	beq.n	8020772 <TIM_OC5_SetConfig+0x76>
 802075a:	687b      	ldr	r3, [r7, #4]
 802075c:	4a16      	ldr	r2, [pc, #88]	@ (80207b8 <TIM_OC5_SetConfig+0xbc>)
 802075e:	4293      	cmp	r3, r2
 8020760:	d007      	beq.n	8020772 <TIM_OC5_SetConfig+0x76>
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	4a15      	ldr	r2, [pc, #84]	@ (80207bc <TIM_OC5_SetConfig+0xc0>)
 8020766:	4293      	cmp	r3, r2
 8020768:	d003      	beq.n	8020772 <TIM_OC5_SetConfig+0x76>
 802076a:	687b      	ldr	r3, [r7, #4]
 802076c:	4a14      	ldr	r2, [pc, #80]	@ (80207c0 <TIM_OC5_SetConfig+0xc4>)
 802076e:	4293      	cmp	r3, r2
 8020770:	d109      	bne.n	8020786 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8020772:	697b      	ldr	r3, [r7, #20]
 8020774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8020778:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 802077a:	683b      	ldr	r3, [r7, #0]
 802077c:	695b      	ldr	r3, [r3, #20]
 802077e:	021b      	lsls	r3, r3, #8
 8020780:	697a      	ldr	r2, [r7, #20]
 8020782:	4313      	orrs	r3, r2
 8020784:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020786:	687b      	ldr	r3, [r7, #4]
 8020788:	697a      	ldr	r2, [r7, #20]
 802078a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 802078c:	687b      	ldr	r3, [r7, #4]
 802078e:	68fa      	ldr	r2, [r7, #12]
 8020790:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8020792:	683b      	ldr	r3, [r7, #0]
 8020794:	685a      	ldr	r2, [r3, #4]
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 802079a:	687b      	ldr	r3, [r7, #4]
 802079c:	693a      	ldr	r2, [r7, #16]
 802079e:	621a      	str	r2, [r3, #32]
}
 80207a0:	bf00      	nop
 80207a2:	371c      	adds	r7, #28
 80207a4:	46bd      	mov	sp, r7
 80207a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207aa:	4770      	bx	lr
 80207ac:	fffeff8f 	.word	0xfffeff8f
 80207b0:	40010000 	.word	0x40010000
 80207b4:	40010400 	.word	0x40010400
 80207b8:	40014000 	.word	0x40014000
 80207bc:	40014400 	.word	0x40014400
 80207c0:	40014800 	.word	0x40014800

080207c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80207c4:	b480      	push	{r7}
 80207c6:	b087      	sub	sp, #28
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
 80207cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80207ce:	687b      	ldr	r3, [r7, #4]
 80207d0:	6a1b      	ldr	r3, [r3, #32]
 80207d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80207d4:	687b      	ldr	r3, [r7, #4]
 80207d6:	6a1b      	ldr	r3, [r3, #32]
 80207d8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	685b      	ldr	r3, [r3, #4]
 80207e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80207e6:	687b      	ldr	r3, [r7, #4]
 80207e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80207ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80207ec:	68fa      	ldr	r2, [r7, #12]
 80207ee:	4b22      	ldr	r3, [pc, #136]	@ (8020878 <TIM_OC6_SetConfig+0xb4>)
 80207f0:	4013      	ands	r3, r2
 80207f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80207f4:	683b      	ldr	r3, [r7, #0]
 80207f6:	681b      	ldr	r3, [r3, #0]
 80207f8:	021b      	lsls	r3, r3, #8
 80207fa:	68fa      	ldr	r2, [r7, #12]
 80207fc:	4313      	orrs	r3, r2
 80207fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8020800:	693b      	ldr	r3, [r7, #16]
 8020802:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8020806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8020808:	683b      	ldr	r3, [r7, #0]
 802080a:	689b      	ldr	r3, [r3, #8]
 802080c:	051b      	lsls	r3, r3, #20
 802080e:	693a      	ldr	r2, [r7, #16]
 8020810:	4313      	orrs	r3, r2
 8020812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020814:	687b      	ldr	r3, [r7, #4]
 8020816:	4a19      	ldr	r2, [pc, #100]	@ (802087c <TIM_OC6_SetConfig+0xb8>)
 8020818:	4293      	cmp	r3, r2
 802081a:	d00f      	beq.n	802083c <TIM_OC6_SetConfig+0x78>
 802081c:	687b      	ldr	r3, [r7, #4]
 802081e:	4a18      	ldr	r2, [pc, #96]	@ (8020880 <TIM_OC6_SetConfig+0xbc>)
 8020820:	4293      	cmp	r3, r2
 8020822:	d00b      	beq.n	802083c <TIM_OC6_SetConfig+0x78>
 8020824:	687b      	ldr	r3, [r7, #4]
 8020826:	4a17      	ldr	r2, [pc, #92]	@ (8020884 <TIM_OC6_SetConfig+0xc0>)
 8020828:	4293      	cmp	r3, r2
 802082a:	d007      	beq.n	802083c <TIM_OC6_SetConfig+0x78>
 802082c:	687b      	ldr	r3, [r7, #4]
 802082e:	4a16      	ldr	r2, [pc, #88]	@ (8020888 <TIM_OC6_SetConfig+0xc4>)
 8020830:	4293      	cmp	r3, r2
 8020832:	d003      	beq.n	802083c <TIM_OC6_SetConfig+0x78>
 8020834:	687b      	ldr	r3, [r7, #4]
 8020836:	4a15      	ldr	r2, [pc, #84]	@ (802088c <TIM_OC6_SetConfig+0xc8>)
 8020838:	4293      	cmp	r3, r2
 802083a:	d109      	bne.n	8020850 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 802083c:	697b      	ldr	r3, [r7, #20]
 802083e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8020842:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020844:	683b      	ldr	r3, [r7, #0]
 8020846:	695b      	ldr	r3, [r3, #20]
 8020848:	029b      	lsls	r3, r3, #10
 802084a:	697a      	ldr	r2, [r7, #20]
 802084c:	4313      	orrs	r3, r2
 802084e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8020850:	687b      	ldr	r3, [r7, #4]
 8020852:	697a      	ldr	r2, [r7, #20]
 8020854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020856:	687b      	ldr	r3, [r7, #4]
 8020858:	68fa      	ldr	r2, [r7, #12]
 802085a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 802085c:	683b      	ldr	r3, [r7, #0]
 802085e:	685a      	ldr	r2, [r3, #4]
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8020864:	687b      	ldr	r3, [r7, #4]
 8020866:	693a      	ldr	r2, [r7, #16]
 8020868:	621a      	str	r2, [r3, #32]
}
 802086a:	bf00      	nop
 802086c:	371c      	adds	r7, #28
 802086e:	46bd      	mov	sp, r7
 8020870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020874:	4770      	bx	lr
 8020876:	bf00      	nop
 8020878:	feff8fff 	.word	0xfeff8fff
 802087c:	40010000 	.word	0x40010000
 8020880:	40010400 	.word	0x40010400
 8020884:	40014000 	.word	0x40014000
 8020888:	40014400 	.word	0x40014400
 802088c:	40014800 	.word	0x40014800

08020890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020890:	b480      	push	{r7}
 8020892:	b087      	sub	sp, #28
 8020894:	af00      	add	r7, sp, #0
 8020896:	60f8      	str	r0, [r7, #12]
 8020898:	60b9      	str	r1, [r7, #8]
 802089a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 802089c:	68fb      	ldr	r3, [r7, #12]
 802089e:	6a1b      	ldr	r3, [r3, #32]
 80208a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80208a2:	68fb      	ldr	r3, [r7, #12]
 80208a4:	6a1b      	ldr	r3, [r3, #32]
 80208a6:	f023 0201 	bic.w	r2, r3, #1
 80208aa:	68fb      	ldr	r3, [r7, #12]
 80208ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80208ae:	68fb      	ldr	r3, [r7, #12]
 80208b0:	699b      	ldr	r3, [r3, #24]
 80208b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80208b4:	693b      	ldr	r3, [r7, #16]
 80208b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80208ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80208bc:	687b      	ldr	r3, [r7, #4]
 80208be:	011b      	lsls	r3, r3, #4
 80208c0:	693a      	ldr	r2, [r7, #16]
 80208c2:	4313      	orrs	r3, r2
 80208c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80208c6:	697b      	ldr	r3, [r7, #20]
 80208c8:	f023 030a 	bic.w	r3, r3, #10
 80208cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80208ce:	697a      	ldr	r2, [r7, #20]
 80208d0:	68bb      	ldr	r3, [r7, #8]
 80208d2:	4313      	orrs	r3, r2
 80208d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80208d6:	68fb      	ldr	r3, [r7, #12]
 80208d8:	693a      	ldr	r2, [r7, #16]
 80208da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80208dc:	68fb      	ldr	r3, [r7, #12]
 80208de:	697a      	ldr	r2, [r7, #20]
 80208e0:	621a      	str	r2, [r3, #32]
}
 80208e2:	bf00      	nop
 80208e4:	371c      	adds	r7, #28
 80208e6:	46bd      	mov	sp, r7
 80208e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208ec:	4770      	bx	lr

080208ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80208ee:	b480      	push	{r7}
 80208f0:	b087      	sub	sp, #28
 80208f2:	af00      	add	r7, sp, #0
 80208f4:	60f8      	str	r0, [r7, #12]
 80208f6:	60b9      	str	r1, [r7, #8]
 80208f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80208fa:	68fb      	ldr	r3, [r7, #12]
 80208fc:	6a1b      	ldr	r3, [r3, #32]
 80208fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020900:	68fb      	ldr	r3, [r7, #12]
 8020902:	6a1b      	ldr	r3, [r3, #32]
 8020904:	f023 0210 	bic.w	r2, r3, #16
 8020908:	68fb      	ldr	r3, [r7, #12]
 802090a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802090c:	68fb      	ldr	r3, [r7, #12]
 802090e:	699b      	ldr	r3, [r3, #24]
 8020910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020912:	693b      	ldr	r3, [r7, #16]
 8020914:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8020918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	031b      	lsls	r3, r3, #12
 802091e:	693a      	ldr	r2, [r7, #16]
 8020920:	4313      	orrs	r3, r2
 8020922:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020924:	697b      	ldr	r3, [r7, #20]
 8020926:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 802092a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 802092c:	68bb      	ldr	r3, [r7, #8]
 802092e:	011b      	lsls	r3, r3, #4
 8020930:	697a      	ldr	r2, [r7, #20]
 8020932:	4313      	orrs	r3, r2
 8020934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020936:	68fb      	ldr	r3, [r7, #12]
 8020938:	693a      	ldr	r2, [r7, #16]
 802093a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 802093c:	68fb      	ldr	r3, [r7, #12]
 802093e:	697a      	ldr	r2, [r7, #20]
 8020940:	621a      	str	r2, [r3, #32]
}
 8020942:	bf00      	nop
 8020944:	371c      	adds	r7, #28
 8020946:	46bd      	mov	sp, r7
 8020948:	f85d 7b04 	ldr.w	r7, [sp], #4
 802094c:	4770      	bx	lr
	...

08020950 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020950:	b480      	push	{r7}
 8020952:	b085      	sub	sp, #20
 8020954:	af00      	add	r7, sp, #0
 8020956:	6078      	str	r0, [r7, #4]
 8020958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	689b      	ldr	r3, [r3, #8]
 802095e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8020960:	68fa      	ldr	r2, [r7, #12]
 8020962:	4b09      	ldr	r3, [pc, #36]	@ (8020988 <TIM_ITRx_SetConfig+0x38>)
 8020964:	4013      	ands	r3, r2
 8020966:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8020968:	683a      	ldr	r2, [r7, #0]
 802096a:	68fb      	ldr	r3, [r7, #12]
 802096c:	4313      	orrs	r3, r2
 802096e:	f043 0307 	orr.w	r3, r3, #7
 8020972:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020974:	687b      	ldr	r3, [r7, #4]
 8020976:	68fa      	ldr	r2, [r7, #12]
 8020978:	609a      	str	r2, [r3, #8]
}
 802097a:	bf00      	nop
 802097c:	3714      	adds	r7, #20
 802097e:	46bd      	mov	sp, r7
 8020980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020984:	4770      	bx	lr
 8020986:	bf00      	nop
 8020988:	ffcfff8f 	.word	0xffcfff8f

0802098c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 802098c:	b480      	push	{r7}
 802098e:	b087      	sub	sp, #28
 8020990:	af00      	add	r7, sp, #0
 8020992:	60f8      	str	r0, [r7, #12]
 8020994:	60b9      	str	r1, [r7, #8]
 8020996:	607a      	str	r2, [r7, #4]
 8020998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 802099a:	68fb      	ldr	r3, [r7, #12]
 802099c:	689b      	ldr	r3, [r3, #8]
 802099e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80209a0:	697b      	ldr	r3, [r7, #20]
 80209a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80209a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80209a8:	683b      	ldr	r3, [r7, #0]
 80209aa:	021a      	lsls	r2, r3, #8
 80209ac:	687b      	ldr	r3, [r7, #4]
 80209ae:	431a      	orrs	r2, r3
 80209b0:	68bb      	ldr	r3, [r7, #8]
 80209b2:	4313      	orrs	r3, r2
 80209b4:	697a      	ldr	r2, [r7, #20]
 80209b6:	4313      	orrs	r3, r2
 80209b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80209ba:	68fb      	ldr	r3, [r7, #12]
 80209bc:	697a      	ldr	r2, [r7, #20]
 80209be:	609a      	str	r2, [r3, #8]
}
 80209c0:	bf00      	nop
 80209c2:	371c      	adds	r7, #28
 80209c4:	46bd      	mov	sp, r7
 80209c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80209ca:	4770      	bx	lr

080209cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80209cc:	b480      	push	{r7}
 80209ce:	b085      	sub	sp, #20
 80209d0:	af00      	add	r7, sp, #0
 80209d2:	6078      	str	r0, [r7, #4]
 80209d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80209d6:	687b      	ldr	r3, [r7, #4]
 80209d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80209dc:	2b01      	cmp	r3, #1
 80209de:	d101      	bne.n	80209e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80209e0:	2302      	movs	r3, #2
 80209e2:	e06d      	b.n	8020ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80209e4:	687b      	ldr	r3, [r7, #4]
 80209e6:	2201      	movs	r2, #1
 80209e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80209ec:	687b      	ldr	r3, [r7, #4]
 80209ee:	2202      	movs	r2, #2
 80209f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	681b      	ldr	r3, [r3, #0]
 80209f8:	685b      	ldr	r3, [r3, #4]
 80209fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80209fc:	687b      	ldr	r3, [r7, #4]
 80209fe:	681b      	ldr	r3, [r3, #0]
 8020a00:	689b      	ldr	r3, [r3, #8]
 8020a02:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	681b      	ldr	r3, [r3, #0]
 8020a08:	4a30      	ldr	r2, [pc, #192]	@ (8020acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8020a0a:	4293      	cmp	r3, r2
 8020a0c:	d004      	beq.n	8020a18 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8020a0e:	687b      	ldr	r3, [r7, #4]
 8020a10:	681b      	ldr	r3, [r3, #0]
 8020a12:	4a2f      	ldr	r2, [pc, #188]	@ (8020ad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020a14:	4293      	cmp	r3, r2
 8020a16:	d108      	bne.n	8020a2a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8020a18:	68fb      	ldr	r3, [r7, #12]
 8020a1a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8020a1e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8020a20:	683b      	ldr	r3, [r7, #0]
 8020a22:	685b      	ldr	r3, [r3, #4]
 8020a24:	68fa      	ldr	r2, [r7, #12]
 8020a26:	4313      	orrs	r3, r2
 8020a28:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8020a2a:	68fb      	ldr	r3, [r7, #12]
 8020a2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8020a30:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8020a32:	683b      	ldr	r3, [r7, #0]
 8020a34:	681b      	ldr	r3, [r3, #0]
 8020a36:	68fa      	ldr	r2, [r7, #12]
 8020a38:	4313      	orrs	r3, r2
 8020a3a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020a3c:	687b      	ldr	r3, [r7, #4]
 8020a3e:	681b      	ldr	r3, [r3, #0]
 8020a40:	68fa      	ldr	r2, [r7, #12]
 8020a42:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020a44:	687b      	ldr	r3, [r7, #4]
 8020a46:	681b      	ldr	r3, [r3, #0]
 8020a48:	4a20      	ldr	r2, [pc, #128]	@ (8020acc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8020a4a:	4293      	cmp	r3, r2
 8020a4c:	d022      	beq.n	8020a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020a4e:	687b      	ldr	r3, [r7, #4]
 8020a50:	681b      	ldr	r3, [r3, #0]
 8020a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8020a56:	d01d      	beq.n	8020a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020a58:	687b      	ldr	r3, [r7, #4]
 8020a5a:	681b      	ldr	r3, [r3, #0]
 8020a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8020ad4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8020a5e:	4293      	cmp	r3, r2
 8020a60:	d018      	beq.n	8020a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020a62:	687b      	ldr	r3, [r7, #4]
 8020a64:	681b      	ldr	r3, [r3, #0]
 8020a66:	4a1c      	ldr	r2, [pc, #112]	@ (8020ad8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8020a68:	4293      	cmp	r3, r2
 8020a6a:	d013      	beq.n	8020a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020a6c:	687b      	ldr	r3, [r7, #4]
 8020a6e:	681b      	ldr	r3, [r3, #0]
 8020a70:	4a1a      	ldr	r2, [pc, #104]	@ (8020adc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8020a72:	4293      	cmp	r3, r2
 8020a74:	d00e      	beq.n	8020a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020a76:	687b      	ldr	r3, [r7, #4]
 8020a78:	681b      	ldr	r3, [r3, #0]
 8020a7a:	4a15      	ldr	r2, [pc, #84]	@ (8020ad0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8020a7c:	4293      	cmp	r3, r2
 8020a7e:	d009      	beq.n	8020a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020a80:	687b      	ldr	r3, [r7, #4]
 8020a82:	681b      	ldr	r3, [r3, #0]
 8020a84:	4a16      	ldr	r2, [pc, #88]	@ (8020ae0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020a86:	4293      	cmp	r3, r2
 8020a88:	d004      	beq.n	8020a94 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	681b      	ldr	r3, [r3, #0]
 8020a8e:	4a15      	ldr	r2, [pc, #84]	@ (8020ae4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020a90:	4293      	cmp	r3, r2
 8020a92:	d10c      	bne.n	8020aae <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020a94:	68bb      	ldr	r3, [r7, #8]
 8020a96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020a9a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020a9c:	683b      	ldr	r3, [r7, #0]
 8020a9e:	689b      	ldr	r3, [r3, #8]
 8020aa0:	68ba      	ldr	r2, [r7, #8]
 8020aa2:	4313      	orrs	r3, r2
 8020aa4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	681b      	ldr	r3, [r3, #0]
 8020aaa:	68ba      	ldr	r2, [r7, #8]
 8020aac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020aae:	687b      	ldr	r3, [r7, #4]
 8020ab0:	2201      	movs	r2, #1
 8020ab2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8020ab6:	687b      	ldr	r3, [r7, #4]
 8020ab8:	2200      	movs	r2, #0
 8020aba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8020abe:	2300      	movs	r3, #0
}
 8020ac0:	4618      	mov	r0, r3
 8020ac2:	3714      	adds	r7, #20
 8020ac4:	46bd      	mov	sp, r7
 8020ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020aca:	4770      	bx	lr
 8020acc:	40010000 	.word	0x40010000
 8020ad0:	40010400 	.word	0x40010400
 8020ad4:	40000400 	.word	0x40000400
 8020ad8:	40000800 	.word	0x40000800
 8020adc:	40000c00 	.word	0x40000c00
 8020ae0:	40001800 	.word	0x40001800
 8020ae4:	40014000 	.word	0x40014000

08020ae8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8020ae8:	b580      	push	{r7, lr}
 8020aea:	b082      	sub	sp, #8
 8020aec:	af00      	add	r7, sp, #0
 8020aee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8020af0:	687b      	ldr	r3, [r7, #4]
 8020af2:	2b00      	cmp	r3, #0
 8020af4:	d101      	bne.n	8020afa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8020af6:	2301      	movs	r3, #1
 8020af8:	e042      	b.n	8020b80 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8020b00:	2b00      	cmp	r3, #0
 8020b02:	d106      	bne.n	8020b12 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8020b04:	687b      	ldr	r3, [r7, #4]
 8020b06:	2200      	movs	r2, #0
 8020b08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8020b0c:	6878      	ldr	r0, [r7, #4]
 8020b0e:	f7e1 fef7 	bl	8002900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	2224      	movs	r2, #36	@ 0x24
 8020b16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8020b1a:	687b      	ldr	r3, [r7, #4]
 8020b1c:	681b      	ldr	r3, [r3, #0]
 8020b1e:	681a      	ldr	r2, [r3, #0]
 8020b20:	687b      	ldr	r3, [r7, #4]
 8020b22:	681b      	ldr	r3, [r3, #0]
 8020b24:	f022 0201 	bic.w	r2, r2, #1
 8020b28:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020b2e:	2b00      	cmp	r3, #0
 8020b30:	d002      	beq.n	8020b38 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8020b32:	6878      	ldr	r0, [r7, #4]
 8020b34:	f000 fd90 	bl	8021658 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8020b38:	6878      	ldr	r0, [r7, #4]
 8020b3a:	f000 f825 	bl	8020b88 <UART_SetConfig>
 8020b3e:	4603      	mov	r3, r0
 8020b40:	2b01      	cmp	r3, #1
 8020b42:	d101      	bne.n	8020b48 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8020b44:	2301      	movs	r3, #1
 8020b46:	e01b      	b.n	8020b80 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8020b48:	687b      	ldr	r3, [r7, #4]
 8020b4a:	681b      	ldr	r3, [r3, #0]
 8020b4c:	685a      	ldr	r2, [r3, #4]
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8020b56:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8020b58:	687b      	ldr	r3, [r7, #4]
 8020b5a:	681b      	ldr	r3, [r3, #0]
 8020b5c:	689a      	ldr	r2, [r3, #8]
 8020b5e:	687b      	ldr	r3, [r7, #4]
 8020b60:	681b      	ldr	r3, [r3, #0]
 8020b62:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8020b66:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8020b68:	687b      	ldr	r3, [r7, #4]
 8020b6a:	681b      	ldr	r3, [r3, #0]
 8020b6c:	681a      	ldr	r2, [r3, #0]
 8020b6e:	687b      	ldr	r3, [r7, #4]
 8020b70:	681b      	ldr	r3, [r3, #0]
 8020b72:	f042 0201 	orr.w	r2, r2, #1
 8020b76:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8020b78:	6878      	ldr	r0, [r7, #4]
 8020b7a:	f000 fe0f 	bl	802179c <UART_CheckIdleState>
 8020b7e:	4603      	mov	r3, r0
}
 8020b80:	4618      	mov	r0, r3
 8020b82:	3708      	adds	r7, #8
 8020b84:	46bd      	mov	sp, r7
 8020b86:	bd80      	pop	{r7, pc}

08020b88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8020b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020b8c:	b092      	sub	sp, #72	@ 0x48
 8020b8e:	af00      	add	r7, sp, #0
 8020b90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8020b92:	2300      	movs	r3, #0
 8020b94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	689a      	ldr	r2, [r3, #8]
 8020b9c:	697b      	ldr	r3, [r7, #20]
 8020b9e:	691b      	ldr	r3, [r3, #16]
 8020ba0:	431a      	orrs	r2, r3
 8020ba2:	697b      	ldr	r3, [r7, #20]
 8020ba4:	695b      	ldr	r3, [r3, #20]
 8020ba6:	431a      	orrs	r2, r3
 8020ba8:	697b      	ldr	r3, [r7, #20]
 8020baa:	69db      	ldr	r3, [r3, #28]
 8020bac:	4313      	orrs	r3, r2
 8020bae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8020bb0:	697b      	ldr	r3, [r7, #20]
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	681a      	ldr	r2, [r3, #0]
 8020bb6:	4bbe      	ldr	r3, [pc, #760]	@ (8020eb0 <UART_SetConfig+0x328>)
 8020bb8:	4013      	ands	r3, r2
 8020bba:	697a      	ldr	r2, [r7, #20]
 8020bbc:	6812      	ldr	r2, [r2, #0]
 8020bbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020bc0:	430b      	orrs	r3, r1
 8020bc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8020bc4:	697b      	ldr	r3, [r7, #20]
 8020bc6:	681b      	ldr	r3, [r3, #0]
 8020bc8:	685b      	ldr	r3, [r3, #4]
 8020bca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8020bce:	697b      	ldr	r3, [r7, #20]
 8020bd0:	68da      	ldr	r2, [r3, #12]
 8020bd2:	697b      	ldr	r3, [r7, #20]
 8020bd4:	681b      	ldr	r3, [r3, #0]
 8020bd6:	430a      	orrs	r2, r1
 8020bd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8020bda:	697b      	ldr	r3, [r7, #20]
 8020bdc:	699b      	ldr	r3, [r3, #24]
 8020bde:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8020be0:	697b      	ldr	r3, [r7, #20]
 8020be2:	681b      	ldr	r3, [r3, #0]
 8020be4:	4ab3      	ldr	r2, [pc, #716]	@ (8020eb4 <UART_SetConfig+0x32c>)
 8020be6:	4293      	cmp	r3, r2
 8020be8:	d004      	beq.n	8020bf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8020bea:	697b      	ldr	r3, [r7, #20]
 8020bec:	6a1b      	ldr	r3, [r3, #32]
 8020bee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020bf0:	4313      	orrs	r3, r2
 8020bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8020bf4:	697b      	ldr	r3, [r7, #20]
 8020bf6:	681b      	ldr	r3, [r3, #0]
 8020bf8:	689a      	ldr	r2, [r3, #8]
 8020bfa:	4baf      	ldr	r3, [pc, #700]	@ (8020eb8 <UART_SetConfig+0x330>)
 8020bfc:	4013      	ands	r3, r2
 8020bfe:	697a      	ldr	r2, [r7, #20]
 8020c00:	6812      	ldr	r2, [r2, #0]
 8020c02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8020c04:	430b      	orrs	r3, r1
 8020c06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8020c08:	697b      	ldr	r3, [r7, #20]
 8020c0a:	681b      	ldr	r3, [r3, #0]
 8020c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020c0e:	f023 010f 	bic.w	r1, r3, #15
 8020c12:	697b      	ldr	r3, [r7, #20]
 8020c14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8020c16:	697b      	ldr	r3, [r7, #20]
 8020c18:	681b      	ldr	r3, [r3, #0]
 8020c1a:	430a      	orrs	r2, r1
 8020c1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8020c1e:	697b      	ldr	r3, [r7, #20]
 8020c20:	681b      	ldr	r3, [r3, #0]
 8020c22:	4aa6      	ldr	r2, [pc, #664]	@ (8020ebc <UART_SetConfig+0x334>)
 8020c24:	4293      	cmp	r3, r2
 8020c26:	d177      	bne.n	8020d18 <UART_SetConfig+0x190>
 8020c28:	4ba5      	ldr	r3, [pc, #660]	@ (8020ec0 <UART_SetConfig+0x338>)
 8020c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020c2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8020c30:	2b28      	cmp	r3, #40	@ 0x28
 8020c32:	d86d      	bhi.n	8020d10 <UART_SetConfig+0x188>
 8020c34:	a201      	add	r2, pc, #4	@ (adr r2, 8020c3c <UART_SetConfig+0xb4>)
 8020c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c3a:	bf00      	nop
 8020c3c:	08020ce1 	.word	0x08020ce1
 8020c40:	08020d11 	.word	0x08020d11
 8020c44:	08020d11 	.word	0x08020d11
 8020c48:	08020d11 	.word	0x08020d11
 8020c4c:	08020d11 	.word	0x08020d11
 8020c50:	08020d11 	.word	0x08020d11
 8020c54:	08020d11 	.word	0x08020d11
 8020c58:	08020d11 	.word	0x08020d11
 8020c5c:	08020ce9 	.word	0x08020ce9
 8020c60:	08020d11 	.word	0x08020d11
 8020c64:	08020d11 	.word	0x08020d11
 8020c68:	08020d11 	.word	0x08020d11
 8020c6c:	08020d11 	.word	0x08020d11
 8020c70:	08020d11 	.word	0x08020d11
 8020c74:	08020d11 	.word	0x08020d11
 8020c78:	08020d11 	.word	0x08020d11
 8020c7c:	08020cf1 	.word	0x08020cf1
 8020c80:	08020d11 	.word	0x08020d11
 8020c84:	08020d11 	.word	0x08020d11
 8020c88:	08020d11 	.word	0x08020d11
 8020c8c:	08020d11 	.word	0x08020d11
 8020c90:	08020d11 	.word	0x08020d11
 8020c94:	08020d11 	.word	0x08020d11
 8020c98:	08020d11 	.word	0x08020d11
 8020c9c:	08020cf9 	.word	0x08020cf9
 8020ca0:	08020d11 	.word	0x08020d11
 8020ca4:	08020d11 	.word	0x08020d11
 8020ca8:	08020d11 	.word	0x08020d11
 8020cac:	08020d11 	.word	0x08020d11
 8020cb0:	08020d11 	.word	0x08020d11
 8020cb4:	08020d11 	.word	0x08020d11
 8020cb8:	08020d11 	.word	0x08020d11
 8020cbc:	08020d01 	.word	0x08020d01
 8020cc0:	08020d11 	.word	0x08020d11
 8020cc4:	08020d11 	.word	0x08020d11
 8020cc8:	08020d11 	.word	0x08020d11
 8020ccc:	08020d11 	.word	0x08020d11
 8020cd0:	08020d11 	.word	0x08020d11
 8020cd4:	08020d11 	.word	0x08020d11
 8020cd8:	08020d11 	.word	0x08020d11
 8020cdc:	08020d09 	.word	0x08020d09
 8020ce0:	2301      	movs	r3, #1
 8020ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ce6:	e222      	b.n	802112e <UART_SetConfig+0x5a6>
 8020ce8:	2304      	movs	r3, #4
 8020cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cee:	e21e      	b.n	802112e <UART_SetConfig+0x5a6>
 8020cf0:	2308      	movs	r3, #8
 8020cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cf6:	e21a      	b.n	802112e <UART_SetConfig+0x5a6>
 8020cf8:	2310      	movs	r3, #16
 8020cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020cfe:	e216      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d00:	2320      	movs	r3, #32
 8020d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d06:	e212      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d08:	2340      	movs	r3, #64	@ 0x40
 8020d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d0e:	e20e      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d10:	2380      	movs	r3, #128	@ 0x80
 8020d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d16:	e20a      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d18:	697b      	ldr	r3, [r7, #20]
 8020d1a:	681b      	ldr	r3, [r3, #0]
 8020d1c:	4a69      	ldr	r2, [pc, #420]	@ (8020ec4 <UART_SetConfig+0x33c>)
 8020d1e:	4293      	cmp	r3, r2
 8020d20:	d130      	bne.n	8020d84 <UART_SetConfig+0x1fc>
 8020d22:	4b67      	ldr	r3, [pc, #412]	@ (8020ec0 <UART_SetConfig+0x338>)
 8020d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020d26:	f003 0307 	and.w	r3, r3, #7
 8020d2a:	2b05      	cmp	r3, #5
 8020d2c:	d826      	bhi.n	8020d7c <UART_SetConfig+0x1f4>
 8020d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8020d34 <UART_SetConfig+0x1ac>)
 8020d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020d34:	08020d4d 	.word	0x08020d4d
 8020d38:	08020d55 	.word	0x08020d55
 8020d3c:	08020d5d 	.word	0x08020d5d
 8020d40:	08020d65 	.word	0x08020d65
 8020d44:	08020d6d 	.word	0x08020d6d
 8020d48:	08020d75 	.word	0x08020d75
 8020d4c:	2300      	movs	r3, #0
 8020d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d52:	e1ec      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d54:	2304      	movs	r3, #4
 8020d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d5a:	e1e8      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d5c:	2308      	movs	r3, #8
 8020d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d62:	e1e4      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d64:	2310      	movs	r3, #16
 8020d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d6a:	e1e0      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d6c:	2320      	movs	r3, #32
 8020d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d72:	e1dc      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d74:	2340      	movs	r3, #64	@ 0x40
 8020d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d7a:	e1d8      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d7c:	2380      	movs	r3, #128	@ 0x80
 8020d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020d82:	e1d4      	b.n	802112e <UART_SetConfig+0x5a6>
 8020d84:	697b      	ldr	r3, [r7, #20]
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	4a4f      	ldr	r2, [pc, #316]	@ (8020ec8 <UART_SetConfig+0x340>)
 8020d8a:	4293      	cmp	r3, r2
 8020d8c:	d130      	bne.n	8020df0 <UART_SetConfig+0x268>
 8020d8e:	4b4c      	ldr	r3, [pc, #304]	@ (8020ec0 <UART_SetConfig+0x338>)
 8020d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020d92:	f003 0307 	and.w	r3, r3, #7
 8020d96:	2b05      	cmp	r3, #5
 8020d98:	d826      	bhi.n	8020de8 <UART_SetConfig+0x260>
 8020d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8020da0 <UART_SetConfig+0x218>)
 8020d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020da0:	08020db9 	.word	0x08020db9
 8020da4:	08020dc1 	.word	0x08020dc1
 8020da8:	08020dc9 	.word	0x08020dc9
 8020dac:	08020dd1 	.word	0x08020dd1
 8020db0:	08020dd9 	.word	0x08020dd9
 8020db4:	08020de1 	.word	0x08020de1
 8020db8:	2300      	movs	r3, #0
 8020dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dbe:	e1b6      	b.n	802112e <UART_SetConfig+0x5a6>
 8020dc0:	2304      	movs	r3, #4
 8020dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dc6:	e1b2      	b.n	802112e <UART_SetConfig+0x5a6>
 8020dc8:	2308      	movs	r3, #8
 8020dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dce:	e1ae      	b.n	802112e <UART_SetConfig+0x5a6>
 8020dd0:	2310      	movs	r3, #16
 8020dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dd6:	e1aa      	b.n	802112e <UART_SetConfig+0x5a6>
 8020dd8:	2320      	movs	r3, #32
 8020dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dde:	e1a6      	b.n	802112e <UART_SetConfig+0x5a6>
 8020de0:	2340      	movs	r3, #64	@ 0x40
 8020de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020de6:	e1a2      	b.n	802112e <UART_SetConfig+0x5a6>
 8020de8:	2380      	movs	r3, #128	@ 0x80
 8020dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020dee:	e19e      	b.n	802112e <UART_SetConfig+0x5a6>
 8020df0:	697b      	ldr	r3, [r7, #20]
 8020df2:	681b      	ldr	r3, [r3, #0]
 8020df4:	4a35      	ldr	r2, [pc, #212]	@ (8020ecc <UART_SetConfig+0x344>)
 8020df6:	4293      	cmp	r3, r2
 8020df8:	d130      	bne.n	8020e5c <UART_SetConfig+0x2d4>
 8020dfa:	4b31      	ldr	r3, [pc, #196]	@ (8020ec0 <UART_SetConfig+0x338>)
 8020dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020dfe:	f003 0307 	and.w	r3, r3, #7
 8020e02:	2b05      	cmp	r3, #5
 8020e04:	d826      	bhi.n	8020e54 <UART_SetConfig+0x2cc>
 8020e06:	a201      	add	r2, pc, #4	@ (adr r2, 8020e0c <UART_SetConfig+0x284>)
 8020e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e0c:	08020e25 	.word	0x08020e25
 8020e10:	08020e2d 	.word	0x08020e2d
 8020e14:	08020e35 	.word	0x08020e35
 8020e18:	08020e3d 	.word	0x08020e3d
 8020e1c:	08020e45 	.word	0x08020e45
 8020e20:	08020e4d 	.word	0x08020e4d
 8020e24:	2300      	movs	r3, #0
 8020e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e2a:	e180      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e2c:	2304      	movs	r3, #4
 8020e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e32:	e17c      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e34:	2308      	movs	r3, #8
 8020e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e3a:	e178      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e3c:	2310      	movs	r3, #16
 8020e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e42:	e174      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e44:	2320      	movs	r3, #32
 8020e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e4a:	e170      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e4c:	2340      	movs	r3, #64	@ 0x40
 8020e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e52:	e16c      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e54:	2380      	movs	r3, #128	@ 0x80
 8020e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e5a:	e168      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e5c:	697b      	ldr	r3, [r7, #20]
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	4a1b      	ldr	r2, [pc, #108]	@ (8020ed0 <UART_SetConfig+0x348>)
 8020e62:	4293      	cmp	r3, r2
 8020e64:	d142      	bne.n	8020eec <UART_SetConfig+0x364>
 8020e66:	4b16      	ldr	r3, [pc, #88]	@ (8020ec0 <UART_SetConfig+0x338>)
 8020e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020e6a:	f003 0307 	and.w	r3, r3, #7
 8020e6e:	2b05      	cmp	r3, #5
 8020e70:	d838      	bhi.n	8020ee4 <UART_SetConfig+0x35c>
 8020e72:	a201      	add	r2, pc, #4	@ (adr r2, 8020e78 <UART_SetConfig+0x2f0>)
 8020e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020e78:	08020e91 	.word	0x08020e91
 8020e7c:	08020e99 	.word	0x08020e99
 8020e80:	08020ea1 	.word	0x08020ea1
 8020e84:	08020ea9 	.word	0x08020ea9
 8020e88:	08020ed5 	.word	0x08020ed5
 8020e8c:	08020edd 	.word	0x08020edd
 8020e90:	2300      	movs	r3, #0
 8020e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e96:	e14a      	b.n	802112e <UART_SetConfig+0x5a6>
 8020e98:	2304      	movs	r3, #4
 8020e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020e9e:	e146      	b.n	802112e <UART_SetConfig+0x5a6>
 8020ea0:	2308      	movs	r3, #8
 8020ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ea6:	e142      	b.n	802112e <UART_SetConfig+0x5a6>
 8020ea8:	2310      	movs	r3, #16
 8020eaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020eae:	e13e      	b.n	802112e <UART_SetConfig+0x5a6>
 8020eb0:	cfff69f3 	.word	0xcfff69f3
 8020eb4:	58000c00 	.word	0x58000c00
 8020eb8:	11fff4ff 	.word	0x11fff4ff
 8020ebc:	40011000 	.word	0x40011000
 8020ec0:	58024400 	.word	0x58024400
 8020ec4:	40004400 	.word	0x40004400
 8020ec8:	40004800 	.word	0x40004800
 8020ecc:	40004c00 	.word	0x40004c00
 8020ed0:	40005000 	.word	0x40005000
 8020ed4:	2320      	movs	r3, #32
 8020ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020eda:	e128      	b.n	802112e <UART_SetConfig+0x5a6>
 8020edc:	2340      	movs	r3, #64	@ 0x40
 8020ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020ee2:	e124      	b.n	802112e <UART_SetConfig+0x5a6>
 8020ee4:	2380      	movs	r3, #128	@ 0x80
 8020ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020eea:	e120      	b.n	802112e <UART_SetConfig+0x5a6>
 8020eec:	697b      	ldr	r3, [r7, #20]
 8020eee:	681b      	ldr	r3, [r3, #0]
 8020ef0:	4acb      	ldr	r2, [pc, #812]	@ (8021220 <UART_SetConfig+0x698>)
 8020ef2:	4293      	cmp	r3, r2
 8020ef4:	d176      	bne.n	8020fe4 <UART_SetConfig+0x45c>
 8020ef6:	4bcb      	ldr	r3, [pc, #812]	@ (8021224 <UART_SetConfig+0x69c>)
 8020ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020efa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8020efe:	2b28      	cmp	r3, #40	@ 0x28
 8020f00:	d86c      	bhi.n	8020fdc <UART_SetConfig+0x454>
 8020f02:	a201      	add	r2, pc, #4	@ (adr r2, 8020f08 <UART_SetConfig+0x380>)
 8020f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020f08:	08020fad 	.word	0x08020fad
 8020f0c:	08020fdd 	.word	0x08020fdd
 8020f10:	08020fdd 	.word	0x08020fdd
 8020f14:	08020fdd 	.word	0x08020fdd
 8020f18:	08020fdd 	.word	0x08020fdd
 8020f1c:	08020fdd 	.word	0x08020fdd
 8020f20:	08020fdd 	.word	0x08020fdd
 8020f24:	08020fdd 	.word	0x08020fdd
 8020f28:	08020fb5 	.word	0x08020fb5
 8020f2c:	08020fdd 	.word	0x08020fdd
 8020f30:	08020fdd 	.word	0x08020fdd
 8020f34:	08020fdd 	.word	0x08020fdd
 8020f38:	08020fdd 	.word	0x08020fdd
 8020f3c:	08020fdd 	.word	0x08020fdd
 8020f40:	08020fdd 	.word	0x08020fdd
 8020f44:	08020fdd 	.word	0x08020fdd
 8020f48:	08020fbd 	.word	0x08020fbd
 8020f4c:	08020fdd 	.word	0x08020fdd
 8020f50:	08020fdd 	.word	0x08020fdd
 8020f54:	08020fdd 	.word	0x08020fdd
 8020f58:	08020fdd 	.word	0x08020fdd
 8020f5c:	08020fdd 	.word	0x08020fdd
 8020f60:	08020fdd 	.word	0x08020fdd
 8020f64:	08020fdd 	.word	0x08020fdd
 8020f68:	08020fc5 	.word	0x08020fc5
 8020f6c:	08020fdd 	.word	0x08020fdd
 8020f70:	08020fdd 	.word	0x08020fdd
 8020f74:	08020fdd 	.word	0x08020fdd
 8020f78:	08020fdd 	.word	0x08020fdd
 8020f7c:	08020fdd 	.word	0x08020fdd
 8020f80:	08020fdd 	.word	0x08020fdd
 8020f84:	08020fdd 	.word	0x08020fdd
 8020f88:	08020fcd 	.word	0x08020fcd
 8020f8c:	08020fdd 	.word	0x08020fdd
 8020f90:	08020fdd 	.word	0x08020fdd
 8020f94:	08020fdd 	.word	0x08020fdd
 8020f98:	08020fdd 	.word	0x08020fdd
 8020f9c:	08020fdd 	.word	0x08020fdd
 8020fa0:	08020fdd 	.word	0x08020fdd
 8020fa4:	08020fdd 	.word	0x08020fdd
 8020fa8:	08020fd5 	.word	0x08020fd5
 8020fac:	2301      	movs	r3, #1
 8020fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fb2:	e0bc      	b.n	802112e <UART_SetConfig+0x5a6>
 8020fb4:	2304      	movs	r3, #4
 8020fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fba:	e0b8      	b.n	802112e <UART_SetConfig+0x5a6>
 8020fbc:	2308      	movs	r3, #8
 8020fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fc2:	e0b4      	b.n	802112e <UART_SetConfig+0x5a6>
 8020fc4:	2310      	movs	r3, #16
 8020fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fca:	e0b0      	b.n	802112e <UART_SetConfig+0x5a6>
 8020fcc:	2320      	movs	r3, #32
 8020fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fd2:	e0ac      	b.n	802112e <UART_SetConfig+0x5a6>
 8020fd4:	2340      	movs	r3, #64	@ 0x40
 8020fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fda:	e0a8      	b.n	802112e <UART_SetConfig+0x5a6>
 8020fdc:	2380      	movs	r3, #128	@ 0x80
 8020fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8020fe2:	e0a4      	b.n	802112e <UART_SetConfig+0x5a6>
 8020fe4:	697b      	ldr	r3, [r7, #20]
 8020fe6:	681b      	ldr	r3, [r3, #0]
 8020fe8:	4a8f      	ldr	r2, [pc, #572]	@ (8021228 <UART_SetConfig+0x6a0>)
 8020fea:	4293      	cmp	r3, r2
 8020fec:	d130      	bne.n	8021050 <UART_SetConfig+0x4c8>
 8020fee:	4b8d      	ldr	r3, [pc, #564]	@ (8021224 <UART_SetConfig+0x69c>)
 8020ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8020ff2:	f003 0307 	and.w	r3, r3, #7
 8020ff6:	2b05      	cmp	r3, #5
 8020ff8:	d826      	bhi.n	8021048 <UART_SetConfig+0x4c0>
 8020ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8021000 <UART_SetConfig+0x478>)
 8020ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021000:	08021019 	.word	0x08021019
 8021004:	08021021 	.word	0x08021021
 8021008:	08021029 	.word	0x08021029
 802100c:	08021031 	.word	0x08021031
 8021010:	08021039 	.word	0x08021039
 8021014:	08021041 	.word	0x08021041
 8021018:	2300      	movs	r3, #0
 802101a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802101e:	e086      	b.n	802112e <UART_SetConfig+0x5a6>
 8021020:	2304      	movs	r3, #4
 8021022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021026:	e082      	b.n	802112e <UART_SetConfig+0x5a6>
 8021028:	2308      	movs	r3, #8
 802102a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802102e:	e07e      	b.n	802112e <UART_SetConfig+0x5a6>
 8021030:	2310      	movs	r3, #16
 8021032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021036:	e07a      	b.n	802112e <UART_SetConfig+0x5a6>
 8021038:	2320      	movs	r3, #32
 802103a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802103e:	e076      	b.n	802112e <UART_SetConfig+0x5a6>
 8021040:	2340      	movs	r3, #64	@ 0x40
 8021042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021046:	e072      	b.n	802112e <UART_SetConfig+0x5a6>
 8021048:	2380      	movs	r3, #128	@ 0x80
 802104a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802104e:	e06e      	b.n	802112e <UART_SetConfig+0x5a6>
 8021050:	697b      	ldr	r3, [r7, #20]
 8021052:	681b      	ldr	r3, [r3, #0]
 8021054:	4a75      	ldr	r2, [pc, #468]	@ (802122c <UART_SetConfig+0x6a4>)
 8021056:	4293      	cmp	r3, r2
 8021058:	d130      	bne.n	80210bc <UART_SetConfig+0x534>
 802105a:	4b72      	ldr	r3, [pc, #456]	@ (8021224 <UART_SetConfig+0x69c>)
 802105c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 802105e:	f003 0307 	and.w	r3, r3, #7
 8021062:	2b05      	cmp	r3, #5
 8021064:	d826      	bhi.n	80210b4 <UART_SetConfig+0x52c>
 8021066:	a201      	add	r2, pc, #4	@ (adr r2, 802106c <UART_SetConfig+0x4e4>)
 8021068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802106c:	08021085 	.word	0x08021085
 8021070:	0802108d 	.word	0x0802108d
 8021074:	08021095 	.word	0x08021095
 8021078:	0802109d 	.word	0x0802109d
 802107c:	080210a5 	.word	0x080210a5
 8021080:	080210ad 	.word	0x080210ad
 8021084:	2300      	movs	r3, #0
 8021086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802108a:	e050      	b.n	802112e <UART_SetConfig+0x5a6>
 802108c:	2304      	movs	r3, #4
 802108e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021092:	e04c      	b.n	802112e <UART_SetConfig+0x5a6>
 8021094:	2308      	movs	r3, #8
 8021096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802109a:	e048      	b.n	802112e <UART_SetConfig+0x5a6>
 802109c:	2310      	movs	r3, #16
 802109e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210a2:	e044      	b.n	802112e <UART_SetConfig+0x5a6>
 80210a4:	2320      	movs	r3, #32
 80210a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210aa:	e040      	b.n	802112e <UART_SetConfig+0x5a6>
 80210ac:	2340      	movs	r3, #64	@ 0x40
 80210ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210b2:	e03c      	b.n	802112e <UART_SetConfig+0x5a6>
 80210b4:	2380      	movs	r3, #128	@ 0x80
 80210b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210ba:	e038      	b.n	802112e <UART_SetConfig+0x5a6>
 80210bc:	697b      	ldr	r3, [r7, #20]
 80210be:	681b      	ldr	r3, [r3, #0]
 80210c0:	4a5b      	ldr	r2, [pc, #364]	@ (8021230 <UART_SetConfig+0x6a8>)
 80210c2:	4293      	cmp	r3, r2
 80210c4:	d130      	bne.n	8021128 <UART_SetConfig+0x5a0>
 80210c6:	4b57      	ldr	r3, [pc, #348]	@ (8021224 <UART_SetConfig+0x69c>)
 80210c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80210ca:	f003 0307 	and.w	r3, r3, #7
 80210ce:	2b05      	cmp	r3, #5
 80210d0:	d826      	bhi.n	8021120 <UART_SetConfig+0x598>
 80210d2:	a201      	add	r2, pc, #4	@ (adr r2, 80210d8 <UART_SetConfig+0x550>)
 80210d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80210d8:	080210f1 	.word	0x080210f1
 80210dc:	080210f9 	.word	0x080210f9
 80210e0:	08021101 	.word	0x08021101
 80210e4:	08021109 	.word	0x08021109
 80210e8:	08021111 	.word	0x08021111
 80210ec:	08021119 	.word	0x08021119
 80210f0:	2302      	movs	r3, #2
 80210f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210f6:	e01a      	b.n	802112e <UART_SetConfig+0x5a6>
 80210f8:	2304      	movs	r3, #4
 80210fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80210fe:	e016      	b.n	802112e <UART_SetConfig+0x5a6>
 8021100:	2308      	movs	r3, #8
 8021102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021106:	e012      	b.n	802112e <UART_SetConfig+0x5a6>
 8021108:	2310      	movs	r3, #16
 802110a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802110e:	e00e      	b.n	802112e <UART_SetConfig+0x5a6>
 8021110:	2320      	movs	r3, #32
 8021112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021116:	e00a      	b.n	802112e <UART_SetConfig+0x5a6>
 8021118:	2340      	movs	r3, #64	@ 0x40
 802111a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 802111e:	e006      	b.n	802112e <UART_SetConfig+0x5a6>
 8021120:	2380      	movs	r3, #128	@ 0x80
 8021122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8021126:	e002      	b.n	802112e <UART_SetConfig+0x5a6>
 8021128:	2380      	movs	r3, #128	@ 0x80
 802112a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 802112e:	697b      	ldr	r3, [r7, #20]
 8021130:	681b      	ldr	r3, [r3, #0]
 8021132:	4a3f      	ldr	r2, [pc, #252]	@ (8021230 <UART_SetConfig+0x6a8>)
 8021134:	4293      	cmp	r3, r2
 8021136:	f040 80f8 	bne.w	802132a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 802113a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802113e:	2b20      	cmp	r3, #32
 8021140:	dc46      	bgt.n	80211d0 <UART_SetConfig+0x648>
 8021142:	2b02      	cmp	r3, #2
 8021144:	f2c0 8082 	blt.w	802124c <UART_SetConfig+0x6c4>
 8021148:	3b02      	subs	r3, #2
 802114a:	2b1e      	cmp	r3, #30
 802114c:	d87e      	bhi.n	802124c <UART_SetConfig+0x6c4>
 802114e:	a201      	add	r2, pc, #4	@ (adr r2, 8021154 <UART_SetConfig+0x5cc>)
 8021150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8021154:	080211d7 	.word	0x080211d7
 8021158:	0802124d 	.word	0x0802124d
 802115c:	080211df 	.word	0x080211df
 8021160:	0802124d 	.word	0x0802124d
 8021164:	0802124d 	.word	0x0802124d
 8021168:	0802124d 	.word	0x0802124d
 802116c:	080211ef 	.word	0x080211ef
 8021170:	0802124d 	.word	0x0802124d
 8021174:	0802124d 	.word	0x0802124d
 8021178:	0802124d 	.word	0x0802124d
 802117c:	0802124d 	.word	0x0802124d
 8021180:	0802124d 	.word	0x0802124d
 8021184:	0802124d 	.word	0x0802124d
 8021188:	0802124d 	.word	0x0802124d
 802118c:	080211ff 	.word	0x080211ff
 8021190:	0802124d 	.word	0x0802124d
 8021194:	0802124d 	.word	0x0802124d
 8021198:	0802124d 	.word	0x0802124d
 802119c:	0802124d 	.word	0x0802124d
 80211a0:	0802124d 	.word	0x0802124d
 80211a4:	0802124d 	.word	0x0802124d
 80211a8:	0802124d 	.word	0x0802124d
 80211ac:	0802124d 	.word	0x0802124d
 80211b0:	0802124d 	.word	0x0802124d
 80211b4:	0802124d 	.word	0x0802124d
 80211b8:	0802124d 	.word	0x0802124d
 80211bc:	0802124d 	.word	0x0802124d
 80211c0:	0802124d 	.word	0x0802124d
 80211c4:	0802124d 	.word	0x0802124d
 80211c8:	0802124d 	.word	0x0802124d
 80211cc:	0802123f 	.word	0x0802123f
 80211d0:	2b40      	cmp	r3, #64	@ 0x40
 80211d2:	d037      	beq.n	8021244 <UART_SetConfig+0x6bc>
 80211d4:	e03a      	b.n	802124c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80211d6:	f7fd fc87 	bl	801eae8 <HAL_RCCEx_GetD3PCLK1Freq>
 80211da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80211dc:	e03c      	b.n	8021258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80211de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80211e2:	4618      	mov	r0, r3
 80211e4:	f7fd fc96 	bl	801eb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80211e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80211ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80211ec:	e034      	b.n	8021258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80211ee:	f107 0318 	add.w	r3, r7, #24
 80211f2:	4618      	mov	r0, r3
 80211f4:	f7fd fde2 	bl	801edbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80211f8:	69fb      	ldr	r3, [r7, #28]
 80211fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80211fc:	e02c      	b.n	8021258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80211fe:	4b09      	ldr	r3, [pc, #36]	@ (8021224 <UART_SetConfig+0x69c>)
 8021200:	681b      	ldr	r3, [r3, #0]
 8021202:	f003 0320 	and.w	r3, r3, #32
 8021206:	2b00      	cmp	r3, #0
 8021208:	d016      	beq.n	8021238 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802120a:	4b06      	ldr	r3, [pc, #24]	@ (8021224 <UART_SetConfig+0x69c>)
 802120c:	681b      	ldr	r3, [r3, #0]
 802120e:	08db      	lsrs	r3, r3, #3
 8021210:	f003 0303 	and.w	r3, r3, #3
 8021214:	4a07      	ldr	r2, [pc, #28]	@ (8021234 <UART_SetConfig+0x6ac>)
 8021216:	fa22 f303 	lsr.w	r3, r2, r3
 802121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 802121c:	e01c      	b.n	8021258 <UART_SetConfig+0x6d0>
 802121e:	bf00      	nop
 8021220:	40011400 	.word	0x40011400
 8021224:	58024400 	.word	0x58024400
 8021228:	40007800 	.word	0x40007800
 802122c:	40007c00 	.word	0x40007c00
 8021230:	58000c00 	.word	0x58000c00
 8021234:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8021238:	4b9d      	ldr	r3, [pc, #628]	@ (80214b0 <UART_SetConfig+0x928>)
 802123a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802123c:	e00c      	b.n	8021258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802123e:	4b9d      	ldr	r3, [pc, #628]	@ (80214b4 <UART_SetConfig+0x92c>)
 8021240:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021242:	e009      	b.n	8021258 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802124a:	e005      	b.n	8021258 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 802124c:	2300      	movs	r3, #0
 802124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8021250:	2301      	movs	r3, #1
 8021252:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021256:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8021258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802125a:	2b00      	cmp	r3, #0
 802125c:	f000 81de 	beq.w	802161c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8021260:	697b      	ldr	r3, [r7, #20]
 8021262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021264:	4a94      	ldr	r2, [pc, #592]	@ (80214b8 <UART_SetConfig+0x930>)
 8021266:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802126a:	461a      	mov	r2, r3
 802126c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802126e:	fbb3 f3f2 	udiv	r3, r3, r2
 8021272:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8021274:	697b      	ldr	r3, [r7, #20]
 8021276:	685a      	ldr	r2, [r3, #4]
 8021278:	4613      	mov	r3, r2
 802127a:	005b      	lsls	r3, r3, #1
 802127c:	4413      	add	r3, r2
 802127e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8021280:	429a      	cmp	r2, r3
 8021282:	d305      	bcc.n	8021290 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8021284:	697b      	ldr	r3, [r7, #20]
 8021286:	685b      	ldr	r3, [r3, #4]
 8021288:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 802128a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802128c:	429a      	cmp	r2, r3
 802128e:	d903      	bls.n	8021298 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8021290:	2301      	movs	r3, #1
 8021292:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021296:	e1c1      	b.n	802161c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8021298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802129a:	2200      	movs	r2, #0
 802129c:	60bb      	str	r3, [r7, #8]
 802129e:	60fa      	str	r2, [r7, #12]
 80212a0:	697b      	ldr	r3, [r7, #20]
 80212a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80212a4:	4a84      	ldr	r2, [pc, #528]	@ (80214b8 <UART_SetConfig+0x930>)
 80212a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80212aa:	b29b      	uxth	r3, r3
 80212ac:	2200      	movs	r2, #0
 80212ae:	603b      	str	r3, [r7, #0]
 80212b0:	607a      	str	r2, [r7, #4]
 80212b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80212b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80212ba:	f7df f879 	bl	80003b0 <__aeabi_uldivmod>
 80212be:	4602      	mov	r2, r0
 80212c0:	460b      	mov	r3, r1
 80212c2:	4610      	mov	r0, r2
 80212c4:	4619      	mov	r1, r3
 80212c6:	f04f 0200 	mov.w	r2, #0
 80212ca:	f04f 0300 	mov.w	r3, #0
 80212ce:	020b      	lsls	r3, r1, #8
 80212d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80212d4:	0202      	lsls	r2, r0, #8
 80212d6:	6979      	ldr	r1, [r7, #20]
 80212d8:	6849      	ldr	r1, [r1, #4]
 80212da:	0849      	lsrs	r1, r1, #1
 80212dc:	2000      	movs	r0, #0
 80212de:	460c      	mov	r4, r1
 80212e0:	4605      	mov	r5, r0
 80212e2:	eb12 0804 	adds.w	r8, r2, r4
 80212e6:	eb43 0905 	adc.w	r9, r3, r5
 80212ea:	697b      	ldr	r3, [r7, #20]
 80212ec:	685b      	ldr	r3, [r3, #4]
 80212ee:	2200      	movs	r2, #0
 80212f0:	469a      	mov	sl, r3
 80212f2:	4693      	mov	fp, r2
 80212f4:	4652      	mov	r2, sl
 80212f6:	465b      	mov	r3, fp
 80212f8:	4640      	mov	r0, r8
 80212fa:	4649      	mov	r1, r9
 80212fc:	f7df f858 	bl	80003b0 <__aeabi_uldivmod>
 8021300:	4602      	mov	r2, r0
 8021302:	460b      	mov	r3, r1
 8021304:	4613      	mov	r3, r2
 8021306:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8021308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802130a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 802130e:	d308      	bcc.n	8021322 <UART_SetConfig+0x79a>
 8021310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021316:	d204      	bcs.n	8021322 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8021318:	697b      	ldr	r3, [r7, #20]
 802131a:	681b      	ldr	r3, [r3, #0]
 802131c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 802131e:	60da      	str	r2, [r3, #12]
 8021320:	e17c      	b.n	802161c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8021322:	2301      	movs	r3, #1
 8021324:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8021328:	e178      	b.n	802161c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 802132a:	697b      	ldr	r3, [r7, #20]
 802132c:	69db      	ldr	r3, [r3, #28]
 802132e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8021332:	f040 80c5 	bne.w	80214c0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8021336:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802133a:	2b20      	cmp	r3, #32
 802133c:	dc48      	bgt.n	80213d0 <UART_SetConfig+0x848>
 802133e:	2b00      	cmp	r3, #0
 8021340:	db7b      	blt.n	802143a <UART_SetConfig+0x8b2>
 8021342:	2b20      	cmp	r3, #32
 8021344:	d879      	bhi.n	802143a <UART_SetConfig+0x8b2>
 8021346:	a201      	add	r2, pc, #4	@ (adr r2, 802134c <UART_SetConfig+0x7c4>)
 8021348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802134c:	080213d7 	.word	0x080213d7
 8021350:	080213df 	.word	0x080213df
 8021354:	0802143b 	.word	0x0802143b
 8021358:	0802143b 	.word	0x0802143b
 802135c:	080213e7 	.word	0x080213e7
 8021360:	0802143b 	.word	0x0802143b
 8021364:	0802143b 	.word	0x0802143b
 8021368:	0802143b 	.word	0x0802143b
 802136c:	080213f7 	.word	0x080213f7
 8021370:	0802143b 	.word	0x0802143b
 8021374:	0802143b 	.word	0x0802143b
 8021378:	0802143b 	.word	0x0802143b
 802137c:	0802143b 	.word	0x0802143b
 8021380:	0802143b 	.word	0x0802143b
 8021384:	0802143b 	.word	0x0802143b
 8021388:	0802143b 	.word	0x0802143b
 802138c:	08021407 	.word	0x08021407
 8021390:	0802143b 	.word	0x0802143b
 8021394:	0802143b 	.word	0x0802143b
 8021398:	0802143b 	.word	0x0802143b
 802139c:	0802143b 	.word	0x0802143b
 80213a0:	0802143b 	.word	0x0802143b
 80213a4:	0802143b 	.word	0x0802143b
 80213a8:	0802143b 	.word	0x0802143b
 80213ac:	0802143b 	.word	0x0802143b
 80213b0:	0802143b 	.word	0x0802143b
 80213b4:	0802143b 	.word	0x0802143b
 80213b8:	0802143b 	.word	0x0802143b
 80213bc:	0802143b 	.word	0x0802143b
 80213c0:	0802143b 	.word	0x0802143b
 80213c4:	0802143b 	.word	0x0802143b
 80213c8:	0802143b 	.word	0x0802143b
 80213cc:	0802142d 	.word	0x0802142d
 80213d0:	2b40      	cmp	r3, #64	@ 0x40
 80213d2:	d02e      	beq.n	8021432 <UART_SetConfig+0x8aa>
 80213d4:	e031      	b.n	802143a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80213d6:	f7fc f951 	bl	801d67c <HAL_RCC_GetPCLK1Freq>
 80213da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80213dc:	e033      	b.n	8021446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80213de:	f7fc f963 	bl	801d6a8 <HAL_RCC_GetPCLK2Freq>
 80213e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80213e4:	e02f      	b.n	8021446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80213e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80213ea:	4618      	mov	r0, r3
 80213ec:	f7fd fb92 	bl	801eb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80213f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80213f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80213f4:	e027      	b.n	8021446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80213f6:	f107 0318 	add.w	r3, r7, #24
 80213fa:	4618      	mov	r0, r3
 80213fc:	f7fd fcde 	bl	801edbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8021400:	69fb      	ldr	r3, [r7, #28]
 8021402:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021404:	e01f      	b.n	8021446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021406:	4b2d      	ldr	r3, [pc, #180]	@ (80214bc <UART_SetConfig+0x934>)
 8021408:	681b      	ldr	r3, [r3, #0]
 802140a:	f003 0320 	and.w	r3, r3, #32
 802140e:	2b00      	cmp	r3, #0
 8021410:	d009      	beq.n	8021426 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8021412:	4b2a      	ldr	r3, [pc, #168]	@ (80214bc <UART_SetConfig+0x934>)
 8021414:	681b      	ldr	r3, [r3, #0]
 8021416:	08db      	lsrs	r3, r3, #3
 8021418:	f003 0303 	and.w	r3, r3, #3
 802141c:	4a24      	ldr	r2, [pc, #144]	@ (80214b0 <UART_SetConfig+0x928>)
 802141e:	fa22 f303 	lsr.w	r3, r2, r3
 8021422:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8021424:	e00f      	b.n	8021446 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8021426:	4b22      	ldr	r3, [pc, #136]	@ (80214b0 <UART_SetConfig+0x928>)
 8021428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802142a:	e00c      	b.n	8021446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 802142c:	4b21      	ldr	r3, [pc, #132]	@ (80214b4 <UART_SetConfig+0x92c>)
 802142e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021430:	e009      	b.n	8021446 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8021432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8021436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021438:	e005      	b.n	8021446 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 802143a:	2300      	movs	r3, #0
 802143c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 802143e:	2301      	movs	r3, #1
 8021440:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8021444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8021446:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021448:	2b00      	cmp	r3, #0
 802144a:	f000 80e7 	beq.w	802161c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 802144e:	697b      	ldr	r3, [r7, #20]
 8021450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021452:	4a19      	ldr	r2, [pc, #100]	@ (80214b8 <UART_SetConfig+0x930>)
 8021454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8021458:	461a      	mov	r2, r3
 802145a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802145c:	fbb3 f3f2 	udiv	r3, r3, r2
 8021460:	005a      	lsls	r2, r3, #1
 8021462:	697b      	ldr	r3, [r7, #20]
 8021464:	685b      	ldr	r3, [r3, #4]
 8021466:	085b      	lsrs	r3, r3, #1
 8021468:	441a      	add	r2, r3
 802146a:	697b      	ldr	r3, [r7, #20]
 802146c:	685b      	ldr	r3, [r3, #4]
 802146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8021472:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8021474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021476:	2b0f      	cmp	r3, #15
 8021478:	d916      	bls.n	80214a8 <UART_SetConfig+0x920>
 802147a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802147c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021480:	d212      	bcs.n	80214a8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8021482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021484:	b29b      	uxth	r3, r3
 8021486:	f023 030f 	bic.w	r3, r3, #15
 802148a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 802148c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802148e:	085b      	lsrs	r3, r3, #1
 8021490:	b29b      	uxth	r3, r3
 8021492:	f003 0307 	and.w	r3, r3, #7
 8021496:	b29a      	uxth	r2, r3
 8021498:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 802149a:	4313      	orrs	r3, r2
 802149c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 802149e:	697b      	ldr	r3, [r7, #20]
 80214a0:	681b      	ldr	r3, [r3, #0]
 80214a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80214a4:	60da      	str	r2, [r3, #12]
 80214a6:	e0b9      	b.n	802161c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80214a8:	2301      	movs	r3, #1
 80214aa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80214ae:	e0b5      	b.n	802161c <UART_SetConfig+0xa94>
 80214b0:	03d09000 	.word	0x03d09000
 80214b4:	003d0900 	.word	0x003d0900
 80214b8:	080276a0 	.word	0x080276a0
 80214bc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80214c0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80214c4:	2b20      	cmp	r3, #32
 80214c6:	dc49      	bgt.n	802155c <UART_SetConfig+0x9d4>
 80214c8:	2b00      	cmp	r3, #0
 80214ca:	db7c      	blt.n	80215c6 <UART_SetConfig+0xa3e>
 80214cc:	2b20      	cmp	r3, #32
 80214ce:	d87a      	bhi.n	80215c6 <UART_SetConfig+0xa3e>
 80214d0:	a201      	add	r2, pc, #4	@ (adr r2, 80214d8 <UART_SetConfig+0x950>)
 80214d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80214d6:	bf00      	nop
 80214d8:	08021563 	.word	0x08021563
 80214dc:	0802156b 	.word	0x0802156b
 80214e0:	080215c7 	.word	0x080215c7
 80214e4:	080215c7 	.word	0x080215c7
 80214e8:	08021573 	.word	0x08021573
 80214ec:	080215c7 	.word	0x080215c7
 80214f0:	080215c7 	.word	0x080215c7
 80214f4:	080215c7 	.word	0x080215c7
 80214f8:	08021583 	.word	0x08021583
 80214fc:	080215c7 	.word	0x080215c7
 8021500:	080215c7 	.word	0x080215c7
 8021504:	080215c7 	.word	0x080215c7
 8021508:	080215c7 	.word	0x080215c7
 802150c:	080215c7 	.word	0x080215c7
 8021510:	080215c7 	.word	0x080215c7
 8021514:	080215c7 	.word	0x080215c7
 8021518:	08021593 	.word	0x08021593
 802151c:	080215c7 	.word	0x080215c7
 8021520:	080215c7 	.word	0x080215c7
 8021524:	080215c7 	.word	0x080215c7
 8021528:	080215c7 	.word	0x080215c7
 802152c:	080215c7 	.word	0x080215c7
 8021530:	080215c7 	.word	0x080215c7
 8021534:	080215c7 	.word	0x080215c7
 8021538:	080215c7 	.word	0x080215c7
 802153c:	080215c7 	.word	0x080215c7
 8021540:	080215c7 	.word	0x080215c7
 8021544:	080215c7 	.word	0x080215c7
 8021548:	080215c7 	.word	0x080215c7
 802154c:	080215c7 	.word	0x080215c7
 8021550:	080215c7 	.word	0x080215c7
 8021554:	080215c7 	.word	0x080215c7
 8021558:	080215b9 	.word	0x080215b9
 802155c:	2b40      	cmp	r3, #64	@ 0x40
 802155e:	d02e      	beq.n	80215be <UART_SetConfig+0xa36>
 8021560:	e031      	b.n	80215c6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8021562:	f7fc f88b 	bl	801d67c <HAL_RCC_GetPCLK1Freq>
 8021566:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021568:	e033      	b.n	80215d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 802156a:	f7fc f89d 	bl	801d6a8 <HAL_RCC_GetPCLK2Freq>
 802156e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8021570:	e02f      	b.n	80215d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8021572:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8021576:	4618      	mov	r0, r3
 8021578:	f7fd facc 	bl	801eb14 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 802157c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802157e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021580:	e027      	b.n	80215d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8021582:	f107 0318 	add.w	r3, r7, #24
 8021586:	4618      	mov	r0, r3
 8021588:	f7fd fc18 	bl	801edbc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 802158c:	69fb      	ldr	r3, [r7, #28]
 802158e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8021590:	e01f      	b.n	80215d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8021592:	4b2d      	ldr	r3, [pc, #180]	@ (8021648 <UART_SetConfig+0xac0>)
 8021594:	681b      	ldr	r3, [r3, #0]
 8021596:	f003 0320 	and.w	r3, r3, #32
 802159a:	2b00      	cmp	r3, #0
 802159c:	d009      	beq.n	80215b2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802159e:	4b2a      	ldr	r3, [pc, #168]	@ (8021648 <UART_SetConfig+0xac0>)
 80215a0:	681b      	ldr	r3, [r3, #0]
 80215a2:	08db      	lsrs	r3, r3, #3
 80215a4:	f003 0303 	and.w	r3, r3, #3
 80215a8:	4a28      	ldr	r2, [pc, #160]	@ (802164c <UART_SetConfig+0xac4>)
 80215aa:	fa22 f303 	lsr.w	r3, r2, r3
 80215ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80215b0:	e00f      	b.n	80215d2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80215b2:	4b26      	ldr	r3, [pc, #152]	@ (802164c <UART_SetConfig+0xac4>)
 80215b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215b6:	e00c      	b.n	80215d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80215b8:	4b25      	ldr	r3, [pc, #148]	@ (8021650 <UART_SetConfig+0xac8>)
 80215ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215bc:	e009      	b.n	80215d2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80215be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80215c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80215c4:	e005      	b.n	80215d2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80215c6:	2300      	movs	r3, #0
 80215c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80215ca:	2301      	movs	r3, #1
 80215cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80215d0:	bf00      	nop
    }

    if (pclk != 0U)
 80215d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	d021      	beq.n	802161c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80215d8:	697b      	ldr	r3, [r7, #20]
 80215da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80215dc:	4a1d      	ldr	r2, [pc, #116]	@ (8021654 <UART_SetConfig+0xacc>)
 80215de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80215e2:	461a      	mov	r2, r3
 80215e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80215e6:	fbb3 f2f2 	udiv	r2, r3, r2
 80215ea:	697b      	ldr	r3, [r7, #20]
 80215ec:	685b      	ldr	r3, [r3, #4]
 80215ee:	085b      	lsrs	r3, r3, #1
 80215f0:	441a      	add	r2, r3
 80215f2:	697b      	ldr	r3, [r7, #20]
 80215f4:	685b      	ldr	r3, [r3, #4]
 80215f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80215fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80215fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80215fe:	2b0f      	cmp	r3, #15
 8021600:	d909      	bls.n	8021616 <UART_SetConfig+0xa8e>
 8021602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8021608:	d205      	bcs.n	8021616 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 802160a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802160c:	b29a      	uxth	r2, r3
 802160e:	697b      	ldr	r3, [r7, #20]
 8021610:	681b      	ldr	r3, [r3, #0]
 8021612:	60da      	str	r2, [r3, #12]
 8021614:	e002      	b.n	802161c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8021616:	2301      	movs	r3, #1
 8021618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 802161c:	697b      	ldr	r3, [r7, #20]
 802161e:	2201      	movs	r2, #1
 8021620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8021624:	697b      	ldr	r3, [r7, #20]
 8021626:	2201      	movs	r2, #1
 8021628:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 802162c:	697b      	ldr	r3, [r7, #20]
 802162e:	2200      	movs	r2, #0
 8021630:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8021632:	697b      	ldr	r3, [r7, #20]
 8021634:	2200      	movs	r2, #0
 8021636:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8021638:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 802163c:	4618      	mov	r0, r3
 802163e:	3748      	adds	r7, #72	@ 0x48
 8021640:	46bd      	mov	sp, r7
 8021642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8021646:	bf00      	nop
 8021648:	58024400 	.word	0x58024400
 802164c:	03d09000 	.word	0x03d09000
 8021650:	003d0900 	.word	0x003d0900
 8021654:	080276a0 	.word	0x080276a0

08021658 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8021658:	b480      	push	{r7}
 802165a:	b083      	sub	sp, #12
 802165c:	af00      	add	r7, sp, #0
 802165e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8021660:	687b      	ldr	r3, [r7, #4]
 8021662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021664:	f003 0308 	and.w	r3, r3, #8
 8021668:	2b00      	cmp	r3, #0
 802166a:	d00a      	beq.n	8021682 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 802166c:	687b      	ldr	r3, [r7, #4]
 802166e:	681b      	ldr	r3, [r3, #0]
 8021670:	685b      	ldr	r3, [r3, #4]
 8021672:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8021676:	687b      	ldr	r3, [r7, #4]
 8021678:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	681b      	ldr	r3, [r3, #0]
 802167e:	430a      	orrs	r2, r1
 8021680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8021682:	687b      	ldr	r3, [r7, #4]
 8021684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021686:	f003 0301 	and.w	r3, r3, #1
 802168a:	2b00      	cmp	r3, #0
 802168c:	d00a      	beq.n	80216a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 802168e:	687b      	ldr	r3, [r7, #4]
 8021690:	681b      	ldr	r3, [r3, #0]
 8021692:	685b      	ldr	r3, [r3, #4]
 8021694:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8021698:	687b      	ldr	r3, [r7, #4]
 802169a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 802169c:	687b      	ldr	r3, [r7, #4]
 802169e:	681b      	ldr	r3, [r3, #0]
 80216a0:	430a      	orrs	r2, r1
 80216a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80216a4:	687b      	ldr	r3, [r7, #4]
 80216a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216a8:	f003 0302 	and.w	r3, r3, #2
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d00a      	beq.n	80216c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80216b0:	687b      	ldr	r3, [r7, #4]
 80216b2:	681b      	ldr	r3, [r3, #0]
 80216b4:	685b      	ldr	r3, [r3, #4]
 80216b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80216ba:	687b      	ldr	r3, [r7, #4]
 80216bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80216be:	687b      	ldr	r3, [r7, #4]
 80216c0:	681b      	ldr	r3, [r3, #0]
 80216c2:	430a      	orrs	r2, r1
 80216c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80216c6:	687b      	ldr	r3, [r7, #4]
 80216c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216ca:	f003 0304 	and.w	r3, r3, #4
 80216ce:	2b00      	cmp	r3, #0
 80216d0:	d00a      	beq.n	80216e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80216d2:	687b      	ldr	r3, [r7, #4]
 80216d4:	681b      	ldr	r3, [r3, #0]
 80216d6:	685b      	ldr	r3, [r3, #4]
 80216d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80216dc:	687b      	ldr	r3, [r7, #4]
 80216de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80216e0:	687b      	ldr	r3, [r7, #4]
 80216e2:	681b      	ldr	r3, [r3, #0]
 80216e4:	430a      	orrs	r2, r1
 80216e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80216e8:	687b      	ldr	r3, [r7, #4]
 80216ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80216ec:	f003 0310 	and.w	r3, r3, #16
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d00a      	beq.n	802170a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80216f4:	687b      	ldr	r3, [r7, #4]
 80216f6:	681b      	ldr	r3, [r3, #0]
 80216f8:	689b      	ldr	r3, [r3, #8]
 80216fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8021702:	687b      	ldr	r3, [r7, #4]
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	430a      	orrs	r2, r1
 8021708:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 802170a:	687b      	ldr	r3, [r7, #4]
 802170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802170e:	f003 0320 	and.w	r3, r3, #32
 8021712:	2b00      	cmp	r3, #0
 8021714:	d00a      	beq.n	802172c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8021716:	687b      	ldr	r3, [r7, #4]
 8021718:	681b      	ldr	r3, [r3, #0]
 802171a:	689b      	ldr	r3, [r3, #8]
 802171c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8021720:	687b      	ldr	r3, [r7, #4]
 8021722:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8021724:	687b      	ldr	r3, [r7, #4]
 8021726:	681b      	ldr	r3, [r3, #0]
 8021728:	430a      	orrs	r2, r1
 802172a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 802172c:	687b      	ldr	r3, [r7, #4]
 802172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021730:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8021734:	2b00      	cmp	r3, #0
 8021736:	d01a      	beq.n	802176e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8021738:	687b      	ldr	r3, [r7, #4]
 802173a:	681b      	ldr	r3, [r3, #0]
 802173c:	685b      	ldr	r3, [r3, #4]
 802173e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8021742:	687b      	ldr	r3, [r7, #4]
 8021744:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	681b      	ldr	r3, [r3, #0]
 802174a:	430a      	orrs	r2, r1
 802174c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 802174e:	687b      	ldr	r3, [r7, #4]
 8021750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8021752:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8021756:	d10a      	bne.n	802176e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	681b      	ldr	r3, [r3, #0]
 802175c:	685b      	ldr	r3, [r3, #4]
 802175e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8021762:	687b      	ldr	r3, [r7, #4]
 8021764:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8021766:	687b      	ldr	r3, [r7, #4]
 8021768:	681b      	ldr	r3, [r3, #0]
 802176a:	430a      	orrs	r2, r1
 802176c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 802176e:	687b      	ldr	r3, [r7, #4]
 8021770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8021772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8021776:	2b00      	cmp	r3, #0
 8021778:	d00a      	beq.n	8021790 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 802177a:	687b      	ldr	r3, [r7, #4]
 802177c:	681b      	ldr	r3, [r3, #0]
 802177e:	685b      	ldr	r3, [r3, #4]
 8021780:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8021784:	687b      	ldr	r3, [r7, #4]
 8021786:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8021788:	687b      	ldr	r3, [r7, #4]
 802178a:	681b      	ldr	r3, [r3, #0]
 802178c:	430a      	orrs	r2, r1
 802178e:	605a      	str	r2, [r3, #4]
  }
}
 8021790:	bf00      	nop
 8021792:	370c      	adds	r7, #12
 8021794:	46bd      	mov	sp, r7
 8021796:	f85d 7b04 	ldr.w	r7, [sp], #4
 802179a:	4770      	bx	lr

0802179c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 802179c:	b580      	push	{r7, lr}
 802179e:	b098      	sub	sp, #96	@ 0x60
 80217a0:	af02      	add	r7, sp, #8
 80217a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	2200      	movs	r2, #0
 80217a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80217ac:	f7f8 fb94 	bl	8019ed8 <HAL_GetTick>
 80217b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80217b2:	687b      	ldr	r3, [r7, #4]
 80217b4:	681b      	ldr	r3, [r3, #0]
 80217b6:	681b      	ldr	r3, [r3, #0]
 80217b8:	f003 0308 	and.w	r3, r3, #8
 80217bc:	2b08      	cmp	r3, #8
 80217be:	d12f      	bne.n	8021820 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80217c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80217c4:	9300      	str	r3, [sp, #0]
 80217c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80217c8:	2200      	movs	r2, #0
 80217ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80217ce:	6878      	ldr	r0, [r7, #4]
 80217d0:	f000 f88e 	bl	80218f0 <UART_WaitOnFlagUntilTimeout>
 80217d4:	4603      	mov	r3, r0
 80217d6:	2b00      	cmp	r3, #0
 80217d8:	d022      	beq.n	8021820 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80217da:	687b      	ldr	r3, [r7, #4]
 80217dc:	681b      	ldr	r3, [r3, #0]
 80217de:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80217e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80217e2:	e853 3f00 	ldrex	r3, [r3]
 80217e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80217e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80217ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80217ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80217f0:	687b      	ldr	r3, [r7, #4]
 80217f2:	681b      	ldr	r3, [r3, #0]
 80217f4:	461a      	mov	r2, r3
 80217f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80217f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80217fa:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80217fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80217fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8021800:	e841 2300 	strex	r3, r2, [r1]
 8021804:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8021806:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8021808:	2b00      	cmp	r3, #0
 802180a:	d1e6      	bne.n	80217da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 802180c:	687b      	ldr	r3, [r7, #4]
 802180e:	2220      	movs	r2, #32
 8021810:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8021814:	687b      	ldr	r3, [r7, #4]
 8021816:	2200      	movs	r2, #0
 8021818:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 802181c:	2303      	movs	r3, #3
 802181e:	e063      	b.n	80218e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8021820:	687b      	ldr	r3, [r7, #4]
 8021822:	681b      	ldr	r3, [r3, #0]
 8021824:	681b      	ldr	r3, [r3, #0]
 8021826:	f003 0304 	and.w	r3, r3, #4
 802182a:	2b04      	cmp	r3, #4
 802182c:	d149      	bne.n	80218c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 802182e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8021832:	9300      	str	r3, [sp, #0]
 8021834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8021836:	2200      	movs	r2, #0
 8021838:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 802183c:	6878      	ldr	r0, [r7, #4]
 802183e:	f000 f857 	bl	80218f0 <UART_WaitOnFlagUntilTimeout>
 8021842:	4603      	mov	r3, r0
 8021844:	2b00      	cmp	r3, #0
 8021846:	d03c      	beq.n	80218c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8021848:	687b      	ldr	r3, [r7, #4]
 802184a:	681b      	ldr	r3, [r3, #0]
 802184c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802184e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021850:	e853 3f00 	ldrex	r3, [r3]
 8021854:	623b      	str	r3, [r7, #32]
   return(result);
 8021856:	6a3b      	ldr	r3, [r7, #32]
 8021858:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802185c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802185e:	687b      	ldr	r3, [r7, #4]
 8021860:	681b      	ldr	r3, [r3, #0]
 8021862:	461a      	mov	r2, r3
 8021864:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8021866:	633b      	str	r3, [r7, #48]	@ 0x30
 8021868:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802186a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 802186c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 802186e:	e841 2300 	strex	r3, r2, [r1]
 8021872:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8021874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021876:	2b00      	cmp	r3, #0
 8021878:	d1e6      	bne.n	8021848 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	681b      	ldr	r3, [r3, #0]
 802187e:	3308      	adds	r3, #8
 8021880:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021882:	693b      	ldr	r3, [r7, #16]
 8021884:	e853 3f00 	ldrex	r3, [r3]
 8021888:	60fb      	str	r3, [r7, #12]
   return(result);
 802188a:	68fb      	ldr	r3, [r7, #12]
 802188c:	f023 0301 	bic.w	r3, r3, #1
 8021890:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021892:	687b      	ldr	r3, [r7, #4]
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	3308      	adds	r3, #8
 8021898:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 802189a:	61fa      	str	r2, [r7, #28]
 802189c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802189e:	69b9      	ldr	r1, [r7, #24]
 80218a0:	69fa      	ldr	r2, [r7, #28]
 80218a2:	e841 2300 	strex	r3, r2, [r1]
 80218a6:	617b      	str	r3, [r7, #20]
   return(result);
 80218a8:	697b      	ldr	r3, [r7, #20]
 80218aa:	2b00      	cmp	r3, #0
 80218ac:	d1e5      	bne.n	802187a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80218ae:	687b      	ldr	r3, [r7, #4]
 80218b0:	2220      	movs	r2, #32
 80218b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80218b6:	687b      	ldr	r3, [r7, #4]
 80218b8:	2200      	movs	r2, #0
 80218ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80218be:	2303      	movs	r3, #3
 80218c0:	e012      	b.n	80218e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80218c2:	687b      	ldr	r3, [r7, #4]
 80218c4:	2220      	movs	r2, #32
 80218c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80218ca:	687b      	ldr	r3, [r7, #4]
 80218cc:	2220      	movs	r2, #32
 80218ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80218d2:	687b      	ldr	r3, [r7, #4]
 80218d4:	2200      	movs	r2, #0
 80218d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80218d8:	687b      	ldr	r3, [r7, #4]
 80218da:	2200      	movs	r2, #0
 80218dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80218de:	687b      	ldr	r3, [r7, #4]
 80218e0:	2200      	movs	r2, #0
 80218e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80218e6:	2300      	movs	r3, #0
}
 80218e8:	4618      	mov	r0, r3
 80218ea:	3758      	adds	r7, #88	@ 0x58
 80218ec:	46bd      	mov	sp, r7
 80218ee:	bd80      	pop	{r7, pc}

080218f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80218f0:	b580      	push	{r7, lr}
 80218f2:	b084      	sub	sp, #16
 80218f4:	af00      	add	r7, sp, #0
 80218f6:	60f8      	str	r0, [r7, #12]
 80218f8:	60b9      	str	r1, [r7, #8]
 80218fa:	603b      	str	r3, [r7, #0]
 80218fc:	4613      	mov	r3, r2
 80218fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8021900:	e04f      	b.n	80219a2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8021902:	69bb      	ldr	r3, [r7, #24]
 8021904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021908:	d04b      	beq.n	80219a2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 802190a:	f7f8 fae5 	bl	8019ed8 <HAL_GetTick>
 802190e:	4602      	mov	r2, r0
 8021910:	683b      	ldr	r3, [r7, #0]
 8021912:	1ad3      	subs	r3, r2, r3
 8021914:	69ba      	ldr	r2, [r7, #24]
 8021916:	429a      	cmp	r2, r3
 8021918:	d302      	bcc.n	8021920 <UART_WaitOnFlagUntilTimeout+0x30>
 802191a:	69bb      	ldr	r3, [r7, #24]
 802191c:	2b00      	cmp	r3, #0
 802191e:	d101      	bne.n	8021924 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8021920:	2303      	movs	r3, #3
 8021922:	e04e      	b.n	80219c2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8021924:	68fb      	ldr	r3, [r7, #12]
 8021926:	681b      	ldr	r3, [r3, #0]
 8021928:	681b      	ldr	r3, [r3, #0]
 802192a:	f003 0304 	and.w	r3, r3, #4
 802192e:	2b00      	cmp	r3, #0
 8021930:	d037      	beq.n	80219a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8021932:	68bb      	ldr	r3, [r7, #8]
 8021934:	2b80      	cmp	r3, #128	@ 0x80
 8021936:	d034      	beq.n	80219a2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8021938:	68bb      	ldr	r3, [r7, #8]
 802193a:	2b40      	cmp	r3, #64	@ 0x40
 802193c:	d031      	beq.n	80219a2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 802193e:	68fb      	ldr	r3, [r7, #12]
 8021940:	681b      	ldr	r3, [r3, #0]
 8021942:	69db      	ldr	r3, [r3, #28]
 8021944:	f003 0308 	and.w	r3, r3, #8
 8021948:	2b08      	cmp	r3, #8
 802194a:	d110      	bne.n	802196e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 802194c:	68fb      	ldr	r3, [r7, #12]
 802194e:	681b      	ldr	r3, [r3, #0]
 8021950:	2208      	movs	r2, #8
 8021952:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021954:	68f8      	ldr	r0, [r7, #12]
 8021956:	f000 f839 	bl	80219cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 802195a:	68fb      	ldr	r3, [r7, #12]
 802195c:	2208      	movs	r2, #8
 802195e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021962:	68fb      	ldr	r3, [r7, #12]
 8021964:	2200      	movs	r2, #0
 8021966:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 802196a:	2301      	movs	r3, #1
 802196c:	e029      	b.n	80219c2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 802196e:	68fb      	ldr	r3, [r7, #12]
 8021970:	681b      	ldr	r3, [r3, #0]
 8021972:	69db      	ldr	r3, [r3, #28]
 8021974:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8021978:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 802197c:	d111      	bne.n	80219a2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 802197e:	68fb      	ldr	r3, [r7, #12]
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8021986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8021988:	68f8      	ldr	r0, [r7, #12]
 802198a:	f000 f81f 	bl	80219cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 802198e:	68fb      	ldr	r3, [r7, #12]
 8021990:	2220      	movs	r2, #32
 8021992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8021996:	68fb      	ldr	r3, [r7, #12]
 8021998:	2200      	movs	r2, #0
 802199a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 802199e:	2303      	movs	r3, #3
 80219a0:	e00f      	b.n	80219c2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80219a2:	68fb      	ldr	r3, [r7, #12]
 80219a4:	681b      	ldr	r3, [r3, #0]
 80219a6:	69da      	ldr	r2, [r3, #28]
 80219a8:	68bb      	ldr	r3, [r7, #8]
 80219aa:	4013      	ands	r3, r2
 80219ac:	68ba      	ldr	r2, [r7, #8]
 80219ae:	429a      	cmp	r2, r3
 80219b0:	bf0c      	ite	eq
 80219b2:	2301      	moveq	r3, #1
 80219b4:	2300      	movne	r3, #0
 80219b6:	b2db      	uxtb	r3, r3
 80219b8:	461a      	mov	r2, r3
 80219ba:	79fb      	ldrb	r3, [r7, #7]
 80219bc:	429a      	cmp	r2, r3
 80219be:	d0a0      	beq.n	8021902 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80219c0:	2300      	movs	r3, #0
}
 80219c2:	4618      	mov	r0, r3
 80219c4:	3710      	adds	r7, #16
 80219c6:	46bd      	mov	sp, r7
 80219c8:	bd80      	pop	{r7, pc}
	...

080219cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80219cc:	b480      	push	{r7}
 80219ce:	b095      	sub	sp, #84	@ 0x54
 80219d0:	af00      	add	r7, sp, #0
 80219d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80219d4:	687b      	ldr	r3, [r7, #4]
 80219d6:	681b      	ldr	r3, [r3, #0]
 80219d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80219da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80219dc:	e853 3f00 	ldrex	r3, [r3]
 80219e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80219e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80219e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80219e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80219ea:	687b      	ldr	r3, [r7, #4]
 80219ec:	681b      	ldr	r3, [r3, #0]
 80219ee:	461a      	mov	r2, r3
 80219f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80219f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80219f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80219f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80219f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80219fa:	e841 2300 	strex	r3, r2, [r1]
 80219fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8021a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8021a02:	2b00      	cmp	r3, #0
 8021a04:	d1e6      	bne.n	80219d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	681b      	ldr	r3, [r3, #0]
 8021a0a:	3308      	adds	r3, #8
 8021a0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a0e:	6a3b      	ldr	r3, [r7, #32]
 8021a10:	e853 3f00 	ldrex	r3, [r3]
 8021a14:	61fb      	str	r3, [r7, #28]
   return(result);
 8021a16:	69fa      	ldr	r2, [r7, #28]
 8021a18:	4b1e      	ldr	r3, [pc, #120]	@ (8021a94 <UART_EndRxTransfer+0xc8>)
 8021a1a:	4013      	ands	r3, r2
 8021a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8021a1e:	687b      	ldr	r3, [r7, #4]
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	3308      	adds	r3, #8
 8021a24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8021a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8021a28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8021a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021a2e:	e841 2300 	strex	r3, r2, [r1]
 8021a32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8021a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021a36:	2b00      	cmp	r3, #0
 8021a38:	d1e5      	bne.n	8021a06 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8021a3a:	687b      	ldr	r3, [r7, #4]
 8021a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8021a3e:	2b01      	cmp	r3, #1
 8021a40:	d118      	bne.n	8021a74 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8021a42:	687b      	ldr	r3, [r7, #4]
 8021a44:	681b      	ldr	r3, [r3, #0]
 8021a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8021a48:	68fb      	ldr	r3, [r7, #12]
 8021a4a:	e853 3f00 	ldrex	r3, [r3]
 8021a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8021a50:	68bb      	ldr	r3, [r7, #8]
 8021a52:	f023 0310 	bic.w	r3, r3, #16
 8021a56:	647b      	str	r3, [r7, #68]	@ 0x44
 8021a58:	687b      	ldr	r3, [r7, #4]
 8021a5a:	681b      	ldr	r3, [r3, #0]
 8021a5c:	461a      	mov	r2, r3
 8021a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8021a60:	61bb      	str	r3, [r7, #24]
 8021a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8021a64:	6979      	ldr	r1, [r7, #20]
 8021a66:	69ba      	ldr	r2, [r7, #24]
 8021a68:	e841 2300 	strex	r3, r2, [r1]
 8021a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8021a6e:	693b      	ldr	r3, [r7, #16]
 8021a70:	2b00      	cmp	r3, #0
 8021a72:	d1e6      	bne.n	8021a42 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8021a74:	687b      	ldr	r3, [r7, #4]
 8021a76:	2220      	movs	r2, #32
 8021a78:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8021a7c:	687b      	ldr	r3, [r7, #4]
 8021a7e:	2200      	movs	r2, #0
 8021a80:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	2200      	movs	r2, #0
 8021a86:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8021a88:	bf00      	nop
 8021a8a:	3754      	adds	r7, #84	@ 0x54
 8021a8c:	46bd      	mov	sp, r7
 8021a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a92:	4770      	bx	lr
 8021a94:	effffffe 	.word	0xeffffffe

08021a98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8021a98:	b480      	push	{r7}
 8021a9a:	b085      	sub	sp, #20
 8021a9c:	af00      	add	r7, sp, #0
 8021a9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021aa0:	687b      	ldr	r3, [r7, #4]
 8021aa2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021aa6:	2b01      	cmp	r3, #1
 8021aa8:	d101      	bne.n	8021aae <HAL_UARTEx_DisableFifoMode+0x16>
 8021aaa:	2302      	movs	r3, #2
 8021aac:	e027      	b.n	8021afe <HAL_UARTEx_DisableFifoMode+0x66>
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	2201      	movs	r2, #1
 8021ab2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021ab6:	687b      	ldr	r3, [r7, #4]
 8021ab8:	2224      	movs	r2, #36	@ 0x24
 8021aba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021abe:	687b      	ldr	r3, [r7, #4]
 8021ac0:	681b      	ldr	r3, [r3, #0]
 8021ac2:	681b      	ldr	r3, [r3, #0]
 8021ac4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021ac6:	687b      	ldr	r3, [r7, #4]
 8021ac8:	681b      	ldr	r3, [r3, #0]
 8021aca:	681a      	ldr	r2, [r3, #0]
 8021acc:	687b      	ldr	r3, [r7, #4]
 8021ace:	681b      	ldr	r3, [r3, #0]
 8021ad0:	f022 0201 	bic.w	r2, r2, #1
 8021ad4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8021ad6:	68fb      	ldr	r3, [r7, #12]
 8021ad8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8021adc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8021ade:	687b      	ldr	r3, [r7, #4]
 8021ae0:	2200      	movs	r2, #0
 8021ae2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021ae4:	687b      	ldr	r3, [r7, #4]
 8021ae6:	681b      	ldr	r3, [r3, #0]
 8021ae8:	68fa      	ldr	r2, [r7, #12]
 8021aea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021aec:	687b      	ldr	r3, [r7, #4]
 8021aee:	2220      	movs	r2, #32
 8021af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021af4:	687b      	ldr	r3, [r7, #4]
 8021af6:	2200      	movs	r2, #0
 8021af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021afc:	2300      	movs	r3, #0
}
 8021afe:	4618      	mov	r0, r3
 8021b00:	3714      	adds	r7, #20
 8021b02:	46bd      	mov	sp, r7
 8021b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b08:	4770      	bx	lr

08021b0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021b0a:	b580      	push	{r7, lr}
 8021b0c:	b084      	sub	sp, #16
 8021b0e:	af00      	add	r7, sp, #0
 8021b10:	6078      	str	r0, [r7, #4]
 8021b12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021b14:	687b      	ldr	r3, [r7, #4]
 8021b16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021b1a:	2b01      	cmp	r3, #1
 8021b1c:	d101      	bne.n	8021b22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8021b1e:	2302      	movs	r3, #2
 8021b20:	e02d      	b.n	8021b7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8021b22:	687b      	ldr	r3, [r7, #4]
 8021b24:	2201      	movs	r2, #1
 8021b26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021b2a:	687b      	ldr	r3, [r7, #4]
 8021b2c:	2224      	movs	r2, #36	@ 0x24
 8021b2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021b32:	687b      	ldr	r3, [r7, #4]
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	681b      	ldr	r3, [r3, #0]
 8021b38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021b3a:	687b      	ldr	r3, [r7, #4]
 8021b3c:	681b      	ldr	r3, [r3, #0]
 8021b3e:	681a      	ldr	r2, [r3, #0]
 8021b40:	687b      	ldr	r3, [r7, #4]
 8021b42:	681b      	ldr	r3, [r3, #0]
 8021b44:	f022 0201 	bic.w	r2, r2, #1
 8021b48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8021b4a:	687b      	ldr	r3, [r7, #4]
 8021b4c:	681b      	ldr	r3, [r3, #0]
 8021b4e:	689b      	ldr	r3, [r3, #8]
 8021b50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8021b54:	687b      	ldr	r3, [r7, #4]
 8021b56:	681b      	ldr	r3, [r3, #0]
 8021b58:	683a      	ldr	r2, [r7, #0]
 8021b5a:	430a      	orrs	r2, r1
 8021b5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8021b5e:	6878      	ldr	r0, [r7, #4]
 8021b60:	f000 f850 	bl	8021c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021b64:	687b      	ldr	r3, [r7, #4]
 8021b66:	681b      	ldr	r3, [r3, #0]
 8021b68:	68fa      	ldr	r2, [r7, #12]
 8021b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021b6c:	687b      	ldr	r3, [r7, #4]
 8021b6e:	2220      	movs	r2, #32
 8021b70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021b74:	687b      	ldr	r3, [r7, #4]
 8021b76:	2200      	movs	r2, #0
 8021b78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021b7c:	2300      	movs	r3, #0
}
 8021b7e:	4618      	mov	r0, r3
 8021b80:	3710      	adds	r7, #16
 8021b82:	46bd      	mov	sp, r7
 8021b84:	bd80      	pop	{r7, pc}

08021b86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8021b86:	b580      	push	{r7, lr}
 8021b88:	b084      	sub	sp, #16
 8021b8a:	af00      	add	r7, sp, #0
 8021b8c:	6078      	str	r0, [r7, #4]
 8021b8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8021b90:	687b      	ldr	r3, [r7, #4]
 8021b92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8021b96:	2b01      	cmp	r3, #1
 8021b98:	d101      	bne.n	8021b9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8021b9a:	2302      	movs	r3, #2
 8021b9c:	e02d      	b.n	8021bfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	2201      	movs	r2, #1
 8021ba2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8021ba6:	687b      	ldr	r3, [r7, #4]
 8021ba8:	2224      	movs	r2, #36	@ 0x24
 8021baa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8021bae:	687b      	ldr	r3, [r7, #4]
 8021bb0:	681b      	ldr	r3, [r3, #0]
 8021bb2:	681b      	ldr	r3, [r3, #0]
 8021bb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8021bb6:	687b      	ldr	r3, [r7, #4]
 8021bb8:	681b      	ldr	r3, [r3, #0]
 8021bba:	681a      	ldr	r2, [r3, #0]
 8021bbc:	687b      	ldr	r3, [r7, #4]
 8021bbe:	681b      	ldr	r3, [r3, #0]
 8021bc0:	f022 0201 	bic.w	r2, r2, #1
 8021bc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8021bc6:	687b      	ldr	r3, [r7, #4]
 8021bc8:	681b      	ldr	r3, [r3, #0]
 8021bca:	689b      	ldr	r3, [r3, #8]
 8021bcc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8021bd0:	687b      	ldr	r3, [r7, #4]
 8021bd2:	681b      	ldr	r3, [r3, #0]
 8021bd4:	683a      	ldr	r2, [r7, #0]
 8021bd6:	430a      	orrs	r2, r1
 8021bd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8021bda:	6878      	ldr	r0, [r7, #4]
 8021bdc:	f000 f812 	bl	8021c04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8021be0:	687b      	ldr	r3, [r7, #4]
 8021be2:	681b      	ldr	r3, [r3, #0]
 8021be4:	68fa      	ldr	r2, [r7, #12]
 8021be6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8021be8:	687b      	ldr	r3, [r7, #4]
 8021bea:	2220      	movs	r2, #32
 8021bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8021bf0:	687b      	ldr	r3, [r7, #4]
 8021bf2:	2200      	movs	r2, #0
 8021bf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8021bf8:	2300      	movs	r3, #0
}
 8021bfa:	4618      	mov	r0, r3
 8021bfc:	3710      	adds	r7, #16
 8021bfe:	46bd      	mov	sp, r7
 8021c00:	bd80      	pop	{r7, pc}
	...

08021c04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8021c04:	b480      	push	{r7}
 8021c06:	b085      	sub	sp, #20
 8021c08:	af00      	add	r7, sp, #0
 8021c0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8021c0c:	687b      	ldr	r3, [r7, #4]
 8021c0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8021c10:	2b00      	cmp	r3, #0
 8021c12:	d108      	bne.n	8021c26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8021c14:	687b      	ldr	r3, [r7, #4]
 8021c16:	2201      	movs	r2, #1
 8021c18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8021c1c:	687b      	ldr	r3, [r7, #4]
 8021c1e:	2201      	movs	r2, #1
 8021c20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8021c24:	e031      	b.n	8021c8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8021c26:	2310      	movs	r3, #16
 8021c28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8021c2a:	2310      	movs	r3, #16
 8021c2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8021c2e:	687b      	ldr	r3, [r7, #4]
 8021c30:	681b      	ldr	r3, [r3, #0]
 8021c32:	689b      	ldr	r3, [r3, #8]
 8021c34:	0e5b      	lsrs	r3, r3, #25
 8021c36:	b2db      	uxtb	r3, r3
 8021c38:	f003 0307 	and.w	r3, r3, #7
 8021c3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8021c3e:	687b      	ldr	r3, [r7, #4]
 8021c40:	681b      	ldr	r3, [r3, #0]
 8021c42:	689b      	ldr	r3, [r3, #8]
 8021c44:	0f5b      	lsrs	r3, r3, #29
 8021c46:	b2db      	uxtb	r3, r3
 8021c48:	f003 0307 	and.w	r3, r3, #7
 8021c4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021c4e:	7bbb      	ldrb	r3, [r7, #14]
 8021c50:	7b3a      	ldrb	r2, [r7, #12]
 8021c52:	4911      	ldr	r1, [pc, #68]	@ (8021c98 <UARTEx_SetNbDataToProcess+0x94>)
 8021c54:	5c8a      	ldrb	r2, [r1, r2]
 8021c56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8021c5a:	7b3a      	ldrb	r2, [r7, #12]
 8021c5c:	490f      	ldr	r1, [pc, #60]	@ (8021c9c <UARTEx_SetNbDataToProcess+0x98>)
 8021c5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8021c60:	fb93 f3f2 	sdiv	r3, r3, r2
 8021c64:	b29a      	uxth	r2, r3
 8021c66:	687b      	ldr	r3, [r7, #4]
 8021c68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8021c6c:	7bfb      	ldrb	r3, [r7, #15]
 8021c6e:	7b7a      	ldrb	r2, [r7, #13]
 8021c70:	4909      	ldr	r1, [pc, #36]	@ (8021c98 <UARTEx_SetNbDataToProcess+0x94>)
 8021c72:	5c8a      	ldrb	r2, [r1, r2]
 8021c74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8021c78:	7b7a      	ldrb	r2, [r7, #13]
 8021c7a:	4908      	ldr	r1, [pc, #32]	@ (8021c9c <UARTEx_SetNbDataToProcess+0x98>)
 8021c7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8021c7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8021c82:	b29a      	uxth	r2, r3
 8021c84:	687b      	ldr	r3, [r7, #4]
 8021c86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8021c8a:	bf00      	nop
 8021c8c:	3714      	adds	r7, #20
 8021c8e:	46bd      	mov	sp, r7
 8021c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c94:	4770      	bx	lr
 8021c96:	bf00      	nop
 8021c98:	080276b8 	.word	0x080276b8
 8021c9c:	080276c0 	.word	0x080276c0

08021ca0 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8021ca0:	b580      	push	{r7, lr}
 8021ca2:	b082      	sub	sp, #8
 8021ca4:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8021ca6:	4b15      	ldr	r3, [pc, #84]	@ (8021cfc <prvInitialiseLogging+0x5c>)
 8021ca8:	681b      	ldr	r3, [r3, #0]
 8021caa:	2b00      	cmp	r3, #0
 8021cac:	d120      	bne.n	8021cf0 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8021cae:	f7e3 f9e1 	bl	8005074 <xTaskGetSchedulerState>
 8021cb2:	4603      	mov	r3, r0
 8021cb4:	2b02      	cmp	r3, #2
 8021cb6:	d11b      	bne.n	8021cf0 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021cb8:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8021cbc:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 8021cbe:	6878      	ldr	r0, [r7, #4]
 8021cc0:	f7e4 fb38 	bl	8006334 <pvPortMalloc>
 8021cc4:	4603      	mov	r3, r0
 8021cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8021d00 <prvInitialiseLogging+0x60>)
 8021cc8:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 8021cca:	4b0d      	ldr	r3, [pc, #52]	@ (8021d00 <prvInitialiseLogging+0x60>)
 8021ccc:	681b      	ldr	r3, [r3, #0]
 8021cce:	2b00      	cmp	r3, #0
 8021cd0:	d00e      	beq.n	8021cf0 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8021cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8021d00 <prvInitialiseLogging+0x60>)
 8021cd4:	681b      	ldr	r3, [r3, #0]
 8021cd6:	687a      	ldr	r2, [r7, #4]
 8021cd8:	2100      	movs	r1, #0
 8021cda:	4618      	mov	r0, r3
 8021cdc:	f000 fc35 	bl	802254a <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8021ce0:	4b07      	ldr	r3, [pc, #28]	@ (8021d00 <prvInitialiseLogging+0x60>)
 8021ce2:	681b      	ldr	r3, [r3, #0]
 8021ce4:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8021ce8:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 8021cea:	4b04      	ldr	r3, [pc, #16]	@ (8021cfc <prvInitialiseLogging+0x5c>)
 8021cec:	2201      	movs	r2, #1
 8021cee:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8021cf0:	4b02      	ldr	r3, [pc, #8]	@ (8021cfc <prvInitialiseLogging+0x5c>)
 8021cf2:	681b      	ldr	r3, [r3, #0]
}
 8021cf4:	4618      	mov	r0, r3
 8021cf6:	3708      	adds	r7, #8
 8021cf8:	46bd      	mov	sp, r7
 8021cfa:	bd80      	pop	{r7, pc}
 8021cfc:	200025e0 	.word	0x200025e0
 8021d00:	200025d0 	.word	0x200025d0

08021d04 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8021d04:	b580      	push	{r7, lr}
 8021d06:	b086      	sub	sp, #24
 8021d08:	af02      	add	r7, sp, #8
 8021d0a:	6078      	str	r0, [r7, #4]
 8021d0c:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 8021d0e:	2300      	movs	r3, #0
 8021d10:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 8021d12:	4b24      	ldr	r3, [pc, #144]	@ (8021da4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021d14:	681b      	ldr	r3, [r3, #0]
 8021d16:	2b00      	cmp	r3, #0
 8021d18:	d03f      	beq.n	8021d9a <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 8021d1a:	4b22      	ldr	r3, [pc, #136]	@ (8021da4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021d1c:	681b      	ldr	r3, [r3, #0]
 8021d1e:	4618      	mov	r0, r3
 8021d20:	f7ee fe19 	bl	8010956 <uxStreamBufferGetSize>
 8021d24:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 8021d26:	68fb      	ldr	r3, [r7, #12]
 8021d28:	2b04      	cmp	r3, #4
 8021d2a:	d936      	bls.n	8021d9a <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 8021d2c:	f7e2 fb84 	bl	8004438 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 8021d30:	4b1c      	ldr	r3, [pc, #112]	@ (8021da4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021d32:	6818      	ldr	r0, [r3, #0]
 8021d34:	f107 0208 	add.w	r2, r7, #8
 8021d38:	2300      	movs	r3, #0
 8021d3a:	9300      	str	r3, [sp, #0]
 8021d3c:	2304      	movs	r3, #4
 8021d3e:	2100      	movs	r1, #0
 8021d40:	f7ee ff27 	bl	8010b92 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8021d44:	68bb      	ldr	r3, [r7, #8]
 8021d46:	683a      	ldr	r2, [r7, #0]
 8021d48:	429a      	cmp	r2, r3
 8021d4a:	d216      	bcs.n	8021d7a <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8021d4c:	4b15      	ldr	r3, [pc, #84]	@ (8021da4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021d4e:	6818      	ldr	r0, [r3, #0]
 8021d50:	68bb      	ldr	r3, [r7, #8]
 8021d52:	2200      	movs	r2, #0
 8021d54:	9200      	str	r2, [sp, #0]
 8021d56:	4a14      	ldr	r2, [pc, #80]	@ (8021da8 <prvGetMessageFromStreamBuffer+0xa4>)
 8021d58:	2100      	movs	r1, #0
 8021d5a:	f7ee ff1a 	bl	8010b92 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 8021d5e:	683a      	ldr	r2, [r7, #0]
 8021d60:	4911      	ldr	r1, [pc, #68]	@ (8021da8 <prvGetMessageFromStreamBuffer+0xa4>)
 8021d62:	6878      	ldr	r0, [r7, #4]
 8021d64:	f000 fae4 	bl	8022330 <memcpy>
					xMessageLength = xBufferLength;
 8021d68:	683b      	ldr	r3, [r7, #0]
 8021d6a:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8021d6c:	683b      	ldr	r3, [r7, #0]
 8021d6e:	3b01      	subs	r3, #1
 8021d70:	687a      	ldr	r2, [r7, #4]
 8021d72:	4413      	add	r3, r2
 8021d74:	2200      	movs	r2, #0
 8021d76:	701a      	strb	r2, [r3, #0]
 8021d78:	e00d      	b.n	8021d96 <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 8021d7a:	4b0a      	ldr	r3, [pc, #40]	@ (8021da4 <prvGetMessageFromStreamBuffer+0xa0>)
 8021d7c:	6818      	ldr	r0, [r3, #0]
 8021d7e:	68bb      	ldr	r3, [r7, #8]
 8021d80:	2200      	movs	r2, #0
 8021d82:	9200      	str	r2, [sp, #0]
 8021d84:	687a      	ldr	r2, [r7, #4]
 8021d86:	2100      	movs	r1, #0
 8021d88:	f7ee ff03 	bl	8010b92 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 8021d8c:	68bb      	ldr	r3, [r7, #8]
 8021d8e:	687a      	ldr	r2, [r7, #4]
 8021d90:	4413      	add	r3, r2
 8021d92:	2200      	movs	r2, #0
 8021d94:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8021d96:	f7e2 fb5d 	bl	8004454 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 8021d9a:	68bb      	ldr	r3, [r7, #8]
}
 8021d9c:	4618      	mov	r0, r3
 8021d9e:	3710      	adds	r7, #16
 8021da0:	46bd      	mov	sp, r7
 8021da2:	bd80      	pop	{r7, pc}
 8021da4:	200025d0 	.word	0x200025d0
 8021da8:	20002508 	.word	0x20002508

08021dac <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8021dac:	b580      	push	{r7, lr}
 8021dae:	b08e      	sub	sp, #56	@ 0x38
 8021db0:	af04      	add	r7, sp, #16
 8021db2:	6078      	str	r0, [r7, #4]
 8021db4:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8021db6:	4b49      	ldr	r3, [pc, #292]	@ (8021edc <prvBufferFormattedString+0x130>)
 8021db8:	681b      	ldr	r3, [r3, #0]
 8021dba:	2b00      	cmp	r3, #0
 8021dbc:	d104      	bne.n	8021dc8 <prvBufferFormattedString+0x1c>
 8021dbe:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8021dc2:	4847      	ldr	r0, [pc, #284]	@ (8021ee0 <prvBufferFormattedString+0x134>)
 8021dc4:	f7df fdb8 	bl	8001938 <vAssertCalled>

	vTaskSuspendAll();
 8021dc8:	f7e2 fb36 	bl	8004438 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8021dcc:	f000 fa2a 	bl	8022224 <ullGetHighResolutionTime>
 8021dd0:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8021dd4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021dd8:	4a42      	ldr	r2, [pc, #264]	@ (8021ee4 <prvBufferFormattedString+0x138>)
 8021dda:	f04f 0300 	mov.w	r3, #0
 8021dde:	f7de fae7 	bl	80003b0 <__aeabi_uldivmod>
 8021de2:	4602      	mov	r2, r0
 8021de4:	460b      	mov	r3, r1
 8021de6:	4613      	mov	r3, r2
 8021de8:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 8021dea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021dee:	4a3d      	ldr	r2, [pc, #244]	@ (8021ee4 <prvBufferFormattedString+0x138>)
 8021df0:	f04f 0300 	mov.w	r3, #0
 8021df4:	f7de fadc 	bl	80003b0 <__aeabi_uldivmod>
 8021df8:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 8021dfc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021e00:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8021e04:	f04f 0300 	mov.w	r3, #0
 8021e08:	f7de fad2 	bl	80003b0 <__aeabi_uldivmod>
 8021e0c:	4602      	mov	r2, r0
 8021e0e:	460b      	mov	r3, r1
 8021e10:	4613      	mov	r3, r2
 8021e12:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8021e14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8021e18:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8021e1c:	f04f 0300 	mov.w	r3, #0
 8021e20:	f7de fac6 	bl	80003b0 <__aeabi_uldivmod>
 8021e24:	4613      	mov	r3, r2
 8021e26:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8021e28:	2000      	movs	r0, #0
 8021e2a:	f7e2 fc27 	bl	800467c <pcTaskGetName>
 8021e2e:	4603      	mov	r3, r0
 8021e30:	9302      	str	r3, [sp, #8]
 8021e32:	697b      	ldr	r3, [r7, #20]
 8021e34:	9301      	str	r3, [sp, #4]
 8021e36:	69bb      	ldr	r3, [r7, #24]
 8021e38:	9300      	str	r3, [sp, #0]
 8021e3a:	69fb      	ldr	r3, [r7, #28]
 8021e3c:	4a2a      	ldr	r2, [pc, #168]	@ (8021ee8 <prvBufferFormattedString+0x13c>)
 8021e3e:	21c8      	movs	r1, #200	@ 0xc8
 8021e40:	482a      	ldr	r0, [pc, #168]	@ (8021eec <prvBufferFormattedString+0x140>)
 8021e42:	f001 f885 	bl	8022f50 <snprintf>
 8021e46:	4603      	mov	r3, r0
 8021e48:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 8021e4a:	68fb      	ldr	r3, [r7, #12]
 8021e4c:	4a27      	ldr	r2, [pc, #156]	@ (8021eec <prvBufferFormattedString+0x140>)
 8021e4e:	1898      	adds	r0, r3, r2
 8021e50:	68fb      	ldr	r3, [r7, #12]
 8021e52:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8021e56:	683b      	ldr	r3, [r7, #0]
 8021e58:	687a      	ldr	r2, [r7, #4]
 8021e5a:	f001 f85d 	bl	8022f18 <vsnprintf>
 8021e5e:	4603      	mov	r3, r0
 8021e60:	461a      	mov	r2, r3
 8021e62:	68fb      	ldr	r3, [r7, #12]
 8021e64:	4413      	add	r3, r2
 8021e66:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8021e68:	4b1c      	ldr	r3, [pc, #112]	@ (8021edc <prvBufferFormattedString+0x130>)
 8021e6a:	681b      	ldr	r3, [r3, #0]
 8021e6c:	4618      	mov	r0, r3
 8021e6e:	f7ee fd50 	bl	8010912 <uxStreamBufferGetSpace>
 8021e72:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8021e74:	68fb      	ldr	r3, [r7, #12]
 8021e76:	3304      	adds	r3, #4
 8021e78:	693a      	ldr	r2, [r7, #16]
 8021e7a:	429a      	cmp	r2, r3
 8021e7c:	d90e      	bls.n	8021e9c <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 8021e7e:	4b17      	ldr	r3, [pc, #92]	@ (8021edc <prvBufferFormattedString+0x130>)
 8021e80:	6818      	ldr	r0, [r3, #0]
 8021e82:	f107 020c 	add.w	r2, r7, #12
 8021e86:	2304      	movs	r3, #4
 8021e88:	2100      	movs	r1, #0
 8021e8a:	f7ee fe02 	bl	8010a92 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 8021e8e:	4b13      	ldr	r3, [pc, #76]	@ (8021edc <prvBufferFormattedString+0x130>)
 8021e90:	6818      	ldr	r0, [r3, #0]
 8021e92:	68fb      	ldr	r3, [r7, #12]
 8021e94:	4a15      	ldr	r2, [pc, #84]	@ (8021eec <prvBufferFormattedString+0x140>)
 8021e96:	2100      	movs	r1, #0
 8021e98:	f7ee fdfb 	bl	8010a92 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 8021e9c:	f7e2 fada 	bl	8004454 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 8021ea0:	4b13      	ldr	r3, [pc, #76]	@ (8021ef0 <prvBufferFormattedString+0x144>)
 8021ea2:	681b      	ldr	r3, [r3, #0]
 8021ea4:	2b00      	cmp	r3, #0
 8021ea6:	d10a      	bne.n	8021ebe <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8021ea8:	68fb      	ldr	r3, [r7, #12]
 8021eaa:	4619      	mov	r1, r3
 8021eac:	480f      	ldr	r0, [pc, #60]	@ (8021eec <prvBufferFormattedString+0x140>)
 8021eae:	f000 f85b 	bl	8021f68 <vUDPLoggingHook>
		uxSkipCount++;
 8021eb2:	4b10      	ldr	r3, [pc, #64]	@ (8021ef4 <prvBufferFormattedString+0x148>)
 8021eb4:	681b      	ldr	r3, [r3, #0]
 8021eb6:	3301      	adds	r3, #1
 8021eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8021ef4 <prvBufferFormattedString+0x148>)
 8021eba:	6013      	str	r3, [r2, #0]
 8021ebc:	e008      	b.n	8021ed0 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 8021ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8021ef0 <prvBufferFormattedString+0x144>)
 8021ec0:	6818      	ldr	r0, [r3, #0]
 8021ec2:	2300      	movs	r3, #0
 8021ec4:	9300      	str	r3, [sp, #0]
 8021ec6:	2302      	movs	r3, #2
 8021ec8:	2200      	movs	r2, #0
 8021eca:	2100      	movs	r1, #0
 8021ecc:	f7e3 fc18 	bl	8005700 <xTaskGenericNotify>
	}

	return xLength;
 8021ed0:	68fb      	ldr	r3, [r7, #12]
}
 8021ed2:	4618      	mov	r0, r3
 8021ed4:	3728      	adds	r7, #40	@ 0x28
 8021ed6:	46bd      	mov	sp, r7
 8021ed8:	bd80      	pop	{r7, pc}
 8021eda:	bf00      	nop
 8021edc:	200025d0 	.word	0x200025d0
 8021ee0:	080274a8 	.word	0x080274a8
 8021ee4:	000f4240 	.word	0x000f4240
 8021ee8:	080274d0 	.word	0x080274d0
 8021eec:	20002508 	.word	0x20002508
 8021ef0:	200025d4 	.word	0x200025d4
 8021ef4:	200025d8 	.word	0x200025d8

08021ef8 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8021ef8:	b40f      	push	{r0, r1, r2, r3}
 8021efa:	b580      	push	{r7, lr}
 8021efc:	b082      	sub	sp, #8
 8021efe:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 8021f00:	f7ff fece 	bl	8021ca0 <prvInitialiseLogging>
 8021f04:	4603      	mov	r3, r0
 8021f06:	2b00      	cmp	r3, #0
 8021f08:	d008      	beq.n	8021f1c <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 8021f0a:	f107 0314 	add.w	r3, r7, #20
 8021f0e:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 8021f10:	6839      	ldr	r1, [r7, #0]
 8021f12:	6938      	ldr	r0, [r7, #16]
 8021f14:	f7ff ff4a 	bl	8021dac <prvBufferFormattedString>
 8021f18:	6078      	str	r0, [r7, #4]
 8021f1a:	e001      	b.n	8021f20 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 8021f1c:	2300      	movs	r3, #0
 8021f1e:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 8021f20:	687b      	ldr	r3, [r7, #4]
}
 8021f22:	4618      	mov	r0, r3
 8021f24:	3708      	adds	r7, #8
 8021f26:	46bd      	mov	sp, r7
 8021f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021f2c:	b004      	add	sp, #16
 8021f2e:	4770      	bx	lr

08021f30 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 8021f30:	b580      	push	{r7, lr}
 8021f32:	b082      	sub	sp, #8
 8021f34:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8021f36:	4b08      	ldr	r3, [pc, #32]	@ (8021f58 <vUDPLoggingTaskCreate+0x28>)
 8021f38:	9301      	str	r3, [sp, #4]
 8021f3a:	2302      	movs	r3, #2
 8021f3c:	9300      	str	r3, [sp, #0]
 8021f3e:	2300      	movs	r3, #0
 8021f40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8021f44:	4905      	ldr	r1, [pc, #20]	@ (8021f5c <vUDPLoggingTaskCreate+0x2c>)
 8021f46:	4806      	ldr	r0, [pc, #24]	@ (8021f60 <vUDPLoggingTaskCreate+0x30>)
 8021f48:	f7e2 f87e 	bl	8004048 <xTaskCreate>
 8021f4c:	4603      	mov	r3, r0
 8021f4e:	4a05      	ldr	r2, [pc, #20]	@ (8021f64 <vUDPLoggingTaskCreate+0x34>)
 8021f50:	6013      	str	r3, [r2, #0]
}
 8021f52:	bf00      	nop
 8021f54:	46bd      	mov	sp, r7
 8021f56:	bd80      	pop	{r7, pc}
 8021f58:	200025d4 	.word	0x200025d4
 8021f5c:	080274e8 	.word	0x080274e8
 8021f60:	08021f81 	.word	0x08021f81
 8021f64:	200025dc 	.word	0x200025dc

08021f68 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8021f68:	b480      	push	{r7}
 8021f6a:	b083      	sub	sp, #12
 8021f6c:	af00      	add	r7, sp, #0
 8021f6e:	6078      	str	r0, [r7, #4]
 8021f70:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8021f72:	bf00      	nop
 8021f74:	370c      	adds	r7, #12
 8021f76:	46bd      	mov	sp, r7
 8021f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f7c:	4770      	bx	lr
	...

08021f80 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8021f80:	b580      	push	{r7, lr}
 8021f82:	b098      	sub	sp, #96	@ 0x60
 8021f84:	af02      	add	r7, sp, #8
 8021f86:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8021f88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8021f8c:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021f8e:	2000      	movs	r0, #0
 8021f90:	f7eb fa92 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 8021f94:	6538      	str	r0, [r7, #80]	@ 0x50
 8021f96:	e01c      	b.n	8021fd2 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8021f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021f9a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021f9e:	f003 0310 	and.w	r3, r3, #16
 8021fa2:	b2db      	uxtb	r3, r3
 8021fa4:	2b00      	cmp	r3, #0
 8021fa6:	d00f      	beq.n	8021fc8 <prvLoggingTask+0x48>
 8021fa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021faa:	2b00      	cmp	r3, #0
 8021fac:	d009      	beq.n	8021fc2 <prvLoggingTask+0x42>
 8021fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021fb0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8021fb4:	f003 0304 	and.w	r3, r3, #4
 8021fb8:	b2db      	uxtb	r3, r3
 8021fba:	2b00      	cmp	r3, #0
 8021fbc:	d101      	bne.n	8021fc2 <prvLoggingTask+0x42>
 8021fbe:	2301      	movs	r3, #1
 8021fc0:	e000      	b.n	8021fc4 <prvLoggingTask+0x44>
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	2b00      	cmp	r3, #0
 8021fc6:	d108      	bne.n	8021fda <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8021fc8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8021fca:	2000      	movs	r0, #0
 8021fcc:	f7eb fa96 	bl	800d4fc <FreeRTOS_NextEndPoint>
 8021fd0:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8021fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d1df      	bne.n	8021f98 <prvLoggingTask+0x18>
 8021fd8:	e000      	b.n	8021fdc <prvLoggingTask+0x5c>
				{
					break;
 8021fda:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8021fdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8021fde:	2b00      	cmp	r3, #0
 8021fe0:	d000      	beq.n	8021fe4 <prvLoggingTask+0x64>
			{
				break;
 8021fe2:	e004      	b.n	8021fee <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8021fe4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8021fe8:	f7e2 f96e 	bl	80042c8 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8021fec:	e7cf      	b.n	8021f8e <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 8021fee:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8021ff0:	f7e2 f96a 	bl	80042c8 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8021ff4:	2211      	movs	r2, #17
 8021ff6:	2102      	movs	r1, #2
 8021ff8:	2002      	movs	r0, #2
 8021ffa:	f7eb ffd9 	bl	800dfb0 <FreeRTOS_socket>
 8021ffe:	4603      	mov	r3, r0
 8022000:	4a4c      	ldr	r2, [pc, #304]	@ (8022134 <prvLoggingTask+0x1b4>)
 8022002:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8022004:	4b4b      	ldr	r3, [pc, #300]	@ (8022134 <prvLoggingTask+0x1b4>)
 8022006:	681b      	ldr	r3, [r3, #0]
 8022008:	f1b3 3fff 	cmp.w	r3, #4294967295
 802200c:	d0ef      	beq.n	8021fee <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 802200e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022010:	2b00      	cmp	r3, #0
 8022012:	d104      	bne.n	802201e <prvLoggingTask+0x9e>
 8022014:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8022018:	4847      	ldr	r0, [pc, #284]	@ (8022138 <prvLoggingTask+0x1b8>)
 802201a:	f7df fc8d 	bl	8001938 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 802201e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022020:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022024:	2b00      	cmp	r3, #0
 8022026:	d104      	bne.n	8022032 <prvLoggingTask+0xb2>
 8022028:	f240 11df 	movw	r1, #479	@ 0x1df
 802202c:	4842      	ldr	r0, [pc, #264]	@ (8022138 <prvLoggingTask+0x1b8>)
 802202e:	f7df fc83 	bl	8001938 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 8022032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022034:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8022038:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 802203a:	f246 2309 	movw	r3, #25097	@ 0x6209
 802203e:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8022040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8022042:	681b      	ldr	r3, [r3, #0]
 8022044:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8022046:	4b3b      	ldr	r3, [pc, #236]	@ (8022134 <prvLoggingTask+0x1b4>)
 8022048:	681b      	ldr	r3, [r3, #0]
 802204a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 802204e:	2218      	movs	r2, #24
 8022050:	4618      	mov	r0, r3
 8022052:	f7ec f99d 	bl	800e390 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8022056:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8022058:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 802205a:	4b36      	ldr	r3, [pc, #216]	@ (8022134 <prvLoggingTask+0x1b4>)
 802205c:	6818      	ldr	r0, [r3, #0]
 802205e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8022062:	2204      	movs	r2, #4
 8022064:	9200      	str	r2, [sp, #0]
 8022066:	2201      	movs	r2, #1
 8022068:	2100      	movs	r1, #0
 802206a:	f7ec ff5b 	bl	800ef24 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 802206e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8022070:	2101      	movs	r1, #1
 8022072:	2000      	movs	r0, #0
 8022074:	f7e3 fa38 	bl	80054e8 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8022078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802207a:	691b      	ldr	r3, [r3, #16]
 802207c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 802207e:	4798      	blx	r3
 8022080:	4603      	mov	r3, r0
 8022082:	2b00      	cmp	r3, #0
 8022084:	d0f3      	beq.n	802206e <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8022086:	2300      	movs	r3, #0
 8022088:	657b      	str	r3, [r7, #84]	@ 0x54
 802208a:	e04c      	b.n	8022126 <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 802208c:	21c8      	movs	r1, #200	@ 0xc8
 802208e:	482b      	ldr	r0, [pc, #172]	@ (802213c <prvLoggingTask+0x1bc>)
 8022090:	f7ff fe38 	bl	8021d04 <prvGetMessageFromStreamBuffer>
 8022094:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8022096:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022098:	2b00      	cmp	r3, #0
 802209a:	d048      	beq.n	802212e <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 802209c:	2000      	movs	r0, #0
 802209e:	f7eb fa0b 	bl	800d4b8 <FreeRTOS_FirstEndPoint>
 80220a2:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80220a4:	e02a      	b.n	80220fc <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 80220a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	d022      	beq.n	80220f2 <prvLoggingTask+0x172>
 80220ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80220ae:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80220b2:	f003 0304 	and.w	r3, r3, #4
 80220b6:	b2db      	uxtb	r3, r3
 80220b8:	2b00      	cmp	r3, #0
 80220ba:	d11a      	bne.n	80220f2 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 80220bc:	2318      	movs	r3, #24
 80220be:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 80220c0:	2302      	movs	r3, #2
 80220c2:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 80220c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80220c6:	681a      	ldr	r2, [r3, #0]
 80220c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80220ca:	685b      	ldr	r3, [r3, #4]
 80220cc:	43db      	mvns	r3, r3
 80220ce:	4313      	orrs	r3, r2
 80220d0:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 80220d2:	f246 3309 	movw	r3, #25353	@ 0x6309
 80220d6:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 80220d8:	4b16      	ldr	r3, [pc, #88]	@ (8022134 <prvLoggingTask+0x1b4>)
 80220da:	6818      	ldr	r0, [r3, #0]
 80220dc:	2318      	movs	r3, #24
 80220de:	9301      	str	r3, [sp, #4]
 80220e0:	f107 030c 	add.w	r3, r7, #12
 80220e4:	9300      	str	r3, [sp, #0]
 80220e6:	2300      	movs	r3, #0
 80220e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80220ea:	4914      	ldr	r1, [pc, #80]	@ (802213c <prvLoggingTask+0x1bc>)
 80220ec:	f7ec f8e0 	bl	800e2b0 <FreeRTOS_sendto>
							}
							break;
 80220f0:	e007      	b.n	8022102 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 80220f2:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 80220f4:	2000      	movs	r0, #0
 80220f6:	f7eb fa01 	bl	800d4fc <FreeRTOS_NextEndPoint>
 80220fa:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 80220fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d1d1      	bne.n	80220a6 <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8022102:	4b0f      	ldr	r3, [pc, #60]	@ (8022140 <prvLoggingTask+0x1c0>)
 8022104:	681b      	ldr	r3, [r3, #0]
 8022106:	2b00      	cmp	r3, #0
 8022108:	d005      	beq.n	8022116 <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 802210a:	4b0d      	ldr	r3, [pc, #52]	@ (8022140 <prvLoggingTask+0x1c0>)
 802210c:	681b      	ldr	r3, [r3, #0]
 802210e:	3b01      	subs	r3, #1
 8022110:	4a0b      	ldr	r2, [pc, #44]	@ (8022140 <prvLoggingTask+0x1c0>)
 8022112:	6013      	str	r3, [r2, #0]
 8022114:	e004      	b.n	8022120 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8022116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8022118:	4619      	mov	r1, r3
 802211a:	4808      	ldr	r0, [pc, #32]	@ (802213c <prvLoggingTask+0x1bc>)
 802211c:	f7ff ff24 	bl	8021f68 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8022120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022122:	3301      	adds	r3, #1
 8022124:	657b      	str	r3, [r7, #84]	@ 0x54
 8022126:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8022128:	2b13      	cmp	r3, #19
 802212a:	ddaf      	ble.n	802208c <prvLoggingTask+0x10c>
 802212c:	e79f      	b.n	802206e <prvLoggingTask+0xee>
					break;
 802212e:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8022130:	e79d      	b.n	802206e <prvLoggingTask+0xee>
 8022132:	bf00      	nop
 8022134:	20000028 	.word	0x20000028
 8022138:	080274a8 	.word	0x080274a8
 802213c:	200025e4 	.word	0x200025e4
 8022140:	200025d8 	.word	0x200025d8

08022144 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8022144:	b480      	push	{r7}
 8022146:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8022148:	4b0c      	ldr	r3, [pc, #48]	@ (802217c <TIM2_IRQHandler+0x38>)
 802214a:	681b      	ldr	r3, [r3, #0]
 802214c:	691b      	ldr	r3, [r3, #16]
 802214e:	4a0c      	ldr	r2, [pc, #48]	@ (8022180 <TIM2_IRQHandler+0x3c>)
 8022150:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8022152:	4b0b      	ldr	r3, [pc, #44]	@ (8022180 <TIM2_IRQHandler+0x3c>)
 8022154:	681b      	ldr	r3, [r3, #0]
 8022156:	f003 0301 	and.w	r3, r3, #1
 802215a:	2b00      	cmp	r3, #0
 802215c:	d009      	beq.n	8022172 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 802215e:	4b07      	ldr	r3, [pc, #28]	@ (802217c <TIM2_IRQHandler+0x38>)
 8022160:	681b      	ldr	r3, [r3, #0]
 8022162:	f06f 0201 	mvn.w	r2, #1
 8022166:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8022168:	4b06      	ldr	r3, [pc, #24]	@ (8022184 <TIM2_IRQHandler+0x40>)
 802216a:	681b      	ldr	r3, [r3, #0]
 802216c:	3301      	adds	r3, #1
 802216e:	4a05      	ldr	r2, [pc, #20]	@ (8022184 <TIM2_IRQHandler+0x40>)
 8022170:	6013      	str	r3, [r2, #0]
	}
}
 8022172:	bf00      	nop
 8022174:	46bd      	mov	sp, r7
 8022176:	f85d 7b04 	ldr.w	r7, [sp], #4
 802217a:	4770      	bx	lr
 802217c:	20000444 	.word	0x20000444
 8022180:	200026b0 	.word	0x200026b0
 8022184:	200026ac 	.word	0x200026ac

08022188 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8022188:	b580      	push	{r7, lr}
 802218a:	b082      	sub	sp, #8
 802218c:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 802218e:	4b20      	ldr	r3, [pc, #128]	@ (8022210 <vStartHighResolutionTimer+0x88>)
 8022190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8022194:	4a1e      	ldr	r2, [pc, #120]	@ (8022210 <vStartHighResolutionTimer+0x88>)
 8022196:	f043 0301 	orr.w	r3, r3, #1
 802219a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 802219e:	4b1c      	ldr	r3, [pc, #112]	@ (8022210 <vStartHighResolutionTimer+0x88>)
 80221a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80221a4:	f003 0301 	and.w	r3, r3, #1
 80221a8:	607b      	str	r3, [r7, #4]
 80221aa:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 80221ac:	4b19      	ldr	r3, [pc, #100]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80221b2:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 80221b4:	23c8      	movs	r3, #200	@ 0xc8
 80221b6:	3b01      	subs	r3, #1
 80221b8:	4a16      	ldr	r2, [pc, #88]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221ba:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 80221bc:	4b15      	ldr	r3, [pc, #84]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221be:	2200      	movs	r2, #0
 80221c0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 80221c2:	4b15      	ldr	r3, [pc, #84]	@ (8022218 <vStartHighResolutionTimer+0x90>)
 80221c4:	3b01      	subs	r3, #1
 80221c6:	4a13      	ldr	r2, [pc, #76]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221c8:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 80221ca:	4b12      	ldr	r3, [pc, #72]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221cc:	2200      	movs	r2, #0
 80221ce:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 80221d0:	4b10      	ldr	r3, [pc, #64]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221d2:	2200      	movs	r2, #0
 80221d4:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80221d6:	4b0f      	ldr	r3, [pc, #60]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221d8:	2201      	movs	r2, #1
 80221da:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 80221dc:	2200      	movs	r2, #0
 80221de:	2105      	movs	r1, #5
 80221e0:	201c      	movs	r0, #28
 80221e2:	f7f7 ffa4 	bl	801a12e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 80221e6:	201c      	movs	r0, #28
 80221e8:	f7f7 ffbb 	bl	801a162 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 80221ec:	4809      	ldr	r0, [pc, #36]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221ee:	f7fd fc96 	bl	801fb1e <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 80221f2:	4808      	ldr	r0, [pc, #32]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221f4:	f7fd fcea 	bl	801fbcc <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 80221f8:	4b06      	ldr	r3, [pc, #24]	@ (8022214 <vStartHighResolutionTimer+0x8c>)
 80221fa:	681b      	ldr	r3, [r3, #0]
 80221fc:	691b      	ldr	r3, [r3, #16]
 80221fe:	4a07      	ldr	r2, [pc, #28]	@ (802221c <vStartHighResolutionTimer+0x94>)
 8022200:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8022202:	4b07      	ldr	r3, [pc, #28]	@ (8022220 <vStartHighResolutionTimer+0x98>)
 8022204:	2200      	movs	r2, #0
 8022206:	601a      	str	r2, [r3, #0]
}
 8022208:	bf00      	nop
 802220a:	3708      	adds	r7, #8
 802220c:	46bd      	mov	sp, r7
 802220e:	bd80      	pop	{r7, pc}
 8022210:	58024400 	.word	0x58024400
 8022214:	20000444 	.word	0x20000444
 8022218:	00989680 	.word	0x00989680
 802221c:	200026b0 	.word	0x200026b0
 8022220:	200026ac 	.word	0x200026ac

08022224 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8022224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8022228:	b08e      	sub	sp, #56	@ 0x38
 802222a:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 802222c:	493d      	ldr	r1, [pc, #244]	@ (8022324 <ullGetHighResolutionTime+0x100>)
 802222e:	6809      	ldr	r1, [r1, #0]
 8022230:	2900      	cmp	r1, #0
 8022232:	d132      	bne.n	802229a <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8022234:	f7e2 fa12 	bl	800465c <xTaskGetTickCount>
 8022238:	4603      	mov	r3, r0
 802223a:	2200      	movs	r2, #0
 802223c:	469a      	mov	sl, r3
 802223e:	4693      	mov	fp, r2
 8022240:	4652      	mov	r2, sl
 8022242:	465b      	mov	r3, fp
 8022244:	f04f 0000 	mov.w	r0, #0
 8022248:	f04f 0100 	mov.w	r1, #0
 802224c:	0159      	lsls	r1, r3, #5
 802224e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8022252:	0150      	lsls	r0, r2, #5
 8022254:	4602      	mov	r2, r0
 8022256:	460b      	mov	r3, r1
 8022258:	ebb2 040a 	subs.w	r4, r2, sl
 802225c:	eb63 050b 	sbc.w	r5, r3, fp
 8022260:	f04f 0200 	mov.w	r2, #0
 8022264:	f04f 0300 	mov.w	r3, #0
 8022268:	00ab      	lsls	r3, r5, #2
 802226a:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 802226e:	00a2      	lsls	r2, r4, #2
 8022270:	4614      	mov	r4, r2
 8022272:	461d      	mov	r5, r3
 8022274:	eb14 080a 	adds.w	r8, r4, sl
 8022278:	eb45 090b 	adc.w	r9, r5, fp
 802227c:	f04f 0200 	mov.w	r2, #0
 8022280:	f04f 0300 	mov.w	r3, #0
 8022284:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8022288:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 802228c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8022290:	4690      	mov	r8, r2
 8022292:	4699      	mov	r9, r3
 8022294:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8022298:	e03c      	b.n	8022314 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 802229a:	4922      	ldr	r1, [pc, #136]	@ (8022324 <ullGetHighResolutionTime+0x100>)
 802229c:	6809      	ldr	r1, [r1, #0]
 802229e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80222a0:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 80222a2:	4921      	ldr	r1, [pc, #132]	@ (8022328 <ullGetHighResolutionTime+0x104>)
 80222a4:	6809      	ldr	r1, [r1, #0]
 80222a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 80222a8:	491e      	ldr	r1, [pc, #120]	@ (8022324 <ullGetHighResolutionTime+0x100>)
 80222aa:	6809      	ldr	r1, [r1, #0]
 80222ac:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 80222ae:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 80222b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80222b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80222b4:	4288      	cmp	r0, r1
 80222b6:	d200      	bcs.n	80222ba <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 80222b8:	e7ef      	b.n	802229a <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 80222ba:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 80222bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80222be:	2000      	movs	r0, #0
 80222c0:	61b9      	str	r1, [r7, #24]
 80222c2:	61f8      	str	r0, [r7, #28]
 80222c4:	4819      	ldr	r0, [pc, #100]	@ (802232c <ullGetHighResolutionTime+0x108>)
 80222c6:	2100      	movs	r1, #0
 80222c8:	6138      	str	r0, [r7, #16]
 80222ca:	6179      	str	r1, [r7, #20]
 80222cc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80222d0:	4649      	mov	r1, r9
 80222d2:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80222d6:	4650      	mov	r0, sl
 80222d8:	fb00 f001 	mul.w	r0, r0, r1
 80222dc:	4659      	mov	r1, fp
 80222de:	4644      	mov	r4, r8
 80222e0:	fb04 f101 	mul.w	r1, r4, r1
 80222e4:	4401      	add	r1, r0
 80222e6:	4640      	mov	r0, r8
 80222e8:	4654      	mov	r4, sl
 80222ea:	fba0 2304 	umull	r2, r3, r0, r4
 80222ee:	4419      	add	r1, r3
 80222f0:	460b      	mov	r3, r1
 80222f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80222f4:	2000      	movs	r0, #0
 80222f6:	60b9      	str	r1, [r7, #8]
 80222f8:	60f8      	str	r0, [r7, #12]
 80222fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80222fe:	4621      	mov	r1, r4
 8022300:	1851      	adds	r1, r2, r1
 8022302:	6039      	str	r1, [r7, #0]
 8022304:	4629      	mov	r1, r5
 8022306:	eb43 0101 	adc.w	r1, r3, r1
 802230a:	6079      	str	r1, [r7, #4]
 802230c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8022310:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 8022314:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 8022318:	4610      	mov	r0, r2
 802231a:	4619      	mov	r1, r3
 802231c:	3738      	adds	r7, #56	@ 0x38
 802231e:	46bd      	mov	sp, r7
 8022320:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8022324:	20000444 	.word	0x20000444
 8022328:	200026ac 	.word	0x200026ac
 802232c:	00989680 	.word	0x00989680

08022330 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 8022330:	b480      	push	{r7}
 8022332:	b08d      	sub	sp, #52	@ 0x34
 8022334:	af00      	add	r7, sp, #0
 8022336:	60f8      	str	r0, [r7, #12]
 8022338:	60b9      	str	r1, [r7, #8]
 802233a:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 802233c:	68fb      	ldr	r3, [r7, #12]
 802233e:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 8022340:	68bb      	ldr	r3, [r7, #8]
 8022342:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 8022344:	697a      	ldr	r2, [r7, #20]
 8022346:	687b      	ldr	r3, [r7, #4]
 8022348:	4413      	add	r3, r2
 802234a:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 802234c:	69ba      	ldr	r2, [r7, #24]
 802234e:	697b      	ldr	r3, [r7, #20]
 8022350:	4053      	eors	r3, r2
 8022352:	f003 0303 	and.w	r3, r3, #3
 8022356:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 8022358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802235a:	f003 0301 	and.w	r3, r3, #1
 802235e:	2b00      	cmp	r3, #0
 8022360:	f040 80a1 	bne.w	80224a6 <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 8022364:	697b      	ldr	r3, [r7, #20]
 8022366:	f003 0301 	and.w	r3, r3, #1
 802236a:	2b00      	cmp	r3, #0
 802236c:	d00b      	beq.n	8022386 <memcpy+0x56>
 802236e:	697a      	ldr	r2, [r7, #20]
 8022370:	693b      	ldr	r3, [r7, #16]
 8022372:	429a      	cmp	r2, r3
 8022374:	d207      	bcs.n	8022386 <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8022376:	697a      	ldr	r2, [r7, #20]
 8022378:	1c53      	adds	r3, r2, #1
 802237a:	617b      	str	r3, [r7, #20]
 802237c:	69bb      	ldr	r3, [r7, #24]
 802237e:	1c59      	adds	r1, r3, #1
 8022380:	61b9      	str	r1, [r7, #24]
 8022382:	7812      	ldrb	r2, [r2, #0]
 8022384:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8022386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022388:	f003 0302 	and.w	r3, r3, #2
 802238c:	2b00      	cmp	r3, #0
 802238e:	d01f      	beq.n	80223d0 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8022390:	693b      	ldr	r3, [r7, #16]
 8022392:	f003 0301 	and.w	r3, r3, #1
 8022396:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8022398:	693b      	ldr	r3, [r7, #16]
 802239a:	f023 0301 	bic.w	r3, r3, #1
 802239e:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 80223a0:	e00a      	b.n	80223b8 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 80223a2:	697a      	ldr	r2, [r7, #20]
 80223a4:	1c93      	adds	r3, r2, #2
 80223a6:	617b      	str	r3, [r7, #20]
 80223a8:	69bb      	ldr	r3, [r7, #24]
 80223aa:	1c99      	adds	r1, r3, #2
 80223ac:	61b9      	str	r1, [r7, #24]
 80223ae:	8812      	ldrh	r2, [r2, #0]
 80223b0:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 80223b2:	687b      	ldr	r3, [r7, #4]
 80223b4:	3b02      	subs	r3, #2
 80223b6:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 80223b8:	697a      	ldr	r2, [r7, #20]
 80223ba:	693b      	ldr	r3, [r7, #16]
 80223bc:	429a      	cmp	r2, r3
 80223be:	d202      	bcs.n	80223c6 <memcpy+0x96>
 80223c0:	687b      	ldr	r3, [r7, #4]
 80223c2:	2b00      	cmp	r3, #0
 80223c4:	d1ed      	bne.n	80223a2 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 80223c6:	693a      	ldr	r2, [r7, #16]
 80223c8:	69fb      	ldr	r3, [r7, #28]
 80223ca:	4313      	orrs	r3, r2
 80223cc:	613b      	str	r3, [r7, #16]
 80223ce:	e0ae      	b.n	802252e <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 80223d0:	697b      	ldr	r3, [r7, #20]
 80223d2:	f003 0302 	and.w	r3, r3, #2
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d00c      	beq.n	80223f4 <memcpy+0xc4>
 80223da:	697a      	ldr	r2, [r7, #20]
 80223dc:	693b      	ldr	r3, [r7, #16]
 80223de:	3b01      	subs	r3, #1
 80223e0:	429a      	cmp	r2, r3
 80223e2:	d207      	bcs.n	80223f4 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 80223e4:	697a      	ldr	r2, [r7, #20]
 80223e6:	1c93      	adds	r3, r2, #2
 80223e8:	617b      	str	r3, [r7, #20]
 80223ea:	69bb      	ldr	r3, [r7, #24]
 80223ec:	1c99      	adds	r1, r3, #2
 80223ee:	61b9      	str	r1, [r7, #24]
 80223f0:	8812      	ldrh	r2, [r2, #0]
 80223f2:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 80223f4:	693b      	ldr	r3, [r7, #16]
 80223f6:	f003 0303 	and.w	r3, r3, #3
 80223fa:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 80223fc:	693b      	ldr	r3, [r7, #16]
 80223fe:	f023 0303 	bic.w	r3, r3, #3
 8022402:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8022404:	693a      	ldr	r2, [r7, #16]
 8022406:	697b      	ldr	r3, [r7, #20]
 8022408:	1ad3      	subs	r3, r2, r3
 802240a:	109b      	asrs	r3, r3, #2
 802240c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 802240e:	e02f      	b.n	8022470 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8022410:	697a      	ldr	r2, [r7, #20]
 8022412:	69bb      	ldr	r3, [r7, #24]
 8022414:	6812      	ldr	r2, [r2, #0]
 8022416:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8022418:	697a      	ldr	r2, [r7, #20]
 802241a:	69bb      	ldr	r3, [r7, #24]
 802241c:	3304      	adds	r3, #4
 802241e:	6852      	ldr	r2, [r2, #4]
 8022420:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8022422:	697a      	ldr	r2, [r7, #20]
 8022424:	69bb      	ldr	r3, [r7, #24]
 8022426:	3308      	adds	r3, #8
 8022428:	6892      	ldr	r2, [r2, #8]
 802242a:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 802242c:	697a      	ldr	r2, [r7, #20]
 802242e:	69bb      	ldr	r3, [r7, #24]
 8022430:	330c      	adds	r3, #12
 8022432:	68d2      	ldr	r2, [r2, #12]
 8022434:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8022436:	697a      	ldr	r2, [r7, #20]
 8022438:	69bb      	ldr	r3, [r7, #24]
 802243a:	3310      	adds	r3, #16
 802243c:	6912      	ldr	r2, [r2, #16]
 802243e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8022440:	697a      	ldr	r2, [r7, #20]
 8022442:	69bb      	ldr	r3, [r7, #24]
 8022444:	3314      	adds	r3, #20
 8022446:	6952      	ldr	r2, [r2, #20]
 8022448:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 802244a:	697a      	ldr	r2, [r7, #20]
 802244c:	69bb      	ldr	r3, [r7, #24]
 802244e:	3318      	adds	r3, #24
 8022450:	6992      	ldr	r2, [r2, #24]
 8022452:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8022454:	697a      	ldr	r2, [r7, #20]
 8022456:	69bb      	ldr	r3, [r7, #24]
 8022458:	331c      	adds	r3, #28
 802245a:	69d2      	ldr	r2, [r2, #28]
 802245c:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 802245e:	69bb      	ldr	r3, [r7, #24]
 8022460:	3320      	adds	r3, #32
 8022462:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8022464:	697b      	ldr	r3, [r7, #20]
 8022466:	3320      	adds	r3, #32
 8022468:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 802246a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802246c:	3b08      	subs	r3, #8
 802246e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8022470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022472:	2b08      	cmp	r3, #8
 8022474:	dccc      	bgt.n	8022410 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8022476:	e00a      	b.n	802248e <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8022478:	697a      	ldr	r2, [r7, #20]
 802247a:	1d13      	adds	r3, r2, #4
 802247c:	617b      	str	r3, [r7, #20]
 802247e:	69bb      	ldr	r3, [r7, #24]
 8022480:	1d19      	adds	r1, r3, #4
 8022482:	61b9      	str	r1, [r7, #24]
 8022484:	6812      	ldr	r2, [r2, #0]
 8022486:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8022488:	687b      	ldr	r3, [r7, #4]
 802248a:	3b04      	subs	r3, #4
 802248c:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 802248e:	697a      	ldr	r2, [r7, #20]
 8022490:	693b      	ldr	r3, [r7, #16]
 8022492:	429a      	cmp	r2, r3
 8022494:	d202      	bcs.n	802249c <memcpy+0x16c>
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	2b00      	cmp	r3, #0
 802249a:	d1ed      	bne.n	8022478 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 802249c:	693a      	ldr	r2, [r7, #16]
 802249e:	6a3b      	ldr	r3, [r7, #32]
 80224a0:	4313      	orrs	r3, r2
 80224a2:	613b      	str	r3, [r7, #16]
 80224a4:	e043      	b.n	802252e <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 80224a6:	693a      	ldr	r2, [r7, #16]
 80224a8:	697b      	ldr	r3, [r7, #20]
 80224aa:	1ad3      	subs	r3, r2, r3
 80224ac:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 80224ae:	e02f      	b.n	8022510 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 80224b0:	697a      	ldr	r2, [r7, #20]
 80224b2:	69bb      	ldr	r3, [r7, #24]
 80224b4:	7812      	ldrb	r2, [r2, #0]
 80224b6:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 80224b8:	697a      	ldr	r2, [r7, #20]
 80224ba:	69bb      	ldr	r3, [r7, #24]
 80224bc:	3301      	adds	r3, #1
 80224be:	7852      	ldrb	r2, [r2, #1]
 80224c0:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 80224c2:	697a      	ldr	r2, [r7, #20]
 80224c4:	69bb      	ldr	r3, [r7, #24]
 80224c6:	3302      	adds	r3, #2
 80224c8:	7892      	ldrb	r2, [r2, #2]
 80224ca:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 80224cc:	697a      	ldr	r2, [r7, #20]
 80224ce:	69bb      	ldr	r3, [r7, #24]
 80224d0:	3303      	adds	r3, #3
 80224d2:	78d2      	ldrb	r2, [r2, #3]
 80224d4:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 80224d6:	697a      	ldr	r2, [r7, #20]
 80224d8:	69bb      	ldr	r3, [r7, #24]
 80224da:	3304      	adds	r3, #4
 80224dc:	7912      	ldrb	r2, [r2, #4]
 80224de:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 80224e0:	697a      	ldr	r2, [r7, #20]
 80224e2:	69bb      	ldr	r3, [r7, #24]
 80224e4:	3305      	adds	r3, #5
 80224e6:	7952      	ldrb	r2, [r2, #5]
 80224e8:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 80224ea:	697a      	ldr	r2, [r7, #20]
 80224ec:	69bb      	ldr	r3, [r7, #24]
 80224ee:	3306      	adds	r3, #6
 80224f0:	7992      	ldrb	r2, [r2, #6]
 80224f2:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 80224f4:	697a      	ldr	r2, [r7, #20]
 80224f6:	69bb      	ldr	r3, [r7, #24]
 80224f8:	3307      	adds	r3, #7
 80224fa:	79d2      	ldrb	r2, [r2, #7]
 80224fc:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 80224fe:	69bb      	ldr	r3, [r7, #24]
 8022500:	3308      	adds	r3, #8
 8022502:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8022504:	697b      	ldr	r3, [r7, #20]
 8022506:	3308      	adds	r3, #8
 8022508:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 802250a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802250c:	3b08      	subs	r3, #8
 802250e:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8022510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022512:	2b08      	cmp	r3, #8
 8022514:	dccc      	bgt.n	80224b0 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8022516:	e00a      	b.n	802252e <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8022518:	697a      	ldr	r2, [r7, #20]
 802251a:	1c53      	adds	r3, r2, #1
 802251c:	617b      	str	r3, [r7, #20]
 802251e:	69bb      	ldr	r3, [r7, #24]
 8022520:	1c59      	adds	r1, r3, #1
 8022522:	61b9      	str	r1, [r7, #24]
 8022524:	7812      	ldrb	r2, [r2, #0]
 8022526:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	3b01      	subs	r3, #1
 802252c:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 802252e:	697a      	ldr	r2, [r7, #20]
 8022530:	693b      	ldr	r3, [r7, #16]
 8022532:	429a      	cmp	r2, r3
 8022534:	d202      	bcs.n	802253c <memcpy+0x20c>
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	2b00      	cmp	r3, #0
 802253a:	d1ed      	bne.n	8022518 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 802253c:	68fb      	ldr	r3, [r7, #12]
}
 802253e:	4618      	mov	r0, r3
 8022540:	3734      	adds	r7, #52	@ 0x34
 8022542:	46bd      	mov	sp, r7
 8022544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022548:	4770      	bx	lr

0802254a <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 802254a:	b480      	push	{r7}
 802254c:	b08b      	sub	sp, #44	@ 0x2c
 802254e:	af00      	add	r7, sp, #0
 8022550:	60f8      	str	r0, [r7, #12]
 8022552:	60b9      	str	r1, [r7, #8]
 8022554:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8022556:	68fb      	ldr	r3, [r7, #12]
 8022558:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 802255a:	697a      	ldr	r2, [r7, #20]
 802255c:	687b      	ldr	r3, [r7, #4]
 802255e:	4413      	add	r3, r2
 8022560:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	2b07      	cmp	r3, #7
 8022566:	d97b      	bls.n	8022660 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8022568:	68bb      	ldr	r3, [r7, #8]
 802256a:	b2db      	uxtb	r3, r3
 802256c:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 802256e:	69fb      	ldr	r3, [r7, #28]
 8022570:	021a      	lsls	r2, r3, #8
 8022572:	69fb      	ldr	r3, [r7, #28]
 8022574:	041b      	lsls	r3, r3, #16
 8022576:	431a      	orrs	r2, r3
 8022578:	69fb      	ldr	r3, [r7, #28]
 802257a:	061b      	lsls	r3, r3, #24
 802257c:	4313      	orrs	r3, r2
 802257e:	69fa      	ldr	r2, [r7, #28]
 8022580:	4313      	orrs	r3, r2
 8022582:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8022584:	697b      	ldr	r3, [r7, #20]
 8022586:	f003 0303 	and.w	r3, r3, #3
 802258a:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 802258c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802258e:	2b00      	cmp	r3, #0
 8022590:	d010      	beq.n	80225b4 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8022592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8022594:	f1c3 0304 	rsb	r3, r3, #4
 8022598:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 802259a:	e006      	b.n	80225aa <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 802259c:	697b      	ldr	r3, [r7, #20]
 802259e:	68ba      	ldr	r2, [r7, #8]
 80225a0:	b2d2      	uxtb	r2, r2
 80225a2:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 80225a4:	697b      	ldr	r3, [r7, #20]
 80225a6:	3301      	adds	r3, #1
 80225a8:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 80225aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80225ac:	1e5a      	subs	r2, r3, #1
 80225ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80225b0:	2b00      	cmp	r3, #0
 80225b2:	d1f3      	bne.n	802259c <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 80225b4:	693b      	ldr	r3, [r7, #16]
 80225b6:	f003 0303 	and.w	r3, r3, #3
 80225ba:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 80225bc:	693b      	ldr	r3, [r7, #16]
 80225be:	f023 0303 	bic.w	r3, r3, #3
 80225c2:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 80225c4:	693a      	ldr	r2, [r7, #16]
 80225c6:	697b      	ldr	r3, [r7, #20]
 80225c8:	1ad3      	subs	r3, r2, r3
 80225ca:	109b      	asrs	r3, r3, #2
 80225cc:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 80225ce:	e024      	b.n	802261a <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 80225d0:	697b      	ldr	r3, [r7, #20]
 80225d2:	69fa      	ldr	r2, [r7, #28]
 80225d4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 80225d6:	697b      	ldr	r3, [r7, #20]
 80225d8:	3304      	adds	r3, #4
 80225da:	69fa      	ldr	r2, [r7, #28]
 80225dc:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 80225de:	697b      	ldr	r3, [r7, #20]
 80225e0:	3308      	adds	r3, #8
 80225e2:	69fa      	ldr	r2, [r7, #28]
 80225e4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 80225e6:	697b      	ldr	r3, [r7, #20]
 80225e8:	330c      	adds	r3, #12
 80225ea:	69fa      	ldr	r2, [r7, #28]
 80225ec:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 80225ee:	697b      	ldr	r3, [r7, #20]
 80225f0:	3310      	adds	r3, #16
 80225f2:	69fa      	ldr	r2, [r7, #28]
 80225f4:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 80225f6:	697b      	ldr	r3, [r7, #20]
 80225f8:	3314      	adds	r3, #20
 80225fa:	69fa      	ldr	r2, [r7, #28]
 80225fc:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 80225fe:	697b      	ldr	r3, [r7, #20]
 8022600:	3318      	adds	r3, #24
 8022602:	69fa      	ldr	r2, [r7, #28]
 8022604:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8022606:	697b      	ldr	r3, [r7, #20]
 8022608:	331c      	adds	r3, #28
 802260a:	69fa      	ldr	r2, [r7, #28]
 802260c:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 802260e:	697b      	ldr	r3, [r7, #20]
 8022610:	3320      	adds	r3, #32
 8022612:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8022614:	6a3b      	ldr	r3, [r7, #32]
 8022616:	3b08      	subs	r3, #8
 8022618:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 802261a:	6a3b      	ldr	r3, [r7, #32]
 802261c:	2b08      	cmp	r3, #8
 802261e:	dcd7      	bgt.n	80225d0 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022620:	e008      	b.n	8022634 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8022622:	697b      	ldr	r3, [r7, #20]
 8022624:	69fa      	ldr	r2, [r7, #28]
 8022626:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8022628:	697b      	ldr	r3, [r7, #20]
 802262a:	3304      	adds	r3, #4
 802262c:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 802262e:	687b      	ldr	r3, [r7, #4]
 8022630:	3304      	adds	r3, #4
 8022632:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8022634:	697a      	ldr	r2, [r7, #20]
 8022636:	693b      	ldr	r3, [r7, #16]
 8022638:	429a      	cmp	r2, r3
 802263a:	d202      	bcs.n	8022642 <memset+0xf8>
 802263c:	687b      	ldr	r3, [r7, #4]
 802263e:	2b00      	cmp	r3, #0
 8022640:	d1ef      	bne.n	8022622 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8022642:	693a      	ldr	r2, [r7, #16]
 8022644:	69bb      	ldr	r3, [r7, #24]
 8022646:	4313      	orrs	r3, r2
 8022648:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 802264a:	e009      	b.n	8022660 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 802264c:	697b      	ldr	r3, [r7, #20]
 802264e:	68ba      	ldr	r2, [r7, #8]
 8022650:	b2d2      	uxtb	r2, r2
 8022652:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8022654:	697b      	ldr	r3, [r7, #20]
 8022656:	3301      	adds	r3, #1
 8022658:	617b      	str	r3, [r7, #20]
			ulBytes++;
 802265a:	687b      	ldr	r3, [r7, #4]
 802265c:	3301      	adds	r3, #1
 802265e:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8022660:	697a      	ldr	r2, [r7, #20]
 8022662:	693b      	ldr	r3, [r7, #16]
 8022664:	429a      	cmp	r2, r3
 8022666:	d202      	bcs.n	802266e <memset+0x124>
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	2b00      	cmp	r3, #0
 802266c:	d1ee      	bne.n	802264c <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 802266e:	68fb      	ldr	r3, [r7, #12]
}
 8022670:	4618      	mov	r0, r3
 8022672:	372c      	adds	r7, #44	@ 0x2c
 8022674:	46bd      	mov	sp, r7
 8022676:	f85d 7b04 	ldr.w	r7, [sp], #4
 802267a:	4770      	bx	lr

0802267c <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 802267c:	b480      	push	{r7}
 802267e:	b083      	sub	sp, #12
 8022680:	af00      	add	r7, sp, #0
 8022682:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8022684:	2303      	movs	r3, #3
}
 8022686:	4618      	mov	r0, r3
 8022688:	370c      	adds	r7, #12
 802268a:	46bd      	mov	sp, r7
 802268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022690:	4770      	bx	lr

08022692 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8022692:	b480      	push	{r7}
 8022694:	b083      	sub	sp, #12
 8022696:	af00      	add	r7, sp, #0
 8022698:	4603      	mov	r3, r0
 802269a:	6039      	str	r1, [r7, #0]
 802269c:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 802269e:	bf00      	nop
 80226a0:	370c      	adds	r7, #12
 80226a2:	46bd      	mov	sp, r7
 80226a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226a8:	4770      	bx	lr

080226aa <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 80226aa:	b580      	push	{r7, lr}
 80226ac:	b084      	sub	sp, #16
 80226ae:	af00      	add	r7, sp, #0
 80226b0:	60f8      	str	r0, [r7, #12]
 80226b2:	60b9      	str	r1, [r7, #8]
 80226b4:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 80226b6:	68fb      	ldr	r3, [r7, #12]
 80226b8:	68ba      	ldr	r2, [r7, #8]
 80226ba:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 80226bc:	68fb      	ldr	r3, [r7, #12]
 80226be:	68ba      	ldr	r2, [r7, #8]
 80226c0:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 80226c2:	687b      	ldr	r3, [r7, #4]
 80226c4:	1e5a      	subs	r2, r3, #1
 80226c6:	68fb      	ldr	r3, [r7, #12]
 80226c8:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 80226ca:	68fb      	ldr	r3, [r7, #12]
 80226cc:	2200      	movs	r2, #0
 80226ce:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 80226d0:	68fb      	ldr	r3, [r7, #12]
 80226d2:	3310      	adds	r3, #16
 80226d4:	2210      	movs	r2, #16
 80226d6:	2100      	movs	r1, #0
 80226d8:	4618      	mov	r0, r3
 80226da:	f7ff ff36 	bl	802254a <memset>
}
 80226de:	bf00      	nop
 80226e0:	3710      	adds	r7, #16
 80226e2:	46bd      	mov	sp, r7
 80226e4:	bd80      	pop	{r7, pc}

080226e6 <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 80226e6:	b580      	push	{r7, lr}
 80226e8:	b082      	sub	sp, #8
 80226ea:	af00      	add	r7, sp, #0
 80226ec:	6078      	str	r0, [r7, #4]
 80226ee:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 80226f0:	687b      	ldr	r3, [r7, #4]
 80226f2:	681b      	ldr	r3, [r3, #0]
 80226f4:	2b00      	cmp	r3, #0
 80226f6:	d10d      	bne.n	8022714 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 80226f8:	683b      	ldr	r3, [r7, #0]
 80226fa:	b2db      	uxtb	r3, r3
 80226fc:	2214      	movs	r2, #20
 80226fe:	4611      	mov	r1, r2
 8022700:	4618      	mov	r0, r3
 8022702:	f7ff ffc6 	bl	8022692 <vOutputChar>
		apStr->curLen++;
 8022706:	687b      	ldr	r3, [r7, #4]
 8022708:	68db      	ldr	r3, [r3, #12]
 802270a:	1c5a      	adds	r2, r3, #1
 802270c:	687b      	ldr	r3, [r7, #4]
 802270e:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022710:	2301      	movs	r3, #1
 8022712:	e022      	b.n	802275a <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8022714:	687b      	ldr	r3, [r7, #4]
 8022716:	681a      	ldr	r2, [r3, #0]
 8022718:	687b      	ldr	r3, [r7, #4]
 802271a:	689b      	ldr	r3, [r3, #8]
 802271c:	429a      	cmp	r2, r3
 802271e:	d20e      	bcs.n	802273e <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8022720:	687b      	ldr	r3, [r7, #4]
 8022722:	681b      	ldr	r3, [r3, #0]
 8022724:	1c59      	adds	r1, r3, #1
 8022726:	687a      	ldr	r2, [r7, #4]
 8022728:	6011      	str	r1, [r2, #0]
 802272a:	683a      	ldr	r2, [r7, #0]
 802272c:	b2d2      	uxtb	r2, r2
 802272e:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	68db      	ldr	r3, [r3, #12]
 8022734:	1c5a      	adds	r2, r3, #1
 8022736:	687b      	ldr	r3, [r7, #4]
 8022738:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802273a:	2301      	movs	r3, #1
 802273c:	e00d      	b.n	802275a <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 802273e:	687b      	ldr	r3, [r7, #4]
 8022740:	681a      	ldr	r2, [r3, #0]
 8022742:	687b      	ldr	r3, [r7, #4]
 8022744:	689b      	ldr	r3, [r3, #8]
 8022746:	429a      	cmp	r2, r3
 8022748:	d106      	bne.n	8022758 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 802274a:	687b      	ldr	r3, [r7, #4]
 802274c:	681b      	ldr	r3, [r3, #0]
 802274e:	1c59      	adds	r1, r3, #1
 8022750:	687a      	ldr	r2, [r7, #4]
 8022752:	6011      	str	r1, [r2, #0]
 8022754:	2200      	movs	r2, #0
 8022756:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8022758:	2300      	movs	r3, #0
}
 802275a:	4618      	mov	r0, r3
 802275c:	3708      	adds	r7, #8
 802275e:	46bd      	mov	sp, r7
 8022760:	bd80      	pop	{r7, pc}

08022762 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8022762:	b580      	push	{r7, lr}
 8022764:	b082      	sub	sp, #8
 8022766:	af00      	add	r7, sp, #0
 8022768:	6078      	str	r0, [r7, #4]
 802276a:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 802276c:	687b      	ldr	r3, [r7, #4]
 802276e:	681b      	ldr	r3, [r3, #0]
 8022770:	2b00      	cmp	r3, #0
 8022772:	d112      	bne.n	802279a <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8022774:	683b      	ldr	r3, [r7, #0]
 8022776:	b2db      	uxtb	r3, r3
 8022778:	2214      	movs	r2, #20
 802277a:	4611      	mov	r1, r2
 802277c:	4618      	mov	r0, r3
 802277e:	f7ff ff88 	bl	8022692 <vOutputChar>
		if( c == 0 )
 8022782:	683b      	ldr	r3, [r7, #0]
 8022784:	2b00      	cmp	r3, #0
 8022786:	d101      	bne.n	802278c <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8022788:	2300      	movs	r3, #0
 802278a:	e02e      	b.n	80227ea <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 802278c:	687b      	ldr	r3, [r7, #4]
 802278e:	68db      	ldr	r3, [r3, #12]
 8022790:	1c5a      	adds	r2, r3, #1
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8022796:	2301      	movs	r3, #1
 8022798:	e027      	b.n	80227ea <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	681a      	ldr	r2, [r3, #0]
 802279e:	687b      	ldr	r3, [r7, #4]
 80227a0:	689b      	ldr	r3, [r3, #8]
 80227a2:	429a      	cmp	r2, r3
 80227a4:	d213      	bcs.n	80227ce <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 80227a6:	687b      	ldr	r3, [r7, #4]
 80227a8:	681b      	ldr	r3, [r3, #0]
 80227aa:	1c59      	adds	r1, r3, #1
 80227ac:	687a      	ldr	r2, [r7, #4]
 80227ae:	6011      	str	r1, [r2, #0]
 80227b0:	683a      	ldr	r2, [r7, #0]
 80227b2:	b2d2      	uxtb	r2, r2
 80227b4:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 80227b6:	683b      	ldr	r3, [r7, #0]
 80227b8:	2b00      	cmp	r3, #0
 80227ba:	d101      	bne.n	80227c0 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 80227bc:	2300      	movs	r3, #0
 80227be:	e014      	b.n	80227ea <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 80227c0:	687b      	ldr	r3, [r7, #4]
 80227c2:	68db      	ldr	r3, [r3, #12]
 80227c4:	1c5a      	adds	r2, r3, #1
 80227c6:	687b      	ldr	r3, [r7, #4]
 80227c8:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80227ca:	2301      	movs	r3, #1
 80227cc:	e00d      	b.n	80227ea <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 80227ce:	687b      	ldr	r3, [r7, #4]
 80227d0:	681a      	ldr	r2, [r3, #0]
 80227d2:	687b      	ldr	r3, [r7, #4]
 80227d4:	689b      	ldr	r3, [r3, #8]
 80227d6:	429a      	cmp	r2, r3
 80227d8:	d106      	bne.n	80227e8 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 80227da:	687b      	ldr	r3, [r7, #4]
 80227dc:	681b      	ldr	r3, [r3, #0]
 80227de:	1c59      	adds	r1, r3, #1
 80227e0:	687a      	ldr	r2, [r7, #4]
 80227e2:	6011      	str	r1, [r2, #0]
 80227e4:	2200      	movs	r2, #0
 80227e6:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80227e8:	2300      	movs	r3, #0
}
 80227ea:	4618      	mov	r0, r3
 80227ec:	3708      	adds	r7, #8
 80227ee:	46bd      	mov	sp, r7
 80227f0:	bd80      	pop	{r7, pc}
	...

080227f4 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 80227f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80227f6:	b085      	sub	sp, #20
 80227f8:	af00      	add	r7, sp, #0
 80227fa:	6078      	str	r0, [r7, #4]
 80227fc:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 80227fe:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 8022800:	683b      	ldr	r3, [r7, #0]
 8022802:	4618      	mov	r0, r3
 8022804:	f7ff ff3a 	bl	802267c <xApplicationMemoryPermissions>
 8022808:	4603      	mov	r3, r0
 802280a:	2b00      	cmp	r3, #0
 802280c:	d101      	bne.n	8022812 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 802280e:	4b4c      	ldr	r3, [pc, #304]	@ (8022940 <prints+0x14c>)
 8022810:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	695b      	ldr	r3, [r3, #20]
 8022816:	2b00      	cmp	r3, #0
 8022818:	dd1b      	ble.n	8022852 <prints+0x5e>
	{
		register int count = 0;
 802281a:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 802281c:	683d      	ldr	r5, [r7, #0]
 802281e:	e001      	b.n	8022824 <prints+0x30>
		{
			++count;
 8022820:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8022822:	3501      	adds	r5, #1
 8022824:	782b      	ldrb	r3, [r5, #0]
 8022826:	2b00      	cmp	r3, #0
 8022828:	d1fa      	bne.n	8022820 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 802282a:	687b      	ldr	r3, [r7, #4]
 802282c:	695b      	ldr	r3, [r3, #20]
 802282e:	429c      	cmp	r4, r3
 8022830:	db03      	blt.n	802283a <prints+0x46>
		{
			apBuf->flags.width = 0;
 8022832:	687b      	ldr	r3, [r7, #4]
 8022834:	2200      	movs	r2, #0
 8022836:	615a      	str	r2, [r3, #20]
 8022838:	e004      	b.n	8022844 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 802283a:	687b      	ldr	r3, [r7, #4]
 802283c:	695b      	ldr	r3, [r3, #20]
 802283e:	1b1a      	subs	r2, r3, r4
 8022840:	687b      	ldr	r3, [r7, #4]
 8022842:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8022844:	687b      	ldr	r3, [r7, #4]
 8022846:	7f1b      	ldrb	r3, [r3, #28]
 8022848:	f003 0302 	and.w	r3, r3, #2
 802284c:	2b00      	cmp	r3, #0
 802284e:	d000      	beq.n	8022852 <prints+0x5e>
		{
			padchar = '0';
 8022850:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8022852:	687b      	ldr	r3, [r7, #4]
 8022854:	7f1b      	ldrb	r3, [r3, #28]
 8022856:	f003 0301 	and.w	r3, r3, #1
 802285a:	2b00      	cmp	r3, #0
 802285c:	d112      	bne.n	8022884 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 802285e:	e00d      	b.n	802287c <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8022860:	4631      	mov	r1, r6
 8022862:	6878      	ldr	r0, [r7, #4]
 8022864:	f7ff ff3f 	bl	80226e6 <strbuf_printchar>
 8022868:	4603      	mov	r3, r0
 802286a:	2b00      	cmp	r3, #0
 802286c:	d101      	bne.n	8022872 <prints+0x7e>
			{
				return pdFALSE;
 802286e:	2300      	movs	r3, #0
 8022870:	e062      	b.n	8022938 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022872:	687b      	ldr	r3, [r7, #4]
 8022874:	695b      	ldr	r3, [r3, #20]
 8022876:	1e5a      	subs	r2, r3, #1
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	615a      	str	r2, [r3, #20]
 802287c:	687b      	ldr	r3, [r7, #4]
 802287e:	695b      	ldr	r3, [r3, #20]
 8022880:	2b00      	cmp	r3, #0
 8022882:	dced      	bgt.n	8022860 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8022884:	687b      	ldr	r3, [r7, #4]
 8022886:	7f9b      	ldrb	r3, [r3, #30]
 8022888:	f003 0302 	and.w	r3, r3, #2
 802288c:	b2db      	uxtb	r3, r3
 802288e:	2b00      	cmp	r3, #0
 8022890:	d036      	beq.n	8022900 <prints+0x10c>
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	7f1b      	ldrb	r3, [r3, #28]
 8022896:	2b01      	cmp	r3, #1
 8022898:	d132      	bne.n	8022900 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 802289a:	6838      	ldr	r0, [r7, #0]
 802289c:	f7dd fd2a 	bl	80002f4 <strlen>
 80228a0:	4603      	mov	r3, r0
 80228a2:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 80228a4:	687b      	ldr	r3, [r7, #4]
 80228a6:	699b      	ldr	r3, [r3, #24]
 80228a8:	68ba      	ldr	r2, [r7, #8]
 80228aa:	429a      	cmp	r2, r3
 80228ac:	da28      	bge.n	8022900 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 80228ae:	687b      	ldr	r3, [r7, #4]
 80228b0:	699a      	ldr	r2, [r3, #24]
 80228b2:	68bb      	ldr	r3, [r7, #8]
 80228b4:	1ad3      	subs	r3, r2, r3
 80228b6:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 80228b8:	e00b      	b.n	80228d2 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 80228ba:	2130      	movs	r1, #48	@ 0x30
 80228bc:	6878      	ldr	r0, [r7, #4]
 80228be:	f7ff ff12 	bl	80226e6 <strbuf_printchar>
 80228c2:	4603      	mov	r3, r0
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	d101      	bne.n	80228cc <prints+0xd8>
				{
					return pdFALSE;
 80228c8:	2300      	movs	r3, #0
 80228ca:	e035      	b.n	8022938 <prints+0x144>
			for( ; i; i-- )
 80228cc:	68fb      	ldr	r3, [r7, #12]
 80228ce:	3b01      	subs	r3, #1
 80228d0:	60fb      	str	r3, [r7, #12]
 80228d2:	68fb      	ldr	r3, [r7, #12]
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	d1f0      	bne.n	80228ba <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80228d8:	e012      	b.n	8022900 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 80228da:	683b      	ldr	r3, [r7, #0]
 80228dc:	781b      	ldrb	r3, [r3, #0]
 80228de:	4619      	mov	r1, r3
 80228e0:	6878      	ldr	r0, [r7, #4]
 80228e2:	f7ff ff00 	bl	80226e6 <strbuf_printchar>
 80228e6:	4603      	mov	r3, r0
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d101      	bne.n	80228f0 <prints+0xfc>
		{
			return pdFALSE;
 80228ec:	2300      	movs	r3, #0
 80228ee:	e023      	b.n	8022938 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 80228f0:	683b      	ldr	r3, [r7, #0]
 80228f2:	3301      	adds	r3, #1
 80228f4:	603b      	str	r3, [r7, #0]
 80228f6:	687b      	ldr	r3, [r7, #4]
 80228f8:	699b      	ldr	r3, [r3, #24]
 80228fa:	1e5a      	subs	r2, r3, #1
 80228fc:	687b      	ldr	r3, [r7, #4]
 80228fe:	619a      	str	r2, [r3, #24]
 8022900:	687b      	ldr	r3, [r7, #4]
 8022902:	699b      	ldr	r3, [r3, #24]
 8022904:	2b00      	cmp	r3, #0
 8022906:	d012      	beq.n	802292e <prints+0x13a>
 8022908:	683b      	ldr	r3, [r7, #0]
 802290a:	781b      	ldrb	r3, [r3, #0]
 802290c:	2b00      	cmp	r3, #0
 802290e:	d1e4      	bne.n	80228da <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022910:	e00d      	b.n	802292e <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 8022912:	4631      	mov	r1, r6
 8022914:	6878      	ldr	r0, [r7, #4]
 8022916:	f7ff fee6 	bl	80226e6 <strbuf_printchar>
 802291a:	4603      	mov	r3, r0
 802291c:	2b00      	cmp	r3, #0
 802291e:	d101      	bne.n	8022924 <prints+0x130>
		{
			return pdFALSE;
 8022920:	2300      	movs	r3, #0
 8022922:	e009      	b.n	8022938 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8022924:	687b      	ldr	r3, [r7, #4]
 8022926:	695b      	ldr	r3, [r3, #20]
 8022928:	1e5a      	subs	r2, r3, #1
 802292a:	687b      	ldr	r3, [r7, #4]
 802292c:	615a      	str	r2, [r3, #20]
 802292e:	687b      	ldr	r3, [r7, #4]
 8022930:	695b      	ldr	r3, [r3, #20]
 8022932:	2b00      	cmp	r3, #0
 8022934:	dced      	bgt.n	8022912 <prints+0x11e>
		}
	}

	return pdTRUE;
 8022936:	2301      	movs	r3, #1
}
 8022938:	4618      	mov	r0, r3
 802293a:	3714      	adds	r7, #20
 802293c:	46bd      	mov	sp, r7
 802293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022940:	080274f0 	.word	0x080274f0

08022944 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8022944:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022948:	b087      	sub	sp, #28
 802294a:	af00      	add	r7, sp, #0
 802294c:	6078      	str	r0, [r7, #4]
 802294e:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8022950:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8022954:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8022956:	687b      	ldr	r3, [r7, #4]
 8022958:	691b      	ldr	r3, [r3, #16]
 802295a:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 802295c:	687a      	ldr	r2, [r7, #4]
 802295e:	7f93      	ldrb	r3, [r2, #30]
 8022960:	f043 0302 	orr.w	r3, r3, #2
 8022964:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8022966:	683b      	ldr	r3, [r7, #0]
 8022968:	2b00      	cmp	r3, #0
 802296a:	d10b      	bne.n	8022984 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 802296c:	2330      	movs	r3, #48	@ 0x30
 802296e:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8022970:	2300      	movs	r3, #0
 8022972:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8022974:	f107 030c 	add.w	r3, r7, #12
 8022978:	4619      	mov	r1, r3
 802297a:	6878      	ldr	r0, [r7, #4]
 802297c:	f7ff ff3a 	bl	80227f4 <prints>
 8022980:	4603      	mov	r3, r0
 8022982:	e067      	b.n	8022a54 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8022984:	687b      	ldr	r3, [r7, #4]
 8022986:	7f9b      	ldrb	r3, [r3, #30]
 8022988:	f003 0301 	and.w	r3, r3, #1
 802298c:	b2db      	uxtb	r3, r3
 802298e:	2b00      	cmp	r3, #0
 8022990:	d009      	beq.n	80229a6 <printi+0x62>
 8022992:	2e0a      	cmp	r6, #10
 8022994:	d107      	bne.n	80229a6 <printi+0x62>
 8022996:	683b      	ldr	r3, [r7, #0]
 8022998:	2b00      	cmp	r3, #0
 802299a:	da04      	bge.n	80229a6 <printi+0x62>
	{
		neg = 1;
 802299c:	f04f 0901 	mov.w	r9, #1
		u = -i;
 80229a0:	683b      	ldr	r3, [r7, #0]
 80229a2:	425b      	negs	r3, r3
 80229a4:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 80229a6:	f107 040c 	add.w	r4, r7, #12
 80229aa:	340b      	adds	r4, #11

	*s = '\0';
 80229ac:	2300      	movs	r3, #0
 80229ae:	7023      	strb	r3, [r4, #0]
	switch( base )
 80229b0:	2e10      	cmp	r6, #16
 80229b2:	d017      	beq.n	80229e4 <printi+0xa0>
 80229b4:	2e10      	cmp	r6, #16
 80229b6:	d829      	bhi.n	8022a0c <printi+0xc8>
 80229b8:	2e08      	cmp	r6, #8
 80229ba:	d024      	beq.n	8022a06 <printi+0xc2>
 80229bc:	2e0a      	cmp	r6, #10
 80229be:	d022      	beq.n	8022a06 <printi+0xc2>
 80229c0:	e024      	b.n	8022a0c <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 80229c2:	462b      	mov	r3, r5
 80229c4:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 80229c8:	f1b8 0f09 	cmp.w	r8, #9
 80229cc:	dd03      	ble.n	80229d6 <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 80229ce:	687b      	ldr	r3, [r7, #4]
 80229d0:	7f5b      	ldrb	r3, [r3, #29]
 80229d2:	3b3a      	subs	r3, #58	@ 0x3a
 80229d4:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 80229d6:	fa5f f388 	uxtb.w	r3, r8
 80229da:	3c01      	subs	r4, #1
 80229dc:	3330      	adds	r3, #48	@ 0x30
 80229de:	b2db      	uxtb	r3, r3
 80229e0:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 80229e2:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 80229e4:	2d00      	cmp	r5, #0
 80229e6:	d1ec      	bne.n	80229c2 <printi+0x7e>
		}
		break;
 80229e8:	e010      	b.n	8022a0c <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 80229ea:	fbb5 f3f6 	udiv	r3, r5, r6
 80229ee:	fb06 f303 	mul.w	r3, r6, r3
 80229f2:	1aeb      	subs	r3, r5, r3
 80229f4:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 80229f6:	fa5f f388 	uxtb.w	r3, r8
 80229fa:	3c01      	subs	r4, #1
 80229fc:	3330      	adds	r3, #48	@ 0x30
 80229fe:	b2db      	uxtb	r3, r3
 8022a00:	7023      	strb	r3, [r4, #0]
			u /= base;
 8022a02:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 8022a06:	2d00      	cmp	r5, #0
 8022a08:	d1ef      	bne.n	80229ea <printi+0xa6>
		}
		break;
 8022a0a:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 8022a0c:	f1b9 0f00 	cmp.w	r9, #0
 8022a10:	d01b      	beq.n	8022a4a <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 8022a12:	687b      	ldr	r3, [r7, #4]
 8022a14:	695b      	ldr	r3, [r3, #20]
 8022a16:	2b00      	cmp	r3, #0
 8022a18:	d014      	beq.n	8022a44 <printi+0x100>
 8022a1a:	687b      	ldr	r3, [r7, #4]
 8022a1c:	7f1b      	ldrb	r3, [r3, #28]
 8022a1e:	f003 0302 	and.w	r3, r3, #2
 8022a22:	2b00      	cmp	r3, #0
 8022a24:	d00e      	beq.n	8022a44 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 8022a26:	212d      	movs	r1, #45	@ 0x2d
 8022a28:	6878      	ldr	r0, [r7, #4]
 8022a2a:	f7ff fe5c 	bl	80226e6 <strbuf_printchar>
 8022a2e:	4603      	mov	r3, r0
 8022a30:	2b00      	cmp	r3, #0
 8022a32:	d101      	bne.n	8022a38 <printi+0xf4>
			{
				return pdFALSE;
 8022a34:	2300      	movs	r3, #0
 8022a36:	e00d      	b.n	8022a54 <printi+0x110>
			}
			--apBuf->flags.width;
 8022a38:	687b      	ldr	r3, [r7, #4]
 8022a3a:	695b      	ldr	r3, [r3, #20]
 8022a3c:	1e5a      	subs	r2, r3, #1
 8022a3e:	687b      	ldr	r3, [r7, #4]
 8022a40:	615a      	str	r2, [r3, #20]
 8022a42:	e002      	b.n	8022a4a <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 8022a44:	3c01      	subs	r4, #1
 8022a46:	232d      	movs	r3, #45	@ 0x2d
 8022a48:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 8022a4a:	4621      	mov	r1, r4
 8022a4c:	6878      	ldr	r0, [r7, #4]
 8022a4e:	f7ff fed1 	bl	80227f4 <prints>
 8022a52:	4603      	mov	r3, r0
}
 8022a54:	4618      	mov	r0, r3
 8022a56:	371c      	adds	r7, #28
 8022a58:	46bd      	mov	sp, r7
 8022a5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08022a60 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 8022a60:	b590      	push	{r4, r7, lr}
 8022a62:	b089      	sub	sp, #36	@ 0x24
 8022a64:	af02      	add	r7, sp, #8
 8022a66:	6078      	str	r0, [r7, #4]
 8022a68:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 8022a6a:	683b      	ldr	r3, [r7, #0]
 8022a6c:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 8022a6e:	683b      	ldr	r3, [r7, #0]
 8022a70:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8022a72:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8022a74:	683b      	ldr	r3, [r7, #0]
 8022a76:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8022a78:	b2db      	uxtb	r3, r3
 8022a7a:	683a      	ldr	r2, [r7, #0]
 8022a7c:	b2d2      	uxtb	r2, r2
 8022a7e:	f107 0008 	add.w	r0, r7, #8
 8022a82:	9201      	str	r2, [sp, #4]
 8022a84:	9300      	str	r3, [sp, #0]
 8022a86:	4623      	mov	r3, r4
 8022a88:	460a      	mov	r2, r1
 8022a8a:	4909      	ldr	r1, [pc, #36]	@ (8022ab0 <printIp+0x50>)
 8022a8c:	f000 fa81 	bl	8022f92 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8022a90:	687a      	ldr	r2, [r7, #4]
 8022a92:	7f93      	ldrb	r3, [r2, #30]
 8022a94:	f043 0302 	orr.w	r3, r3, #2
 8022a98:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 8022a9a:	f107 0308 	add.w	r3, r7, #8
 8022a9e:	4619      	mov	r1, r3
 8022aa0:	6878      	ldr	r0, [r7, #4]
 8022aa2:	f7ff fea7 	bl	80227f4 <prints>

	return pdTRUE;
 8022aa6:	2301      	movs	r3, #1
}
 8022aa8:	4618      	mov	r0, r3
 8022aaa:	371c      	adds	r7, #28
 8022aac:	46bd      	mov	sp, r7
 8022aae:	bd90      	pop	{r4, r7, pc}
 8022ab0:	080274f8 	.word	0x080274f8

08022ab4 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8022ab4:	b480      	push	{r7}
 8022ab6:	b083      	sub	sp, #12
 8022ab8:	af00      	add	r7, sp, #0
 8022aba:	4603      	mov	r3, r0
 8022abc:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 8022abe:	4a0b      	ldr	r2, [pc, #44]	@ (8022aec <usNetToHost+0x38>)
 8022ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8022af0 <usNetToHost+0x3c>)
 8022ac2:	429a      	cmp	r2, r3
 8022ac4:	d101      	bne.n	8022aca <usNetToHost+0x16>
	{
		return usValue;
 8022ac6:	88fb      	ldrh	r3, [r7, #6]
 8022ac8:	e009      	b.n	8022ade <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8022aca:	88fb      	ldrh	r3, [r7, #6]
 8022acc:	021b      	lsls	r3, r3, #8
 8022ace:	b21a      	sxth	r2, r3
 8022ad0:	88fb      	ldrh	r3, [r7, #6]
 8022ad2:	0a1b      	lsrs	r3, r3, #8
 8022ad4:	b29b      	uxth	r3, r3
 8022ad6:	b21b      	sxth	r3, r3
 8022ad8:	4313      	orrs	r3, r2
 8022ada:	b21b      	sxth	r3, r3
 8022adc:	b29b      	uxth	r3, r3
	}
}
 8022ade:	4618      	mov	r0, r3
 8022ae0:	370c      	adds	r7, #12
 8022ae2:	46bd      	mov	sp, r7
 8022ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022ae8:	4770      	bx	lr
 8022aea:	bf00      	nop
 8022aec:	03020100 	.word	0x03020100
 8022af0:	00010203 	.word	0x00010203

08022af4 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8022af4:	b580      	push	{r7, lr}
 8022af6:	b088      	sub	sp, #32
 8022af8:	af00      	add	r7, sp, #0
 8022afa:	6078      	str	r0, [r7, #4]
 8022afc:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 8022afe:	f04f 33ff 	mov.w	r3, #4294967295
 8022b02:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 8022b04:	2300      	movs	r3, #0
 8022b06:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 8022b08:	2300      	movs	r3, #0
 8022b0a:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 8022b0c:	2300      	movs	r3, #0
 8022b0e:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022b10:	2300      	movs	r3, #0
 8022b12:	61fb      	str	r3, [r7, #28]
 8022b14:	e026      	b.n	8022b64 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 8022b16:	69fb      	ldr	r3, [r7, #28]
 8022b18:	005b      	lsls	r3, r3, #1
 8022b1a:	683a      	ldr	r2, [r7, #0]
 8022b1c:	4413      	add	r3, r2
 8022b1e:	881b      	ldrh	r3, [r3, #0]
 8022b20:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 8022b22:	897b      	ldrh	r3, [r7, #10]
 8022b24:	2b00      	cmp	r3, #0
 8022b26:	d107      	bne.n	8022b38 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 8022b28:	68fb      	ldr	r3, [r7, #12]
 8022b2a:	2b00      	cmp	r3, #0
 8022b2c:	d101      	bne.n	8022b32 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 8022b2e:	69fb      	ldr	r3, [r7, #28]
 8022b30:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 8022b32:	68fb      	ldr	r3, [r7, #12]
 8022b34:	3301      	adds	r3, #1
 8022b36:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 8022b38:	897b      	ldrh	r3, [r7, #10]
 8022b3a:	2b00      	cmp	r3, #0
 8022b3c:	d102      	bne.n	8022b44 <printIPv6+0x50>
 8022b3e:	69fb      	ldr	r3, [r7, #28]
 8022b40:	2b07      	cmp	r3, #7
 8022b42:	d10c      	bne.n	8022b5e <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 8022b44:	68fb      	ldr	r3, [r7, #12]
 8022b46:	2b01      	cmp	r3, #1
 8022b48:	dd07      	ble.n	8022b5a <printIPv6+0x66>
 8022b4a:	697a      	ldr	r2, [r7, #20]
 8022b4c:	68fb      	ldr	r3, [r7, #12]
 8022b4e:	429a      	cmp	r2, r3
 8022b50:	da03      	bge.n	8022b5a <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 8022b52:	68fb      	ldr	r3, [r7, #12]
 8022b54:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 8022b56:	693b      	ldr	r3, [r7, #16]
 8022b58:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 8022b5a:	2300      	movs	r3, #0
 8022b5c:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022b5e:	69fb      	ldr	r3, [r7, #28]
 8022b60:	3301      	adds	r3, #1
 8022b62:	61fb      	str	r3, [r7, #28]
 8022b64:	69fb      	ldr	r3, [r7, #28]
 8022b66:	2b07      	cmp	r3, #7
 8022b68:	ddd5      	ble.n	8022b16 <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 8022b6a:	687b      	ldr	r3, [r7, #4]
 8022b6c:	2210      	movs	r2, #16
 8022b6e:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8022b70:	687b      	ldr	r3, [r7, #4]
 8022b72:	2261      	movs	r2, #97	@ 0x61
 8022b74:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022b76:	2300      	movs	r3, #0
 8022b78:	61fb      	str	r3, [r7, #28]
 8022b7a:	e02b      	b.n	8022bd4 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 8022b7c:	69fa      	ldr	r2, [r7, #28]
 8022b7e:	69bb      	ldr	r3, [r7, #24]
 8022b80:	429a      	cmp	r2, r3
 8022b82:	d110      	bne.n	8022ba6 <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8022b84:	697b      	ldr	r3, [r7, #20]
 8022b86:	3b01      	subs	r3, #1
 8022b88:	69fa      	ldr	r2, [r7, #28]
 8022b8a:	4413      	add	r3, r2
 8022b8c:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 8022b8e:	213a      	movs	r1, #58	@ 0x3a
 8022b90:	6878      	ldr	r0, [r7, #4]
 8022b92:	f7ff fda8 	bl	80226e6 <strbuf_printchar>
			if( iIndex == 7 )
 8022b96:	69fb      	ldr	r3, [r7, #28]
 8022b98:	2b07      	cmp	r3, #7
 8022b9a:	d118      	bne.n	8022bce <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 8022b9c:	213a      	movs	r1, #58	@ 0x3a
 8022b9e:	6878      	ldr	r0, [r7, #4]
 8022ba0:	f7ff fda1 	bl	80226e6 <strbuf_printchar>
 8022ba4:	e013      	b.n	8022bce <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 8022ba6:	69fb      	ldr	r3, [r7, #28]
 8022ba8:	2b00      	cmp	r3, #0
 8022baa:	dd03      	ble.n	8022bb4 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 8022bac:	213a      	movs	r1, #58	@ 0x3a
 8022bae:	6878      	ldr	r0, [r7, #4]
 8022bb0:	f7ff fd99 	bl	80226e6 <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8022bb4:	69fb      	ldr	r3, [r7, #28]
 8022bb6:	005b      	lsls	r3, r3, #1
 8022bb8:	683a      	ldr	r2, [r7, #0]
 8022bba:	4413      	add	r3, r2
 8022bbc:	881b      	ldrh	r3, [r3, #0]
 8022bbe:	4618      	mov	r0, r3
 8022bc0:	f7ff ff78 	bl	8022ab4 <usNetToHost>
 8022bc4:	4603      	mov	r3, r0
 8022bc6:	4619      	mov	r1, r3
 8022bc8:	6878      	ldr	r0, [r7, #4]
 8022bca:	f7ff febb 	bl	8022944 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8022bce:	69fb      	ldr	r3, [r7, #28]
 8022bd0:	3301      	adds	r3, #1
 8022bd2:	61fb      	str	r3, [r7, #28]
 8022bd4:	69fb      	ldr	r3, [r7, #28]
 8022bd6:	2b07      	cmp	r3, #7
 8022bd8:	ddd0      	ble.n	8022b7c <printIPv6+0x88>
		}
	}

	return pdTRUE;
 8022bda:	2301      	movs	r3, #1
}
 8022bdc:	4618      	mov	r0, r3
 8022bde:	3720      	adds	r7, #32
 8022be0:	46bd      	mov	sp, r7
 8022be2:	bd80      	pop	{r7, pc}

08022be4 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8022be4:	b590      	push	{r4, r7, lr}
 8022be6:	b087      	sub	sp, #28
 8022be8:	af00      	add	r7, sp, #0
 8022bea:	60f8      	str	r0, [r7, #12]
 8022bec:	60b9      	str	r1, [r7, #8]
 8022bee:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8022bf0:	68bb      	ldr	r3, [r7, #8]
 8022bf2:	1c5a      	adds	r2, r3, #1
 8022bf4:	60ba      	str	r2, [r7, #8]
 8022bf6:	781b      	ldrb	r3, [r3, #0]
 8022bf8:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 8022bfa:	697b      	ldr	r3, [r7, #20]
 8022bfc:	2b25      	cmp	r3, #37	@ 0x25
 8022bfe:	d00f      	beq.n	8022c20 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 8022c00:	6979      	ldr	r1, [r7, #20]
 8022c02:	68f8      	ldr	r0, [r7, #12]
 8022c04:	f7ff fdad 	bl	8022762 <strbuf_printchar_inline>
 8022c08:	4603      	mov	r3, r0
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	f000 817e 	beq.w	8022f0c <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 8022c10:	68bb      	ldr	r3, [r7, #8]
 8022c12:	1c5a      	adds	r2, r3, #1
 8022c14:	60ba      	str	r2, [r7, #8]
 8022c16:	781b      	ldrb	r3, [r3, #0]
 8022c18:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 8022c1a:	697b      	ldr	r3, [r7, #20]
 8022c1c:	2b25      	cmp	r3, #37	@ 0x25
 8022c1e:	d1ef      	bne.n	8022c00 <tiny_print+0x1c>
		}
		ch = *( format++ );
 8022c20:	68bb      	ldr	r3, [r7, #8]
 8022c22:	1c5a      	adds	r2, r3, #1
 8022c24:	60ba      	str	r2, [r7, #8]
 8022c26:	781b      	ldrb	r3, [r3, #0]
 8022c28:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 8022c2a:	697b      	ldr	r3, [r7, #20]
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	f000 8165 	beq.w	8022efc <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 8022c32:	697b      	ldr	r3, [r7, #20]
 8022c34:	2b25      	cmp	r3, #37	@ 0x25
 8022c36:	d108      	bne.n	8022c4a <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 8022c38:	6979      	ldr	r1, [r7, #20]
 8022c3a:	68f8      	ldr	r0, [r7, #12]
 8022c3c:	f7ff fd53 	bl	80226e6 <strbuf_printchar>
 8022c40:	4603      	mov	r3, r0
 8022c42:	2b00      	cmp	r3, #0
 8022c44:	f040 814e 	bne.w	8022ee4 <tiny_print+0x300>
			{
				return;
 8022c48:	e161      	b.n	8022f0e <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 8022c4a:	68fb      	ldr	r3, [r7, #12]
 8022c4c:	3310      	adds	r3, #16
 8022c4e:	2210      	movs	r2, #16
 8022c50:	2100      	movs	r1, #0
 8022c52:	4618      	mov	r0, r3
 8022c54:	f7ff fc79 	bl	802254a <memset>

		if( ch == '-' )
 8022c58:	697b      	ldr	r3, [r7, #20]
 8022c5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8022c5c:	d114      	bne.n	8022c88 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022c5e:	68bb      	ldr	r3, [r7, #8]
 8022c60:	1c5a      	adds	r2, r3, #1
 8022c62:	60ba      	str	r2, [r7, #8]
 8022c64:	781b      	ldrb	r3, [r3, #0]
 8022c66:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 8022c68:	68fb      	ldr	r3, [r7, #12]
 8022c6a:	2201      	movs	r2, #1
 8022c6c:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 8022c6e:	e00b      	b.n	8022c88 <tiny_print+0xa4>
		{
			ch = *( format++ );
 8022c70:	68bb      	ldr	r3, [r7, #8]
 8022c72:	1c5a      	adds	r2, r3, #1
 8022c74:	60ba      	str	r2, [r7, #8]
 8022c76:	781b      	ldrb	r3, [r3, #0]
 8022c78:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 8022c7a:	68fb      	ldr	r3, [r7, #12]
 8022c7c:	7f1b      	ldrb	r3, [r3, #28]
 8022c7e:	f043 0302 	orr.w	r3, r3, #2
 8022c82:	b2da      	uxtb	r2, r3
 8022c84:	68fb      	ldr	r3, [r7, #12]
 8022c86:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8022c88:	697b      	ldr	r3, [r7, #20]
 8022c8a:	2b30      	cmp	r3, #48	@ 0x30
 8022c8c:	d0f0      	beq.n	8022c70 <tiny_print+0x8c>
		}
		if( ch == '*' )
 8022c8e:	697b      	ldr	r3, [r7, #20]
 8022c90:	2b2a      	cmp	r3, #42	@ 0x2a
 8022c92:	d120      	bne.n	8022cd6 <tiny_print+0xf2>
		{
			ch = *( format++ );
 8022c94:	68bb      	ldr	r3, [r7, #8]
 8022c96:	1c5a      	adds	r2, r3, #1
 8022c98:	60ba      	str	r2, [r7, #8]
 8022c9a:	781b      	ldrb	r3, [r3, #0]
 8022c9c:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 8022c9e:	687b      	ldr	r3, [r7, #4]
 8022ca0:	1d1a      	adds	r2, r3, #4
 8022ca2:	607a      	str	r2, [r7, #4]
 8022ca4:	681a      	ldr	r2, [r3, #0]
 8022ca6:	68fb      	ldr	r3, [r7, #12]
 8022ca8:	615a      	str	r2, [r3, #20]
 8022caa:	e01a      	b.n	8022ce2 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8022cac:	68fb      	ldr	r3, [r7, #12]
 8022cae:	695a      	ldr	r2, [r3, #20]
 8022cb0:	4613      	mov	r3, r2
 8022cb2:	009b      	lsls	r3, r3, #2
 8022cb4:	4413      	add	r3, r2
 8022cb6:	005b      	lsls	r3, r3, #1
 8022cb8:	461a      	mov	r2, r3
 8022cba:	68fb      	ldr	r3, [r7, #12]
 8022cbc:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 8022cbe:	68fb      	ldr	r3, [r7, #12]
 8022cc0:	695a      	ldr	r2, [r3, #20]
 8022cc2:	697b      	ldr	r3, [r7, #20]
 8022cc4:	3b30      	subs	r3, #48	@ 0x30
 8022cc6:	441a      	add	r2, r3
 8022cc8:	68fb      	ldr	r3, [r7, #12]
 8022cca:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8022ccc:	68bb      	ldr	r3, [r7, #8]
 8022cce:	1c5a      	adds	r2, r3, #1
 8022cd0:	60ba      	str	r2, [r7, #8]
 8022cd2:	781b      	ldrb	r3, [r3, #0]
 8022cd4:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8022cd6:	697b      	ldr	r3, [r7, #20]
 8022cd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8022cda:	dd02      	ble.n	8022ce2 <tiny_print+0xfe>
 8022cdc:	697b      	ldr	r3, [r7, #20]
 8022cde:	2b39      	cmp	r3, #57	@ 0x39
 8022ce0:	dde4      	ble.n	8022cac <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8022ce2:	697b      	ldr	r3, [r7, #20]
 8022ce4:	2b2e      	cmp	r3, #46	@ 0x2e
 8022ce6:	d12e      	bne.n	8022d46 <tiny_print+0x162>
		{
			ch = *( format++ );
 8022ce8:	68bb      	ldr	r3, [r7, #8]
 8022cea:	1c5a      	adds	r2, r3, #1
 8022cec:	60ba      	str	r2, [r7, #8]
 8022cee:	781b      	ldrb	r3, [r3, #0]
 8022cf0:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8022cf2:	697b      	ldr	r3, [r7, #20]
 8022cf4:	2b2a      	cmp	r3, #42	@ 0x2a
 8022cf6:	d120      	bne.n	8022d3a <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8022cf8:	687b      	ldr	r3, [r7, #4]
 8022cfa:	1d1a      	adds	r2, r3, #4
 8022cfc:	607a      	str	r2, [r7, #4]
 8022cfe:	681a      	ldr	r2, [r3, #0]
 8022d00:	68fb      	ldr	r3, [r7, #12]
 8022d02:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8022d04:	68bb      	ldr	r3, [r7, #8]
 8022d06:	1c5a      	adds	r2, r3, #1
 8022d08:	60ba      	str	r2, [r7, #8]
 8022d0a:	781b      	ldrb	r3, [r3, #0]
 8022d0c:	617b      	str	r3, [r7, #20]
 8022d0e:	e01a      	b.n	8022d46 <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 8022d10:	68fb      	ldr	r3, [r7, #12]
 8022d12:	699a      	ldr	r2, [r3, #24]
 8022d14:	4613      	mov	r3, r2
 8022d16:	009b      	lsls	r3, r3, #2
 8022d18:	4413      	add	r3, r2
 8022d1a:	005b      	lsls	r3, r3, #1
 8022d1c:	461a      	mov	r2, r3
 8022d1e:	68fb      	ldr	r3, [r7, #12]
 8022d20:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 8022d22:	68fb      	ldr	r3, [r7, #12]
 8022d24:	699a      	ldr	r2, [r3, #24]
 8022d26:	697b      	ldr	r3, [r7, #20]
 8022d28:	3b30      	subs	r3, #48	@ 0x30
 8022d2a:	441a      	add	r2, r3
 8022d2c:	68fb      	ldr	r3, [r7, #12]
 8022d2e:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8022d30:	68bb      	ldr	r3, [r7, #8]
 8022d32:	1c5a      	adds	r2, r3, #1
 8022d34:	60ba      	str	r2, [r7, #8]
 8022d36:	781b      	ldrb	r3, [r3, #0]
 8022d38:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8022d3a:	697b      	ldr	r3, [r7, #20]
 8022d3c:	2b2f      	cmp	r3, #47	@ 0x2f
 8022d3e:	dd02      	ble.n	8022d46 <tiny_print+0x162>
 8022d40:	697b      	ldr	r3, [r7, #20]
 8022d42:	2b39      	cmp	r3, #57	@ 0x39
 8022d44:	dde4      	ble.n	8022d10 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8022d46:	68fb      	ldr	r3, [r7, #12]
 8022d48:	699b      	ldr	r3, [r3, #24]
 8022d4a:	2b00      	cmp	r3, #0
 8022d4c:	d104      	bne.n	8022d58 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8022d4e:	68fb      	ldr	r3, [r7, #12]
 8022d50:	699b      	ldr	r3, [r3, #24]
 8022d52:	1e5a      	subs	r2, r3, #1
 8022d54:	68fb      	ldr	r3, [r7, #12]
 8022d56:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8022d58:	697b      	ldr	r3, [r7, #20]
 8022d5a:	2b70      	cmp	r3, #112	@ 0x70
 8022d5c:	d118      	bne.n	8022d90 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 8022d5e:	68bb      	ldr	r3, [r7, #8]
 8022d60:	781b      	ldrb	r3, [r3, #0]
 8022d62:	2b69      	cmp	r3, #105	@ 0x69
 8022d64:	d114      	bne.n	8022d90 <tiny_print+0x1ac>
 8022d66:	68bb      	ldr	r3, [r7, #8]
 8022d68:	3301      	adds	r3, #1
 8022d6a:	781b      	ldrb	r3, [r3, #0]
 8022d6c:	2b70      	cmp	r3, #112	@ 0x70
 8022d6e:	d10f      	bne.n	8022d90 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8022d70:	68bb      	ldr	r3, [r7, #8]
 8022d72:	3302      	adds	r3, #2
 8022d74:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8022d76:	687b      	ldr	r3, [r7, #4]
 8022d78:	1d1a      	adds	r2, r3, #4
 8022d7a:	607a      	str	r2, [r7, #4]
 8022d7c:	681b      	ldr	r3, [r3, #0]
 8022d7e:	4619      	mov	r1, r3
 8022d80:	68f8      	ldr	r0, [r7, #12]
 8022d82:	f7ff feb7 	bl	8022af4 <printIPv6>
 8022d86:	4603      	mov	r3, r0
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	f040 80ad 	bne.w	8022ee8 <tiny_print+0x304>
				{
					break;
 8022d8e:	e0b8      	b.n	8022f02 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8022d90:	697b      	ldr	r3, [r7, #20]
 8022d92:	2b73      	cmp	r3, #115	@ 0x73
 8022d94:	d112      	bne.n	8022dbc <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8022d96:	687b      	ldr	r3, [r7, #4]
 8022d98:	1d1a      	adds	r2, r3, #4
 8022d9a:	607a      	str	r2, [r7, #4]
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8022da0:	2c00      	cmp	r4, #0
 8022da2:	d001      	beq.n	8022da8 <tiny_print+0x1c4>
 8022da4:	4623      	mov	r3, r4
 8022da6:	e000      	b.n	8022daa <tiny_print+0x1c6>
 8022da8:	4b5a      	ldr	r3, [pc, #360]	@ (8022f14 <tiny_print+0x330>)
 8022daa:	4619      	mov	r1, r3
 8022dac:	68f8      	ldr	r0, [r7, #12]
 8022dae:	f7ff fd21 	bl	80227f4 <prints>
 8022db2:	4603      	mov	r3, r0
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	f040 8099 	bne.w	8022eec <tiny_print+0x308>
			{
				break;
 8022dba:	e0a2      	b.n	8022f02 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8022dbc:	697b      	ldr	r3, [r7, #20]
 8022dbe:	2b63      	cmp	r3, #99	@ 0x63
 8022dc0:	d10f      	bne.n	8022de2 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8022dc2:	687b      	ldr	r3, [r7, #4]
 8022dc4:	1d1a      	adds	r2, r3, #4
 8022dc6:	607a      	str	r2, [r7, #4]
 8022dc8:	681b      	ldr	r3, [r3, #0]
 8022dca:	b2db      	uxtb	r3, r3
 8022dcc:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 8022dce:	7c3b      	ldrb	r3, [r7, #16]
 8022dd0:	4619      	mov	r1, r3
 8022dd2:	68f8      	ldr	r0, [r7, #12]
 8022dd4:	f7ff fc87 	bl	80226e6 <strbuf_printchar>
 8022dd8:	4603      	mov	r3, r0
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	f040 8088 	bne.w	8022ef0 <tiny_print+0x30c>
			{
				return;
 8022de0:	e095      	b.n	8022f0e <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8022de2:	697b      	ldr	r3, [r7, #20]
 8022de4:	2b6c      	cmp	r3, #108	@ 0x6c
 8022de6:	d109      	bne.n	8022dfc <tiny_print+0x218>
		{
			ch = *( format++ );
 8022de8:	68bb      	ldr	r3, [r7, #8]
 8022dea:	1c5a      	adds	r2, r3, #1
 8022dec:	60ba      	str	r2, [r7, #8]
 8022dee:	781b      	ldrb	r3, [r3, #0]
 8022df0:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8022df2:	68fa      	ldr	r2, [r7, #12]
 8022df4:	7f93      	ldrb	r3, [r2, #30]
 8022df6:	f043 0304 	orr.w	r3, r3, #4
 8022dfa:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8022dfc:	697b      	ldr	r3, [r7, #20]
 8022dfe:	2b4c      	cmp	r3, #76	@ 0x4c
 8022e00:	d109      	bne.n	8022e16 <tiny_print+0x232>
		{
			ch = *( format++ );
 8022e02:	68bb      	ldr	r3, [r7, #8]
 8022e04:	1c5a      	adds	r2, r3, #1
 8022e06:	60ba      	str	r2, [r7, #8]
 8022e08:	781b      	ldrb	r3, [r3, #0]
 8022e0a:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 8022e0c:	68fa      	ldr	r2, [r7, #12]
 8022e0e:	7f93      	ldrb	r3, [r2, #30]
 8022e10:	f043 0308 	orr.w	r3, r3, #8
 8022e14:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8022e16:	68fb      	ldr	r3, [r7, #12]
 8022e18:	220a      	movs	r2, #10
 8022e1a:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 8022e1c:	68fb      	ldr	r3, [r7, #12]
 8022e1e:	2261      	movs	r2, #97	@ 0x61
 8022e20:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 8022e22:	697b      	ldr	r3, [r7, #20]
 8022e24:	2b64      	cmp	r3, #100	@ 0x64
 8022e26:	d002      	beq.n	8022e2e <tiny_print+0x24a>
 8022e28:	697b      	ldr	r3, [r7, #20]
 8022e2a:	2b75      	cmp	r3, #117	@ 0x75
 8022e2c:	d116      	bne.n	8022e5c <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 8022e2e:	697b      	ldr	r3, [r7, #20]
 8022e30:	2b64      	cmp	r3, #100	@ 0x64
 8022e32:	bf0c      	ite	eq
 8022e34:	2301      	moveq	r3, #1
 8022e36:	2300      	movne	r3, #0
 8022e38:	b2d9      	uxtb	r1, r3
 8022e3a:	68fa      	ldr	r2, [r7, #12]
 8022e3c:	7f93      	ldrb	r3, [r2, #30]
 8022e3e:	f361 0300 	bfi	r3, r1, #0, #1
 8022e42:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	1d1a      	adds	r2, r3, #4
 8022e48:	607a      	str	r2, [r7, #4]
 8022e4a:	681b      	ldr	r3, [r3, #0]
 8022e4c:	4619      	mov	r1, r3
 8022e4e:	68f8      	ldr	r0, [r7, #12]
 8022e50:	f7ff fd78 	bl	8022944 <printi>
 8022e54:	4603      	mov	r3, r0
 8022e56:	2b00      	cmp	r3, #0
 8022e58:	d14c      	bne.n	8022ef4 <tiny_print+0x310>
			{
				break;
 8022e5a:	e052      	b.n	8022f02 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8022e5c:	68fb      	ldr	r3, [r7, #12]
 8022e5e:	2210      	movs	r2, #16
 8022e60:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8022e62:	697b      	ldr	r3, [r7, #20]
 8022e64:	2b78      	cmp	r3, #120	@ 0x78
 8022e66:	d117      	bne.n	8022e98 <tiny_print+0x2b4>
 8022e68:	68bb      	ldr	r3, [r7, #8]
 8022e6a:	781b      	ldrb	r3, [r3, #0]
 8022e6c:	2b69      	cmp	r3, #105	@ 0x69
 8022e6e:	d113      	bne.n	8022e98 <tiny_print+0x2b4>
 8022e70:	68bb      	ldr	r3, [r7, #8]
 8022e72:	3301      	adds	r3, #1
 8022e74:	781b      	ldrb	r3, [r3, #0]
 8022e76:	2b70      	cmp	r3, #112	@ 0x70
 8022e78:	d10e      	bne.n	8022e98 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 8022e7a:	68bb      	ldr	r3, [r7, #8]
 8022e7c:	3302      	adds	r3, #2
 8022e7e:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8022e80:	687b      	ldr	r3, [r7, #4]
 8022e82:	1d1a      	adds	r2, r3, #4
 8022e84:	607a      	str	r2, [r7, #4]
 8022e86:	681b      	ldr	r3, [r3, #0]
 8022e88:	4619      	mov	r1, r3
 8022e8a:	68f8      	ldr	r0, [r7, #12]
 8022e8c:	f7ff fde8 	bl	8022a60 <printIp>
 8022e90:	4603      	mov	r3, r0
 8022e92:	2b00      	cmp	r3, #0
 8022e94:	d130      	bne.n	8022ef8 <tiny_print+0x314>
			{
				break;
 8022e96:	e034      	b.n	8022f02 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8022e98:	697b      	ldr	r3, [r7, #20]
 8022e9a:	2b78      	cmp	r3, #120	@ 0x78
 8022e9c:	d009      	beq.n	8022eb2 <tiny_print+0x2ce>
 8022e9e:	697b      	ldr	r3, [r7, #20]
 8022ea0:	2b58      	cmp	r3, #88	@ 0x58
 8022ea2:	d006      	beq.n	8022eb2 <tiny_print+0x2ce>
 8022ea4:	697b      	ldr	r3, [r7, #20]
 8022ea6:	2b70      	cmp	r3, #112	@ 0x70
 8022ea8:	d003      	beq.n	8022eb2 <tiny_print+0x2ce>
 8022eaa:	697b      	ldr	r3, [r7, #20]
 8022eac:	2b6f      	cmp	r3, #111	@ 0x6f
 8022eae:	f47f ae9f 	bne.w	8022bf0 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8022eb2:	697b      	ldr	r3, [r7, #20]
 8022eb4:	2b58      	cmp	r3, #88	@ 0x58
 8022eb6:	d103      	bne.n	8022ec0 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8022eb8:	68fb      	ldr	r3, [r7, #12]
 8022eba:	2241      	movs	r2, #65	@ 0x41
 8022ebc:	775a      	strb	r2, [r3, #29]
 8022ebe:	e005      	b.n	8022ecc <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8022ec0:	697b      	ldr	r3, [r7, #20]
 8022ec2:	2b6f      	cmp	r3, #111	@ 0x6f
 8022ec4:	d102      	bne.n	8022ecc <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8022ec6:	68fb      	ldr	r3, [r7, #12]
 8022ec8:	2208      	movs	r2, #8
 8022eca:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	1d1a      	adds	r2, r3, #4
 8022ed0:	607a      	str	r2, [r7, #4]
 8022ed2:	681b      	ldr	r3, [r3, #0]
 8022ed4:	4619      	mov	r1, r3
 8022ed6:	68f8      	ldr	r0, [r7, #12]
 8022ed8:	f7ff fd34 	bl	8022944 <printi>
 8022edc:	4603      	mov	r3, r0
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	d00e      	beq.n	8022f00 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8022ee2:	e00a      	b.n	8022efa <tiny_print+0x316>
			continue;
 8022ee4:	bf00      	nop
 8022ee6:	e683      	b.n	8022bf0 <tiny_print+0xc>
				continue;
 8022ee8:	bf00      	nop
 8022eea:	e681      	b.n	8022bf0 <tiny_print+0xc>
			continue;
 8022eec:	bf00      	nop
 8022eee:	e67f      	b.n	8022bf0 <tiny_print+0xc>
			continue;
 8022ef0:	bf00      	nop
 8022ef2:	e67d      	b.n	8022bf0 <tiny_print+0xc>
			continue;
 8022ef4:	bf00      	nop
 8022ef6:	e67b      	b.n	8022bf0 <tiny_print+0xc>
			continue;
 8022ef8:	bf00      	nop
	{
 8022efa:	e679      	b.n	8022bf0 <tiny_print+0xc>
			break;
 8022efc:	bf00      	nop
 8022efe:	e000      	b.n	8022f02 <tiny_print+0x31e>
				break;
 8022f00:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8022f02:	2100      	movs	r1, #0
 8022f04:	68f8      	ldr	r0, [r7, #12]
 8022f06:	f7ff fbee 	bl	80226e6 <strbuf_printchar>
 8022f0a:	e000      	b.n	8022f0e <tiny_print+0x32a>
					return;
 8022f0c:	bf00      	nop
}
 8022f0e:	371c      	adds	r7, #28
 8022f10:	46bd      	mov	sp, r7
 8022f12:	bd90      	pop	{r4, r7, pc}
 8022f14:	08027504 	.word	0x08027504

08022f18 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 8022f18:	b580      	push	{r7, lr}
 8022f1a:	b08c      	sub	sp, #48	@ 0x30
 8022f1c:	af00      	add	r7, sp, #0
 8022f1e:	60f8      	str	r0, [r7, #12]
 8022f20:	60b9      	str	r1, [r7, #8]
 8022f22:	607a      	str	r2, [r7, #4]
 8022f24:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8022f26:	68fa      	ldr	r2, [r7, #12]
 8022f28:	68bb      	ldr	r3, [r7, #8]
 8022f2a:	441a      	add	r2, r3
 8022f2c:	f107 0310 	add.w	r3, r7, #16
 8022f30:	68f9      	ldr	r1, [r7, #12]
 8022f32:	4618      	mov	r0, r3
 8022f34:	f7ff fbb9 	bl	80226aa <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022f38:	f107 0310 	add.w	r3, r7, #16
 8022f3c:	683a      	ldr	r2, [r7, #0]
 8022f3e:	6879      	ldr	r1, [r7, #4]
 8022f40:	4618      	mov	r0, r3
 8022f42:	f7ff fe4f 	bl	8022be4 <tiny_print>

	return strBuf.curLen;
 8022f46:	69fb      	ldr	r3, [r7, #28]
}
 8022f48:	4618      	mov	r0, r3
 8022f4a:	3730      	adds	r7, #48	@ 0x30
 8022f4c:	46bd      	mov	sp, r7
 8022f4e:	bd80      	pop	{r7, pc}

08022f50 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 8022f50:	b40c      	push	{r2, r3}
 8022f52:	b580      	push	{r7, lr}
 8022f54:	b08c      	sub	sp, #48	@ 0x30
 8022f56:	af00      	add	r7, sp, #0
 8022f58:	6078      	str	r0, [r7, #4]
 8022f5a:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8022f5c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8022f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8022f62:	687a      	ldr	r2, [r7, #4]
 8022f64:	683b      	ldr	r3, [r7, #0]
 8022f66:	441a      	add	r2, r3
 8022f68:	f107 030c 	add.w	r3, r7, #12
 8022f6c:	6879      	ldr	r1, [r7, #4]
 8022f6e:	4618      	mov	r0, r3
 8022f70:	f7ff fb9b 	bl	80226aa <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022f74:	f107 030c 	add.w	r3, r7, #12
 8022f78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022f7a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8022f7c:	4618      	mov	r0, r3
 8022f7e:	f7ff fe31 	bl	8022be4 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022f82:	69bb      	ldr	r3, [r7, #24]
}
 8022f84:	4618      	mov	r0, r3
 8022f86:	3730      	adds	r7, #48	@ 0x30
 8022f88:	46bd      	mov	sp, r7
 8022f8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022f8e:	b002      	add	sp, #8
 8022f90:	4770      	bx	lr

08022f92 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8022f92:	b40e      	push	{r1, r2, r3}
 8022f94:	b580      	push	{r7, lr}
 8022f96:	b08d      	sub	sp, #52	@ 0x34
 8022f98:	af00      	add	r7, sp, #0
 8022f9a:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8022f9c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8022fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8022fa2:	687b      	ldr	r3, [r7, #4]
 8022fa4:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8022fa8:	f107 030c 	add.w	r3, r7, #12
 8022fac:	6879      	ldr	r1, [r7, #4]
 8022fae:	4618      	mov	r0, r3
 8022fb0:	f7ff fb7b 	bl	80226aa <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8022fb4:	f107 030c 	add.w	r3, r7, #12
 8022fb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8022fba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8022fbc:	4618      	mov	r0, r3
 8022fbe:	f7ff fe11 	bl	8022be4 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8022fc2:	69bb      	ldr	r3, [r7, #24]
}
 8022fc4:	4618      	mov	r0, r3
 8022fc6:	3734      	adds	r7, #52	@ 0x34
 8022fc8:	46bd      	mov	sp, r7
 8022fca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8022fce:	b003      	add	sp, #12
 8022fd0:	4770      	bx	lr
	...

08022fd4 <rand>:
 8022fd4:	4b16      	ldr	r3, [pc, #88]	@ (8023030 <rand+0x5c>)
 8022fd6:	b510      	push	{r4, lr}
 8022fd8:	681c      	ldr	r4, [r3, #0]
 8022fda:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8022fdc:	b9b3      	cbnz	r3, 802300c <rand+0x38>
 8022fde:	2018      	movs	r0, #24
 8022fe0:	f000 fa70 	bl	80234c4 <malloc>
 8022fe4:	4602      	mov	r2, r0
 8022fe6:	6320      	str	r0, [r4, #48]	@ 0x30
 8022fe8:	b920      	cbnz	r0, 8022ff4 <rand+0x20>
 8022fea:	4b12      	ldr	r3, [pc, #72]	@ (8023034 <rand+0x60>)
 8022fec:	4812      	ldr	r0, [pc, #72]	@ (8023038 <rand+0x64>)
 8022fee:	2152      	movs	r1, #82	@ 0x52
 8022ff0:	f000 fa00 	bl	80233f4 <__assert_func>
 8022ff4:	4911      	ldr	r1, [pc, #68]	@ (802303c <rand+0x68>)
 8022ff6:	4b12      	ldr	r3, [pc, #72]	@ (8023040 <rand+0x6c>)
 8022ff8:	e9c0 1300 	strd	r1, r3, [r0]
 8022ffc:	4b11      	ldr	r3, [pc, #68]	@ (8023044 <rand+0x70>)
 8022ffe:	6083      	str	r3, [r0, #8]
 8023000:	230b      	movs	r3, #11
 8023002:	8183      	strh	r3, [r0, #12]
 8023004:	2100      	movs	r1, #0
 8023006:	2001      	movs	r0, #1
 8023008:	e9c2 0104 	strd	r0, r1, [r2, #16]
 802300c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 802300e:	480e      	ldr	r0, [pc, #56]	@ (8023048 <rand+0x74>)
 8023010:	690b      	ldr	r3, [r1, #16]
 8023012:	694c      	ldr	r4, [r1, #20]
 8023014:	4a0d      	ldr	r2, [pc, #52]	@ (802304c <rand+0x78>)
 8023016:	4358      	muls	r0, r3
 8023018:	fb02 0004 	mla	r0, r2, r4, r0
 802301c:	fba3 3202 	umull	r3, r2, r3, r2
 8023020:	3301      	adds	r3, #1
 8023022:	eb40 0002 	adc.w	r0, r0, r2
 8023026:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802302a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 802302e:	bd10      	pop	{r4, pc}
 8023030:	20000038 	.word	0x20000038
 8023034:	080276c8 	.word	0x080276c8
 8023038:	080276df 	.word	0x080276df
 802303c:	abcd330e 	.word	0xabcd330e
 8023040:	e66d1234 	.word	0xe66d1234
 8023044:	0005deec 	.word	0x0005deec
 8023048:	5851f42d 	.word	0x5851f42d
 802304c:	4c957f2d 	.word	0x4c957f2d

08023050 <std>:
 8023050:	2300      	movs	r3, #0
 8023052:	b510      	push	{r4, lr}
 8023054:	4604      	mov	r4, r0
 8023056:	e9c0 3300 	strd	r3, r3, [r0]
 802305a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802305e:	6083      	str	r3, [r0, #8]
 8023060:	8181      	strh	r1, [r0, #12]
 8023062:	6643      	str	r3, [r0, #100]	@ 0x64
 8023064:	81c2      	strh	r2, [r0, #14]
 8023066:	6183      	str	r3, [r0, #24]
 8023068:	4619      	mov	r1, r3
 802306a:	2208      	movs	r2, #8
 802306c:	305c      	adds	r0, #92	@ 0x5c
 802306e:	f7ff fa6c 	bl	802254a <memset>
 8023072:	4b0d      	ldr	r3, [pc, #52]	@ (80230a8 <std+0x58>)
 8023074:	6263      	str	r3, [r4, #36]	@ 0x24
 8023076:	4b0d      	ldr	r3, [pc, #52]	@ (80230ac <std+0x5c>)
 8023078:	62a3      	str	r3, [r4, #40]	@ 0x28
 802307a:	4b0d      	ldr	r3, [pc, #52]	@ (80230b0 <std+0x60>)
 802307c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802307e:	4b0d      	ldr	r3, [pc, #52]	@ (80230b4 <std+0x64>)
 8023080:	6323      	str	r3, [r4, #48]	@ 0x30
 8023082:	4b0d      	ldr	r3, [pc, #52]	@ (80230b8 <std+0x68>)
 8023084:	6224      	str	r4, [r4, #32]
 8023086:	429c      	cmp	r4, r3
 8023088:	d006      	beq.n	8023098 <std+0x48>
 802308a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802308e:	4294      	cmp	r4, r2
 8023090:	d002      	beq.n	8023098 <std+0x48>
 8023092:	33d0      	adds	r3, #208	@ 0xd0
 8023094:	429c      	cmp	r4, r3
 8023096:	d105      	bne.n	80230a4 <std+0x54>
 8023098:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802309c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80230a0:	f000 b9a4 	b.w	80233ec <__retarget_lock_init_recursive>
 80230a4:	bd10      	pop	{r4, pc}
 80230a6:	bf00      	nop
 80230a8:	080231d5 	.word	0x080231d5
 80230ac:	080231f7 	.word	0x080231f7
 80230b0:	0802322f 	.word	0x0802322f
 80230b4:	08023253 	.word	0x08023253
 80230b8:	200026b4 	.word	0x200026b4

080230bc <stdio_exit_handler>:
 80230bc:	4a02      	ldr	r2, [pc, #8]	@ (80230c8 <stdio_exit_handler+0xc>)
 80230be:	4903      	ldr	r1, [pc, #12]	@ (80230cc <stdio_exit_handler+0x10>)
 80230c0:	4803      	ldr	r0, [pc, #12]	@ (80230d0 <stdio_exit_handler+0x14>)
 80230c2:	f000 b869 	b.w	8023198 <_fwalk_sglue>
 80230c6:	bf00      	nop
 80230c8:	2000002c 	.word	0x2000002c
 80230cc:	08023739 	.word	0x08023739
 80230d0:	2000003c 	.word	0x2000003c

080230d4 <cleanup_stdio>:
 80230d4:	6841      	ldr	r1, [r0, #4]
 80230d6:	4b0c      	ldr	r3, [pc, #48]	@ (8023108 <cleanup_stdio+0x34>)
 80230d8:	4299      	cmp	r1, r3
 80230da:	b510      	push	{r4, lr}
 80230dc:	4604      	mov	r4, r0
 80230de:	d001      	beq.n	80230e4 <cleanup_stdio+0x10>
 80230e0:	f000 fb2a 	bl	8023738 <_fflush_r>
 80230e4:	68a1      	ldr	r1, [r4, #8]
 80230e6:	4b09      	ldr	r3, [pc, #36]	@ (802310c <cleanup_stdio+0x38>)
 80230e8:	4299      	cmp	r1, r3
 80230ea:	d002      	beq.n	80230f2 <cleanup_stdio+0x1e>
 80230ec:	4620      	mov	r0, r4
 80230ee:	f000 fb23 	bl	8023738 <_fflush_r>
 80230f2:	68e1      	ldr	r1, [r4, #12]
 80230f4:	4b06      	ldr	r3, [pc, #24]	@ (8023110 <cleanup_stdio+0x3c>)
 80230f6:	4299      	cmp	r1, r3
 80230f8:	d004      	beq.n	8023104 <cleanup_stdio+0x30>
 80230fa:	4620      	mov	r0, r4
 80230fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023100:	f000 bb1a 	b.w	8023738 <_fflush_r>
 8023104:	bd10      	pop	{r4, pc}
 8023106:	bf00      	nop
 8023108:	200026b4 	.word	0x200026b4
 802310c:	2000271c 	.word	0x2000271c
 8023110:	20002784 	.word	0x20002784

08023114 <global_stdio_init.part.0>:
 8023114:	b510      	push	{r4, lr}
 8023116:	4b0b      	ldr	r3, [pc, #44]	@ (8023144 <global_stdio_init.part.0+0x30>)
 8023118:	4c0b      	ldr	r4, [pc, #44]	@ (8023148 <global_stdio_init.part.0+0x34>)
 802311a:	4a0c      	ldr	r2, [pc, #48]	@ (802314c <global_stdio_init.part.0+0x38>)
 802311c:	601a      	str	r2, [r3, #0]
 802311e:	4620      	mov	r0, r4
 8023120:	2200      	movs	r2, #0
 8023122:	2104      	movs	r1, #4
 8023124:	f7ff ff94 	bl	8023050 <std>
 8023128:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 802312c:	2201      	movs	r2, #1
 802312e:	2109      	movs	r1, #9
 8023130:	f7ff ff8e 	bl	8023050 <std>
 8023134:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8023138:	2202      	movs	r2, #2
 802313a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802313e:	2112      	movs	r1, #18
 8023140:	f7ff bf86 	b.w	8023050 <std>
 8023144:	200027ec 	.word	0x200027ec
 8023148:	200026b4 	.word	0x200026b4
 802314c:	080230bd 	.word	0x080230bd

08023150 <__sfp_lock_acquire>:
 8023150:	4801      	ldr	r0, [pc, #4]	@ (8023158 <__sfp_lock_acquire+0x8>)
 8023152:	f000 b94c 	b.w	80233ee <__retarget_lock_acquire_recursive>
 8023156:	bf00      	nop
 8023158:	200027f5 	.word	0x200027f5

0802315c <__sfp_lock_release>:
 802315c:	4801      	ldr	r0, [pc, #4]	@ (8023164 <__sfp_lock_release+0x8>)
 802315e:	f000 b947 	b.w	80233f0 <__retarget_lock_release_recursive>
 8023162:	bf00      	nop
 8023164:	200027f5 	.word	0x200027f5

08023168 <__sinit>:
 8023168:	b510      	push	{r4, lr}
 802316a:	4604      	mov	r4, r0
 802316c:	f7ff fff0 	bl	8023150 <__sfp_lock_acquire>
 8023170:	6a23      	ldr	r3, [r4, #32]
 8023172:	b11b      	cbz	r3, 802317c <__sinit+0x14>
 8023174:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023178:	f7ff bff0 	b.w	802315c <__sfp_lock_release>
 802317c:	4b04      	ldr	r3, [pc, #16]	@ (8023190 <__sinit+0x28>)
 802317e:	6223      	str	r3, [r4, #32]
 8023180:	4b04      	ldr	r3, [pc, #16]	@ (8023194 <__sinit+0x2c>)
 8023182:	681b      	ldr	r3, [r3, #0]
 8023184:	2b00      	cmp	r3, #0
 8023186:	d1f5      	bne.n	8023174 <__sinit+0xc>
 8023188:	f7ff ffc4 	bl	8023114 <global_stdio_init.part.0>
 802318c:	e7f2      	b.n	8023174 <__sinit+0xc>
 802318e:	bf00      	nop
 8023190:	080230d5 	.word	0x080230d5
 8023194:	200027ec 	.word	0x200027ec

08023198 <_fwalk_sglue>:
 8023198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802319c:	4607      	mov	r7, r0
 802319e:	4688      	mov	r8, r1
 80231a0:	4614      	mov	r4, r2
 80231a2:	2600      	movs	r6, #0
 80231a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80231a8:	f1b9 0901 	subs.w	r9, r9, #1
 80231ac:	d505      	bpl.n	80231ba <_fwalk_sglue+0x22>
 80231ae:	6824      	ldr	r4, [r4, #0]
 80231b0:	2c00      	cmp	r4, #0
 80231b2:	d1f7      	bne.n	80231a4 <_fwalk_sglue+0xc>
 80231b4:	4630      	mov	r0, r6
 80231b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80231ba:	89ab      	ldrh	r3, [r5, #12]
 80231bc:	2b01      	cmp	r3, #1
 80231be:	d907      	bls.n	80231d0 <_fwalk_sglue+0x38>
 80231c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80231c4:	3301      	adds	r3, #1
 80231c6:	d003      	beq.n	80231d0 <_fwalk_sglue+0x38>
 80231c8:	4629      	mov	r1, r5
 80231ca:	4638      	mov	r0, r7
 80231cc:	47c0      	blx	r8
 80231ce:	4306      	orrs	r6, r0
 80231d0:	3568      	adds	r5, #104	@ 0x68
 80231d2:	e7e9      	b.n	80231a8 <_fwalk_sglue+0x10>

080231d4 <__sread>:
 80231d4:	b510      	push	{r4, lr}
 80231d6:	460c      	mov	r4, r1
 80231d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80231dc:	f000 f8b8 	bl	8023350 <_read_r>
 80231e0:	2800      	cmp	r0, #0
 80231e2:	bfab      	itete	ge
 80231e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80231e6:	89a3      	ldrhlt	r3, [r4, #12]
 80231e8:	181b      	addge	r3, r3, r0
 80231ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80231ee:	bfac      	ite	ge
 80231f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80231f2:	81a3      	strhlt	r3, [r4, #12]
 80231f4:	bd10      	pop	{r4, pc}

080231f6 <__swrite>:
 80231f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80231fa:	461f      	mov	r7, r3
 80231fc:	898b      	ldrh	r3, [r1, #12]
 80231fe:	05db      	lsls	r3, r3, #23
 8023200:	4605      	mov	r5, r0
 8023202:	460c      	mov	r4, r1
 8023204:	4616      	mov	r6, r2
 8023206:	d505      	bpl.n	8023214 <__swrite+0x1e>
 8023208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802320c:	2302      	movs	r3, #2
 802320e:	2200      	movs	r2, #0
 8023210:	f000 f88c 	bl	802332c <_lseek_r>
 8023214:	89a3      	ldrh	r3, [r4, #12]
 8023216:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802321a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 802321e:	81a3      	strh	r3, [r4, #12]
 8023220:	4632      	mov	r2, r6
 8023222:	463b      	mov	r3, r7
 8023224:	4628      	mov	r0, r5
 8023226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802322a:	f000 b8a3 	b.w	8023374 <_write_r>

0802322e <__sseek>:
 802322e:	b510      	push	{r4, lr}
 8023230:	460c      	mov	r4, r1
 8023232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023236:	f000 f879 	bl	802332c <_lseek_r>
 802323a:	1c43      	adds	r3, r0, #1
 802323c:	89a3      	ldrh	r3, [r4, #12]
 802323e:	bf15      	itete	ne
 8023240:	6560      	strne	r0, [r4, #84]	@ 0x54
 8023242:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8023246:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 802324a:	81a3      	strheq	r3, [r4, #12]
 802324c:	bf18      	it	ne
 802324e:	81a3      	strhne	r3, [r4, #12]
 8023250:	bd10      	pop	{r4, pc}

08023252 <__sclose>:
 8023252:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023256:	f000 b859 	b.w	802330c <_close_r>

0802325a <memcmp>:
 802325a:	b510      	push	{r4, lr}
 802325c:	3901      	subs	r1, #1
 802325e:	4402      	add	r2, r0
 8023260:	4290      	cmp	r0, r2
 8023262:	d101      	bne.n	8023268 <memcmp+0xe>
 8023264:	2000      	movs	r0, #0
 8023266:	e005      	b.n	8023274 <memcmp+0x1a>
 8023268:	7803      	ldrb	r3, [r0, #0]
 802326a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802326e:	42a3      	cmp	r3, r4
 8023270:	d001      	beq.n	8023276 <memcmp+0x1c>
 8023272:	1b18      	subs	r0, r3, r4
 8023274:	bd10      	pop	{r4, pc}
 8023276:	3001      	adds	r0, #1
 8023278:	e7f2      	b.n	8023260 <memcmp+0x6>

0802327a <memmove>:
 802327a:	4288      	cmp	r0, r1
 802327c:	b510      	push	{r4, lr}
 802327e:	eb01 0402 	add.w	r4, r1, r2
 8023282:	d902      	bls.n	802328a <memmove+0x10>
 8023284:	4284      	cmp	r4, r0
 8023286:	4623      	mov	r3, r4
 8023288:	d807      	bhi.n	802329a <memmove+0x20>
 802328a:	1e43      	subs	r3, r0, #1
 802328c:	42a1      	cmp	r1, r4
 802328e:	d008      	beq.n	80232a2 <memmove+0x28>
 8023290:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023294:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023298:	e7f8      	b.n	802328c <memmove+0x12>
 802329a:	4402      	add	r2, r0
 802329c:	4601      	mov	r1, r0
 802329e:	428a      	cmp	r2, r1
 80232a0:	d100      	bne.n	80232a4 <memmove+0x2a>
 80232a2:	bd10      	pop	{r4, pc}
 80232a4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80232a8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80232ac:	e7f7      	b.n	802329e <memmove+0x24>
	...

080232b0 <strcasecmp>:
 80232b0:	b530      	push	{r4, r5, lr}
 80232b2:	4d0b      	ldr	r5, [pc, #44]	@ (80232e0 <strcasecmp+0x30>)
 80232b4:	4604      	mov	r4, r0
 80232b6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80232ba:	5cea      	ldrb	r2, [r5, r3]
 80232bc:	f002 0203 	and.w	r2, r2, #3
 80232c0:	2a01      	cmp	r2, #1
 80232c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80232c6:	5ca8      	ldrb	r0, [r5, r2]
 80232c8:	f000 0003 	and.w	r0, r0, #3
 80232cc:	bf08      	it	eq
 80232ce:	3320      	addeq	r3, #32
 80232d0:	2801      	cmp	r0, #1
 80232d2:	bf08      	it	eq
 80232d4:	3220      	addeq	r2, #32
 80232d6:	1a98      	subs	r0, r3, r2
 80232d8:	d101      	bne.n	80232de <strcasecmp+0x2e>
 80232da:	2a00      	cmp	r2, #0
 80232dc:	d1eb      	bne.n	80232b6 <strcasecmp+0x6>
 80232de:	bd30      	pop	{r4, r5, pc}
 80232e0:	08027774 	.word	0x08027774

080232e4 <strncpy>:
 80232e4:	b510      	push	{r4, lr}
 80232e6:	3901      	subs	r1, #1
 80232e8:	4603      	mov	r3, r0
 80232ea:	b132      	cbz	r2, 80232fa <strncpy+0x16>
 80232ec:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80232f0:	f803 4b01 	strb.w	r4, [r3], #1
 80232f4:	3a01      	subs	r2, #1
 80232f6:	2c00      	cmp	r4, #0
 80232f8:	d1f7      	bne.n	80232ea <strncpy+0x6>
 80232fa:	441a      	add	r2, r3
 80232fc:	2100      	movs	r1, #0
 80232fe:	4293      	cmp	r3, r2
 8023300:	d100      	bne.n	8023304 <strncpy+0x20>
 8023302:	bd10      	pop	{r4, pc}
 8023304:	f803 1b01 	strb.w	r1, [r3], #1
 8023308:	e7f9      	b.n	80232fe <strncpy+0x1a>
	...

0802330c <_close_r>:
 802330c:	b538      	push	{r3, r4, r5, lr}
 802330e:	4d06      	ldr	r5, [pc, #24]	@ (8023328 <_close_r+0x1c>)
 8023310:	2300      	movs	r3, #0
 8023312:	4604      	mov	r4, r0
 8023314:	4608      	mov	r0, r1
 8023316:	602b      	str	r3, [r5, #0]
 8023318:	f7df fcba 	bl	8002c90 <_close>
 802331c:	1c43      	adds	r3, r0, #1
 802331e:	d102      	bne.n	8023326 <_close_r+0x1a>
 8023320:	682b      	ldr	r3, [r5, #0]
 8023322:	b103      	cbz	r3, 8023326 <_close_r+0x1a>
 8023324:	6023      	str	r3, [r4, #0]
 8023326:	bd38      	pop	{r3, r4, r5, pc}
 8023328:	200027f0 	.word	0x200027f0

0802332c <_lseek_r>:
 802332c:	b538      	push	{r3, r4, r5, lr}
 802332e:	4d07      	ldr	r5, [pc, #28]	@ (802334c <_lseek_r+0x20>)
 8023330:	4604      	mov	r4, r0
 8023332:	4608      	mov	r0, r1
 8023334:	4611      	mov	r1, r2
 8023336:	2200      	movs	r2, #0
 8023338:	602a      	str	r2, [r5, #0]
 802333a:	461a      	mov	r2, r3
 802333c:	f7df fccf 	bl	8002cde <_lseek>
 8023340:	1c43      	adds	r3, r0, #1
 8023342:	d102      	bne.n	802334a <_lseek_r+0x1e>
 8023344:	682b      	ldr	r3, [r5, #0]
 8023346:	b103      	cbz	r3, 802334a <_lseek_r+0x1e>
 8023348:	6023      	str	r3, [r4, #0]
 802334a:	bd38      	pop	{r3, r4, r5, pc}
 802334c:	200027f0 	.word	0x200027f0

08023350 <_read_r>:
 8023350:	b538      	push	{r3, r4, r5, lr}
 8023352:	4d07      	ldr	r5, [pc, #28]	@ (8023370 <_read_r+0x20>)
 8023354:	4604      	mov	r4, r0
 8023356:	4608      	mov	r0, r1
 8023358:	4611      	mov	r1, r2
 802335a:	2200      	movs	r2, #0
 802335c:	602a      	str	r2, [r5, #0]
 802335e:	461a      	mov	r2, r3
 8023360:	f7df fc5d 	bl	8002c1e <_read>
 8023364:	1c43      	adds	r3, r0, #1
 8023366:	d102      	bne.n	802336e <_read_r+0x1e>
 8023368:	682b      	ldr	r3, [r5, #0]
 802336a:	b103      	cbz	r3, 802336e <_read_r+0x1e>
 802336c:	6023      	str	r3, [r4, #0]
 802336e:	bd38      	pop	{r3, r4, r5, pc}
 8023370:	200027f0 	.word	0x200027f0

08023374 <_write_r>:
 8023374:	b538      	push	{r3, r4, r5, lr}
 8023376:	4d07      	ldr	r5, [pc, #28]	@ (8023394 <_write_r+0x20>)
 8023378:	4604      	mov	r4, r0
 802337a:	4608      	mov	r0, r1
 802337c:	4611      	mov	r1, r2
 802337e:	2200      	movs	r2, #0
 8023380:	602a      	str	r2, [r5, #0]
 8023382:	461a      	mov	r2, r3
 8023384:	f7df fc68 	bl	8002c58 <_write>
 8023388:	1c43      	adds	r3, r0, #1
 802338a:	d102      	bne.n	8023392 <_write_r+0x1e>
 802338c:	682b      	ldr	r3, [r5, #0]
 802338e:	b103      	cbz	r3, 8023392 <_write_r+0x1e>
 8023390:	6023      	str	r3, [r4, #0]
 8023392:	bd38      	pop	{r3, r4, r5, pc}
 8023394:	200027f0 	.word	0x200027f0

08023398 <__errno>:
 8023398:	4b01      	ldr	r3, [pc, #4]	@ (80233a0 <__errno+0x8>)
 802339a:	6818      	ldr	r0, [r3, #0]
 802339c:	4770      	bx	lr
 802339e:	bf00      	nop
 80233a0:	20000038 	.word	0x20000038

080233a4 <__libc_init_array>:
 80233a4:	b570      	push	{r4, r5, r6, lr}
 80233a6:	4d0d      	ldr	r5, [pc, #52]	@ (80233dc <__libc_init_array+0x38>)
 80233a8:	4c0d      	ldr	r4, [pc, #52]	@ (80233e0 <__libc_init_array+0x3c>)
 80233aa:	1b64      	subs	r4, r4, r5
 80233ac:	10a4      	asrs	r4, r4, #2
 80233ae:	2600      	movs	r6, #0
 80233b0:	42a6      	cmp	r6, r4
 80233b2:	d109      	bne.n	80233c8 <__libc_init_array+0x24>
 80233b4:	4d0b      	ldr	r5, [pc, #44]	@ (80233e4 <__libc_init_array+0x40>)
 80233b6:	4c0c      	ldr	r4, [pc, #48]	@ (80233e8 <__libc_init_array+0x44>)
 80233b8:	f000 fe3a 	bl	8024030 <_init>
 80233bc:	1b64      	subs	r4, r4, r5
 80233be:	10a4      	asrs	r4, r4, #2
 80233c0:	2600      	movs	r6, #0
 80233c2:	42a6      	cmp	r6, r4
 80233c4:	d105      	bne.n	80233d2 <__libc_init_array+0x2e>
 80233c6:	bd70      	pop	{r4, r5, r6, pc}
 80233c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80233cc:	4798      	blx	r3
 80233ce:	3601      	adds	r6, #1
 80233d0:	e7ee      	b.n	80233b0 <__libc_init_array+0xc>
 80233d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80233d6:	4798      	blx	r3
 80233d8:	3601      	adds	r6, #1
 80233da:	e7f2      	b.n	80233c2 <__libc_init_array+0x1e>
 80233dc:	080278b0 	.word	0x080278b0
 80233e0:	080278b0 	.word	0x080278b0
 80233e4:	080278b0 	.word	0x080278b0
 80233e8:	080278b4 	.word	0x080278b4

080233ec <__retarget_lock_init_recursive>:
 80233ec:	4770      	bx	lr

080233ee <__retarget_lock_acquire_recursive>:
 80233ee:	4770      	bx	lr

080233f0 <__retarget_lock_release_recursive>:
 80233f0:	4770      	bx	lr
	...

080233f4 <__assert_func>:
 80233f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80233f6:	4614      	mov	r4, r2
 80233f8:	461a      	mov	r2, r3
 80233fa:	4b09      	ldr	r3, [pc, #36]	@ (8023420 <__assert_func+0x2c>)
 80233fc:	681b      	ldr	r3, [r3, #0]
 80233fe:	4605      	mov	r5, r0
 8023400:	68d8      	ldr	r0, [r3, #12]
 8023402:	b954      	cbnz	r4, 802341a <__assert_func+0x26>
 8023404:	4b07      	ldr	r3, [pc, #28]	@ (8023424 <__assert_func+0x30>)
 8023406:	461c      	mov	r4, r3
 8023408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802340c:	9100      	str	r1, [sp, #0]
 802340e:	462b      	mov	r3, r5
 8023410:	4905      	ldr	r1, [pc, #20]	@ (8023428 <__assert_func+0x34>)
 8023412:	f000 f9b9 	bl	8023788 <fiprintf>
 8023416:	f000 f9d9 	bl	80237cc <abort>
 802341a:	4b04      	ldr	r3, [pc, #16]	@ (802342c <__assert_func+0x38>)
 802341c:	e7f4      	b.n	8023408 <__assert_func+0x14>
 802341e:	bf00      	nop
 8023420:	20000038 	.word	0x20000038
 8023424:	08027772 	.word	0x08027772
 8023428:	08027744 	.word	0x08027744
 802342c:	08027737 	.word	0x08027737

08023430 <_free_r>:
 8023430:	b538      	push	{r3, r4, r5, lr}
 8023432:	4605      	mov	r5, r0
 8023434:	2900      	cmp	r1, #0
 8023436:	d041      	beq.n	80234bc <_free_r+0x8c>
 8023438:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802343c:	1f0c      	subs	r4, r1, #4
 802343e:	2b00      	cmp	r3, #0
 8023440:	bfb8      	it	lt
 8023442:	18e4      	addlt	r4, r4, r3
 8023444:	f000 f8e8 	bl	8023618 <__malloc_lock>
 8023448:	4a1d      	ldr	r2, [pc, #116]	@ (80234c0 <_free_r+0x90>)
 802344a:	6813      	ldr	r3, [r2, #0]
 802344c:	b933      	cbnz	r3, 802345c <_free_r+0x2c>
 802344e:	6063      	str	r3, [r4, #4]
 8023450:	6014      	str	r4, [r2, #0]
 8023452:	4628      	mov	r0, r5
 8023454:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023458:	f000 b8e4 	b.w	8023624 <__malloc_unlock>
 802345c:	42a3      	cmp	r3, r4
 802345e:	d908      	bls.n	8023472 <_free_r+0x42>
 8023460:	6820      	ldr	r0, [r4, #0]
 8023462:	1821      	adds	r1, r4, r0
 8023464:	428b      	cmp	r3, r1
 8023466:	bf01      	itttt	eq
 8023468:	6819      	ldreq	r1, [r3, #0]
 802346a:	685b      	ldreq	r3, [r3, #4]
 802346c:	1809      	addeq	r1, r1, r0
 802346e:	6021      	streq	r1, [r4, #0]
 8023470:	e7ed      	b.n	802344e <_free_r+0x1e>
 8023472:	461a      	mov	r2, r3
 8023474:	685b      	ldr	r3, [r3, #4]
 8023476:	b10b      	cbz	r3, 802347c <_free_r+0x4c>
 8023478:	42a3      	cmp	r3, r4
 802347a:	d9fa      	bls.n	8023472 <_free_r+0x42>
 802347c:	6811      	ldr	r1, [r2, #0]
 802347e:	1850      	adds	r0, r2, r1
 8023480:	42a0      	cmp	r0, r4
 8023482:	d10b      	bne.n	802349c <_free_r+0x6c>
 8023484:	6820      	ldr	r0, [r4, #0]
 8023486:	4401      	add	r1, r0
 8023488:	1850      	adds	r0, r2, r1
 802348a:	4283      	cmp	r3, r0
 802348c:	6011      	str	r1, [r2, #0]
 802348e:	d1e0      	bne.n	8023452 <_free_r+0x22>
 8023490:	6818      	ldr	r0, [r3, #0]
 8023492:	685b      	ldr	r3, [r3, #4]
 8023494:	6053      	str	r3, [r2, #4]
 8023496:	4408      	add	r0, r1
 8023498:	6010      	str	r0, [r2, #0]
 802349a:	e7da      	b.n	8023452 <_free_r+0x22>
 802349c:	d902      	bls.n	80234a4 <_free_r+0x74>
 802349e:	230c      	movs	r3, #12
 80234a0:	602b      	str	r3, [r5, #0]
 80234a2:	e7d6      	b.n	8023452 <_free_r+0x22>
 80234a4:	6820      	ldr	r0, [r4, #0]
 80234a6:	1821      	adds	r1, r4, r0
 80234a8:	428b      	cmp	r3, r1
 80234aa:	bf04      	itt	eq
 80234ac:	6819      	ldreq	r1, [r3, #0]
 80234ae:	685b      	ldreq	r3, [r3, #4]
 80234b0:	6063      	str	r3, [r4, #4]
 80234b2:	bf04      	itt	eq
 80234b4:	1809      	addeq	r1, r1, r0
 80234b6:	6021      	streq	r1, [r4, #0]
 80234b8:	6054      	str	r4, [r2, #4]
 80234ba:	e7ca      	b.n	8023452 <_free_r+0x22>
 80234bc:	bd38      	pop	{r3, r4, r5, pc}
 80234be:	bf00      	nop
 80234c0:	200027fc 	.word	0x200027fc

080234c4 <malloc>:
 80234c4:	4b02      	ldr	r3, [pc, #8]	@ (80234d0 <malloc+0xc>)
 80234c6:	4601      	mov	r1, r0
 80234c8:	6818      	ldr	r0, [r3, #0]
 80234ca:	f000 b825 	b.w	8023518 <_malloc_r>
 80234ce:	bf00      	nop
 80234d0:	20000038 	.word	0x20000038

080234d4 <sbrk_aligned>:
 80234d4:	b570      	push	{r4, r5, r6, lr}
 80234d6:	4e0f      	ldr	r6, [pc, #60]	@ (8023514 <sbrk_aligned+0x40>)
 80234d8:	460c      	mov	r4, r1
 80234da:	6831      	ldr	r1, [r6, #0]
 80234dc:	4605      	mov	r5, r0
 80234de:	b911      	cbnz	r1, 80234e6 <sbrk_aligned+0x12>
 80234e0:	f000 f964 	bl	80237ac <_sbrk_r>
 80234e4:	6030      	str	r0, [r6, #0]
 80234e6:	4621      	mov	r1, r4
 80234e8:	4628      	mov	r0, r5
 80234ea:	f000 f95f 	bl	80237ac <_sbrk_r>
 80234ee:	1c43      	adds	r3, r0, #1
 80234f0:	d103      	bne.n	80234fa <sbrk_aligned+0x26>
 80234f2:	f04f 34ff 	mov.w	r4, #4294967295
 80234f6:	4620      	mov	r0, r4
 80234f8:	bd70      	pop	{r4, r5, r6, pc}
 80234fa:	1cc4      	adds	r4, r0, #3
 80234fc:	f024 0403 	bic.w	r4, r4, #3
 8023500:	42a0      	cmp	r0, r4
 8023502:	d0f8      	beq.n	80234f6 <sbrk_aligned+0x22>
 8023504:	1a21      	subs	r1, r4, r0
 8023506:	4628      	mov	r0, r5
 8023508:	f000 f950 	bl	80237ac <_sbrk_r>
 802350c:	3001      	adds	r0, #1
 802350e:	d1f2      	bne.n	80234f6 <sbrk_aligned+0x22>
 8023510:	e7ef      	b.n	80234f2 <sbrk_aligned+0x1e>
 8023512:	bf00      	nop
 8023514:	200027f8 	.word	0x200027f8

08023518 <_malloc_r>:
 8023518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802351c:	1ccd      	adds	r5, r1, #3
 802351e:	f025 0503 	bic.w	r5, r5, #3
 8023522:	3508      	adds	r5, #8
 8023524:	2d0c      	cmp	r5, #12
 8023526:	bf38      	it	cc
 8023528:	250c      	movcc	r5, #12
 802352a:	2d00      	cmp	r5, #0
 802352c:	4606      	mov	r6, r0
 802352e:	db01      	blt.n	8023534 <_malloc_r+0x1c>
 8023530:	42a9      	cmp	r1, r5
 8023532:	d904      	bls.n	802353e <_malloc_r+0x26>
 8023534:	230c      	movs	r3, #12
 8023536:	6033      	str	r3, [r6, #0]
 8023538:	2000      	movs	r0, #0
 802353a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802353e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8023614 <_malloc_r+0xfc>
 8023542:	f000 f869 	bl	8023618 <__malloc_lock>
 8023546:	f8d8 3000 	ldr.w	r3, [r8]
 802354a:	461c      	mov	r4, r3
 802354c:	bb44      	cbnz	r4, 80235a0 <_malloc_r+0x88>
 802354e:	4629      	mov	r1, r5
 8023550:	4630      	mov	r0, r6
 8023552:	f7ff ffbf 	bl	80234d4 <sbrk_aligned>
 8023556:	1c43      	adds	r3, r0, #1
 8023558:	4604      	mov	r4, r0
 802355a:	d158      	bne.n	802360e <_malloc_r+0xf6>
 802355c:	f8d8 4000 	ldr.w	r4, [r8]
 8023560:	4627      	mov	r7, r4
 8023562:	2f00      	cmp	r7, #0
 8023564:	d143      	bne.n	80235ee <_malloc_r+0xd6>
 8023566:	2c00      	cmp	r4, #0
 8023568:	d04b      	beq.n	8023602 <_malloc_r+0xea>
 802356a:	6823      	ldr	r3, [r4, #0]
 802356c:	4639      	mov	r1, r7
 802356e:	4630      	mov	r0, r6
 8023570:	eb04 0903 	add.w	r9, r4, r3
 8023574:	f000 f91a 	bl	80237ac <_sbrk_r>
 8023578:	4581      	cmp	r9, r0
 802357a:	d142      	bne.n	8023602 <_malloc_r+0xea>
 802357c:	6821      	ldr	r1, [r4, #0]
 802357e:	1a6d      	subs	r5, r5, r1
 8023580:	4629      	mov	r1, r5
 8023582:	4630      	mov	r0, r6
 8023584:	f7ff ffa6 	bl	80234d4 <sbrk_aligned>
 8023588:	3001      	adds	r0, #1
 802358a:	d03a      	beq.n	8023602 <_malloc_r+0xea>
 802358c:	6823      	ldr	r3, [r4, #0]
 802358e:	442b      	add	r3, r5
 8023590:	6023      	str	r3, [r4, #0]
 8023592:	f8d8 3000 	ldr.w	r3, [r8]
 8023596:	685a      	ldr	r2, [r3, #4]
 8023598:	bb62      	cbnz	r2, 80235f4 <_malloc_r+0xdc>
 802359a:	f8c8 7000 	str.w	r7, [r8]
 802359e:	e00f      	b.n	80235c0 <_malloc_r+0xa8>
 80235a0:	6822      	ldr	r2, [r4, #0]
 80235a2:	1b52      	subs	r2, r2, r5
 80235a4:	d420      	bmi.n	80235e8 <_malloc_r+0xd0>
 80235a6:	2a0b      	cmp	r2, #11
 80235a8:	d917      	bls.n	80235da <_malloc_r+0xc2>
 80235aa:	1961      	adds	r1, r4, r5
 80235ac:	42a3      	cmp	r3, r4
 80235ae:	6025      	str	r5, [r4, #0]
 80235b0:	bf18      	it	ne
 80235b2:	6059      	strne	r1, [r3, #4]
 80235b4:	6863      	ldr	r3, [r4, #4]
 80235b6:	bf08      	it	eq
 80235b8:	f8c8 1000 	streq.w	r1, [r8]
 80235bc:	5162      	str	r2, [r4, r5]
 80235be:	604b      	str	r3, [r1, #4]
 80235c0:	4630      	mov	r0, r6
 80235c2:	f000 f82f 	bl	8023624 <__malloc_unlock>
 80235c6:	f104 000b 	add.w	r0, r4, #11
 80235ca:	1d23      	adds	r3, r4, #4
 80235cc:	f020 0007 	bic.w	r0, r0, #7
 80235d0:	1ac2      	subs	r2, r0, r3
 80235d2:	bf1c      	itt	ne
 80235d4:	1a1b      	subne	r3, r3, r0
 80235d6:	50a3      	strne	r3, [r4, r2]
 80235d8:	e7af      	b.n	802353a <_malloc_r+0x22>
 80235da:	6862      	ldr	r2, [r4, #4]
 80235dc:	42a3      	cmp	r3, r4
 80235de:	bf0c      	ite	eq
 80235e0:	f8c8 2000 	streq.w	r2, [r8]
 80235e4:	605a      	strne	r2, [r3, #4]
 80235e6:	e7eb      	b.n	80235c0 <_malloc_r+0xa8>
 80235e8:	4623      	mov	r3, r4
 80235ea:	6864      	ldr	r4, [r4, #4]
 80235ec:	e7ae      	b.n	802354c <_malloc_r+0x34>
 80235ee:	463c      	mov	r4, r7
 80235f0:	687f      	ldr	r7, [r7, #4]
 80235f2:	e7b6      	b.n	8023562 <_malloc_r+0x4a>
 80235f4:	461a      	mov	r2, r3
 80235f6:	685b      	ldr	r3, [r3, #4]
 80235f8:	42a3      	cmp	r3, r4
 80235fa:	d1fb      	bne.n	80235f4 <_malloc_r+0xdc>
 80235fc:	2300      	movs	r3, #0
 80235fe:	6053      	str	r3, [r2, #4]
 8023600:	e7de      	b.n	80235c0 <_malloc_r+0xa8>
 8023602:	230c      	movs	r3, #12
 8023604:	6033      	str	r3, [r6, #0]
 8023606:	4630      	mov	r0, r6
 8023608:	f000 f80c 	bl	8023624 <__malloc_unlock>
 802360c:	e794      	b.n	8023538 <_malloc_r+0x20>
 802360e:	6005      	str	r5, [r0, #0]
 8023610:	e7d6      	b.n	80235c0 <_malloc_r+0xa8>
 8023612:	bf00      	nop
 8023614:	200027fc 	.word	0x200027fc

08023618 <__malloc_lock>:
 8023618:	4801      	ldr	r0, [pc, #4]	@ (8023620 <__malloc_lock+0x8>)
 802361a:	f7ff bee8 	b.w	80233ee <__retarget_lock_acquire_recursive>
 802361e:	bf00      	nop
 8023620:	200027f4 	.word	0x200027f4

08023624 <__malloc_unlock>:
 8023624:	4801      	ldr	r0, [pc, #4]	@ (802362c <__malloc_unlock+0x8>)
 8023626:	f7ff bee3 	b.w	80233f0 <__retarget_lock_release_recursive>
 802362a:	bf00      	nop
 802362c:	200027f4 	.word	0x200027f4

08023630 <__sflush_r>:
 8023630:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8023634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023638:	0716      	lsls	r6, r2, #28
 802363a:	4605      	mov	r5, r0
 802363c:	460c      	mov	r4, r1
 802363e:	d454      	bmi.n	80236ea <__sflush_r+0xba>
 8023640:	684b      	ldr	r3, [r1, #4]
 8023642:	2b00      	cmp	r3, #0
 8023644:	dc02      	bgt.n	802364c <__sflush_r+0x1c>
 8023646:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8023648:	2b00      	cmp	r3, #0
 802364a:	dd48      	ble.n	80236de <__sflush_r+0xae>
 802364c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802364e:	2e00      	cmp	r6, #0
 8023650:	d045      	beq.n	80236de <__sflush_r+0xae>
 8023652:	2300      	movs	r3, #0
 8023654:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8023658:	682f      	ldr	r7, [r5, #0]
 802365a:	6a21      	ldr	r1, [r4, #32]
 802365c:	602b      	str	r3, [r5, #0]
 802365e:	d030      	beq.n	80236c2 <__sflush_r+0x92>
 8023660:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8023662:	89a3      	ldrh	r3, [r4, #12]
 8023664:	0759      	lsls	r1, r3, #29
 8023666:	d505      	bpl.n	8023674 <__sflush_r+0x44>
 8023668:	6863      	ldr	r3, [r4, #4]
 802366a:	1ad2      	subs	r2, r2, r3
 802366c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802366e:	b10b      	cbz	r3, 8023674 <__sflush_r+0x44>
 8023670:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8023672:	1ad2      	subs	r2, r2, r3
 8023674:	2300      	movs	r3, #0
 8023676:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8023678:	6a21      	ldr	r1, [r4, #32]
 802367a:	4628      	mov	r0, r5
 802367c:	47b0      	blx	r6
 802367e:	1c43      	adds	r3, r0, #1
 8023680:	89a3      	ldrh	r3, [r4, #12]
 8023682:	d106      	bne.n	8023692 <__sflush_r+0x62>
 8023684:	6829      	ldr	r1, [r5, #0]
 8023686:	291d      	cmp	r1, #29
 8023688:	d82b      	bhi.n	80236e2 <__sflush_r+0xb2>
 802368a:	4a2a      	ldr	r2, [pc, #168]	@ (8023734 <__sflush_r+0x104>)
 802368c:	410a      	asrs	r2, r1
 802368e:	07d6      	lsls	r6, r2, #31
 8023690:	d427      	bmi.n	80236e2 <__sflush_r+0xb2>
 8023692:	2200      	movs	r2, #0
 8023694:	6062      	str	r2, [r4, #4]
 8023696:	04d9      	lsls	r1, r3, #19
 8023698:	6922      	ldr	r2, [r4, #16]
 802369a:	6022      	str	r2, [r4, #0]
 802369c:	d504      	bpl.n	80236a8 <__sflush_r+0x78>
 802369e:	1c42      	adds	r2, r0, #1
 80236a0:	d101      	bne.n	80236a6 <__sflush_r+0x76>
 80236a2:	682b      	ldr	r3, [r5, #0]
 80236a4:	b903      	cbnz	r3, 80236a8 <__sflush_r+0x78>
 80236a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80236a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80236aa:	602f      	str	r7, [r5, #0]
 80236ac:	b1b9      	cbz	r1, 80236de <__sflush_r+0xae>
 80236ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80236b2:	4299      	cmp	r1, r3
 80236b4:	d002      	beq.n	80236bc <__sflush_r+0x8c>
 80236b6:	4628      	mov	r0, r5
 80236b8:	f7ff feba 	bl	8023430 <_free_r>
 80236bc:	2300      	movs	r3, #0
 80236be:	6363      	str	r3, [r4, #52]	@ 0x34
 80236c0:	e00d      	b.n	80236de <__sflush_r+0xae>
 80236c2:	2301      	movs	r3, #1
 80236c4:	4628      	mov	r0, r5
 80236c6:	47b0      	blx	r6
 80236c8:	4602      	mov	r2, r0
 80236ca:	1c50      	adds	r0, r2, #1
 80236cc:	d1c9      	bne.n	8023662 <__sflush_r+0x32>
 80236ce:	682b      	ldr	r3, [r5, #0]
 80236d0:	2b00      	cmp	r3, #0
 80236d2:	d0c6      	beq.n	8023662 <__sflush_r+0x32>
 80236d4:	2b1d      	cmp	r3, #29
 80236d6:	d001      	beq.n	80236dc <__sflush_r+0xac>
 80236d8:	2b16      	cmp	r3, #22
 80236da:	d11e      	bne.n	802371a <__sflush_r+0xea>
 80236dc:	602f      	str	r7, [r5, #0]
 80236de:	2000      	movs	r0, #0
 80236e0:	e022      	b.n	8023728 <__sflush_r+0xf8>
 80236e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80236e6:	b21b      	sxth	r3, r3
 80236e8:	e01b      	b.n	8023722 <__sflush_r+0xf2>
 80236ea:	690f      	ldr	r7, [r1, #16]
 80236ec:	2f00      	cmp	r7, #0
 80236ee:	d0f6      	beq.n	80236de <__sflush_r+0xae>
 80236f0:	0793      	lsls	r3, r2, #30
 80236f2:	680e      	ldr	r6, [r1, #0]
 80236f4:	bf08      	it	eq
 80236f6:	694b      	ldreq	r3, [r1, #20]
 80236f8:	600f      	str	r7, [r1, #0]
 80236fa:	bf18      	it	ne
 80236fc:	2300      	movne	r3, #0
 80236fe:	eba6 0807 	sub.w	r8, r6, r7
 8023702:	608b      	str	r3, [r1, #8]
 8023704:	f1b8 0f00 	cmp.w	r8, #0
 8023708:	dde9      	ble.n	80236de <__sflush_r+0xae>
 802370a:	6a21      	ldr	r1, [r4, #32]
 802370c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 802370e:	4643      	mov	r3, r8
 8023710:	463a      	mov	r2, r7
 8023712:	4628      	mov	r0, r5
 8023714:	47b0      	blx	r6
 8023716:	2800      	cmp	r0, #0
 8023718:	dc08      	bgt.n	802372c <__sflush_r+0xfc>
 802371a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802371e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023722:	81a3      	strh	r3, [r4, #12]
 8023724:	f04f 30ff 	mov.w	r0, #4294967295
 8023728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802372c:	4407      	add	r7, r0
 802372e:	eba8 0800 	sub.w	r8, r8, r0
 8023732:	e7e7      	b.n	8023704 <__sflush_r+0xd4>
 8023734:	dfbffffe 	.word	0xdfbffffe

08023738 <_fflush_r>:
 8023738:	b538      	push	{r3, r4, r5, lr}
 802373a:	690b      	ldr	r3, [r1, #16]
 802373c:	4605      	mov	r5, r0
 802373e:	460c      	mov	r4, r1
 8023740:	b913      	cbnz	r3, 8023748 <_fflush_r+0x10>
 8023742:	2500      	movs	r5, #0
 8023744:	4628      	mov	r0, r5
 8023746:	bd38      	pop	{r3, r4, r5, pc}
 8023748:	b118      	cbz	r0, 8023752 <_fflush_r+0x1a>
 802374a:	6a03      	ldr	r3, [r0, #32]
 802374c:	b90b      	cbnz	r3, 8023752 <_fflush_r+0x1a>
 802374e:	f7ff fd0b 	bl	8023168 <__sinit>
 8023752:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023756:	2b00      	cmp	r3, #0
 8023758:	d0f3      	beq.n	8023742 <_fflush_r+0xa>
 802375a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 802375c:	07d0      	lsls	r0, r2, #31
 802375e:	d404      	bmi.n	802376a <_fflush_r+0x32>
 8023760:	0599      	lsls	r1, r3, #22
 8023762:	d402      	bmi.n	802376a <_fflush_r+0x32>
 8023764:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023766:	f7ff fe42 	bl	80233ee <__retarget_lock_acquire_recursive>
 802376a:	4628      	mov	r0, r5
 802376c:	4621      	mov	r1, r4
 802376e:	f7ff ff5f 	bl	8023630 <__sflush_r>
 8023772:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023774:	07da      	lsls	r2, r3, #31
 8023776:	4605      	mov	r5, r0
 8023778:	d4e4      	bmi.n	8023744 <_fflush_r+0xc>
 802377a:	89a3      	ldrh	r3, [r4, #12]
 802377c:	059b      	lsls	r3, r3, #22
 802377e:	d4e1      	bmi.n	8023744 <_fflush_r+0xc>
 8023780:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023782:	f7ff fe35 	bl	80233f0 <__retarget_lock_release_recursive>
 8023786:	e7dd      	b.n	8023744 <_fflush_r+0xc>

08023788 <fiprintf>:
 8023788:	b40e      	push	{r1, r2, r3}
 802378a:	b503      	push	{r0, r1, lr}
 802378c:	4601      	mov	r1, r0
 802378e:	ab03      	add	r3, sp, #12
 8023790:	4805      	ldr	r0, [pc, #20]	@ (80237a8 <fiprintf+0x20>)
 8023792:	f853 2b04 	ldr.w	r2, [r3], #4
 8023796:	6800      	ldr	r0, [r0, #0]
 8023798:	9301      	str	r3, [sp, #4]
 802379a:	f000 f847 	bl	802382c <_vfiprintf_r>
 802379e:	b002      	add	sp, #8
 80237a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80237a4:	b003      	add	sp, #12
 80237a6:	4770      	bx	lr
 80237a8:	20000038 	.word	0x20000038

080237ac <_sbrk_r>:
 80237ac:	b538      	push	{r3, r4, r5, lr}
 80237ae:	4d06      	ldr	r5, [pc, #24]	@ (80237c8 <_sbrk_r+0x1c>)
 80237b0:	2300      	movs	r3, #0
 80237b2:	4604      	mov	r4, r0
 80237b4:	4608      	mov	r0, r1
 80237b6:	602b      	str	r3, [r5, #0]
 80237b8:	f7df fa9e 	bl	8002cf8 <_sbrk>
 80237bc:	1c43      	adds	r3, r0, #1
 80237be:	d102      	bne.n	80237c6 <_sbrk_r+0x1a>
 80237c0:	682b      	ldr	r3, [r5, #0]
 80237c2:	b103      	cbz	r3, 80237c6 <_sbrk_r+0x1a>
 80237c4:	6023      	str	r3, [r4, #0]
 80237c6:	bd38      	pop	{r3, r4, r5, pc}
 80237c8:	200027f0 	.word	0x200027f0

080237cc <abort>:
 80237cc:	b508      	push	{r3, lr}
 80237ce:	2006      	movs	r0, #6
 80237d0:	f000 fb8e 	bl	8023ef0 <raise>
 80237d4:	2001      	movs	r0, #1
 80237d6:	f7df fa17 	bl	8002c08 <_exit>

080237da <__sfputc_r>:
 80237da:	6893      	ldr	r3, [r2, #8]
 80237dc:	3b01      	subs	r3, #1
 80237de:	2b00      	cmp	r3, #0
 80237e0:	b410      	push	{r4}
 80237e2:	6093      	str	r3, [r2, #8]
 80237e4:	da08      	bge.n	80237f8 <__sfputc_r+0x1e>
 80237e6:	6994      	ldr	r4, [r2, #24]
 80237e8:	42a3      	cmp	r3, r4
 80237ea:	db01      	blt.n	80237f0 <__sfputc_r+0x16>
 80237ec:	290a      	cmp	r1, #10
 80237ee:	d103      	bne.n	80237f8 <__sfputc_r+0x1e>
 80237f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80237f4:	f000 bac0 	b.w	8023d78 <__swbuf_r>
 80237f8:	6813      	ldr	r3, [r2, #0]
 80237fa:	1c58      	adds	r0, r3, #1
 80237fc:	6010      	str	r0, [r2, #0]
 80237fe:	7019      	strb	r1, [r3, #0]
 8023800:	4608      	mov	r0, r1
 8023802:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023806:	4770      	bx	lr

08023808 <__sfputs_r>:
 8023808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802380a:	4606      	mov	r6, r0
 802380c:	460f      	mov	r7, r1
 802380e:	4614      	mov	r4, r2
 8023810:	18d5      	adds	r5, r2, r3
 8023812:	42ac      	cmp	r4, r5
 8023814:	d101      	bne.n	802381a <__sfputs_r+0x12>
 8023816:	2000      	movs	r0, #0
 8023818:	e007      	b.n	802382a <__sfputs_r+0x22>
 802381a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802381e:	463a      	mov	r2, r7
 8023820:	4630      	mov	r0, r6
 8023822:	f7ff ffda 	bl	80237da <__sfputc_r>
 8023826:	1c43      	adds	r3, r0, #1
 8023828:	d1f3      	bne.n	8023812 <__sfputs_r+0xa>
 802382a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0802382c <_vfiprintf_r>:
 802382c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023830:	460d      	mov	r5, r1
 8023832:	b09d      	sub	sp, #116	@ 0x74
 8023834:	4614      	mov	r4, r2
 8023836:	4698      	mov	r8, r3
 8023838:	4606      	mov	r6, r0
 802383a:	b118      	cbz	r0, 8023844 <_vfiprintf_r+0x18>
 802383c:	6a03      	ldr	r3, [r0, #32]
 802383e:	b90b      	cbnz	r3, 8023844 <_vfiprintf_r+0x18>
 8023840:	f7ff fc92 	bl	8023168 <__sinit>
 8023844:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023846:	07d9      	lsls	r1, r3, #31
 8023848:	d405      	bmi.n	8023856 <_vfiprintf_r+0x2a>
 802384a:	89ab      	ldrh	r3, [r5, #12]
 802384c:	059a      	lsls	r2, r3, #22
 802384e:	d402      	bmi.n	8023856 <_vfiprintf_r+0x2a>
 8023850:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023852:	f7ff fdcc 	bl	80233ee <__retarget_lock_acquire_recursive>
 8023856:	89ab      	ldrh	r3, [r5, #12]
 8023858:	071b      	lsls	r3, r3, #28
 802385a:	d501      	bpl.n	8023860 <_vfiprintf_r+0x34>
 802385c:	692b      	ldr	r3, [r5, #16]
 802385e:	b99b      	cbnz	r3, 8023888 <_vfiprintf_r+0x5c>
 8023860:	4629      	mov	r1, r5
 8023862:	4630      	mov	r0, r6
 8023864:	f000 fac6 	bl	8023df4 <__swsetup_r>
 8023868:	b170      	cbz	r0, 8023888 <_vfiprintf_r+0x5c>
 802386a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802386c:	07dc      	lsls	r4, r3, #31
 802386e:	d504      	bpl.n	802387a <_vfiprintf_r+0x4e>
 8023870:	f04f 30ff 	mov.w	r0, #4294967295
 8023874:	b01d      	add	sp, #116	@ 0x74
 8023876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802387a:	89ab      	ldrh	r3, [r5, #12]
 802387c:	0598      	lsls	r0, r3, #22
 802387e:	d4f7      	bmi.n	8023870 <_vfiprintf_r+0x44>
 8023880:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023882:	f7ff fdb5 	bl	80233f0 <__retarget_lock_release_recursive>
 8023886:	e7f3      	b.n	8023870 <_vfiprintf_r+0x44>
 8023888:	2300      	movs	r3, #0
 802388a:	9309      	str	r3, [sp, #36]	@ 0x24
 802388c:	2320      	movs	r3, #32
 802388e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8023892:	f8cd 800c 	str.w	r8, [sp, #12]
 8023896:	2330      	movs	r3, #48	@ 0x30
 8023898:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8023a48 <_vfiprintf_r+0x21c>
 802389c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80238a0:	f04f 0901 	mov.w	r9, #1
 80238a4:	4623      	mov	r3, r4
 80238a6:	469a      	mov	sl, r3
 80238a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80238ac:	b10a      	cbz	r2, 80238b2 <_vfiprintf_r+0x86>
 80238ae:	2a25      	cmp	r2, #37	@ 0x25
 80238b0:	d1f9      	bne.n	80238a6 <_vfiprintf_r+0x7a>
 80238b2:	ebba 0b04 	subs.w	fp, sl, r4
 80238b6:	d00b      	beq.n	80238d0 <_vfiprintf_r+0xa4>
 80238b8:	465b      	mov	r3, fp
 80238ba:	4622      	mov	r2, r4
 80238bc:	4629      	mov	r1, r5
 80238be:	4630      	mov	r0, r6
 80238c0:	f7ff ffa2 	bl	8023808 <__sfputs_r>
 80238c4:	3001      	adds	r0, #1
 80238c6:	f000 80a7 	beq.w	8023a18 <_vfiprintf_r+0x1ec>
 80238ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80238cc:	445a      	add	r2, fp
 80238ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80238d0:	f89a 3000 	ldrb.w	r3, [sl]
 80238d4:	2b00      	cmp	r3, #0
 80238d6:	f000 809f 	beq.w	8023a18 <_vfiprintf_r+0x1ec>
 80238da:	2300      	movs	r3, #0
 80238dc:	f04f 32ff 	mov.w	r2, #4294967295
 80238e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80238e4:	f10a 0a01 	add.w	sl, sl, #1
 80238e8:	9304      	str	r3, [sp, #16]
 80238ea:	9307      	str	r3, [sp, #28]
 80238ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80238f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80238f2:	4654      	mov	r4, sl
 80238f4:	2205      	movs	r2, #5
 80238f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80238fa:	4853      	ldr	r0, [pc, #332]	@ (8023a48 <_vfiprintf_r+0x21c>)
 80238fc:	f7dc fd08 	bl	8000310 <memchr>
 8023900:	9a04      	ldr	r2, [sp, #16]
 8023902:	b9d8      	cbnz	r0, 802393c <_vfiprintf_r+0x110>
 8023904:	06d1      	lsls	r1, r2, #27
 8023906:	bf44      	itt	mi
 8023908:	2320      	movmi	r3, #32
 802390a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802390e:	0713      	lsls	r3, r2, #28
 8023910:	bf44      	itt	mi
 8023912:	232b      	movmi	r3, #43	@ 0x2b
 8023914:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8023918:	f89a 3000 	ldrb.w	r3, [sl]
 802391c:	2b2a      	cmp	r3, #42	@ 0x2a
 802391e:	d015      	beq.n	802394c <_vfiprintf_r+0x120>
 8023920:	9a07      	ldr	r2, [sp, #28]
 8023922:	4654      	mov	r4, sl
 8023924:	2000      	movs	r0, #0
 8023926:	f04f 0c0a 	mov.w	ip, #10
 802392a:	4621      	mov	r1, r4
 802392c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8023930:	3b30      	subs	r3, #48	@ 0x30
 8023932:	2b09      	cmp	r3, #9
 8023934:	d94b      	bls.n	80239ce <_vfiprintf_r+0x1a2>
 8023936:	b1b0      	cbz	r0, 8023966 <_vfiprintf_r+0x13a>
 8023938:	9207      	str	r2, [sp, #28]
 802393a:	e014      	b.n	8023966 <_vfiprintf_r+0x13a>
 802393c:	eba0 0308 	sub.w	r3, r0, r8
 8023940:	fa09 f303 	lsl.w	r3, r9, r3
 8023944:	4313      	orrs	r3, r2
 8023946:	9304      	str	r3, [sp, #16]
 8023948:	46a2      	mov	sl, r4
 802394a:	e7d2      	b.n	80238f2 <_vfiprintf_r+0xc6>
 802394c:	9b03      	ldr	r3, [sp, #12]
 802394e:	1d19      	adds	r1, r3, #4
 8023950:	681b      	ldr	r3, [r3, #0]
 8023952:	9103      	str	r1, [sp, #12]
 8023954:	2b00      	cmp	r3, #0
 8023956:	bfbb      	ittet	lt
 8023958:	425b      	neglt	r3, r3
 802395a:	f042 0202 	orrlt.w	r2, r2, #2
 802395e:	9307      	strge	r3, [sp, #28]
 8023960:	9307      	strlt	r3, [sp, #28]
 8023962:	bfb8      	it	lt
 8023964:	9204      	strlt	r2, [sp, #16]
 8023966:	7823      	ldrb	r3, [r4, #0]
 8023968:	2b2e      	cmp	r3, #46	@ 0x2e
 802396a:	d10a      	bne.n	8023982 <_vfiprintf_r+0x156>
 802396c:	7863      	ldrb	r3, [r4, #1]
 802396e:	2b2a      	cmp	r3, #42	@ 0x2a
 8023970:	d132      	bne.n	80239d8 <_vfiprintf_r+0x1ac>
 8023972:	9b03      	ldr	r3, [sp, #12]
 8023974:	1d1a      	adds	r2, r3, #4
 8023976:	681b      	ldr	r3, [r3, #0]
 8023978:	9203      	str	r2, [sp, #12]
 802397a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 802397e:	3402      	adds	r4, #2
 8023980:	9305      	str	r3, [sp, #20]
 8023982:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8023a58 <_vfiprintf_r+0x22c>
 8023986:	7821      	ldrb	r1, [r4, #0]
 8023988:	2203      	movs	r2, #3
 802398a:	4650      	mov	r0, sl
 802398c:	f7dc fcc0 	bl	8000310 <memchr>
 8023990:	b138      	cbz	r0, 80239a2 <_vfiprintf_r+0x176>
 8023992:	9b04      	ldr	r3, [sp, #16]
 8023994:	eba0 000a 	sub.w	r0, r0, sl
 8023998:	2240      	movs	r2, #64	@ 0x40
 802399a:	4082      	lsls	r2, r0
 802399c:	4313      	orrs	r3, r2
 802399e:	3401      	adds	r4, #1
 80239a0:	9304      	str	r3, [sp, #16]
 80239a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80239a6:	4829      	ldr	r0, [pc, #164]	@ (8023a4c <_vfiprintf_r+0x220>)
 80239a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80239ac:	2206      	movs	r2, #6
 80239ae:	f7dc fcaf 	bl	8000310 <memchr>
 80239b2:	2800      	cmp	r0, #0
 80239b4:	d03f      	beq.n	8023a36 <_vfiprintf_r+0x20a>
 80239b6:	4b26      	ldr	r3, [pc, #152]	@ (8023a50 <_vfiprintf_r+0x224>)
 80239b8:	bb1b      	cbnz	r3, 8023a02 <_vfiprintf_r+0x1d6>
 80239ba:	9b03      	ldr	r3, [sp, #12]
 80239bc:	3307      	adds	r3, #7
 80239be:	f023 0307 	bic.w	r3, r3, #7
 80239c2:	3308      	adds	r3, #8
 80239c4:	9303      	str	r3, [sp, #12]
 80239c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80239c8:	443b      	add	r3, r7
 80239ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80239cc:	e76a      	b.n	80238a4 <_vfiprintf_r+0x78>
 80239ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80239d2:	460c      	mov	r4, r1
 80239d4:	2001      	movs	r0, #1
 80239d6:	e7a8      	b.n	802392a <_vfiprintf_r+0xfe>
 80239d8:	2300      	movs	r3, #0
 80239da:	3401      	adds	r4, #1
 80239dc:	9305      	str	r3, [sp, #20]
 80239de:	4619      	mov	r1, r3
 80239e0:	f04f 0c0a 	mov.w	ip, #10
 80239e4:	4620      	mov	r0, r4
 80239e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80239ea:	3a30      	subs	r2, #48	@ 0x30
 80239ec:	2a09      	cmp	r2, #9
 80239ee:	d903      	bls.n	80239f8 <_vfiprintf_r+0x1cc>
 80239f0:	2b00      	cmp	r3, #0
 80239f2:	d0c6      	beq.n	8023982 <_vfiprintf_r+0x156>
 80239f4:	9105      	str	r1, [sp, #20]
 80239f6:	e7c4      	b.n	8023982 <_vfiprintf_r+0x156>
 80239f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80239fc:	4604      	mov	r4, r0
 80239fe:	2301      	movs	r3, #1
 8023a00:	e7f0      	b.n	80239e4 <_vfiprintf_r+0x1b8>
 8023a02:	ab03      	add	r3, sp, #12
 8023a04:	9300      	str	r3, [sp, #0]
 8023a06:	462a      	mov	r2, r5
 8023a08:	4b12      	ldr	r3, [pc, #72]	@ (8023a54 <_vfiprintf_r+0x228>)
 8023a0a:	a904      	add	r1, sp, #16
 8023a0c:	4630      	mov	r0, r6
 8023a0e:	f3af 8000 	nop.w
 8023a12:	4607      	mov	r7, r0
 8023a14:	1c78      	adds	r0, r7, #1
 8023a16:	d1d6      	bne.n	80239c6 <_vfiprintf_r+0x19a>
 8023a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8023a1a:	07d9      	lsls	r1, r3, #31
 8023a1c:	d405      	bmi.n	8023a2a <_vfiprintf_r+0x1fe>
 8023a1e:	89ab      	ldrh	r3, [r5, #12]
 8023a20:	059a      	lsls	r2, r3, #22
 8023a22:	d402      	bmi.n	8023a2a <_vfiprintf_r+0x1fe>
 8023a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8023a26:	f7ff fce3 	bl	80233f0 <__retarget_lock_release_recursive>
 8023a2a:	89ab      	ldrh	r3, [r5, #12]
 8023a2c:	065b      	lsls	r3, r3, #25
 8023a2e:	f53f af1f 	bmi.w	8023870 <_vfiprintf_r+0x44>
 8023a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8023a34:	e71e      	b.n	8023874 <_vfiprintf_r+0x48>
 8023a36:	ab03      	add	r3, sp, #12
 8023a38:	9300      	str	r3, [sp, #0]
 8023a3a:	462a      	mov	r2, r5
 8023a3c:	4b05      	ldr	r3, [pc, #20]	@ (8023a54 <_vfiprintf_r+0x228>)
 8023a3e:	a904      	add	r1, sp, #16
 8023a40:	4630      	mov	r0, r6
 8023a42:	f000 f879 	bl	8023b38 <_printf_i>
 8023a46:	e7e4      	b.n	8023a12 <_vfiprintf_r+0x1e6>
 8023a48:	08027874 	.word	0x08027874
 8023a4c:	0802787e 	.word	0x0802787e
 8023a50:	00000000 	.word	0x00000000
 8023a54:	08023809 	.word	0x08023809
 8023a58:	0802787a 	.word	0x0802787a

08023a5c <_printf_common>:
 8023a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023a60:	4616      	mov	r6, r2
 8023a62:	4698      	mov	r8, r3
 8023a64:	688a      	ldr	r2, [r1, #8]
 8023a66:	690b      	ldr	r3, [r1, #16]
 8023a68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8023a6c:	4293      	cmp	r3, r2
 8023a6e:	bfb8      	it	lt
 8023a70:	4613      	movlt	r3, r2
 8023a72:	6033      	str	r3, [r6, #0]
 8023a74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8023a78:	4607      	mov	r7, r0
 8023a7a:	460c      	mov	r4, r1
 8023a7c:	b10a      	cbz	r2, 8023a82 <_printf_common+0x26>
 8023a7e:	3301      	adds	r3, #1
 8023a80:	6033      	str	r3, [r6, #0]
 8023a82:	6823      	ldr	r3, [r4, #0]
 8023a84:	0699      	lsls	r1, r3, #26
 8023a86:	bf42      	ittt	mi
 8023a88:	6833      	ldrmi	r3, [r6, #0]
 8023a8a:	3302      	addmi	r3, #2
 8023a8c:	6033      	strmi	r3, [r6, #0]
 8023a8e:	6825      	ldr	r5, [r4, #0]
 8023a90:	f015 0506 	ands.w	r5, r5, #6
 8023a94:	d106      	bne.n	8023aa4 <_printf_common+0x48>
 8023a96:	f104 0a19 	add.w	sl, r4, #25
 8023a9a:	68e3      	ldr	r3, [r4, #12]
 8023a9c:	6832      	ldr	r2, [r6, #0]
 8023a9e:	1a9b      	subs	r3, r3, r2
 8023aa0:	42ab      	cmp	r3, r5
 8023aa2:	dc26      	bgt.n	8023af2 <_printf_common+0x96>
 8023aa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8023aa8:	6822      	ldr	r2, [r4, #0]
 8023aaa:	3b00      	subs	r3, #0
 8023aac:	bf18      	it	ne
 8023aae:	2301      	movne	r3, #1
 8023ab0:	0692      	lsls	r2, r2, #26
 8023ab2:	d42b      	bmi.n	8023b0c <_printf_common+0xb0>
 8023ab4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8023ab8:	4641      	mov	r1, r8
 8023aba:	4638      	mov	r0, r7
 8023abc:	47c8      	blx	r9
 8023abe:	3001      	adds	r0, #1
 8023ac0:	d01e      	beq.n	8023b00 <_printf_common+0xa4>
 8023ac2:	6823      	ldr	r3, [r4, #0]
 8023ac4:	6922      	ldr	r2, [r4, #16]
 8023ac6:	f003 0306 	and.w	r3, r3, #6
 8023aca:	2b04      	cmp	r3, #4
 8023acc:	bf02      	ittt	eq
 8023ace:	68e5      	ldreq	r5, [r4, #12]
 8023ad0:	6833      	ldreq	r3, [r6, #0]
 8023ad2:	1aed      	subeq	r5, r5, r3
 8023ad4:	68a3      	ldr	r3, [r4, #8]
 8023ad6:	bf0c      	ite	eq
 8023ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023adc:	2500      	movne	r5, #0
 8023ade:	4293      	cmp	r3, r2
 8023ae0:	bfc4      	itt	gt
 8023ae2:	1a9b      	subgt	r3, r3, r2
 8023ae4:	18ed      	addgt	r5, r5, r3
 8023ae6:	2600      	movs	r6, #0
 8023ae8:	341a      	adds	r4, #26
 8023aea:	42b5      	cmp	r5, r6
 8023aec:	d11a      	bne.n	8023b24 <_printf_common+0xc8>
 8023aee:	2000      	movs	r0, #0
 8023af0:	e008      	b.n	8023b04 <_printf_common+0xa8>
 8023af2:	2301      	movs	r3, #1
 8023af4:	4652      	mov	r2, sl
 8023af6:	4641      	mov	r1, r8
 8023af8:	4638      	mov	r0, r7
 8023afa:	47c8      	blx	r9
 8023afc:	3001      	adds	r0, #1
 8023afe:	d103      	bne.n	8023b08 <_printf_common+0xac>
 8023b00:	f04f 30ff 	mov.w	r0, #4294967295
 8023b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023b08:	3501      	adds	r5, #1
 8023b0a:	e7c6      	b.n	8023a9a <_printf_common+0x3e>
 8023b0c:	18e1      	adds	r1, r4, r3
 8023b0e:	1c5a      	adds	r2, r3, #1
 8023b10:	2030      	movs	r0, #48	@ 0x30
 8023b12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8023b16:	4422      	add	r2, r4
 8023b18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8023b1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8023b20:	3302      	adds	r3, #2
 8023b22:	e7c7      	b.n	8023ab4 <_printf_common+0x58>
 8023b24:	2301      	movs	r3, #1
 8023b26:	4622      	mov	r2, r4
 8023b28:	4641      	mov	r1, r8
 8023b2a:	4638      	mov	r0, r7
 8023b2c:	47c8      	blx	r9
 8023b2e:	3001      	adds	r0, #1
 8023b30:	d0e6      	beq.n	8023b00 <_printf_common+0xa4>
 8023b32:	3601      	adds	r6, #1
 8023b34:	e7d9      	b.n	8023aea <_printf_common+0x8e>
	...

08023b38 <_printf_i>:
 8023b38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8023b3c:	7e0f      	ldrb	r7, [r1, #24]
 8023b3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8023b40:	2f78      	cmp	r7, #120	@ 0x78
 8023b42:	4691      	mov	r9, r2
 8023b44:	4680      	mov	r8, r0
 8023b46:	460c      	mov	r4, r1
 8023b48:	469a      	mov	sl, r3
 8023b4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8023b4e:	d807      	bhi.n	8023b60 <_printf_i+0x28>
 8023b50:	2f62      	cmp	r7, #98	@ 0x62
 8023b52:	d80a      	bhi.n	8023b6a <_printf_i+0x32>
 8023b54:	2f00      	cmp	r7, #0
 8023b56:	f000 80d2 	beq.w	8023cfe <_printf_i+0x1c6>
 8023b5a:	2f58      	cmp	r7, #88	@ 0x58
 8023b5c:	f000 80b9 	beq.w	8023cd2 <_printf_i+0x19a>
 8023b60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023b64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8023b68:	e03a      	b.n	8023be0 <_printf_i+0xa8>
 8023b6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8023b6e:	2b15      	cmp	r3, #21
 8023b70:	d8f6      	bhi.n	8023b60 <_printf_i+0x28>
 8023b72:	a101      	add	r1, pc, #4	@ (adr r1, 8023b78 <_printf_i+0x40>)
 8023b74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8023b78:	08023bd1 	.word	0x08023bd1
 8023b7c:	08023be5 	.word	0x08023be5
 8023b80:	08023b61 	.word	0x08023b61
 8023b84:	08023b61 	.word	0x08023b61
 8023b88:	08023b61 	.word	0x08023b61
 8023b8c:	08023b61 	.word	0x08023b61
 8023b90:	08023be5 	.word	0x08023be5
 8023b94:	08023b61 	.word	0x08023b61
 8023b98:	08023b61 	.word	0x08023b61
 8023b9c:	08023b61 	.word	0x08023b61
 8023ba0:	08023b61 	.word	0x08023b61
 8023ba4:	08023ce5 	.word	0x08023ce5
 8023ba8:	08023c0f 	.word	0x08023c0f
 8023bac:	08023c9f 	.word	0x08023c9f
 8023bb0:	08023b61 	.word	0x08023b61
 8023bb4:	08023b61 	.word	0x08023b61
 8023bb8:	08023d07 	.word	0x08023d07
 8023bbc:	08023b61 	.word	0x08023b61
 8023bc0:	08023c0f 	.word	0x08023c0f
 8023bc4:	08023b61 	.word	0x08023b61
 8023bc8:	08023b61 	.word	0x08023b61
 8023bcc:	08023ca7 	.word	0x08023ca7
 8023bd0:	6833      	ldr	r3, [r6, #0]
 8023bd2:	1d1a      	adds	r2, r3, #4
 8023bd4:	681b      	ldr	r3, [r3, #0]
 8023bd6:	6032      	str	r2, [r6, #0]
 8023bd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8023bdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8023be0:	2301      	movs	r3, #1
 8023be2:	e09d      	b.n	8023d20 <_printf_i+0x1e8>
 8023be4:	6833      	ldr	r3, [r6, #0]
 8023be6:	6820      	ldr	r0, [r4, #0]
 8023be8:	1d19      	adds	r1, r3, #4
 8023bea:	6031      	str	r1, [r6, #0]
 8023bec:	0606      	lsls	r6, r0, #24
 8023bee:	d501      	bpl.n	8023bf4 <_printf_i+0xbc>
 8023bf0:	681d      	ldr	r5, [r3, #0]
 8023bf2:	e003      	b.n	8023bfc <_printf_i+0xc4>
 8023bf4:	0645      	lsls	r5, r0, #25
 8023bf6:	d5fb      	bpl.n	8023bf0 <_printf_i+0xb8>
 8023bf8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8023bfc:	2d00      	cmp	r5, #0
 8023bfe:	da03      	bge.n	8023c08 <_printf_i+0xd0>
 8023c00:	232d      	movs	r3, #45	@ 0x2d
 8023c02:	426d      	negs	r5, r5
 8023c04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023c08:	4859      	ldr	r0, [pc, #356]	@ (8023d70 <_printf_i+0x238>)
 8023c0a:	230a      	movs	r3, #10
 8023c0c:	e011      	b.n	8023c32 <_printf_i+0xfa>
 8023c0e:	6821      	ldr	r1, [r4, #0]
 8023c10:	6833      	ldr	r3, [r6, #0]
 8023c12:	0608      	lsls	r0, r1, #24
 8023c14:	f853 5b04 	ldr.w	r5, [r3], #4
 8023c18:	d402      	bmi.n	8023c20 <_printf_i+0xe8>
 8023c1a:	0649      	lsls	r1, r1, #25
 8023c1c:	bf48      	it	mi
 8023c1e:	b2ad      	uxthmi	r5, r5
 8023c20:	2f6f      	cmp	r7, #111	@ 0x6f
 8023c22:	4853      	ldr	r0, [pc, #332]	@ (8023d70 <_printf_i+0x238>)
 8023c24:	6033      	str	r3, [r6, #0]
 8023c26:	bf14      	ite	ne
 8023c28:	230a      	movne	r3, #10
 8023c2a:	2308      	moveq	r3, #8
 8023c2c:	2100      	movs	r1, #0
 8023c2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8023c32:	6866      	ldr	r6, [r4, #4]
 8023c34:	60a6      	str	r6, [r4, #8]
 8023c36:	2e00      	cmp	r6, #0
 8023c38:	bfa2      	ittt	ge
 8023c3a:	6821      	ldrge	r1, [r4, #0]
 8023c3c:	f021 0104 	bicge.w	r1, r1, #4
 8023c40:	6021      	strge	r1, [r4, #0]
 8023c42:	b90d      	cbnz	r5, 8023c48 <_printf_i+0x110>
 8023c44:	2e00      	cmp	r6, #0
 8023c46:	d04b      	beq.n	8023ce0 <_printf_i+0x1a8>
 8023c48:	4616      	mov	r6, r2
 8023c4a:	fbb5 f1f3 	udiv	r1, r5, r3
 8023c4e:	fb03 5711 	mls	r7, r3, r1, r5
 8023c52:	5dc7      	ldrb	r7, [r0, r7]
 8023c54:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8023c58:	462f      	mov	r7, r5
 8023c5a:	42bb      	cmp	r3, r7
 8023c5c:	460d      	mov	r5, r1
 8023c5e:	d9f4      	bls.n	8023c4a <_printf_i+0x112>
 8023c60:	2b08      	cmp	r3, #8
 8023c62:	d10b      	bne.n	8023c7c <_printf_i+0x144>
 8023c64:	6823      	ldr	r3, [r4, #0]
 8023c66:	07df      	lsls	r7, r3, #31
 8023c68:	d508      	bpl.n	8023c7c <_printf_i+0x144>
 8023c6a:	6923      	ldr	r3, [r4, #16]
 8023c6c:	6861      	ldr	r1, [r4, #4]
 8023c6e:	4299      	cmp	r1, r3
 8023c70:	bfde      	ittt	le
 8023c72:	2330      	movle	r3, #48	@ 0x30
 8023c74:	f806 3c01 	strble.w	r3, [r6, #-1]
 8023c78:	f106 36ff 	addle.w	r6, r6, #4294967295
 8023c7c:	1b92      	subs	r2, r2, r6
 8023c7e:	6122      	str	r2, [r4, #16]
 8023c80:	f8cd a000 	str.w	sl, [sp]
 8023c84:	464b      	mov	r3, r9
 8023c86:	aa03      	add	r2, sp, #12
 8023c88:	4621      	mov	r1, r4
 8023c8a:	4640      	mov	r0, r8
 8023c8c:	f7ff fee6 	bl	8023a5c <_printf_common>
 8023c90:	3001      	adds	r0, #1
 8023c92:	d14a      	bne.n	8023d2a <_printf_i+0x1f2>
 8023c94:	f04f 30ff 	mov.w	r0, #4294967295
 8023c98:	b004      	add	sp, #16
 8023c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023c9e:	6823      	ldr	r3, [r4, #0]
 8023ca0:	f043 0320 	orr.w	r3, r3, #32
 8023ca4:	6023      	str	r3, [r4, #0]
 8023ca6:	4833      	ldr	r0, [pc, #204]	@ (8023d74 <_printf_i+0x23c>)
 8023ca8:	2778      	movs	r7, #120	@ 0x78
 8023caa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8023cae:	6823      	ldr	r3, [r4, #0]
 8023cb0:	6831      	ldr	r1, [r6, #0]
 8023cb2:	061f      	lsls	r7, r3, #24
 8023cb4:	f851 5b04 	ldr.w	r5, [r1], #4
 8023cb8:	d402      	bmi.n	8023cc0 <_printf_i+0x188>
 8023cba:	065f      	lsls	r7, r3, #25
 8023cbc:	bf48      	it	mi
 8023cbe:	b2ad      	uxthmi	r5, r5
 8023cc0:	6031      	str	r1, [r6, #0]
 8023cc2:	07d9      	lsls	r1, r3, #31
 8023cc4:	bf44      	itt	mi
 8023cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8023cca:	6023      	strmi	r3, [r4, #0]
 8023ccc:	b11d      	cbz	r5, 8023cd6 <_printf_i+0x19e>
 8023cce:	2310      	movs	r3, #16
 8023cd0:	e7ac      	b.n	8023c2c <_printf_i+0xf4>
 8023cd2:	4827      	ldr	r0, [pc, #156]	@ (8023d70 <_printf_i+0x238>)
 8023cd4:	e7e9      	b.n	8023caa <_printf_i+0x172>
 8023cd6:	6823      	ldr	r3, [r4, #0]
 8023cd8:	f023 0320 	bic.w	r3, r3, #32
 8023cdc:	6023      	str	r3, [r4, #0]
 8023cde:	e7f6      	b.n	8023cce <_printf_i+0x196>
 8023ce0:	4616      	mov	r6, r2
 8023ce2:	e7bd      	b.n	8023c60 <_printf_i+0x128>
 8023ce4:	6833      	ldr	r3, [r6, #0]
 8023ce6:	6825      	ldr	r5, [r4, #0]
 8023ce8:	6961      	ldr	r1, [r4, #20]
 8023cea:	1d18      	adds	r0, r3, #4
 8023cec:	6030      	str	r0, [r6, #0]
 8023cee:	062e      	lsls	r6, r5, #24
 8023cf0:	681b      	ldr	r3, [r3, #0]
 8023cf2:	d501      	bpl.n	8023cf8 <_printf_i+0x1c0>
 8023cf4:	6019      	str	r1, [r3, #0]
 8023cf6:	e002      	b.n	8023cfe <_printf_i+0x1c6>
 8023cf8:	0668      	lsls	r0, r5, #25
 8023cfa:	d5fb      	bpl.n	8023cf4 <_printf_i+0x1bc>
 8023cfc:	8019      	strh	r1, [r3, #0]
 8023cfe:	2300      	movs	r3, #0
 8023d00:	6123      	str	r3, [r4, #16]
 8023d02:	4616      	mov	r6, r2
 8023d04:	e7bc      	b.n	8023c80 <_printf_i+0x148>
 8023d06:	6833      	ldr	r3, [r6, #0]
 8023d08:	1d1a      	adds	r2, r3, #4
 8023d0a:	6032      	str	r2, [r6, #0]
 8023d0c:	681e      	ldr	r6, [r3, #0]
 8023d0e:	6862      	ldr	r2, [r4, #4]
 8023d10:	2100      	movs	r1, #0
 8023d12:	4630      	mov	r0, r6
 8023d14:	f7dc fafc 	bl	8000310 <memchr>
 8023d18:	b108      	cbz	r0, 8023d1e <_printf_i+0x1e6>
 8023d1a:	1b80      	subs	r0, r0, r6
 8023d1c:	6060      	str	r0, [r4, #4]
 8023d1e:	6863      	ldr	r3, [r4, #4]
 8023d20:	6123      	str	r3, [r4, #16]
 8023d22:	2300      	movs	r3, #0
 8023d24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8023d28:	e7aa      	b.n	8023c80 <_printf_i+0x148>
 8023d2a:	6923      	ldr	r3, [r4, #16]
 8023d2c:	4632      	mov	r2, r6
 8023d2e:	4649      	mov	r1, r9
 8023d30:	4640      	mov	r0, r8
 8023d32:	47d0      	blx	sl
 8023d34:	3001      	adds	r0, #1
 8023d36:	d0ad      	beq.n	8023c94 <_printf_i+0x15c>
 8023d38:	6823      	ldr	r3, [r4, #0]
 8023d3a:	079b      	lsls	r3, r3, #30
 8023d3c:	d413      	bmi.n	8023d66 <_printf_i+0x22e>
 8023d3e:	68e0      	ldr	r0, [r4, #12]
 8023d40:	9b03      	ldr	r3, [sp, #12]
 8023d42:	4298      	cmp	r0, r3
 8023d44:	bfb8      	it	lt
 8023d46:	4618      	movlt	r0, r3
 8023d48:	e7a6      	b.n	8023c98 <_printf_i+0x160>
 8023d4a:	2301      	movs	r3, #1
 8023d4c:	4632      	mov	r2, r6
 8023d4e:	4649      	mov	r1, r9
 8023d50:	4640      	mov	r0, r8
 8023d52:	47d0      	blx	sl
 8023d54:	3001      	adds	r0, #1
 8023d56:	d09d      	beq.n	8023c94 <_printf_i+0x15c>
 8023d58:	3501      	adds	r5, #1
 8023d5a:	68e3      	ldr	r3, [r4, #12]
 8023d5c:	9903      	ldr	r1, [sp, #12]
 8023d5e:	1a5b      	subs	r3, r3, r1
 8023d60:	42ab      	cmp	r3, r5
 8023d62:	dcf2      	bgt.n	8023d4a <_printf_i+0x212>
 8023d64:	e7eb      	b.n	8023d3e <_printf_i+0x206>
 8023d66:	2500      	movs	r5, #0
 8023d68:	f104 0619 	add.w	r6, r4, #25
 8023d6c:	e7f5      	b.n	8023d5a <_printf_i+0x222>
 8023d6e:	bf00      	nop
 8023d70:	08027885 	.word	0x08027885
 8023d74:	08027896 	.word	0x08027896

08023d78 <__swbuf_r>:
 8023d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023d7a:	460e      	mov	r6, r1
 8023d7c:	4614      	mov	r4, r2
 8023d7e:	4605      	mov	r5, r0
 8023d80:	b118      	cbz	r0, 8023d8a <__swbuf_r+0x12>
 8023d82:	6a03      	ldr	r3, [r0, #32]
 8023d84:	b90b      	cbnz	r3, 8023d8a <__swbuf_r+0x12>
 8023d86:	f7ff f9ef 	bl	8023168 <__sinit>
 8023d8a:	69a3      	ldr	r3, [r4, #24]
 8023d8c:	60a3      	str	r3, [r4, #8]
 8023d8e:	89a3      	ldrh	r3, [r4, #12]
 8023d90:	071a      	lsls	r2, r3, #28
 8023d92:	d501      	bpl.n	8023d98 <__swbuf_r+0x20>
 8023d94:	6923      	ldr	r3, [r4, #16]
 8023d96:	b943      	cbnz	r3, 8023daa <__swbuf_r+0x32>
 8023d98:	4621      	mov	r1, r4
 8023d9a:	4628      	mov	r0, r5
 8023d9c:	f000 f82a 	bl	8023df4 <__swsetup_r>
 8023da0:	b118      	cbz	r0, 8023daa <__swbuf_r+0x32>
 8023da2:	f04f 37ff 	mov.w	r7, #4294967295
 8023da6:	4638      	mov	r0, r7
 8023da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023daa:	6823      	ldr	r3, [r4, #0]
 8023dac:	6922      	ldr	r2, [r4, #16]
 8023dae:	1a98      	subs	r0, r3, r2
 8023db0:	6963      	ldr	r3, [r4, #20]
 8023db2:	b2f6      	uxtb	r6, r6
 8023db4:	4283      	cmp	r3, r0
 8023db6:	4637      	mov	r7, r6
 8023db8:	dc05      	bgt.n	8023dc6 <__swbuf_r+0x4e>
 8023dba:	4621      	mov	r1, r4
 8023dbc:	4628      	mov	r0, r5
 8023dbe:	f7ff fcbb 	bl	8023738 <_fflush_r>
 8023dc2:	2800      	cmp	r0, #0
 8023dc4:	d1ed      	bne.n	8023da2 <__swbuf_r+0x2a>
 8023dc6:	68a3      	ldr	r3, [r4, #8]
 8023dc8:	3b01      	subs	r3, #1
 8023dca:	60a3      	str	r3, [r4, #8]
 8023dcc:	6823      	ldr	r3, [r4, #0]
 8023dce:	1c5a      	adds	r2, r3, #1
 8023dd0:	6022      	str	r2, [r4, #0]
 8023dd2:	701e      	strb	r6, [r3, #0]
 8023dd4:	6962      	ldr	r2, [r4, #20]
 8023dd6:	1c43      	adds	r3, r0, #1
 8023dd8:	429a      	cmp	r2, r3
 8023dda:	d004      	beq.n	8023de6 <__swbuf_r+0x6e>
 8023ddc:	89a3      	ldrh	r3, [r4, #12]
 8023dde:	07db      	lsls	r3, r3, #31
 8023de0:	d5e1      	bpl.n	8023da6 <__swbuf_r+0x2e>
 8023de2:	2e0a      	cmp	r6, #10
 8023de4:	d1df      	bne.n	8023da6 <__swbuf_r+0x2e>
 8023de6:	4621      	mov	r1, r4
 8023de8:	4628      	mov	r0, r5
 8023dea:	f7ff fca5 	bl	8023738 <_fflush_r>
 8023dee:	2800      	cmp	r0, #0
 8023df0:	d0d9      	beq.n	8023da6 <__swbuf_r+0x2e>
 8023df2:	e7d6      	b.n	8023da2 <__swbuf_r+0x2a>

08023df4 <__swsetup_r>:
 8023df4:	b538      	push	{r3, r4, r5, lr}
 8023df6:	4b29      	ldr	r3, [pc, #164]	@ (8023e9c <__swsetup_r+0xa8>)
 8023df8:	4605      	mov	r5, r0
 8023dfa:	6818      	ldr	r0, [r3, #0]
 8023dfc:	460c      	mov	r4, r1
 8023dfe:	b118      	cbz	r0, 8023e08 <__swsetup_r+0x14>
 8023e00:	6a03      	ldr	r3, [r0, #32]
 8023e02:	b90b      	cbnz	r3, 8023e08 <__swsetup_r+0x14>
 8023e04:	f7ff f9b0 	bl	8023168 <__sinit>
 8023e08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e0c:	0719      	lsls	r1, r3, #28
 8023e0e:	d422      	bmi.n	8023e56 <__swsetup_r+0x62>
 8023e10:	06da      	lsls	r2, r3, #27
 8023e12:	d407      	bmi.n	8023e24 <__swsetup_r+0x30>
 8023e14:	2209      	movs	r2, #9
 8023e16:	602a      	str	r2, [r5, #0]
 8023e18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8023e1c:	81a3      	strh	r3, [r4, #12]
 8023e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8023e22:	e033      	b.n	8023e8c <__swsetup_r+0x98>
 8023e24:	0758      	lsls	r0, r3, #29
 8023e26:	d512      	bpl.n	8023e4e <__swsetup_r+0x5a>
 8023e28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8023e2a:	b141      	cbz	r1, 8023e3e <__swsetup_r+0x4a>
 8023e2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8023e30:	4299      	cmp	r1, r3
 8023e32:	d002      	beq.n	8023e3a <__swsetup_r+0x46>
 8023e34:	4628      	mov	r0, r5
 8023e36:	f7ff fafb 	bl	8023430 <_free_r>
 8023e3a:	2300      	movs	r3, #0
 8023e3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8023e3e:	89a3      	ldrh	r3, [r4, #12]
 8023e40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8023e44:	81a3      	strh	r3, [r4, #12]
 8023e46:	2300      	movs	r3, #0
 8023e48:	6063      	str	r3, [r4, #4]
 8023e4a:	6923      	ldr	r3, [r4, #16]
 8023e4c:	6023      	str	r3, [r4, #0]
 8023e4e:	89a3      	ldrh	r3, [r4, #12]
 8023e50:	f043 0308 	orr.w	r3, r3, #8
 8023e54:	81a3      	strh	r3, [r4, #12]
 8023e56:	6923      	ldr	r3, [r4, #16]
 8023e58:	b94b      	cbnz	r3, 8023e6e <__swsetup_r+0x7a>
 8023e5a:	89a3      	ldrh	r3, [r4, #12]
 8023e5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8023e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8023e64:	d003      	beq.n	8023e6e <__swsetup_r+0x7a>
 8023e66:	4621      	mov	r1, r4
 8023e68:	4628      	mov	r0, r5
 8023e6a:	f000 f883 	bl	8023f74 <__smakebuf_r>
 8023e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023e72:	f013 0201 	ands.w	r2, r3, #1
 8023e76:	d00a      	beq.n	8023e8e <__swsetup_r+0x9a>
 8023e78:	2200      	movs	r2, #0
 8023e7a:	60a2      	str	r2, [r4, #8]
 8023e7c:	6962      	ldr	r2, [r4, #20]
 8023e7e:	4252      	negs	r2, r2
 8023e80:	61a2      	str	r2, [r4, #24]
 8023e82:	6922      	ldr	r2, [r4, #16]
 8023e84:	b942      	cbnz	r2, 8023e98 <__swsetup_r+0xa4>
 8023e86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8023e8a:	d1c5      	bne.n	8023e18 <__swsetup_r+0x24>
 8023e8c:	bd38      	pop	{r3, r4, r5, pc}
 8023e8e:	0799      	lsls	r1, r3, #30
 8023e90:	bf58      	it	pl
 8023e92:	6962      	ldrpl	r2, [r4, #20]
 8023e94:	60a2      	str	r2, [r4, #8]
 8023e96:	e7f4      	b.n	8023e82 <__swsetup_r+0x8e>
 8023e98:	2000      	movs	r0, #0
 8023e9a:	e7f7      	b.n	8023e8c <__swsetup_r+0x98>
 8023e9c:	20000038 	.word	0x20000038

08023ea0 <_raise_r>:
 8023ea0:	291f      	cmp	r1, #31
 8023ea2:	b538      	push	{r3, r4, r5, lr}
 8023ea4:	4605      	mov	r5, r0
 8023ea6:	460c      	mov	r4, r1
 8023ea8:	d904      	bls.n	8023eb4 <_raise_r+0x14>
 8023eaa:	2316      	movs	r3, #22
 8023eac:	6003      	str	r3, [r0, #0]
 8023eae:	f04f 30ff 	mov.w	r0, #4294967295
 8023eb2:	bd38      	pop	{r3, r4, r5, pc}
 8023eb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8023eb6:	b112      	cbz	r2, 8023ebe <_raise_r+0x1e>
 8023eb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023ebc:	b94b      	cbnz	r3, 8023ed2 <_raise_r+0x32>
 8023ebe:	4628      	mov	r0, r5
 8023ec0:	f000 f830 	bl	8023f24 <_getpid_r>
 8023ec4:	4622      	mov	r2, r4
 8023ec6:	4601      	mov	r1, r0
 8023ec8:	4628      	mov	r0, r5
 8023eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023ece:	f000 b817 	b.w	8023f00 <_kill_r>
 8023ed2:	2b01      	cmp	r3, #1
 8023ed4:	d00a      	beq.n	8023eec <_raise_r+0x4c>
 8023ed6:	1c59      	adds	r1, r3, #1
 8023ed8:	d103      	bne.n	8023ee2 <_raise_r+0x42>
 8023eda:	2316      	movs	r3, #22
 8023edc:	6003      	str	r3, [r0, #0]
 8023ede:	2001      	movs	r0, #1
 8023ee0:	e7e7      	b.n	8023eb2 <_raise_r+0x12>
 8023ee2:	2100      	movs	r1, #0
 8023ee4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8023ee8:	4620      	mov	r0, r4
 8023eea:	4798      	blx	r3
 8023eec:	2000      	movs	r0, #0
 8023eee:	e7e0      	b.n	8023eb2 <_raise_r+0x12>

08023ef0 <raise>:
 8023ef0:	4b02      	ldr	r3, [pc, #8]	@ (8023efc <raise+0xc>)
 8023ef2:	4601      	mov	r1, r0
 8023ef4:	6818      	ldr	r0, [r3, #0]
 8023ef6:	f7ff bfd3 	b.w	8023ea0 <_raise_r>
 8023efa:	bf00      	nop
 8023efc:	20000038 	.word	0x20000038

08023f00 <_kill_r>:
 8023f00:	b538      	push	{r3, r4, r5, lr}
 8023f02:	4d07      	ldr	r5, [pc, #28]	@ (8023f20 <_kill_r+0x20>)
 8023f04:	2300      	movs	r3, #0
 8023f06:	4604      	mov	r4, r0
 8023f08:	4608      	mov	r0, r1
 8023f0a:	4611      	mov	r1, r2
 8023f0c:	602b      	str	r3, [r5, #0]
 8023f0e:	f7de fe6b 	bl	8002be8 <_kill>
 8023f12:	1c43      	adds	r3, r0, #1
 8023f14:	d102      	bne.n	8023f1c <_kill_r+0x1c>
 8023f16:	682b      	ldr	r3, [r5, #0]
 8023f18:	b103      	cbz	r3, 8023f1c <_kill_r+0x1c>
 8023f1a:	6023      	str	r3, [r4, #0]
 8023f1c:	bd38      	pop	{r3, r4, r5, pc}
 8023f1e:	bf00      	nop
 8023f20:	200027f0 	.word	0x200027f0

08023f24 <_getpid_r>:
 8023f24:	f7de be58 	b.w	8002bd8 <_getpid>

08023f28 <__swhatbuf_r>:
 8023f28:	b570      	push	{r4, r5, r6, lr}
 8023f2a:	460c      	mov	r4, r1
 8023f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023f30:	2900      	cmp	r1, #0
 8023f32:	b096      	sub	sp, #88	@ 0x58
 8023f34:	4615      	mov	r5, r2
 8023f36:	461e      	mov	r6, r3
 8023f38:	da0d      	bge.n	8023f56 <__swhatbuf_r+0x2e>
 8023f3a:	89a3      	ldrh	r3, [r4, #12]
 8023f3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8023f40:	f04f 0100 	mov.w	r1, #0
 8023f44:	bf14      	ite	ne
 8023f46:	2340      	movne	r3, #64	@ 0x40
 8023f48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023f4c:	2000      	movs	r0, #0
 8023f4e:	6031      	str	r1, [r6, #0]
 8023f50:	602b      	str	r3, [r5, #0]
 8023f52:	b016      	add	sp, #88	@ 0x58
 8023f54:	bd70      	pop	{r4, r5, r6, pc}
 8023f56:	466a      	mov	r2, sp
 8023f58:	f000 f848 	bl	8023fec <_fstat_r>
 8023f5c:	2800      	cmp	r0, #0
 8023f5e:	dbec      	blt.n	8023f3a <__swhatbuf_r+0x12>
 8023f60:	9901      	ldr	r1, [sp, #4]
 8023f62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023f66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023f6a:	4259      	negs	r1, r3
 8023f6c:	4159      	adcs	r1, r3
 8023f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8023f72:	e7eb      	b.n	8023f4c <__swhatbuf_r+0x24>

08023f74 <__smakebuf_r>:
 8023f74:	898b      	ldrh	r3, [r1, #12]
 8023f76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023f78:	079d      	lsls	r5, r3, #30
 8023f7a:	4606      	mov	r6, r0
 8023f7c:	460c      	mov	r4, r1
 8023f7e:	d507      	bpl.n	8023f90 <__smakebuf_r+0x1c>
 8023f80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023f84:	6023      	str	r3, [r4, #0]
 8023f86:	6123      	str	r3, [r4, #16]
 8023f88:	2301      	movs	r3, #1
 8023f8a:	6163      	str	r3, [r4, #20]
 8023f8c:	b003      	add	sp, #12
 8023f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023f90:	ab01      	add	r3, sp, #4
 8023f92:	466a      	mov	r2, sp
 8023f94:	f7ff ffc8 	bl	8023f28 <__swhatbuf_r>
 8023f98:	9f00      	ldr	r7, [sp, #0]
 8023f9a:	4605      	mov	r5, r0
 8023f9c:	4639      	mov	r1, r7
 8023f9e:	4630      	mov	r0, r6
 8023fa0:	f7ff faba 	bl	8023518 <_malloc_r>
 8023fa4:	b948      	cbnz	r0, 8023fba <__smakebuf_r+0x46>
 8023fa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023faa:	059a      	lsls	r2, r3, #22
 8023fac:	d4ee      	bmi.n	8023f8c <__smakebuf_r+0x18>
 8023fae:	f023 0303 	bic.w	r3, r3, #3
 8023fb2:	f043 0302 	orr.w	r3, r3, #2
 8023fb6:	81a3      	strh	r3, [r4, #12]
 8023fb8:	e7e2      	b.n	8023f80 <__smakebuf_r+0xc>
 8023fba:	89a3      	ldrh	r3, [r4, #12]
 8023fbc:	6020      	str	r0, [r4, #0]
 8023fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8023fc2:	81a3      	strh	r3, [r4, #12]
 8023fc4:	9b01      	ldr	r3, [sp, #4]
 8023fc6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8023fca:	b15b      	cbz	r3, 8023fe4 <__smakebuf_r+0x70>
 8023fcc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023fd0:	4630      	mov	r0, r6
 8023fd2:	f000 f81d 	bl	8024010 <_isatty_r>
 8023fd6:	b128      	cbz	r0, 8023fe4 <__smakebuf_r+0x70>
 8023fd8:	89a3      	ldrh	r3, [r4, #12]
 8023fda:	f023 0303 	bic.w	r3, r3, #3
 8023fde:	f043 0301 	orr.w	r3, r3, #1
 8023fe2:	81a3      	strh	r3, [r4, #12]
 8023fe4:	89a3      	ldrh	r3, [r4, #12]
 8023fe6:	431d      	orrs	r5, r3
 8023fe8:	81a5      	strh	r5, [r4, #12]
 8023fea:	e7cf      	b.n	8023f8c <__smakebuf_r+0x18>

08023fec <_fstat_r>:
 8023fec:	b538      	push	{r3, r4, r5, lr}
 8023fee:	4d07      	ldr	r5, [pc, #28]	@ (802400c <_fstat_r+0x20>)
 8023ff0:	2300      	movs	r3, #0
 8023ff2:	4604      	mov	r4, r0
 8023ff4:	4608      	mov	r0, r1
 8023ff6:	4611      	mov	r1, r2
 8023ff8:	602b      	str	r3, [r5, #0]
 8023ffa:	f7de fe55 	bl	8002ca8 <_fstat>
 8023ffe:	1c43      	adds	r3, r0, #1
 8024000:	d102      	bne.n	8024008 <_fstat_r+0x1c>
 8024002:	682b      	ldr	r3, [r5, #0]
 8024004:	b103      	cbz	r3, 8024008 <_fstat_r+0x1c>
 8024006:	6023      	str	r3, [r4, #0]
 8024008:	bd38      	pop	{r3, r4, r5, pc}
 802400a:	bf00      	nop
 802400c:	200027f0 	.word	0x200027f0

08024010 <_isatty_r>:
 8024010:	b538      	push	{r3, r4, r5, lr}
 8024012:	4d06      	ldr	r5, [pc, #24]	@ (802402c <_isatty_r+0x1c>)
 8024014:	2300      	movs	r3, #0
 8024016:	4604      	mov	r4, r0
 8024018:	4608      	mov	r0, r1
 802401a:	602b      	str	r3, [r5, #0]
 802401c:	f7de fe54 	bl	8002cc8 <_isatty>
 8024020:	1c43      	adds	r3, r0, #1
 8024022:	d102      	bne.n	802402a <_isatty_r+0x1a>
 8024024:	682b      	ldr	r3, [r5, #0]
 8024026:	b103      	cbz	r3, 802402a <_isatty_r+0x1a>
 8024028:	6023      	str	r3, [r4, #0]
 802402a:	bd38      	pop	{r3, r4, r5, pc}
 802402c:	200027f0 	.word	0x200027f0

08024030 <_init>:
 8024030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024032:	bf00      	nop
 8024034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024036:	bc08      	pop	{r3}
 8024038:	469e      	mov	lr, r3
 802403a:	4770      	bx	lr

0802403c <_fini>:
 802403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802403e:	bf00      	nop
 8024040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8024042:	bc08      	pop	{r3}
 8024044:	469e      	mov	lr, r3
 8024046:	4770      	bx	lr
